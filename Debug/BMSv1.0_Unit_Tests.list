
BMSv1.0_Unit_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b678  0800b678  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800b678  0800b678  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b678  0800b678  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b678  0800b678  0001b678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b67c  0800b67c  0001b67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000048e0  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004968  20004968  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013eeb  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bc1  00000000  00000000  00033fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00036b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca8  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7fb  00000000  00000000  000385d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b5f  00000000  00000000  00056dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b305b  00000000  00000000  0006a92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011d985  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cf4  00000000  00000000  0011d9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acf0 	.word	0x0800acf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800acf0 	.word	0x0800acf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <SELECT+0x1c>)
 8000898:	f002 fc6c 	bl	8003174 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f001 fb6d 	bl	8001f7c <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000400 	.word	0x48000400

080008ac <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <DESELECT+0x1c>)
 80008b8:	f002 fc5c 	bl	8003174 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f001 fb5d 	bl	8001f7c <HAL_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	48000400 	.word	0x48000400

080008cc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008d6:	bf00      	nop
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <SPI_TxByte+0x30>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d1f8      	bne.n	80008d8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	2201      	movs	r2, #1
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <SPI_TxByte+0x30>)
 80008ee:	f004 f80c 	bl	800490a <HAL_SPI_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200002f0 	.word	0x200002f0

08000900 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800090c:	bf00      	nop
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <SPI_TxBuffer+0x30>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	2b02      	cmp	r3, #2
 800091a:	d1f8      	bne.n	800090e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800091c:	887a      	ldrh	r2, [r7, #2]
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <SPI_TxBuffer+0x30>)
 8000924:	f003 fff1 	bl	800490a <HAL_SPI_Transmit>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002f0 	.word	0x200002f0

08000934 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800093a:	23ff      	movs	r3, #255	; 0xff
 800093c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800093e:	bf00      	nop
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <SPI_RxByte+0x34>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1f8      	bne.n	8000940 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800094e:	1dba      	adds	r2, r7, #6
 8000950:	1df9      	adds	r1, r7, #7
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <SPI_RxByte+0x34>)
 800095a:	f004 f944 	bl	8004be6 <HAL_SPI_TransmitReceive>

	return data;
 800095e:	79bb      	ldrb	r3, [r7, #6]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200002f0 	.word	0x200002f0

0800096c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000974:	f7ff ffde 	bl	8000934 <SPI_RxByte>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	701a      	strb	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <SD_ReadyWait+0x30>)
 8000990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000994:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000996:	f7ff ffcd 	bl	8000934 <SPI_RxByte>
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2bff      	cmp	r3, #255	; 0xff
 80009a2:	d004      	beq.n	80009ae <SD_ReadyWait+0x26>
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SD_ReadyWait+0x30>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f3      	bne.n	8000996 <SD_ReadyWait+0xe>

	return res;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200028ea 	.word	0x200028ea

080009bc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80009c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009c6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80009c8:	f7ff ff70 	bl	80008ac <DESELECT>
	for(int i = 0; i < 10; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	e005      	b.n	80009de <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80009d2:	20ff      	movs	r0, #255	; 0xff
 80009d4:	f7ff ff7a 	bl	80008cc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	3301      	adds	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b09      	cmp	r3, #9
 80009e2:	ddf6      	ble.n	80009d2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80009e4:	f7ff ff52 	bl	800088c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80009fc:	2395      	movs	r3, #149	; 0x95
 80009fe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a00:	463b      	mov	r3, r7
 8000a02:	2106      	movs	r1, #6
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff7b 	bl	8000900 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a0a:	e002      	b.n	8000a12 <SD_PowerOn+0x56>
	{
		cnt--;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a12:	f7ff ff8f 	bl	8000934 <SPI_RxByte>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d002      	beq.n	8000a22 <SD_PowerOn+0x66>
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f4      	bne.n	8000a0c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a22:	f7ff ff43 	bl	80008ac <DESELECT>
	SPI_TxByte(0XFF);
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	f7ff ff50 	bl	80008cc <SPI_TxByte>

	PowerFlag = 1;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <SD_PowerOn+0x80>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000a5 	.word	0x200000a5

08000a40 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <SD_PowerOff+0x14>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	200000a5 	.word	0x200000a5

08000a58 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <SD_CheckPower+0x14>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000a5 	.word	0x200000a5

08000a70 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <SD_RxDataBlock+0x5c>)
 8000a7c:	22c8      	movs	r2, #200	; 0xc8
 8000a7e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000a80:	f7ff ff58 	bl	8000934 <SPI_RxByte>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d104      	bne.n	8000a98 <SD_RxDataBlock+0x28>
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <SD_RxDataBlock+0x5c>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f3      	bne.n	8000a80 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2bfe      	cmp	r3, #254	; 0xfe
 8000a9c:	d001      	beq.n	8000aa2 <SD_RxDataBlock+0x32>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e00f      	b.n	8000ac2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5f 	bl	800096c <SPI_RxBytePtr>
	} while(len--);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	603a      	str	r2, [r7, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f4      	bne.n	8000aa2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000ab8:	f7ff ff3c 	bl	8000934 <SPI_RxByte>
	SPI_RxByte();
 8000abc:	f7ff ff3a 	bl	8000934 <SPI_RxByte>

	return TRUE;
 8000ac0:	2301      	movs	r3, #1
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200028ec 	.word	0x200028ec

08000ad0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ae0:	f7ff ff52 	bl	8000988 <SD_ReadyWait>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2bff      	cmp	r3, #255	; 0xff
 8000ae8:	d001      	beq.n	8000aee <SD_TxDataBlock+0x1e>
 8000aea:	2300      	movs	r3, #0
 8000aec:	e02f      	b.n	8000b4e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff feeb 	bl	80008cc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	2bfd      	cmp	r3, #253	; 0xfd
 8000afa:	d020      	beq.n	8000b3e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fefd 	bl	8000900 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b06:	f7ff ff15 	bl	8000934 <SPI_RxByte>
		SPI_RxByte();
 8000b0a:	f7ff ff13 	bl	8000934 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b0e:	e00b      	b.n	8000b28 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b10:	f7ff ff10 	bl	8000934 <SPI_RxByte>
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	2b05      	cmp	r3, #5
 8000b20:	d006      	beq.n	8000b30 <SD_TxDataBlock+0x60>
			i++;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	3301      	adds	r3, #1
 8000b26:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	2b40      	cmp	r3, #64	; 0x40
 8000b2c:	d9f0      	bls.n	8000b10 <SD_TxDataBlock+0x40>
 8000b2e:	e000      	b.n	8000b32 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b30:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b32:	bf00      	nop
 8000b34:	f7ff fefe 	bl	8000934 <SPI_RxByte>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0fa      	beq.n	8000b34 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	f003 031f 	and.w	r3, r3, #31
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d101      	bne.n	8000b4c <SD_TxDataBlock+0x7c>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	6039      	str	r1, [r7, #0]
 8000b60:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000b62:	f7ff ff11 	bl	8000988 <SD_ReadyWait>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2bff      	cmp	r3, #255	; 0xff
 8000b6a:	d001      	beq.n	8000b70 <SD_SendCmd+0x1a>
 8000b6c:	23ff      	movs	r3, #255	; 0xff
 8000b6e:	e042      	b.n	8000bf6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff feaa 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fea4 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fe9e 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe98 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe93 	bl	80008cc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b40      	cmp	r3, #64	; 0x40
 8000baa:	d102      	bne.n	8000bb2 <SD_SendCmd+0x5c>
 8000bac:	2395      	movs	r3, #149	; 0x95
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e007      	b.n	8000bc2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b48      	cmp	r3, #72	; 0x48
 8000bb6:	d102      	bne.n	8000bbe <SD_SendCmd+0x68>
 8000bb8:	2387      	movs	r3, #135	; 0x87
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e001      	b.n	8000bc2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fe81 	bl	80008cc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b4c      	cmp	r3, #76	; 0x4c
 8000bce:	d101      	bne.n	8000bd4 <SD_SendCmd+0x7e>
 8000bd0:	f7ff feb0 	bl	8000934 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000bd8:	f7ff feac 	bl	8000934 <SPI_RxByte>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000be0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da05      	bge.n	8000bf4 <SD_SendCmd+0x9e>
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	73bb      	strb	r3, [r7, #14]
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f1      	bne.n	8000bd8 <SD_SendCmd+0x82>

	return res;
 8000bf4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SD_disk_initialize+0x14>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e0d6      	b.n	8000dc2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c14:	4b6d      	ldr	r3, [pc, #436]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <SD_disk_initialize+0x2a>
 8000c22:	4b6a      	ldr	r3, [pc, #424]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	e0cb      	b.n	8000dc2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000c2a:	f7ff fec7 	bl	80009bc <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c2e:	f7ff fe2d 	bl	800088c <SELECT>

	/* check disk type */
	type = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c36:	2100      	movs	r1, #0
 8000c38:	2040      	movs	r0, #64	; 0x40
 8000c3a:	f7ff ff8c 	bl	8000b56 <SD_SendCmd>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	f040 80a6 	bne.w	8000d92 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c52:	2048      	movs	r0, #72	; 0x48
 8000c54:	f7ff ff7f 	bl	8000b56 <SD_SendCmd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d158      	bne.n	8000d10 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e00c      	b.n	8000c7e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000c64:	7bfc      	ldrb	r4, [r7, #15]
 8000c66:	f7ff fe65 	bl	8000934 <SPI_RxByte>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4423      	add	r3, r4
 8000c74:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d9ef      	bls.n	8000c64 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c84:	7abb      	ldrb	r3, [r7, #10]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	f040 8083 	bne.w	8000d92 <SD_disk_initialize+0x192>
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	2baa      	cmp	r3, #170	; 0xaa
 8000c90:	d17f      	bne.n	8000d92 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c92:	2100      	movs	r1, #0
 8000c94:	2077      	movs	r0, #119	; 0x77
 8000c96:	f7ff ff5e 	bl	8000b56 <SD_SendCmd>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d807      	bhi.n	8000cb0 <SD_disk_initialize+0xb0>
 8000ca0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ca4:	2069      	movs	r0, #105	; 0x69
 8000ca6:	f7ff ff56 	bl	8000b56 <SD_SendCmd>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000cb0:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1eb      	bne.n	8000c92 <SD_disk_initialize+0x92>
 8000cba:	e000      	b.n	8000cbe <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cbc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d064      	beq.n	8000d92 <SD_disk_initialize+0x192>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	207a      	movs	r0, #122	; 0x7a
 8000ccc:	f7ff ff43 	bl	8000b56 <SD_SendCmd>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d15d      	bne.n	8000d92 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e00c      	b.n	8000cf6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000cdc:	7bfc      	ldrb	r4, [r7, #15]
 8000cde:	f7ff fe29 	bl	8000934 <SPI_RxByte>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4423      	add	r3, r4
 8000cec:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d9ef      	bls.n	8000cdc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000cfc:	7a3b      	ldrb	r3, [r7, #8]
 8000cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SD_disk_initialize+0x10a>
 8000d06:	230c      	movs	r3, #12
 8000d08:	e000      	b.n	8000d0c <SD_disk_initialize+0x10c>
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	73bb      	strb	r3, [r7, #14]
 8000d0e:	e040      	b.n	8000d92 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d10:	2100      	movs	r1, #0
 8000d12:	2077      	movs	r0, #119	; 0x77
 8000d14:	f7ff ff1f 	bl	8000b56 <SD_SendCmd>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d808      	bhi.n	8000d30 <SD_disk_initialize+0x130>
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2069      	movs	r0, #105	; 0x69
 8000d22:	f7ff ff18 	bl	8000b56 <SD_SendCmd>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d801      	bhi.n	8000d30 <SD_disk_initialize+0x130>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e000      	b.n	8000d32 <SD_disk_initialize+0x132>
 8000d30:	2301      	movs	r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d10e      	bne.n	8000d58 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2077      	movs	r0, #119	; 0x77
 8000d3e:	f7ff ff0a 	bl	8000b56 <SD_SendCmd>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d80e      	bhi.n	8000d66 <SD_disk_initialize+0x166>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2069      	movs	r0, #105	; 0x69
 8000d4c:	f7ff ff03 	bl	8000b56 <SD_SendCmd>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <SD_disk_initialize+0x166>
 8000d56:	e00d      	b.n	8000d74 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2041      	movs	r0, #65	; 0x41
 8000d5c:	f7ff fefb 	bl	8000b56 <SD_SendCmd>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e1      	bne.n	8000d34 <SD_disk_initialize+0x134>
 8000d70:	e000      	b.n	8000d74 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d72:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d007      	beq.n	8000d8e <SD_disk_initialize+0x18e>
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	2050      	movs	r0, #80	; 0x50
 8000d84:	f7ff fee7 	bl	8000b56 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SD_disk_initialize+0x192>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <SD_disk_initialize+0x1d4>)
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000d98:	f7ff fd88 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000d9c:	f7ff fdca 	bl	8000934 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d008      	beq.n	8000db8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e001      	b.n	8000dbc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000db8:	f7ff fe42 	bl	8000a40 <SD_PowerOff>
	}

	return Stat;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	200028ec 	.word	0x200028ec
 8000dd4:	200000a4 	.word	0x200000a4

08000dd8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_status+0x14>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e002      	b.n	8000df2 <SD_disk_status+0x1a>
	return Stat;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SD_disk_status+0x28>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000000 	.word	0x20000000

08000e04 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <SD_disk_read+0x1c>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <SD_disk_read+0x20>
 8000e20:	2304      	movs	r3, #4
 8000e22:	e051      	b.n	8000ec8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <SD_disk_read+0xcc>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SD_disk_read+0x32>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e048      	b.n	8000ec8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <SD_disk_read+0xd0>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <SD_disk_read+0x44>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	025b      	lsls	r3, r3, #9
 8000e46:	607b      	str	r3, [r7, #4]

	SELECT();
 8000e48:	f7ff fd20 	bl	800088c <SELECT>

	if (count == 1)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d111      	bne.n	8000e76 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	2051      	movs	r0, #81	; 0x51
 8000e56:	f7ff fe7e 	bl	8000b56 <SD_SendCmd>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d129      	bne.n	8000eb4 <SD_disk_read+0xb0>
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f7ff fe03 	bl	8000a70 <SD_RxDataBlock>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d021      	beq.n	8000eb4 <SD_disk_read+0xb0>
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	e01e      	b.n	8000eb4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2052      	movs	r0, #82	; 0x52
 8000e7a:	f7ff fe6c 	bl	8000b56 <SD_SendCmd>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d117      	bne.n	8000eb4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e88:	68b8      	ldr	r0, [r7, #8]
 8000e8a:	f7ff fdf1 	bl	8000a70 <SD_RxDataBlock>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00a      	beq.n	8000eaa <SD_disk_read+0xa6>
				buff += 512;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1ed      	bne.n	8000e84 <SD_disk_read+0x80>
 8000ea8:	e000      	b.n	8000eac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000eaa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	204c      	movs	r0, #76	; 0x4c
 8000eb0:	f7ff fe51 	bl	8000b56 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000eb4:	f7ff fcfa 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000eb8:	f7ff fd3c 	bl	8000934 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	200000a4 	.word	0x200000a4

08000ed8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <SD_disk_write+0x1c>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <SD_disk_write+0x20>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e06b      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <SD_disk_write+0x100>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SD_disk_write+0x32>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e062      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <SD_disk_write+0x100>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SD_disk_write+0x44>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e059      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <SD_disk_write+0x104>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <SD_disk_write+0x56>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f2e:	f7ff fcad 	bl	800088c <SELECT>

	if (count == 1)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d110      	bne.n	8000f5a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	2058      	movs	r0, #88	; 0x58
 8000f3c:	f7ff fe0b 	bl	8000b56 <SD_SendCmd>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d13a      	bne.n	8000fbc <SD_disk_write+0xe4>
 8000f46:	21fe      	movs	r1, #254	; 0xfe
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f7ff fdc1 	bl	8000ad0 <SD_TxDataBlock>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d033      	beq.n	8000fbc <SD_disk_write+0xe4>
			count = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	e030      	b.n	8000fbc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <SD_disk_write+0x104>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	2077      	movs	r0, #119	; 0x77
 8000f6a:	f7ff fdf4 	bl	8000b56 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	2057      	movs	r0, #87	; 0x57
 8000f72:	f7ff fdf0 	bl	8000b56 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	2059      	movs	r0, #89	; 0x59
 8000f7a:	f7ff fdec 	bl	8000b56 <SD_SendCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d11b      	bne.n	8000fbc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f84:	21fc      	movs	r1, #252	; 0xfc
 8000f86:	68b8      	ldr	r0, [r7, #8]
 8000f88:	f7ff fda2 	bl	8000ad0 <SD_TxDataBlock>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00a      	beq.n	8000fa8 <SD_disk_write+0xd0>
				buff += 512;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1ee      	bne.n	8000f84 <SD_disk_write+0xac>
 8000fa6:	e000      	b.n	8000faa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fa8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000faa:	21fd      	movs	r1, #253	; 0xfd
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fd8f 	bl	8000ad0 <SD_TxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <SD_disk_write+0xe4>
			{
				count = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000fbc:	f7ff fc76 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000fc0:	f7ff fcb8 	bl	8000934 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	200000a4 	.word	0x200000a4

08000fe0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b08b      	sub	sp, #44	; 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	603a      	str	r2, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	460b      	mov	r3, r1
 8000fee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SD_disk_ioctl+0x1e>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e115      	b.n	800122a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	2b05      	cmp	r3, #5
 8001008:	d124      	bne.n	8001054 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d012      	beq.n	8001038 <SD_disk_ioctl+0x58>
 8001012:	2b02      	cmp	r3, #2
 8001014:	dc1a      	bgt.n	800104c <SD_disk_ioctl+0x6c>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <SD_disk_ioctl+0x40>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d006      	beq.n	800102c <SD_disk_ioctl+0x4c>
 800101e:	e015      	b.n	800104c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001020:	f7ff fd0e 	bl	8000a40 <SD_PowerOff>
			res = RES_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800102a:	e0fc      	b.n	8001226 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800102c:	f7ff fcc6 	bl	80009bc <SD_PowerOn>
			res = RES_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001036:	e0f6      	b.n	8001226 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	1c5c      	adds	r4, r3, #1
 800103c:	f7ff fd0c 	bl	8000a58 <SD_CheckPower>
 8001040:	4603      	mov	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800104a:	e0ec      	b.n	8001226 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800104c:	2304      	movs	r3, #4
 800104e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001052:	e0e8      	b.n	8001226 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001054:	4b77      	ldr	r3, [pc, #476]	; (8001234 <SD_disk_ioctl+0x254>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SD_disk_ioctl+0x86>
 8001062:	2303      	movs	r3, #3
 8001064:	e0e1      	b.n	800122a <SD_disk_ioctl+0x24a>

		SELECT();
 8001066:	f7ff fc11 	bl	800088c <SELECT>

		switch (ctrl)
 800106a:	79bb      	ldrb	r3, [r7, #6]
 800106c:	2b0d      	cmp	r3, #13
 800106e:	f200 80cb 	bhi.w	8001208 <SD_disk_ioctl+0x228>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <SD_disk_ioctl+0x98>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001173 	.word	0x08001173
 800107c:	080010b1 	.word	0x080010b1
 8001080:	08001163 	.word	0x08001163
 8001084:	08001209 	.word	0x08001209
 8001088:	08001209 	.word	0x08001209
 800108c:	08001209 	.word	0x08001209
 8001090:	08001209 	.word	0x08001209
 8001094:	08001209 	.word	0x08001209
 8001098:	08001209 	.word	0x08001209
 800109c:	08001209 	.word	0x08001209
 80010a0:	08001209 	.word	0x08001209
 80010a4:	08001185 	.word	0x08001185
 80010a8:	080011a9 	.word	0x080011a9
 80010ac:	080011cd 	.word	0x080011cd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010b0:	2100      	movs	r1, #0
 80010b2:	2049      	movs	r0, #73	; 0x49
 80010b4:	f7ff fd4f 	bl	8000b56 <SD_SendCmd>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 80a8 	bne.w	8001210 <SD_disk_ioctl+0x230>
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2110      	movs	r1, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fcd2 	bl	8000a70 <SD_RxDataBlock>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 809e 	beq.w	8001210 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	099b      	lsrs	r3, r3, #6
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10e      	bne.n	80010fc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80010de:	7d7b      	ldrb	r3, [r7, #21]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	7d3b      	ldrb	r3, [r7, #20]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80010f2:	8bfb      	ldrh	r3, [r7, #30]
 80010f4:	029a      	lsls	r2, r3, #10
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e02e      	b.n	800115a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80010fc:	7c7b      	ldrb	r3, [r7, #17]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	b2da      	uxtb	r2, r3
 8001104:	7dbb      	ldrb	r3, [r7, #22]
 8001106:	09db      	lsrs	r3, r3, #7
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	7d7b      	ldrb	r3, [r7, #21]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0306 	and.w	r3, r3, #6
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3302      	adds	r3, #2
 8001120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001124:	7d3b      	ldrb	r3, [r7, #20]
 8001126:	099b      	lsrs	r3, r3, #6
 8001128:	b2db      	uxtb	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	7cfb      	ldrb	r3, [r7, #19]
 800112e:	b29b      	uxth	r3, r3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	b29b      	uxth	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b29a      	uxth	r2, r3
 8001138:	7cbb      	ldrb	r3, [r7, #18]
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	b29b      	uxth	r3, r3
 800113e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001142:	b29b      	uxth	r3, r3
 8001144:	4413      	add	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	3301      	adds	r3, #1
 800114a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800114c:	8bfa      	ldrh	r2, [r7, #30]
 800114e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001152:	3b09      	subs	r3, #9
 8001154:	409a      	lsls	r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001160:	e056      	b.n	8001210 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001168:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001170:	e055      	b.n	800121e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001172:	f7ff fc09 	bl	8000988 <SD_ReadyWait>
 8001176:	4603      	mov	r3, r0
 8001178:	2bff      	cmp	r3, #255	; 0xff
 800117a:	d14b      	bne.n	8001214 <SD_disk_ioctl+0x234>
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001182:	e047      	b.n	8001214 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001184:	2100      	movs	r1, #0
 8001186:	2049      	movs	r0, #73	; 0x49
 8001188:	f7ff fce5 	bl	8000b56 <SD_SendCmd>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d142      	bne.n	8001218 <SD_disk_ioctl+0x238>
 8001192:	2110      	movs	r1, #16
 8001194:	6a38      	ldr	r0, [r7, #32]
 8001196:	f7ff fc6b 	bl	8000a70 <SD_RxDataBlock>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03b      	beq.n	8001218 <SD_disk_ioctl+0x238>
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011a6:	e037      	b.n	8001218 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011a8:	2100      	movs	r1, #0
 80011aa:	204a      	movs	r0, #74	; 0x4a
 80011ac:	f7ff fcd3 	bl	8000b56 <SD_SendCmd>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d132      	bne.n	800121c <SD_disk_ioctl+0x23c>
 80011b6:	2110      	movs	r1, #16
 80011b8:	6a38      	ldr	r0, [r7, #32]
 80011ba:	f7ff fc59 	bl	8000a70 <SD_RxDataBlock>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d02b      	beq.n	800121c <SD_disk_ioctl+0x23c>
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011ca:	e027      	b.n	800121c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80011cc:	2100      	movs	r1, #0
 80011ce:	207a      	movs	r0, #122	; 0x7a
 80011d0:	f7ff fcc1 	bl	8000b56 <SD_SendCmd>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011e0:	e00b      	b.n	80011fa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80011e2:	6a3c      	ldr	r4, [r7, #32]
 80011e4:	1c63      	adds	r3, r4, #1
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	f7ff fba4 	bl	8000934 <SPI_RxByte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80011f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f4:	3301      	adds	r3, #1
 80011f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d9ef      	bls.n	80011e2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001208:	2304      	movs	r3, #4
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800120e:	e006      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001210:	bf00      	nop
 8001212:	e004      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001214:	bf00      	nop
 8001216:	e002      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 800121c:	bf00      	nop
		}

		DESELECT();
 800121e:	f7ff fb45 	bl	80008ac <DESELECT>
		SPI_RxByte();
 8001222:	f7ff fb87 	bl	8000934 <SPI_RxByte>
	}

	return res;
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800122a:	4618      	mov	r0, r3
 800122c:	372c      	adds	r7, #44	; 0x2c
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000

08001238 <bufsize>:
int CAN_data_checkFlag = 0;


/*******************************************************************************/
int bufsize (char *buf)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001244:	e002      	b.n	800124c <bufsize+0x14>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f6      	bne.n	8001246 <bufsize+0xe>
	return i;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <clear_buffer>:

void clear_buffer (void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e007      	b.n	8001284 <clear_buffer+0x1c>
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <clear_buffer+0x34>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3301      	adds	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	dbf3      	blt.n	8001274 <clear_buffer+0xc>
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200013d8 	.word	0x200013d8

080012a0 <send_uart>:

void send_uart (char *string)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7fe ff91 	bl	80001d0 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <send_uart+0x2c>)
 80012be:	f004 f857 	bl	8005370 <HAL_UART_Transmit>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200017fc 	.word	0x200017fc

080012d0 <write_to_csvfile>:

void write_to_csvfile (void)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af04      	add	r7, sp, #16

		  dummy_timer =+ 1;
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <write_to_csvfile+0xac>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
		  dummy_cell_votlages =+ 0.3;
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <write_to_csvfile+0xb0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		  dummy_pack_voltage =+ 11;
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <write_to_csvfile+0xb4>)
 80012e4:	220b      	movs	r2, #11
 80012e6:	701a      	strb	r2, [r3, #0]
		  dummy_pack_current =+ 0.5;
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <write_to_csvfile+0xb8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
		  dummy_temperature =+ 5;
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <write_to_csvfile+0xbc>)
 80012f0:	2205      	movs	r2, #5
 80012f2:	701a      	strb	r2, [r3, #0]

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80012f4:	2203      	movs	r2, #3
 80012f6:	4926      	ldr	r1, [pc, #152]	; (8001390 <write_to_csvfile+0xc0>)
 80012f8:	4826      	ldr	r0, [pc, #152]	; (8001394 <write_to_csvfile+0xc4>)
 80012fa:	f007 fa3d 	bl	8008778 <f_open>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <write_to_csvfile+0xc8>)
 8001304:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <write_to_csvfile+0xc4>)
 8001308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130c:	330c      	adds	r3, #12
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	4820      	ldr	r0, [pc, #128]	; (8001394 <write_to_csvfile+0xc4>)
 8001314:	f008 fafc 	bl	8009910 <f_lseek>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <write_to_csvfile+0xc8>)
 800131e:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%d,%d,%d,%d,%d\r\n", dummy_timer, dummy_cell_votlages, dummy_pack_voltage, dummy_pack_current, dummy_temperature);
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <write_to_csvfile+0xac>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <write_to_csvfile+0xb0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461c      	mov	r4, r3
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <write_to_csvfile+0xb4>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <write_to_csvfile+0xb8>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <write_to_csvfile+0xbc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	9101      	str	r1, [sp, #4]
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	4623      	mov	r3, r4
 8001344:	4602      	mov	r2, r0
 8001346:	4915      	ldr	r1, [pc, #84]	; (800139c <write_to_csvfile+0xcc>)
 8001348:	4815      	ldr	r0, [pc, #84]	; (80013a0 <write_to_csvfile+0xd0>)
 800134a:	f009 f8b1 	bl	800a4b0 <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <write_to_csvfile+0xd0>)
 8001350:	f7ff ff72 	bl	8001238 <bufsize>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <write_to_csvfile+0xd4>)
 800135a:	4911      	ldr	r1, [pc, #68]	; (80013a0 <write_to_csvfile+0xd0>)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <write_to_csvfile+0xc4>)
 800135e:	f007 ff5b 	bl	8009218 <f_write>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <write_to_csvfile+0xc8>)
 8001368:	701a      	strb	r2, [r3, #0]
		  //send_uart(buffer);
		  f_close (&fil);
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <write_to_csvfile+0xc4>)
 800136c:	f008 faa5 	bl	80098ba <f_close>

		  clear_buffer();
 8001370:	f7ff ff7a 	bl	8001268 <clear_buffer>
}
 8001374:	bf00      	nop
 8001376:	3704      	adds	r7, #4
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	200013d0 	.word	0x200013d0
 8001380:	200028e8 	.word	0x200028e8
 8001384:	200002ec 	.word	0x200002ec
 8001388:	200018b8 	.word	0x200018b8
 800138c:	200017e4 	.word	0x200017e4
 8001390:	0800ad08 	.word	0x0800ad08
 8001394:	200018bc 	.word	0x200018bc
 8001398:	200017f0 	.word	0x200017f0
 800139c:	0800ad14 	.word	0x0800ad14
 80013a0:	200013d8 	.word	0x200013d8
 80013a4:	200017e0 	.word	0x200017e0

080013a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f001 f8e8 	bl	800258c <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2 )
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d102      	bne.n	80013ca <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		CAN_data_checkFlag = 1;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
	}
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200017f4 	.word	0x200017f4
 80013d8:	2000189c 	.word	0x2000189c
 80013dc:	200000a8 	.word	0x200000a8

080013e0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fd64 	bl	8001eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 fa20 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f000 fb3a 	bl	8001a64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013f0:	f000 fb08 	bl	8001a04 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80013f4:	f000 fac8 	bl	8001988 <MX_SPI2_Init>
  MX_FATFS_Init();
 80013f8:	f004 fbd2 	bl	8005ba0 <MX_FATFS_Init>
  MX_CAN_Init();
 80013fc:	f000 fa70 	bl	80018e0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  HAL_Delay(500);
 8001400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001404:	f000 fdba 	bl	8001f7c <HAL_Delay>

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 8001408:	491c      	ldr	r1, [pc, #112]	; (800147c <main+0x9c>)
 800140a:	481d      	ldr	r0, [pc, #116]	; (8001480 <main+0xa0>)
 800140c:	f009 f850 	bl	800a4b0 <siprintf>
  send_uart(buffer);
 8001410:	481b      	ldr	r0, [pc, #108]	; (8001480 <main+0xa0>)
 8001412:	f7ff ff45 	bl	80012a0 <send_uart>
  clear_buffer();
 8001416:	f7ff ff27 	bl	8001268 <clear_buffer>

  /*CAN Initializations*/
  HAL_CAN_Start(&hcan);
 800141a:	481a      	ldr	r0, [pc, #104]	; (8001484 <main+0xa4>)
 800141c:	f000 ff97 	bl	800234e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //using FIFO0 for RX callback reception
 8001420:	2102      	movs	r1, #2
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <main+0xa4>)
 8001424:	f001 f9c4 	bl	80027b0 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; //data
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <main+0xa8>)
 800142a:	2202      	movs	r2, #2
 800142c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <main+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <main+0xa8>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  //id
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <main+0xa8>)
 800143c:	f240 4246 	movw	r2, #1094	; 0x446
 8001440:	601a      	str	r2, [r3, #0]

  //populate data to Txdata bytes
  TxData[0] = 11;
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <main+0xac>)
 8001444:	220b      	movs	r2, #11
 8001446:	701a      	strb	r2, [r3, #0]
  TxData[1] = 100;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <main+0xac>)
 800144a:	2264      	movs	r2, #100	; 0x64
 800144c:	705a      	strb	r2, [r3, #1]
  //send CAN message // TO DO:check CAN message reception on BluePill
  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <main+0xb0>)
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <main+0xac>)
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <main+0xa8>)
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <main+0xa4>)
 8001456:	f000 ffbe 	bl	80023d6 <HAL_CAN_AddTxMessage>

  //mount SD card and check SD card mounting status
  fresult = f_mount(&fs, "/", 1);
 800145a:	2201      	movs	r2, #1
 800145c:	490d      	ldr	r1, [pc, #52]	; (8001494 <main+0xb4>)
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <main+0xb8>)
 8001460:	f007 f940 	bl	80086e4 <f_mount>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <main+0xbc>)
 800146a:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK)
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <main+0xbc>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d017      	beq.n	80014a4 <main+0xc4>
  	{
  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <main+0xc0>)
 8001476:	f7ff ff13 	bl	80012a0 <send_uart>
 800147a:	e016      	b.n	80014aa <main+0xca>
 800147c:	0800ad28 	.word	0x0800ad28
 8001480:	200013d8 	.word	0x200013d8
 8001484:	200013a4 	.word	0x200013a4
 8001488:	20001884 	.word	0x20001884
 800148c:	200017d8 	.word	0x200017d8
 8001490:	200017e8 	.word	0x200017e8
 8001494:	0800ad50 	.word	0x0800ad50
 8001498:	20000374 	.word	0x20000374
 800149c:	200017f0 	.word	0x200017f0
 80014a0:	0800ad54 	.word	0x0800ad54

  	}
  	else
  	{
  		send_uart("SD CARD mounted successfully...\r\n");
 80014a4:	48b9      	ldr	r0, [pc, #740]	; (800178c <main+0x3ac>)
 80014a6:	f7ff fefb 	bl	80012a0 <send_uart>
  	}

  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 80014aa:	4ab9      	ldr	r2, [pc, #740]	; (8001790 <main+0x3b0>)
 80014ac:	49b9      	ldr	r1, [pc, #740]	; (8001794 <main+0x3b4>)
 80014ae:	48ba      	ldr	r0, [pc, #744]	; (8001798 <main+0x3b8>)
 80014b0:	f008 fd62 	bl	8009f78 <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80014b4:	4bb6      	ldr	r3, [pc, #728]	; (8001790 <main+0x3b0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014bc:	3314      	adds	r3, #20
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1e9a      	subs	r2, r3, #2
 80014c2:	4bb3      	ldr	r3, [pc, #716]	; (8001790 <main+0x3b0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ca:	3302      	adds	r3, #2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	fb03 f302 	mul.w	r3, r3, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f940 	bl	8000758 <__aeabi_ui2d>
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4baf      	ldr	r3, [pc, #700]	; (800179c <main+0x3bc>)
 80014de:	f7fe fecf 	bl	8000280 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff f9af 	bl	800084c <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4aab      	ldr	r2, [pc, #684]	; (80017a0 <main+0x3c0>)
 80014f2:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 80014f4:	4baa      	ldr	r3, [pc, #680]	; (80017a0 <main+0x3c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	49aa      	ldr	r1, [pc, #680]	; (80017a4 <main+0x3c4>)
 80014fc:	48aa      	ldr	r0, [pc, #680]	; (80017a8 <main+0x3c8>)
 80014fe:	f008 ffd7 	bl	800a4b0 <siprintf>
  	send_uart(buffer);
 8001502:	48a9      	ldr	r0, [pc, #676]	; (80017a8 <main+0x3c8>)
 8001504:	f7ff fecc 	bl	80012a0 <send_uart>
  	clear_buffer();
 8001508:	f7ff feae 	bl	8001268 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800150c:	4ba0      	ldr	r3, [pc, #640]	; (8001790 <main+0x3b0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001514:	3302      	adds	r3, #2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b9e      	ldr	r3, [pc, #632]	; (8001794 <main+0x3b4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fb03 f302 	mul.w	r3, r3, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f918 	bl	8000758 <__aeabi_ui2d>
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b9b      	ldr	r3, [pc, #620]	; (800179c <main+0x3bc>)
 800152e:	f7fe fea7 	bl	8000280 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff f987 	bl	800084c <__aeabi_d2uiz>
 800153e:	4603      	mov	r3, r0
 8001540:	4a9a      	ldr	r2, [pc, #616]	; (80017ac <main+0x3cc>)
 8001542:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 8001544:	4b99      	ldr	r3, [pc, #612]	; (80017ac <main+0x3cc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4999      	ldr	r1, [pc, #612]	; (80017b0 <main+0x3d0>)
 800154c:	4896      	ldr	r0, [pc, #600]	; (80017a8 <main+0x3c8>)
 800154e:	f008 ffaf 	bl	800a4b0 <siprintf>
  	send_uart(buffer);
 8001552:	4895      	ldr	r0, [pc, #596]	; (80017a8 <main+0x3c8>)
 8001554:	f7ff fea4 	bl	80012a0 <send_uart>
  	clear_buffer();
 8001558:	f7ff fe86 	bl	8001268 <clear_buffer>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800155c:	2213      	movs	r2, #19
 800155e:	4995      	ldr	r1, [pc, #596]	; (80017b4 <main+0x3d4>)
 8001560:	4895      	ldr	r0, [pc, #596]	; (80017b8 <main+0x3d8>)
 8001562:	f007 f909 	bl	8008778 <f_open>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b94      	ldr	r3, [pc, #592]	; (80017bc <main+0x3dc>)
 800156c:	701a      	strb	r2, [r3, #0]
  	/* Writing text */
  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 800156e:	4992      	ldr	r1, [pc, #584]	; (80017b8 <main+0x3d8>)
 8001570:	4893      	ldr	r0, [pc, #588]	; (80017c0 <main+0x3e0>)
 8001572:	f008 fe5d 	bl	800a230 <f_puts>
  	/* Close file */
  	fresult = f_close(&fil);
 8001576:	4890      	ldr	r0, [pc, #576]	; (80017b8 <main+0x3d8>)
 8001578:	f008 f99f 	bl	80098ba <f_close>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b8e      	ldr	r3, [pc, #568]	; (80017bc <main+0x3dc>)
 8001582:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)
 8001584:	4b8d      	ldr	r3, [pc, #564]	; (80017bc <main+0x3dc>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <main+0x1b2>
  	{
  		send_uart ("File1.txt created and the data is written \r\n");
 800158c:	488d      	ldr	r0, [pc, #564]	; (80017c4 <main+0x3e4>)
 800158e:	f7ff fe87 	bl	80012a0 <send_uart>
  	}

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8001592:	2201      	movs	r2, #1
 8001594:	4987      	ldr	r1, [pc, #540]	; (80017b4 <main+0x3d4>)
 8001596:	4888      	ldr	r0, [pc, #544]	; (80017b8 <main+0x3d8>)
 8001598:	f007 f8ee 	bl	8008778 <f_open>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	4b86      	ldr	r3, [pc, #536]	; (80017bc <main+0x3dc>)
 80015a2:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 80015a4:	4b84      	ldr	r3, [pc, #528]	; (80017b8 <main+0x3d8>)
 80015a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015aa:	330c      	adds	r3, #12
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a82      	ldr	r2, [pc, #520]	; (80017b8 <main+0x3d8>)
 80015b0:	4619      	mov	r1, r3
 80015b2:	487d      	ldr	r0, [pc, #500]	; (80017a8 <main+0x3c8>)
 80015b4:	f008 fdc2 	bl	800a13c <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 80015b8:	4883      	ldr	r0, [pc, #524]	; (80017c8 <main+0x3e8>)
 80015ba:	f7ff fe71 	bl	80012a0 <send_uart>
  	send_uart(buffer);
 80015be:	487a      	ldr	r0, [pc, #488]	; (80017a8 <main+0x3c8>)
 80015c0:	f7ff fe6e 	bl	80012a0 <send_uart>
  	send_uart("\r\n");
 80015c4:	4881      	ldr	r0, [pc, #516]	; (80017cc <main+0x3ec>)
 80015c6:	f7ff fe6b 	bl	80012a0 <send_uart>
  	/* Close file */
  	f_close(&fil);
 80015ca:	487b      	ldr	r0, [pc, #492]	; (80017b8 <main+0x3d8>)
 80015cc:	f008 f975 	bl	80098ba <f_close>
  	clear_buffer();
 80015d0:	f7ff fe4a 	bl	8001268 <clear_buffer>
  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80015d4:	220a      	movs	r2, #10
 80015d6:	497e      	ldr	r1, [pc, #504]	; (80017d0 <main+0x3f0>)
 80015d8:	4877      	ldr	r0, [pc, #476]	; (80017b8 <main+0x3d8>)
 80015da:	f007 f8cd 	bl	8008778 <f_open>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <main+0x3dc>)
 80015e4:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 80015e6:	4a70      	ldr	r2, [pc, #448]	; (80017a8 <main+0x3c8>)
 80015e8:	4b7a      	ldr	r3, [pc, #488]	; (80017d4 <main+0x3f4>)
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	2351      	movs	r3, #81	; 0x51
 80015f0:	461a      	mov	r2, r3
 80015f2:	f008 ff47 	bl	800a484 <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80015f6:	486c      	ldr	r0, [pc, #432]	; (80017a8 <main+0x3c8>)
 80015f8:	f7ff fe1e 	bl	8001238 <bufsize>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	4b75      	ldr	r3, [pc, #468]	; (80017d8 <main+0x3f8>)
 8001602:	4969      	ldr	r1, [pc, #420]	; (80017a8 <main+0x3c8>)
 8001604:	486c      	ldr	r0, [pc, #432]	; (80017b8 <main+0x3d8>)
 8001606:	f007 fe07 	bl	8009218 <f_write>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <main+0x3dc>)
 8001610:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001612:	4b6a      	ldr	r3, [pc, #424]	; (80017bc <main+0x3dc>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <main+0x240>
  	{
  		send_uart ("File2.txt created and the data is written \r\n");
 800161a:	4870      	ldr	r0, [pc, #448]	; (80017dc <main+0x3fc>)
 800161c:	f7ff fe40 	bl	80012a0 <send_uart>
  	}

  	/* Close file */
  	f_close(&fil);
 8001620:	4865      	ldr	r0, [pc, #404]	; (80017b8 <main+0x3d8>)
 8001622:	f008 f94a 	bl	80098ba <f_close>
  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 8001626:	f7ff fe1f 	bl	8001268 <clear_buffer>
  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 800162a:	2201      	movs	r2, #1
 800162c:	4968      	ldr	r1, [pc, #416]	; (80017d0 <main+0x3f0>)
 800162e:	4862      	ldr	r0, [pc, #392]	; (80017b8 <main+0x3d8>)
 8001630:	f007 f8a2 	bl	8008778 <f_open>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4b60      	ldr	r3, [pc, #384]	; (80017bc <main+0x3dc>)
 800163a:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK){
 800163c:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <main+0x3dc>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <main+0x26a>
  		send_uart ("file2.txt is open and the data is shown below\r\n");
 8001644:	4866      	ldr	r0, [pc, #408]	; (80017e0 <main+0x400>)
 8001646:	f7ff fe2b 	bl	80012a0 <send_uart>
  	}

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <main+0x3d8>)
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	330c      	adds	r3, #12
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <main+0x404>)
 8001656:	4954      	ldr	r1, [pc, #336]	; (80017a8 <main+0x3c8>)
 8001658:	4857      	ldr	r0, [pc, #348]	; (80017b8 <main+0x3d8>)
 800165a:	f007 fbc7 	bl	8008dec <f_read>
  	send_uart(buffer);
 800165e:	4852      	ldr	r0, [pc, #328]	; (80017a8 <main+0x3c8>)
 8001660:	f7ff fe1e 	bl	80012a0 <send_uart>
  	send_uart("\r\n");
 8001664:	4859      	ldr	r0, [pc, #356]	; (80017cc <main+0x3ec>)
 8001666:	f7ff fe1b 	bl	80012a0 <send_uart>

  	/* Close file */
  	f_close(&fil);
 800166a:	4853      	ldr	r0, [pc, #332]	; (80017b8 <main+0x3d8>)
 800166c:	f008 f925 	bl	80098ba <f_close>

  	clear_buffer();
 8001670:	f7ff fdfa 	bl	8001268 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8001674:	2203      	movs	r2, #3
 8001676:	4956      	ldr	r1, [pc, #344]	; (80017d0 <main+0x3f0>)
 8001678:	484f      	ldr	r0, [pc, #316]	; (80017b8 <main+0x3d8>)
 800167a:	f007 f87d 	bl	8008778 <f_open>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <main+0x3dc>)
 8001684:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <main+0x3d8>)
 8001688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168c:	330c      	adds	r3, #12
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4849      	ldr	r0, [pc, #292]	; (80017b8 <main+0x3d8>)
 8001694:	f008 f93c 	bl	8009910 <f_lseek>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	4b47      	ldr	r3, [pc, #284]	; (80017bc <main+0x3dc>)
 800169e:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <main+0x3dc>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <main+0x2ce>
  	{
  		send_uart ("About to update the file2.txt\r\n");
 80016a8:	484f      	ldr	r0, [pc, #316]	; (80017e8 <main+0x408>)
 80016aa:	f7ff fdf9 	bl	80012a0 <send_uart>
  	}

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 80016ae:	4942      	ldr	r1, [pc, #264]	; (80017b8 <main+0x3d8>)
 80016b0:	484e      	ldr	r0, [pc, #312]	; (80017ec <main+0x40c>)
 80016b2:	f008 fdbd 	bl	800a230 <f_puts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b40      	ldr	r3, [pc, #256]	; (80017bc <main+0x3dc>)
 80016bc:	701a      	strb	r2, [r3, #0]
  	f_close (&fil);
 80016be:	483e      	ldr	r0, [pc, #248]	; (80017b8 <main+0x3d8>)
 80016c0:	f008 f8fb 	bl	80098ba <f_close>
  	clear_buffer();
 80016c4:	f7ff fdd0 	bl	8001268 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 80016c8:	2201      	movs	r2, #1
 80016ca:	4941      	ldr	r1, [pc, #260]	; (80017d0 <main+0x3f0>)
 80016cc:	483a      	ldr	r0, [pc, #232]	; (80017b8 <main+0x3d8>)
 80016ce:	f007 f853 	bl	8008778 <f_open>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b39      	ldr	r3, [pc, #228]	; (80017bc <main+0x3dc>)
 80016d8:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <main+0x3d8>)
 80016dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e0:	330c      	adds	r3, #12
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <main+0x404>)
 80016e6:	4930      	ldr	r1, [pc, #192]	; (80017a8 <main+0x3c8>)
 80016e8:	4833      	ldr	r0, [pc, #204]	; (80017b8 <main+0x3d8>)
 80016ea:	f007 fb7f 	bl	8008dec <f_read>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b32      	ldr	r3, [pc, #200]	; (80017bc <main+0x3dc>)
 80016f4:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <main+0x3dc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d108      	bne.n	8001710 <main+0x330>
  	{
  		send_uart ("Below is the data from updated file2.txt\r\n");
 80016fe:	483c      	ldr	r0, [pc, #240]	; (80017f0 <main+0x410>)
 8001700:	f7ff fdce 	bl	80012a0 <send_uart>
  		send_uart(buffer);
 8001704:	4828      	ldr	r0, [pc, #160]	; (80017a8 <main+0x3c8>)
 8001706:	f7ff fdcb 	bl	80012a0 <send_uart>
  		send_uart("\r\n");
 800170a:	4830      	ldr	r0, [pc, #192]	; (80017cc <main+0x3ec>)
 800170c:	f7ff fdc8 	bl	80012a0 <send_uart>
  	}

  	/* Close file */
  	f_close(&fil);
 8001710:	4829      	ldr	r0, [pc, #164]	; (80017b8 <main+0x3d8>)
 8001712:	f008 f8d2 	bl	80098ba <f_close>

  	clear_buffer();
 8001716:	f7ff fda7 	bl	8001268 <clear_buffer>


  	/*Create csv file to log random data*/
  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800171a:	2213      	movs	r2, #19
 800171c:	4935      	ldr	r1, [pc, #212]	; (80017f4 <main+0x414>)
 800171e:	4826      	ldr	r0, [pc, #152]	; (80017b8 <main+0x3d8>)
 8001720:	f007 f82a 	bl	8008778 <f_open>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <main+0x3dc>)
 800172a:	701a      	strb	r2, [r3, #0]
  	/* Writing text */
  	f_puts("Timer(s), Cell_Voltages, Pack_Voltage, Pack_Current, Temperature\r\n ", &fil);
 800172c:	4922      	ldr	r1, [pc, #136]	; (80017b8 <main+0x3d8>)
 800172e:	4832      	ldr	r0, [pc, #200]	; (80017f8 <main+0x418>)
 8001730:	f008 fd7e 	bl	800a230 <f_puts>
  	/* Close file */
  	fresult = f_close(&fil);
 8001734:	4820      	ldr	r0, [pc, #128]	; (80017b8 <main+0x3d8>)
 8001736:	f008 f8c0 	bl	80098ba <f_close>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <main+0x3dc>)
 8001740:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <main+0x3dc>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <main+0x370>
  	{
  		send_uart ("File3.csv created and header is written \r\n");
 800174a:	482c      	ldr	r0, [pc, #176]	; (80017fc <main+0x41c>)
 800174c:	f7ff fda8 	bl	80012a0 <send_uart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Receive (&huart2, Rx_data, 4, 1000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8001750:	2108      	movs	r1, #8
 8001752:	482b      	ldr	r0, [pc, #172]	; (8001800 <main+0x420>)
 8001754:	f001 fd26 	bl	80031a4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800175e:	4828      	ldr	r0, [pc, #160]	; (8001800 <main+0x420>)
 8001760:	f001 fd08 	bl	8003174 <HAL_GPIO_WritePin>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11); //toggle precharge relay
	  //HAL_UART_Transmit(&huart2,char_data,sizeof(char_data),10);
	  write_to_csvfile();
 8001764:	f7ff fdb4 	bl	80012d0 <write_to_csvfile>
	  HAL_Delay(250);
 8001768:	20fa      	movs	r0, #250	; 0xfa
 800176a:	f000 fc07 	bl	8001f7c <HAL_Delay>

	  if(CAN_data_checkFlag) //check if CAN RX flag is set in HAL_CAN_RxFifo0MsgPendingCallback
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <main+0x424>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ec      	beq.n	8001750 <main+0x370>
	  {
		  sprintf(buffer, "CAN Message values received is:%d, %d\r\n", RxData[0], RxData[1]);
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <main+0x428>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <main+0x428>)
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	4922      	ldr	r1, [pc, #136]	; (800180c <main+0x42c>)
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <main+0x3c8>)
 8001784:	f008 fe94 	bl	800a4b0 <siprintf>
 8001788:	e042      	b.n	8001810 <main+0x430>
 800178a:	bf00      	nop
 800178c:	0800ad78 	.word	0x0800ad78
 8001790:	200017ec 	.word	0x200017ec
 8001794:	200002e8 	.word	0x200002e8
 8001798:	0800ad9c 	.word	0x0800ad9c
 800179c:	3fe00000 	.word	0x3fe00000
 80017a0:	20001880 	.word	0x20001880
 80017a4:	0800ada0 	.word	0x0800ada0
 80017a8:	200013d8 	.word	0x200013d8
 80017ac:	200013d4 	.word	0x200013d4
 80017b0:	0800adbc 	.word	0x0800adbc
 80017b4:	0800add8 	.word	0x0800add8
 80017b8:	200018bc 	.word	0x200018bc
 80017bc:	200017f0 	.word	0x200017f0
 80017c0:	0800ade4 	.word	0x0800ade4
 80017c4:	0800ae28 	.word	0x0800ae28
 80017c8:	0800ae58 	.word	0x0800ae58
 80017cc:	0800ae98 	.word	0x0800ae98
 80017d0:	0800ae9c 	.word	0x0800ae9c
 80017d4:	0800aea8 	.word	0x0800aea8
 80017d8:	200017e0 	.word	0x200017e0
 80017dc:	0800aefc 	.word	0x0800aefc
 80017e0:	0800af2c 	.word	0x0800af2c
 80017e4:	200013cc 	.word	0x200013cc
 80017e8:	0800af5c 	.word	0x0800af5c
 80017ec:	0800af7c 	.word	0x0800af7c
 80017f0:	0800afb0 	.word	0x0800afb0
 80017f4:	0800ad08 	.word	0x0800ad08
 80017f8:	0800afdc 	.word	0x0800afdc
 80017fc:	0800b020 	.word	0x0800b020
 8001800:	48000400 	.word	0x48000400
 8001804:	200000a8 	.word	0x200000a8
 8001808:	200017f4 	.word	0x200017f4
 800180c:	0800b04c 	.word	0x0800b04c
		  send_uart(buffer);
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <main+0x444>)
 8001812:	f7ff fd45 	bl	80012a0 <send_uart>
		  clear_buffer();
 8001816:	f7ff fd27 	bl	8001268 <clear_buffer>
		  CAN_data_checkFlag = 0;
 800181a:	4b03      	ldr	r3, [pc, #12]	; (8001828 <main+0x448>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8001820:	e796      	b.n	8001750 <main+0x370>
 8001822:	bf00      	nop
 8001824:	200013d8 	.word	0x200013d8
 8001828:	200000a8 	.word	0x200000a8

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b09e      	sub	sp, #120	; 0x78
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001836:	2228      	movs	r2, #40	; 0x28
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f008 fe30 	bl	800a4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001850:	463b      	mov	r3, r7
 8001852:	223c      	movs	r2, #60	; 0x3c
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f008 fe22 	bl	800a4a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185c:	2301      	movs	r3, #1
 800185e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001864:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186a:	2301      	movs	r3, #1
 800186c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001876:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001878:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800187c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fca8 	bl	80031d8 <HAL_RCC_OscConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800188e:	f000 f935 	bl	8001afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001892:	230f      	movs	r3, #15
 8001894:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001896:	2302      	movs	r3, #2
 8001898:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800189e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ac:	2102      	movs	r1, #2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fb9a 	bl	8003fe8 <HAL_RCC_ClockConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018ba:	f000 f91f 	bl	8001afc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018be:	2302      	movs	r3, #2
 80018c0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fdc3 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80018d4:	f000 f912 	bl	8001afc <Error_Handler>
  }
}
 80018d8:	bf00      	nop
 80018da:	3778      	adds	r7, #120	; 0x78
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <MX_CAN_Init+0xa0>)
 80018e8:	4a26      	ldr	r2, [pc, #152]	; (8001984 <MX_CAN_Init+0xa4>)
 80018ea:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <MX_CAN_Init+0xa0>)
 80018ee:	2212      	movs	r2, #18
 80018f0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <MX_CAN_Init+0xa0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <MX_CAN_Init+0xa0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <MX_CAN_Init+0xa0>)
 8001900:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001904:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <MX_CAN_Init+0xa0>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_CAN_Init+0xa0>)
 800190e:	2200      	movs	r2, #0
 8001910:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_CAN_Init+0xa0>)
 8001914:	2200      	movs	r2, #0
 8001916:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <MX_CAN_Init+0xa0>)
 800191a:	2200      	movs	r2, #0
 800191c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_CAN_Init+0xa0>)
 8001920:	2200      	movs	r2, #0
 8001922:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_CAN_Init+0xa0>)
 8001926:	2200      	movs	r2, #0
 8001928:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_CAN_Init+0xa0>)
 800192c:	2200      	movs	r2, #0
 800192e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001930:	4813      	ldr	r0, [pc, #76]	; (8001980 <MX_CAN_Init+0xa0>)
 8001932:	f000 fb47 	bl	8001fc4 <HAL_CAN_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800193c:	f000 f8de 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //CAN filter settings
  CAN_FilterTypeDef canfilterConfig;

  canfilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001940:	2301      	movs	r3, #1
 8001942:	623b      	str	r3, [r7, #32]
  canfilterConfig.FilterBank = 11;
 8001944:	230b      	movs	r3, #11
 8001946:	617b      	str	r3, [r7, #20]
  canfilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  canfilterConfig.FilterIdHigh = 0x103<<5;
 800194c:	f242 0360 	movw	r3, #8288	; 0x2060
 8001950:	603b      	str	r3, [r7, #0]
  canfilterConfig.FilterIdLow = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  canfilterConfig.FilterMaskIdHigh = 0x103<<5;
 8001956:	f242 0360 	movw	r3, #8288	; 0x2060
 800195a:	60bb      	str	r3, [r7, #8]
  canfilterConfig.FilterMaskIdLow = 0x0000;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  canfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  canfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001964:	2301      	movs	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
  canfilterConfig.SlaveStartFilterBank = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterConfig);
 800196c:	463b      	mov	r3, r7
 800196e:	4619      	mov	r1, r3
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <MX_CAN_Init+0xa0>)
 8001972:	f000 fc22 	bl	80021ba <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200013a4 	.word	0x200013a4
 8001984:	40006400 	.word	0x40006400

08001988 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_SPI2_Init+0x74>)
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <MX_SPI2_Init+0x78>)
 8001990:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_SPI2_Init+0x74>)
 8001994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001998:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_SPI2_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_SPI2_Init+0x74>)
 80019a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_SPI2_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <MX_SPI2_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_SPI2_Init+0x74>)
 80019b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_SPI2_Init+0x74>)
 80019be:	2208      	movs	r2, #8
 80019c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_SPI2_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_SPI2_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_SPI2_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_SPI2_Init+0x74>)
 80019d6:	2207      	movs	r2, #7
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_SPI2_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_SPI2_Init+0x74>)
 80019e2:	2208      	movs	r2, #8
 80019e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_SPI2_Init+0x74>)
 80019e8:	f002 fee4 	bl	80047b4 <HAL_SPI_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019f2:	f000 f883 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002f0 	.word	0x200002f0
 8001a00:	40003800 	.word	0x40003800

08001a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <MX_USART2_UART_Init+0x5c>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_USART2_UART_Init+0x58>)
 8001a48:	f003 fc44 	bl	80052d4 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a52:	f000 f853 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200017fc 	.word	0x200017fc
 8001a60:	40004400 	.word	0x40004400

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a84:	6153      	str	r3, [r2, #20]
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	6153      	str	r3, [r2, #20]
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6153      	str	r3, [r2, #20]
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_GPIO_Init+0x90>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f641 0108 	movw	r1, #6152	; 0x1808
 8001ac8:	480b      	ldr	r0, [pc, #44]	; (8001af8 <MX_GPIO_Init+0x94>)
 8001aca:	f001 fb53 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 8001ace:	f641 0308 	movw	r3, #6152	; 0x1808
 8001ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_GPIO_Init+0x94>)
 8001ae8:	f001 f9ca 	bl	8002e80 <HAL_GPIO_Init>

}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	48000400 	.word	0x48000400

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x8>
	...

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_MspInit+0x44>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_MspInit+0x44>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6193      	str	r3, [r2, #24]
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_MspInit+0x44>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_MspInit+0x44>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_MspInit+0x44>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_MspInit+0x44>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_CAN_MspInit+0x90>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d131      	bne.n	8001bd6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_CAN_MspInit+0x94>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_CAN_MspInit+0x94>)
 8001b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_CAN_MspInit+0x94>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_CAN_MspInit+0x94>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_CAN_MspInit+0x94>)
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	6153      	str	r3, [r2, #20]
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_CAN_MspInit+0x94>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ba2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001bb4:	2309      	movs	r3, #9
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f001 f95d 	bl	8002e80 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2014      	movs	r0, #20
 8001bcc:	f001 f921 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001bd0:	2014      	movs	r0, #20
 8001bd2:	f001 f93a 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40006400 	.word	0x40006400
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_SPI_MspInit+0x7c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d128      	bne.n	8001c5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2c:	6153      	str	r3, [r2, #20]
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_SPI_MspInit+0x80>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <HAL_SPI_MspInit+0x84>)
 8001c58:	f001 f912 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40003800 	.word	0x40003800
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	48000400 	.word	0x48000400

08001c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_UART_MspInit+0x7c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d128      	bne.n	8001ce4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_UART_MspInit+0x80>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <HAL_UART_MspInit+0x80>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_UART_MspInit+0x80>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_UART_MspInit+0x80>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <HAL_UART_MspInit+0x80>)
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	6153      	str	r3, [r2, #20]
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_UART_MspInit+0x80>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce0:	f001 f8ce 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3728      	adds	r7, #40	; 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <SDTimer_Handler+0x40>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <SDTimer_Handler+0x1c>
    Timer1--;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <SDTimer_Handler+0x40>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <SDTimer_Handler+0x40>)
 8001d0e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <SDTimer_Handler+0x44>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <SDTimer_Handler+0x34>
    Timer2--;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <SDTimer_Handler+0x44>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SDTimer_Handler+0x44>)
 8001d26:	801a      	strh	r2, [r3, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200028ec 	.word	0x200028ec
 8001d38:	200028ea 	.word	0x200028ea

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <SysTick_Handler+0x30>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <SysTick_Handler+0x30>)
 8001d94:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <SysTick_Handler+0x30>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d904      	bls.n	8001daa <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Handler+0x30>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001da6:	f7ff ffa5 	bl	8001cf4 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001daa:	f000 f8c7 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200000ac 	.word	0x200000ac

08001db8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001dbe:	f000 fd1d 	bl	80027fc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200013a4 	.word	0x200013a4

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f008 fb18 	bl	800a430 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2000a000 	.word	0x2000a000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	200000b0 	.word	0x200000b0
 8001e34:	20004968 	.word	0x20004968

08001e38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <SystemInit+0x20>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <SystemInit+0x20>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e62:	490e      	ldr	r1, [pc, #56]	; (8001e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e64:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <LoopForever+0xe>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e78:	4c0b      	ldr	r4, [pc, #44]	; (8001ea8 <LoopForever+0x16>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e86:	f7ff ffd7 	bl	8001e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8a:	f008 fad7 	bl	800a43c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e8e:	f7ff faa7 	bl	80013e0 <main>

08001e92 <LoopForever>:

LoopForever:
    b LoopForever
 8001e92:	e7fe      	b.n	8001e92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e9c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001ea0:	0800b680 	.word	0x0800b680
  ldr r2, =_sbss
 8001ea4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001ea8:	20004968 	.word	0x20004968

08001eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eac:	e7fe      	b.n	8001eac <ADC1_2_IRQHandler>
	...

08001eb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_Init+0x28>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_Init+0x28>)
 8001eba:	f043 0310 	orr.w	r3, r3, #16
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f000 ff9b 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec6:	200f      	movs	r0, #15
 8001ec8:	f000 f808 	bl	8001edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ecc:	f7ff fe1c 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40022000 	.word	0x40022000

08001edc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x54>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_InitTick+0x58>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 ffb3 	bl	8002e66 <HAL_SYSTICK_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00e      	b.n	8001f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b0f      	cmp	r3, #15
 8001f0e:	d80a      	bhi.n	8001f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f10:	2200      	movs	r2, #0
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f000 ff7b 	bl	8002e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <HAL_InitTick+0x5c>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000004 	.word	0x20000004
 8001f34:	2000000c 	.word	0x2000000c
 8001f38:	20000008 	.word	0x20000008

08001f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	200028f0 	.word	0x200028f0

08001f64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200028f0 	.word	0x200028f0

08001f7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000000c 	.word	0x2000000c

08001fc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0ed      	b.n	80021b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fdb4 	bl	8001b50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff8:	f7ff ffb4 	bl	8001f64 <HAL_GetTick>
 8001ffc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ffe:	e012      	b.n	8002026 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002000:	f7ff ffb0 	bl	8001f64 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b0a      	cmp	r3, #10
 800200c:	d90b      	bls.n	8002026 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2205      	movs	r2, #5
 800201e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0c5      	b.n	80021b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0e5      	beq.n	8002000 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0202 	bic.w	r2, r2, #2
 8002042:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002044:	f7ff ff8e 	bl	8001f64 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800204a:	e012      	b.n	8002072 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800204c:	f7ff ff8a 	bl	8001f64 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b0a      	cmp	r3, #10
 8002058:	d90b      	bls.n	8002072 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2205      	movs	r2, #5
 800206a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e09f      	b.n	80021b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e5      	bne.n	800204c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7e1b      	ldrb	r3, [r3, #24]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d108      	bne.n	800209a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e007      	b.n	80020aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7e5b      	ldrb	r3, [r3, #25]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e007      	b.n	80020d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7e9b      	ldrb	r3, [r3, #26]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d108      	bne.n	80020ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0220 	orr.w	r2, r2, #32
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e007      	b.n	80020fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0220 	bic.w	r2, r2, #32
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7edb      	ldrb	r3, [r3, #27]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d108      	bne.n	8002118 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0210 	bic.w	r2, r2, #16
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e007      	b.n	8002128 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0210 	orr.w	r2, r2, #16
 8002126:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7f1b      	ldrb	r3, [r3, #28]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d108      	bne.n	8002142 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0208 	orr.w	r2, r2, #8
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e007      	b.n	8002152 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0208 	bic.w	r2, r2, #8
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7f5b      	ldrb	r3, [r3, #29]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d108      	bne.n	800216c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0204 	orr.w	r2, r2, #4
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e007      	b.n	800217c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0204 	bic.w	r2, r2, #4
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	ea42 0103 	orr.w	r1, r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d003      	beq.n	80021e0 <HAL_CAN_ConfigFilter+0x26>
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	f040 80aa 	bne.w	8002334 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2201      	movs	r2, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d123      	bne.n	8002262 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	401a      	ands	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800223c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3248      	adds	r2, #72	; 0x48
 8002242:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002256:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002258:	6979      	ldr	r1, [r7, #20]
 800225a:	3348      	adds	r3, #72	; 0x48
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d122      	bne.n	80022b0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	431a      	orrs	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800228a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3248      	adds	r2, #72	; 0x48
 8002290:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022a6:	6979      	ldr	r1, [r7, #20]
 80022a8:	3348      	adds	r3, #72	; 0x48
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022ca:	e007      	b.n	80022dc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80022f6:	e007      	b.n	8002308 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	431a      	orrs	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d107      	bne.n	8002320 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002326:	f023 0201 	bic.w	r2, r3, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e006      	b.n	8002342 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d12e      	bne.n	80023c0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800237a:	f7ff fdf3 	bl	8001f64 <HAL_GetTick>
 800237e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002380:	e012      	b.n	80023a8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002382:	f7ff fdef 	bl	8001f64 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b0a      	cmp	r3, #10
 800238e:	d90b      	bls.n	80023a8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2205      	movs	r2, #5
 80023a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e012      	b.n	80023ce <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e5      	bne.n	8002382 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e006      	b.n	80023ce <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b089      	sub	sp, #36	; 0x24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80023f4:	7ffb      	ldrb	r3, [r7, #31]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d003      	beq.n	8002402 <HAL_CAN_AddTxMessage+0x2c>
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	f040 80b8 	bne.w	8002572 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a0 	beq.w	8002562 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	0e1b      	lsrs	r3, r3, #24
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d907      	bls.n	8002442 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e09e      	b.n	8002580 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002442:	2201      	movs	r2, #1
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800245e:	68f9      	ldr	r1, [r7, #12]
 8002460:	6809      	ldr	r1, [r1, #0]
 8002462:	431a      	orrs	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3318      	adds	r3, #24
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	440b      	add	r3, r1
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e00f      	b.n	8002490 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800247a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002480:	68f9      	ldr	r1, [r7, #12]
 8002482:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002484:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3318      	adds	r3, #24
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	440b      	add	r3, r1
 800248e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3318      	adds	r3, #24
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	440b      	add	r3, r1
 80024a0:	3304      	adds	r3, #4
 80024a2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	7d1b      	ldrb	r3, [r3, #20]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d111      	bne.n	80024d0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3318      	adds	r3, #24
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	4413      	add	r3, r2
 80024b8:	3304      	adds	r3, #4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	6811      	ldr	r1, [r2, #0]
 80024c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3318      	adds	r3, #24
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	440b      	add	r3, r1
 80024cc:	3304      	adds	r3, #4
 80024ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3307      	adds	r3, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	061a      	lsls	r2, r3, #24
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3306      	adds	r3, #6
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3305      	adds	r3, #5
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	4313      	orrs	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	3204      	adds	r2, #4
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	4610      	mov	r0, r2
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	6811      	ldr	r1, [r2, #0]
 80024f8:	ea43 0200 	orr.w	r2, r3, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	440b      	add	r3, r1
 8002502:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002506:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3303      	adds	r3, #3
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	061a      	lsls	r2, r3, #24
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3302      	adds	r3, #2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3301      	adds	r3, #1
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	4313      	orrs	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	7812      	ldrb	r2, [r2, #0]
 8002528:	4610      	mov	r0, r2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	6811      	ldr	r1, [r2, #0]
 800252e:	ea43 0200 	orr.w	r2, r3, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	440b      	add	r3, r1
 8002538:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800253c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3318      	adds	r3, #24
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	6811      	ldr	r1, [r2, #0]
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3318      	adds	r3, #24
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	440b      	add	r3, r1
 800255c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e00e      	b.n	8002580 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e006      	b.n	8002580 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3724      	adds	r7, #36	; 0x24
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d003      	beq.n	80025b0 <HAL_CAN_GetRxMessage+0x24>
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f040 80f3 	bne.w	8002796 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10e      	bne.n	80025d4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d116      	bne.n	80025f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0e7      	b.n	80027a4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0d8      	b.n	80027a4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	331b      	adds	r3, #27
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	4413      	add	r3, r2
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0204 	and.w	r2, r3, #4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10c      	bne.n	800262a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	331b      	adds	r3, #27
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	4413      	add	r3, r2
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0d5b      	lsrs	r3, r3, #21
 8002620:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e00b      	b.n	8002642 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	331b      	adds	r3, #27
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	08db      	lsrs	r3, r3, #3
 800263a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	331b      	adds	r3, #27
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0202 	and.w	r2, r3, #2
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	331b      	adds	r3, #27
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	4413      	add	r3, r2
 8002664:	3304      	adds	r3, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 020f 	and.w	r2, r3, #15
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	331b      	adds	r3, #27
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	3304      	adds	r3, #4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	331b      	adds	r3, #27
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4413      	add	r3, r2
 8002694:	3304      	adds	r3, #4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	b29a      	uxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4413      	add	r3, r2
 80026c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0a1a      	lsrs	r2, r3, #8
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4413      	add	r3, r2
 80026da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0c1a      	lsrs	r2, r3, #16
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	3302      	adds	r3, #2
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e1a      	lsrs	r2, r3, #24
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3303      	adds	r3, #3
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3304      	adds	r3, #4
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	4413      	add	r3, r2
 8002726:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0a1a      	lsrs	r2, r3, #8
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	3305      	adds	r3, #5
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0c1a      	lsrs	r2, r3, #16
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3306      	adds	r3, #6
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4413      	add	r3, r2
 800275a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e1a      	lsrs	r2, r3, #24
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3307      	adds	r3, #7
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d108      	bne.n	8002782 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0220 	orr.w	r2, r2, #32
 800277e:	60da      	str	r2, [r3, #12]
 8002780:	e007      	b.n	8002792 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e006      	b.n	80027a4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d002      	beq.n	80027ce <HAL_CAN_ActivateNotification+0x1e>
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d109      	bne.n	80027e2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6959      	ldr	r1, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e006      	b.n	80027f0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
  }
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d07c      	beq.n	800293c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f983 	bl	8002b6a <HAL_CAN_TxMailbox0CompleteCallback>
 8002864:	e016      	b.n	8002894 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	e00c      	b.n	8002894 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	e002      	b.n	8002894 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f989 	bl	8002ba6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d024      	beq.n	80028e8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f963 	bl	8002b7e <HAL_CAN_TxMailbox1CompleteCallback>
 80028b8:	e016      	b.n	80028e8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	e00c      	b.n	80028e8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	e002      	b.n	80028e8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f969 	bl	8002bba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d024      	beq.n	800293c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f943 	bl	8002b92 <HAL_CAN_TxMailbox2CompleteCallback>
 800290c:	e016      	b.n	800293c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	e00c      	b.n	800293c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d004      	beq.n	8002936 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e002      	b.n	800293c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f949 	bl	8002bce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00c      	beq.n	8002960 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002956:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2210      	movs	r2, #16
 800295e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2208      	movs	r2, #8
 800297a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f930 	bl	8002be2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fd04 	bl	80013a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2210      	movs	r2, #16
 80029c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2208      	movs	r2, #8
 80029de:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f912 	bl	8002c0a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8f9 	bl	8002bf6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f8fc 	bl	8002c1e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00b      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2208      	movs	r2, #8
 8002a40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8f5 	bl	8002c32 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d07b      	beq.n	8002b4a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d072      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d043      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03e      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aca:	2b60      	cmp	r3, #96	; 0x60
 8002acc:	d02b      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x32a>
 8002ace:	2b60      	cmp	r3, #96	; 0x60
 8002ad0:	d82e      	bhi.n	8002b30 <HAL_CAN_IRQHandler+0x334>
 8002ad2:	2b50      	cmp	r3, #80	; 0x50
 8002ad4:	d022      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x320>
 8002ad6:	2b50      	cmp	r3, #80	; 0x50
 8002ad8:	d82a      	bhi.n	8002b30 <HAL_CAN_IRQHandler+0x334>
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d019      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x316>
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d826      	bhi.n	8002b30 <HAL_CAN_IRQHandler+0x334>
 8002ae2:	2b30      	cmp	r3, #48	; 0x30
 8002ae4:	d010      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x30c>
 8002ae6:	2b30      	cmp	r3, #48	; 0x30
 8002ae8:	d822      	bhi.n	8002b30 <HAL_CAN_IRQHandler+0x334>
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d002      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x2f8>
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d005      	beq.n	8002afe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002af2:	e01d      	b.n	8002b30 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	f043 0308 	orr.w	r3, r3, #8
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002afc:	e019      	b.n	8002b32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f043 0310 	orr.w	r3, r3, #16
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b06:	e014      	b.n	8002b32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	f043 0320 	orr.w	r3, r3, #32
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b10:	e00f      	b.n	8002b32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b1a:	e00a      	b.n	8002b32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b24:	e005      	b.n	8002b32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b2e:	e000      	b.n	8002b32 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2204      	movs	r2, #4
 8002b48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f872 	bl	8002c46 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b62:	bf00      	nop
 8002b64:	3728      	adds	r7, #40	; 0x28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8e:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60d3      	str	r3, [r2, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <__NVIC_GetPriorityGrouping+0x18>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 0307 	and.w	r3, r3, #7
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db0b      	blt.n	8002cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <__NVIC_EnableIRQ+0x38>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f7ff ff8e 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff29 	bl	8002c5c <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff3e 	bl	8002ca4 <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ff8e 	bl	8002d50 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff5d 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff31 	bl	8002cc0 <__NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffa2 	bl	8002db8 <SysTick_Config>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8e:	e154      	b.n	800313a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8146 	beq.w	8003134 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d005      	beq.n	8002ec0 <HAL_GPIO_Init+0x40>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d130      	bne.n	8002f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 0201 	and.w	r2, r3, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d017      	beq.n	8002f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d123      	bne.n	8002fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	6939      	ldr	r1, [r7, #16]
 8002fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0203 	and.w	r2, r3, #3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a0 	beq.w	8003134 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff4:	4b58      	ldr	r3, [pc, #352]	; (8003158 <HAL_GPIO_Init+0x2d8>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	4a57      	ldr	r2, [pc, #348]	; (8003158 <HAL_GPIO_Init+0x2d8>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6193      	str	r3, [r2, #24]
 8003000:	4b55      	ldr	r3, [pc, #340]	; (8003158 <HAL_GPIO_Init+0x2d8>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800300c:	4a53      	ldr	r2, [pc, #332]	; (800315c <HAL_GPIO_Init+0x2dc>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003036:	d019      	beq.n	800306c <HAL_GPIO_Init+0x1ec>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a49      	ldr	r2, [pc, #292]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <HAL_GPIO_Init+0x1e8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a48      	ldr	r2, [pc, #288]	; (8003164 <HAL_GPIO_Init+0x2e4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00d      	beq.n	8003064 <HAL_GPIO_Init+0x1e4>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a47      	ldr	r2, [pc, #284]	; (8003168 <HAL_GPIO_Init+0x2e8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d007      	beq.n	8003060 <HAL_GPIO_Init+0x1e0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a46      	ldr	r2, [pc, #280]	; (800316c <HAL_GPIO_Init+0x2ec>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_GPIO_Init+0x1dc>
 8003058:	2304      	movs	r3, #4
 800305a:	e008      	b.n	800306e <HAL_GPIO_Init+0x1ee>
 800305c:	2305      	movs	r3, #5
 800305e:	e006      	b.n	800306e <HAL_GPIO_Init+0x1ee>
 8003060:	2303      	movs	r3, #3
 8003062:	e004      	b.n	800306e <HAL_GPIO_Init+0x1ee>
 8003064:	2302      	movs	r3, #2
 8003066:	e002      	b.n	800306e <HAL_GPIO_Init+0x1ee>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_GPIO_Init+0x1ee>
 800306c:	2300      	movs	r3, #0
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	f002 0203 	and.w	r2, r2, #3
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	4093      	lsls	r3, r2
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800307e:	4937      	ldr	r1, [pc, #220]	; (800315c <HAL_GPIO_Init+0x2dc>)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800308c:	4b38      	ldr	r3, [pc, #224]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030b0:	4a2f      	ldr	r2, [pc, #188]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030b6:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030da:	4a25      	ldr	r2, [pc, #148]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e0:	4b23      	ldr	r3, [pc, #140]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3301      	adds	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f aea3 	bne.w	8002e90 <HAL_GPIO_Init+0x10>
  }
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40021000 	.word	0x40021000
 800315c:	40010000 	.word	0x40010000
 8003160:	48000400 	.word	0x48000400
 8003164:	48000800 	.word	0x48000800
 8003168:	48000c00 	.word	0x48000c00
 800316c:	48001000 	.word	0x48001000
 8003170:	40010400 	.word	0x40010400

08003174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
 8003180:	4613      	mov	r3, r2
 8003182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003184:	787b      	ldrb	r3, [r7, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003190:	e002      	b.n	8003198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	041a      	lsls	r2, r3, #16
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	43d9      	mvns	r1, r3
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	400b      	ands	r3, r1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	619a      	str	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031de:	af00      	add	r7, sp, #0
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f000 bef4 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 816a 	beq.w	80034d6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003202:	4bb3      	ldr	r3, [pc, #716]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d00c      	beq.n	8003228 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800320e:	4bb0      	ldr	r3, [pc, #704]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b08      	cmp	r3, #8
 8003218:	d159      	bne.n	80032ce <HAL_RCC_OscConfig+0xf6>
 800321a:	4bad      	ldr	r3, [pc, #692]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003226:	d152      	bne.n	80032ce <HAL_RCC_OscConfig+0xf6>
 8003228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800323c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d102      	bne.n	800325a <HAL_RCC_OscConfig+0x82>
 8003254:	4b9e      	ldr	r3, [pc, #632]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	e015      	b.n	8003286 <HAL_RCC_OscConfig+0xae>
 800325a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800325e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800326e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003272:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003276:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003282:	4b93      	ldr	r3, [pc, #588]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800328a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800328e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003292:	fa92 f2a2 	rbit	r2, r2
 8003296:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800329a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800329e:	fab2 f282 	clz	r2, r2
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f042 0220 	orr.w	r2, r2, #32
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f002 021f 	and.w	r2, r2, #31
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 810c 	beq.w	80034d4 <HAL_RCC_OscConfig+0x2fc>
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8106 	bne.w	80034d4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f000 be86 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x110>
 80032da:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7c      	ldr	r2, [pc, #496]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e030      	b.n	800334a <HAL_RCC_OscConfig+0x172>
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x134>
 80032f2:	4b77      	ldr	r3, [pc, #476]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a76      	ldr	r2, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80032f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b74      	ldr	r3, [pc, #464]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a73      	ldr	r2, [pc, #460]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e01e      	b.n	800334a <HAL_RCC_OscConfig+0x172>
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x15a>
 8003318:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6c      	ldr	r2, [pc, #432]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800331e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e00b      	b.n	800334a <HAL_RCC_OscConfig+0x172>
 8003332:	4b67      	ldr	r3, [pc, #412]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a66      	ldr	r2, [pc, #408]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b64      	ldr	r3, [pc, #400]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a63      	ldr	r2, [pc, #396]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800334a:	4b61      	ldr	r3, [pc, #388]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	495d      	ldr	r1, [pc, #372]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d059      	beq.n	800341c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fdfc 	bl	8001f64 <HAL_GetTick>
 800336c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003372:	f7fe fdf7 	bl	8001f64 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d902      	bls.n	8003388 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	f000 be29 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
 8003388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800339c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0x1e2>
 80033b4:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x20e>
 80033ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033d6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033f2:	fa92 f2a2 	rbit	r2, r2
 80033f6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033fa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80033fe:	fab2 f282 	clz	r2, r2
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	f042 0220 	orr.w	r2, r2, #32
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f002 021f 	and.w	r2, r2, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f202 	lsl.w	r2, r1, r2
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ab      	beq.n	8003372 <HAL_RCC_OscConfig+0x19a>
 800341a:	e05c      	b.n	80034d6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe fda2 	bl	8001f64 <HAL_GetTick>
 8003420:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003426:	f7fe fd9d 	bl	8001f64 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d902      	bls.n	800343c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	f000 bdcf 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
 800343c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003440:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003450:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0x296>
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x2c2>
 800346e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003472:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003486:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800348a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800349e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034a6:	fa92 f2a2 	rbit	r2, r2
 80034aa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f042 0220 	orr.w	r2, r2, #32
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ab      	bne.n	8003426 <HAL_RCC_OscConfig+0x24e>
 80034ce:	e002      	b.n	80034d6 <HAL_RCC_OscConfig+0x2fe>
 80034d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 816f 	beq.w	80037c4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034e6:	4bd0      	ldr	r3, [pc, #832]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034f2:	4bcd      	ldr	r3, [pc, #820]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d16c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x400>
 80034fe:	4bca      	ldr	r3, [pc, #808]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d166      	bne.n	80035d8 <HAL_RCC_OscConfig+0x400>
 800350a:	2302      	movs	r3, #2
 800350c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800351c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d102      	bne.n	800353a <HAL_RCC_OscConfig+0x362>
 8003534:	4bbc      	ldr	r3, [pc, #752]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	e013      	b.n	8003562 <HAL_RCC_OscConfig+0x38a>
 800353a:	2302      	movs	r3, #2
 800353c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800354c:	2302      	movs	r3, #2
 800354e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003552:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800355e:	4bb2      	ldr	r3, [pc, #712]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2202      	movs	r2, #2
 8003564:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003568:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003574:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f042 0220 	orr.w	r2, r2, #32
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f002 021f 	and.w	r2, r2, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_RCC_OscConfig+0x3cc>
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f000 bd1b 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4ba0      	ldr	r3, [pc, #640]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	21f8      	movs	r1, #248	; 0xf8
 80035b4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035bc:	fa91 f1a1 	rbit	r1, r1
 80035c0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035c4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035c8:	fab1 f181 	clz	r1, r1
 80035cc:	b2c9      	uxtb	r1, r1
 80035ce:	408b      	lsls	r3, r1
 80035d0:	4995      	ldr	r1, [pc, #596]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	e0f5      	b.n	80037c4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8085 	beq.w	80036ee <HAL_RCC_OscConfig+0x516>
 80035e4:	2301      	movs	r3, #1
 80035e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80035f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2301      	movs	r3, #1
 800360e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fca8 	bl	8001f64 <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361a:	f7fe fca3 	bl	8001f64 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d902      	bls.n	8003630 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	f000 bcd5 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
 8003630:	2302      	movs	r3, #2
 8003632:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003642:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d102      	bne.n	8003660 <HAL_RCC_OscConfig+0x488>
 800365a:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	e013      	b.n	8003688 <HAL_RCC_OscConfig+0x4b0>
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003672:	2302      	movs	r3, #2
 8003674:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003678:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003684:	4b68      	ldr	r3, [pc, #416]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2202      	movs	r2, #2
 800368a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800368e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003692:	fa92 f2a2 	rbit	r2, r2
 8003696:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800369a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800369e:	fab2 f282 	clz	r2, r2
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f002 021f 	and.w	r2, r2, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0af      	beq.n	800361a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	21f8      	movs	r1, #248	; 0xf8
 80036ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036d2:	fa91 f1a1 	rbit	r1, r1
 80036d6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80036da:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036de:	fab1 f181 	clz	r1, r1
 80036e2:	b2c9      	uxtb	r1, r1
 80036e4:	408b      	lsls	r3, r1
 80036e6:	4950      	ldr	r1, [pc, #320]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]
 80036ec:	e06a      	b.n	80037c4 <HAL_RCC_OscConfig+0x5ec>
 80036ee:	2301      	movs	r3, #1
 80036f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003700:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800370e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	461a      	mov	r2, r3
 8003716:	2300      	movs	r3, #0
 8003718:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe fc23 	bl	8001f64 <HAL_GetTick>
 800371e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003724:	f7fe fc1e 	bl	8001f64 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d902      	bls.n	800373a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	f000 bc50 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
 800373a:	2302      	movs	r3, #2
 800373c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800374c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d102      	bne.n	800376a <HAL_RCC_OscConfig+0x592>
 8003764:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	e013      	b.n	8003792 <HAL_RCC_OscConfig+0x5ba>
 800376a:	2302      	movs	r3, #2
 800376c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800377c:	2302      	movs	r3, #2
 800377e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003782:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800378e:	4b26      	ldr	r3, [pc, #152]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2202      	movs	r2, #2
 8003794:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003798:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800379c:	fa92 f2a2 	rbit	r2, r2
 80037a0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037a8:	fab2 f282 	clz	r2, r2
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f042 0220 	orr.w	r2, r2, #32
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	f002 021f 	and.w	r2, r2, #31
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1af      	bne.n	8003724 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80da 	beq.w	8003988 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d069      	beq.n	80038b2 <HAL_RCC_OscConfig+0x6da>
 80037de:	2301      	movs	r3, #1
 80037e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80037f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_OscConfig+0x654>)
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	461a      	mov	r2, r3
 8003804:	2301      	movs	r3, #1
 8003806:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003808:	f7fe fbac 	bl	8001f64 <HAL_GetTick>
 800380c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003810:	e00e      	b.n	8003830 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe fba7 	bl	8001f64 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d906      	bls.n	8003830 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e3d9      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	10908120 	.word	0x10908120
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003842:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003846:	2202      	movs	r2, #2
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	fa93 f2a3 	rbit	r2, r3
 8003854:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800385e:	2202      	movs	r2, #2
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003870:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	4ba5      	ldr	r3, [pc, #660]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003876:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800387a:	2102      	movs	r1, #2
 800387c:	6019      	str	r1, [r3, #0]
 800387e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f1a3 	rbit	r1, r3
 8003888:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800388c:	6019      	str	r1, [r3, #0]
  return result;
 800388e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0b0      	beq.n	8003812 <HAL_RCC_OscConfig+0x63a>
 80038b0:	e06a      	b.n	8003988 <HAL_RCC_OscConfig+0x7b0>
 80038b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fa93 f2a3 	rbit	r2, r3
 80038c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038c8:	601a      	str	r2, [r3, #0]
  return result;
 80038ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038ce:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	461a      	mov	r2, r3
 80038e0:	2300      	movs	r3, #0
 80038e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fe fb3e 	bl	8001f64 <HAL_GetTick>
 80038e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	e009      	b.n	8003902 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fe fb39 	bl	8001f64 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e36b      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003902:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003906:	2202      	movs	r2, #2
 8003908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	fa93 f2a3 	rbit	r2, r3
 8003914:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800391e:	2202      	movs	r2, #2
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003936:	2202      	movs	r2, #2
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	fa93 f2a3 	rbit	r2, r3
 8003944:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003948:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394a:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 800394c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003952:	2102      	movs	r1, #2
 8003954:	6019      	str	r1, [r3, #0]
 8003956:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	fa93 f1a3 	rbit	r1, r3
 8003960:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003964:	6019      	str	r1, [r3, #0]
  return result;
 8003966:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1b2      	bne.n	80038ee <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8158 	beq.w	8003c48 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d112      	bne.n	80039d0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	61d3      	str	r3, [r2, #28]
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d11a      	bne.n	8003a12 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039dc:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a4b      	ldr	r2, [pc, #300]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 80039e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e8:	f7fe fabc 	bl	8001f64 <HAL_GetTick>
 80039ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e009      	b.n	8003a06 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fe fab7 	bl	8001f64 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e2e9      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ef      	beq.n	80039f2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x852>
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a39      	ldr	r2, [pc, #228]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	e02f      	b.n	8003a8a <HAL_RCC_OscConfig+0x8b2>
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCC_OscConfig+0x876>
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a33      	ldr	r2, [pc, #204]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a46:	f023 0304 	bic.w	r3, r3, #4
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	e01d      	b.n	8003a8a <HAL_RCC_OscConfig+0x8b2>
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x89a>
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6213      	str	r3, [r2, #32]
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x8b2>
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a24      	ldr	r2, [pc, #144]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6213      	str	r3, [r2, #32]
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d06b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a94:	f7fe fa66 	bl	8001f64 <HAL_GetTick>
 8003a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	e00b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fe fa61 	bl	8001f64 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e291      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003ab6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003aba:	2202      	movs	r2, #2
 8003abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	fa93 f2a3 	rbit	r2, r3
 8003ac8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ae4:	601a      	str	r2, [r3, #0]
  return result;
 8003ae6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003aea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d109      	bne.n	8003b14 <HAL_RCC_OscConfig+0x93c>
 8003b00:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	e014      	b.n	8003b30 <HAL_RCC_OscConfig+0x958>
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	10908120 	.word	0x10908120
 8003b10:	40007000 	.word	0x40007000
 8003b14:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b18:	2202      	movs	r2, #2
 8003b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	fa93 f2a3 	rbit	r2, r3
 8003b26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	4bbb      	ldr	r3, [pc, #748]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b34:	2102      	movs	r1, #2
 8003b36:	6011      	str	r1, [r2, #0]
 8003b38:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	fa92 f1a2 	rbit	r1, r2
 8003b42:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b46:	6011      	str	r1, [r2, #0]
  return result;
 8003b48:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	fab2 f282 	clz	r2, r2
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f002 021f 	and.w	r2, r2, #31
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d099      	beq.n	8003a9e <HAL_RCC_OscConfig+0x8c6>
 8003b6a:	e063      	b.n	8003c34 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f9fa 	bl	8001f64 <HAL_GetTick>
 8003b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00b      	b.n	8003b8e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe f9f5 	bl	8001f64 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e225      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003b8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fa93 f2a3 	rbit	r2, r3
 8003ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003baa:	2202      	movs	r2, #2
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	fa93 f2a3 	rbit	r2, r3
 8003bb8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bbc:	601a      	str	r2, [r3, #0]
  return result;
 8003bbe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bc2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f043 0302 	orr.w	r3, r3, #2
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d102      	bne.n	8003bde <HAL_RCC_OscConfig+0xa06>
 8003bd8:	4b90      	ldr	r3, [pc, #576]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	e00d      	b.n	8003bfa <HAL_RCC_OscConfig+0xa22>
 8003bde:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003be2:	2202      	movs	r2, #2
 8003be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	fa93 f2a3 	rbit	r2, r3
 8003bf0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bfe:	2102      	movs	r1, #2
 8003c00:	6011      	str	r1, [r2, #0]
 8003c02:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	fa92 f1a2 	rbit	r1, r2
 8003c0c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c10:	6011      	str	r1, [r2, #0]
  return result;
 8003c12:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	fab2 f282 	clz	r2, r2
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	f002 021f 	and.w	r2, r2, #31
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1a0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c34:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b77      	ldr	r3, [pc, #476]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	4a76      	ldr	r2, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 81c2 	beq.w	8003fd8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c54:	4b71      	ldr	r3, [pc, #452]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	f000 819c 	beq.w	8003f9a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c62:	1d3b      	adds	r3, r7, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	f040 8114 	bne.w	8003e96 <HAL_RCC_OscConfig+0xcbe>
 8003c6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c86:	601a      	str	r2, [r3, #0]
  return result;
 8003c88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe f95e 	bl	8001f64 <HAL_GetTick>
 8003ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cac:	e009      	b.n	8003cc2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cae:	f7fe f959 	bl	8001f64 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e18b      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003cc2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	fa93 f2a3 	rbit	r2, r3
 8003cd6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003cda:	601a      	str	r2, [r3, #0]
  return result;
 8003cdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ce0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_OscConfig+0xb24>
 8003cf6:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e01b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb5c>
 8003cfc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	fa93 f2a3 	rbit	r2, r3
 8003d10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	fa93 f2a3 	rbit	r2, r3
 8003d2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	4b3a      	ldr	r3, [pc, #232]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d3c:	6011      	str	r1, [r2, #0]
 8003d3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	fa92 f1a2 	rbit	r1, r2
 8003d48:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d4c:	6011      	str	r1, [r2, #0]
  return result;
 8003d4e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	fab2 f282 	clz	r2, r2
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	f042 0220 	orr.w	r2, r2, #32
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	f002 021f 	and.w	r2, r2, #31
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d19e      	bne.n	8003cae <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	4925      	ldr	r1, [pc, #148]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
 8003d8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	fa93 f2a3 	rbit	r2, r3
 8003da0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003da4:	601a      	str	r2, [r3, #0]
  return result;
 8003da6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003daa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003db6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fe f8cf 	bl	8001f64 <HAL_GetTick>
 8003dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dca:	e009      	b.n	8003de0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe f8ca 	bl	8001f64 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0fc      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003de0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fa93 f2a3 	rbit	r2, r3
 8003df4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003df8:	601a      	str	r2, [r3, #0]
  return result;
 8003dfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dfe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_RCC_OscConfig+0xc48>
 8003e14:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	e01e      	b.n	8003e58 <HAL_RCC_OscConfig+0xc80>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	fa93 f2a3 	rbit	r2, r3
 8003e34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_RCC_OscConfig+0xe0c>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	fa92 f1a2 	rbit	r1, r2
 8003e6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e70:	6011      	str	r1, [r2, #0]
  return result;
 8003e72:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	fab2 f282 	clz	r2, r2
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	f042 0220 	orr.w	r2, r2, #32
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	f002 021f 	and.w	r2, r2, #31
 8003e88:	2101      	movs	r1, #1
 8003e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d09b      	beq.n	8003dcc <HAL_RCC_OscConfig+0xbf4>
 8003e94:	e0a0      	b.n	8003fd8 <HAL_RCC_OscConfig+0xe00>
 8003e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eae:	601a      	str	r2, [r3, #0]
  return result;
 8003eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ec0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f84a 	bl	8001f64 <HAL_GetTick>
 8003ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed4:	e009      	b.n	8003eea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fe f845 	bl	8001f64 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e077      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	fa93 f2a3 	rbit	r2, r3
 8003efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f02:	601a      	str	r2, [r3, #0]
  return result;
 8003f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <HAL_RCC_OscConfig+0xd4c>
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0xe0c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	e01b      	b.n	8003f5c <HAL_RCC_OscConfig+0xd84>
 8003f24:	f107 0320 	add.w	r3, r7, #32
 8003f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f107 0320 	add.w	r3, r7, #32
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	fa93 f2a3 	rbit	r2, r3
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f107 0318 	add.w	r3, r7, #24
 8003f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f107 0318 	add.w	r3, r7, #24
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	fa93 f2a3 	rbit	r2, r3
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <HAL_RCC_OscConfig+0xe0c>)
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f107 0210 	add.w	r2, r7, #16
 8003f60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f64:	6011      	str	r1, [r2, #0]
 8003f66:	f107 0210 	add.w	r2, r7, #16
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	fa92 f1a2 	rbit	r1, r2
 8003f70:	f107 020c 	add.w	r2, r7, #12
 8003f74:	6011      	str	r1, [r2, #0]
  return result;
 8003f76:	f107 020c 	add.w	r2, r7, #12
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	fab2 f282 	clz	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f002 021f 	and.w	r2, r2, #31
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d19e      	bne.n	8003ed6 <HAL_RCC_OscConfig+0xcfe>
 8003f98:	e01e      	b.n	8003fd8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e018      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <HAL_RCC_OscConfig+0xe0c>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d108      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b09e      	sub	sp, #120	; 0x78
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e162      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b90      	ldr	r3, [pc, #576]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d910      	bls.n	8004030 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b8d      	ldr	r3, [pc, #564]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 0207 	bic.w	r2, r3, #7
 8004016:	498b      	ldr	r1, [pc, #556]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b89      	ldr	r3, [pc, #548]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e14a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403c:	4b82      	ldr	r3, [pc, #520]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	497f      	ldr	r1, [pc, #508]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80dc 	beq.w	8004214 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d13c      	bne.n	80040de <HAL_RCC_ClockConfig+0xf6>
 8004064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004068:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	d102      	bne.n	800408e <HAL_RCC_ClockConfig+0xa6>
 8004088:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	e00f      	b.n	80040ae <HAL_RCC_ClockConfig+0xc6>
 800408e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004092:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	667b      	str	r3, [r7, #100]	; 0x64
 800409c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60
 80040a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040aa:	4b67      	ldr	r3, [pc, #412]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80040b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040b6:	fa92 f2a2 	rbit	r2, r2
 80040ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040be:	fab2 f282 	clz	r2, r2
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	f042 0220 	orr.w	r2, r2, #32
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	f002 021f 	and.w	r2, r2, #31
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f202 	lsl.w	r2, r1, r2
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d17b      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0f3      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d13c      	bne.n	8004160 <HAL_RCC_ClockConfig+0x178>
 80040e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d102      	bne.n	8004110 <HAL_RCC_ClockConfig+0x128>
 800410a:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	e00f      	b.n	8004130 <HAL_RCC_ClockConfig+0x148>
 8004110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004114:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	647b      	str	r3, [r7, #68]	; 0x44
 800411e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004122:	643b      	str	r3, [r7, #64]	; 0x40
 8004124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800412c:	4b46      	ldr	r3, [pc, #280]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004134:	63ba      	str	r2, [r7, #56]	; 0x38
 8004136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004138:	fa92 f2a2 	rbit	r2, r2
 800413c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800413e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004140:	fab2 f282 	clz	r2, r2
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	f042 0220 	orr.w	r2, r2, #32
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	f002 021f 	and.w	r2, r2, #31
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f202 	lsl.w	r2, r1, r2
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d13a      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0b2      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
 8004160:	2302      	movs	r3, #2
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_RCC_ClockConfig+0x1a0>
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e00d      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1bc>
 8004188:	2302      	movs	r3, #2
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
 8004194:	2302      	movs	r3, #2
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	4b29      	ldr	r3, [pc, #164]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2202      	movs	r2, #2
 80041a6:	61ba      	str	r2, [r7, #24]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	fa92 f2a2 	rbit	r2, r2
 80041ae:	617a      	str	r2, [r7, #20]
  return result;
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	fab2 f282 	clz	r2, r2
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	f042 0220 	orr.w	r2, r2, #32
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	f002 021f 	and.w	r2, r2, #31
 80041c2:	2101      	movs	r1, #1
 80041c4:	fa01 f202 	lsl.w	r2, r1, r2
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e079      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	491a      	ldr	r1, [pc, #104]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e4:	f7fd febe 	bl	8001f64 <HAL_GetTick>
 80041e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fd feba 	bl	8001f64 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e061      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d214      	bcs.n	800424c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 0207 	bic.w	r2, r3, #7
 800422a:	4906      	ldr	r1, [pc, #24]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e040      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
 8004244:	40022000 	.word	0x40022000
 8004248:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	491a      	ldr	r1, [pc, #104]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4912      	ldr	r1, [pc, #72]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800428a:	f000 f829 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 800428e:	4601      	mov	r1, r0
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004298:	22f0      	movs	r2, #240	; 0xf0
 800429a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	fa92 f2a2 	rbit	r2, r2
 80042a2:	60fa      	str	r2, [r7, #12]
  return result;
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	fab2 f282 	clz	r2, r2
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	40d3      	lsrs	r3, r2
 80042ae:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <HAL_RCC_ClockConfig+0x2ec>)
 80042b0:	5cd3      	ldrb	r3, [r2, r3]
 80042b2:	fa21 f303 	lsr.w	r3, r1, r3
 80042b6:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <HAL_RCC_ClockConfig+0x2f0>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <HAL_RCC_ClockConfig+0x2f4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd fe0c 	bl	8001edc <HAL_InitTick>
  
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3778      	adds	r7, #120	; 0x78
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	0800b0bc 	.word	0x0800b0bc
 80042d8:	20000004 	.word	0x20000004
 80042dc:	20000008 	.word	0x20000008

080042e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b08b      	sub	sp, #44	; 0x2c
 80042e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	2300      	movs	r3, #0
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042fa:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b04      	cmp	r3, #4
 8004308:	d002      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x30>
 800430a:	2b08      	cmp	r3, #8
 800430c:	d003      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x36>
 800430e:	e03c      	b.n	800438a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004310:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004312:	623b      	str	r3, [r7, #32]
      break;
 8004314:	e03c      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800431c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004320:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	fa92 f2a2 	rbit	r2, r2
 8004328:	607a      	str	r2, [r7, #4]
  return result;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	fab2 f282 	clz	r2, r2
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	40d3      	lsrs	r3, r2
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004336:	5cd3      	ldrb	r3, [r2, r3]
 8004338:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800433a:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	220f      	movs	r2, #15
 8004344:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	fa92 f2a2 	rbit	r2, r2
 800434c:	60fa      	str	r2, [r7, #12]
  return result;
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	fab2 f282 	clz	r2, r2
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	40d3      	lsrs	r3, r2
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800435a:	5cd3      	ldrb	r3, [r2, r3]
 800435c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	e004      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	623b      	str	r3, [r7, #32]
      break;
 8004388:	e002      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800438c:	623b      	str	r3, [r7, #32]
      break;
 800438e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004390:	6a3b      	ldr	r3, [r7, #32]
}
 8004392:	4618      	mov	r0, r3
 8004394:	372c      	adds	r7, #44	; 0x2c
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	007a1200 	.word	0x007a1200
 80043a8:	0800b0d4 	.word	0x0800b0d4
 80043ac:	0800b0e4 	.word	0x0800b0e4
 80043b0:	003d0900 	.word	0x003d0900

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000004 	.word	0x20000004

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043d2:	f7ff ffef 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d6:	4601      	mov	r1, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	fa92 f2a2 	rbit	r2, r2
 80043ec:	603a      	str	r2, [r7, #0]
  return result;
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	fab2 f282 	clz	r2, r2
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	40d3      	lsrs	r3, r2
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_RCC_GetPCLK1Freq+0x40>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	0800b0cc 	.word	0x0800b0cc

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004416:	f7ff ffcd 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 800441a:	4601      	mov	r1, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004424:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004428:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	fa92 f2a2 	rbit	r2, r2
 8004430:	603a      	str	r2, [r7, #0]
  return result;
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	40d3      	lsrs	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x40>)
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	0800b0cc 	.word	0x0800b0cc

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b092      	sub	sp, #72	; 0x48
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80d4 	beq.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004478:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10e      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	4a4a      	ldr	r2, [pc, #296]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	61d3      	str	r3, [r2, #28]
 8004490:	4b48      	ldr	r3, [pc, #288]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b45      	ldr	r3, [pc, #276]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a41      	ldr	r2, [pc, #260]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fd fd53 	bl	8001f64 <HAL_GetTick>
 80044be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd fd4f 	bl	8001f64 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	; 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e169      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b38      	ldr	r3, [pc, #224]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e0:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8084 	beq.w	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d07c      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004500:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	461a      	mov	r2, r3
 800452a:	2301      	movs	r3, #1
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004532:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	fa93 f3a3 	rbit	r3, r3
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	461a      	mov	r2, r3
 800454e:	2300      	movs	r3, #0
 8004550:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004552:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004556:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04b      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004562:	f7fd fcff 	bl	8001f64 <HAL_GetTick>
 8004566:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd fcfb 	bl	8001f64 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e113      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004580:	2302      	movs	r3, #2
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	2302      	movs	r3, #2
 800458e:	623b      	str	r3, [r7, #32]
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	61fb      	str	r3, [r7, #28]
  return result;
 8004598:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d108      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045ae:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	e00d      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40007000 	.word	0x40007000
 80045bc:	10908100 	.word	0x10908100
 80045c0:	2302      	movs	r3, #2
 80045c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	4b78      	ldr	r3, [pc, #480]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	2202      	movs	r2, #2
 80045d2:	613a      	str	r2, [r7, #16]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	fa92 f2a2 	rbit	r2, r2
 80045da:	60fa      	str	r2, [r7, #12]
  return result;
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	fab2 f282 	clz	r2, r2
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	f002 021f 	and.w	r2, r2, #31
 80045ee:	2101      	movs	r1, #1
 80045f0:	fa01 f202 	lsl.w	r2, r1, r2
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0b7      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045fa:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	496a      	ldr	r1, [pc, #424]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800460c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4a65      	ldr	r2, [pc, #404]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800462c:	4b60      	ldr	r3, [pc, #384]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	f023 0203 	bic.w	r2, r3, #3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	495d      	ldr	r1, [pc, #372]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800463a:	4313      	orrs	r3, r2
 800463c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800464a:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4956      	ldr	r1, [pc, #344]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004668:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	494e      	ldr	r1, [pc, #312]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f023 0210 	bic.w	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4947      	ldr	r1, [pc, #284]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004694:	4313      	orrs	r3, r2
 8004696:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	493f      	ldr	r1, [pc, #252]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f023 0220 	bic.w	r2, r3, #32
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	4938      	ldr	r1, [pc, #224]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046e0:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	4930      	ldr	r1, [pc, #192]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046fe:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	4929      	ldr	r1, [pc, #164]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800471c:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	4921      	ldr	r1, [pc, #132]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800473a:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	491a      	ldr	r1, [pc, #104]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	4912      	ldr	r1, [pc, #72]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	490b      	ldr	r1, [pc, #44]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	4903      	ldr	r1, [pc, #12]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3748      	adds	r7, #72	; 0x48
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000

080047b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e09d      	b.n	8004902 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d108      	bne.n	80047e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d6:	d009      	beq.n	80047ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	61da      	str	r2, [r3, #28]
 80047de:	e005      	b.n	80047ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fd f9ee 	bl	8001be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004822:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800482c:	d902      	bls.n	8004834 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e002      	b.n	800483a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004838:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004842:	d007      	beq.n	8004854 <HAL_SPI_Init+0xa0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800484c:	d002      	beq.n	8004854 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	ea42 0103 	orr.w	r1, r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	f003 0204 	and.w	r2, r3, #4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b088      	sub	sp, #32
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_SPI_Transmit+0x22>
 8004928:	2302      	movs	r3, #2
 800492a:	e158      	b.n	8004bde <HAL_SPI_Transmit+0x2d4>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004934:	f7fd fb16 	bl	8001f64 <HAL_GetTick>
 8004938:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d002      	beq.n	8004950 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800494e:	e13d      	b.n	8004bcc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_SPI_Transmit+0x52>
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004960:	e134      	b.n	8004bcc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2203      	movs	r2, #3
 8004966:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	88fa      	ldrh	r2, [r7, #6]
 800497a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	88fa      	ldrh	r2, [r7, #6]
 8004980:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ac:	d10f      	bne.n	80049ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d007      	beq.n	80049ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049f4:	d94b      	bls.n	8004a8e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_Transmit+0xfa>
 80049fe:	8afb      	ldrh	r3, [r7, #22]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d13e      	bne.n	8004a82 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	881a      	ldrh	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	1c9a      	adds	r2, r3, #2
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a28:	e02b      	b.n	8004a82 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d112      	bne.n	8004a5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	881a      	ldrh	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	1c9a      	adds	r2, r3, #2
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a5c:	e011      	b.n	8004a82 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5e:	f7fd fa81 	bl	8001f64 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d803      	bhi.n	8004a76 <HAL_SPI_Transmit+0x16c>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d102      	bne.n	8004a7c <HAL_SPI_Transmit+0x172>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a80:	e0a4      	b.n	8004bcc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1ce      	bne.n	8004a2a <HAL_SPI_Transmit+0x120>
 8004a8c:	e07c      	b.n	8004b88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Transmit+0x192>
 8004a96:	8afb      	ldrh	r3, [r7, #22]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d170      	bne.n	8004b7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d912      	bls.n	8004acc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	881a      	ldrh	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b02      	subs	r3, #2
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aca:	e058      	b.n	8004b7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004af2:	e044      	b.n	8004b7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d12b      	bne.n	8004b5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d912      	bls.n	8004b32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	881a      	ldrh	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	1c9a      	adds	r2, r3, #2
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b02      	subs	r3, #2
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b30:	e025      	b.n	8004b7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b58:	e011      	b.n	8004b7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b5a:	f7fd fa03 	bl	8001f64 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d803      	bhi.n	8004b72 <HAL_SPI_Transmit+0x268>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d102      	bne.n	8004b78 <HAL_SPI_Transmit+0x26e>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b7c:	e026      	b.n	8004bcc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1b5      	bne.n	8004af4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	6839      	ldr	r1, [r7, #0]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fb5b 	bl	8005248 <SPI_EndRxTxTransaction>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e000      	b.n	8004bcc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004bca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b08a      	sub	sp, #40	; 0x28
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x26>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e1fb      	b.n	8005004 <HAL_SPI_TransmitReceive+0x41e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c14:	f7fd f9a6 	bl	8001f64 <HAL_GetTick>
 8004c18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c28:	887b      	ldrh	r3, [r7, #2]
 8004c2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c30:	7efb      	ldrb	r3, [r7, #27]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d00e      	beq.n	8004c54 <HAL_SPI_TransmitReceive+0x6e>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3c:	d106      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x66>
 8004c46:	7efb      	ldrb	r3, [r7, #27]
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d003      	beq.n	8004c54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c52:	e1cd      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_SPI_TransmitReceive+0x80>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_TransmitReceive+0x80>
 8004c60:	887b      	ldrh	r3, [r7, #2]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c6c:	e1c0      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d003      	beq.n	8004c82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2205      	movs	r2, #5
 8004c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	887a      	ldrh	r2, [r7, #2]
 8004c92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	887a      	ldrh	r2, [r7, #2]
 8004c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	887a      	ldrh	r2, [r7, #2]
 8004ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	887a      	ldrh	r2, [r7, #2]
 8004cae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cc4:	d802      	bhi.n	8004ccc <HAL_SPI_TransmitReceive+0xe6>
 8004cc6:	8a3b      	ldrh	r3, [r7, #16]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d908      	bls.n	8004cde <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	e007      	b.n	8004cee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d007      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d14:	d97c      	bls.n	8004e10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x13e>
 8004d1e:	8a7b      	ldrh	r3, [r7, #18]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d169      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d48:	e056      	b.n	8004df8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d11b      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x1aa>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x1aa>
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d113      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	1c9a      	adds	r2, r3, #2
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d11c      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x1f2>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	b292      	uxth	r2, r2
 8004db6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	1c9a      	adds	r2, r3, #2
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dd8:	f7fd f8c4 	bl	8001f64 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d807      	bhi.n	8004df8 <HAL_SPI_TransmitReceive+0x212>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d003      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004df6:	e0fb      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1a3      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x164>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d19d      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x164>
 8004e0e:	e0df      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0x23a>
 8004e18:	8a7b      	ldrh	r3, [r7, #18]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	f040 80cb 	bne.w	8004fb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d912      	bls.n	8004e50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	881a      	ldrh	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	1c9a      	adds	r2, r3, #2
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b02      	subs	r3, #2
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e4e:	e0b2      	b.n	8004fb6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	7812      	ldrb	r2, [r2, #0]
 8004e5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e76:	e09e      	b.n	8004fb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d134      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x30a>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02f      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x30a>
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d12c      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d912      	bls.n	8004ec6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	881a      	ldrh	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	1c9a      	adds	r2, r3, #2
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b02      	subs	r3, #2
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ec4:	e012      	b.n	8004eec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d148      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x3aa>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d042      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d923      	bls.n	8004f5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	b292      	uxth	r2, r2
 8004f22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	1c9a      	adds	r2, r3, #2
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b02      	subs	r3, #2
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d81f      	bhi.n	8004f8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	e016      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f103 020c 	add.w	r2, r3, #12
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	7812      	ldrb	r2, [r2, #0]
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f90:	f7fc ffe8 	bl	8001f64 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d803      	bhi.n	8004fa8 <HAL_SPI_TransmitReceive+0x3c2>
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d102      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x3c8>
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004fb4:	e01c      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f47f af5b 	bne.w	8004e78 <HAL_SPI_TransmitReceive+0x292>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f47f af54 	bne.w	8004e78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f937 	bl	8005248 <SPI_EndRxTxTransaction>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d006      	beq.n	8004fee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60
 8004fec:	e000      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005004:	4618      	mov	r0, r3
 8005006:	3728      	adds	r7, #40	; 0x28
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800501c:	f7fc ffa2 	bl	8001f64 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	4413      	add	r3, r2
 800502a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800502c:	f7fc ff9a 	bl	8001f64 <HAL_GetTick>
 8005030:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005032:	4b39      	ldr	r3, [pc, #228]	; (8005118 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	015b      	lsls	r3, r3, #5
 8005038:	0d1b      	lsrs	r3, r3, #20
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	fb02 f303 	mul.w	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005042:	e054      	b.n	80050ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d050      	beq.n	80050ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800504c:	f7fc ff8a 	bl	8001f64 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	429a      	cmp	r2, r3
 800505a:	d902      	bls.n	8005062 <SPI_WaitFlagStateUntilTimeout+0x56>
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d13d      	bne.n	80050de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005070:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507a:	d111      	bne.n	80050a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005084:	d004      	beq.n	8005090 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508e:	d107      	bne.n	80050a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a8:	d10f      	bne.n	80050ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e017      	b.n	800510e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4013      	ands	r3, r2
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2300      	movne	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	429a      	cmp	r2, r3
 800510a:	d19b      	bne.n	8005044 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000004 	.word	0x20000004

0800511c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800512e:	f7fc ff19 	bl	8001f64 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	4413      	add	r3, r2
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800513e:	f7fc ff11 	bl	8001f64 <HAL_GetTick>
 8005142:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800514c:	4b3d      	ldr	r3, [pc, #244]	; (8005244 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	00da      	lsls	r2, r3, #3
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	0d1b      	lsrs	r3, r3, #20
 800515c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005164:	e060      	b.n	8005228 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800516c:	d107      	bne.n	800517e <SPI_WaitFifoStateUntilTimeout+0x62>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800517c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d050      	beq.n	8005228 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005186:	f7fc feed 	bl	8001f64 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	429a      	cmp	r2, r3
 8005194:	d902      	bls.n	800519c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	d13d      	bne.n	8005218 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b4:	d111      	bne.n	80051da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	d004      	beq.n	80051ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c8:	d107      	bne.n	80051da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e2:	d10f      	bne.n	8005204 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005202:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e010      	b.n	800523a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	3b01      	subs	r3, #1
 8005226:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d196      	bne.n	8005166 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000004 	.word	0x20000004

08005248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2200      	movs	r2, #0
 800525c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff ff5b 	bl	800511c <SPI_WaitFifoStateUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e027      	b.n	80052cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff fec0 	bl	800500c <SPI_WaitFlagStateUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005296:	f043 0220 	orr.w	r2, r3, #32
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e014      	b.n	80052cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff ff34 	bl	800511c <SPI_WaitFifoStateUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e000      	b.n	80052cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e040      	b.n	8005368 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc fcba 	bl	8001c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2224      	movs	r2, #36	; 0x24
 8005300:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8c0 	bl	8005498 <UART_SetConfig>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e022      	b.n	8005368 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa88 	bl	8005840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800533e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800534e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fb0f 	bl	8005984 <UART_CheckIdleState>
 8005366:	4603      	mov	r3, r0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005384:	2b20      	cmp	r3, #32
 8005386:	f040 8082 	bne.w	800548e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <HAL_UART_Transmit+0x26>
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e07a      	b.n	8005490 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Transmit+0x38>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e073      	b.n	8005490 <HAL_UART_Transmit+0x120>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2221      	movs	r2, #33	; 0x21
 80053bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053be:	f7fc fdd1 	bl	8001f64 <HAL_GetTick>
 80053c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053dc:	d108      	bne.n	80053f0 <HAL_UART_Transmit+0x80>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	e003      	b.n	80053f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005400:	e02d      	b.n	800545e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fb02 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e039      	b.n	8005490 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	881a      	ldrh	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800542e:	b292      	uxth	r2, r2
 8005430:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	3302      	adds	r3, #2
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e008      	b.n	800544c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	b292      	uxth	r2, r2
 8005444:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	3301      	adds	r3, #1
 800544a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1cb      	bne.n	8005402 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2140      	movs	r1, #64	; 0x40
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 face 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e005      	b.n	8005490 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e000      	b.n	8005490 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800548e:	2302      	movs	r3, #2
  }
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80054c6:	f023 030c 	bic.w	r3, r3, #12
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	6979      	ldr	r1, [r7, #20]
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4aae      	ldr	r2, [pc, #696]	; (80057cc <UART_SetConfig+0x334>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d120      	bne.n	800555a <UART_SetConfig+0xc2>
 8005518:	4bad      	ldr	r3, [pc, #692]	; (80057d0 <UART_SetConfig+0x338>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	2b03      	cmp	r3, #3
 8005522:	d817      	bhi.n	8005554 <UART_SetConfig+0xbc>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <UART_SetConfig+0x94>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	0800553d 	.word	0x0800553d
 8005530:	08005549 	.word	0x08005549
 8005534:	0800554f 	.word	0x0800554f
 8005538:	08005543 	.word	0x08005543
 800553c:	2301      	movs	r3, #1
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e0b5      	b.n	80056ae <UART_SetConfig+0x216>
 8005542:	2302      	movs	r3, #2
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e0b2      	b.n	80056ae <UART_SetConfig+0x216>
 8005548:	2304      	movs	r3, #4
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e0af      	b.n	80056ae <UART_SetConfig+0x216>
 800554e:	2308      	movs	r3, #8
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e0ac      	b.n	80056ae <UART_SetConfig+0x216>
 8005554:	2310      	movs	r3, #16
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e0a9      	b.n	80056ae <UART_SetConfig+0x216>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a9d      	ldr	r2, [pc, #628]	; (80057d4 <UART_SetConfig+0x33c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d124      	bne.n	80055ae <UART_SetConfig+0x116>
 8005564:	4b9a      	ldr	r3, [pc, #616]	; (80057d0 <UART_SetConfig+0x338>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800556c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005570:	d011      	beq.n	8005596 <UART_SetConfig+0xfe>
 8005572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005576:	d817      	bhi.n	80055a8 <UART_SetConfig+0x110>
 8005578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800557c:	d011      	beq.n	80055a2 <UART_SetConfig+0x10a>
 800557e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005582:	d811      	bhi.n	80055a8 <UART_SetConfig+0x110>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <UART_SetConfig+0xf8>
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558c:	d006      	beq.n	800559c <UART_SetConfig+0x104>
 800558e:	e00b      	b.n	80055a8 <UART_SetConfig+0x110>
 8005590:	2300      	movs	r3, #0
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e08b      	b.n	80056ae <UART_SetConfig+0x216>
 8005596:	2302      	movs	r3, #2
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e088      	b.n	80056ae <UART_SetConfig+0x216>
 800559c:	2304      	movs	r3, #4
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e085      	b.n	80056ae <UART_SetConfig+0x216>
 80055a2:	2308      	movs	r3, #8
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e082      	b.n	80056ae <UART_SetConfig+0x216>
 80055a8:	2310      	movs	r3, #16
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e07f      	b.n	80056ae <UART_SetConfig+0x216>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a89      	ldr	r2, [pc, #548]	; (80057d8 <UART_SetConfig+0x340>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d124      	bne.n	8005602 <UART_SetConfig+0x16a>
 80055b8:	4b85      	ldr	r3, [pc, #532]	; (80057d0 <UART_SetConfig+0x338>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80055c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055c4:	d011      	beq.n	80055ea <UART_SetConfig+0x152>
 80055c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055ca:	d817      	bhi.n	80055fc <UART_SetConfig+0x164>
 80055cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055d0:	d011      	beq.n	80055f6 <UART_SetConfig+0x15e>
 80055d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055d6:	d811      	bhi.n	80055fc <UART_SetConfig+0x164>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <UART_SetConfig+0x14c>
 80055dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055e0:	d006      	beq.n	80055f0 <UART_SetConfig+0x158>
 80055e2:	e00b      	b.n	80055fc <UART_SetConfig+0x164>
 80055e4:	2300      	movs	r3, #0
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e061      	b.n	80056ae <UART_SetConfig+0x216>
 80055ea:	2302      	movs	r3, #2
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e05e      	b.n	80056ae <UART_SetConfig+0x216>
 80055f0:	2304      	movs	r3, #4
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e05b      	b.n	80056ae <UART_SetConfig+0x216>
 80055f6:	2308      	movs	r3, #8
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e058      	b.n	80056ae <UART_SetConfig+0x216>
 80055fc:	2310      	movs	r3, #16
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e055      	b.n	80056ae <UART_SetConfig+0x216>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a75      	ldr	r2, [pc, #468]	; (80057dc <UART_SetConfig+0x344>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d124      	bne.n	8005656 <UART_SetConfig+0x1be>
 800560c:	4b70      	ldr	r3, [pc, #448]	; (80057d0 <UART_SetConfig+0x338>)
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005614:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005618:	d011      	beq.n	800563e <UART_SetConfig+0x1a6>
 800561a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800561e:	d817      	bhi.n	8005650 <UART_SetConfig+0x1b8>
 8005620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005624:	d011      	beq.n	800564a <UART_SetConfig+0x1b2>
 8005626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800562a:	d811      	bhi.n	8005650 <UART_SetConfig+0x1b8>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <UART_SetConfig+0x1a0>
 8005630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005634:	d006      	beq.n	8005644 <UART_SetConfig+0x1ac>
 8005636:	e00b      	b.n	8005650 <UART_SetConfig+0x1b8>
 8005638:	2300      	movs	r3, #0
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e037      	b.n	80056ae <UART_SetConfig+0x216>
 800563e:	2302      	movs	r3, #2
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e034      	b.n	80056ae <UART_SetConfig+0x216>
 8005644:	2304      	movs	r3, #4
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	e031      	b.n	80056ae <UART_SetConfig+0x216>
 800564a:	2308      	movs	r3, #8
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e02e      	b.n	80056ae <UART_SetConfig+0x216>
 8005650:	2310      	movs	r3, #16
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e02b      	b.n	80056ae <UART_SetConfig+0x216>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a61      	ldr	r2, [pc, #388]	; (80057e0 <UART_SetConfig+0x348>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d124      	bne.n	80056aa <UART_SetConfig+0x212>
 8005660:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <UART_SetConfig+0x338>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005668:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800566c:	d011      	beq.n	8005692 <UART_SetConfig+0x1fa>
 800566e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005672:	d817      	bhi.n	80056a4 <UART_SetConfig+0x20c>
 8005674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005678:	d011      	beq.n	800569e <UART_SetConfig+0x206>
 800567a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800567e:	d811      	bhi.n	80056a4 <UART_SetConfig+0x20c>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <UART_SetConfig+0x1f4>
 8005684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005688:	d006      	beq.n	8005698 <UART_SetConfig+0x200>
 800568a:	e00b      	b.n	80056a4 <UART_SetConfig+0x20c>
 800568c:	2300      	movs	r3, #0
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e00d      	b.n	80056ae <UART_SetConfig+0x216>
 8005692:	2302      	movs	r3, #2
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e00a      	b.n	80056ae <UART_SetConfig+0x216>
 8005698:	2304      	movs	r3, #4
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e007      	b.n	80056ae <UART_SetConfig+0x216>
 800569e:	2308      	movs	r3, #8
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e004      	b.n	80056ae <UART_SetConfig+0x216>
 80056a4:	2310      	movs	r3, #16
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e001      	b.n	80056ae <UART_SetConfig+0x216>
 80056aa:	2310      	movs	r3, #16
 80056ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b6:	d15c      	bne.n	8005772 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80056b8:	7ffb      	ldrb	r3, [r7, #31]
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d827      	bhi.n	800570e <UART_SetConfig+0x276>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x22c>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	0800570f 	.word	0x0800570f
 80056d4:	080056ff 	.word	0x080056ff
 80056d8:	0800570f 	.word	0x0800570f
 80056dc:	0800570f 	.word	0x0800570f
 80056e0:	0800570f 	.word	0x0800570f
 80056e4:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e8:	f7fe fe70 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 80056ec:	61b8      	str	r0, [r7, #24]
        break;
 80056ee:	e013      	b.n	8005718 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fe fe8e 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 80056f4:	61b8      	str	r0, [r7, #24]
        break;
 80056f6:	e00f      	b.n	8005718 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b3a      	ldr	r3, [pc, #232]	; (80057e4 <UART_SetConfig+0x34c>)
 80056fa:	61bb      	str	r3, [r7, #24]
        break;
 80056fc:	e00c      	b.n	8005718 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fe fdef 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8005702:	61b8      	str	r0, [r7, #24]
        break;
 8005704:	e008      	b.n	8005718 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	61bb      	str	r3, [r7, #24]
        break;
 800570c:	e004      	b.n	8005718 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	77bb      	strb	r3, [r7, #30]
        break;
 8005716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8085 	beq.w	800582a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	005a      	lsls	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	441a      	add	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	b29b      	uxth	r3, r3
 8005736:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b0f      	cmp	r3, #15
 800573c:	d916      	bls.n	800576c <UART_SetConfig+0x2d4>
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005744:	d212      	bcs.n	800576c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f023 030f 	bic.w	r3, r3, #15
 800574e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	b29b      	uxth	r3, r3
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	b29a      	uxth	r2, r3
 800575c:	89fb      	ldrh	r3, [r7, #14]
 800575e:	4313      	orrs	r3, r2
 8005760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	89fa      	ldrh	r2, [r7, #14]
 8005768:	60da      	str	r2, [r3, #12]
 800576a:	e05e      	b.n	800582a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	77bb      	strb	r3, [r7, #30]
 8005770:	e05b      	b.n	800582a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005772:	7ffb      	ldrb	r3, [r7, #31]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d837      	bhi.n	80057e8 <UART_SetConfig+0x350>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x2e8>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	080057e9 	.word	0x080057e9
 8005790:	080057bb 	.word	0x080057bb
 8005794:	080057e9 	.word	0x080057e9
 8005798:	080057e9 	.word	0x080057e9
 800579c:	080057e9 	.word	0x080057e9
 80057a0:	080057c3 	.word	0x080057c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fe fe12 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 80057a8:	61b8      	str	r0, [r7, #24]
        break;
 80057aa:	e022      	b.n	80057f2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7fe fe30 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 80057b0:	61b8      	str	r0, [r7, #24]
        break;
 80057b2:	e01e      	b.n	80057f2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <UART_SetConfig+0x34c>)
 80057b6:	61bb      	str	r3, [r7, #24]
        break;
 80057b8:	e01b      	b.n	80057f2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ba:	f7fe fd91 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80057be:	61b8      	str	r0, [r7, #24]
        break;
 80057c0:	e017      	b.n	80057f2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c6:	61bb      	str	r3, [r7, #24]
        break;
 80057c8:	e013      	b.n	80057f2 <UART_SetConfig+0x35a>
 80057ca:	bf00      	nop
 80057cc:	40013800 	.word	0x40013800
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40004400 	.word	0x40004400
 80057d8:	40004800 	.word	0x40004800
 80057dc:	40004c00 	.word	0x40004c00
 80057e0:	40005000 	.word	0x40005000
 80057e4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	77bb      	strb	r3, [r7, #30]
        break;
 80057f0:	bf00      	nop
    }

    if (pclk != 0U)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d018      	beq.n	800582a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	085a      	lsrs	r2, r3, #1
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	b29b      	uxth	r3, r3
 800580c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b0f      	cmp	r3, #15
 8005812:	d908      	bls.n	8005826 <UART_SetConfig+0x38e>
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581a:	d204      	bcs.n	8005826 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	60da      	str	r2, [r3, #12]
 8005824:	e001      	b.n	800582a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005836:	7fbb      	ldrb	r3, [r7, #30]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01a      	beq.n	8005956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593e:	d10a      	bne.n	8005956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af02      	add	r7, sp, #8
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005994:	f7fc fae6 	bl	8001f64 <HAL_GetTick>
 8005998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d10e      	bne.n	80059c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f82d 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e023      	b.n	8005a0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d10e      	bne.n	80059f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f817 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e00d      	b.n	8005a0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b09c      	sub	sp, #112	; 0x70
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a26:	e0a5      	b.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	f000 80a1 	beq.w	8005b74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a32:	f7fc fa97 	bl	8001f64 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d302      	bcc.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d13e      	bne.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e6      	bne.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	663b      	str	r3, [r7, #96]	; 0x60
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e067      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d04f      	beq.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae2:	d147      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e6      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3308      	adds	r3, #8
 8005b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b40:	623a      	str	r2, [r7, #32]
 8005b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	69f9      	ldr	r1, [r7, #28]
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e5      	bne.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e010      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	bf0c      	ite	eq
 8005b84:	2301      	moveq	r3, #1
 8005b86:	2300      	movne	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	f43f af4a 	beq.w	8005a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3770      	adds	r7, #112	; 0x70
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ba4:	4904      	ldr	r1, [pc, #16]	; (8005bb8 <MX_FATFS_Init+0x18>)
 8005ba6:	4805      	ldr	r0, [pc, #20]	; (8005bbc <MX_FATFS_Init+0x1c>)
 8005ba8:	f004 fbc8 	bl	800a33c <FATFS_LinkDriver>
 8005bac:	4603      	mov	r3, r0
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <MX_FATFS_Init+0x20>)
 8005bb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005bb4:	bf00      	nop
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	200028f4 	.word	0x200028f4
 8005bbc:	20000010 	.word	0x20000010
 8005bc0:	200028f8 	.word	0x200028f8

08005bc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005bc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fb f80d 	bl	8000c00 <SD_disk_initialize>
 8005be6:	4603      	mov	r3, r0
 8005be8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fb f8ea 	bl	8000dd8 <SD_disk_status>
 8005c04:	4603      	mov	r3, r0
 8005c06:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8005c20:	7bf8      	ldrb	r0, [r7, #15]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	f7fb f8ec 	bl	8000e04 <SD_disk_read>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8005c48:	7bf8      	ldrb	r0, [r7, #15]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	f7fb f942 	bl	8000ed8 <SD_disk_write>
 8005c54:	4603      	mov	r3, r0
 8005c56:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	603a      	str	r2, [r7, #0]
 8005c6a:	71fb      	strb	r3, [r7, #7]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	79b9      	ldrb	r1, [r7, #6]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fb f9b2 	bl	8000fe0 <SD_disk_ioctl>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <disk_status+0x30>)
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	79fa      	ldrb	r2, [r7, #7]
 8005ca0:	4905      	ldr	r1, [pc, #20]	; (8005cb8 <disk_status+0x30>)
 8005ca2:	440a      	add	r2, r1
 8005ca4:	7a12      	ldrb	r2, [r2, #8]
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	4798      	blx	r3
 8005caa:	4603      	mov	r3, r0
 8005cac:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200002d4 	.word	0x200002d4

08005cbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <disk_initialize+0x48>)
 8005cce:	5cd3      	ldrb	r3, [r2, r3]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d111      	bne.n	8005cf8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	; (8005d04 <disk_initialize+0x48>)
 8005cd8:	2101      	movs	r1, #1
 8005cda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <disk_initialize+0x48>)
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	79fa      	ldrb	r2, [r7, #7]
 8005cea:	4906      	ldr	r1, [pc, #24]	; (8005d04 <disk_initialize+0x48>)
 8005cec:	440a      	add	r2, r1
 8005cee:	7a12      	ldrb	r2, [r2, #8]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200002d4 	.word	0x200002d4

08005d08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <disk_read+0x3c>)
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	689c      	ldr	r4, [r3, #8]
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	4a07      	ldr	r2, [pc, #28]	; (8005d44 <disk_read+0x3c>)
 8005d28:	4413      	add	r3, r2
 8005d2a:	7a18      	ldrb	r0, [r3, #8]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	47a0      	blx	r4
 8005d34:	4603      	mov	r3, r0
 8005d36:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}
 8005d42:	bf00      	nop
 8005d44:	200002d4 	.word	0x200002d4

08005d48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <disk_write+0x3c>)
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68dc      	ldr	r4, [r3, #12]
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	4a07      	ldr	r2, [pc, #28]	; (8005d84 <disk_write+0x3c>)
 8005d68:	4413      	add	r3, r2
 8005d6a:	7a18      	ldrb	r0, [r3, #8]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	47a0      	blx	r4
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd90      	pop	{r4, r7, pc}
 8005d82:	bf00      	nop
 8005d84:	200002d4 	.word	0x200002d4

08005d88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	603a      	str	r2, [r7, #0]
 8005d92:	71fb      	strb	r3, [r7, #7]
 8005d94:	460b      	mov	r3, r1
 8005d96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <disk_ioctl+0x38>)
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	79fa      	ldrb	r2, [r7, #7]
 8005da6:	4906      	ldr	r1, [pc, #24]	; (8005dc0 <disk_ioctl+0x38>)
 8005da8:	440a      	add	r2, r1
 8005daa:	7a10      	ldrb	r0, [r2, #8]
 8005dac:	79b9      	ldrb	r1, [r7, #6]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	4798      	blx	r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	73fb      	strb	r3, [r7, #15]
  return res;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	200002d4 	.word	0x200002d4

08005dc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005dd8:	e007      	b.n	8005dea <mem_cpy+0x26>
		*d++ = *s++;
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	1c53      	adds	r3, r2, #1
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	6179      	str	r1, [r7, #20]
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f2      	bne.n	8005dda <mem_cpy+0x16>
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005e02:	b480      	push	{r7}
 8005e04:	b087      	sub	sp, #28
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005e12:	e005      	b.n	8005e20 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	617a      	str	r2, [r7, #20]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	1e5a      	subs	r2, r3, #1
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f4      	bne.n	8005e14 <mem_set+0x12>
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005e38:	b480      	push	{r7}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005e50:	bf00      	nop
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	1e5a      	subs	r2, r3, #1
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <mem_cmp+0x40>
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	61fa      	str	r2, [r7, #28]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	61ba      	str	r2, [r7, #24]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	1acb      	subs	r3, r1, r3
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0ec      	beq.n	8005e52 <mem_cmp+0x1a>
	return r;
 8005e78:	697b      	ldr	r3, [r7, #20]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3724      	adds	r7, #36	; 0x24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e90:	e002      	b.n	8005e98 <chk_chr+0x12>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3301      	adds	r3, #1
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <chk_chr+0x26>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d1f2      	bne.n	8005e92 <chk_chr+0xc>
	return *str;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	781b      	ldrb	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e03d      	b.n	8005f4c <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8005ed0:	4932      	ldr	r1, [pc, #200]	; (8005f9c <chk_lock+0xe0>)
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02e      	beq.n	8005f42 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005ee4:	492d      	ldr	r1, [pc, #180]	; (8005f9c <chk_lock+0xe0>)
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d122      	bne.n	8005f46 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8005f00:	4926      	ldr	r1, [pc, #152]	; (8005f9c <chk_lock+0xe0>)
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3304      	adds	r3, #4
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	3308      	adds	r3, #8
 8005f1a:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d112      	bne.n	8005f46 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8005f20:	491e      	ldr	r1, [pc, #120]	; (8005f9c <chk_lock+0xe0>)
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3308      	adds	r3, #8
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	3306      	adds	r3, #6
 8005f3a:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d102      	bne.n	8005f46 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8005f40:	e007      	b.n	8005f52 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8005f42:	2301      	movs	r3, #1
 8005f44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d9be      	bls.n	8005ed0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d109      	bne.n	8005f6c <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <chk_lock+0xa8>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d101      	bne.n	8005f68 <chk_lock+0xac>
 8005f64:	2300      	movs	r3, #0
 8005f66:	e013      	b.n	8005f90 <chk_lock+0xd4>
 8005f68:	2312      	movs	r3, #18
 8005f6a:	e011      	b.n	8005f90 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <chk_lock+0xce>
 8005f72:	490a      	ldr	r1, [pc, #40]	; (8005f9c <chk_lock+0xe0>)
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	330a      	adds	r3, #10
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f88:	d101      	bne.n	8005f8e <chk_lock+0xd2>
 8005f8a:	2310      	movs	r3, #16
 8005f8c:	e000      	b.n	8005f90 <chk_lock+0xd4>
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	200000bc 	.word	0x200000bc

08005fa0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	e002      	b.n	8005fb2 <enq_lock+0x12>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d809      	bhi.n	8005fcc <enq_lock+0x2c>
 8005fb8:	490a      	ldr	r1, [pc, #40]	; (8005fe4 <enq_lock+0x44>)
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1ef      	bne.n	8005fac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	bf14      	ite	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	2300      	moveq	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	200000bc 	.word	0x200000bc

08005fe8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	e030      	b.n	800605a <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8005ff8:	495b      	ldr	r1, [pc, #364]	; (8006168 <inc_lock+0x180>)
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d11f      	bne.n	8006054 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8006014:	4954      	ldr	r1, [pc, #336]	; (8006168 <inc_lock+0x180>)
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4613      	mov	r3, r2
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	3304      	adds	r3, #4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800602c:	3308      	adds	r3, #8
 800602e:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8006030:	429a      	cmp	r2, r3
 8006032:	d10f      	bne.n	8006054 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8006034:	494c      	ldr	r1, [pc, #304]	; (8006168 <inc_lock+0x180>)
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4613      	mov	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	3308      	adds	r3, #8
 8006044:	881a      	ldrh	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604c:	3306      	adds	r3, #6
 800604e:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8006050:	429a      	cmp	r2, r3
 8006052:	d006      	beq.n	8006062 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d9cb      	bls.n	8005ff8 <inc_lock+0x10>
 8006060:	e000      	b.n	8006064 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8006062:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d14a      	bne.n	8006100 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e002      	b.n	8006076 <inc_lock+0x8e>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d809      	bhi.n	8006090 <inc_lock+0xa8>
 800607c:	493a      	ldr	r1, [pc, #232]	; (8006168 <inc_lock+0x180>)
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4613      	mov	r3, r2
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1ef      	bne.n	8006070 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d101      	bne.n	800609a <inc_lock+0xb2>
 8006096:	2300      	movs	r3, #0
 8006098:	e05f      	b.n	800615a <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	4831      	ldr	r0, [pc, #196]	; (8006168 <inc_lock+0x180>)
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4613      	mov	r3, r2
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4403      	add	r3, r0
 80060b0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b8:	3308      	adds	r3, #8
 80060ba:	6819      	ldr	r1, [r3, #0]
 80060bc:	482a      	ldr	r0, [pc, #168]	; (8006168 <inc_lock+0x180>)
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4613      	mov	r3, r2
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4403      	add	r3, r0
 80060ca:	3304      	adds	r3, #4
 80060cc:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d4:	3306      	adds	r3, #6
 80060d6:	8818      	ldrh	r0, [r3, #0]
 80060d8:	4923      	ldr	r1, [pc, #140]	; (8006168 <inc_lock+0x180>)
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	3308      	adds	r3, #8
 80060e8:	4602      	mov	r2, r0
 80060ea:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80060ec:	491e      	ldr	r1, [pc, #120]	; (8006168 <inc_lock+0x180>)
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4613      	mov	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	330a      	adds	r3, #10
 80060fc:	2200      	movs	r2, #0
 80060fe:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <inc_lock+0x138>
 8006106:	4918      	ldr	r1, [pc, #96]	; (8006168 <inc_lock+0x180>)
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4613      	mov	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	330a      	adds	r3, #10
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <inc_lock+0x138>
 800611c:	2300      	movs	r3, #0
 800611e:	e01c      	b.n	800615a <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10b      	bne.n	800613e <inc_lock+0x156>
 8006126:	4910      	ldr	r1, [pc, #64]	; (8006168 <inc_lock+0x180>)
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4613      	mov	r3, r2
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	330a      	adds	r3, #10
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	b299      	uxth	r1, r3
 800613c:	e001      	b.n	8006142 <inc_lock+0x15a>
 800613e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006142:	4809      	ldr	r0, [pc, #36]	; (8006168 <inc_lock+0x180>)
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4613      	mov	r3, r2
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4403      	add	r3, r0
 8006150:	330a      	adds	r3, #10
 8006152:	460a      	mov	r2, r1
 8006154:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	200000bc 	.word	0x200000bc

0800616c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3b01      	subs	r3, #1
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d82e      	bhi.n	80061de <dec_lock+0x72>
		n = Files[i].ctr;
 8006180:	491b      	ldr	r1, [pc, #108]	; (80061f0 <dec_lock+0x84>)
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	330a      	adds	r3, #10
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	d101      	bne.n	80061a0 <dec_lock+0x34>
 800619c:	2300      	movs	r3, #0
 800619e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80061a0:	89fb      	ldrh	r3, [r7, #14]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <dec_lock+0x40>
 80061a6:	89fb      	ldrh	r3, [r7, #14]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80061ac:	4910      	ldr	r1, [pc, #64]	; (80061f0 <dec_lock+0x84>)
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	330a      	adds	r3, #10
 80061bc:	89fa      	ldrh	r2, [r7, #14]
 80061be:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80061c0:	89fb      	ldrh	r3, [r7, #14]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d108      	bne.n	80061d8 <dec_lock+0x6c>
 80061c6:	490a      	ldr	r1, [pc, #40]	; (80061f0 <dec_lock+0x84>)
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	737b      	strb	r3, [r7, #13]
 80061dc:	e001      	b.n	80061e2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80061de:	2302      	movs	r3, #2
 80061e0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80061e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	200000bc 	.word	0x200000bc

080061f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	e016      	b.n	8006230 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006202:	4910      	ldr	r1, [pc, #64]	; (8006244 <clear_lock+0x50>)
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4613      	mov	r3, r2
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d108      	bne.n	800622a <clear_lock+0x36>
 8006218:	490a      	ldr	r1, [pc, #40]	; (8006244 <clear_lock+0x50>)
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4613      	mov	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	440b      	add	r3, r1
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d9e5      	bls.n	8006202 <clear_lock+0xe>
	}
}
 8006236:	bf00      	nop
 8006238:	bf00      	nop
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	200000bc 	.word	0x200000bc

08006248 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625a:	3304      	adds	r3, #4
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d047      	beq.n	80062f2 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006268:	330c      	adds	r3, #12
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006274:	3301      	adds	r3, #1
 8006276:	7818      	ldrb	r0, [r3, #0]
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	2301      	movs	r3, #1
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	f7ff fd63 	bl	8005d48 <disk_write>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <sync_window+0x46>
			res = FR_DISK_ERR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
 800628c:	e031      	b.n	80062f2 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006294:	3304      	adds	r3, #4
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	1ad2      	subs	r2, r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ac:	3318      	adds	r3, #24
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d21e      	bcs.n	80062f2 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	3303      	adds	r3, #3
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	e014      	b.n	80062ec <sync_window+0xa4>
					wsect += fs->fsize;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c8:	3318      	adds	r3, #24
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4413      	add	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d8:	3301      	adds	r3, #1
 80062da:	7818      	ldrb	r0, [r3, #0]
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	2301      	movs	r3, #1
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	f7ff fd31 	bl	8005d48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d8e7      	bhi.n	80062c2 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006310:	330c      	adds	r3, #12
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d01f      	beq.n	800635a <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff ff94 	bl	8006248 <sync_window>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d117      	bne.n	800635a <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006330:	3301      	adds	r3, #1
 8006332:	7818      	ldrb	r0, [r3, #0]
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	2301      	movs	r3, #1
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	f7ff fce5 	bl	8005d08 <disk_read>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006344:	f04f 33ff 	mov.w	r3, #4294967295
 8006348:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006354:	330c      	adds	r3, #12
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff ff6b 	bl	8006248 <sync_window>
 8006372:	4603      	mov	r3, r0
 8006374:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 80bd 	bne.w	80064f8 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b03      	cmp	r3, #3
 8006388:	f040 80a7 	bne.w	80064da <sync_fs+0x176>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006392:	3305      	adds	r3, #5
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b01      	cmp	r3, #1
 8006398:	f040 809f 	bne.w	80064da <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a4:	330a      	adds	r3, #10
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	2100      	movs	r1, #0
 80063ac:	f7ff fd29 	bl	8005e02 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2255      	movs	r2, #85	; 0x55
 80063b4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	22aa      	movs	r2, #170	; 0xaa
 80063bc:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2252      	movs	r2, #82	; 0x52
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2252      	movs	r2, #82	; 0x52
 80063ca:	705a      	strb	r2, [r3, #1]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2261      	movs	r2, #97	; 0x61
 80063d0:	709a      	strb	r2, [r3, #2]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2241      	movs	r2, #65	; 0x41
 80063d6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2272      	movs	r2, #114	; 0x72
 80063dc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2272      	movs	r2, #114	; 0x72
 80063e4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2241      	movs	r2, #65	; 0x41
 80063ec:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2261      	movs	r2, #97	; 0x61
 80063f4:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fe:	3310      	adds	r3, #16
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	b2da      	uxtb	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006410:	3310      	adds	r3, #16
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	b29b      	uxth	r3, r3
 800641a:	b2da      	uxtb	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006428:	3310      	adds	r3, #16
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	b2da      	uxtb	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643c:	3310      	adds	r3, #16
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	0e1b      	lsrs	r3, r3, #24
 8006442:	b2da      	uxtb	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006450:	330c      	adds	r3, #12
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006462:	330c      	adds	r3, #12
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	b29b      	uxth	r3, r3
 800646c:	b2da      	uxtb	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647a:	330c      	adds	r3, #12
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	0c1b      	lsrs	r3, r3, #16
 8006480:	b2da      	uxtb	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648e:	330c      	adds	r3, #12
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	0e1b      	lsrs	r3, r3, #24
 8006494:	b2da      	uxtb	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a2:	331c      	adds	r3, #28
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80064ae:	330c      	adds	r3, #12
 80064b0:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b8:	3301      	adds	r3, #1
 80064ba:	7818      	ldrb	r0, [r3, #0]
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80064c4:	330c      	adds	r3, #12
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	2301      	movs	r3, #1
 80064ca:	f7ff fc3d 	bl	8005d48 <disk_write>
			fs->fsi_flag = 0;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d4:	3305      	adds	r3, #5
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e0:	3301      	adds	r3, #1
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2200      	movs	r2, #0
 80064e6:	2100      	movs	r1, #0
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff fc4d 	bl	8005d88 <disk_ioctl>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <sync_fs+0x194>
			res = FR_DISK_ERR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	3b02      	subs	r3, #2
 8006510:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006518:	3314      	adds	r3, #20
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3b02      	subs	r3, #2
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d301      	bcc.n	8006528 <clust2sect+0x26>
 8006524:	2300      	movs	r3, #0
 8006526:	e00e      	b.n	8006546 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	3302      	adds	r3, #2
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	fb03 f202 	mul.w	r2, r3, r2
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006540:	3308      	adds	r3, #8
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4413      	add	r3, r2
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b086      	sub	sp, #24
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d907      	bls.n	8006572 <get_fat+0x20>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006568:	3314      	adds	r3, #20
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006572:	2301      	movs	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e0ec      	b.n	8006752 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006578:	f04f 33ff 	mov.w	r3, #4294967295
 800657c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b03      	cmp	r3, #3
 8006588:	f000 809e 	beq.w	80066c8 <get_fat+0x176>
 800658c:	2b03      	cmp	r3, #3
 800658e:	f300 80d6 	bgt.w	800673e <get_fat+0x1ec>
 8006592:	2b01      	cmp	r3, #1
 8006594:	d002      	beq.n	800659c <get_fat+0x4a>
 8006596:	2b02      	cmp	r3, #2
 8006598:	d063      	beq.n	8006662 <get_fat+0x110>
 800659a:	e0d0      	b.n	800673e <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b8:	330a      	adds	r3, #10
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	4619      	mov	r1, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80065c4:	4413      	add	r3, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fe97 	bl	80062fc <move_window>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 80b7 	bne.w	8006744 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	60fa      	str	r2, [r7, #12]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065e2:	320a      	adds	r2, #10
 80065e4:	8812      	ldrh	r2, [r2, #0]
 80065e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ea:	fb02 f201 	mul.w	r2, r2, r1
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	5cd3      	ldrb	r3, [r2, r3]
 80065f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006604:	330a      	adds	r3, #10
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	4619      	mov	r1, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006610:	4413      	add	r3, r2
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fe71 	bl	80062fc <move_window>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 8093 	bne.w	8006748 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006628:	330a      	adds	r3, #10
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	fbb3 f1f2 	udiv	r1, r3, r2
 8006634:	fb02 f201 	mul.w	r2, r2, r1
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	5cd3      	ldrb	r3, [r2, r3]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	461a      	mov	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4313      	orrs	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <get_fat+0x106>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	091b      	lsrs	r3, r3, #4
 8006656:	e002      	b.n	800665e <get_fat+0x10c>
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800665e:	617b      	str	r3, [r7, #20]
			break;
 8006660:	e077      	b.n	8006752 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006670:	330a      	adds	r3, #10
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	4619      	mov	r1, r3
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006680:	4413      	add	r3, r2
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fe39 	bl	80062fc <move_window>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d15d      	bne.n	800674c <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	005a      	lsls	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669a:	330a      	adds	r3, #10
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	fbb2 f1f3 	udiv	r1, r2, r3
 80066a2:	fb03 f301 	mul.w	r3, r3, r1
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	4413      	add	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	3301      	adds	r3, #1
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	b21a      	sxth	r2, r3
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	b21b      	sxth	r3, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	b21b      	sxth	r3, r3
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	617b      	str	r3, [r7, #20]
			break;
 80066c6:	e044      	b.n	8006752 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d6:	330a      	adds	r3, #10
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	089b      	lsrs	r3, r3, #2
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4619      	mov	r1, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80066e6:	4413      	add	r3, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fe06 	bl	80062fc <move_window>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d12c      	bne.n	8006750 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	009a      	lsls	r2, r3, #2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006700:	330a      	adds	r3, #10
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	fbb2 f1f3 	udiv	r1, r2, r3
 8006708:	fb03 f301 	mul.w	r3, r3, r1
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3303      	adds	r3, #3
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	061a      	lsls	r2, r3, #24
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3302      	adds	r3, #2
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	4313      	orrs	r3, r2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	3201      	adds	r2, #1
 800672a:	7812      	ldrb	r2, [r2, #0]
 800672c:	0212      	lsls	r2, r2, #8
 800672e:	4313      	orrs	r3, r2
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	7812      	ldrb	r2, [r2, #0]
 8006734:	4313      	orrs	r3, r2
 8006736:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800673a:	617b      	str	r3, [r7, #20]
			break;
 800673c:	e009      	b.n	8006752 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800673e:	2301      	movs	r3, #1
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e006      	b.n	8006752 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006744:	bf00      	nop
 8006746:	e004      	b.n	8006752 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006748:	bf00      	nop
 800674a:	e002      	b.n	8006752 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800674c:	bf00      	nop
 800674e:	e000      	b.n	8006752 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006750:	bf00      	nop
		}
	}

	return val;
 8006752:	697b      	ldr	r3, [r7, #20]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d907      	bls.n	800677e <put_fat+0x22>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006774:	3314      	adds	r3, #20
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	429a      	cmp	r2, r3
 800677c:	d302      	bcc.n	8006784 <put_fat+0x28>
		res = FR_INT_ERR;
 800677e:	2302      	movs	r3, #2
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e146      	b.n	8006a12 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b03      	cmp	r3, #3
 800678e:	f000 80d9 	beq.w	8006944 <put_fat+0x1e8>
 8006792:	2b03      	cmp	r3, #3
 8006794:	f300 8133 	bgt.w	80069fe <put_fat+0x2a2>
 8006798:	2b01      	cmp	r3, #1
 800679a:	d003      	beq.n	80067a4 <put_fat+0x48>
 800679c:	2b02      	cmp	r3, #2
 800679e:	f000 8095 	beq.w	80068cc <put_fat+0x170>
 80067a2:	e12c      	b.n	80069fe <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c0:	330a      	adds	r3, #10
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80067cc:	4413      	add	r3, r2
 80067ce:	4619      	mov	r1, r3
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7ff fd93 	bl	80062fc <move_window>
 80067d6:	4603      	mov	r3, r0
 80067d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067da:	7ffb      	ldrb	r3, [r7, #31]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 8111 	bne.w	8006a04 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	617a      	str	r2, [r7, #20]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067ee:	320a      	adds	r2, #10
 80067f0:	8812      	ldrh	r2, [r2, #0]
 80067f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80067f6:	fb02 f201 	mul.w	r2, r2, r1
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00d      	beq.n	8006828 <put_fat+0xcc>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	b25b      	sxtb	r3, r3
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	b25a      	sxtb	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	b25b      	sxtb	r3, r3
 8006820:	4313      	orrs	r3, r2
 8006822:	b25b      	sxtb	r3, r3
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e001      	b.n	800682c <put_fat+0xd0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006836:	3304      	adds	r3, #4
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800684a:	330a      	adds	r3, #10
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	fbb3 f3f1 	udiv	r3, r3, r1
 8006856:	4413      	add	r3, r2
 8006858:	4619      	mov	r1, r3
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fd4e 	bl	80062fc <move_window>
 8006860:	4603      	mov	r3, r0
 8006862:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006864:	7ffb      	ldrb	r3, [r7, #31]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f040 80ce 	bne.w	8006a08 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006872:	330a      	adds	r3, #10
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	fbb3 f1f2 	udiv	r1, r3, r2
 800687e:	fb02 f201 	mul.w	r2, r2, r1
 8006882:	1a9b      	subs	r3, r3, r2
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <put_fat+0x140>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	091b      	lsrs	r3, r3, #4
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e00e      	b.n	80068ba <put_fat+0x15e>
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b25b      	sxtb	r3, r3
 80068a2:	f023 030f 	bic.w	r3, r3, #15
 80068a6:	b25a      	sxtb	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	0a1b      	lsrs	r3, r3, #8
 80068ac:	b25b      	sxtb	r3, r3
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c4:	3304      	adds	r3, #4
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]
			break;
 80068ca:	e0a2      	b.n	8006a12 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068da:	330a      	adds	r3, #10
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ea:	4413      	add	r3, r2
 80068ec:	4619      	mov	r1, r3
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fd04 	bl	80062fc <move_window>
 80068f4:	4603      	mov	r3, r0
 80068f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068f8:	7ffb      	ldrb	r3, [r7, #31]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 8086 	bne.w	8006a0c <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	005a      	lsls	r2, r3, #1
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690a:	330a      	adds	r3, #10
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006912:	fb03 f301 	mul.w	r3, r3, r1
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	b29b      	uxth	r3, r3
 800692a:	0a1b      	lsrs	r3, r3, #8
 800692c:	b29a      	uxth	r2, r3
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	3301      	adds	r3, #1
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800693c:	3304      	adds	r3, #4
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
			break;
 8006942:	e066      	b.n	8006a12 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006952:	330a      	adds	r3, #10
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	b29b      	uxth	r3, r3
 800695a:	4619      	mov	r1, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006962:	4413      	add	r3, r2
 8006964:	4619      	mov	r1, r3
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff fcc8 	bl	80062fc <move_window>
 800696c:	4603      	mov	r3, r0
 800696e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006970:	7ffb      	ldrb	r3, [r7, #31]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d14c      	bne.n	8006a10 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	009a      	lsls	r2, r3, #2
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006980:	330a      	adds	r3, #10
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	fbb2 f1f3 	udiv	r1, r2, r3
 8006988:	fb03 f301 	mul.w	r3, r3, r1
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	3303      	adds	r3, #3
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	061a      	lsls	r2, r3, #24
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	3302      	adds	r3, #2
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	041b      	lsls	r3, r3, #16
 80069a4:	4313      	orrs	r3, r2
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	3201      	adds	r2, #1
 80069aa:	7812      	ldrb	r2, [r2, #0]
 80069ac:	0212      	lsls	r2, r2, #8
 80069ae:	4313      	orrs	r3, r2
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4313      	orrs	r3, r2
 80069be:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	0a1b      	lsrs	r3, r3, #8
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	3301      	adds	r3, #1
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	0c1a      	lsrs	r2, r3, #16
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	3302      	adds	r3, #2
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	0e1a      	lsrs	r2, r3, #24
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	3303      	adds	r3, #3
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f6:	3304      	adds	r3, #4
 80069f8:	2201      	movs	r2, #1
 80069fa:	701a      	strb	r2, [r3, #0]
			break;
 80069fc:	e009      	b.n	8006a12 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 80069fe:	2302      	movs	r3, #2
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e006      	b.n	8006a12 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8006a04:	bf00      	nop
 8006a06:	e004      	b.n	8006a12 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8006a08:	bf00      	nop
 8006a0a:	e002      	b.n	8006a12 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8006a10:	bf00      	nop
		}
	}

	return res;
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d907      	bls.n	8006a3c <remove_chain+0x20>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a32:	3314      	adds	r3, #20
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d302      	bcc.n	8006a42 <remove_chain+0x26>
		res = FR_INT_ERR;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	73fb      	strb	r3, [r7, #15]
 8006a40:	e04f      	b.n	8006ae2 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006a46:	e040      	b.n	8006aca <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fd81 	bl	8006552 <get_fat>
 8006a50:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d041      	beq.n	8006adc <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d102      	bne.n	8006a64 <remove_chain+0x48>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	73fb      	strb	r3, [r7, #15]
 8006a62:	e03e      	b.n	8006ae2 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d102      	bne.n	8006a72 <remove_chain+0x56>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
 8006a70:	e037      	b.n	8006ae2 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006a72:	2200      	movs	r2, #0
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff fe70 	bl	800675c <put_fat>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d12c      	bne.n	8006ae0 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a8c:	3310      	adds	r3, #16
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d017      	beq.n	8006ac6 <remove_chain+0xaa>
				fs->free_clust++;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9c:	3310      	adds	r3, #16
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa8:	3310      	adds	r3, #16
 8006aaa:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab2:	3305      	adds	r3, #5
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac2:	3305      	adds	r3, #5
 8006ac4:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d3b6      	bcc.n	8006a48 <remove_chain+0x2c>
 8006ada:	e002      	b.n	8006ae2 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8006adc:	bf00      	nop
 8006ade:	e000      	b.n	8006ae2 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8006ae0:	bf00      	nop
		}
	}

	return res;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d113      	bne.n	8006b24 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b02:	330c      	adds	r3, #12
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <create_chain+0x32>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b14:	3314      	adds	r3, #20
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d31e      	bcc.n	8006b5c <create_chain+0x70>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	e01b      	b.n	8006b5c <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fd13 	bl	8006552 <get_fat>
 8006b2c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d801      	bhi.n	8006b38 <create_chain+0x4c>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e086      	b.n	8006c46 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3e:	d101      	bne.n	8006b44 <create_chain+0x58>
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	e080      	b.n	8006c46 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4a:	3314      	adds	r3, #20
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d201      	bcs.n	8006b58 <create_chain+0x6c>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	e076      	b.n	8006c46 <create_chain+0x15a>
		scl = clst;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3301      	adds	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d307      	bcc.n	8006b86 <create_chain+0x9a>
			ncl = 2;
 8006b76:	2302      	movs	r3, #2
 8006b78:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d901      	bls.n	8006b86 <create_chain+0x9a>
 8006b82:	2300      	movs	r3, #0
 8006b84:	e05f      	b.n	8006c46 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006b86:	6979      	ldr	r1, [r7, #20]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fce2 	bl	8006552 <get_fat>
 8006b8e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d002      	beq.n	8006ba4 <create_chain+0xb8>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <create_chain+0xbc>
			return cs;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	e04e      	b.n	8006c46 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d1d7      	bne.n	8006b60 <create_chain+0x74>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e048      	b.n	8006c46 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8006bb4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006bb6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006bba:	6979      	ldr	r1, [r7, #20]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff fdcd 	bl	800675c <put_fat>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d109      	bne.n	8006be0 <create_chain+0xf4>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d006      	beq.n	8006be0 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff fdc0 	bl	800675c <put_fat>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d126      	bne.n	8006c34 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bec:	330c      	adds	r3, #12
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf8:	3310      	adds	r3, #16
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c00:	d020      	beq.n	8006c44 <create_chain+0x158>
			fs->free_clust--;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c08:	3310      	adds	r3, #16
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	1e5a      	subs	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c14:	3310      	adds	r3, #16
 8006c16:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1e:	3305      	adds	r3, #5
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2e:	3305      	adds	r3, #5
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e007      	b.n	8006c44 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d102      	bne.n	8006c40 <create_chain+0x154>
 8006c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3e:	e000      	b.n	8006c42 <create_chain+0x156>
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006c44:	697b      	ldr	r3, [r7, #20]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006c5e:	3304      	adds	r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3304      	adds	r3, #4
 8006c64:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c72:	330a      	adds	r3, #10
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c92:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1d1a      	adds	r2, r3, #4
 8006c98:	613a      	str	r2, [r7, #16]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <clmt_clust+0x5a>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e010      	b.n	8006cca <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d307      	bcc.n	8006cc0 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006cbe:	e7e9      	b.n	8006c94 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8006cc0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	4413      	add	r3, r2
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cea:	3306      	adds	r3, #6
 8006cec:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d00a      	beq.n	8006d16 <dir_sdi+0x40>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0c:	3314      	adds	r3, #20
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d301      	bcc.n	8006d1a <dir_sdi+0x44>
		return FR_INT_ERR;
 8006d16:	2302      	movs	r3, #2
 8006d18:	e0b4      	b.n	8006e84 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d111      	bne.n	8006d44 <dir_sdi+0x6e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d108      	bne.n	8006d44 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006d3e:	3304      	adds	r3, #4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d117      	bne.n	8006d7a <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d56:	3308      	adds	r3, #8
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d301      	bcc.n	8006d66 <dir_sdi+0x90>
			return FR_INT_ERR;
 8006d62:	2302      	movs	r3, #2
 8006d64:	e08e      	b.n	8006e84 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006d72:	3304      	adds	r3, #4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	e046      	b.n	8006e08 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d86:	330a      	adds	r3, #10
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	fb03 f302 	mul.w	r3, r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006da6:	e022      	b.n	8006dee <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6979      	ldr	r1, [r7, #20]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fbcd 	bl	8006552 <get_fat>
 8006db8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d101      	bne.n	8006dc6 <dir_sdi+0xf0>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e05e      	b.n	8006e84 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d90a      	bls.n	8006de2 <dir_sdi+0x10c>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd8:	3314      	adds	r3, #20
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d301      	bcc.n	8006de6 <dir_sdi+0x110>
				return FR_INT_ERR;
 8006de2:	2302      	movs	r3, #2
 8006de4:	e04e      	b.n	8006e84 <dir_sdi+0x1ae>
			idx -= ic;
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d2d8      	bcs.n	8006da8 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6979      	ldr	r1, [r7, #20]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fb7e 	bl	8006502 <clust2sect>
 8006e06:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0e:	330c      	adds	r3, #12
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <dir_sdi+0x148>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e032      	b.n	8006e84 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2a:	330a      	adds	r3, #10
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	441a      	add	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e44:	3310      	adds	r3, #16
 8006e46:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5e:	330a      	adds	r3, #10
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e6e:	fb02 f201 	mul.w	r2, r2, r1
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	015b      	lsls	r3, r3, #5
 8006e76:	18c2      	adds	r2, r0, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7e:	3314      	adds	r3, #20
 8006e80:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9c:	3306      	adds	r3, #6
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d006      	beq.n	8006eba <dir_next+0x2e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb2:	3310      	adds	r3, #16
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <dir_next+0x32>
		return FR_NO_FILE;
 8006eba:	2304      	movs	r3, #4
 8006ebc:	e144      	b.n	8007148 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eca:	330a      	adds	r3, #10
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eda:	fb02 f201 	mul.w	r2, r2, r1
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 810c 	bne.w	80070fe <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eec:	3310      	adds	r3, #16
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef8:	3310      	adds	r3, #16
 8006efa:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f02:	330c      	adds	r3, #12
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10e      	bne.n	8006f28 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f16:	3308      	adds	r3, #8
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	f0c0 80ed 	bcc.w	80070fe <dir_next+0x272>
				return FR_NO_FILE;
 8006f24:	2304      	movs	r3, #4
 8006f26:	e10f      	b.n	8007148 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f34:	330a      	adds	r3, #10
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f50:	3302      	adds	r3, #2
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f040 80d0 	bne.w	80070fe <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f7ff faed 	bl	8006552 <get_fat>
 8006f78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d801      	bhi.n	8006f84 <dir_next+0xf8>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e0e1      	b.n	8007148 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d101      	bne.n	8006f90 <dir_next+0x104>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0db      	b.n	8007148 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9c:	3314      	adds	r3, #20
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	f0c0 8097 	bcc.w	80070d6 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <dir_next+0x126>
 8006fae:	2304      	movs	r3, #4
 8006fb0:	e0ca      	b.n	8007148 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f7ff fd90 	bl	8006aec <create_chain>
 8006fcc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <dir_next+0x14c>
 8006fd4:	2307      	movs	r3, #7
 8006fd6:	e0b7      	b.n	8007148 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <dir_next+0x156>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e0b2      	b.n	8007148 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d101      	bne.n	8006fee <dir_next+0x162>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e0ac      	b.n	8007148 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff f926 	bl	8006248 <sync_window>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <dir_next+0x17a>
 8007002:	2301      	movs	r3, #1
 8007004:	e0a0      	b.n	8007148 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800701c:	330a      	adds	r3, #10
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	2100      	movs	r1, #0
 8007024:	f7fe feed 	bl	8005e02 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007036:	681c      	ldr	r4, [r3, #0]
 8007038:	6979      	ldr	r1, [r7, #20]
 800703a:	4610      	mov	r0, r2
 800703c:	f7ff fa61 	bl	8006502 <clust2sect>
 8007040:	4602      	mov	r2, r0
 8007042:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8007046:	330c      	adds	r3, #12
 8007048:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800704a:	2300      	movs	r3, #0
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	e024      	b.n	800709a <dir_next+0x20e>
						dp->fs->wflag = 1;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705c:	3304      	adds	r3, #4
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff f8ec 	bl	8006248 <sync_window>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <dir_next+0x1ee>
 8007076:	2301      	movs	r3, #1
 8007078:	e066      	b.n	8007148 <dir_next+0x2bc>
						dp->fs->winsect++;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8007086:	330c      	adds	r3, #12
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8007090:	330c      	adds	r3, #12
 8007092:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	3301      	adds	r3, #1
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070a6:	3302      	adds	r3, #2
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d3ce      	bcc.n	8007050 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80070be:	330c      	adds	r3, #12
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	1a8a      	subs	r2, r1, r2
 80070ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80070d2:	330c      	adds	r3, #12
 80070d4:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070dc:	330c      	adds	r3, #12
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff fa08 	bl	8006502 <clust2sect>
 80070f2:	4602      	mov	r2, r0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fa:	3310      	adds	r3, #16
 80070fc:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	b29a      	uxth	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007108:	3306      	adds	r3, #6
 800710a:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007122:	330a      	adds	r3, #10
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007132:	fb02 f201 	mul.w	r2, r2, r1
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	015b      	lsls	r3, r3, #5
 800713a:	18c2      	adds	r2, r0, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007142:	3314      	adds	r3, #20
 8007144:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	bd90      	pop	{r4, r7, pc}

08007150 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fdba 	bl	8006cd6 <dir_sdi>
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d138      	bne.n	80071de <dir_alloc+0x8e>
		n = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800717e:	3310      	adds	r3, #16
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7ff f8b9 	bl	80062fc <move_window>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d123      	bne.n	80071dc <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719a:	3314      	adds	r3, #20
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2be5      	cmp	r3, #229	; 0xe5
 80071a2:	d007      	beq.n	80071b4 <dir_alloc+0x64>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071aa:	3314      	adds	r3, #20
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d107      	bne.n	80071c4 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d102      	bne.n	80071c8 <dir_alloc+0x78>
 80071c2:	e00c      	b.n	80071de <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80071c4:	2300      	movs	r3, #0
 80071c6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80071c8:	2101      	movs	r1, #1
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fe5e 	bl	8006e8c <dir_next>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0ca      	beq.n	8007170 <dir_alloc+0x20>
 80071da:	e000      	b.n	80071de <dir_alloc+0x8e>
			if (res != FR_OK) break;
 80071dc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d101      	bne.n	80071e8 <dir_alloc+0x98>
 80071e4:	2307      	movs	r3, #7
 80071e6:	73fb      	strb	r3, [r7, #15]
	return res;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b085      	sub	sp, #20
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	331b      	adds	r3, #27
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	b21a      	sxth	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	331a      	adds	r3, #26
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b21b      	sxth	r3, r3
 800720e:	4313      	orrs	r3, r2
 8007210:	b21b      	sxth	r3, r3
 8007212:	b29b      	uxth	r3, r3
 8007214:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d10f      	bne.n	8007242 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	3315      	adds	r3, #21
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	b21a      	sxth	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	3314      	adds	r3, #20
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	b21b      	sxth	r3, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	b21b      	sxth	r3, r3
 8007238:	b29b      	uxth	r3, r3
 800723a:	041b      	lsls	r3, r3, #16
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

	return cl;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	331a      	adds	r3, #26
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	0a1b      	lsrs	r3, r3, #8
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	331b      	adds	r3, #27
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	0c1a      	lsrs	r2, r3, #16
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3314      	adds	r3, #20
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	b29b      	uxth	r3, r3
 8007286:	0a1b      	lsrs	r3, r3, #8
 8007288:	b29a      	uxth	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3315      	adds	r3, #21
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b2:	1e5a      	subs	r2, r3, #1
 80072b4:	4613      	mov	r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80072c0:	2300      	movs	r3, #0
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	2301      	movs	r3, #1
 80072c6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80072c8:	4a2b      	ldr	r2, [pc, #172]	; (8007378 <cmp_lfn+0xd8>)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4413      	add	r3, r2
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	4413      	add	r3, r2
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	b21a      	sxth	r2, r3
 80072dc:	4926      	ldr	r1, [pc, #152]	; (8007378 <cmp_lfn+0xd8>)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	440b      	add	r3, r1
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	4619      	mov	r1, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	440b      	add	r3, r1
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b21b      	sxth	r3, r3
 80072ee:	4313      	orrs	r3, r2
 80072f0:	b21b      	sxth	r3, r3
 80072f2:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80072f4:	89fb      	ldrh	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d019      	beq.n	800732e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80072fa:	89bb      	ldrh	r3, [r7, #12]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f003 f869 	bl	800a3d4 <ff_wtoupper>
 8007302:	4603      	mov	r3, r0
 8007304:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2bfe      	cmp	r3, #254	; 0xfe
 800730a:	d80e      	bhi.n	800732a <cmp_lfn+0x8a>
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	617a      	str	r2, [r7, #20]
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	4413      	add	r3, r2
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f003 f85a 	bl	800a3d4 <ff_wtoupper>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	89fb      	ldrh	r3, [r7, #14]
 8007326:	4293      	cmp	r3, r2
 8007328:	d008      	beq.n	800733c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800732a:	2300      	movs	r3, #0
 800732c:	e01f      	b.n	800736e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800732e:	89bb      	ldrh	r3, [r7, #12]
 8007330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007334:	4293      	cmp	r3, r2
 8007336:	d001      	beq.n	800733c <cmp_lfn+0x9c>
 8007338:	2300      	movs	r3, #0
 800733a:	e018      	b.n	800736e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3301      	adds	r3, #1
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b0c      	cmp	r3, #12
 8007346:	d9bf      	bls.n	80072c8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00b      	beq.n	800736c <cmp_lfn+0xcc>
 8007354:	89fb      	ldrh	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d008      	beq.n	800736c <cmp_lfn+0xcc>
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <cmp_lfn+0xcc>
		return 0;
 8007368:	2300      	movs	r3, #0
 800736a:	e000      	b.n	800736e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800736c:	2301      	movs	r3, #1
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	0800b174 	.word	0x0800b174

0800737c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800737c:	b480      	push	{r7}
 800737e:	b089      	sub	sp, #36	; 0x24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4611      	mov	r1, r2
 8007388:	461a      	mov	r2, r3
 800738a:	460b      	mov	r3, r1
 800738c:	71fb      	strb	r3, [r7, #7]
 800738e:	4613      	mov	r3, r2
 8007390:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	330d      	adds	r3, #13
 8007396:	79ba      	ldrb	r2, [r7, #6]
 8007398:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	330b      	adds	r3, #11
 800739e:	220f      	movs	r2, #15
 80073a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	330c      	adds	r3, #12
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	331a      	adds	r3, #26
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	331b      	adds	r3, #27
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	1e5a      	subs	r2, r3, #1
 80073be:	4613      	mov	r3, r2
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	82fb      	strh	r3, [r7, #22]
 80073ce:	2300      	movs	r3, #0
 80073d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80073d2:	8afb      	ldrh	r3, [r7, #22]
 80073d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073d8:	4293      	cmp	r3, r2
 80073da:	d007      	beq.n	80073ec <fit_lfn+0x70>
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	61fa      	str	r2, [r7, #28]
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80073ec:	4a1d      	ldr	r2, [pc, #116]	; (8007464 <fit_lfn+0xe8>)
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	4413      	add	r3, r2
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4413      	add	r3, r2
 80073fa:	8afa      	ldrh	r2, [r7, #22]
 80073fc:	b2d2      	uxtb	r2, r2
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	8afb      	ldrh	r3, [r7, #22]
 8007402:	0a1b      	lsrs	r3, r3, #8
 8007404:	b299      	uxth	r1, r3
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <fit_lfn+0xe8>)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	4413      	add	r3, r2
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	4413      	add	r3, r2
 8007414:	b2ca      	uxtb	r2, r1
 8007416:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007418:	8afb      	ldrh	r3, [r7, #22]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d102      	bne.n	8007424 <fit_lfn+0xa8>
 800741e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007422:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	3301      	adds	r3, #1
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d9d0      	bls.n	80073d2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007430:	8afb      	ldrh	r3, [r7, #22]
 8007432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007436:	4293      	cmp	r3, r2
 8007438:	d006      	beq.n	8007448 <fit_lfn+0xcc>
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d103      	bne.n	8007450 <fit_lfn+0xd4>
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	79fa      	ldrb	r2, [r7, #7]
 8007454:	701a      	strb	r2, [r3, #0]
}
 8007456:	bf00      	nop
 8007458:	3724      	adds	r7, #36	; 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	0800b174 	.word	0x0800b174

08007468 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08c      	sub	sp, #48	; 0x30
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007476:	220b      	movs	r2, #11
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7fe fca2 	bl	8005dc4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b05      	cmp	r3, #5
 8007484:	d92b      	bls.n	80074de <gen_numname+0x76>
		sr = seq;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800748a:	e022      	b.n	80074d2 <gen_numname+0x6a>
			wc = *lfn++;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	1c9a      	adds	r2, r3, #2
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007496:	2300      	movs	r3, #0
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
 800749a:	e017      	b.n	80074cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	005a      	lsls	r2, r3, #1
 80074a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	4413      	add	r3, r2
 80074a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80074aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <gen_numname+0x5e>
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80074c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80074c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	3301      	adds	r3, #1
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2b0f      	cmp	r3, #15
 80074d0:	d9e4      	bls.n	800749c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1d8      	bne.n	800748c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80074de:	2307      	movs	r3, #7
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	3330      	adds	r3, #48	; 0x30
 80074ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80074f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074f6:	2b39      	cmp	r3, #57	; 0x39
 80074f8:	d904      	bls.n	8007504 <gen_numname+0x9c>
 80074fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074fe:	3307      	adds	r3, #7
 8007500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	1e5a      	subs	r2, r3, #1
 8007508:	62ba      	str	r2, [r7, #40]	; 0x28
 800750a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800750e:	4413      	add	r3, r2
 8007510:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007514:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	091b      	lsrs	r3, r3, #4
 800751c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1de      	bne.n	80074e2 <gen_numname+0x7a>
	ns[i] = '~';
 8007524:	f107 0214 	add.w	r2, r7, #20
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	4413      	add	r3, r2
 800752c:	227e      	movs	r2, #126	; 0x7e
 800752e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007530:	2300      	movs	r3, #0
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
 8007534:	e002      	b.n	800753c <gen_numname+0xd4>
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	3301      	adds	r3, #1
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
 800753c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	429a      	cmp	r2, r3
 8007542:	d205      	bcs.n	8007550 <gen_numname+0xe8>
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	4413      	add	r3, r2
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b20      	cmp	r3, #32
 800754e:	d1f2      	bne.n	8007536 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	2b07      	cmp	r3, #7
 8007554:	d808      	bhi.n	8007568 <gen_numname+0x100>
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	62ba      	str	r2, [r7, #40]	; 0x28
 800755c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007560:	4413      	add	r3, r2
 8007562:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007566:	e000      	b.n	800756a <gen_numname+0x102>
 8007568:	2120      	movs	r1, #32
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	627a      	str	r2, [r7, #36]	; 0x24
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	460a      	mov	r2, r1
 8007576:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	2b07      	cmp	r3, #7
 800757c:	d9e8      	bls.n	8007550 <gen_numname+0xe8>
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	3730      	adds	r7, #48	; 0x30
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007594:	230b      	movs	r3, #11
 8007596:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	b2da      	uxtb	r2, r3
 800759c:	0852      	lsrs	r2, r2, #1
 800759e:	01db      	lsls	r3, r3, #7
 80075a0:	4313      	orrs	r3, r2
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	1c59      	adds	r1, r3, #1
 80075a8:	6079      	str	r1, [r7, #4]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	4413      	add	r3, r2
 80075ae:	73fb      	strb	r3, [r7, #15]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	60bb      	str	r3, [r7, #8]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1ed      	bne.n	8007598 <sum_sfn+0x10>
	return sum;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80075d2:	2100      	movs	r1, #0
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff fb7e 	bl	8006cd6 <dir_sdi>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <dir_find+0x1e>
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	e0c1      	b.n	800776c <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80075e8:	23ff      	movs	r3, #255	; 0xff
 80075ea:	753b      	strb	r3, [r7, #20]
 80075ec:	7d3b      	ldrb	r3, [r7, #20]
 80075ee:	757b      	strb	r3, [r7, #21]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80075f6:	3304      	adds	r3, #4
 80075f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075fc:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760c:	3310      	adds	r3, #16
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f7fe fe72 	bl	80062fc <move_window>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 809e 	bne.w	8007760 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800762a:	3314      	adds	r3, #20
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007636:	7dbb      	ldrb	r3, [r7, #22]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <dir_find+0x78>
 800763c:	2304      	movs	r3, #4
 800763e:	75fb      	strb	r3, [r7, #23]
 8007640:	e093      	b.n	800776a <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	330b      	adds	r3, #11
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800764c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800764e:	7dbb      	ldrb	r3, [r7, #22]
 8007650:	2be5      	cmp	r3, #229	; 0xe5
 8007652:	d007      	beq.n	8007664 <dir_find+0x9a>
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <dir_find+0xae>
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b0f      	cmp	r3, #15
 8007662:	d009      	beq.n	8007678 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007664:	23ff      	movs	r3, #255	; 0xff
 8007666:	757b      	strb	r3, [r7, #21]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800766e:	3304      	adds	r3, #4
 8007670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007674:	801a      	strh	r2, [r3, #0]
 8007676:	e068      	b.n	800774a <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d139      	bne.n	80076f2 <dir_find+0x128>
				if (dp->lfn) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d05f      	beq.n	800774a <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800768a:	7dbb      	ldrb	r3, [r7, #22]
 800768c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	d012      	beq.n	80076ba <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	7b5b      	ldrb	r3, [r3, #13]
 8007698:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800769a:	7dbb      	ldrb	r3, [r7, #22]
 800769c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a0:	75bb      	strb	r3, [r7, #22]
 80076a2:	7dbb      	ldrb	r3, [r7, #22]
 80076a4:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ac:	3306      	adds	r3, #6
 80076ae:	881a      	ldrh	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80076b6:	3304      	adds	r3, #4
 80076b8:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80076ba:	7dba      	ldrb	r2, [r7, #22]
 80076bc:	7d7b      	ldrb	r3, [r7, #21]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d114      	bne.n	80076ec <dir_find+0x122>
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	330d      	adds	r3, #13
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	7d3a      	ldrb	r2, [r7, #20]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d10e      	bne.n	80076ec <dir_find+0x122>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6939      	ldr	r1, [r7, #16]
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fde1 	bl	80072a0 <cmp_lfn>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <dir_find+0x122>
 80076e4:	7d7b      	ldrb	r3, [r7, #21]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	e000      	b.n	80076ee <dir_find+0x124>
 80076ec:	23ff      	movs	r3, #255	; 0xff
 80076ee:	757b      	strb	r3, [r7, #21]
 80076f0:	e02b      	b.n	800774a <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80076f2:	7d7b      	ldrb	r3, [r7, #21]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d107      	bne.n	8007708 <dir_find+0x13e>
 80076f8:	6938      	ldr	r0, [r7, #16]
 80076fa:	f7ff ff45 	bl	8007588 <sum_sfn>
 80076fe:	4603      	mov	r3, r0
 8007700:	461a      	mov	r2, r3
 8007702:	7d3b      	ldrb	r3, [r7, #20]
 8007704:	4293      	cmp	r3, r2
 8007706:	d02d      	beq.n	8007764 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770e:	3318      	adds	r3, #24
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	330b      	adds	r3, #11
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10c      	bne.n	8007738 <dir_find+0x16e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007724:	3318      	adds	r3, #24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	220b      	movs	r2, #11
 800772a:	4619      	mov	r1, r3
 800772c:	6938      	ldr	r0, [r7, #16]
 800772e:	f7fe fb83 	bl	8005e38 <mem_cmp>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d017      	beq.n	8007768 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007738:	23ff      	movs	r3, #255	; 0xff
 800773a:	757b      	strb	r3, [r7, #21]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007742:	3304      	adds	r3, #4
 8007744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007748:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800774a:	2100      	movs	r1, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fb9d 	bl	8006e8c <dir_next>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f43f af50 	beq.w	80075fe <dir_find+0x34>
 800775e:	e004      	b.n	800776a <dir_find+0x1a0>
		if (res != FR_OK) break;
 8007760:	bf00      	nop
 8007762:	e002      	b.n	800776a <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007764:	bf00      	nop
 8007766:	e000      	b.n	800776a <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007768:	bf00      	nop

	return res;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08c      	sub	sp, #48	; 0x30
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007782:	3318      	adds	r3, #24
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	623b      	str	r3, [r7, #32]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8007792:	f107 030c 	add.w	r3, r7, #12
 8007796:	220c      	movs	r2, #12
 8007798:	6a39      	ldr	r1, [r7, #32]
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe fb12 	bl	8005dc4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d039      	beq.n	800781e <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	330b      	adds	r3, #11
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 80077bc:	2301      	movs	r3, #1
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c0:	e013      	b.n	80077ea <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80077c2:	f107 010c 	add.w	r1, r7, #12
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	6a38      	ldr	r0, [r7, #32]
 80077cc:	f7ff fe4c 	bl	8007468 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff fefa 	bl	80075ca <dir_find>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80077dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d106      	bne.n	80077f2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	3301      	adds	r3, #1
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	2b63      	cmp	r3, #99	; 0x63
 80077ee:	d9e8      	bls.n	80077c2 <dir_register+0x4e>
 80077f0:	e000      	b.n	80077f4 <dir_register+0x80>
			if (res != FR_OK) break;
 80077f2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	2b64      	cmp	r3, #100	; 0x64
 80077f8:	d101      	bne.n	80077fe <dir_register+0x8a>
 80077fa:	2307      	movs	r3, #7
 80077fc:	e0e3      	b.n	80079c6 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80077fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007802:	2b04      	cmp	r3, #4
 8007804:	d002      	beq.n	800780c <dir_register+0x98>
 8007806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800780a:	e0dc      	b.n	80079c6 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	330b      	adds	r3, #11
 8007810:	7dfa      	ldrb	r2, [r7, #23]
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d014      	beq.n	8007852 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8007828:	2300      	movs	r3, #0
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28
 800782c:	e002      	b.n	8007834 <dir_register+0xc0>
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	3301      	adds	r3, #1
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	4413      	add	r3, r2
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f5      	bne.n	800782e <dir_register+0xba>
		nent = (n + 25) / 13;
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	3319      	adds	r3, #25
 8007846:	4a62      	ldr	r2, [pc, #392]	; (80079d0 <dir_register+0x25c>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	089b      	lsrs	r3, r3, #2
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
 8007850:	e001      	b.n	8007856 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007852:	2301      	movs	r3, #1
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fc79 	bl	8007150 <dir_alloc>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007868:	2b00      	cmp	r3, #0
 800786a:	d160      	bne.n	800792e <dir_register+0x1ba>
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	3b01      	subs	r3, #1
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	2b00      	cmp	r3, #0
 8007876:	d05a      	beq.n	800792e <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787e:	3306      	adds	r3, #6
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fa23 	bl	8006cd6 <dir_sdi>
 8007890:	4603      	mov	r3, r0
 8007892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800789a:	2b00      	cmp	r3, #0
 800789c:	d147      	bne.n	800792e <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a4:	3318      	adds	r3, #24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff fe6d 	bl	8007588 <sum_sfn>
 80078ae:	4603      	mov	r3, r0
 80078b0:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c0:	3310      	adds	r3, #16
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f7fe fd18 	bl	80062fc <move_window>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80078d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d128      	bne.n	800792c <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e8:	3314      	adds	r3, #20
 80078ea:	6819      	ldr	r1, [r3, #0]
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	7efb      	ldrb	r3, [r7, #27]
 80078f2:	f7ff fd43 	bl	800737c <fit_lfn>
				dp->fs->wflag = 1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007902:	3304      	adds	r3, #4
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8007908:	2100      	movs	r1, #0
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff fabe 	bl	8006e8c <dir_next>
 8007910:	4603      	mov	r3, r0
 8007912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <dir_register+0x1ba>
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	3b01      	subs	r3, #1
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1c3      	bne.n	80078b2 <dir_register+0x13e>
 800792a:	e000      	b.n	800792e <dir_register+0x1ba>
				if (res != FR_OK) break;
 800792c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800792e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007932:	2b00      	cmp	r3, #0
 8007934:	d145      	bne.n	80079c2 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007944:	3310      	adds	r3, #16
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f7fe fcd6 	bl	80062fc <move_window>
 8007950:	4603      	mov	r3, r0
 8007952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800795a:	2b00      	cmp	r3, #0
 800795c:	d131      	bne.n	80079c2 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007964:	3314      	adds	r3, #20
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2220      	movs	r2, #32
 800796a:	2100      	movs	r1, #0
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe fa48 	bl	8005e02 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007978:	3314      	adds	r3, #20
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007982:	3318      	adds	r3, #24
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	220b      	movs	r2, #11
 8007988:	4619      	mov	r1, r3
 800798a:	f7fe fa1b 	bl	8005dc4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007994:	3318      	adds	r3, #24
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330b      	adds	r3, #11
 800799a:	781a      	ldrb	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a2:	3314      	adds	r3, #20
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	f002 0218 	and.w	r2, r2, #24
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079bc:	3304      	adds	r3, #4
 80079be:	2201      	movs	r2, #1
 80079c0:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 80079c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3730      	adds	r7, #48	; 0x30
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	4ec4ec4f 	.word	0x4ec4ec4f

080079d4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	e002      	b.n	80079ec <create_name+0x18>
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	3301      	adds	r3, #1
 80079ea:	613b      	str	r3, [r7, #16]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b2f      	cmp	r3, #47	; 0x2f
 80079f2:	d0f8      	beq.n	80079e6 <create_name+0x12>
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b5c      	cmp	r3, #92	; 0x5c
 80079fa:	d0f4      	beq.n	80079e6 <create_name+0x12>
	lfn = dp->lfn;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	61ba      	str	r2, [r7, #24]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4413      	add	r3, r2
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8007a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a1e:	2b1f      	cmp	r3, #31
 8007a20:	d92f      	bls.n	8007a82 <create_name+0xae>
 8007a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a24:	2b2f      	cmp	r3, #47	; 0x2f
 8007a26:	d02c      	beq.n	8007a82 <create_name+0xae>
 8007a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a2a:	2b5c      	cmp	r3, #92	; 0x5c
 8007a2c:	d029      	beq.n	8007a82 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2bfe      	cmp	r3, #254	; 0xfe
 8007a32:	d901      	bls.n	8007a38 <create_name+0x64>
			return FR_INVALID_NAME;
 8007a34:	2306      	movs	r3, #6
 8007a36:	e18b      	b.n	8007d50 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a40:	2101      	movs	r1, #1
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 fc8a 	bl	800a35c <ff_convert>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <create_name+0x82>
 8007a52:	2306      	movs	r3, #6
 8007a54:	e17c      	b.n	8007d50 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a58:	2b7f      	cmp	r3, #127	; 0x7f
 8007a5a:	d809      	bhi.n	8007a70 <create_name+0x9c>
 8007a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a5e:	4619      	mov	r1, r3
 8007a60:	488f      	ldr	r0, [pc, #572]	; (8007ca0 <create_name+0x2cc>)
 8007a62:	f7fe fa10 	bl	8005e86 <chk_chr>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <create_name+0x9c>
			return FR_INVALID_NAME;
 8007a6c:	2306      	movs	r3, #6
 8007a6e:	e16f      	b.n	8007d50 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	617a      	str	r2, [r7, #20]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007a80:	e7c5      	b.n	8007a0e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	441a      	add	r2, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a8e:	2b1f      	cmp	r3, #31
 8007a90:	d801      	bhi.n	8007a96 <create_name+0xc2>
 8007a92:	2304      	movs	r3, #4
 8007a94:	e000      	b.n	8007a98 <create_name+0xc4>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8007a9c:	e011      	b.n	8007ac2 <create_name+0xee>
		w = lfn[di - 1];
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d002      	beq.n	8007abc <create_name+0xe8>
 8007ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8007aba:	d106      	bne.n	8007aca <create_name+0xf6>
		di--;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ea      	bne.n	8007a9e <create_name+0xca>
 8007ac8:	e000      	b.n	8007acc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8007aca:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <create_name+0x102>
 8007ad2:	2306      	movs	r3, #6
 8007ad4:	e13c      	b.n	8007d50 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae8:	3318      	adds	r3, #24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	220b      	movs	r2, #11
 8007aee:	2120      	movs	r1, #32
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fe f986 	bl	8005e02 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007af6:	2300      	movs	r3, #0
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	e002      	b.n	8007b02 <create_name+0x12e>
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	3301      	adds	r3, #1
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d0f5      	beq.n	8007afc <create_name+0x128>
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b1c:	d0ee      	beq.n	8007afc <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <create_name+0x164>
 8007b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b28:	f043 0303 	orr.w	r3, r3, #3
 8007b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007b30:	e002      	b.n	8007b38 <create_name+0x164>
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <create_name+0x17e>
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b44:	3b01      	subs	r3, #1
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b50:	d1ef      	bne.n	8007b32 <create_name+0x15e>

	b = i = 0; ni = 8;
 8007b52:	2300      	movs	r3, #0
 8007b54:	623b      	str	r3, [r7, #32]
 8007b56:	2300      	movs	r3, #0
 8007b58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b5c:	2308      	movs	r3, #8
 8007b5e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	61ba      	str	r2, [r7, #24]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8092 	beq.w	8007c9c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007b78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d006      	beq.n	8007b8c <create_name+0x1b8>
 8007b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b80:	2b2e      	cmp	r3, #46	; 0x2e
 8007b82:	d10a      	bne.n	8007b9a <create_name+0x1c6>
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d006      	beq.n	8007b9a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8007b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b90:	f043 0303 	orr.w	r3, r3, #3
 8007b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b98:	e07f      	b.n	8007c9a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007b9a:	6a3a      	ldr	r2, [r7, #32]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d203      	bcs.n	8007baa <create_name+0x1d6>
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d123      	bne.n	8007bf2 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	2b0b      	cmp	r3, #11
 8007bae:	d106      	bne.n	8007bbe <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8007bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bb4:	f043 0303 	orr.w	r3, r3, #3
 8007bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bbc:	e077      	b.n	8007cae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d005      	beq.n	8007bd2 <create_name+0x1fe>
 8007bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bca:	f043 0303 	orr.w	r3, r3, #3
 8007bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d868      	bhi.n	8007cac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	61bb      	str	r3, [r7, #24]
 8007bde:	2308      	movs	r3, #8
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	230b      	movs	r3, #11
 8007be4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007be6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bf0:	e053      	b.n	8007c9a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007bf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8007bf6:	d914      	bls.n	8007c22 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f002 fbad 	bl	800a35c <ff_convert>
 8007c02:	4603      	mov	r3, r0
 8007c04:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <create_name+0x242>
 8007c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c0e:	3b80      	subs	r3, #128	; 0x80
 8007c10:	4a24      	ldr	r2, [pc, #144]	; (8007ca4 <create_name+0x2d0>)
 8007c12:	5cd3      	ldrb	r3, [r2, r3]
 8007c14:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c1a:	f043 0302 	orr.w	r3, r3, #2
 8007c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <create_name+0x264>
 8007c28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	481e      	ldr	r0, [pc, #120]	; (8007ca8 <create_name+0x2d4>)
 8007c2e:	f7fe f92a 	bl	8005e86 <chk_chr>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007c38:	235f      	movs	r3, #95	; 0x5f
 8007c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c40:	f043 0303 	orr.w	r3, r3, #3
 8007c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c48:	e01b      	b.n	8007c82 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c4c:	2b40      	cmp	r3, #64	; 0x40
 8007c4e:	d909      	bls.n	8007c64 <create_name+0x290>
 8007c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c52:	2b5a      	cmp	r3, #90	; 0x5a
 8007c54:	d806      	bhi.n	8007c64 <create_name+0x290>
					b |= 2;
 8007c56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c5a:	f043 0302 	orr.w	r3, r3, #2
 8007c5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c62:	e00e      	b.n	8007c82 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c66:	2b60      	cmp	r3, #96	; 0x60
 8007c68:	d90b      	bls.n	8007c82 <create_name+0x2ae>
 8007c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c6c:	2b7a      	cmp	r3, #122	; 0x7a
 8007c6e:	d808      	bhi.n	8007c82 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8007c70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c74:	f043 0301 	orr.w	r3, r3, #1
 8007c78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c7e:	3b20      	subs	r3, #32
 8007c80:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c88:	3318      	adds	r3, #24
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	1c59      	adds	r1, r3, #1
 8007c90:	6239      	str	r1, [r7, #32]
 8007c92:	4413      	add	r3, r2
 8007c94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8007c9a:	e761      	b.n	8007b60 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8007c9c:	bf00      	nop
 8007c9e:	e006      	b.n	8007cae <create_name+0x2da>
 8007ca0:	0800b074 	.word	0x0800b074
 8007ca4:	0800b0f4 	.word	0x0800b0f4
 8007ca8:	0800b080 	.word	0x0800b080
			if (si > di) break;			/* No extension */
 8007cac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2be5      	cmp	r3, #229	; 0xe5
 8007cbc:	d106      	bne.n	8007ccc <create_name+0x2f8>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc4:	3318      	adds	r3, #24
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2205      	movs	r2, #5
 8007cca:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d104      	bne.n	8007cdc <create_name+0x308>
 8007cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8007cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ce0:	f003 030c 	and.w	r3, r3, #12
 8007ce4:	2b0c      	cmp	r3, #12
 8007ce6:	d005      	beq.n	8007cf4 <create_name+0x320>
 8007ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d105      	bne.n	8007d00 <create_name+0x32c>
		cf |= NS_LFN;
 8007cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cf8:	f043 0302 	orr.w	r3, r3, #2
 8007cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d117      	bne.n	8007d3c <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d105      	bne.n	8007d24 <create_name+0x350>
 8007d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d1c:	f043 0310 	orr.w	r3, r3, #16
 8007d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007d24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d28:	f003 030c 	and.w	r3, r3, #12
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d105      	bne.n	8007d3c <create_name+0x368>
 8007d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d34:	f043 0308 	orr.w	r3, r3, #8
 8007d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d42:	3318      	adds	r3, #24
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330b      	adds	r3, #11
 8007d48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d4c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007d4e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3728      	adds	r7, #40	; 0x28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b2f      	cmp	r3, #47	; 0x2f
 8007d68:	d003      	beq.n	8007d72 <follow_path+0x1a>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b5c      	cmp	r3, #92	; 0x5c
 8007d70:	d102      	bne.n	8007d78 <follow_path+0x20>
		path++;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7e:	3308      	adds	r3, #8
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b1f      	cmp	r3, #31
 8007d8a:	d80c      	bhi.n	8007da6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fe ffa1 	bl	8006cd6 <dir_sdi>
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9e:	3314      	adds	r3, #20
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	e04c      	b.n	8007e40 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007da6:	463b      	mov	r3, r7
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff fe12 	bl	80079d4 <create_name>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d13d      	bne.n	8007e36 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff fc05 	bl	80075ca <dir_find>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dca:	3318      	adds	r3, #24
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	7adb      	ldrb	r3, [r3, #11]
 8007dd0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d12d      	bne.n	8007e3a <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d128      	bne.n	8007e3a <follow_path+0xe2>
 8007de8:	2305      	movs	r3, #5
 8007dea:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007dec:	e025      	b.n	8007e3a <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d122      	bne.n	8007e3e <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dfe:	3314      	adds	r3, #20
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	330b      	adds	r3, #11
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f003 0310 	and.w	r3, r3, #16
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8007e12:	2305      	movs	r3, #5
 8007e14:	73fb      	strb	r3, [r7, #15]
 8007e16:	e013      	b.n	8007e40 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff f9e5 	bl	80071f2 <ld_clust>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e30:	3308      	adds	r3, #8
 8007e32:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e34:	e7b7      	b.n	8007da6 <follow_path+0x4e>
			if (res != FR_OK) break;
 8007e36:	bf00      	nop
 8007e38:	e002      	b.n	8007e40 <follow_path+0xe8>
				break;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e3e:	bf00      	nop
		}
	}

	return res;
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b087      	sub	sp, #28
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295
 8007e56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d031      	beq.n	8007ec4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	617b      	str	r3, [r7, #20]
 8007e66:	e002      	b.n	8007e6e <get_ldnumber+0x24>
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b1f      	cmp	r3, #31
 8007e74:	d903      	bls.n	8007e7e <get_ldnumber+0x34>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b3a      	cmp	r3, #58	; 0x3a
 8007e7c:	d1f4      	bne.n	8007e68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b3a      	cmp	r3, #58	; 0x3a
 8007e84:	d11c      	bne.n	8007ec0 <get_ldnumber+0x76>
			tp = *path;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	60fa      	str	r2, [r7, #12]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	3b30      	subs	r3, #48	; 0x30
 8007e96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	d80e      	bhi.n	8007ebc <get_ldnumber+0x72>
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d10a      	bne.n	8007ebc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d107      	bne.n	8007ebc <get_ldnumber+0x72>
					vol = (int)i;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	e002      	b.n	8007ec6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ec4:	693b      	ldr	r3, [r7, #16]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	371c      	adds	r7, #28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
	...

08007ed4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007ef0:	330c      	adds	r3, #12
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fe f9fe 	bl	80062fc <move_window>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <check_fs+0x36>
		return 3;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e04a      	b.n	8007fa0 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f10:	3301      	adds	r3, #1
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	021b      	lsls	r3, r3, #8
 8007f16:	b21a      	sxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007f1e:	b21b      	sxth	r3, r3
 8007f20:	4313      	orrs	r3, r2
 8007f22:	b21b      	sxth	r3, r3
 8007f24:	4a20      	ldr	r2, [pc, #128]	; (8007fa8 <check_fs+0xd4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d001      	beq.n	8007f2e <check_fs+0x5a>
		return 2;
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e038      	b.n	8007fa0 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3336      	adds	r3, #54	; 0x36
 8007f32:	3303      	adds	r3, #3
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	061a      	lsls	r2, r3, #24
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3336      	adds	r3, #54	; 0x36
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	4313      	orrs	r3, r2
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	3236      	adds	r2, #54	; 0x36
 8007f48:	3201      	adds	r2, #1
 8007f4a:	7812      	ldrb	r2, [r2, #0]
 8007f4c:	0212      	lsls	r2, r2, #8
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f5c:	4a13      	ldr	r2, [pc, #76]	; (8007fac <check_fs+0xd8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d101      	bne.n	8007f66 <check_fs+0x92>
		return 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	e01c      	b.n	8007fa0 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3352      	adds	r3, #82	; 0x52
 8007f6a:	3303      	adds	r3, #3
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	061a      	lsls	r2, r3, #24
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3352      	adds	r3, #82	; 0x52
 8007f74:	3302      	adds	r3, #2
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	041b      	lsls	r3, r3, #16
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	3252      	adds	r2, #82	; 0x52
 8007f80:	3201      	adds	r2, #1
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	0212      	lsls	r2, r2, #8
 8007f86:	4313      	orrs	r3, r2
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f94:	4a05      	ldr	r2, [pc, #20]	; (8007fac <check_fs+0xd8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d101      	bne.n	8007f9e <check_fs+0xca>
		return 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e000      	b.n	8007fa0 <check_fs+0xcc>

	return 1;
 8007f9e:	2301      	movs	r3, #1
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	ffffaa55 	.word	0xffffaa55
 8007fac:	00544146 	.word	0x00544146

08007fb0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b096      	sub	sp, #88	; 0x58
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007fc4:	68b8      	ldr	r0, [r7, #8]
 8007fc6:	f7ff ff40 	bl	8007e4a <get_ldnumber>
 8007fca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da01      	bge.n	8007fd6 <find_volume+0x26>
 8007fd2:	230b      	movs	r3, #11
 8007fd4:	e33c      	b.n	8008650 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007fd6:	4ab3      	ldr	r2, [pc, #716]	; (80082a4 <find_volume+0x2f4>)
 8007fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fde:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <find_volume+0x3a>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	e332      	b.n	8008650 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fee:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01d      	beq.n	8008038 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008002:	3301      	adds	r3, #1
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	4618      	mov	r0, r3
 8008008:	f7fd fe3e 	bl	8005c88 <disk_status>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10c      	bne.n	8008038 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <find_volume+0x84>
 8008024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8008030:	230a      	movs	r3, #10
 8008032:	e30d      	b.n	8008650 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8008034:	2300      	movs	r3, #0
 8008036:	e30b      	b.n	8008650 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803e:	2200      	movs	r2, #0
 8008040:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008044:	b2da      	uxtb	r2, r3
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804c:	3301      	adds	r3, #1
 800804e:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008056:	3301      	adds	r3, #1
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	4618      	mov	r0, r3
 800805c:	f7fd fe2e 	bl	8005cbc <disk_initialize>
 8008060:	4603      	mov	r3, r0
 8008062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008066:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008072:	2303      	movs	r3, #3
 8008074:	e2ec      	b.n	8008650 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d007      	beq.n	800808c <find_volume+0xdc>
 800807c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8008088:	230a      	movs	r3, #10
 800808a:	e2e1      	b.n	8008650 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008092:	3301      	adds	r3, #1
 8008094:	7818      	ldrb	r0, [r3, #0]
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800809c:	330a      	adds	r3, #10
 800809e:	461a      	mov	r2, r3
 80080a0:	2102      	movs	r1, #2
 80080a2:	f7fd fe71 	bl	8005d88 <disk_ioctl>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10f      	bne.n	80080cc <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b2:	330a      	adds	r3, #10
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ba:	d307      	bcc.n	80080cc <find_volume+0x11c>
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c2:	330a      	adds	r3, #10
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ca:	d901      	bls.n	80080d0 <find_volume+0x120>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e2bf      	b.n	8008650 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80080d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080d8:	f7ff fefc 	bl	8007ed4 <check_fs>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80080e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d155      	bne.n	8008196 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80080ea:	2300      	movs	r3, #0
 80080ec:	643b      	str	r3, [r7, #64]	; 0x40
 80080ee:	e029      	b.n	8008144 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80080f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80080fa:	4413      	add	r3, r2
 80080fc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	3304      	adds	r3, #4
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d012      	beq.n	800812e <find_volume+0x17e>
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	330b      	adds	r3, #11
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	061a      	lsls	r2, r3, #24
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	330a      	adds	r3, #10
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	041b      	lsls	r3, r3, #16
 8008118:	4313      	orrs	r3, r2
 800811a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811c:	3209      	adds	r2, #9
 800811e:	7812      	ldrb	r2, [r2, #0]
 8008120:	0212      	lsls	r2, r2, #8
 8008122:	4313      	orrs	r3, r2
 8008124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008126:	3208      	adds	r2, #8
 8008128:	7812      	ldrb	r2, [r2, #0]
 800812a:	431a      	orrs	r2, r3
 800812c:	e000      	b.n	8008130 <find_volume+0x180>
 800812e:	2200      	movs	r2, #0
 8008130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008138:	440b      	add	r3, r1
 800813a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800813e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008140:	3301      	adds	r3, #1
 8008142:	643b      	str	r3, [r7, #64]	; 0x40
 8008144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008146:	2b03      	cmp	r3, #3
 8008148:	d9d2      	bls.n	80080f0 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800814a:	2300      	movs	r3, #0
 800814c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800814e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <find_volume+0x1aa>
 8008154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008156:	3b01      	subs	r3, #1
 8008158:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800815a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008162:	4413      	add	r3, r2
 8008164:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008168:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800816a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800816c:	2b00      	cmp	r3, #0
 800816e:	d005      	beq.n	800817c <find_volume+0x1cc>
 8008170:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008172:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008174:	f7ff feae 	bl	8007ed4 <check_fs>
 8008178:	4603      	mov	r3, r0
 800817a:	e000      	b.n	800817e <find_volume+0x1ce>
 800817c:	2302      	movs	r3, #2
 800817e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <find_volume+0x1e6>
 800818a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818c:	3301      	adds	r3, #1
 800818e:	643b      	str	r3, [r7, #64]	; 0x40
 8008190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008192:	2b03      	cmp	r3, #3
 8008194:	d9e1      	bls.n	800815a <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800819a:	2b03      	cmp	r3, #3
 800819c:	d101      	bne.n	80081a2 <find_volume+0x1f2>
 800819e:	2301      	movs	r3, #1
 80081a0:	e256      	b.n	8008650 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80081a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <find_volume+0x1fe>
 80081aa:	230d      	movs	r3, #13
 80081ac:	e250      	b.n	8008650 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	7b1b      	ldrb	r3, [r3, #12]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	b21a      	sxth	r2, r3
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	7adb      	ldrb	r3, [r3, #11]
 80081ba:	b21b      	sxth	r3, r3
 80081bc:	4313      	orrs	r3, r2
 80081be:	b21a      	sxth	r2, r3
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c6:	330a      	adds	r3, #10
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b21b      	sxth	r3, r3
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d001      	beq.n	80081d4 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 80081d0:	230d      	movs	r3, #13
 80081d2:	e23d      	b.n	8008650 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	7ddb      	ldrb	r3, [r3, #23]
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	b21a      	sxth	r2, r3
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	7d9b      	ldrb	r3, [r3, #22]
 80081e0:	b21b      	sxth	r3, r3
 80081e2:	4313      	orrs	r3, r2
 80081e4:	b21b      	sxth	r3, r3
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80081ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d112      	bne.n	8008216 <find_volume+0x266>
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80081f6:	061a      	lsls	r2, r3, #24
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	4313      	orrs	r3, r2
 8008202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008204:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008208:	0212      	lsls	r2, r2, #8
 800820a:	4313      	orrs	r3, r2
 800820c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800820e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008212:	4313      	orrs	r3, r2
 8008214:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800821c:	3318      	adds	r3, #24
 800821e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008220:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	7c1a      	ldrb	r2, [r3, #16]
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822c:	3303      	adds	r3, #3
 800822e:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008236:	3303      	adds	r3, #3
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d008      	beq.n	8008250 <find_volume+0x2a0>
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008244:	3303      	adds	r3, #3
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d001      	beq.n	8008250 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800824c:	230d      	movs	r3, #13
 800824e:	e1ff      	b.n	8008650 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008256:	3303      	adds	r3, #3
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	7b5a      	ldrb	r2, [r3, #13]
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800826e:	3302      	adds	r3, #2
 8008270:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008278:	3302      	adds	r3, #2
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00e      	beq.n	800829e <find_volume+0x2ee>
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008286:	3302      	adds	r3, #2
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008292:	3302      	adds	r3, #2
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	3b01      	subs	r3, #1
 8008298:	4013      	ands	r3, r2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d004      	beq.n	80082a8 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800829e:	230d      	movs	r3, #13
 80082a0:	e1d6      	b.n	8008650 <find_volume+0x6a0>
 80082a2:	bf00      	nop
 80082a4:	200000b4 	.word	0x200000b4

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	7c9b      	ldrb	r3, [r3, #18]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	b21a      	sxth	r2, r3
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	7c5b      	ldrb	r3, [r3, #17]
 80082b4:	b21b      	sxth	r3, r3
 80082b6:	4313      	orrs	r3, r2
 80082b8:	b21b      	sxth	r3, r3
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c2:	3308      	adds	r3, #8
 80082c4:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082cc:	3308      	adds	r3, #8
 80082ce:	881a      	ldrh	r2, [r3, #0]
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d6:	330a      	adds	r3, #10
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	b29b      	uxth	r3, r3
 80082de:	fbb2 f1f3 	udiv	r1, r2, r3
 80082e2:	fb03 f301 	mul.w	r3, r3, r1
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 80082ee:	230d      	movs	r3, #13
 80082f0:	e1ae      	b.n	8008650 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	7d1b      	ldrb	r3, [r3, #20]
 80082f6:	021b      	lsls	r3, r3, #8
 80082f8:	b21a      	sxth	r2, r3
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	7cdb      	ldrb	r3, [r3, #19]
 80082fe:	b21b      	sxth	r3, r3
 8008300:	4313      	orrs	r3, r2
 8008302:	b21b      	sxth	r3, r3
 8008304:	b29b      	uxth	r3, r3
 8008306:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830a:	2b00      	cmp	r3, #0
 800830c:	d112      	bne.n	8008334 <find_volume+0x384>
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008314:	061a      	lsls	r2, r3, #24
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800831c:	041b      	lsls	r3, r3, #16
 800831e:	4313      	orrs	r3, r2
 8008320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008322:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008326:	0212      	lsls	r2, r2, #8
 8008328:	4313      	orrs	r3, r2
 800832a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800832c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008330:	4313      	orrs	r3, r2
 8008332:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	7bdb      	ldrb	r3, [r3, #15]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	b21a      	sxth	r2, r3
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	7b9b      	ldrb	r3, [r3, #14]
 8008340:	b21b      	sxth	r3, r3
 8008342:	4313      	orrs	r3, r2
 8008344:	b21b      	sxth	r3, r3
 8008346:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008348:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <find_volume+0x3a2>
 800834e:	230d      	movs	r3, #13
 8008350:	e17e      	b.n	8008650 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008352:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008356:	441a      	add	r2, r3
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835e:	3308      	adds	r3, #8
 8008360:	8819      	ldrh	r1, [r3, #0]
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008368:	330a      	adds	r3, #10
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	b29b      	uxth	r3, r3
 8008370:	fbb1 f3f3 	udiv	r3, r1, r3
 8008374:	b29b      	uxth	r3, r3
 8008376:	4413      	add	r3, r2
 8008378:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800837a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	429a      	cmp	r2, r3
 8008380:	d201      	bcs.n	8008386 <find_volume+0x3d6>
 8008382:	230d      	movs	r3, #13
 8008384:	e164      	b.n	8008650 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	1ad2      	subs	r2, r2, r3
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008392:	3302      	adds	r3, #2
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	fbb2 f3f3 	udiv	r3, r2, r3
 800839a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <find_volume+0x3f6>
 80083a2:	230d      	movs	r3, #13
 80083a4:	e154      	b.n	8008650 <find_volume+0x6a0>
	fmt = FS_FAT12;
 80083a6:	2301      	movs	r3, #1
 80083a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	f640 72f5 	movw	r2, #4085	; 0xff5
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d902      	bls.n	80083bc <find_volume+0x40c>
 80083b6:	2302      	movs	r3, #2
 80083b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d902      	bls.n	80083cc <find_volume+0x41c>
 80083c6:	2303      	movs	r3, #3
 80083c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	1c9a      	adds	r2, r3, #2
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d6:	3314      	adds	r3, #20
 80083d8:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e0:	331c      	adds	r3, #28
 80083e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083e4:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80083e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ea:	441a      	add	r2, r3
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80083f2:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 80083f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	441a      	add	r2, r3
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008400:	3308      	adds	r3, #8
 8008402:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8008404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008408:	2b03      	cmp	r3, #3
 800840a:	d127      	bne.n	800845c <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008412:	3308      	adds	r3, #8
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <find_volume+0x46e>
 800841a:	230d      	movs	r3, #13
 800841c:	e118      	b.n	8008650 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008424:	061a      	lsls	r2, r3, #24
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800842c:	041b      	lsls	r3, r3, #16
 800842e:	4313      	orrs	r3, r2
 8008430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008432:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008436:	0212      	lsls	r2, r2, #8
 8008438:	4313      	orrs	r3, r2
 800843a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800843c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008440:	431a      	orrs	r2, r3
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008448:	3304      	adds	r3, #4
 800844a:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008452:	3314      	adds	r3, #20
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	647b      	str	r3, [r7, #68]	; 0x44
 800845a:	e030      	b.n	80084be <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008462:	3308      	adds	r3, #8
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <find_volume+0x4be>
 800846a:	230d      	movs	r3, #13
 800846c:	e0f0      	b.n	8008650 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008478:	441a      	add	r2, r3
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008480:	3304      	adds	r3, #4
 8008482:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008488:	2b02      	cmp	r3, #2
 800848a:	d106      	bne.n	800849a <find_volume+0x4ea>
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008492:	3314      	adds	r3, #20
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	e010      	b.n	80084bc <find_volume+0x50c>
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a0:	3314      	adds	r3, #20
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	4413      	add	r3, r2
 80084aa:	085a      	lsrs	r2, r3, #1
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b2:	3314      	adds	r3, #20
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80084bc:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c4:	3318      	adds	r3, #24
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ce:	330a      	adds	r3, #10
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d6:	440b      	add	r3, r1
 80084d8:	1e59      	subs	r1, r3, #1
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e0:	330a      	adds	r3, #10
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d201      	bcs.n	80084f0 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 80084ec:	230d      	movs	r3, #13
 80084ee:	e0af      	b.n	8008650 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80084f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f6:	3310      	adds	r3, #16
 80084f8:	f04f 32ff 	mov.w	r2, #4294967295
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008504:	3310      	adds	r3, #16
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850e:	330c      	adds	r3, #12
 8008510:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008518:	3305      	adds	r3, #5
 800851a:	2280      	movs	r2, #128	; 0x80
 800851c:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800851e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008522:	2b03      	cmp	r3, #3
 8008524:	d17d      	bne.n	8008622 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	b21a      	sxth	r2, r3
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008536:	b21b      	sxth	r3, r3
 8008538:	4313      	orrs	r3, r2
 800853a:	b21b      	sxth	r3, r3
 800853c:	2b01      	cmp	r3, #1
 800853e:	d170      	bne.n	8008622 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008542:	3301      	adds	r3, #1
 8008544:	4619      	mov	r1, r3
 8008546:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008548:	f7fd fed8 	bl	80062fc <move_window>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d167      	bne.n	8008622 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008558:	3305      	adds	r3, #5
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	b21a      	sxth	r2, r3
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800856e:	b21b      	sxth	r3, r3
 8008570:	4313      	orrs	r3, r2
 8008572:	b21b      	sxth	r3, r3
 8008574:	4a38      	ldr	r2, [pc, #224]	; (8008658 <find_volume+0x6a8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d153      	bne.n	8008622 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	78db      	ldrb	r3, [r3, #3]
 800857e:	061a      	lsls	r2, r3, #24
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	789b      	ldrb	r3, [r3, #2]
 8008584:	041b      	lsls	r3, r3, #16
 8008586:	4313      	orrs	r3, r2
 8008588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800858a:	7852      	ldrb	r2, [r2, #1]
 800858c:	0212      	lsls	r2, r2, #8
 800858e:	4313      	orrs	r3, r2
 8008590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008592:	7812      	ldrb	r2, [r2, #0]
 8008594:	4313      	orrs	r3, r2
 8008596:	4a31      	ldr	r2, [pc, #196]	; (800865c <find_volume+0x6ac>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d142      	bne.n	8008622 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80085a2:	061a      	lsls	r2, r3, #24
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80085aa:	041b      	lsls	r3, r3, #16
 80085ac:	4313      	orrs	r3, r2
 80085ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b0:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80085b4:	0212      	lsls	r2, r2, #8
 80085b6:	4313      	orrs	r3, r2
 80085b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ba:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80085be:	4313      	orrs	r3, r2
 80085c0:	4a27      	ldr	r2, [pc, #156]	; (8008660 <find_volume+0x6b0>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d12d      	bne.n	8008622 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80085cc:	061a      	lsls	r2, r3, #24
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	4313      	orrs	r3, r2
 80085d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085da:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80085de:	0212      	lsls	r2, r2, #8
 80085e0:	4313      	orrs	r3, r2
 80085e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085e4:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80085e8:	431a      	orrs	r2, r3
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f0:	3310      	adds	r3, #16
 80085f2:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80085fa:	061a      	lsls	r2, r3, #24
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008602:	041b      	lsls	r3, r3, #16
 8008604:	4313      	orrs	r3, r2
 8008606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008608:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800860c:	0212      	lsls	r2, r2, #8
 800860e:	4313      	orrs	r3, r2
 8008610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008612:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008616:	431a      	orrs	r2, r3
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800861e:	330c      	adds	r3, #12
 8008620:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008628:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800862c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <find_volume+0x6b4>)
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	b29a      	uxth	r2, r3
 8008636:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <find_volume+0x6b4>)
 8008638:	801a      	strh	r2, [r3, #0]
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <find_volume+0x6b4>)
 800863c:	881a      	ldrh	r2, [r3, #0]
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008644:	3306      	adds	r3, #6
 8008646:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800864a:	f7fd fdd3 	bl	80061f4 <clear_lock>
#endif

	return FR_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3758      	adds	r7, #88	; 0x58
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	ffffaa55 	.word	0xffffaa55
 800865c:	41615252 	.word	0x41615252
 8008660:	61417272 	.word	0x61417272
 8008664:	200000b8 	.word	0x200000b8

08008668 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d02d      	beq.n	80086d6 <validate+0x6e>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d027      	beq.n	80086d6 <validate+0x6e>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01e      	beq.n	80086d6 <validate+0x6e>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a4:	3306      	adds	r3, #6
 80086a6:	881a      	ldrh	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ae:	3304      	adds	r3, #4
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d10f      	bne.n	80086d6 <validate+0x6e>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c2:	3301      	adds	r3, #1
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fd fade 	bl	8005c88 <disk_status>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <validate+0x72>
		return FR_INVALID_OBJECT;
 80086d6:	2309      	movs	r3, #9
 80086d8:	e000      	b.n	80086dc <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80086f6:	f107 0310 	add.w	r3, r7, #16
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff fba5 	bl	8007e4a <get_ldnumber>
 8008700:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	da01      	bge.n	800870c <f_mount+0x28>
 8008708:	230b      	movs	r3, #11
 800870a:	e02f      	b.n	800876c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800870c:	4a19      	ldr	r2, [pc, #100]	; (8008774 <f_mount+0x90>)
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008714:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800871c:	69b8      	ldr	r0, [r7, #24]
 800871e:	f7fd fd69 	bl	80061f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008738:	2200      	movs	r2, #0
 800873a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	490d      	ldr	r1, [pc, #52]	; (8008774 <f_mount+0x90>)
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <f_mount+0x6e>
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d001      	beq.n	8008756 <f_mount+0x72>
 8008752:	2300      	movs	r3, #0
 8008754:	e00a      	b.n	800876c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008756:	f107 0108 	add.w	r1, r7, #8
 800875a:	f107 030c 	add.w	r3, r7, #12
 800875e:	2200      	movs	r2, #0
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff fc25 	bl	8007fb0 <find_volume>
 8008766:	4603      	mov	r3, r0
 8008768:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800876a:	7dfb      	ldrb	r3, [r7, #23]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3720      	adds	r7, #32
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	200000b4 	.word	0x200000b4

08008778 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	f107 0318 	add.w	r3, r7, #24
 8008786:	3b0c      	subs	r3, #12
 8008788:	6018      	str	r0, [r3, #0]
 800878a:	f107 0318 	add.w	r3, r7, #24
 800878e:	3b10      	subs	r3, #16
 8008790:	6019      	str	r1, [r3, #0]
 8008792:	f107 0318 	add.w	r3, r7, #24
 8008796:	3b11      	subs	r3, #17
 8008798:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800879a:	f107 0318 	add.w	r3, r7, #24
 800879e:	3b0c      	subs	r3, #12
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <f_open+0x32>
 80087a6:	2309      	movs	r3, #9
 80087a8:	e319      	b.n	8008dde <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 80087aa:	f107 0318 	add.w	r3, r7, #24
 80087ae:	3b0c      	subs	r3, #12
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80087ba:	f107 0318 	add.w	r3, r7, #24
 80087be:	3b11      	subs	r3, #17
 80087c0:	f107 0218 	add.w	r2, r7, #24
 80087c4:	3a11      	subs	r2, #17
 80087c6:	7812      	ldrb	r2, [r2, #0]
 80087c8:	f002 021f 	and.w	r2, r2, #31
 80087cc:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80087ce:	f107 0318 	add.w	r3, r7, #24
 80087d2:	3b11      	subs	r3, #17
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f023 0301 	bic.w	r3, r3, #1
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	f107 0118 	add.w	r1, r7, #24
 80087e0:	3910      	subs	r1, #16
 80087e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087e6:	3b18      	subs	r3, #24
 80087e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fbdf 	bl	8007fb0 <find_volume>
 80087f2:	4603      	mov	r3, r0
 80087f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80087f8:	f102 0217 	add.w	r2, r2, #23
 80087fc:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80087fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008802:	f103 0317 	add.w	r3, r3, #23
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f040 82e3 	bne.w	8008dd4 <f_open+0x65c>
		INIT_BUF(dj);
 800880e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008812:	3b18      	subs	r3, #24
 8008814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008818:	3318      	adds	r3, #24
 800881a:	f107 0218 	add.w	r2, r7, #24
 800881e:	3a04      	subs	r2, #4
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008826:	3b18      	subs	r3, #24
 8008828:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800882c:	4ad1      	ldr	r2, [pc, #836]	; (8008b74 <f_open+0x3fc>)
 800882e:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008830:	f107 0318 	add.w	r3, r7, #24
 8008834:	3b10      	subs	r3, #16
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800883c:	3b18      	subs	r3, #24
 800883e:	4611      	mov	r1, r2
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fa89 	bl	8007d58 <follow_path>
 8008846:	4603      	mov	r3, r0
 8008848:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800884c:	f102 0217 	add.w	r2, r2, #23
 8008850:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8008852:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008856:	3b18      	subs	r3, #24
 8008858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885c:	3314      	adds	r3, #20
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008864:	f102 0210 	add.w	r2, r2, #16
 8008868:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800886a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800886e:	f103 0317 	add.w	r3, r3, #23
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d126      	bne.n	80088c6 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8008878:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800887c:	f103 0310 	add.w	r3, r3, #16
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <f_open+0x11c>
				res = FR_INVALID_NAME;
 8008886:	2306      	movs	r3, #6
 8008888:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800888c:	f102 0217 	add.w	r2, r2, #23
 8008890:	7013      	strb	r3, [r2, #0]
 8008892:	e018      	b.n	80088c6 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008894:	f107 0318 	add.w	r3, r7, #24
 8008898:	3b11      	subs	r3, #17
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	f023 0301 	bic.w	r3, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf14      	ite	ne
 80088a4:	2301      	movne	r3, #1
 80088a6:	2300      	moveq	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	461a      	mov	r2, r3
 80088ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088b0:	3b18      	subs	r3, #24
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fd fb01 	bl	8005ebc <chk_lock>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80088c0:	f102 0217 	add.w	r2, r2, #23
 80088c4:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80088c6:	f107 0318 	add.w	r3, r7, #24
 80088ca:	3b11      	subs	r3, #17
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	f003 031c 	and.w	r3, r3, #28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 8150 	beq.w	8008b78 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 80088d8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80088dc:	f103 0317 	add.w	r3, r3, #23
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d030      	beq.n	8008948 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80088e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80088ea:	f103 0317 	add.w	r3, r3, #23
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d112      	bne.n	800891a <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80088f4:	f7fd fb54 	bl	8005fa0 <enq_lock>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d007      	beq.n	800890e <f_open+0x196>
 80088fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008902:	3b18      	subs	r3, #24
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe ff35 	bl	8007774 <dir_register>
 800890a:	4603      	mov	r3, r0
 800890c:	e000      	b.n	8008910 <f_open+0x198>
 800890e:	2312      	movs	r3, #18
 8008910:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008914:	f102 0217 	add.w	r2, r2, #23
 8008918:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800891a:	f107 0318 	add.w	r3, r7, #24
 800891e:	3b11      	subs	r3, #17
 8008920:	f107 0218 	add.w	r2, r7, #24
 8008924:	3a11      	subs	r2, #17
 8008926:	7812      	ldrb	r2, [r2, #0]
 8008928:	f042 0208 	orr.w	r2, r2, #8
 800892c:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800892e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008932:	3b18      	subs	r3, #24
 8008934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008938:	3314      	adds	r3, #20
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008940:	f102 0210 	add.w	r2, r2, #16
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	e01f      	b.n	8008988 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008948:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800894c:	f103 0310 	add.w	r3, r3, #16
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330b      	adds	r3, #11
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	f003 0311 	and.w	r3, r3, #17
 800895a:	2b00      	cmp	r3, #0
 800895c:	d006      	beq.n	800896c <f_open+0x1f4>
					res = FR_DENIED;
 800895e:	2307      	movs	r3, #7
 8008960:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008964:	f102 0217 	add.w	r2, r2, #23
 8008968:	7013      	strb	r3, [r2, #0]
 800896a:	e00d      	b.n	8008988 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800896c:	f107 0318 	add.w	r3, r7, #24
 8008970:	3b11      	subs	r3, #17
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <f_open+0x210>
						res = FR_EXIST;
 800897c:	2308      	movs	r3, #8
 800897e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008982:	f102 0217 	add.w	r2, r2, #23
 8008986:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008988:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800898c:	f103 0317 	add.w	r3, r3, #23
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f040 8122 	bne.w	8008bdc <f_open+0x464>
 8008998:	f107 0318 	add.w	r3, r7, #24
 800899c:	3b11      	subs	r3, #17
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8119 	beq.w	8008bdc <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 80089aa:	f7fd f90b 	bl	8005bc4 <get_fattime>
 80089ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089b2:	f103 030c 	add.w	r3, r3, #12
 80089b6:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80089b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089bc:	f103 0310 	add.w	r3, r3, #16
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330e      	adds	r3, #14
 80089c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80089c8:	f102 020c 	add.w	r2, r2, #12
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089d6:	f103 030c 	add.w	r3, r3, #12
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	0a1b      	lsrs	r3, r3, #8
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089e6:	f103 0310 	add.w	r3, r3, #16
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	330f      	adds	r3, #15
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089f6:	f103 030c 	add.w	r3, r3, #12
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	0c1a      	lsrs	r2, r3, #16
 80089fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a02:	f103 0310 	add.w	r3, r3, #16
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3310      	adds	r3, #16
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a12:	f103 030c 	add.w	r3, r3, #12
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	0e1a      	lsrs	r2, r3, #24
 8008a1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a1e:	f103 0310 	add.w	r3, r3, #16
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3311      	adds	r3, #17
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008a2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a2e:	f103 0310 	add.w	r3, r3, #16
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330b      	adds	r3, #11
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008a3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a3e:	f103 0310 	add.w	r3, r3, #16
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	331c      	adds	r3, #28
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a4e:	f103 0310 	add.w	r3, r3, #16
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	331d      	adds	r3, #29
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
 8008a5a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a5e:	f103 0310 	add.w	r3, r3, #16
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	331e      	adds	r3, #30
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
 8008a6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a6e:	f103 0310 	add.w	r3, r3, #16
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	331f      	adds	r3, #31
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008a7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a7e:	3b18      	subs	r3, #24
 8008a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a8a:	f102 0210 	add.w	r2, r2, #16
 8008a8e:	6811      	ldr	r1, [r2, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fbae 	bl	80071f2 <ld_clust>
 8008a96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a9a:	f103 0308 	add.w	r3, r3, #8
 8008a9e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008aa6:	f103 0310 	add.w	r3, r3, #16
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	f7fe fbd0 	bl	8007250 <st_clust>
				dj.fs->wflag = 1;
 8008ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ab4:	3b18      	subs	r3, #24
 8008ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8008ac6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008aca:	f103 0308 	add.w	r3, r3, #8
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8083 	beq.w	8008bdc <f_open+0x464>
					dw = dj.fs->winsect;
 8008ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ada:	3b18      	subs	r3, #24
 8008adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008ae6:	330c      	adds	r3, #12
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008aee:	f102 020c 	add.w	r2, r2, #12
 8008af2:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008af4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008af8:	3b18      	subs	r3, #24
 8008afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b04:	f102 0208 	add.w	r2, r2, #8
 8008b08:	6811      	ldr	r1, [r2, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fd ff86 	bl	8006a1c <remove_chain>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b16:	f102 0217 	add.w	r2, r2, #23
 8008b1a:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8008b1c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b20:	f103 0317 	add.w	r3, r3, #23
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d158      	bne.n	8008bdc <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008b2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b2e:	3b18      	subs	r3, #24
 8008b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b3a:	f102 0208 	add.w	r2, r2, #8
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	3a01      	subs	r2, #1
 8008b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b46:	330c      	adds	r3, #12
 8008b48:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 8008b4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b4e:	3b18      	subs	r3, #24
 8008b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b5a:	f102 020c 	add.w	r2, r2, #12
 8008b5e:	6811      	ldr	r1, [r2, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fd fbcb 	bl	80062fc <move_window>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b6c:	f102 0217 	add.w	r2, r2, #23
 8008b70:	7013      	strb	r3, [r2, #0]
 8008b72:	e033      	b.n	8008bdc <f_open+0x464>
 8008b74:	200000d4 	.word	0x200000d4
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008b78:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b7c:	f103 0317 	add.w	r3, r3, #23
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d12a      	bne.n	8008bdc <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008b86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b8a:	f103 0310 	add.w	r3, r3, #16
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	330b      	adds	r3, #11
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d006      	beq.n	8008baa <f_open+0x432>
					res = FR_NO_FILE;
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ba2:	f102 0217 	add.w	r2, r2, #23
 8008ba6:	7013      	strb	r3, [r2, #0]
 8008ba8:	e018      	b.n	8008bdc <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008baa:	f107 0318 	add.w	r3, r7, #24
 8008bae:	3b11      	subs	r3, #17
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d010      	beq.n	8008bdc <f_open+0x464>
 8008bba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bbe:	f103 0310 	add.w	r3, r3, #16
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	330b      	adds	r3, #11
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <f_open+0x464>
						res = FR_DENIED;
 8008bd0:	2307      	movs	r3, #7
 8008bd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008bd6:	f102 0217 	add.w	r2, r2, #23
 8008bda:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008bdc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008be0:	f103 0317 	add.w	r3, r3, #23
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d15b      	bne.n	8008ca2 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008bea:	f107 0318 	add.w	r3, r7, #24
 8008bee:	3b11      	subs	r3, #17
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <f_open+0x496>
				mode |= FA__WRITTEN;
 8008bfa:	f107 0318 	add.w	r3, r7, #24
 8008bfe:	3b11      	subs	r3, #17
 8008c00:	f107 0218 	add.w	r2, r7, #24
 8008c04:	3a11      	subs	r2, #17
 8008c06:	7812      	ldrb	r2, [r2, #0]
 8008c08:	f042 0220 	orr.w	r2, r2, #32
 8008c0c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008c0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c12:	3b18      	subs	r3, #24
 8008c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008c1e:	330c      	adds	r3, #12
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	f107 0318 	add.w	r3, r7, #24
 8008c26:	3b0c      	subs	r3, #12
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2e:	331c      	adds	r3, #28
 8008c30:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 8008c32:	f107 0318 	add.w	r3, r7, #24
 8008c36:	3b0c      	subs	r3, #12
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008c3e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c42:	f102 0210 	add.w	r2, r2, #16
 8008c46:	6812      	ldr	r2, [r2, #0]
 8008c48:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c4a:	f107 0318 	add.w	r3, r7, #24
 8008c4e:	3b11      	subs	r3, #17
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	f023 0301 	bic.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bf14      	ite	ne
 8008c5a:	2301      	movne	r3, #1
 8008c5c:	2300      	moveq	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c66:	3b18      	subs	r3, #24
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fd f9bc 	bl	8005fe8 <inc_lock>
 8008c70:	4602      	mov	r2, r0
 8008c72:	f107 0318 	add.w	r3, r7, #24
 8008c76:	3b0c      	subs	r3, #12
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008c7e:	3308      	adds	r3, #8
 8008c80:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8008c82:	f107 0318 	add.w	r3, r7, #24
 8008c86:	3b0c      	subs	r3, #12
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008c8e:	3308      	adds	r3, #8
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d105      	bne.n	8008ca2 <f_open+0x52a>
 8008c96:	2302      	movs	r3, #2
 8008c98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c9c:	f102 0217 	add.w	r2, r2, #23
 8008ca0:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008ca2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ca6:	f103 0317 	add.w	r3, r3, #23
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f040 8091 	bne.w	8008dd4 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8008cb2:	f107 0318 	add.w	r3, r7, #24
 8008cb6:	3b0c      	subs	r3, #12
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cbe:	3306      	adds	r3, #6
 8008cc0:	f107 0218 	add.w	r2, r7, #24
 8008cc4:	3a11      	subs	r2, #17
 8008cc6:	7812      	ldrb	r2, [r2, #0]
 8008cc8:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8008cca:	f107 0318 	add.w	r3, r7, #24
 8008cce:	3b0c      	subs	r3, #12
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd6:	3307      	adds	r3, #7
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008cdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ce0:	3b18      	subs	r3, #24
 8008ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008cec:	f102 0210 	add.w	r2, r2, #16
 8008cf0:	6811      	ldr	r1, [r2, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe fa7d 	bl	80071f2 <ld_clust>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	f107 0318 	add.w	r3, r7, #24
 8008cfe:	3b0c      	subs	r3, #12
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d06:	3310      	adds	r3, #16
 8008d08:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008d0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d0e:	f103 0310 	add.w	r3, r3, #16
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	331f      	adds	r3, #31
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	061a      	lsls	r2, r3, #24
 8008d1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d1e:	f103 0310 	add.w	r3, r3, #16
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	331e      	adds	r3, #30
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	041b      	lsls	r3, r3, #16
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d30:	f102 0210 	add.w	r2, r2, #16
 8008d34:	6812      	ldr	r2, [r2, #0]
 8008d36:	321d      	adds	r2, #29
 8008d38:	7812      	ldrb	r2, [r2, #0]
 8008d3a:	0212      	lsls	r2, r2, #8
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d42:	f102 0210 	add.w	r2, r2, #16
 8008d46:	6812      	ldr	r2, [r2, #0]
 8008d48:	321c      	adds	r2, #28
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	f107 0318 	add.w	r3, r7, #24
 8008d52:	3b0c      	subs	r3, #12
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d5a:	330c      	adds	r3, #12
 8008d5c:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8008d5e:	f107 0318 	add.w	r3, r7, #24
 8008d62:	3b0c      	subs	r3, #12
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8008d70:	f107 0318 	add.w	r3, r7, #24
 8008d74:	3b0c      	subs	r3, #12
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7c:	3318      	adds	r3, #24
 8008d7e:	2200      	movs	r2, #0
 8008d80:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008d82:	f107 0318 	add.w	r3, r7, #24
 8008d86:	3b0c      	subs	r3, #12
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008d8e:	3304      	adds	r3, #4
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008d94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d98:	3b18      	subs	r3, #24
 8008d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	f107 0318 	add.w	r3, r7, #24
 8008da4:	3b0c      	subs	r3, #12
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dac:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8008dae:	f107 0318 	add.w	r3, r7, #24
 8008db2:	3b0c      	subs	r3, #12
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc0:	3306      	adds	r3, #6
 8008dc2:	881a      	ldrh	r2, [r3, #0]
 8008dc4:	f107 0318 	add.w	r3, r7, #24
 8008dc8:	3b0c      	subs	r3, #12
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008dd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008dd8:	f103 0317 	add.w	r3, r3, #23
 8008ddc:	781b      	ldrb	r3, [r3, #0]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop

08008dec <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08c      	sub	sp, #48	; 0x30
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7ff fc2f 	bl	8008668 <validate>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008e0e:	7ffb      	ldrb	r3, [r7, #31]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <f_read+0x2c>
 8008e14:	7ffb      	ldrb	r3, [r7, #31]
 8008e16:	e1fb      	b.n	8009210 <f_read+0x424>
	if (fp->err)								/* Check error */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e1e:	3307      	adds	r3, #7
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2c:	3307      	adds	r3, #7
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	e1ee      	b.n	8009210 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e38:	3306      	adds	r3, #6
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008e44:	2307      	movs	r3, #7
 8008e46:	e1e3      	b.n	8009210 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e4e:	330c      	adds	r3, #12
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e58:	3308      	adds	r3, #8
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	f240 81ce 	bls.w	8009206 <f_read+0x41a>
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008e6e:	e1ca      	b.n	8009206 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e76:	3308      	adds	r3, #8
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e86:	330a      	adds	r3, #10
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e8e:	fb03 f301 	mul.w	r3, r3, r1
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f040 8160 	bne.w	800915a <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb0:	330a      	adds	r3, #10
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	4013      	ands	r3, r2
 8008ed0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d14a      	bne.n	8008f6e <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ede:	3308      	adds	r3, #8
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eec:	3310      	adds	r3, #16
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef2:	e01f      	b.n	8008f34 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008efa:	3304      	adds	r3, #4
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f08:	3308      	adds	r3, #8
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7fd fe9d 	bl	8006c4e <clmt_clust>
 8008f14:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008f16:	e00d      	b.n	8008f34 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f26:	3314      	adds	r3, #20
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fd fb10 	bl	8006552 <get_fat>
 8008f32:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d807      	bhi.n	8008f4a <f_read+0x15e>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f40:	3307      	adds	r3, #7
 8008f42:	2202      	movs	r2, #2
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	2302      	movs	r3, #2
 8008f48:	e162      	b.n	8009210 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f50:	d107      	bne.n	8008f62 <f_read+0x176>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f58:	3307      	adds	r3, #7
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e156      	b.n	8009210 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f68:	3314      	adds	r3, #20
 8008f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f6c:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f7c:	3314      	adds	r3, #20
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	f7fd fabd 	bl	8006502 <clust2sect>
 8008f88:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d107      	bne.n	8008fa0 <f_read+0x1b4>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f96:	3307      	adds	r3, #7
 8008f98:	2202      	movs	r2, #2
 8008f9a:	701a      	strb	r2, [r3, #0]
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e137      	b.n	8009210 <f_read+0x424>
			sect += csect;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb4:	330a      	adds	r3, #10
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d070      	beq.n	80090aa <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008fc8:	7dfa      	ldrb	r2, [r7, #23]
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	441a      	add	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fda:	3302      	adds	r3, #2
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d90b      	bls.n	8008ffa <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fee:	3302      	adds	r3, #2
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009006:	3301      	adds	r3, #1
 8009008:	7818      	ldrb	r0, [r3, #0]
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	6a39      	ldr	r1, [r7, #32]
 8009010:	f7fc fe7a 	bl	8005d08 <disk_read>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009020:	3307      	adds	r3, #7
 8009022:	2201      	movs	r2, #1
 8009024:	701a      	strb	r2, [r3, #0]
 8009026:	2301      	movs	r3, #1
 8009028:	e0f2      	b.n	8009210 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009030:	3306      	adds	r3, #6
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009038:	2b00      	cmp	r3, #0
 800903a:	d028      	beq.n	800908e <f_read+0x2a2>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009042:	3318      	adds	r3, #24
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904c:	429a      	cmp	r2, r3
 800904e:	d91e      	bls.n	800908e <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009056:	3318      	adds	r3, #24
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	1ad2      	subs	r2, r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906a:	330a      	adds	r3, #10
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	fb03 f302 	mul.w	r3, r3, r2
 8009072:	6a3a      	ldr	r2, [r7, #32]
 8009074:	18d0      	adds	r0, r2, r3
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009084:	330a      	adds	r3, #10
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	f7fc fe9b 	bl	8005dc4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800909a:	330a      	adds	r3, #10
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80090a8:	e093      	b.n	80091d2 <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b0:	3318      	adds	r3, #24
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d049      	beq.n	800914e <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c0:	3306      	adds	r3, #6
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d028      	beq.n	800911e <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d8:	3301      	adds	r3, #1
 80090da:	7818      	ldrb	r0, [r3, #0]
 80090dc:	68f9      	ldr	r1, [r7, #12]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e4:	3318      	adds	r3, #24
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	2301      	movs	r3, #1
 80090ea:	f7fc fe2d 	bl	8005d48 <disk_write>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fa:	3307      	adds	r3, #7
 80090fc:	2201      	movs	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
 8009100:	2301      	movs	r3, #1
 8009102:	e085      	b.n	8009210 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800910a:	3306      	adds	r3, #6
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009112:	b2da      	uxtb	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800911a:	3306      	adds	r3, #6
 800911c:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912a:	3301      	adds	r3, #1
 800912c:	7818      	ldrb	r0, [r3, #0]
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	2301      	movs	r3, #1
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	f7fc fde8 	bl	8005d08 <disk_read>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009144:	3307      	adds	r3, #7
 8009146:	2201      	movs	r2, #1
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	2301      	movs	r3, #1
 800914c:	e060      	b.n	8009210 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009154:	3318      	adds	r3, #24
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009166:	330a      	adds	r3, #10
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009172:	3308      	adds	r3, #8
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009182:	330a      	adds	r3, #10
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	fbb2 f1f3 	udiv	r1, r2, r3
 800918a:	fb03 f301 	mul.w	r3, r3, r1
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	1ac3      	subs	r3, r0, r3
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8009194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d901      	bls.n	80091a0 <f_read+0x3b4>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a6:	3308      	adds	r3, #8
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b6:	330a      	adds	r3, #10
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	fbb2 f1f3 	udiv	r1, r2, r3
 80091be:	fb03 f301 	mul.w	r3, r3, r1
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4413      	add	r3, r2
 80091c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091ca:	4619      	mov	r1, r3
 80091cc:	6a38      	ldr	r0, [r7, #32]
 80091ce:	f7fc fdf9 	bl	8005dc4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80091d2:	6a3a      	ldr	r2, [r7, #32]
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	4413      	add	r3, r2
 80091d8:	623b      	str	r3, [r7, #32]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e0:	3308      	adds	r3, #8
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	441a      	add	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ee:	3308      	adds	r3, #8
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	441a      	add	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f47f ae31 	bne.w	8008e70 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3730      	adds	r7, #48	; 0x30
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7ff fa19 	bl	8008668 <validate>
 8009236:	4603      	mov	r3, r0
 8009238:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <f_write+0x2c>
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	e258      	b.n	80096f6 <f_write+0x4de>
	if (fp->err)							/* Check error */
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924a:	3307      	adds	r3, #7
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d005      	beq.n	800925e <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009258:	3307      	adds	r3, #7
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	e24b      	b.n	80096f6 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009264:	3306      	adds	r3, #6
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	f003 0302 	and.w	r3, r3, #2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009270:	2307      	movs	r3, #7
 8009272:	e240      	b.n	80096f6 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927a:	3308      	adds	r3, #8
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	441a      	add	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009288:	3308      	adds	r3, #8
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	f080 8208 	bcs.w	80096a2 <f_write+0x48a>
 8009292:	2300      	movs	r3, #0
 8009294:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8009296:	e204      	b.n	80096a2 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929e:	3308      	adds	r3, #8
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ae:	330a      	adds	r3, #10
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80092b6:	fb03 f301 	mul.w	r3, r3, r1
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f040 818d 	bne.w	80095dc <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c8:	3308      	adds	r3, #8
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d8:	330a      	adds	r3, #10
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ee:	3302      	adds	r3, #2
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	4013      	ands	r3, r2
 80092f8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80092fa:	7dbb      	ldrb	r3, [r7, #22]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d167      	bne.n	80093d0 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009306:	3308      	adds	r3, #8
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d112      	bne.n	8009334 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009314:	3310      	adds	r3, #16
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	2b00      	cmp	r3, #0
 800931e:	d129      	bne.n	8009374 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2100      	movs	r1, #0
 800932a:	4618      	mov	r0, r3
 800932c:	f7fd fbde 	bl	8006aec <create_chain>
 8009330:	6278      	str	r0, [r7, #36]	; 0x24
 8009332:	e01f      	b.n	8009374 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800933a:	3304      	adds	r3, #4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009348:	3308      	adds	r3, #8
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4619      	mov	r1, r3
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7fd fc7d 	bl	8006c4e <clmt_clust>
 8009354:	6278      	str	r0, [r7, #36]	; 0x24
 8009356:	e00d      	b.n	8009374 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009366:	3314      	adds	r3, #20
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4619      	mov	r1, r3
 800936c:	4610      	mov	r0, r2
 800936e:	f7fd fbbd 	bl	8006aec <create_chain>
 8009372:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 8198 	beq.w	80096ac <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	2b01      	cmp	r3, #1
 8009380:	d107      	bne.n	8009392 <f_write+0x17a>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009388:	3307      	adds	r3, #7
 800938a:	2202      	movs	r2, #2
 800938c:	701a      	strb	r2, [r3, #0]
 800938e:	2302      	movs	r3, #2
 8009390:	e1b1      	b.n	80096f6 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d107      	bne.n	80093aa <f_write+0x192>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a0:	3307      	adds	r3, #7
 80093a2:	2201      	movs	r2, #1
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	2301      	movs	r3, #1
 80093a8:	e1a5      	b.n	80096f6 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b0:	3314      	adds	r3, #20
 80093b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b4:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093bc:	3310      	adds	r3, #16
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d105      	bne.n	80093d0 <f_write+0x1b8>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ca:	3310      	adds	r3, #16
 80093cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ce:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d6:	3306      	adds	r3, #6
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d028      	beq.n	8009434 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ee:	3301      	adds	r3, #1
 80093f0:	7818      	ldrb	r0, [r3, #0]
 80093f2:	68f9      	ldr	r1, [r7, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fa:	3318      	adds	r3, #24
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	2301      	movs	r3, #1
 8009400:	f7fc fca2 	bl	8005d48 <disk_write>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d007      	beq.n	800941a <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009410:	3307      	adds	r3, #7
 8009412:	2201      	movs	r2, #1
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	2301      	movs	r3, #1
 8009418:	e16d      	b.n	80096f6 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009420:	3306      	adds	r3, #6
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009428:	b2da      	uxtb	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009430:	3306      	adds	r3, #6
 8009432:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009442:	3314      	adds	r3, #20
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4619      	mov	r1, r3
 8009448:	4610      	mov	r0, r2
 800944a:	f7fd f85a 	bl	8006502 <clust2sect>
 800944e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d107      	bne.n	8009466 <f_write+0x24e>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945c:	3307      	adds	r3, #7
 800945e:	2202      	movs	r2, #2
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	2302      	movs	r3, #2
 8009464:	e147      	b.n	80096f6 <f_write+0x4de>
			sect += csect;
 8009466:	7dbb      	ldrb	r3, [r7, #22]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	4413      	add	r3, r2
 800946c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800947a:	330a      	adds	r3, #10
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	fbb3 f3f2 	udiv	r3, r3, r2
 8009486:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d074      	beq.n	8009578 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800948e:	7dba      	ldrb	r2, [r7, #22]
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	441a      	add	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a0:	3302      	adds	r3, #2
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d90b      	bls.n	80094c0 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b4:	3302      	adds	r3, #2
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	461a      	mov	r2, r3
 80094ba:	7dbb      	ldrb	r3, [r7, #22]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094cc:	3301      	adds	r3, #1
 80094ce:	7818      	ldrb	r0, [r3, #0]
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	69b9      	ldr	r1, [r7, #24]
 80094d6:	f7fc fc37 	bl	8005d48 <disk_write>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e6:	3307      	adds	r3, #7
 80094e8:	2201      	movs	r2, #1
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	2301      	movs	r3, #1
 80094ee:	e102      	b.n	80096f6 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f6:	3318      	adds	r3, #24
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	69fa      	ldr	r2, [r7, #28]
 8009500:	429a      	cmp	r2, r3
 8009502:	d92b      	bls.n	800955c <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800950c:	3318      	adds	r3, #24
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	1ad2      	subs	r2, r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009520:	330a      	adds	r3, #10
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	fb03 f302 	mul.w	r3, r3, r2
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	18d1      	adds	r1, r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009538:	330a      	adds	r3, #10
 800953a:	881b      	ldrh	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	f7fc fc41 	bl	8005dc4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009548:	3306      	adds	r3, #6
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009550:	b2da      	uxtb	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009558:	3306      	adds	r3, #6
 800955a:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009568:	330a      	adds	r3, #10
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	fb02 f303 	mul.w	r3, r2, r3
 8009574:	623b      	str	r3, [r7, #32]
				continue;
 8009576:	e07a      	b.n	800966e <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957e:	3318      	adds	r3, #24
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	429a      	cmp	r2, r3
 8009586:	d023      	beq.n	80095d0 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958e:	3308      	adds	r3, #8
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009598:	330c      	adds	r3, #12
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d217      	bcs.n	80095d0 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ac:	3301      	adds	r3, #1
 80095ae:	7818      	ldrb	r0, [r3, #0]
 80095b0:	68f9      	ldr	r1, [r7, #12]
 80095b2:	2301      	movs	r3, #1
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	f7fc fba7 	bl	8005d08 <disk_read>
 80095ba:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c6:	3307      	adds	r3, #7
 80095c8:	2201      	movs	r2, #1
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	2301      	movs	r3, #1
 80095ce:	e092      	b.n	80096f6 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d6:	3318      	adds	r3, #24
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e8:	330a      	adds	r3, #10
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	4618      	mov	r0, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f4:	3308      	adds	r3, #8
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009604:	330a      	adds	r3, #10
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	fbb2 f1f3 	udiv	r1, r2, r3
 800960c:	fb03 f301 	mul.w	r3, r3, r1
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	1ac3      	subs	r3, r0, r3
 8009614:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009616:	6a3a      	ldr	r2, [r7, #32]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	429a      	cmp	r2, r3
 800961c:	d901      	bls.n	8009622 <f_write+0x40a>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009628:	3308      	adds	r3, #8
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009638:	330a      	adds	r3, #10
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009640:	fb03 f301 	mul.w	r3, r3, r1
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	4413      	add	r3, r2
 800964a:	6a3a      	ldr	r2, [r7, #32]
 800964c:	69b9      	ldr	r1, [r7, #24]
 800964e:	4618      	mov	r0, r3
 8009650:	f7fc fbb8 	bl	8005dc4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965a:	3306      	adds	r3, #6
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009662:	b2da      	uxtb	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966a:	3306      	adds	r3, #6
 800966c:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	4413      	add	r3, r2
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800967c:	3308      	adds	r3, #8
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	441a      	add	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800968a:	3308      	adds	r3, #8
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	441a      	add	r2, r3
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f47f adf7 	bne.w	8009298 <f_write+0x80>
 80096aa:	e000      	b.n	80096ae <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80096ac:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b4:	3308      	adds	r3, #8
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096be:	330c      	adds	r3, #12
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d909      	bls.n	80096da <f_write+0x4c2>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096cc:	3308      	adds	r3, #8
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d6:	330c      	adds	r3, #12
 80096d8:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e0:	3306      	adds	r3, #6
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	f043 0320 	orr.w	r3, r3, #32
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096f0:	3306      	adds	r3, #6
 80096f2:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3728      	adds	r7, #40	; 0x28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7fe ffae 	bl	8008668 <validate>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 80cc 	bne.w	80098b0 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971e:	3306      	adds	r3, #6
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 80c2 	beq.w	80098b0 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009732:	3306      	adds	r3, #6
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973a:	2b00      	cmp	r3, #0
 800973c:	d022      	beq.n	8009784 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800974a:	3301      	adds	r3, #1
 800974c:	7818      	ldrb	r0, [r3, #0]
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009756:	3318      	adds	r3, #24
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	2301      	movs	r3, #1
 800975c:	f7fc faf4 	bl	8005d48 <disk_write>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009766:	2301      	movs	r3, #1
 8009768:	e0a3      	b.n	80098b2 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009770:	3306      	adds	r3, #6
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009778:	b2da      	uxtb	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009780:	3306      	adds	r3, #6
 8009782:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009792:	331c      	adds	r3, #28
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4619      	mov	r1, r3
 8009798:	4610      	mov	r0, r2
 800979a:	f7fc fdaf 	bl	80062fc <move_window>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f040 8083 	bne.w	80098b0 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	330b      	adds	r3, #11
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	330b      	adds	r3, #11
 80097be:	f042 0220 	orr.w	r2, r2, #32
 80097c2:	b2d2      	uxtb	r2, r2
 80097c4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097cc:	330c      	adds	r3, #12
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	331c      	adds	r3, #28
 80097d4:	b2d2      	uxtb	r2, r2
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097de:	330c      	adds	r3, #12
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	0a1b      	lsrs	r3, r3, #8
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	331d      	adds	r3, #29
 80097ec:	b2d2      	uxtb	r2, r2
 80097ee:	701a      	strb	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f6:	330c      	adds	r3, #12
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	0c1a      	lsrs	r2, r3, #16
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	331e      	adds	r3, #30
 8009800:	b2d2      	uxtb	r2, r2
 8009802:	701a      	strb	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800980a:	330c      	adds	r3, #12
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	0e1a      	lsrs	r2, r3, #24
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	331f      	adds	r3, #31
 8009814:	b2d2      	uxtb	r2, r2
 8009816:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981e:	3310      	adds	r3, #16
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4619      	mov	r1, r3
 8009824:	6938      	ldr	r0, [r7, #16]
 8009826:	f7fd fd13 	bl	8007250 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800982a:	f7fc f9cb 	bl	8005bc4 <get_fattime>
 800982e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	3316      	adds	r3, #22
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	b2d2      	uxtb	r2, r2
 8009838:	701a      	strb	r2, [r3, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	b29b      	uxth	r3, r3
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	b29a      	uxth	r2, r3
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3317      	adds	r3, #23
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	0c1a      	lsrs	r2, r3, #16
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	3318      	adds	r3, #24
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	0e1a      	lsrs	r2, r3, #24
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3319      	adds	r3, #25
 800985e:	b2d2      	uxtb	r2, r2
 8009860:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	3312      	adds	r3, #18
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3313      	adds	r3, #19
 800986e:	2200      	movs	r2, #0
 8009870:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009878:	3306      	adds	r3, #6
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	f023 0320 	bic.w	r3, r3, #32
 8009880:	b2da      	uxtb	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009888:	3306      	adds	r3, #6
 800988a:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009898:	3304      	adds	r3, #4
 800989a:	2201      	movs	r2, #1
 800989c:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fc fd5c 	bl	8006364 <sync_fs>
 80098ac:	4603      	mov	r3, r0
 80098ae:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff ff1b 	bl	80096fe <f_sync>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d119      	bne.n	8009906 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7fe fec8 	bl	8008668 <validate>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d111      	bne.n	8009906 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80098e8:	3308      	adds	r3, #8
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fc fc3d 	bl	800616c <dec_lock>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009906:	7bfb      	ldrb	r3, [r7, #15]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b090      	sub	sp, #64	; 0x40
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fe fea4 	bl	8008668 <validate>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009926:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <f_lseek+0x24>
 800992e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009932:	e31d      	b.n	8009f70 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993a:	3307      	adds	r3, #7
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d005      	beq.n	800994e <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009948:	3307      	adds	r3, #7
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	e310      	b.n	8009f70 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009954:	3304      	adds	r3, #4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 813c 	beq.w	8009bd6 <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009964:	d172      	bne.n	8009a4c <f_lseek+0x13c>
			tbl = fp->cltbl;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800996c:	3304      	adds	r3, #4
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	1d1a      	adds	r2, r3, #4
 8009976:	627a      	str	r2, [r7, #36]	; 0x24
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	2302      	movs	r3, #2
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009986:	3310      	adds	r3, #16
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	2b00      	cmp	r3, #0
 8009990:	d049      	beq.n	8009a26 <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	2300      	movs	r3, #0
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	3302      	adds	r3, #2
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	3301      	adds	r3, #1
 80099a8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fc fdcc 	bl	8006552 <get_fat>
 80099ba:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d807      	bhi.n	80099d2 <f_lseek+0xc2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c8:	3307      	adds	r3, #7
 80099ca:	2202      	movs	r2, #2
 80099cc:	701a      	strb	r2, [r3, #0]
 80099ce:	2302      	movs	r3, #2
 80099d0:	e2ce      	b.n	8009f70 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d8:	d107      	bne.n	80099ea <f_lseek+0xda>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e0:	3307      	adds	r3, #7
 80099e2:	2201      	movs	r2, #1
 80099e4:	701a      	strb	r2, [r3, #0]
 80099e6:	2301      	movs	r3, #1
 80099e8:	e2c2      	b.n	8009f70 <f_lseek+0x660>
					} while (cl == pcl + 1);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3301      	adds	r3, #1
 80099ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d0d5      	beq.n	80099a0 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80099f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d809      	bhi.n	8009a10 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	1d1a      	adds	r2, r3, #4
 8009a00:	627a      	str	r2, [r7, #36]	; 0x24
 8009a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a04:	601a      	str	r2, [r3, #0]
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	1d1a      	adds	r2, r3, #4
 8009a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1c:	3314      	adds	r3, #20
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d3b5      	bcc.n	8009992 <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a32:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8009a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d803      	bhi.n	8009a44 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	e293      	b.n	8009f6c <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009a44:	2311      	movs	r3, #17
 8009a46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009a4a:	e28f      	b.n	8009f6c <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a52:	330c      	adds	r3, #12
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d905      	bls.n	8009a68 <f_lseek+0x158>
				ofs = fp->fsize;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a62:	330c      	adds	r3, #12
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6e:	3308      	adds	r3, #8
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	601a      	str	r2, [r3, #0]
			if (ofs) {
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 8278 	beq.w	8009f6c <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7fd f8e3 	bl	8006c4e <clmt_clust>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a90:	3314      	adds	r3, #20
 8009a92:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa2:	3314      	adds	r3, #20
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f7fc fd2a 	bl	8006502 <clust2sect>
 8009aae:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d107      	bne.n	8009ac6 <f_lseek+0x1b6>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009abc:	3307      	adds	r3, #7
 8009abe:	2202      	movs	r2, #2
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e254      	b.n	8009f70 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	1e5a      	subs	r2, r3, #1
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad6:	330a      	adds	r3, #10
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aea:	3302      	adds	r3, #2
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	4013      	ands	r3, r2
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	4413      	add	r3, r2
 8009af6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afe:	3308      	adds	r3, #8
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0e:	330a      	adds	r3, #10
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b16:	fb03 f301 	mul.w	r3, r3, r1
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 8225 	beq.w	8009f6c <f_lseek+0x65c>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b28:	3318      	adds	r3, #24
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	f000 821c 	beq.w	8009f6c <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b3a:	3306      	adds	r3, #6
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d028      	beq.n	8009b98 <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b52:	3301      	adds	r3, #1
 8009b54:	7818      	ldrb	r0, [r3, #0]
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5e:	3318      	adds	r3, #24
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	2301      	movs	r3, #1
 8009b64:	f7fc f8f0 	bl	8005d48 <disk_write>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b74:	3307      	adds	r3, #7
 8009b76:	2201      	movs	r2, #1
 8009b78:	701a      	strb	r2, [r3, #0]
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e1f8      	b.n	8009f70 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b84:	3306      	adds	r3, #6
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b94:	3306      	adds	r3, #6
 8009b96:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	7818      	ldrb	r0, [r3, #0]
 8009ba8:	6879      	ldr	r1, [r7, #4]
 8009baa:	2301      	movs	r3, #1
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	f7fc f8ab 	bl	8005d08 <disk_read>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d007      	beq.n	8009bc8 <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbe:	3307      	adds	r3, #7
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	701a      	strb	r2, [r3, #0]
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e1d3      	b.n	8009f70 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bce:	3318      	adds	r3, #24
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	e1ca      	b.n	8009f6c <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bdc:	330c      	adds	r3, #12
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d90e      	bls.n	8009c04 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bec:	3306      	adds	r3, #6
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d105      	bne.n	8009c04 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfe:	330c      	adds	r3, #12
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	637b      	str	r3, [r7, #52]	; 0x34
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c1e:	601a      	str	r2, [r3, #0]
		if (ofs) {
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 8113 	beq.w	8009e4e <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c34:	3302      	adds	r3, #2
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c46:	330a      	adds	r3, #10
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	fb03 f302 	mul.w	r3, r3, r2
 8009c4e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d024      	beq.n	8009ca0 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	1e5a      	subs	r2, r3, #1
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	1e59      	subs	r1, r3, #1
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d318      	bcc.n	8009ca0 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	1e5a      	subs	r2, r3, #1
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	425b      	negs	r3, r3
 8009c76:	401a      	ands	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c7e:	3308      	adds	r3, #8
 8009c80:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c88:	3308      	adds	r3, #8
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c98:	3314      	adds	r3, #20
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c9e:	e034      	b.n	8009d0a <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca6:	3310      	adds	r3, #16
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d125      	bne.n	8009cfe <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fc ff15 	bl	8006aec <create_chain>
 8009cc2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d107      	bne.n	8009cda <f_lseek+0x3ca>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd0:	3307      	adds	r3, #7
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e14a      	b.n	8009f70 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d107      	bne.n	8009cf2 <f_lseek+0x3e2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce8:	3307      	adds	r3, #7
 8009cea:	2201      	movs	r2, #1
 8009cec:	701a      	strb	r2, [r3, #0]
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e13e      	b.n	8009f70 <f_lseek+0x660>
					fp->sclust = clst;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf8:	3310      	adds	r3, #16
 8009cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cfc:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d04:	3314      	adds	r3, #20
 8009d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d08:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 809e 	beq.w	8009e4e <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 8009d12:	e058      	b.n	8009dc6 <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1a:	3306      	adds	r3, #6
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00e      	beq.n	8009d44 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fc fedb 	bl	8006aec <create_chain>
 8009d36:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10b      	bne.n	8009d56 <f_lseek+0x446>
							ofs = bcs; break;
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	603b      	str	r3, [r7, #0]
 8009d42:	e044      	b.n	8009dce <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fc fbff 	bl	8006552 <get_fat>
 8009d54:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5c:	d107      	bne.n	8009d6e <f_lseek+0x45e>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d64:	3307      	adds	r3, #7
 8009d66:	2201      	movs	r2, #1
 8009d68:	701a      	strb	r2, [r3, #0]
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e100      	b.n	8009f70 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d90a      	bls.n	8009d8a <f_lseek+0x47a>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d80:	3314      	adds	r3, #20
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d307      	bcc.n	8009d9a <f_lseek+0x48a>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d90:	3307      	adds	r3, #7
 8009d92:	2202      	movs	r2, #2
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	2302      	movs	r3, #2
 8009d98:	e0ea      	b.n	8009f70 <f_lseek+0x660>
					fp->clust = clst;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da0:	3314      	adds	r3, #20
 8009da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009da4:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dac:	3308      	adds	r3, #8
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	441a      	add	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dba:	3308      	adds	r3, #8
 8009dbc:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d8a2      	bhi.n	8009d14 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	441a      	add	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de2:	3308      	adds	r3, #8
 8009de4:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df2:	330a      	adds	r3, #10
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dfe:	fb02 f201 	mul.w	r2, r2, r1
 8009e02:	1a9b      	subs	r3, r3, r2
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d022      	beq.n	8009e4e <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fc fb75 	bl	8006502 <clust2sect>
 8009e18:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d107      	bne.n	8009e30 <f_lseek+0x520>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e26:	3307      	adds	r3, #7
 8009e28:	2202      	movs	r2, #2
 8009e2a:	701a      	strb	r2, [r3, #0]
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e09f      	b.n	8009f70 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e3c:	330a      	adds	r3, #10
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e4a:	4413      	add	r3, r2
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e54:	3308      	adds	r3, #8
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e64:	330a      	adds	r3, #10
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e6c:	fb03 f301 	mul.w	r3, r3, r1
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d057      	beq.n	8009f26 <f_lseek+0x616>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7c:	3318      	adds	r3, #24
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d04f      	beq.n	8009f26 <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e8c:	3306      	adds	r3, #6
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d028      	beq.n	8009eea <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	7818      	ldrb	r0, [r3, #0]
 8009ea8:	6879      	ldr	r1, [r7, #4]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb0:	3318      	adds	r3, #24
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f7fb ff47 	bl	8005d48 <disk_write>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d007      	beq.n	8009ed0 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec6:	3307      	adds	r3, #7
 8009ec8:	2201      	movs	r2, #1
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e04f      	b.n	8009f70 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed6:	3306      	adds	r3, #6
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee6:	3306      	adds	r3, #6
 8009ee8:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	7818      	ldrb	r0, [r3, #0]
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	2301      	movs	r3, #1
 8009efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f00:	f7fb ff02 	bl	8005d08 <disk_read>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d007      	beq.n	8009f1a <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f10:	3307      	adds	r3, #7
 8009f12:	2201      	movs	r2, #1
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	2301      	movs	r3, #1
 8009f18:	e02a      	b.n	8009f70 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f20:	3318      	adds	r3, #24
 8009f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f24:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f36:	330c      	adds	r3, #12
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d916      	bls.n	8009f6c <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f44:	3308      	adds	r3, #8
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f4e:	330c      	adds	r3, #12
 8009f50:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f58:	3306      	adds	r3, #6
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f043 0320 	orr.w	r3, r3, #32
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f68:	3306      	adds	r3, #6
 8009f6a:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009f6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3740      	adds	r7, #64	; 0x40
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08e      	sub	sp, #56	; 0x38
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8009f84:	f107 030c 	add.w	r3, r7, #12
 8009f88:	2200      	movs	r2, #0
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7fe f80f 	bl	8007fb0 <find_volume>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8009f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f040 80c4 	bne.w	800a130 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fae:	3310      	adds	r3, #16
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb8:	3314      	adds	r3, #20
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3b02      	subs	r3, #2
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d807      	bhi.n	8009fd2 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc8:	3310      	adds	r3, #16
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	e0ae      	b.n	800a130 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8009fe0:	7efb      	ldrb	r3, [r7, #27]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d127      	bne.n	800a036 <f_getfree+0xbe>
				clst = 2;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8009fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fec:	69f8      	ldr	r0, [r7, #28]
 8009fee:	f7fc fab0 	bl	8006552 <get_fat>
 8009ff2:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffa:	d103      	bne.n	800a004 <f_getfree+0x8c>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a002:	e07f      	b.n	800a104 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d103      	bne.n	800a012 <f_getfree+0x9a>
 800a00a:	2302      	movs	r3, #2
 800a00c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a010:	e078      	b.n	800a104 <f_getfree+0x18c>
					if (stat == 0) n++;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <f_getfree+0xa6>
 800a018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01a:	3301      	adds	r3, #1
 800a01c:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a020:	3301      	adds	r3, #1
 800a022:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02a:	3314      	adds	r3, #20
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a030:	429a      	cmp	r2, r3
 800a032:	d3da      	bcc.n	8009fea <f_getfree+0x72>
 800a034:	e066      	b.n	800a104 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03c:	3314      	adds	r3, #20
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	627b      	str	r3, [r7, #36]	; 0x24
 800a050:	2300      	movs	r3, #0
 800a052:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	d115      	bne.n	800a086 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	62ba      	str	r2, [r7, #40]	; 0x28
 800a060:	4619      	mov	r1, r3
 800a062:	69f8      	ldr	r0, [r7, #28]
 800a064:	f7fc f94a 	bl	80062fc <move_window>
 800a068:	4603      	mov	r3, r0
 800a06a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800a06e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a072:	2b00      	cmp	r3, #0
 800a074:	d145      	bne.n	800a102 <f_getfree+0x18a>
						p = fs->win.d8;
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a080:	330a      	adds	r3, #10
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800a086:	7efb      	ldrb	r3, [r7, #27]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d115      	bne.n	800a0b8 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	3301      	adds	r3, #1
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	b21a      	sxth	r2, r3
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	b21b      	sxth	r3, r3
 800a09c:	4313      	orrs	r3, r2
 800a09e:	b21b      	sxth	r3, r3
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d102      	bne.n	800a0aa <f_getfree+0x132>
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	3302      	adds	r3, #2
 800a0ae:	623b      	str	r3, [r7, #32]
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	3b02      	subs	r3, #2
 800a0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0b6:	e01d      	b.n	800a0f4 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	3303      	adds	r3, #3
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	061a      	lsls	r2, r3, #24
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	3302      	adds	r3, #2
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	041b      	lsls	r3, r3, #16
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	6a3a      	ldr	r2, [r7, #32]
 800a0cc:	3201      	adds	r2, #1
 800a0ce:	7812      	ldrb	r2, [r2, #0]
 800a0d0:	0212      	lsls	r2, r2, #8
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	6a3a      	ldr	r2, [r7, #32]
 800a0d6:	7812      	ldrb	r2, [r2, #0]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d102      	bne.n	800a0e8 <f_getfree+0x170>
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	623b      	str	r3, [r7, #32]
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	3b04      	subs	r3, #4
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1a9      	bne.n	800a054 <f_getfree+0xdc>
 800a100:	e000      	b.n	800a104 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800a102:	bf00      	nop
			}
			fs->free_clust = n;
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a10a:	3310      	adds	r3, #16
 800a10c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10e:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a116:	3305      	adds	r3, #5
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	f043 0301 	orr.w	r3, r3, #1
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a126:	3305      	adds	r3, #5
 800a128:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12e:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800a130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800a134:	4618      	mov	r0, r3
 800a136:	3738      	adds	r7, #56	; 0x38
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a150:	e01b      	b.n	800a18a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a152:	f107 0310 	add.w	r3, r7, #16
 800a156:	f107 0114 	add.w	r1, r7, #20
 800a15a:	2201      	movs	r2, #1
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7fe fe45 	bl	8008dec <f_read>
		if (rc != 1) break;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d116      	bne.n	800a196 <f_gets+0x5a>
		c = s[0];
 800a168:	7d3b      	ldrb	r3, [r7, #20]
 800a16a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	2b0d      	cmp	r3, #13
 800a170:	d100      	bne.n	800a174 <f_gets+0x38>
 800a172:	e00a      	b.n	800a18a <f_gets+0x4e>
		*p++ = c;
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	61ba      	str	r2, [r7, #24]
 800a17a:	7dfa      	ldrb	r2, [r7, #23]
 800a17c:	701a      	strb	r2, [r3, #0]
		n++;
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	3301      	adds	r3, #1
 800a182:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a184:	7dfb      	ldrb	r3, [r7, #23]
 800a186:	2b0a      	cmp	r3, #10
 800a188:	d007      	beq.n	800a19a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	429a      	cmp	r2, r3
 800a192:	dbde      	blt.n	800a152 <f_gets+0x16>
 800a194:	e002      	b.n	800a19c <f_gets+0x60>
		if (rc != 1) break;
 800a196:	bf00      	nop
 800a198:	e000      	b.n	800a19c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a19a:	bf00      	nop
	}
	*p = 0;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <f_gets+0x70>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	e000      	b.n	800a1ae <f_gets+0x72>
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	2b0a      	cmp	r3, #10
 800a1c6:	d103      	bne.n	800a1d0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a1c8:	210d      	movs	r1, #13
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff fff3 	bl	800a1b6 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	db25      	blt.n	800a228 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	60fa      	str	r2, [r7, #12]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	78fa      	ldrb	r2, [r7, #3]
 800a1e8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b3c      	cmp	r3, #60	; 0x3c
 800a1ee:	dd12      	ble.n	800a216 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f103 010c 	add.w	r1, r3, #12
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	f107 0308 	add.w	r3, r7, #8
 800a200:	f7ff f80a 	bl	8009218 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d101      	bne.n	800a210 <putc_bfd+0x5a>
 800a20c:	2300      	movs	r3, #0
 800a20e:	e001      	b.n	800a214 <putc_bfd+0x5e>
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	609a      	str	r2, [r3, #8]
 800a226:	e000      	b.n	800a22a <putc_bfd+0x74>
	if (i < 0) return;
 800a228:	bf00      	nop
}
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a230:	b590      	push	{r4, r7, lr}
 800a232:	b097      	sub	sp, #92	; 0x5c
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	613b      	str	r3, [r7, #16]
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800a246:	e009      	b.n	800a25c <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	1c5a      	adds	r2, r3, #1
 800a24c:	607a      	str	r2, [r7, #4]
 800a24e:	781a      	ldrb	r2, [r3, #0]
 800a250:	f107 030c 	add.w	r3, r7, #12
 800a254:	4611      	mov	r1, r2
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff ffad 	bl	800a1b6 <putc_bfd>
	while (*str)			/* Put the string */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1f1      	bne.n	800a248 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	db15      	blt.n	800a296 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	461c      	mov	r4, r3
 800a270:	f107 0208 	add.w	r2, r7, #8
 800a274:	f107 030c 	add.w	r3, r7, #12
 800a278:	f103 010c 	add.w	r1, r3, #12
 800a27c:	4613      	mov	r3, r2
 800a27e:	4622      	mov	r2, r4
 800a280:	f7fe ffca 	bl	8009218 <f_write>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d105      	bne.n	800a296 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	4293      	cmp	r3, r2
 800a290:	d101      	bne.n	800a296 <f_puts+0x66>
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	e001      	b.n	800a29a <f_puts+0x6a>
	return EOF;
 800a296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	375c      	adds	r7, #92	; 0x5c
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd90      	pop	{r4, r7, pc}
	...

0800a2a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a2ba:	4b1f      	ldr	r3, [pc, #124]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2bc:	7a5b      	ldrb	r3, [r3, #9]
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d831      	bhi.n	800a328 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2c4:	4b1c      	ldr	r3, [pc, #112]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2c6:	7a5b      	ldrb	r3, [r3, #9]
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	4b1a      	ldr	r3, [pc, #104]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a2d2:	4b19      	ldr	r3, [pc, #100]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2d4:	7a5b      	ldrb	r3, [r3, #9]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	4a17      	ldr	r2, [pc, #92]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a2e2:	4b15      	ldr	r3, [pc, #84]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2e4:	7a5b      	ldrb	r3, [r3, #9]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4b13      	ldr	r3, [pc, #76]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2ec:	4413      	add	r3, r2
 800a2ee:	79fa      	ldrb	r2, [r7, #7]
 800a2f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2f2:	4b11      	ldr	r3, [pc, #68]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2f4:	7a5b      	ldrb	r3, [r3, #9]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	b2d1      	uxtb	r1, r2
 800a2fc:	4a0e      	ldr	r2, [pc, #56]	; (800a338 <FATFS_LinkDriverEx+0x94>)
 800a2fe:	7251      	strb	r1, [r2, #9]
 800a300:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a302:	7dbb      	ldrb	r3, [r7, #22]
 800a304:	3330      	adds	r3, #48	; 0x30
 800a306:	b2da      	uxtb	r2, r3
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	3301      	adds	r3, #1
 800a310:	223a      	movs	r2, #58	; 0x3a
 800a312:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	3302      	adds	r3, #2
 800a318:	222f      	movs	r2, #47	; 0x2f
 800a31a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3303      	adds	r3, #3
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a328:	7dfb      	ldrb	r3, [r7, #23]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	371c      	adds	r7, #28
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	200002d4 	.word	0x200002d4

0800a33c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a346:	2200      	movs	r2, #0
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff ffaa 	bl	800a2a4 <FATFS_LinkDriverEx>
 800a350:	4603      	mov	r3, r0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a368:	88fb      	ldrh	r3, [r7, #6]
 800a36a:	2b7f      	cmp	r3, #127	; 0x7f
 800a36c:	d802      	bhi.n	800a374 <ff_convert+0x18>
		c = chr;
 800a36e:	88fb      	ldrh	r3, [r7, #6]
 800a370:	81fb      	strh	r3, [r7, #14]
 800a372:	e025      	b.n	800a3c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00b      	beq.n	800a392 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a37a:	88fb      	ldrh	r3, [r7, #6]
 800a37c:	2bff      	cmp	r3, #255	; 0xff
 800a37e:	d805      	bhi.n	800a38c <ff_convert+0x30>
 800a380:	88fb      	ldrh	r3, [r7, #6]
 800a382:	3b80      	subs	r3, #128	; 0x80
 800a384:	4a12      	ldr	r2, [pc, #72]	; (800a3d0 <ff_convert+0x74>)
 800a386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a38a:	e000      	b.n	800a38e <ff_convert+0x32>
 800a38c:	2300      	movs	r3, #0
 800a38e:	81fb      	strh	r3, [r7, #14]
 800a390:	e016      	b.n	800a3c0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800a392:	2300      	movs	r3, #0
 800a394:	81fb      	strh	r3, [r7, #14]
 800a396:	e009      	b.n	800a3ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	4a0d      	ldr	r2, [pc, #52]	; (800a3d0 <ff_convert+0x74>)
 800a39c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3a0:	88fa      	ldrh	r2, [r7, #6]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d006      	beq.n	800a3b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a3a6:	89fb      	ldrh	r3, [r7, #14]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	81fb      	strh	r3, [r7, #14]
 800a3ac:	89fb      	ldrh	r3, [r7, #14]
 800a3ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a3b0:	d9f2      	bls.n	800a398 <ff_convert+0x3c>
 800a3b2:	e000      	b.n	800a3b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a3b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a3b6:	89fb      	ldrh	r3, [r7, #14]
 800a3b8:	3380      	adds	r3, #128	; 0x80
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	0800b184 	.word	0x0800b184

0800a3d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]
 800a3e2:	e002      	b.n	800a3ea <ff_wtoupper+0x16>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	60fb      	str	r3, [r7, #12]
 800a3ea:	4a0f      	ldr	r2, [pc, #60]	; (800a428 <ff_wtoupper+0x54>)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d006      	beq.n	800a404 <ff_wtoupper+0x30>
 800a3f6:	4a0c      	ldr	r2, [pc, #48]	; (800a428 <ff_wtoupper+0x54>)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3fe:	88fa      	ldrh	r2, [r7, #6]
 800a400:	429a      	cmp	r2, r3
 800a402:	d1ef      	bne.n	800a3e4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800a404:	4a08      	ldr	r2, [pc, #32]	; (800a428 <ff_wtoupper+0x54>)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <ff_wtoupper+0x46>
 800a410:	4a06      	ldr	r2, [pc, #24]	; (800a42c <ff_wtoupper+0x58>)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a418:	e000      	b.n	800a41c <ff_wtoupper+0x48>
 800a41a:	88fb      	ldrh	r3, [r7, #6]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	0800b284 	.word	0x0800b284
 800a42c:	0800b464 	.word	0x0800b464

0800a430 <__errno>:
 800a430:	4b01      	ldr	r3, [pc, #4]	; (800a438 <__errno+0x8>)
 800a432:	6818      	ldr	r0, [r3, #0]
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000024 	.word	0x20000024

0800a43c <__libc_init_array>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	4d0d      	ldr	r5, [pc, #52]	; (800a474 <__libc_init_array+0x38>)
 800a440:	4c0d      	ldr	r4, [pc, #52]	; (800a478 <__libc_init_array+0x3c>)
 800a442:	1b64      	subs	r4, r4, r5
 800a444:	10a4      	asrs	r4, r4, #2
 800a446:	2600      	movs	r6, #0
 800a448:	42a6      	cmp	r6, r4
 800a44a:	d109      	bne.n	800a460 <__libc_init_array+0x24>
 800a44c:	4d0b      	ldr	r5, [pc, #44]	; (800a47c <__libc_init_array+0x40>)
 800a44e:	4c0c      	ldr	r4, [pc, #48]	; (800a480 <__libc_init_array+0x44>)
 800a450:	f000 fc4e 	bl	800acf0 <_init>
 800a454:	1b64      	subs	r4, r4, r5
 800a456:	10a4      	asrs	r4, r4, #2
 800a458:	2600      	movs	r6, #0
 800a45a:	42a6      	cmp	r6, r4
 800a45c:	d105      	bne.n	800a46a <__libc_init_array+0x2e>
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	f855 3b04 	ldr.w	r3, [r5], #4
 800a464:	4798      	blx	r3
 800a466:	3601      	adds	r6, #1
 800a468:	e7ee      	b.n	800a448 <__libc_init_array+0xc>
 800a46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46e:	4798      	blx	r3
 800a470:	3601      	adds	r6, #1
 800a472:	e7f2      	b.n	800a45a <__libc_init_array+0x1e>
 800a474:	0800b678 	.word	0x0800b678
 800a478:	0800b678 	.word	0x0800b678
 800a47c:	0800b678 	.word	0x0800b678
 800a480:	0800b67c 	.word	0x0800b67c

0800a484 <memcpy>:
 800a484:	440a      	add	r2, r1
 800a486:	4291      	cmp	r1, r2
 800a488:	f100 33ff 	add.w	r3, r0, #4294967295
 800a48c:	d100      	bne.n	800a490 <memcpy+0xc>
 800a48e:	4770      	bx	lr
 800a490:	b510      	push	{r4, lr}
 800a492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a49a:	4291      	cmp	r1, r2
 800a49c:	d1f9      	bne.n	800a492 <memcpy+0xe>
 800a49e:	bd10      	pop	{r4, pc}

0800a4a0 <memset>:
 800a4a0:	4402      	add	r2, r0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d100      	bne.n	800a4aa <memset+0xa>
 800a4a8:	4770      	bx	lr
 800a4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ae:	e7f9      	b.n	800a4a4 <memset+0x4>

0800a4b0 <siprintf>:
 800a4b0:	b40e      	push	{r1, r2, r3}
 800a4b2:	b500      	push	{lr}
 800a4b4:	b09c      	sub	sp, #112	; 0x70
 800a4b6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4b8:	9002      	str	r0, [sp, #8]
 800a4ba:	9006      	str	r0, [sp, #24]
 800a4bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4c0:	4809      	ldr	r0, [pc, #36]	; (800a4e8 <siprintf+0x38>)
 800a4c2:	9107      	str	r1, [sp, #28]
 800a4c4:	9104      	str	r1, [sp, #16]
 800a4c6:	4909      	ldr	r1, [pc, #36]	; (800a4ec <siprintf+0x3c>)
 800a4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4cc:	9105      	str	r1, [sp, #20]
 800a4ce:	6800      	ldr	r0, [r0, #0]
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	a902      	add	r1, sp, #8
 800a4d4:	f000 f868 	bl	800a5a8 <_svfiprintf_r>
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	b01c      	add	sp, #112	; 0x70
 800a4e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4e4:	b003      	add	sp, #12
 800a4e6:	4770      	bx	lr
 800a4e8:	20000024 	.word	0x20000024
 800a4ec:	ffff0208 	.word	0xffff0208

0800a4f0 <__ssputs_r>:
 800a4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f4:	688e      	ldr	r6, [r1, #8]
 800a4f6:	429e      	cmp	r6, r3
 800a4f8:	4682      	mov	sl, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	4690      	mov	r8, r2
 800a4fe:	461f      	mov	r7, r3
 800a500:	d838      	bhi.n	800a574 <__ssputs_r+0x84>
 800a502:	898a      	ldrh	r2, [r1, #12]
 800a504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a508:	d032      	beq.n	800a570 <__ssputs_r+0x80>
 800a50a:	6825      	ldr	r5, [r4, #0]
 800a50c:	6909      	ldr	r1, [r1, #16]
 800a50e:	eba5 0901 	sub.w	r9, r5, r1
 800a512:	6965      	ldr	r5, [r4, #20]
 800a514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a51c:	3301      	adds	r3, #1
 800a51e:	444b      	add	r3, r9
 800a520:	106d      	asrs	r5, r5, #1
 800a522:	429d      	cmp	r5, r3
 800a524:	bf38      	it	cc
 800a526:	461d      	movcc	r5, r3
 800a528:	0553      	lsls	r3, r2, #21
 800a52a:	d531      	bpl.n	800a590 <__ssputs_r+0xa0>
 800a52c:	4629      	mov	r1, r5
 800a52e:	f000 fb39 	bl	800aba4 <_malloc_r>
 800a532:	4606      	mov	r6, r0
 800a534:	b950      	cbnz	r0, 800a54c <__ssputs_r+0x5c>
 800a536:	230c      	movs	r3, #12
 800a538:	f8ca 3000 	str.w	r3, [sl]
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54c:	6921      	ldr	r1, [r4, #16]
 800a54e:	464a      	mov	r2, r9
 800a550:	f7ff ff98 	bl	800a484 <memcpy>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	6126      	str	r6, [r4, #16]
 800a562:	6165      	str	r5, [r4, #20]
 800a564:	444e      	add	r6, r9
 800a566:	eba5 0509 	sub.w	r5, r5, r9
 800a56a:	6026      	str	r6, [r4, #0]
 800a56c:	60a5      	str	r5, [r4, #8]
 800a56e:	463e      	mov	r6, r7
 800a570:	42be      	cmp	r6, r7
 800a572:	d900      	bls.n	800a576 <__ssputs_r+0x86>
 800a574:	463e      	mov	r6, r7
 800a576:	4632      	mov	r2, r6
 800a578:	6820      	ldr	r0, [r4, #0]
 800a57a:	4641      	mov	r1, r8
 800a57c:	f000 faa8 	bl	800aad0 <memmove>
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	6822      	ldr	r2, [r4, #0]
 800a584:	1b9b      	subs	r3, r3, r6
 800a586:	4432      	add	r2, r6
 800a588:	60a3      	str	r3, [r4, #8]
 800a58a:	6022      	str	r2, [r4, #0]
 800a58c:	2000      	movs	r0, #0
 800a58e:	e7db      	b.n	800a548 <__ssputs_r+0x58>
 800a590:	462a      	mov	r2, r5
 800a592:	f000 fb61 	bl	800ac58 <_realloc_r>
 800a596:	4606      	mov	r6, r0
 800a598:	2800      	cmp	r0, #0
 800a59a:	d1e1      	bne.n	800a560 <__ssputs_r+0x70>
 800a59c:	6921      	ldr	r1, [r4, #16]
 800a59e:	4650      	mov	r0, sl
 800a5a0:	f000 fab0 	bl	800ab04 <_free_r>
 800a5a4:	e7c7      	b.n	800a536 <__ssputs_r+0x46>
	...

0800a5a8 <_svfiprintf_r>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	4698      	mov	r8, r3
 800a5ae:	898b      	ldrh	r3, [r1, #12]
 800a5b0:	061b      	lsls	r3, r3, #24
 800a5b2:	b09d      	sub	sp, #116	; 0x74
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	460d      	mov	r5, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	d50e      	bpl.n	800a5da <_svfiprintf_r+0x32>
 800a5bc:	690b      	ldr	r3, [r1, #16]
 800a5be:	b963      	cbnz	r3, 800a5da <_svfiprintf_r+0x32>
 800a5c0:	2140      	movs	r1, #64	; 0x40
 800a5c2:	f000 faef 	bl	800aba4 <_malloc_r>
 800a5c6:	6028      	str	r0, [r5, #0]
 800a5c8:	6128      	str	r0, [r5, #16]
 800a5ca:	b920      	cbnz	r0, 800a5d6 <_svfiprintf_r+0x2e>
 800a5cc:	230c      	movs	r3, #12
 800a5ce:	603b      	str	r3, [r7, #0]
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d4:	e0d1      	b.n	800a77a <_svfiprintf_r+0x1d2>
 800a5d6:	2340      	movs	r3, #64	; 0x40
 800a5d8:	616b      	str	r3, [r5, #20]
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5de:	2320      	movs	r3, #32
 800a5e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5e8:	2330      	movs	r3, #48	; 0x30
 800a5ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a794 <_svfiprintf_r+0x1ec>
 800a5ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5f2:	f04f 0901 	mov.w	r9, #1
 800a5f6:	4623      	mov	r3, r4
 800a5f8:	469a      	mov	sl, r3
 800a5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5fe:	b10a      	cbz	r2, 800a604 <_svfiprintf_r+0x5c>
 800a600:	2a25      	cmp	r2, #37	; 0x25
 800a602:	d1f9      	bne.n	800a5f8 <_svfiprintf_r+0x50>
 800a604:	ebba 0b04 	subs.w	fp, sl, r4
 800a608:	d00b      	beq.n	800a622 <_svfiprintf_r+0x7a>
 800a60a:	465b      	mov	r3, fp
 800a60c:	4622      	mov	r2, r4
 800a60e:	4629      	mov	r1, r5
 800a610:	4638      	mov	r0, r7
 800a612:	f7ff ff6d 	bl	800a4f0 <__ssputs_r>
 800a616:	3001      	adds	r0, #1
 800a618:	f000 80aa 	beq.w	800a770 <_svfiprintf_r+0x1c8>
 800a61c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a61e:	445a      	add	r2, fp
 800a620:	9209      	str	r2, [sp, #36]	; 0x24
 800a622:	f89a 3000 	ldrb.w	r3, [sl]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 80a2 	beq.w	800a770 <_svfiprintf_r+0x1c8>
 800a62c:	2300      	movs	r3, #0
 800a62e:	f04f 32ff 	mov.w	r2, #4294967295
 800a632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a636:	f10a 0a01 	add.w	sl, sl, #1
 800a63a:	9304      	str	r3, [sp, #16]
 800a63c:	9307      	str	r3, [sp, #28]
 800a63e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a642:	931a      	str	r3, [sp, #104]	; 0x68
 800a644:	4654      	mov	r4, sl
 800a646:	2205      	movs	r2, #5
 800a648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64c:	4851      	ldr	r0, [pc, #324]	; (800a794 <_svfiprintf_r+0x1ec>)
 800a64e:	f7f5 fdc7 	bl	80001e0 <memchr>
 800a652:	9a04      	ldr	r2, [sp, #16]
 800a654:	b9d8      	cbnz	r0, 800a68e <_svfiprintf_r+0xe6>
 800a656:	06d0      	lsls	r0, r2, #27
 800a658:	bf44      	itt	mi
 800a65a:	2320      	movmi	r3, #32
 800a65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a660:	0711      	lsls	r1, r2, #28
 800a662:	bf44      	itt	mi
 800a664:	232b      	movmi	r3, #43	; 0x2b
 800a666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a66a:	f89a 3000 	ldrb.w	r3, [sl]
 800a66e:	2b2a      	cmp	r3, #42	; 0x2a
 800a670:	d015      	beq.n	800a69e <_svfiprintf_r+0xf6>
 800a672:	9a07      	ldr	r2, [sp, #28]
 800a674:	4654      	mov	r4, sl
 800a676:	2000      	movs	r0, #0
 800a678:	f04f 0c0a 	mov.w	ip, #10
 800a67c:	4621      	mov	r1, r4
 800a67e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a682:	3b30      	subs	r3, #48	; 0x30
 800a684:	2b09      	cmp	r3, #9
 800a686:	d94e      	bls.n	800a726 <_svfiprintf_r+0x17e>
 800a688:	b1b0      	cbz	r0, 800a6b8 <_svfiprintf_r+0x110>
 800a68a:	9207      	str	r2, [sp, #28]
 800a68c:	e014      	b.n	800a6b8 <_svfiprintf_r+0x110>
 800a68e:	eba0 0308 	sub.w	r3, r0, r8
 800a692:	fa09 f303 	lsl.w	r3, r9, r3
 800a696:	4313      	orrs	r3, r2
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	46a2      	mov	sl, r4
 800a69c:	e7d2      	b.n	800a644 <_svfiprintf_r+0x9c>
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	1d19      	adds	r1, r3, #4
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	9103      	str	r1, [sp, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	bfbb      	ittet	lt
 800a6aa:	425b      	neglt	r3, r3
 800a6ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a6b0:	9307      	strge	r3, [sp, #28]
 800a6b2:	9307      	strlt	r3, [sp, #28]
 800a6b4:	bfb8      	it	lt
 800a6b6:	9204      	strlt	r2, [sp, #16]
 800a6b8:	7823      	ldrb	r3, [r4, #0]
 800a6ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a6bc:	d10c      	bne.n	800a6d8 <_svfiprintf_r+0x130>
 800a6be:	7863      	ldrb	r3, [r4, #1]
 800a6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c2:	d135      	bne.n	800a730 <_svfiprintf_r+0x188>
 800a6c4:	9b03      	ldr	r3, [sp, #12]
 800a6c6:	1d1a      	adds	r2, r3, #4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	9203      	str	r2, [sp, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	bfb8      	it	lt
 800a6d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6d4:	3402      	adds	r4, #2
 800a6d6:	9305      	str	r3, [sp, #20]
 800a6d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7a4 <_svfiprintf_r+0x1fc>
 800a6dc:	7821      	ldrb	r1, [r4, #0]
 800a6de:	2203      	movs	r2, #3
 800a6e0:	4650      	mov	r0, sl
 800a6e2:	f7f5 fd7d 	bl	80001e0 <memchr>
 800a6e6:	b140      	cbz	r0, 800a6fa <_svfiprintf_r+0x152>
 800a6e8:	2340      	movs	r3, #64	; 0x40
 800a6ea:	eba0 000a 	sub.w	r0, r0, sl
 800a6ee:	fa03 f000 	lsl.w	r0, r3, r0
 800a6f2:	9b04      	ldr	r3, [sp, #16]
 800a6f4:	4303      	orrs	r3, r0
 800a6f6:	3401      	adds	r4, #1
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fe:	4826      	ldr	r0, [pc, #152]	; (800a798 <_svfiprintf_r+0x1f0>)
 800a700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a704:	2206      	movs	r2, #6
 800a706:	f7f5 fd6b 	bl	80001e0 <memchr>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d038      	beq.n	800a780 <_svfiprintf_r+0x1d8>
 800a70e:	4b23      	ldr	r3, [pc, #140]	; (800a79c <_svfiprintf_r+0x1f4>)
 800a710:	bb1b      	cbnz	r3, 800a75a <_svfiprintf_r+0x1b2>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	3307      	adds	r3, #7
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	3308      	adds	r3, #8
 800a71c:	9303      	str	r3, [sp, #12]
 800a71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a720:	4433      	add	r3, r6
 800a722:	9309      	str	r3, [sp, #36]	; 0x24
 800a724:	e767      	b.n	800a5f6 <_svfiprintf_r+0x4e>
 800a726:	fb0c 3202 	mla	r2, ip, r2, r3
 800a72a:	460c      	mov	r4, r1
 800a72c:	2001      	movs	r0, #1
 800a72e:	e7a5      	b.n	800a67c <_svfiprintf_r+0xd4>
 800a730:	2300      	movs	r3, #0
 800a732:	3401      	adds	r4, #1
 800a734:	9305      	str	r3, [sp, #20]
 800a736:	4619      	mov	r1, r3
 800a738:	f04f 0c0a 	mov.w	ip, #10
 800a73c:	4620      	mov	r0, r4
 800a73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a742:	3a30      	subs	r2, #48	; 0x30
 800a744:	2a09      	cmp	r2, #9
 800a746:	d903      	bls.n	800a750 <_svfiprintf_r+0x1a8>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d0c5      	beq.n	800a6d8 <_svfiprintf_r+0x130>
 800a74c:	9105      	str	r1, [sp, #20]
 800a74e:	e7c3      	b.n	800a6d8 <_svfiprintf_r+0x130>
 800a750:	fb0c 2101 	mla	r1, ip, r1, r2
 800a754:	4604      	mov	r4, r0
 800a756:	2301      	movs	r3, #1
 800a758:	e7f0      	b.n	800a73c <_svfiprintf_r+0x194>
 800a75a:	ab03      	add	r3, sp, #12
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	462a      	mov	r2, r5
 800a760:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <_svfiprintf_r+0x1f8>)
 800a762:	a904      	add	r1, sp, #16
 800a764:	4638      	mov	r0, r7
 800a766:	f3af 8000 	nop.w
 800a76a:	1c42      	adds	r2, r0, #1
 800a76c:	4606      	mov	r6, r0
 800a76e:	d1d6      	bne.n	800a71e <_svfiprintf_r+0x176>
 800a770:	89ab      	ldrh	r3, [r5, #12]
 800a772:	065b      	lsls	r3, r3, #25
 800a774:	f53f af2c 	bmi.w	800a5d0 <_svfiprintf_r+0x28>
 800a778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a77a:	b01d      	add	sp, #116	; 0x74
 800a77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a780:	ab03      	add	r3, sp, #12
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	462a      	mov	r2, r5
 800a786:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <_svfiprintf_r+0x1f8>)
 800a788:	a904      	add	r1, sp, #16
 800a78a:	4638      	mov	r0, r7
 800a78c:	f000 f87a 	bl	800a884 <_printf_i>
 800a790:	e7eb      	b.n	800a76a <_svfiprintf_r+0x1c2>
 800a792:	bf00      	nop
 800a794:	0800b644 	.word	0x0800b644
 800a798:	0800b64e 	.word	0x0800b64e
 800a79c:	00000000 	.word	0x00000000
 800a7a0:	0800a4f1 	.word	0x0800a4f1
 800a7a4:	0800b64a 	.word	0x0800b64a

0800a7a8 <_printf_common>:
 800a7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	4616      	mov	r6, r2
 800a7ae:	4699      	mov	r9, r3
 800a7b0:	688a      	ldr	r2, [r1, #8]
 800a7b2:	690b      	ldr	r3, [r1, #16]
 800a7b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	bfb8      	it	lt
 800a7bc:	4613      	movlt	r3, r2
 800a7be:	6033      	str	r3, [r6, #0]
 800a7c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b10a      	cbz	r2, 800a7ce <_printf_common+0x26>
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	0699      	lsls	r1, r3, #26
 800a7d2:	bf42      	ittt	mi
 800a7d4:	6833      	ldrmi	r3, [r6, #0]
 800a7d6:	3302      	addmi	r3, #2
 800a7d8:	6033      	strmi	r3, [r6, #0]
 800a7da:	6825      	ldr	r5, [r4, #0]
 800a7dc:	f015 0506 	ands.w	r5, r5, #6
 800a7e0:	d106      	bne.n	800a7f0 <_printf_common+0x48>
 800a7e2:	f104 0a19 	add.w	sl, r4, #25
 800a7e6:	68e3      	ldr	r3, [r4, #12]
 800a7e8:	6832      	ldr	r2, [r6, #0]
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	42ab      	cmp	r3, r5
 800a7ee:	dc26      	bgt.n	800a83e <_printf_common+0x96>
 800a7f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7f4:	1e13      	subs	r3, r2, #0
 800a7f6:	6822      	ldr	r2, [r4, #0]
 800a7f8:	bf18      	it	ne
 800a7fa:	2301      	movne	r3, #1
 800a7fc:	0692      	lsls	r2, r2, #26
 800a7fe:	d42b      	bmi.n	800a858 <_printf_common+0xb0>
 800a800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a804:	4649      	mov	r1, r9
 800a806:	4638      	mov	r0, r7
 800a808:	47c0      	blx	r8
 800a80a:	3001      	adds	r0, #1
 800a80c:	d01e      	beq.n	800a84c <_printf_common+0xa4>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	68e5      	ldr	r5, [r4, #12]
 800a812:	6832      	ldr	r2, [r6, #0]
 800a814:	f003 0306 	and.w	r3, r3, #6
 800a818:	2b04      	cmp	r3, #4
 800a81a:	bf08      	it	eq
 800a81c:	1aad      	subeq	r5, r5, r2
 800a81e:	68a3      	ldr	r3, [r4, #8]
 800a820:	6922      	ldr	r2, [r4, #16]
 800a822:	bf0c      	ite	eq
 800a824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a828:	2500      	movne	r5, #0
 800a82a:	4293      	cmp	r3, r2
 800a82c:	bfc4      	itt	gt
 800a82e:	1a9b      	subgt	r3, r3, r2
 800a830:	18ed      	addgt	r5, r5, r3
 800a832:	2600      	movs	r6, #0
 800a834:	341a      	adds	r4, #26
 800a836:	42b5      	cmp	r5, r6
 800a838:	d11a      	bne.n	800a870 <_printf_common+0xc8>
 800a83a:	2000      	movs	r0, #0
 800a83c:	e008      	b.n	800a850 <_printf_common+0xa8>
 800a83e:	2301      	movs	r3, #1
 800a840:	4652      	mov	r2, sl
 800a842:	4649      	mov	r1, r9
 800a844:	4638      	mov	r0, r7
 800a846:	47c0      	blx	r8
 800a848:	3001      	adds	r0, #1
 800a84a:	d103      	bne.n	800a854 <_printf_common+0xac>
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a854:	3501      	adds	r5, #1
 800a856:	e7c6      	b.n	800a7e6 <_printf_common+0x3e>
 800a858:	18e1      	adds	r1, r4, r3
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	2030      	movs	r0, #48	; 0x30
 800a85e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a862:	4422      	add	r2, r4
 800a864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a86c:	3302      	adds	r3, #2
 800a86e:	e7c7      	b.n	800a800 <_printf_common+0x58>
 800a870:	2301      	movs	r3, #1
 800a872:	4622      	mov	r2, r4
 800a874:	4649      	mov	r1, r9
 800a876:	4638      	mov	r0, r7
 800a878:	47c0      	blx	r8
 800a87a:	3001      	adds	r0, #1
 800a87c:	d0e6      	beq.n	800a84c <_printf_common+0xa4>
 800a87e:	3601      	adds	r6, #1
 800a880:	e7d9      	b.n	800a836 <_printf_common+0x8e>
	...

0800a884 <_printf_i>:
 800a884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	460c      	mov	r4, r1
 800a88a:	4691      	mov	r9, r2
 800a88c:	7e27      	ldrb	r7, [r4, #24]
 800a88e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a890:	2f78      	cmp	r7, #120	; 0x78
 800a892:	4680      	mov	r8, r0
 800a894:	469a      	mov	sl, r3
 800a896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a89a:	d807      	bhi.n	800a8ac <_printf_i+0x28>
 800a89c:	2f62      	cmp	r7, #98	; 0x62
 800a89e:	d80a      	bhi.n	800a8b6 <_printf_i+0x32>
 800a8a0:	2f00      	cmp	r7, #0
 800a8a2:	f000 80d8 	beq.w	800aa56 <_printf_i+0x1d2>
 800a8a6:	2f58      	cmp	r7, #88	; 0x58
 800a8a8:	f000 80a3 	beq.w	800a9f2 <_printf_i+0x16e>
 800a8ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a8b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8b4:	e03a      	b.n	800a92c <_printf_i+0xa8>
 800a8b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ba:	2b15      	cmp	r3, #21
 800a8bc:	d8f6      	bhi.n	800a8ac <_printf_i+0x28>
 800a8be:	a001      	add	r0, pc, #4	; (adr r0, 800a8c4 <_printf_i+0x40>)
 800a8c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a8c4:	0800a91d 	.word	0x0800a91d
 800a8c8:	0800a931 	.word	0x0800a931
 800a8cc:	0800a8ad 	.word	0x0800a8ad
 800a8d0:	0800a8ad 	.word	0x0800a8ad
 800a8d4:	0800a8ad 	.word	0x0800a8ad
 800a8d8:	0800a8ad 	.word	0x0800a8ad
 800a8dc:	0800a931 	.word	0x0800a931
 800a8e0:	0800a8ad 	.word	0x0800a8ad
 800a8e4:	0800a8ad 	.word	0x0800a8ad
 800a8e8:	0800a8ad 	.word	0x0800a8ad
 800a8ec:	0800a8ad 	.word	0x0800a8ad
 800a8f0:	0800aa3d 	.word	0x0800aa3d
 800a8f4:	0800a961 	.word	0x0800a961
 800a8f8:	0800aa1f 	.word	0x0800aa1f
 800a8fc:	0800a8ad 	.word	0x0800a8ad
 800a900:	0800a8ad 	.word	0x0800a8ad
 800a904:	0800aa5f 	.word	0x0800aa5f
 800a908:	0800a8ad 	.word	0x0800a8ad
 800a90c:	0800a961 	.word	0x0800a961
 800a910:	0800a8ad 	.word	0x0800a8ad
 800a914:	0800a8ad 	.word	0x0800a8ad
 800a918:	0800aa27 	.word	0x0800aa27
 800a91c:	680b      	ldr	r3, [r1, #0]
 800a91e:	1d1a      	adds	r2, r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	600a      	str	r2, [r1, #0]
 800a924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a92c:	2301      	movs	r3, #1
 800a92e:	e0a3      	b.n	800aa78 <_printf_i+0x1f4>
 800a930:	6825      	ldr	r5, [r4, #0]
 800a932:	6808      	ldr	r0, [r1, #0]
 800a934:	062e      	lsls	r6, r5, #24
 800a936:	f100 0304 	add.w	r3, r0, #4
 800a93a:	d50a      	bpl.n	800a952 <_printf_i+0xce>
 800a93c:	6805      	ldr	r5, [r0, #0]
 800a93e:	600b      	str	r3, [r1, #0]
 800a940:	2d00      	cmp	r5, #0
 800a942:	da03      	bge.n	800a94c <_printf_i+0xc8>
 800a944:	232d      	movs	r3, #45	; 0x2d
 800a946:	426d      	negs	r5, r5
 800a948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a94c:	485e      	ldr	r0, [pc, #376]	; (800aac8 <_printf_i+0x244>)
 800a94e:	230a      	movs	r3, #10
 800a950:	e019      	b.n	800a986 <_printf_i+0x102>
 800a952:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a956:	6805      	ldr	r5, [r0, #0]
 800a958:	600b      	str	r3, [r1, #0]
 800a95a:	bf18      	it	ne
 800a95c:	b22d      	sxthne	r5, r5
 800a95e:	e7ef      	b.n	800a940 <_printf_i+0xbc>
 800a960:	680b      	ldr	r3, [r1, #0]
 800a962:	6825      	ldr	r5, [r4, #0]
 800a964:	1d18      	adds	r0, r3, #4
 800a966:	6008      	str	r0, [r1, #0]
 800a968:	0628      	lsls	r0, r5, #24
 800a96a:	d501      	bpl.n	800a970 <_printf_i+0xec>
 800a96c:	681d      	ldr	r5, [r3, #0]
 800a96e:	e002      	b.n	800a976 <_printf_i+0xf2>
 800a970:	0669      	lsls	r1, r5, #25
 800a972:	d5fb      	bpl.n	800a96c <_printf_i+0xe8>
 800a974:	881d      	ldrh	r5, [r3, #0]
 800a976:	4854      	ldr	r0, [pc, #336]	; (800aac8 <_printf_i+0x244>)
 800a978:	2f6f      	cmp	r7, #111	; 0x6f
 800a97a:	bf0c      	ite	eq
 800a97c:	2308      	moveq	r3, #8
 800a97e:	230a      	movne	r3, #10
 800a980:	2100      	movs	r1, #0
 800a982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a986:	6866      	ldr	r6, [r4, #4]
 800a988:	60a6      	str	r6, [r4, #8]
 800a98a:	2e00      	cmp	r6, #0
 800a98c:	bfa2      	ittt	ge
 800a98e:	6821      	ldrge	r1, [r4, #0]
 800a990:	f021 0104 	bicge.w	r1, r1, #4
 800a994:	6021      	strge	r1, [r4, #0]
 800a996:	b90d      	cbnz	r5, 800a99c <_printf_i+0x118>
 800a998:	2e00      	cmp	r6, #0
 800a99a:	d04d      	beq.n	800aa38 <_printf_i+0x1b4>
 800a99c:	4616      	mov	r6, r2
 800a99e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9a2:	fb03 5711 	mls	r7, r3, r1, r5
 800a9a6:	5dc7      	ldrb	r7, [r0, r7]
 800a9a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9ac:	462f      	mov	r7, r5
 800a9ae:	42bb      	cmp	r3, r7
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	d9f4      	bls.n	800a99e <_printf_i+0x11a>
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d10b      	bne.n	800a9d0 <_printf_i+0x14c>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	07df      	lsls	r7, r3, #31
 800a9bc:	d508      	bpl.n	800a9d0 <_printf_i+0x14c>
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	6861      	ldr	r1, [r4, #4]
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	bfde      	ittt	le
 800a9c6:	2330      	movle	r3, #48	; 0x30
 800a9c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9d0:	1b92      	subs	r2, r2, r6
 800a9d2:	6122      	str	r2, [r4, #16]
 800a9d4:	f8cd a000 	str.w	sl, [sp]
 800a9d8:	464b      	mov	r3, r9
 800a9da:	aa03      	add	r2, sp, #12
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4640      	mov	r0, r8
 800a9e0:	f7ff fee2 	bl	800a7a8 <_printf_common>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d14c      	bne.n	800aa82 <_printf_i+0x1fe>
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	b004      	add	sp, #16
 800a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f2:	4835      	ldr	r0, [pc, #212]	; (800aac8 <_printf_i+0x244>)
 800a9f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	680e      	ldr	r6, [r1, #0]
 800a9fc:	061f      	lsls	r7, r3, #24
 800a9fe:	f856 5b04 	ldr.w	r5, [r6], #4
 800aa02:	600e      	str	r6, [r1, #0]
 800aa04:	d514      	bpl.n	800aa30 <_printf_i+0x1ac>
 800aa06:	07d9      	lsls	r1, r3, #31
 800aa08:	bf44      	itt	mi
 800aa0a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa0e:	6023      	strmi	r3, [r4, #0]
 800aa10:	b91d      	cbnz	r5, 800aa1a <_printf_i+0x196>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	f023 0320 	bic.w	r3, r3, #32
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	e7b0      	b.n	800a980 <_printf_i+0xfc>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	f043 0320 	orr.w	r3, r3, #32
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	2378      	movs	r3, #120	; 0x78
 800aa28:	4828      	ldr	r0, [pc, #160]	; (800aacc <_printf_i+0x248>)
 800aa2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa2e:	e7e3      	b.n	800a9f8 <_printf_i+0x174>
 800aa30:	065e      	lsls	r6, r3, #25
 800aa32:	bf48      	it	mi
 800aa34:	b2ad      	uxthmi	r5, r5
 800aa36:	e7e6      	b.n	800aa06 <_printf_i+0x182>
 800aa38:	4616      	mov	r6, r2
 800aa3a:	e7bb      	b.n	800a9b4 <_printf_i+0x130>
 800aa3c:	680b      	ldr	r3, [r1, #0]
 800aa3e:	6826      	ldr	r6, [r4, #0]
 800aa40:	6960      	ldr	r0, [r4, #20]
 800aa42:	1d1d      	adds	r5, r3, #4
 800aa44:	600d      	str	r5, [r1, #0]
 800aa46:	0635      	lsls	r5, r6, #24
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	d501      	bpl.n	800aa50 <_printf_i+0x1cc>
 800aa4c:	6018      	str	r0, [r3, #0]
 800aa4e:	e002      	b.n	800aa56 <_printf_i+0x1d2>
 800aa50:	0671      	lsls	r1, r6, #25
 800aa52:	d5fb      	bpl.n	800aa4c <_printf_i+0x1c8>
 800aa54:	8018      	strh	r0, [r3, #0]
 800aa56:	2300      	movs	r3, #0
 800aa58:	6123      	str	r3, [r4, #16]
 800aa5a:	4616      	mov	r6, r2
 800aa5c:	e7ba      	b.n	800a9d4 <_printf_i+0x150>
 800aa5e:	680b      	ldr	r3, [r1, #0]
 800aa60:	1d1a      	adds	r2, r3, #4
 800aa62:	600a      	str	r2, [r1, #0]
 800aa64:	681e      	ldr	r6, [r3, #0]
 800aa66:	6862      	ldr	r2, [r4, #4]
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7f5 fbb8 	bl	80001e0 <memchr>
 800aa70:	b108      	cbz	r0, 800aa76 <_printf_i+0x1f2>
 800aa72:	1b80      	subs	r0, r0, r6
 800aa74:	6060      	str	r0, [r4, #4]
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa80:	e7a8      	b.n	800a9d4 <_printf_i+0x150>
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	4632      	mov	r2, r6
 800aa86:	4649      	mov	r1, r9
 800aa88:	4640      	mov	r0, r8
 800aa8a:	47d0      	blx	sl
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d0ab      	beq.n	800a9e8 <_printf_i+0x164>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	079b      	lsls	r3, r3, #30
 800aa94:	d413      	bmi.n	800aabe <_printf_i+0x23a>
 800aa96:	68e0      	ldr	r0, [r4, #12]
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	4298      	cmp	r0, r3
 800aa9c:	bfb8      	it	lt
 800aa9e:	4618      	movlt	r0, r3
 800aaa0:	e7a4      	b.n	800a9ec <_printf_i+0x168>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	47d0      	blx	sl
 800aaac:	3001      	adds	r0, #1
 800aaae:	d09b      	beq.n	800a9e8 <_printf_i+0x164>
 800aab0:	3501      	adds	r5, #1
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	9903      	ldr	r1, [sp, #12]
 800aab6:	1a5b      	subs	r3, r3, r1
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	dcf2      	bgt.n	800aaa2 <_printf_i+0x21e>
 800aabc:	e7eb      	b.n	800aa96 <_printf_i+0x212>
 800aabe:	2500      	movs	r5, #0
 800aac0:	f104 0619 	add.w	r6, r4, #25
 800aac4:	e7f5      	b.n	800aab2 <_printf_i+0x22e>
 800aac6:	bf00      	nop
 800aac8:	0800b655 	.word	0x0800b655
 800aacc:	0800b666 	.word	0x0800b666

0800aad0 <memmove>:
 800aad0:	4288      	cmp	r0, r1
 800aad2:	b510      	push	{r4, lr}
 800aad4:	eb01 0402 	add.w	r4, r1, r2
 800aad8:	d902      	bls.n	800aae0 <memmove+0x10>
 800aada:	4284      	cmp	r4, r0
 800aadc:	4623      	mov	r3, r4
 800aade:	d807      	bhi.n	800aaf0 <memmove+0x20>
 800aae0:	1e43      	subs	r3, r0, #1
 800aae2:	42a1      	cmp	r1, r4
 800aae4:	d008      	beq.n	800aaf8 <memmove+0x28>
 800aae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaee:	e7f8      	b.n	800aae2 <memmove+0x12>
 800aaf0:	4402      	add	r2, r0
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	428a      	cmp	r2, r1
 800aaf6:	d100      	bne.n	800aafa <memmove+0x2a>
 800aaf8:	bd10      	pop	{r4, pc}
 800aafa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aafe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab02:	e7f7      	b.n	800aaf4 <memmove+0x24>

0800ab04 <_free_r>:
 800ab04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab06:	2900      	cmp	r1, #0
 800ab08:	d048      	beq.n	800ab9c <_free_r+0x98>
 800ab0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab0e:	9001      	str	r0, [sp, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f1a1 0404 	sub.w	r4, r1, #4
 800ab16:	bfb8      	it	lt
 800ab18:	18e4      	addlt	r4, r4, r3
 800ab1a:	f000 f8d3 	bl	800acc4 <__malloc_lock>
 800ab1e:	4a20      	ldr	r2, [pc, #128]	; (800aba0 <_free_r+0x9c>)
 800ab20:	9801      	ldr	r0, [sp, #4]
 800ab22:	6813      	ldr	r3, [r2, #0]
 800ab24:	4615      	mov	r5, r2
 800ab26:	b933      	cbnz	r3, 800ab36 <_free_r+0x32>
 800ab28:	6063      	str	r3, [r4, #4]
 800ab2a:	6014      	str	r4, [r2, #0]
 800ab2c:	b003      	add	sp, #12
 800ab2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab32:	f000 b8cd 	b.w	800acd0 <__malloc_unlock>
 800ab36:	42a3      	cmp	r3, r4
 800ab38:	d90b      	bls.n	800ab52 <_free_r+0x4e>
 800ab3a:	6821      	ldr	r1, [r4, #0]
 800ab3c:	1862      	adds	r2, r4, r1
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	bf04      	itt	eq
 800ab42:	681a      	ldreq	r2, [r3, #0]
 800ab44:	685b      	ldreq	r3, [r3, #4]
 800ab46:	6063      	str	r3, [r4, #4]
 800ab48:	bf04      	itt	eq
 800ab4a:	1852      	addeq	r2, r2, r1
 800ab4c:	6022      	streq	r2, [r4, #0]
 800ab4e:	602c      	str	r4, [r5, #0]
 800ab50:	e7ec      	b.n	800ab2c <_free_r+0x28>
 800ab52:	461a      	mov	r2, r3
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	b10b      	cbz	r3, 800ab5c <_free_r+0x58>
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d9fa      	bls.n	800ab52 <_free_r+0x4e>
 800ab5c:	6811      	ldr	r1, [r2, #0]
 800ab5e:	1855      	adds	r5, r2, r1
 800ab60:	42a5      	cmp	r5, r4
 800ab62:	d10b      	bne.n	800ab7c <_free_r+0x78>
 800ab64:	6824      	ldr	r4, [r4, #0]
 800ab66:	4421      	add	r1, r4
 800ab68:	1854      	adds	r4, r2, r1
 800ab6a:	42a3      	cmp	r3, r4
 800ab6c:	6011      	str	r1, [r2, #0]
 800ab6e:	d1dd      	bne.n	800ab2c <_free_r+0x28>
 800ab70:	681c      	ldr	r4, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	6053      	str	r3, [r2, #4]
 800ab76:	4421      	add	r1, r4
 800ab78:	6011      	str	r1, [r2, #0]
 800ab7a:	e7d7      	b.n	800ab2c <_free_r+0x28>
 800ab7c:	d902      	bls.n	800ab84 <_free_r+0x80>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	e7d3      	b.n	800ab2c <_free_r+0x28>
 800ab84:	6825      	ldr	r5, [r4, #0]
 800ab86:	1961      	adds	r1, r4, r5
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf04      	itt	eq
 800ab8c:	6819      	ldreq	r1, [r3, #0]
 800ab8e:	685b      	ldreq	r3, [r3, #4]
 800ab90:	6063      	str	r3, [r4, #4]
 800ab92:	bf04      	itt	eq
 800ab94:	1949      	addeq	r1, r1, r5
 800ab96:	6021      	streq	r1, [r4, #0]
 800ab98:	6054      	str	r4, [r2, #4]
 800ab9a:	e7c7      	b.n	800ab2c <_free_r+0x28>
 800ab9c:	b003      	add	sp, #12
 800ab9e:	bd30      	pop	{r4, r5, pc}
 800aba0:	200002e0 	.word	0x200002e0

0800aba4 <_malloc_r>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	1ccd      	adds	r5, r1, #3
 800aba8:	f025 0503 	bic.w	r5, r5, #3
 800abac:	3508      	adds	r5, #8
 800abae:	2d0c      	cmp	r5, #12
 800abb0:	bf38      	it	cc
 800abb2:	250c      	movcc	r5, #12
 800abb4:	2d00      	cmp	r5, #0
 800abb6:	4606      	mov	r6, r0
 800abb8:	db01      	blt.n	800abbe <_malloc_r+0x1a>
 800abba:	42a9      	cmp	r1, r5
 800abbc:	d903      	bls.n	800abc6 <_malloc_r+0x22>
 800abbe:	230c      	movs	r3, #12
 800abc0:	6033      	str	r3, [r6, #0]
 800abc2:	2000      	movs	r0, #0
 800abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc6:	f000 f87d 	bl	800acc4 <__malloc_lock>
 800abca:	4921      	ldr	r1, [pc, #132]	; (800ac50 <_malloc_r+0xac>)
 800abcc:	680a      	ldr	r2, [r1, #0]
 800abce:	4614      	mov	r4, r2
 800abd0:	b99c      	cbnz	r4, 800abfa <_malloc_r+0x56>
 800abd2:	4f20      	ldr	r7, [pc, #128]	; (800ac54 <_malloc_r+0xb0>)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	b923      	cbnz	r3, 800abe2 <_malloc_r+0x3e>
 800abd8:	4621      	mov	r1, r4
 800abda:	4630      	mov	r0, r6
 800abdc:	f000 f862 	bl	800aca4 <_sbrk_r>
 800abe0:	6038      	str	r0, [r7, #0]
 800abe2:	4629      	mov	r1, r5
 800abe4:	4630      	mov	r0, r6
 800abe6:	f000 f85d 	bl	800aca4 <_sbrk_r>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d123      	bne.n	800ac36 <_malloc_r+0x92>
 800abee:	230c      	movs	r3, #12
 800abf0:	6033      	str	r3, [r6, #0]
 800abf2:	4630      	mov	r0, r6
 800abf4:	f000 f86c 	bl	800acd0 <__malloc_unlock>
 800abf8:	e7e3      	b.n	800abc2 <_malloc_r+0x1e>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	1b5b      	subs	r3, r3, r5
 800abfe:	d417      	bmi.n	800ac30 <_malloc_r+0x8c>
 800ac00:	2b0b      	cmp	r3, #11
 800ac02:	d903      	bls.n	800ac0c <_malloc_r+0x68>
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	441c      	add	r4, r3
 800ac08:	6025      	str	r5, [r4, #0]
 800ac0a:	e004      	b.n	800ac16 <_malloc_r+0x72>
 800ac0c:	6863      	ldr	r3, [r4, #4]
 800ac0e:	42a2      	cmp	r2, r4
 800ac10:	bf0c      	ite	eq
 800ac12:	600b      	streq	r3, [r1, #0]
 800ac14:	6053      	strne	r3, [r2, #4]
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f85a 	bl	800acd0 <__malloc_unlock>
 800ac1c:	f104 000b 	add.w	r0, r4, #11
 800ac20:	1d23      	adds	r3, r4, #4
 800ac22:	f020 0007 	bic.w	r0, r0, #7
 800ac26:	1ac2      	subs	r2, r0, r3
 800ac28:	d0cc      	beq.n	800abc4 <_malloc_r+0x20>
 800ac2a:	1a1b      	subs	r3, r3, r0
 800ac2c:	50a3      	str	r3, [r4, r2]
 800ac2e:	e7c9      	b.n	800abc4 <_malloc_r+0x20>
 800ac30:	4622      	mov	r2, r4
 800ac32:	6864      	ldr	r4, [r4, #4]
 800ac34:	e7cc      	b.n	800abd0 <_malloc_r+0x2c>
 800ac36:	1cc4      	adds	r4, r0, #3
 800ac38:	f024 0403 	bic.w	r4, r4, #3
 800ac3c:	42a0      	cmp	r0, r4
 800ac3e:	d0e3      	beq.n	800ac08 <_malloc_r+0x64>
 800ac40:	1a21      	subs	r1, r4, r0
 800ac42:	4630      	mov	r0, r6
 800ac44:	f000 f82e 	bl	800aca4 <_sbrk_r>
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d1dd      	bne.n	800ac08 <_malloc_r+0x64>
 800ac4c:	e7cf      	b.n	800abee <_malloc_r+0x4a>
 800ac4e:	bf00      	nop
 800ac50:	200002e0 	.word	0x200002e0
 800ac54:	200002e4 	.word	0x200002e4

0800ac58 <_realloc_r>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	4607      	mov	r7, r0
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	460e      	mov	r6, r1
 800ac60:	b921      	cbnz	r1, 800ac6c <_realloc_r+0x14>
 800ac62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac66:	4611      	mov	r1, r2
 800ac68:	f7ff bf9c 	b.w	800aba4 <_malloc_r>
 800ac6c:	b922      	cbnz	r2, 800ac78 <_realloc_r+0x20>
 800ac6e:	f7ff ff49 	bl	800ab04 <_free_r>
 800ac72:	4625      	mov	r5, r4
 800ac74:	4628      	mov	r0, r5
 800ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac78:	f000 f830 	bl	800acdc <_malloc_usable_size_r>
 800ac7c:	42a0      	cmp	r0, r4
 800ac7e:	d20f      	bcs.n	800aca0 <_realloc_r+0x48>
 800ac80:	4621      	mov	r1, r4
 800ac82:	4638      	mov	r0, r7
 800ac84:	f7ff ff8e 	bl	800aba4 <_malloc_r>
 800ac88:	4605      	mov	r5, r0
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d0f2      	beq.n	800ac74 <_realloc_r+0x1c>
 800ac8e:	4631      	mov	r1, r6
 800ac90:	4622      	mov	r2, r4
 800ac92:	f7ff fbf7 	bl	800a484 <memcpy>
 800ac96:	4631      	mov	r1, r6
 800ac98:	4638      	mov	r0, r7
 800ac9a:	f7ff ff33 	bl	800ab04 <_free_r>
 800ac9e:	e7e9      	b.n	800ac74 <_realloc_r+0x1c>
 800aca0:	4635      	mov	r5, r6
 800aca2:	e7e7      	b.n	800ac74 <_realloc_r+0x1c>

0800aca4 <_sbrk_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4d06      	ldr	r5, [pc, #24]	; (800acc0 <_sbrk_r+0x1c>)
 800aca8:	2300      	movs	r3, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	4608      	mov	r0, r1
 800acae:	602b      	str	r3, [r5, #0]
 800acb0:	f7f7 f88c 	bl	8001dcc <_sbrk>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	d102      	bne.n	800acbe <_sbrk_r+0x1a>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	b103      	cbz	r3, 800acbe <_sbrk_r+0x1a>
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	20004958 	.word	0x20004958

0800acc4 <__malloc_lock>:
 800acc4:	4801      	ldr	r0, [pc, #4]	; (800accc <__malloc_lock+0x8>)
 800acc6:	f000 b811 	b.w	800acec <__retarget_lock_acquire_recursive>
 800acca:	bf00      	nop
 800accc:	20004960 	.word	0x20004960

0800acd0 <__malloc_unlock>:
 800acd0:	4801      	ldr	r0, [pc, #4]	; (800acd8 <__malloc_unlock+0x8>)
 800acd2:	f000 b80c 	b.w	800acee <__retarget_lock_release_recursive>
 800acd6:	bf00      	nop
 800acd8:	20004960 	.word	0x20004960

0800acdc <_malloc_usable_size_r>:
 800acdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace0:	1f18      	subs	r0, r3, #4
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	bfbc      	itt	lt
 800ace6:	580b      	ldrlt	r3, [r1, r0]
 800ace8:	18c0      	addlt	r0, r0, r3
 800acea:	4770      	bx	lr

0800acec <__retarget_lock_acquire_recursive>:
 800acec:	4770      	bx	lr

0800acee <__retarget_lock_release_recursive>:
 800acee:	4770      	bx	lr

0800acf0 <_init>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	bf00      	nop
 800acf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf6:	bc08      	pop	{r3}
 800acf8:	469e      	mov	lr, r3
 800acfa:	4770      	bx	lr

0800acfc <_fini>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr
