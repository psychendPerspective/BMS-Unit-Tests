
BMSv1.0_Unit_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000948  08009dfc  08009dfc  00019dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a744  0800a744  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800a744  0800a744  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a744  0800a744  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a744  0800a744  0001a744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a748  0800a748  0001a748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a74c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00004868  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200048f0  200048f0  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012647  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002895  00000000  00000000  000326ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00034f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b58  00000000  00000000  00035bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed3b  00000000  00000000  00036750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001294a  00000000  00000000  0005548b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b15e7  00000000  00000000  00067dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001193bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036a8  00000000  00000000  00119410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009de4 	.word	0x08009de4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009de4 	.word	0x08009de4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <SELECT+0x1c>)
 8000898:	f001 fce6 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f001 fa5f 	bl	8001d60 <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000400 	.word	0x48000400

080008ac <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <DESELECT+0x1c>)
 80008b8:	f001 fcd6 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f001 fa4f 	bl	8001d60 <HAL_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	48000400 	.word	0x48000400

080008cc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008d6:	bf00      	nop
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <SPI_TxByte+0x30>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d1f8      	bne.n	80008d8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	2201      	movs	r2, #1
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <SPI_TxByte+0x30>)
 80008ee:	f003 f886 	bl	80039fe <HAL_SPI_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200002e8 	.word	0x200002e8

08000900 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800090c:	bf00      	nop
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <SPI_TxBuffer+0x30>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	2b02      	cmp	r3, #2
 800091a:	d1f8      	bne.n	800090e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800091c:	887a      	ldrh	r2, [r7, #2]
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <SPI_TxBuffer+0x30>)
 8000924:	f003 f86b 	bl	80039fe <HAL_SPI_Transmit>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002e8 	.word	0x200002e8

08000934 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800093a:	23ff      	movs	r3, #255	; 0xff
 800093c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800093e:	bf00      	nop
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <SPI_RxByte+0x34>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1f8      	bne.n	8000940 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800094e:	1dba      	adds	r2, r7, #6
 8000950:	1df9      	adds	r1, r7, #7
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <SPI_RxByte+0x34>)
 800095a:	f003 f9be 	bl	8003cda <HAL_SPI_TransmitReceive>

	return data;
 800095e:	79bb      	ldrb	r3, [r7, #6]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200002e8 	.word	0x200002e8

0800096c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000974:	f7ff ffde 	bl	8000934 <SPI_RxByte>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	701a      	strb	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <SD_ReadyWait+0x30>)
 8000990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000994:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000996:	f7ff ffcd 	bl	8000934 <SPI_RxByte>
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2bff      	cmp	r3, #255	; 0xff
 80009a2:	d004      	beq.n	80009ae <SD_ReadyWait+0x26>
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SD_ReadyWait+0x30>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f3      	bne.n	8000996 <SD_ReadyWait+0xe>

	return res;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20002872 	.word	0x20002872

080009bc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80009c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009c6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80009c8:	f7ff ff70 	bl	80008ac <DESELECT>
	for(int i = 0; i < 10; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	e005      	b.n	80009de <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80009d2:	20ff      	movs	r0, #255	; 0xff
 80009d4:	f7ff ff7a 	bl	80008cc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	3301      	adds	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b09      	cmp	r3, #9
 80009e2:	ddf6      	ble.n	80009d2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80009e4:	f7ff ff52 	bl	800088c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80009fc:	2395      	movs	r3, #149	; 0x95
 80009fe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a00:	463b      	mov	r3, r7
 8000a02:	2106      	movs	r1, #6
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff7b 	bl	8000900 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a0a:	e002      	b.n	8000a12 <SD_PowerOn+0x56>
	{
		cnt--;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a12:	f7ff ff8f 	bl	8000934 <SPI_RxByte>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d002      	beq.n	8000a22 <SD_PowerOn+0x66>
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f4      	bne.n	8000a0c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a22:	f7ff ff43 	bl	80008ac <DESELECT>
	SPI_TxByte(0XFF);
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	f7ff ff50 	bl	80008cc <SPI_TxByte>

	PowerFlag = 1;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <SD_PowerOn+0x80>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000a5 	.word	0x200000a5

08000a40 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <SD_PowerOff+0x14>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	200000a5 	.word	0x200000a5

08000a58 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <SD_CheckPower+0x14>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000a5 	.word	0x200000a5

08000a70 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <SD_RxDataBlock+0x5c>)
 8000a7c:	22c8      	movs	r2, #200	; 0xc8
 8000a7e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000a80:	f7ff ff58 	bl	8000934 <SPI_RxByte>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d104      	bne.n	8000a98 <SD_RxDataBlock+0x28>
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <SD_RxDataBlock+0x5c>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f3      	bne.n	8000a80 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2bfe      	cmp	r3, #254	; 0xfe
 8000a9c:	d001      	beq.n	8000aa2 <SD_RxDataBlock+0x32>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e00f      	b.n	8000ac2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5f 	bl	800096c <SPI_RxBytePtr>
	} while(len--);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	603a      	str	r2, [r7, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f4      	bne.n	8000aa2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000ab8:	f7ff ff3c 	bl	8000934 <SPI_RxByte>
	SPI_RxByte();
 8000abc:	f7ff ff3a 	bl	8000934 <SPI_RxByte>

	return TRUE;
 8000ac0:	2301      	movs	r3, #1
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20002874 	.word	0x20002874

08000ad0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ae0:	f7ff ff52 	bl	8000988 <SD_ReadyWait>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2bff      	cmp	r3, #255	; 0xff
 8000ae8:	d001      	beq.n	8000aee <SD_TxDataBlock+0x1e>
 8000aea:	2300      	movs	r3, #0
 8000aec:	e02f      	b.n	8000b4e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff feeb 	bl	80008cc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	2bfd      	cmp	r3, #253	; 0xfd
 8000afa:	d020      	beq.n	8000b3e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fefd 	bl	8000900 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b06:	f7ff ff15 	bl	8000934 <SPI_RxByte>
		SPI_RxByte();
 8000b0a:	f7ff ff13 	bl	8000934 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b0e:	e00b      	b.n	8000b28 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b10:	f7ff ff10 	bl	8000934 <SPI_RxByte>
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	2b05      	cmp	r3, #5
 8000b20:	d006      	beq.n	8000b30 <SD_TxDataBlock+0x60>
			i++;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	3301      	adds	r3, #1
 8000b26:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	2b40      	cmp	r3, #64	; 0x40
 8000b2c:	d9f0      	bls.n	8000b10 <SD_TxDataBlock+0x40>
 8000b2e:	e000      	b.n	8000b32 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b30:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b32:	bf00      	nop
 8000b34:	f7ff fefe 	bl	8000934 <SPI_RxByte>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0fa      	beq.n	8000b34 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	f003 031f 	and.w	r3, r3, #31
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d101      	bne.n	8000b4c <SD_TxDataBlock+0x7c>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	6039      	str	r1, [r7, #0]
 8000b60:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000b62:	f7ff ff11 	bl	8000988 <SD_ReadyWait>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2bff      	cmp	r3, #255	; 0xff
 8000b6a:	d001      	beq.n	8000b70 <SD_SendCmd+0x1a>
 8000b6c:	23ff      	movs	r3, #255	; 0xff
 8000b6e:	e042      	b.n	8000bf6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff feaa 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fea4 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fe9e 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe98 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe93 	bl	80008cc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b40      	cmp	r3, #64	; 0x40
 8000baa:	d102      	bne.n	8000bb2 <SD_SendCmd+0x5c>
 8000bac:	2395      	movs	r3, #149	; 0x95
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e007      	b.n	8000bc2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b48      	cmp	r3, #72	; 0x48
 8000bb6:	d102      	bne.n	8000bbe <SD_SendCmd+0x68>
 8000bb8:	2387      	movs	r3, #135	; 0x87
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e001      	b.n	8000bc2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fe81 	bl	80008cc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b4c      	cmp	r3, #76	; 0x4c
 8000bce:	d101      	bne.n	8000bd4 <SD_SendCmd+0x7e>
 8000bd0:	f7ff feb0 	bl	8000934 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000bd8:	f7ff feac 	bl	8000934 <SPI_RxByte>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000be0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da05      	bge.n	8000bf4 <SD_SendCmd+0x9e>
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	73bb      	strb	r3, [r7, #14]
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f1      	bne.n	8000bd8 <SD_SendCmd+0x82>

	return res;
 8000bf4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SD_disk_initialize+0x14>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e0d6      	b.n	8000dc2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c14:	4b6d      	ldr	r3, [pc, #436]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <SD_disk_initialize+0x2a>
 8000c22:	4b6a      	ldr	r3, [pc, #424]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	e0cb      	b.n	8000dc2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000c2a:	f7ff fec7 	bl	80009bc <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c2e:	f7ff fe2d 	bl	800088c <SELECT>

	/* check disk type */
	type = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c36:	2100      	movs	r1, #0
 8000c38:	2040      	movs	r0, #64	; 0x40
 8000c3a:	f7ff ff8c 	bl	8000b56 <SD_SendCmd>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	f040 80a6 	bne.w	8000d92 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c52:	2048      	movs	r0, #72	; 0x48
 8000c54:	f7ff ff7f 	bl	8000b56 <SD_SendCmd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d158      	bne.n	8000d10 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e00c      	b.n	8000c7e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000c64:	7bfc      	ldrb	r4, [r7, #15]
 8000c66:	f7ff fe65 	bl	8000934 <SPI_RxByte>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4423      	add	r3, r4
 8000c74:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d9ef      	bls.n	8000c64 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c84:	7abb      	ldrb	r3, [r7, #10]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	f040 8083 	bne.w	8000d92 <SD_disk_initialize+0x192>
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	2baa      	cmp	r3, #170	; 0xaa
 8000c90:	d17f      	bne.n	8000d92 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c92:	2100      	movs	r1, #0
 8000c94:	2077      	movs	r0, #119	; 0x77
 8000c96:	f7ff ff5e 	bl	8000b56 <SD_SendCmd>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d807      	bhi.n	8000cb0 <SD_disk_initialize+0xb0>
 8000ca0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ca4:	2069      	movs	r0, #105	; 0x69
 8000ca6:	f7ff ff56 	bl	8000b56 <SD_SendCmd>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000cb0:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1eb      	bne.n	8000c92 <SD_disk_initialize+0x92>
 8000cba:	e000      	b.n	8000cbe <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cbc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d064      	beq.n	8000d92 <SD_disk_initialize+0x192>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	207a      	movs	r0, #122	; 0x7a
 8000ccc:	f7ff ff43 	bl	8000b56 <SD_SendCmd>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d15d      	bne.n	8000d92 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e00c      	b.n	8000cf6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000cdc:	7bfc      	ldrb	r4, [r7, #15]
 8000cde:	f7ff fe29 	bl	8000934 <SPI_RxByte>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4423      	add	r3, r4
 8000cec:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d9ef      	bls.n	8000cdc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000cfc:	7a3b      	ldrb	r3, [r7, #8]
 8000cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SD_disk_initialize+0x10a>
 8000d06:	230c      	movs	r3, #12
 8000d08:	e000      	b.n	8000d0c <SD_disk_initialize+0x10c>
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	73bb      	strb	r3, [r7, #14]
 8000d0e:	e040      	b.n	8000d92 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d10:	2100      	movs	r1, #0
 8000d12:	2077      	movs	r0, #119	; 0x77
 8000d14:	f7ff ff1f 	bl	8000b56 <SD_SendCmd>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d808      	bhi.n	8000d30 <SD_disk_initialize+0x130>
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2069      	movs	r0, #105	; 0x69
 8000d22:	f7ff ff18 	bl	8000b56 <SD_SendCmd>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d801      	bhi.n	8000d30 <SD_disk_initialize+0x130>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e000      	b.n	8000d32 <SD_disk_initialize+0x132>
 8000d30:	2301      	movs	r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d10e      	bne.n	8000d58 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2077      	movs	r0, #119	; 0x77
 8000d3e:	f7ff ff0a 	bl	8000b56 <SD_SendCmd>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d80e      	bhi.n	8000d66 <SD_disk_initialize+0x166>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2069      	movs	r0, #105	; 0x69
 8000d4c:	f7ff ff03 	bl	8000b56 <SD_SendCmd>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <SD_disk_initialize+0x166>
 8000d56:	e00d      	b.n	8000d74 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2041      	movs	r0, #65	; 0x41
 8000d5c:	f7ff fefb 	bl	8000b56 <SD_SendCmd>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e1      	bne.n	8000d34 <SD_disk_initialize+0x134>
 8000d70:	e000      	b.n	8000d74 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d72:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d007      	beq.n	8000d8e <SD_disk_initialize+0x18e>
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	2050      	movs	r0, #80	; 0x50
 8000d84:	f7ff fee7 	bl	8000b56 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SD_disk_initialize+0x192>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <SD_disk_initialize+0x1d4>)
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000d98:	f7ff fd88 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000d9c:	f7ff fdca 	bl	8000934 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d008      	beq.n	8000db8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e001      	b.n	8000dbc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000db8:	f7ff fe42 	bl	8000a40 <SD_PowerOff>
	}

	return Stat;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20002874 	.word	0x20002874
 8000dd4:	200000a4 	.word	0x200000a4

08000dd8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_status+0x14>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e002      	b.n	8000df2 <SD_disk_status+0x1a>
	return Stat;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SD_disk_status+0x28>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000000 	.word	0x20000000

08000e04 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <SD_disk_read+0x1c>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <SD_disk_read+0x20>
 8000e20:	2304      	movs	r3, #4
 8000e22:	e051      	b.n	8000ec8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <SD_disk_read+0xcc>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SD_disk_read+0x32>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e048      	b.n	8000ec8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <SD_disk_read+0xd0>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <SD_disk_read+0x44>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	025b      	lsls	r3, r3, #9
 8000e46:	607b      	str	r3, [r7, #4]

	SELECT();
 8000e48:	f7ff fd20 	bl	800088c <SELECT>

	if (count == 1)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d111      	bne.n	8000e76 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	2051      	movs	r0, #81	; 0x51
 8000e56:	f7ff fe7e 	bl	8000b56 <SD_SendCmd>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d129      	bne.n	8000eb4 <SD_disk_read+0xb0>
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f7ff fe03 	bl	8000a70 <SD_RxDataBlock>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d021      	beq.n	8000eb4 <SD_disk_read+0xb0>
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	e01e      	b.n	8000eb4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2052      	movs	r0, #82	; 0x52
 8000e7a:	f7ff fe6c 	bl	8000b56 <SD_SendCmd>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d117      	bne.n	8000eb4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e88:	68b8      	ldr	r0, [r7, #8]
 8000e8a:	f7ff fdf1 	bl	8000a70 <SD_RxDataBlock>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00a      	beq.n	8000eaa <SD_disk_read+0xa6>
				buff += 512;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1ed      	bne.n	8000e84 <SD_disk_read+0x80>
 8000ea8:	e000      	b.n	8000eac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000eaa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	204c      	movs	r0, #76	; 0x4c
 8000eb0:	f7ff fe51 	bl	8000b56 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000eb4:	f7ff fcfa 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000eb8:	f7ff fd3c 	bl	8000934 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	200000a4 	.word	0x200000a4

08000ed8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <SD_disk_write+0x1c>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <SD_disk_write+0x20>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e06b      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <SD_disk_write+0x100>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SD_disk_write+0x32>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e062      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <SD_disk_write+0x100>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SD_disk_write+0x44>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e059      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <SD_disk_write+0x104>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <SD_disk_write+0x56>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f2e:	f7ff fcad 	bl	800088c <SELECT>

	if (count == 1)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d110      	bne.n	8000f5a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	2058      	movs	r0, #88	; 0x58
 8000f3c:	f7ff fe0b 	bl	8000b56 <SD_SendCmd>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d13a      	bne.n	8000fbc <SD_disk_write+0xe4>
 8000f46:	21fe      	movs	r1, #254	; 0xfe
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f7ff fdc1 	bl	8000ad0 <SD_TxDataBlock>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d033      	beq.n	8000fbc <SD_disk_write+0xe4>
			count = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	e030      	b.n	8000fbc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <SD_disk_write+0x104>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	2077      	movs	r0, #119	; 0x77
 8000f6a:	f7ff fdf4 	bl	8000b56 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	2057      	movs	r0, #87	; 0x57
 8000f72:	f7ff fdf0 	bl	8000b56 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	2059      	movs	r0, #89	; 0x59
 8000f7a:	f7ff fdec 	bl	8000b56 <SD_SendCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d11b      	bne.n	8000fbc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f84:	21fc      	movs	r1, #252	; 0xfc
 8000f86:	68b8      	ldr	r0, [r7, #8]
 8000f88:	f7ff fda2 	bl	8000ad0 <SD_TxDataBlock>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00a      	beq.n	8000fa8 <SD_disk_write+0xd0>
				buff += 512;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1ee      	bne.n	8000f84 <SD_disk_write+0xac>
 8000fa6:	e000      	b.n	8000faa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fa8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000faa:	21fd      	movs	r1, #253	; 0xfd
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fd8f 	bl	8000ad0 <SD_TxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <SD_disk_write+0xe4>
			{
				count = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000fbc:	f7ff fc76 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000fc0:	f7ff fcb8 	bl	8000934 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	200000a4 	.word	0x200000a4

08000fe0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b08b      	sub	sp, #44	; 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	603a      	str	r2, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	460b      	mov	r3, r1
 8000fee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SD_disk_ioctl+0x1e>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e115      	b.n	800122a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	2b05      	cmp	r3, #5
 8001008:	d124      	bne.n	8001054 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d012      	beq.n	8001038 <SD_disk_ioctl+0x58>
 8001012:	2b02      	cmp	r3, #2
 8001014:	dc1a      	bgt.n	800104c <SD_disk_ioctl+0x6c>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <SD_disk_ioctl+0x40>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d006      	beq.n	800102c <SD_disk_ioctl+0x4c>
 800101e:	e015      	b.n	800104c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001020:	f7ff fd0e 	bl	8000a40 <SD_PowerOff>
			res = RES_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800102a:	e0fc      	b.n	8001226 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800102c:	f7ff fcc6 	bl	80009bc <SD_PowerOn>
			res = RES_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001036:	e0f6      	b.n	8001226 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	1c5c      	adds	r4, r3, #1
 800103c:	f7ff fd0c 	bl	8000a58 <SD_CheckPower>
 8001040:	4603      	mov	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800104a:	e0ec      	b.n	8001226 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800104c:	2304      	movs	r3, #4
 800104e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001052:	e0e8      	b.n	8001226 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001054:	4b77      	ldr	r3, [pc, #476]	; (8001234 <SD_disk_ioctl+0x254>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SD_disk_ioctl+0x86>
 8001062:	2303      	movs	r3, #3
 8001064:	e0e1      	b.n	800122a <SD_disk_ioctl+0x24a>

		SELECT();
 8001066:	f7ff fc11 	bl	800088c <SELECT>

		switch (ctrl)
 800106a:	79bb      	ldrb	r3, [r7, #6]
 800106c:	2b0d      	cmp	r3, #13
 800106e:	f200 80cb 	bhi.w	8001208 <SD_disk_ioctl+0x228>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <SD_disk_ioctl+0x98>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001173 	.word	0x08001173
 800107c:	080010b1 	.word	0x080010b1
 8001080:	08001163 	.word	0x08001163
 8001084:	08001209 	.word	0x08001209
 8001088:	08001209 	.word	0x08001209
 800108c:	08001209 	.word	0x08001209
 8001090:	08001209 	.word	0x08001209
 8001094:	08001209 	.word	0x08001209
 8001098:	08001209 	.word	0x08001209
 800109c:	08001209 	.word	0x08001209
 80010a0:	08001209 	.word	0x08001209
 80010a4:	08001185 	.word	0x08001185
 80010a8:	080011a9 	.word	0x080011a9
 80010ac:	080011cd 	.word	0x080011cd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010b0:	2100      	movs	r1, #0
 80010b2:	2049      	movs	r0, #73	; 0x49
 80010b4:	f7ff fd4f 	bl	8000b56 <SD_SendCmd>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 80a8 	bne.w	8001210 <SD_disk_ioctl+0x230>
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2110      	movs	r1, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fcd2 	bl	8000a70 <SD_RxDataBlock>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 809e 	beq.w	8001210 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	099b      	lsrs	r3, r3, #6
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10e      	bne.n	80010fc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80010de:	7d7b      	ldrb	r3, [r7, #21]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	7d3b      	ldrb	r3, [r7, #20]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80010f2:	8bfb      	ldrh	r3, [r7, #30]
 80010f4:	029a      	lsls	r2, r3, #10
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e02e      	b.n	800115a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80010fc:	7c7b      	ldrb	r3, [r7, #17]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	b2da      	uxtb	r2, r3
 8001104:	7dbb      	ldrb	r3, [r7, #22]
 8001106:	09db      	lsrs	r3, r3, #7
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	7d7b      	ldrb	r3, [r7, #21]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0306 	and.w	r3, r3, #6
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3302      	adds	r3, #2
 8001120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001124:	7d3b      	ldrb	r3, [r7, #20]
 8001126:	099b      	lsrs	r3, r3, #6
 8001128:	b2db      	uxtb	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	7cfb      	ldrb	r3, [r7, #19]
 800112e:	b29b      	uxth	r3, r3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	b29b      	uxth	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b29a      	uxth	r2, r3
 8001138:	7cbb      	ldrb	r3, [r7, #18]
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	b29b      	uxth	r3, r3
 800113e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001142:	b29b      	uxth	r3, r3
 8001144:	4413      	add	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	3301      	adds	r3, #1
 800114a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800114c:	8bfa      	ldrh	r2, [r7, #30]
 800114e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001152:	3b09      	subs	r3, #9
 8001154:	409a      	lsls	r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001160:	e056      	b.n	8001210 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001168:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001170:	e055      	b.n	800121e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001172:	f7ff fc09 	bl	8000988 <SD_ReadyWait>
 8001176:	4603      	mov	r3, r0
 8001178:	2bff      	cmp	r3, #255	; 0xff
 800117a:	d14b      	bne.n	8001214 <SD_disk_ioctl+0x234>
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001182:	e047      	b.n	8001214 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001184:	2100      	movs	r1, #0
 8001186:	2049      	movs	r0, #73	; 0x49
 8001188:	f7ff fce5 	bl	8000b56 <SD_SendCmd>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d142      	bne.n	8001218 <SD_disk_ioctl+0x238>
 8001192:	2110      	movs	r1, #16
 8001194:	6a38      	ldr	r0, [r7, #32]
 8001196:	f7ff fc6b 	bl	8000a70 <SD_RxDataBlock>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03b      	beq.n	8001218 <SD_disk_ioctl+0x238>
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011a6:	e037      	b.n	8001218 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011a8:	2100      	movs	r1, #0
 80011aa:	204a      	movs	r0, #74	; 0x4a
 80011ac:	f7ff fcd3 	bl	8000b56 <SD_SendCmd>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d132      	bne.n	800121c <SD_disk_ioctl+0x23c>
 80011b6:	2110      	movs	r1, #16
 80011b8:	6a38      	ldr	r0, [r7, #32]
 80011ba:	f7ff fc59 	bl	8000a70 <SD_RxDataBlock>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d02b      	beq.n	800121c <SD_disk_ioctl+0x23c>
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011ca:	e027      	b.n	800121c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80011cc:	2100      	movs	r1, #0
 80011ce:	207a      	movs	r0, #122	; 0x7a
 80011d0:	f7ff fcc1 	bl	8000b56 <SD_SendCmd>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011e0:	e00b      	b.n	80011fa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80011e2:	6a3c      	ldr	r4, [r7, #32]
 80011e4:	1c63      	adds	r3, r4, #1
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	f7ff fba4 	bl	8000934 <SPI_RxByte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80011f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f4:	3301      	adds	r3, #1
 80011f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d9ef      	bls.n	80011e2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001208:	2304      	movs	r3, #4
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800120e:	e006      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001210:	bf00      	nop
 8001212:	e004      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001214:	bf00      	nop
 8001216:	e002      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 800121c:	bf00      	nop
		}

		DESELECT();
 800121e:	f7ff fb45 	bl	80008ac <DESELECT>
		SPI_RxByte();
 8001222:	f7ff fb87 	bl	8000934 <SPI_RxByte>
	}

	return res;
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800122a:	4618      	mov	r0, r3
 800122c:	372c      	adds	r7, #44	; 0x2c
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000

08001238 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001244:	e002      	b.n	800124c <bufsize+0x14>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f6      	bne.n	8001246 <bufsize+0xe>
	return i;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <clear_buffer>:

void clear_buffer (void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e007      	b.n	8001284 <clear_buffer+0x1c>
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <clear_buffer+0x34>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3301      	adds	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	dbf3      	blt.n	8001274 <clear_buffer+0xc>
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200013a8 	.word	0x200013a8

080012a0 <send_uart>:

void send_uart (char *string)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7fe ff91 	bl	80001d0 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <send_uart+0x2c>)
 80012be:	f003 f8d1 	bl	8004464 <HAL_UART_Transmit>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200017b8 	.word	0x200017b8

080012d0 <write_to_csvfile>:

void write_to_csvfile (void)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af04      	add	r7, sp, #16

		  dummy_timer =+ 1;
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <write_to_csvfile+0xb4>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
		  dummy_cell_votlages =+ 0.3;
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <write_to_csvfile+0xb8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		  dummy_pack_voltage =+ 11;
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <write_to_csvfile+0xbc>)
 80012e4:	220b      	movs	r2, #11
 80012e6:	701a      	strb	r2, [r3, #0]
		  dummy_pack_current =+ 0.5;
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <write_to_csvfile+0xc0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
		  dummy_temperature =+ 5;
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <write_to_csvfile+0xc4>)
 80012f0:	2205      	movs	r2, #5
 80012f2:	701a      	strb	r2, [r3, #0]

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80012f4:	2203      	movs	r2, #3
 80012f6:	4928      	ldr	r1, [pc, #160]	; (8001398 <write_to_csvfile+0xc8>)
 80012f8:	4828      	ldr	r0, [pc, #160]	; (800139c <write_to_csvfile+0xcc>)
 80012fa:	f006 fab7 	bl	800786c <f_open>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <write_to_csvfile+0xd0>)
 8001304:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <write_to_csvfile+0xcc>)
 8001308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130c:	330c      	adds	r3, #12
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	4822      	ldr	r0, [pc, #136]	; (800139c <write_to_csvfile+0xcc>)
 8001314:	f007 fb76 	bl	8008a04 <f_lseek>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <write_to_csvfile+0xd0>)
 800131e:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%d,%d,%d,%d,%d\r\n", dummy_timer, dummy_cell_votlages, dummy_pack_voltage, dummy_pack_current, dummy_temperature);
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <write_to_csvfile+0xb4>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <write_to_csvfile+0xb8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461c      	mov	r4, r3
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <write_to_csvfile+0xbc>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <write_to_csvfile+0xc0>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <write_to_csvfile+0xc4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	9101      	str	r1, [sp, #4]
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	4623      	mov	r3, r4
 8001344:	4602      	mov	r2, r0
 8001346:	4917      	ldr	r1, [pc, #92]	; (80013a4 <write_to_csvfile+0xd4>)
 8001348:	4817      	ldr	r0, [pc, #92]	; (80013a8 <write_to_csvfile+0xd8>)
 800134a:	f008 f92b 	bl	80095a4 <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <write_to_csvfile+0xd8>)
 8001350:	f7ff ff72 	bl	8001238 <bufsize>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <write_to_csvfile+0xdc>)
 800135a:	4913      	ldr	r1, [pc, #76]	; (80013a8 <write_to_csvfile+0xd8>)
 800135c:	480f      	ldr	r0, [pc, #60]	; (800139c <write_to_csvfile+0xcc>)
 800135e:	f006 ffd5 	bl	800830c <f_write>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <write_to_csvfile+0xd0>)
 8001368:	701a      	strb	r2, [r3, #0]
		  send_uart(buffer);
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <write_to_csvfile+0xd8>)
 800136c:	f7ff ff98 	bl	80012a0 <send_uart>
		  f_close (&fil);
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <write_to_csvfile+0xcc>)
 8001372:	f007 fb1c 	bl	80089ae <f_close>

		  clear_buffer();
 8001376:	f7ff ff77 	bl	8001268 <clear_buffer>
}
 800137a:	bf00      	nop
 800137c:	3704      	adds	r7, #4
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	200013a0 	.word	0x200013a0
 8001388:	20002870 	.word	0x20002870
 800138c:	200002e4 	.word	0x200002e4
 8001390:	20001840 	.word	0x20001840
 8001394:	200017ac 	.word	0x200017ac
 8001398:	08009dfc 	.word	0x08009dfc
 800139c:	20001844 	.word	0x20001844
 80013a0:	200017b4 	.word	0x200017b4
 80013a4:	08009e08 	.word	0x08009e08
 80013a8:	200013a8 	.word	0x200013a8
 80013ac:	200017a8 	.word	0x200017a8

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f000 fc6e 	bl	8001c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f9d4 	bl	8001764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f000 fa9a 	bl	80018f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013c0:	f000 fa68 	bl	8001894 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80013c4:	f000 fa28 	bl	8001818 <MX_SPI2_Init>
  MX_FATFS_Init();
 80013c8:	f003 fc64 	bl	8004c94 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  HAL_Delay(500);
 80013cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d0:	f000 fcc6 	bl	8001d60 <HAL_Delay>

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <main+0x58>)
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <main+0x5c>)
 80013d8:	f008 f8e4 	bl	80095a4 <siprintf>
  send_uart(buffer);
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <main+0x5c>)
 80013de:	f7ff ff5f 	bl	80012a0 <send_uart>
  clear_buffer();
 80013e2:	f7ff ff41 	bl	8001268 <clear_buffer>

  fresult = f_mount(&fs, "/", 1);
 80013e6:	2201      	movs	r2, #1
 80013e8:	4909      	ldr	r1, [pc, #36]	; (8001410 <main+0x60>)
 80013ea:	480a      	ldr	r0, [pc, #40]	; (8001414 <main+0x64>)
 80013ec:	f006 f9f4 	bl	80077d8 <f_mount>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <main+0x68>)
 80013f6:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK)
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <main+0x68>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00f      	beq.n	8001420 <main+0x70>
  	{
  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001400:	4806      	ldr	r0, [pc, #24]	; (800141c <main+0x6c>)
 8001402:	f7ff ff4d 	bl	80012a0 <send_uart>
 8001406:	e00e      	b.n	8001426 <main+0x76>
 8001408:	08009e1c 	.word	0x08009e1c
 800140c:	200013a8 	.word	0x200013a8
 8001410:	08009e44 	.word	0x08009e44
 8001414:	2000036c 	.word	0x2000036c
 8001418:	200017b4 	.word	0x200017b4
 800141c:	08009e48 	.word	0x08009e48

  	}
  	else
  	{
  		send_uart("SD CARD mounted successfully...\r\n");
 8001420:	48b2      	ldr	r0, [pc, #712]	; (80016ec <main+0x33c>)
 8001422:	f7ff ff3d 	bl	80012a0 <send_uart>
  	}

  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 8001426:	4ab2      	ldr	r2, [pc, #712]	; (80016f0 <main+0x340>)
 8001428:	49b2      	ldr	r1, [pc, #712]	; (80016f4 <main+0x344>)
 800142a:	48b3      	ldr	r0, [pc, #716]	; (80016f8 <main+0x348>)
 800142c:	f007 fe1e 	bl	800906c <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001430:	4baf      	ldr	r3, [pc, #700]	; (80016f0 <main+0x340>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001438:	3314      	adds	r3, #20
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	1e9a      	subs	r2, r3, #2
 800143e:	4bac      	ldr	r3, [pc, #688]	; (80016f0 <main+0x340>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001446:	3302      	adds	r3, #2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	fb03 f302 	mul.w	r3, r3, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f982 	bl	8000758 <__aeabi_ui2d>
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4ba8      	ldr	r3, [pc, #672]	; (80016fc <main+0x34c>)
 800145a:	f7fe ff11 	bl	8000280 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff f9f1 	bl	800084c <__aeabi_d2uiz>
 800146a:	4603      	mov	r3, r0
 800146c:	4aa4      	ldr	r2, [pc, #656]	; (8001700 <main+0x350>)
 800146e:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 8001470:	4ba3      	ldr	r3, [pc, #652]	; (8001700 <main+0x350>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	49a3      	ldr	r1, [pc, #652]	; (8001704 <main+0x354>)
 8001478:	48a3      	ldr	r0, [pc, #652]	; (8001708 <main+0x358>)
 800147a:	f008 f893 	bl	80095a4 <siprintf>
  	send_uart(buffer);
 800147e:	48a2      	ldr	r0, [pc, #648]	; (8001708 <main+0x358>)
 8001480:	f7ff ff0e 	bl	80012a0 <send_uart>
  	clear_buffer();
 8001484:	f7ff fef0 	bl	8001268 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001488:	4b99      	ldr	r3, [pc, #612]	; (80016f0 <main+0x340>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	3302      	adds	r3, #2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b97      	ldr	r3, [pc, #604]	; (80016f4 <main+0x344>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fb03 f302 	mul.w	r3, r3, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f95a 	bl	8000758 <__aeabi_ui2d>
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b94      	ldr	r3, [pc, #592]	; (80016fc <main+0x34c>)
 80014aa:	f7fe fee9 	bl	8000280 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff f9c9 	bl	800084c <__aeabi_d2uiz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a93      	ldr	r2, [pc, #588]	; (800170c <main+0x35c>)
 80014be:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 80014c0:	4b92      	ldr	r3, [pc, #584]	; (800170c <main+0x35c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4992      	ldr	r1, [pc, #584]	; (8001710 <main+0x360>)
 80014c8:	488f      	ldr	r0, [pc, #572]	; (8001708 <main+0x358>)
 80014ca:	f008 f86b 	bl	80095a4 <siprintf>
  	send_uart(buffer);
 80014ce:	488e      	ldr	r0, [pc, #568]	; (8001708 <main+0x358>)
 80014d0:	f7ff fee6 	bl	80012a0 <send_uart>
  	clear_buffer();
 80014d4:	f7ff fec8 	bl	8001268 <clear_buffer>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80014d8:	2213      	movs	r2, #19
 80014da:	498e      	ldr	r1, [pc, #568]	; (8001714 <main+0x364>)
 80014dc:	488e      	ldr	r0, [pc, #568]	; (8001718 <main+0x368>)
 80014de:	f006 f9c5 	bl	800786c <f_open>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b8d      	ldr	r3, [pc, #564]	; (800171c <main+0x36c>)
 80014e8:	701a      	strb	r2, [r3, #0]
  	/* Writing text */
  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 80014ea:	498b      	ldr	r1, [pc, #556]	; (8001718 <main+0x368>)
 80014ec:	488c      	ldr	r0, [pc, #560]	; (8001720 <main+0x370>)
 80014ee:	f007 ff19 	bl	8009324 <f_puts>
  	/* Close file */
  	fresult = f_close(&fil);
 80014f2:	4889      	ldr	r0, [pc, #548]	; (8001718 <main+0x368>)
 80014f4:	f007 fa5b 	bl	80089ae <f_close>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b87      	ldr	r3, [pc, #540]	; (800171c <main+0x36c>)
 80014fe:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)
 8001500:	4b86      	ldr	r3, [pc, #536]	; (800171c <main+0x36c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <main+0x15e>
  	{
  		send_uart ("File1.txt created and the data is written \r\n");
 8001508:	4886      	ldr	r0, [pc, #536]	; (8001724 <main+0x374>)
 800150a:	f7ff fec9 	bl	80012a0 <send_uart>
  	}

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 800150e:	2201      	movs	r2, #1
 8001510:	4980      	ldr	r1, [pc, #512]	; (8001714 <main+0x364>)
 8001512:	4881      	ldr	r0, [pc, #516]	; (8001718 <main+0x368>)
 8001514:	f006 f9aa 	bl	800786c <f_open>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b7f      	ldr	r3, [pc, #508]	; (800171c <main+0x36c>)
 800151e:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 8001520:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <main+0x368>)
 8001522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001526:	330c      	adds	r3, #12
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a7b      	ldr	r2, [pc, #492]	; (8001718 <main+0x368>)
 800152c:	4619      	mov	r1, r3
 800152e:	4876      	ldr	r0, [pc, #472]	; (8001708 <main+0x358>)
 8001530:	f007 fe7e 	bl	8009230 <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 8001534:	487c      	ldr	r0, [pc, #496]	; (8001728 <main+0x378>)
 8001536:	f7ff feb3 	bl	80012a0 <send_uart>
  	send_uart(buffer);
 800153a:	4873      	ldr	r0, [pc, #460]	; (8001708 <main+0x358>)
 800153c:	f7ff feb0 	bl	80012a0 <send_uart>
  	send_uart("\r\n");
 8001540:	487a      	ldr	r0, [pc, #488]	; (800172c <main+0x37c>)
 8001542:	f7ff fead 	bl	80012a0 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001546:	4874      	ldr	r0, [pc, #464]	; (8001718 <main+0x368>)
 8001548:	f007 fa31 	bl	80089ae <f_close>

  	clear_buffer();
 800154c:	f7ff fe8c 	bl	8001268 <clear_buffer>


  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001550:	220a      	movs	r2, #10
 8001552:	4977      	ldr	r1, [pc, #476]	; (8001730 <main+0x380>)
 8001554:	4870      	ldr	r0, [pc, #448]	; (8001718 <main+0x368>)
 8001556:	f006 f989 	bl	800786c <f_open>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <main+0x36c>)
 8001560:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 8001562:	4a69      	ldr	r2, [pc, #420]	; (8001708 <main+0x358>)
 8001564:	4b73      	ldr	r3, [pc, #460]	; (8001734 <main+0x384>)
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	2351      	movs	r3, #81	; 0x51
 800156c:	461a      	mov	r2, r3
 800156e:	f008 f803 	bl	8009578 <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001572:	4865      	ldr	r0, [pc, #404]	; (8001708 <main+0x358>)
 8001574:	f7ff fe60 	bl	8001238 <bufsize>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <main+0x388>)
 800157e:	4962      	ldr	r1, [pc, #392]	; (8001708 <main+0x358>)
 8001580:	4865      	ldr	r0, [pc, #404]	; (8001718 <main+0x368>)
 8001582:	f006 fec3 	bl	800830c <f_write>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	4b64      	ldr	r3, [pc, #400]	; (800171c <main+0x36c>)
 800158c:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 800158e:	4b63      	ldr	r3, [pc, #396]	; (800171c <main+0x36c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <main+0x1ec>
  	{
  		send_uart ("File2.txt created and the data is written \r\n");
 8001596:	4869      	ldr	r0, [pc, #420]	; (800173c <main+0x38c>)
 8001598:	f7ff fe82 	bl	80012a0 <send_uart>
  	}

  	/* Close file */
  	f_close(&fil);
 800159c:	485e      	ldr	r0, [pc, #376]	; (8001718 <main+0x368>)
 800159e:	f007 fa06 	bl	80089ae <f_close>



  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 80015a2:	f7ff fe61 	bl	8001268 <clear_buffer>

  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 80015a6:	2201      	movs	r2, #1
 80015a8:	4961      	ldr	r1, [pc, #388]	; (8001730 <main+0x380>)
 80015aa:	485b      	ldr	r0, [pc, #364]	; (8001718 <main+0x368>)
 80015ac:	f006 f95e 	bl	800786c <f_open>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <main+0x36c>)
 80015b6:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK){
 80015b8:	4b58      	ldr	r3, [pc, #352]	; (800171c <main+0x36c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <main+0x216>
  		send_uart ("file2.txt is open and the data is shown below\r\n");
 80015c0:	485f      	ldr	r0, [pc, #380]	; (8001740 <main+0x390>)
 80015c2:	f7ff fe6d 	bl	80012a0 <send_uart>
  	}

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 80015c6:	4b54      	ldr	r3, [pc, #336]	; (8001718 <main+0x368>)
 80015c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015cc:	330c      	adds	r3, #12
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <main+0x394>)
 80015d2:	494d      	ldr	r1, [pc, #308]	; (8001708 <main+0x358>)
 80015d4:	4850      	ldr	r0, [pc, #320]	; (8001718 <main+0x368>)
 80015d6:	f006 fc83 	bl	8007ee0 <f_read>
  	send_uart(buffer);
 80015da:	484b      	ldr	r0, [pc, #300]	; (8001708 <main+0x358>)
 80015dc:	f7ff fe60 	bl	80012a0 <send_uart>
  	send_uart("\r\n");
 80015e0:	4852      	ldr	r0, [pc, #328]	; (800172c <main+0x37c>)
 80015e2:	f7ff fe5d 	bl	80012a0 <send_uart>

  	/* Close file */
  	f_close(&fil);
 80015e6:	484c      	ldr	r0, [pc, #304]	; (8001718 <main+0x368>)
 80015e8:	f007 f9e1 	bl	80089ae <f_close>

  	clear_buffer();
 80015ec:	f7ff fe3c 	bl	8001268 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80015f0:	2203      	movs	r2, #3
 80015f2:	494f      	ldr	r1, [pc, #316]	; (8001730 <main+0x380>)
 80015f4:	4848      	ldr	r0, [pc, #288]	; (8001718 <main+0x368>)
 80015f6:	f006 f939 	bl	800786c <f_open>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <main+0x36c>)
 8001600:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 8001602:	4b45      	ldr	r3, [pc, #276]	; (8001718 <main+0x368>)
 8001604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001608:	330c      	adds	r3, #12
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	4842      	ldr	r0, [pc, #264]	; (8001718 <main+0x368>)
 8001610:	f007 f9f8 	bl	8008a04 <f_lseek>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b40      	ldr	r3, [pc, #256]	; (800171c <main+0x36c>)
 800161a:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <main+0x36c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <main+0x27a>
  	{
  		send_uart ("About to update the file2.txt\r\n");
 8001624:	4848      	ldr	r0, [pc, #288]	; (8001748 <main+0x398>)
 8001626:	f7ff fe3b 	bl	80012a0 <send_uart>
  	}

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 800162a:	493b      	ldr	r1, [pc, #236]	; (8001718 <main+0x368>)
 800162c:	4847      	ldr	r0, [pc, #284]	; (800174c <main+0x39c>)
 800162e:	f007 fe79 	bl	8009324 <f_puts>
 8001632:	4603      	mov	r3, r0
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <main+0x36c>)
 8001638:	701a      	strb	r2, [r3, #0]

  	f_close (&fil);
 800163a:	4837      	ldr	r0, [pc, #220]	; (8001718 <main+0x368>)
 800163c:	f007 f9b7 	bl	80089ae <f_close>

  	clear_buffer();
 8001640:	f7ff fe12 	bl	8001268 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 8001644:	2201      	movs	r2, #1
 8001646:	493a      	ldr	r1, [pc, #232]	; (8001730 <main+0x380>)
 8001648:	4833      	ldr	r0, [pc, #204]	; (8001718 <main+0x368>)
 800164a:	f006 f90f 	bl	800786c <f_open>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b32      	ldr	r3, [pc, #200]	; (800171c <main+0x36c>)
 8001654:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <main+0x368>)
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	330c      	adds	r3, #12
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <main+0x394>)
 8001662:	4929      	ldr	r1, [pc, #164]	; (8001708 <main+0x358>)
 8001664:	482c      	ldr	r0, [pc, #176]	; (8001718 <main+0x368>)
 8001666:	f006 fc3b 	bl	8007ee0 <f_read>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <main+0x36c>)
 8001670:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <main+0x36c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d108      	bne.n	800168c <main+0x2dc>
  	{
  		send_uart ("Below is the data from updated file2.txt\r\n");
 800167a:	4835      	ldr	r0, [pc, #212]	; (8001750 <main+0x3a0>)
 800167c:	f7ff fe10 	bl	80012a0 <send_uart>
  		send_uart(buffer);
 8001680:	4821      	ldr	r0, [pc, #132]	; (8001708 <main+0x358>)
 8001682:	f7ff fe0d 	bl	80012a0 <send_uart>
  		send_uart("\r\n");
 8001686:	4829      	ldr	r0, [pc, #164]	; (800172c <main+0x37c>)
 8001688:	f7ff fe0a 	bl	80012a0 <send_uart>
  	}

  	/* Close file */
  	f_close(&fil);
 800168c:	4822      	ldr	r0, [pc, #136]	; (8001718 <main+0x368>)
 800168e:	f007 f98e 	bl	80089ae <f_close>

  	clear_buffer();
 8001692:	f7ff fde9 	bl	8001268 <clear_buffer>


  	/*Create csv file to log random data*/
  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001696:	2213      	movs	r2, #19
 8001698:	492e      	ldr	r1, [pc, #184]	; (8001754 <main+0x3a4>)
 800169a:	481f      	ldr	r0, [pc, #124]	; (8001718 <main+0x368>)
 800169c:	f006 f8e6 	bl	800786c <f_open>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <main+0x36c>)
 80016a6:	701a      	strb	r2, [r3, #0]
  	/* Writing text */
  	f_puts("Timer(s), Cell_Voltages, Pack_Voltage, Pack_Current, Temperature\r\n ", &fil);
 80016a8:	491b      	ldr	r1, [pc, #108]	; (8001718 <main+0x368>)
 80016aa:	482b      	ldr	r0, [pc, #172]	; (8001758 <main+0x3a8>)
 80016ac:	f007 fe3a 	bl	8009324 <f_puts>
  	/* Close file */
  	fresult = f_close(&fil);
 80016b0:	4819      	ldr	r0, [pc, #100]	; (8001718 <main+0x368>)
 80016b2:	f007 f97c 	bl	80089ae <f_close>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <main+0x36c>)
 80016bc:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <main+0x36c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <main+0x31c>
  	{
  		send_uart ("File3.csv created and header is written \r\n");
 80016c6:	4825      	ldr	r0, [pc, #148]	; (800175c <main+0x3ac>)
 80016c8:	f7ff fdea 	bl	80012a0 <send_uart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Receive (&huart2, Rx_data, 4, 1000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 80016cc:	2108      	movs	r1, #8
 80016ce:	4824      	ldr	r0, [pc, #144]	; (8001760 <main+0x3b0>)
 80016d0:	f000 fde2 	bl	8002298 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016da:	4821      	ldr	r0, [pc, #132]	; (8001760 <main+0x3b0>)
 80016dc:	f000 fdc4 	bl	8002268 <HAL_GPIO_WritePin>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11); //toggle precharge relay
	  //HAL_UART_Transmit(&huart2,char_data,sizeof(char_data),10);
	  write_to_csvfile();
 80016e0:	f7ff fdf6 	bl	80012d0 <write_to_csvfile>
	  HAL_Delay(250);
 80016e4:	20fa      	movs	r0, #250	; 0xfa
 80016e6:	f000 fb3b 	bl	8001d60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 80016ea:	e7ef      	b.n	80016cc <main+0x31c>
 80016ec:	08009e6c 	.word	0x08009e6c
 80016f0:	200017b0 	.word	0x200017b0
 80016f4:	200002e0 	.word	0x200002e0
 80016f8:	08009e90 	.word	0x08009e90
 80016fc:	3fe00000 	.word	0x3fe00000
 8001700:	2000183c 	.word	0x2000183c
 8001704:	08009e94 	.word	0x08009e94
 8001708:	200013a8 	.word	0x200013a8
 800170c:	200013a4 	.word	0x200013a4
 8001710:	08009eb0 	.word	0x08009eb0
 8001714:	08009ecc 	.word	0x08009ecc
 8001718:	20001844 	.word	0x20001844
 800171c:	200017b4 	.word	0x200017b4
 8001720:	08009ed8 	.word	0x08009ed8
 8001724:	08009f1c 	.word	0x08009f1c
 8001728:	08009f4c 	.word	0x08009f4c
 800172c:	08009f8c 	.word	0x08009f8c
 8001730:	08009f90 	.word	0x08009f90
 8001734:	08009f9c 	.word	0x08009f9c
 8001738:	200017a8 	.word	0x200017a8
 800173c:	08009ff0 	.word	0x08009ff0
 8001740:	0800a020 	.word	0x0800a020
 8001744:	2000139c 	.word	0x2000139c
 8001748:	0800a050 	.word	0x0800a050
 800174c:	0800a070 	.word	0x0800a070
 8001750:	0800a0a4 	.word	0x0800a0a4
 8001754:	08009dfc 	.word	0x08009dfc
 8001758:	0800a0d0 	.word	0x0800a0d0
 800175c:	0800a114 	.word	0x0800a114
 8001760:	48000400 	.word	0x48000400

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b09e      	sub	sp, #120	; 0x78
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800176e:	2228      	movs	r2, #40	; 0x28
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f007 ff0e 	bl	8009594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001788:	463b      	mov	r3, r7
 800178a:	223c      	movs	r2, #60	; 0x3c
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f007 ff00 	bl	8009594 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001794:	2301      	movs	r3, #1
 8001796:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a2:	2301      	movs	r3, #1
 80017a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a6:	2302      	movs	r3, #2
 80017a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017b4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fd86 	bl	80022cc <HAL_RCC_OscConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017c6:	f000 f8e1 	bl	800198c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ca:	230f      	movs	r3, #15
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ce:	2302      	movs	r3, #2
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017e4:	2102      	movs	r1, #2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fc78 	bl	80030dc <HAL_RCC_ClockConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017f2:	f000 f8cb 	bl	800198c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fea1 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800180c:	f000 f8be 	bl	800198c <Error_Handler>
  }
}
 8001810:	bf00      	nop
 8001812:	3778      	adds	r7, #120	; 0x78
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_SPI2_Init+0x74>)
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <MX_SPI2_Init+0x78>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_SPI2_Init+0x74>)
 8001824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001828:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_SPI2_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_SPI2_Init+0x74>)
 8001832:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001836:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_SPI2_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_SPI2_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_SPI2_Init+0x74>)
 8001846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_SPI2_Init+0x74>)
 800184e:	2208      	movs	r2, #8
 8001850:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_SPI2_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_SPI2_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_SPI2_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_SPI2_Init+0x74>)
 8001866:	2207      	movs	r2, #7
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_SPI2_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_SPI2_Init+0x74>)
 8001872:	2208      	movs	r2, #8
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_SPI2_Init+0x74>)
 8001878:	f002 f816 	bl	80038a8 <HAL_SPI_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 f883 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200002e8 	.word	0x200002e8
 8001890:	40003800 	.word	0x40003800

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_USART2_UART_Init+0x58>)
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018d8:	f002 fd76 	bl	80043c8 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018e2:	f000 f853 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200017b8 	.word	0x200017b8
 80018f0:	40004400 	.word	0x40004400

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <MX_GPIO_Init+0x90>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <MX_GPIO_Init+0x90>)
 8001910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001914:	6153      	str	r3, [r2, #20]
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <MX_GPIO_Init+0x90>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <MX_GPIO_Init+0x90>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <MX_GPIO_Init+0x90>)
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	6153      	str	r3, [r2, #20]
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_GPIO_Init+0x90>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MX_GPIO_Init+0x90>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <MX_GPIO_Init+0x90>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001944:	6153      	str	r3, [r2, #20]
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_GPIO_Init+0x90>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f641 0108 	movw	r1, #6152	; 0x1808
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <MX_GPIO_Init+0x94>)
 800195a:	f000 fc85 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 800195e:	f641 0308 	movw	r3, #6152	; 0x1808
 8001962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_GPIO_Init+0x94>)
 8001978:	f000 fafc 	bl	8001f74 <HAL_GPIO_Init>

}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	48000400 	.word	0x48000400

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_MspInit+0x44>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_MspInit+0x44>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6193      	str	r3, [r2, #24]
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_MspInit+0x44>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_MspInit+0x44>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_MspInit+0x44>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_MspInit+0x44>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_SPI_MspInit+0x7c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d128      	bne.n	8001a54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	6153      	str	r3, [r2, #20]
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a44:	2305      	movs	r3, #5
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_SPI_MspInit+0x84>)
 8001a50:	f000 fa90 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40003800 	.word	0x40003800
 8001a60:	40021000 	.word	0x40021000
 8001a64:	48000400 	.word	0x48000400

08001a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_UART_MspInit+0x7c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d128      	bne.n	8001adc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_UART_MspInit+0x80>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <HAL_UART_MspInit+0x80>)
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_UART_MspInit+0x80>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_UART_MspInit+0x80>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <HAL_UART_MspInit+0x80>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	6153      	str	r3, [r2, #20]
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_UART_MspInit+0x80>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aba:	230c      	movs	r3, #12
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aca:	2307      	movs	r3, #7
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad8:	f000 fa4c 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40004400 	.word	0x40004400
 8001ae8:	40021000 	.word	0x40021000

08001aec <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <SDTimer_Handler+0x40>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <SDTimer_Handler+0x1c>
    Timer1--;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <SDTimer_Handler+0x40>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <SDTimer_Handler+0x40>)
 8001b06:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <SDTimer_Handler+0x44>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <SDTimer_Handler+0x34>
    Timer2--;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <SDTimer_Handler+0x44>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SDTimer_Handler+0x44>)
 8001b1e:	801a      	strh	r2, [r3, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20002874 	.word	0x20002874
 8001b30:	20002872 	.word	0x20002872

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <SysTick_Handler+0x30>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <SysTick_Handler+0x30>)
 8001b8c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <SysTick_Handler+0x30>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	d904      	bls.n	8001ba2 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Handler+0x30>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001b9e:	f7ff ffa5 	bl	8001aec <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba2:	f000 f8bd 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000a6 	.word	0x200000a6

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f007 fca0 	bl	8009524 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000a000 	.word	0x2000a000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	200000a8 	.word	0x200000a8
 8001c18:	200048f0 	.word	0x200048f0

08001c1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <SystemInit+0x20>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <SystemInit+0x20>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c46:	490e      	ldr	r1, [pc, #56]	; (8001c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c48:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <LoopForever+0xe>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c5c:	4c0b      	ldr	r4, [pc, #44]	; (8001c8c <LoopForever+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c6a:	f7ff ffd7 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f007 fc5f 	bl	8009530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c72:	f7ff fb9d 	bl	80013b0 <main>

08001c76 <LoopForever>:

LoopForever:
    b LoopForever
 8001c76:	e7fe      	b.n	8001c76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c78:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c80:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001c84:	0800a74c 	.word	0x0800a74c
  ldr r2, =_sbss
 8001c88:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001c8c:	200048f0 	.word	0x200048f0

08001c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC1_2_IRQHandler>
	...

08001c94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_Init+0x28>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_Init+0x28>)
 8001c9e:	f043 0310 	orr.w	r3, r3, #16
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 f931 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001caa:	200f      	movs	r0, #15
 8001cac:	f000 f808 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb0:	f7ff fe72 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f93b 	bl	8001f5a <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 f911 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000004 	.word	0x20000004
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	20000008 	.word	0x20000008

08001d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_IncTick+0x24>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	20002878 	.word	0x20002878

08001d48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20002878 	.word	0x20002878

08001d60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff ffee 	bl	8001d48 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffde 	bl	8001d48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000000c 	.word	0x2000000c

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff47 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff5c 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffb0 	bl	8001ec8 <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	e154      	b.n	800222e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8146 	beq.w	8002228 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d005      	beq.n	8001fb4 <HAL_GPIO_Init+0x40>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d130      	bne.n	8002016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fea:	2201      	movs	r2, #1
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 0201 	and.w	r2, r3, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b03      	cmp	r3, #3
 8002020:	d017      	beq.n	8002052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d123      	bne.n	80020a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	6939      	ldr	r1, [r7, #16]
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0203 	and.w	r2, r3, #3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80a0 	beq.w	8002228 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_GPIO_Init+0x2d8>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a57      	ldr	r2, [pc, #348]	; (800224c <HAL_GPIO_Init+0x2d8>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b55      	ldr	r3, [pc, #340]	; (800224c <HAL_GPIO_Init+0x2d8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002100:	4a53      	ldr	r2, [pc, #332]	; (8002250 <HAL_GPIO_Init+0x2dc>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800212a:	d019      	beq.n	8002160 <HAL_GPIO_Init+0x1ec>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a49      	ldr	r2, [pc, #292]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_GPIO_Init+0x1e8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a48      	ldr	r2, [pc, #288]	; (8002258 <HAL_GPIO_Init+0x2e4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1e4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a47      	ldr	r2, [pc, #284]	; (800225c <HAL_GPIO_Init+0x2e8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1e0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a46      	ldr	r2, [pc, #280]	; (8002260 <HAL_GPIO_Init+0x2ec>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1dc>
 800214c:	2304      	movs	r3, #4
 800214e:	e008      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002150:	2305      	movs	r3, #5
 8002152:	e006      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002154:	2303      	movs	r3, #3
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002158:	2302      	movs	r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002160:	2300      	movs	r3, #0
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002172:	4937      	ldr	r1, [pc, #220]	; (8002250 <HAL_GPIO_Init+0x2dc>)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002180:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021a4:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	f47f aea3 	bne.w	8001f84 <HAL_GPIO_Init+0x10>
  }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40021000 	.word	0x40021000
 8002250:	40010000 	.word	0x40010000
 8002254:	48000400 	.word	0x48000400
 8002258:	48000800 	.word	0x48000800
 800225c:	48000c00 	.word	0x48000c00
 8002260:	48001000 	.word	0x48001000
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002284:	e002      	b.n	800228c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	43d9      	mvns	r1, r3
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	400b      	ands	r3, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f000 bef4 	b.w	80030ce <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 816a 	beq.w	80025ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022f6:	4bb3      	ldr	r3, [pc, #716]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d00c      	beq.n	800231c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002302:	4bb0      	ldr	r3, [pc, #704]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d159      	bne.n	80023c2 <HAL_RCC_OscConfig+0xf6>
 800230e:	4bad      	ldr	r3, [pc, #692]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231a:	d152      	bne.n	80023c2 <HAL_RCC_OscConfig+0xf6>
 800231c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002320:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002330:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d102      	bne.n	800234e <HAL_RCC_OscConfig+0x82>
 8002348:	4b9e      	ldr	r3, [pc, #632]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0xae>
 800234e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002352:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002366:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800236a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002376:	4b93      	ldr	r3, [pc, #588]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800237e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002382:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002386:	fa92 f2a2 	rbit	r2, r2
 800238a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800238e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002392:	fab2 f282 	clz	r2, r2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f042 0220 	orr.w	r2, r2, #32
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f002 021f 	and.w	r2, r2, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 810c 	beq.w	80025c8 <HAL_RCC_OscConfig+0x2fc>
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 8106 	bne.w	80025c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	f000 be86 	b.w	80030ce <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x110>
 80023ce:	4b7d      	ldr	r3, [pc, #500]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7c      	ldr	r2, [pc, #496]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e030      	b.n	800243e <HAL_RCC_OscConfig+0x172>
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x134>
 80023e6:	4b77      	ldr	r3, [pc, #476]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a76      	ldr	r2, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80023ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b74      	ldr	r3, [pc, #464]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a73      	ldr	r2, [pc, #460]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80023f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01e      	b.n	800243e <HAL_RCC_OscConfig+0x172>
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x15a>
 800240c:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6c      	ldr	r2, [pc, #432]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 8002412:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a69      	ldr	r2, [pc, #420]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x172>
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a66      	ldr	r2, [pc, #408]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 8002438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243e:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f023 020f 	bic.w	r2, r3, #15
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	495d      	ldr	r1, [pc, #372]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 800244e:	4313      	orrs	r3, r2
 8002450:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d059      	beq.n	8002510 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fc74 	bl	8001d48 <HAL_GetTick>
 8002460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002466:	f7ff fc6f 	bl	8001d48 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d902      	bls.n	800247c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	f000 be29 	b.w	80030ce <HAL_RCC_OscConfig+0xe02>
 800247c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002480:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002490:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d102      	bne.n	80024ae <HAL_RCC_OscConfig+0x1e2>
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x20e>
 80024ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024e6:	fa92 f2a2 	rbit	r2, r2
 80024ea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80024ee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80024f2:	fab2 f282 	clz	r2, r2
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	f042 0220 	orr.w	r2, r2, #32
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f002 021f 	and.w	r2, r2, #31
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ab      	beq.n	8002466 <HAL_RCC_OscConfig+0x19a>
 800250e:	e05c      	b.n	80025ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fc1a 	bl	8001d48 <HAL_GetTick>
 8002514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251a:	f7ff fc15 	bl	8001d48 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d902      	bls.n	8002530 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	f000 bdcf 	b.w	80030ce <HAL_RCC_OscConfig+0xe02>
 8002530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002534:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002544:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <HAL_RCC_OscConfig+0x296>
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x2c2>
 8002562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002566:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800257e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_RCC_OscConfig+0x2f8>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002592:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002596:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800259a:	fa92 f2a2 	rbit	r2, r2
 800259e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80025a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80025a6:	fab2 f282 	clz	r2, r2
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	f042 0220 	orr.w	r2, r2, #32
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f002 021f 	and.w	r2, r2, #31
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f202 	lsl.w	r2, r1, r2
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ab      	bne.n	800251a <HAL_RCC_OscConfig+0x24e>
 80025c2:	e002      	b.n	80025ca <HAL_RCC_OscConfig+0x2fe>
 80025c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 816f 	beq.w	80028b8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025da:	4bd0      	ldr	r3, [pc, #832]	; (800291c <HAL_RCC_OscConfig+0x650>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025e6:	4bcd      	ldr	r3, [pc, #820]	; (800291c <HAL_RCC_OscConfig+0x650>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d16c      	bne.n	80026cc <HAL_RCC_OscConfig+0x400>
 80025f2:	4bca      	ldr	r3, [pc, #808]	; (800291c <HAL_RCC_OscConfig+0x650>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d166      	bne.n	80026cc <HAL_RCC_OscConfig+0x400>
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002610:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x362>
 8002628:	4bbc      	ldr	r3, [pc, #752]	; (800291c <HAL_RCC_OscConfig+0x650>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e013      	b.n	8002656 <HAL_RCC_OscConfig+0x38a>
 800262e:	2302      	movs	r3, #2
 8002630:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002640:	2302      	movs	r3, #2
 8002642:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002646:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002652:	4bb2      	ldr	r3, [pc, #712]	; (800291c <HAL_RCC_OscConfig+0x650>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2202      	movs	r2, #2
 8002658:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800265c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002660:	fa92 f2a2 	rbit	r2, r2
 8002664:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002668:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0220 	orr.w	r2, r2, #32
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f002 021f 	and.w	r2, r2, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_RCC_OscConfig+0x3cc>
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d002      	beq.n	8002698 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f000 bd1b 	b.w	80030ce <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4ba0      	ldr	r3, [pc, #640]	; (800291c <HAL_RCC_OscConfig+0x650>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	21f8      	movs	r1, #248	; 0xf8
 80026a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026b0:	fa91 f1a1 	rbit	r1, r1
 80026b4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80026b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80026bc:	fab1 f181 	clz	r1, r1
 80026c0:	b2c9      	uxtb	r1, r1
 80026c2:	408b      	lsls	r3, r1
 80026c4:	4995      	ldr	r1, [pc, #596]	; (800291c <HAL_RCC_OscConfig+0x650>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e0f5      	b.n	80028b8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8085 	beq.w	80027e2 <HAL_RCC_OscConfig+0x516>
 80026d8:	2301      	movs	r3, #1
 80026da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	461a      	mov	r2, r3
 8002700:	2301      	movs	r3, #1
 8002702:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff fb20 	bl	8001d48 <HAL_GetTick>
 8002708:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff fb1b 	bl	8001d48 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d902      	bls.n	8002724 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	f000 bcd5 	b.w	80030ce <HAL_RCC_OscConfig+0xe02>
 8002724:	2302      	movs	r3, #2
 8002726:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002736:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_RCC_OscConfig+0x488>
 800274e:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x650>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	e013      	b.n	800277c <HAL_RCC_OscConfig+0x4b0>
 8002754:	2302      	movs	r3, #2
 8002756:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002766:	2302      	movs	r3, #2
 8002768:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800276c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <HAL_RCC_OscConfig+0x650>)
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2202      	movs	r2, #2
 800277e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002782:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002786:	fa92 f2a2 	rbit	r2, r2
 800278a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800278e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0af      	beq.n	800270e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b5b      	ldr	r3, [pc, #364]	; (800291c <HAL_RCC_OscConfig+0x650>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	21f8      	movs	r1, #248	; 0xf8
 80027be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80027c6:	fa91 f1a1 	rbit	r1, r1
 80027ca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80027ce:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80027d2:	fab1 f181 	clz	r1, r1
 80027d6:	b2c9      	uxtb	r1, r1
 80027d8:	408b      	lsls	r3, r1
 80027da:	4950      	ldr	r1, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x650>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e06a      	b.n	80028b8 <HAL_RCC_OscConfig+0x5ec>
 80027e2:	2301      	movs	r3, #1
 80027e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002802:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	461a      	mov	r2, r3
 800280a:	2300      	movs	r3, #0
 800280c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7ff fa9b 	bl	8001d48 <HAL_GetTick>
 8002812:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7ff fa96 	bl	8001d48 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	f000 bc50 	b.w	80030ce <HAL_RCC_OscConfig+0xe02>
 800282e:	2302      	movs	r3, #2
 8002830:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_RCC_OscConfig+0x592>
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_RCC_OscConfig+0x650>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e013      	b.n	8002886 <HAL_RCC_OscConfig+0x5ba>
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002876:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x650>)
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	2202      	movs	r2, #2
 8002888:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800288c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002890:	fa92 f2a2 	rbit	r2, r2
 8002894:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002898:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f042 0220 	orr.w	r2, r2, #32
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f002 021f 	and.w	r2, r2, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f202 	lsl.w	r2, r1, r2
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1af      	bne.n	8002818 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80da 	beq.w	8002a7c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d069      	beq.n	80029a6 <HAL_RCC_OscConfig+0x6da>
 80028d2:	2301      	movs	r3, #1
 80028d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80028e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_OscConfig+0x654>)
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	461a      	mov	r2, r3
 80028f8:	2301      	movs	r3, #1
 80028fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7ff fa24 	bl	8001d48 <HAL_GetTick>
 8002900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002904:	e00e      	b.n	8002924 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002906:	f7ff fa1f 	bl	8001d48 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d906      	bls.n	8002924 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e3d9      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	10908120 	.word	0x10908120
 8002924:	2302      	movs	r3, #2
 8002926:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002936:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800293a:	2202      	movs	r2, #2
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002952:	2202      	movs	r2, #2
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002964:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	4ba5      	ldr	r3, [pc, #660]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800296e:	2102      	movs	r1, #2
 8002970:	6019      	str	r1, [r3, #0]
 8002972:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	fa93 f1a3 	rbit	r1, r3
 800297c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002980:	6019      	str	r1, [r3, #0]
  return result;
 8002982:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0b0      	beq.n	8002906 <HAL_RCC_OscConfig+0x63a>
 80029a4:	e06a      	b.n	8002a7c <HAL_RCC_OscConfig+0x7b0>
 80029a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fa93 f2a3 	rbit	r2, r3
 80029b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029bc:	601a      	str	r2, [r3, #0]
  return result;
 80029be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <HAL_RCC_OscConfig+0x934>)
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	461a      	mov	r2, r3
 80029d4:	2300      	movs	r3, #0
 80029d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7ff f9b6 	bl	8001d48 <HAL_GetTick>
 80029dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e2:	f7ff f9b1 	bl	8001d48 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e36b      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
 80029f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a12:	2202      	movs	r2, #2
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fa93 f2a3 	rbit	r2, r3
 8002a38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3e:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a46:	2102      	movs	r1, #2
 8002a48:	6019      	str	r1, [r3, #0]
 8002a4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f1a3 	rbit	r1, r3
 8002a54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a58:	6019      	str	r1, [r3, #0]
  return result;
 8002a5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1b2      	bne.n	80029e2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8158 	beq.w	8002d3c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a92:	4b5a      	ldr	r3, [pc, #360]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d112      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4a56      	ldr	r2, [pc, #344]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	61d3      	str	r3, [r2, #28]
 8002aaa:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_OscConfig+0x938>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11a      	bne.n	8002b06 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad0:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCC_OscConfig+0x938>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a4b      	ldr	r2, [pc, #300]	; (8002c04 <HAL_RCC_OscConfig+0x938>)
 8002ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ada:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002adc:	f7ff f934 	bl	8001d48 <HAL_GetTick>
 8002ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7ff f92f 	bl	8001d48 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e2e9      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <HAL_RCC_OscConfig+0x938>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ef      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x852>
 8002b10:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a39      	ldr	r2, [pc, #228]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6213      	str	r3, [r2, #32]
 8002b1c:	e02f      	b.n	8002b7e <HAL_RCC_OscConfig+0x8b2>
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCC_OscConfig+0x876>
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a30      	ldr	r2, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b3a:	f023 0304 	bic.w	r3, r3, #4
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	e01d      	b.n	8002b7e <HAL_RCC_OscConfig+0x8b2>
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x89a>
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6213      	str	r3, [r2, #32]
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	e00b      	b.n	8002b7e <HAL_RCC_OscConfig+0x8b2>
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6213      	str	r3, [r2, #32]
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d06b      	beq.n	8002c60 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b88:	f7ff f8de 	bl	8001d48 <HAL_GetTick>
 8002b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7ff f8d9 	bl	8001d48 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e291      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
 8002baa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bae:	2202      	movs	r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f2a3 	rbit	r2, r3
 8002bd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bd8:	601a      	str	r2, [r3, #0]
  return result;
 8002bda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bde:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCC_OscConfig+0x93c>
 8002bf4:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <HAL_RCC_OscConfig+0x930>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	e014      	b.n	8002c24 <HAL_RCC_OscConfig+0x958>
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	10908120 	.word	0x10908120
 8002c04:	40007000 	.word	0x40007000
 8002c08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	4bbb      	ldr	r3, [pc, #748]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c28:	2102      	movs	r1, #2
 8002c2a:	6011      	str	r1, [r2, #0]
 8002c2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	fa92 f1a2 	rbit	r1, r2
 8002c36:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c3a:	6011      	str	r1, [r2, #0]
  return result;
 8002c3c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d099      	beq.n	8002b92 <HAL_RCC_OscConfig+0x8c6>
 8002c5e:	e063      	b.n	8002d28 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7ff f872 	bl	8001d48 <HAL_GetTick>
 8002c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	e00b      	b.n	8002c82 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7ff f86d 	bl	8001d48 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e225      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
 8002c82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c86:	2202      	movs	r2, #2
 8002c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cb0:	601a      	str	r2, [r3, #0]
  return result;
 8002cb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d102      	bne.n	8002cd2 <HAL_RCC_OscConfig+0xa06>
 8002ccc:	4b90      	ldr	r3, [pc, #576]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	e00d      	b.n	8002cee <HAL_RCC_OscConfig+0xa22>
 8002cd2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	4b89      	ldr	r3, [pc, #548]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	6011      	str	r1, [r2, #0]
 8002cf6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	fa92 f1a2 	rbit	r1, r2
 8002d00:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d04:	6011      	str	r1, [r2, #0]
  return result;
 8002d06:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1a0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d28:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b77      	ldr	r3, [pc, #476]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4a76      	ldr	r2, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 81c2 	beq.w	80030cc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d48:	4b71      	ldr	r3, [pc, #452]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	f000 819c 	beq.w	800308e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	f040 8114 	bne.w	8002f8a <HAL_RCC_OscConfig+0xcbe>
 8002d62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	fa93 f2a3 	rbit	r2, r3
 8002d76:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d7a:	601a      	str	r2, [r3, #0]
  return result;
 8002d7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	461a      	mov	r2, r3
 8002d94:	2300      	movs	r3, #0
 8002d96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe ffd6 	bl	8001d48 <HAL_GetTick>
 8002d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da0:	e009      	b.n	8002db6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe ffd1 	bl	8001d48 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e18b      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
 8002db6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002dba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dce:	601a      	str	r2, [r3, #0]
  return result;
 8002dd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_OscConfig+0xb24>
 8002dea:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e01b      	b.n	8002e28 <HAL_RCC_OscConfig+0xb5c>
 8002df0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fa93 f2a3 	rbit	r2, r3
 8002e1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	4b3a      	ldr	r3, [pc, #232]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e30:	6011      	str	r1, [r2, #0]
 8002e32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	fa92 f1a2 	rbit	r1, r2
 8002e3c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e40:	6011      	str	r1, [r2, #0]
  return result;
 8002e42:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f042 0220 	orr.w	r2, r2, #32
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f002 021f 	and.w	r2, r2, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d19e      	bne.n	8002da2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	4925      	ldr	r1, [pc, #148]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
 8002e80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e98:	601a      	str	r2, [r3, #0]
  return result;
 8002e9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e9e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eaa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe ff47 	bl	8001d48 <HAL_GetTick>
 8002eba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ebe:	e009      	b.n	8002ed4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe ff42 	bl	8001d48 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0fc      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
 8002ed4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	fa93 f2a3 	rbit	r2, r3
 8002ee8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eec:	601a      	str	r2, [r3, #0]
  return result;
 8002eee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ef2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0xc48>
 8002f08:	4b01      	ldr	r3, [pc, #4]	; (8002f10 <HAL_RCC_OscConfig+0xc44>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	e01e      	b.n	8002f4c <HAL_RCC_OscConfig+0xc80>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fa93 f2a3 	rbit	r2, r3
 8002f28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_RCC_OscConfig+0xe0c>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f54:	6011      	str	r1, [r2, #0]
 8002f56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fa92 f1a2 	rbit	r1, r2
 8002f60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f64:	6011      	str	r1, [r2, #0]
  return result;
 8002f66:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f042 0220 	orr.w	r2, r2, #32
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f002 021f 	and.w	r2, r2, #31
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d09b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xbf4>
 8002f88:	e0a0      	b.n	80030cc <HAL_RCC_OscConfig+0xe00>
 8002f8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa2:	601a      	str	r2, [r3, #0]
  return result;
 8002fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fec2 	bl	8001d48 <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc8:	e009      	b.n	8002fde <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe febd 	bl	8001d48 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e077      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
 8002fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff6:	601a      	str	r2, [r3, #0]
  return result;
 8002ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_RCC_OscConfig+0xd4c>
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_OscConfig+0xe0c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0xd84>
 8003018:	f107 0320 	add.w	r3, r7, #32
 800301c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f107 0320 	add.w	r3, r7, #32
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f107 0318 	add.w	r3, r7, #24
 8003036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f107 0318 	add.w	r3, r7, #24
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	fa93 f2a3 	rbit	r2, r3
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_RCC_OscConfig+0xe0c>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f107 0210 	add.w	r2, r7, #16
 8003054:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003058:	6011      	str	r1, [r2, #0]
 800305a:	f107 0210 	add.w	r2, r7, #16
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	fa92 f1a2 	rbit	r1, r2
 8003064:	f107 020c 	add.w	r2, r7, #12
 8003068:	6011      	str	r1, [r2, #0]
  return result;
 800306a:	f107 020c 	add.w	r2, r7, #12
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f042 0220 	orr.w	r2, r2, #32
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	f002 021f 	and.w	r2, r2, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f202 	lsl.w	r2, r1, r2
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d19e      	bne.n	8002fca <HAL_RCC_OscConfig+0xcfe>
 800308c:	e01e      	b.n	80030cc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e018      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <HAL_RCC_OscConfig+0xe0c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d108      	bne.n	80030c8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030be:	1d3b      	adds	r3, r7, #4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000

080030dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b09e      	sub	sp, #120	; 0x78
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e162      	b.n	80033ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b90      	ldr	r3, [pc, #576]	; (8003338 <HAL_RCC_ClockConfig+0x25c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b8d      	ldr	r3, [pc, #564]	; (8003338 <HAL_RCC_ClockConfig+0x25c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 0207 	bic.w	r2, r3, #7
 800310a:	498b      	ldr	r1, [pc, #556]	; (8003338 <HAL_RCC_ClockConfig+0x25c>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b89      	ldr	r3, [pc, #548]	; (8003338 <HAL_RCC_ClockConfig+0x25c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e14a      	b.n	80033ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b82      	ldr	r3, [pc, #520]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	497f      	ldr	r1, [pc, #508]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80dc 	beq.w	8003308 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d13c      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xf6>
 8003158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d102      	bne.n	8003182 <HAL_RCC_ClockConfig+0xa6>
 800317c:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	e00f      	b.n	80031a2 <HAL_RCC_ClockConfig+0xc6>
 8003182:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003186:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	667b      	str	r3, [r7, #100]	; 0x64
 8003190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003194:	663b      	str	r3, [r7, #96]	; 0x60
 8003196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80031a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031aa:	fa92 f2a2 	rbit	r2, r2
 80031ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031b2:	fab2 f282 	clz	r2, r2
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	f042 0220 	orr.w	r2, r2, #32
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f002 021f 	and.w	r2, r2, #31
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f202 	lsl.w	r2, r1, r2
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d17b      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0f3      	b.n	80033ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d13c      	bne.n	8003254 <HAL_RCC_ClockConfig+0x178>
 80031da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HAL_RCC_ClockConfig+0x128>
 80031fe:	4b4f      	ldr	r3, [pc, #316]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	e00f      	b.n	8003224 <HAL_RCC_ClockConfig+0x148>
 8003204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003208:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	647b      	str	r3, [r7, #68]	; 0x44
 8003212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003216:	643b      	str	r3, [r7, #64]	; 0x40
 8003218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003220:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003228:	63ba      	str	r2, [r7, #56]	; 0x38
 800322a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800322c:	fa92 f2a2 	rbit	r2, r2
 8003230:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d13a      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0b2      	b.n	80033ba <HAL_RCC_ClockConfig+0x2de>
 8003254:	2302      	movs	r3, #2
 8003256:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_RCC_ClockConfig+0x1a0>
 8003276:	4b31      	ldr	r3, [pc, #196]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	e00d      	b.n	8003298 <HAL_RCC_ClockConfig+0x1bc>
 800327c:	2302      	movs	r3, #2
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	2302      	movs	r3, #2
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2202      	movs	r2, #2
 800329a:	61ba      	str	r2, [r7, #24]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	fa92 f2a2 	rbit	r2, r2
 80032a2:	617a      	str	r2, [r7, #20]
  return result;
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	fab2 f282 	clz	r2, r2
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f042 0220 	orr.w	r2, r2, #32
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f002 021f 	and.w	r2, r2, #31
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e079      	b.n	80033ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f023 0203 	bic.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	491a      	ldr	r1, [pc, #104]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d8:	f7fe fd36 	bl	8001d48 <HAL_GetTick>
 80032dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e0:	f7fe fd32 	bl	8001d48 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e061      	b.n	80033ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_ClockConfig+0x260>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 020c 	and.w	r2, r3, #12
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	429a      	cmp	r2, r3
 8003306:	d1eb      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x25c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d214      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RCC_ClockConfig+0x25c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 0207 	bic.w	r2, r3, #7
 800331e:	4906      	ldr	r1, [pc, #24]	; (8003338 <HAL_RCC_ClockConfig+0x25c>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_RCC_ClockConfig+0x25c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e040      	b.n	80033ba <HAL_RCC_ClockConfig+0x2de>
 8003338:	40022000 	.word	0x40022000
 800333c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_RCC_ClockConfig+0x2e8>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	491a      	ldr	r1, [pc, #104]	; (80033c4 <HAL_RCC_ClockConfig+0x2e8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_RCC_ClockConfig+0x2e8>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4912      	ldr	r1, [pc, #72]	; (80033c4 <HAL_RCC_ClockConfig+0x2e8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800337e:	f000 f829 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003382:	4601      	mov	r1, r0
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_RCC_ClockConfig+0x2e8>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338c:	22f0      	movs	r2, #240	; 0xf0
 800338e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	fa92 f2a2 	rbit	r2, r2
 8003396:	60fa      	str	r2, [r7, #12]
  return result;
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	fab2 f282 	clz	r2, r2
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	40d3      	lsrs	r3, r2
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x2ec>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	fa21 f303 	lsr.w	r3, r1, r3
 80033aa:	4a08      	ldr	r2, [pc, #32]	; (80033cc <HAL_RCC_ClockConfig+0x2f0>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_RCC_ClockConfig+0x2f4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fc84 	bl	8001cc0 <HAL_InitTick>
  
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3778      	adds	r7, #120	; 0x78
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	0800a188 	.word	0x0800a188
 80033cc:	20000004 	.word	0x20000004
 80033d0:	20000008 	.word	0x20000008

080033d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b08b      	sub	sp, #44	; 0x2c
 80033d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d002      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x30>
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d003      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0x36>
 8003402:	e03c      	b.n	800347e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003406:	623b      	str	r3, [r7, #32]
      break;
 8003408:	e03c      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003410:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003414:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	fa92 f2a2 	rbit	r2, r2
 800341c:	607a      	str	r2, [r7, #4]
  return result;
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	40d3      	lsrs	r3, r2
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <HAL_RCC_GetSysClockFreq+0xc8>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800342e:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	220f      	movs	r2, #15
 8003438:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	fa92 f2a2 	rbit	r2, r2
 8003440:	60fa      	str	r2, [r7, #12]
  return result;
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	40d3      	lsrs	r3, r2
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800345c:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc4>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	fbb2 f2f3 	udiv	r2, r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	e004      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	623b      	str	r3, [r7, #32]
      break;
 800347c:	e002      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003480:	623b      	str	r3, [r7, #32]
      break;
 8003482:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003484:	6a3b      	ldr	r3, [r7, #32]
}
 8003486:	4618      	mov	r0, r3
 8003488:	372c      	adds	r7, #44	; 0x2c
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	007a1200 	.word	0x007a1200
 800349c:	0800a1a0 	.word	0x0800a1a0
 80034a0:	0800a1b0 	.word	0x0800a1b0
 80034a4:	003d0900 	.word	0x003d0900

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034c6:	f7ff ffef 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034ca:	4601      	mov	r1, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	fa92 f2a2 	rbit	r2, r2
 80034e0:	603a      	str	r2, [r7, #0]
  return result;
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	fab2 f282 	clz	r2, r2
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	40d3      	lsrs	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	0800a198 	.word	0x0800a198

08003504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800350a:	f7ff ffcd 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 800350e:	4601      	mov	r1, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003518:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800351c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	fa92 f2a2 	rbit	r2, r2
 8003524:	603a      	str	r2, [r7, #0]
  return result;
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	fab2 f282 	clz	r2, r2
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	40d3      	lsrs	r3, r2
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	0800a198 	.word	0x0800a198

08003548 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b092      	sub	sp, #72	; 0x48
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80d4 	beq.w	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356c:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10e      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	4a4a      	ldr	r2, [pc, #296]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003582:	61d3      	str	r3, [r2, #28]
 8003584:	4b48      	ldr	r3, [pc, #288]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b45      	ldr	r3, [pc, #276]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d118      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a2:	4b42      	ldr	r3, [pc, #264]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a41      	ldr	r2, [pc, #260]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fe fbcb 	bl	8001d48 <HAL_GetTick>
 80035b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe fbc7 	bl	8001d48 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b64      	cmp	r3, #100	; 0x64
 80035c2:	d901      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e169      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b38      	ldr	r3, [pc, #224]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d4:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8084 	beq.w	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d07c      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f4:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	461a      	mov	r2, r3
 800361e:	2301      	movs	r3, #1
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	461a      	mov	r2, r3
 8003642:	2300      	movs	r3, #0
 8003644:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d04b      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fe fb77 	bl	8001d48 <HAL_GetTick>
 800365a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	e00a      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fe fb73 	bl	8001d48 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e113      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003674:	2302      	movs	r3, #2
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
 8003680:	2302      	movs	r3, #2
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	61fb      	str	r3, [r7, #28]
  return result;
 800368c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0302 	orr.w	r3, r3, #2
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d108      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036a2:	4b01      	ldr	r3, [pc, #4]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	e00d      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
 80036b0:	10908100 	.word	0x10908100
 80036b4:	2302      	movs	r3, #2
 80036b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	4b78      	ldr	r3, [pc, #480]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2202      	movs	r2, #2
 80036c6:	613a      	str	r2, [r7, #16]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	fa92 f2a2 	rbit	r2, r2
 80036ce:	60fa      	str	r2, [r7, #12]
  return result;
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	fab2 f282 	clz	r2, r2
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f002 021f 	and.w	r2, r2, #31
 80036e2:	2101      	movs	r1, #1
 80036e4:	fa01 f202 	lsl.w	r2, r1, r2
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0b7      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036ee:	4b6d      	ldr	r3, [pc, #436]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	496a      	ldr	r1, [pc, #424]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003700:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003712:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003720:	4b60      	ldr	r3, [pc, #384]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f023 0203 	bic.w	r2, r3, #3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	495d      	ldr	r1, [pc, #372]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373e:	4b59      	ldr	r3, [pc, #356]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4956      	ldr	r1, [pc, #344]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800375c:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	494e      	ldr	r1, [pc, #312]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376a:	4313      	orrs	r3, r2
 800376c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377a:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f023 0210 	bic.w	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	4947      	ldr	r1, [pc, #284]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003788:	4313      	orrs	r3, r2
 800378a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003798:	4b42      	ldr	r3, [pc, #264]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	493f      	ldr	r1, [pc, #252]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f023 0220 	bic.w	r2, r3, #32
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4938      	ldr	r1, [pc, #224]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d4:	4b33      	ldr	r3, [pc, #204]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	4930      	ldr	r1, [pc, #192]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037f2:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	4929      	ldr	r1, [pc, #164]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	4921      	ldr	r1, [pc, #132]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	491a      	ldr	r1, [pc, #104]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	4912      	ldr	r1, [pc, #72]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800385a:	4313      	orrs	r3, r2
 800385c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	490b      	ldr	r1, [pc, #44]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3748      	adds	r7, #72	; 0x48
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000

080038a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e09d      	b.n	80039f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ca:	d009      	beq.n	80038e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	61da      	str	r2, [r3, #28]
 80038d2:	e005      	b.n	80038e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fe f870 	bl	80019e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003916:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003920:	d902      	bls.n	8003928 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e002      	b.n	800392e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003936:	d007      	beq.n	8003948 <HAL_SPI_Init+0xa0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003940:	d002      	beq.n	8003948 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	ea42 0103 	orr.w	r1, r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	f003 0204 	and.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80039c4:	ea42 0103 	orr.w	r1, r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b088      	sub	sp, #32
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_SPI_Transmit+0x22>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e158      	b.n	8003cd2 <HAL_SPI_Transmit+0x2d4>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a28:	f7fe f98e 	bl	8001d48 <HAL_GetTick>
 8003a2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d002      	beq.n	8003a44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a42:	e13d      	b.n	8003cc0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_SPI_Transmit+0x52>
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a54:	e134      	b.n	8003cc0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	88fa      	ldrh	r2, [r7, #6]
 8003a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa0:	d10f      	bne.n	8003ac2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ae8:	d94b      	bls.n	8003b82 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_Transmit+0xfa>
 8003af2:	8afb      	ldrh	r3, [r7, #22]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d13e      	bne.n	8003b76 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b1c:	e02b      	b.n	8003b76 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d112      	bne.n	8003b52 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b50:	e011      	b.n	8003b76 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b52:	f7fe f8f9 	bl	8001d48 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d803      	bhi.n	8003b6a <HAL_SPI_Transmit+0x16c>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Transmit+0x172>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b74:	e0a4      	b.n	8003cc0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ce      	bne.n	8003b1e <HAL_SPI_Transmit+0x120>
 8003b80:	e07c      	b.n	8003c7c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_SPI_Transmit+0x192>
 8003b8a:	8afb      	ldrh	r3, [r7, #22]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d170      	bne.n	8003c72 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d912      	bls.n	8003bc0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	1c9a      	adds	r2, r3, #2
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b02      	subs	r3, #2
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bbe:	e058      	b.n	8003c72 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	7812      	ldrb	r2, [r2, #0]
 8003bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003be6:	e044      	b.n	8003c72 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d12b      	bne.n	8003c4e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d912      	bls.n	8003c26 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b02      	subs	r3, #2
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c24:	e025      	b.n	8003c72 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c4c:	e011      	b.n	8003c72 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c4e:	f7fe f87b 	bl	8001d48 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d803      	bhi.n	8003c66 <HAL_SPI_Transmit+0x268>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d102      	bne.n	8003c6c <HAL_SPI_Transmit+0x26e>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c70:	e026      	b.n	8003cc0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1b5      	bne.n	8003be8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	6839      	ldr	r1, [r7, #0]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fb5b 	bl	800433c <SPI_EndRxTxTransaction>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e000      	b.n	8003cc0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b08a      	sub	sp, #40	; 0x28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x26>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e1fb      	b.n	80040f8 <HAL_SPI_TransmitReceive+0x41e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d08:	f7fe f81e 	bl	8001d48 <HAL_GetTick>
 8003d0c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d14:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d24:	7efb      	ldrb	r3, [r7, #27]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d00e      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x6e>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d30:	d106      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x66>
 8003d3a:	7efb      	ldrb	r3, [r7, #27]
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d003      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d46:	e1cd      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0x80>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0x80>
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d60:	e1c0      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d003      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2205      	movs	r2, #5
 8003d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	887a      	ldrh	r2, [r7, #2]
 8003d86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	887a      	ldrh	r2, [r7, #2]
 8003d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	887a      	ldrh	r2, [r7, #2]
 8003da2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db8:	d802      	bhi.n	8003dc0 <HAL_SPI_TransmitReceive+0xe6>
 8003dba:	8a3b      	ldrh	r3, [r7, #16]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d908      	bls.n	8003dd2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	e007      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d007      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e08:	d97c      	bls.n	8003f04 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_TransmitReceive+0x13e>
 8003e12:	8a7b      	ldrh	r3, [r7, #18]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d169      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e3c:	e056      	b.n	8003eec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d11b      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x1aa>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <HAL_SPI_TransmitReceive+0x1aa>
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d113      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	1c9a      	adds	r2, r3, #2
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d11c      	bne.n	8003ecc <HAL_SPI_TransmitReceive+0x1f2>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	b292      	uxth	r2, r2
 8003eaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	1c9a      	adds	r2, r3, #2
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ecc:	f7fd ff3c 	bl	8001d48 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d807      	bhi.n	8003eec <HAL_SPI_TransmitReceive+0x212>
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d003      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003eea:	e0fb      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1a3      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x164>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d19d      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x164>
 8003f02:	e0df      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x23a>
 8003f0c:	8a7b      	ldrh	r3, [r7, #18]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	f040 80cb 	bne.w	80040aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d912      	bls.n	8003f44 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	1c9a      	adds	r2, r3, #2
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b02      	subs	r3, #2
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f42:	e0b2      	b.n	80040aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	7812      	ldrb	r2, [r2, #0]
 8003f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6a:	e09e      	b.n	80040aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d134      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x30a>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02f      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x30a>
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d12c      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d912      	bls.n	8003fba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b02      	subs	r3, #2
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb8:	e012      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d148      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x3aa>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d042      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d923      	bls.n	8004052 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	b292      	uxth	r2, r2
 8004016:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b02      	subs	r3, #2
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d81f      	bhi.n	8004080 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	e016      	b.n	8004080 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f103 020c 	add.w	r2, r3, #12
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004080:	2301      	movs	r3, #1
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004084:	f7fd fe60 	bl	8001d48 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004090:	429a      	cmp	r2, r3
 8004092:	d803      	bhi.n	800409c <HAL_SPI_TransmitReceive+0x3c2>
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d102      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x3c8>
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040a8:	e01c      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f47f af5b 	bne.w	8003f6c <HAL_SPI_TransmitReceive+0x292>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f47f af54 	bne.w	8003f6c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f937 	bl	800433c <SPI_EndRxTxTransaction>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	661a      	str	r2, [r3, #96]	; 0x60
 80040e0:	e000      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80040e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004110:	f7fd fe1a 	bl	8001d48 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4413      	add	r3, r2
 800411e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004120:	f7fd fe12 	bl	8001d48 <HAL_GetTick>
 8004124:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004126:	4b39      	ldr	r3, [pc, #228]	; (800420c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	015b      	lsls	r3, r3, #5
 800412c:	0d1b      	lsrs	r3, r3, #20
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004136:	e054      	b.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d050      	beq.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004140:	f7fd fe02 	bl	8001d48 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	429a      	cmp	r2, r3
 800414e:	d902      	bls.n	8004156 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d13d      	bne.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004164:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416e:	d111      	bne.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004178:	d004      	beq.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004182:	d107      	bne.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004192:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419c:	d10f      	bne.n	80041be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e017      	b.n	8004202 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3b01      	subs	r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d19b      	bne.n	8004138 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000004 	.word	0x20000004

08004210 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004222:	f7fd fd91 	bl	8001d48 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	4413      	add	r3, r2
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004232:	f7fd fd89 	bl	8001d48 <HAL_GetTick>
 8004236:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004240:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	00da      	lsls	r2, r3, #3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	0d1b      	lsrs	r3, r3, #20
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004258:	e060      	b.n	800431c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004260:	d107      	bne.n	8004272 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004270:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d050      	beq.n	800431c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800427a:	f7fd fd65 	bl	8001d48 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004286:	429a      	cmp	r2, r3
 8004288:	d902      	bls.n	8004290 <SPI_WaitFifoStateUntilTimeout+0x80>
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d13d      	bne.n	800430c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800429e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a8:	d111      	bne.n	80042ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b2:	d004      	beq.n	80042be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042bc:	d107      	bne.n	80042ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d6:	d10f      	bne.n	80042f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e010      	b.n	800432e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	3b01      	subs	r3, #1
 800431a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	429a      	cmp	r2, r3
 800432a:	d196      	bne.n	800425a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000004 	.word	0x20000004

0800433c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff ff5b 	bl	8004210 <SPI_WaitFifoStateUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e027      	b.n	80043c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2200      	movs	r2, #0
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff fec0 	bl	8004100 <SPI_WaitFlagStateUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438a:	f043 0220 	orr.w	r2, r3, #32
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e014      	b.n	80043c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff ff34 	bl	8004210 <SPI_WaitFifoStateUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e000      	b.n	80043c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e040      	b.n	800445c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fb3c 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8c0 	bl	800458c <UART_SetConfig>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e022      	b.n	800445c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa88 	bl	8004934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fb0f 	bl	8004a78 <UART_CheckIdleState>
 800445a:	4603      	mov	r3, r0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004478:	2b20      	cmp	r3, #32
 800447a:	f040 8082 	bne.w	8004582 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_UART_Transmit+0x26>
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e07a      	b.n	8004584 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UART_Transmit+0x38>
 8004498:	2302      	movs	r3, #2
 800449a:	e073      	b.n	8004584 <HAL_UART_Transmit+0x120>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2221      	movs	r2, #33	; 0x21
 80044b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044b2:	f7fd fc49 	bl	8001d48 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d108      	bne.n	80044e4 <HAL_UART_Transmit+0x80>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	e003      	b.n	80044ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044f4:	e02d      	b.n	8004552 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2180      	movs	r1, #128	; 0x80
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fb02 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e039      	b.n	8004584 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004522:	b292      	uxth	r2, r2
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	3302      	adds	r3, #2
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e008      	b.n	8004540 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	b292      	uxth	r2, r2
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1cb      	bne.n	80044f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 face 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e005      	b.n	8004584 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e000      	b.n	8004584 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
  }
}
 8004584:	4618      	mov	r0, r3
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80045ba:	f023 030c 	bic.w	r3, r3, #12
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	6979      	ldr	r1, [r7, #20]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4aae      	ldr	r2, [pc, #696]	; (80048c0 <UART_SetConfig+0x334>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d120      	bne.n	800464e <UART_SetConfig+0xc2>
 800460c:	4bad      	ldr	r3, [pc, #692]	; (80048c4 <UART_SetConfig+0x338>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b03      	cmp	r3, #3
 8004616:	d817      	bhi.n	8004648 <UART_SetConfig+0xbc>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x94>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004631 	.word	0x08004631
 8004624:	0800463d 	.word	0x0800463d
 8004628:	08004643 	.word	0x08004643
 800462c:	08004637 	.word	0x08004637
 8004630:	2301      	movs	r3, #1
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e0b5      	b.n	80047a2 <UART_SetConfig+0x216>
 8004636:	2302      	movs	r3, #2
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e0b2      	b.n	80047a2 <UART_SetConfig+0x216>
 800463c:	2304      	movs	r3, #4
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e0af      	b.n	80047a2 <UART_SetConfig+0x216>
 8004642:	2308      	movs	r3, #8
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e0ac      	b.n	80047a2 <UART_SetConfig+0x216>
 8004648:	2310      	movs	r3, #16
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e0a9      	b.n	80047a2 <UART_SetConfig+0x216>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a9d      	ldr	r2, [pc, #628]	; (80048c8 <UART_SetConfig+0x33c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d124      	bne.n	80046a2 <UART_SetConfig+0x116>
 8004658:	4b9a      	ldr	r3, [pc, #616]	; (80048c4 <UART_SetConfig+0x338>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004660:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004664:	d011      	beq.n	800468a <UART_SetConfig+0xfe>
 8004666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800466a:	d817      	bhi.n	800469c <UART_SetConfig+0x110>
 800466c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004670:	d011      	beq.n	8004696 <UART_SetConfig+0x10a>
 8004672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004676:	d811      	bhi.n	800469c <UART_SetConfig+0x110>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <UART_SetConfig+0xf8>
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d006      	beq.n	8004690 <UART_SetConfig+0x104>
 8004682:	e00b      	b.n	800469c <UART_SetConfig+0x110>
 8004684:	2300      	movs	r3, #0
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e08b      	b.n	80047a2 <UART_SetConfig+0x216>
 800468a:	2302      	movs	r3, #2
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e088      	b.n	80047a2 <UART_SetConfig+0x216>
 8004690:	2304      	movs	r3, #4
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e085      	b.n	80047a2 <UART_SetConfig+0x216>
 8004696:	2308      	movs	r3, #8
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e082      	b.n	80047a2 <UART_SetConfig+0x216>
 800469c:	2310      	movs	r3, #16
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e07f      	b.n	80047a2 <UART_SetConfig+0x216>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a89      	ldr	r2, [pc, #548]	; (80048cc <UART_SetConfig+0x340>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d124      	bne.n	80046f6 <UART_SetConfig+0x16a>
 80046ac:	4b85      	ldr	r3, [pc, #532]	; (80048c4 <UART_SetConfig+0x338>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80046b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046b8:	d011      	beq.n	80046de <UART_SetConfig+0x152>
 80046ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046be:	d817      	bhi.n	80046f0 <UART_SetConfig+0x164>
 80046c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046c4:	d011      	beq.n	80046ea <UART_SetConfig+0x15e>
 80046c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046ca:	d811      	bhi.n	80046f0 <UART_SetConfig+0x164>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <UART_SetConfig+0x14c>
 80046d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d4:	d006      	beq.n	80046e4 <UART_SetConfig+0x158>
 80046d6:	e00b      	b.n	80046f0 <UART_SetConfig+0x164>
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e061      	b.n	80047a2 <UART_SetConfig+0x216>
 80046de:	2302      	movs	r3, #2
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e05e      	b.n	80047a2 <UART_SetConfig+0x216>
 80046e4:	2304      	movs	r3, #4
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e05b      	b.n	80047a2 <UART_SetConfig+0x216>
 80046ea:	2308      	movs	r3, #8
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e058      	b.n	80047a2 <UART_SetConfig+0x216>
 80046f0:	2310      	movs	r3, #16
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e055      	b.n	80047a2 <UART_SetConfig+0x216>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a75      	ldr	r2, [pc, #468]	; (80048d0 <UART_SetConfig+0x344>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d124      	bne.n	800474a <UART_SetConfig+0x1be>
 8004700:	4b70      	ldr	r3, [pc, #448]	; (80048c4 <UART_SetConfig+0x338>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004708:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800470c:	d011      	beq.n	8004732 <UART_SetConfig+0x1a6>
 800470e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004712:	d817      	bhi.n	8004744 <UART_SetConfig+0x1b8>
 8004714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004718:	d011      	beq.n	800473e <UART_SetConfig+0x1b2>
 800471a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800471e:	d811      	bhi.n	8004744 <UART_SetConfig+0x1b8>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <UART_SetConfig+0x1a0>
 8004724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004728:	d006      	beq.n	8004738 <UART_SetConfig+0x1ac>
 800472a:	e00b      	b.n	8004744 <UART_SetConfig+0x1b8>
 800472c:	2300      	movs	r3, #0
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e037      	b.n	80047a2 <UART_SetConfig+0x216>
 8004732:	2302      	movs	r3, #2
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e034      	b.n	80047a2 <UART_SetConfig+0x216>
 8004738:	2304      	movs	r3, #4
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e031      	b.n	80047a2 <UART_SetConfig+0x216>
 800473e:	2308      	movs	r3, #8
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e02e      	b.n	80047a2 <UART_SetConfig+0x216>
 8004744:	2310      	movs	r3, #16
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e02b      	b.n	80047a2 <UART_SetConfig+0x216>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a61      	ldr	r2, [pc, #388]	; (80048d4 <UART_SetConfig+0x348>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d124      	bne.n	800479e <UART_SetConfig+0x212>
 8004754:	4b5b      	ldr	r3, [pc, #364]	; (80048c4 <UART_SetConfig+0x338>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800475c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004760:	d011      	beq.n	8004786 <UART_SetConfig+0x1fa>
 8004762:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004766:	d817      	bhi.n	8004798 <UART_SetConfig+0x20c>
 8004768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476c:	d011      	beq.n	8004792 <UART_SetConfig+0x206>
 800476e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004772:	d811      	bhi.n	8004798 <UART_SetConfig+0x20c>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <UART_SetConfig+0x1f4>
 8004778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477c:	d006      	beq.n	800478c <UART_SetConfig+0x200>
 800477e:	e00b      	b.n	8004798 <UART_SetConfig+0x20c>
 8004780:	2300      	movs	r3, #0
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e00d      	b.n	80047a2 <UART_SetConfig+0x216>
 8004786:	2302      	movs	r3, #2
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e00a      	b.n	80047a2 <UART_SetConfig+0x216>
 800478c:	2304      	movs	r3, #4
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e007      	b.n	80047a2 <UART_SetConfig+0x216>
 8004792:	2308      	movs	r3, #8
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e004      	b.n	80047a2 <UART_SetConfig+0x216>
 8004798:	2310      	movs	r3, #16
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e001      	b.n	80047a2 <UART_SetConfig+0x216>
 800479e:	2310      	movs	r3, #16
 80047a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047aa:	d15c      	bne.n	8004866 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80047ac:	7ffb      	ldrb	r3, [r7, #31]
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d827      	bhi.n	8004802 <UART_SetConfig+0x276>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0x22c>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047ed 	.word	0x080047ed
 80047c4:	08004803 	.word	0x08004803
 80047c8:	080047f3 	.word	0x080047f3
 80047cc:	08004803 	.word	0x08004803
 80047d0:	08004803 	.word	0x08004803
 80047d4:	08004803 	.word	0x08004803
 80047d8:	080047fb 	.word	0x080047fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7fe fe70 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 80047e0:	61b8      	str	r0, [r7, #24]
        break;
 80047e2:	e013      	b.n	800480c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e4:	f7fe fe8e 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 80047e8:	61b8      	str	r0, [r7, #24]
        break;
 80047ea:	e00f      	b.n	800480c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ec:	4b3a      	ldr	r3, [pc, #232]	; (80048d8 <UART_SetConfig+0x34c>)
 80047ee:	61bb      	str	r3, [r7, #24]
        break;
 80047f0:	e00c      	b.n	800480c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f2:	f7fe fdef 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80047f6:	61b8      	str	r0, [r7, #24]
        break;
 80047f8:	e008      	b.n	800480c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fe:	61bb      	str	r3, [r7, #24]
        break;
 8004800:	e004      	b.n	800480c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	77bb      	strb	r3, [r7, #30]
        break;
 800480a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8085 	beq.w	800491e <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	005a      	lsls	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	441a      	add	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	b29b      	uxth	r3, r3
 800482a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d916      	bls.n	8004860 <UART_SetConfig+0x2d4>
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d212      	bcs.n	8004860 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f023 030f 	bic.w	r3, r3, #15
 8004842:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	b29b      	uxth	r3, r3
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	b29a      	uxth	r2, r3
 8004850:	89fb      	ldrh	r3, [r7, #14]
 8004852:	4313      	orrs	r3, r2
 8004854:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	89fa      	ldrh	r2, [r7, #14]
 800485c:	60da      	str	r2, [r3, #12]
 800485e:	e05e      	b.n	800491e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	77bb      	strb	r3, [r7, #30]
 8004864:	e05b      	b.n	800491e <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004866:	7ffb      	ldrb	r3, [r7, #31]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d837      	bhi.n	80048dc <UART_SetConfig+0x350>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0x2e8>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	080048dd 	.word	0x080048dd
 8004884:	080048af 	.word	0x080048af
 8004888:	080048dd 	.word	0x080048dd
 800488c:	080048dd 	.word	0x080048dd
 8004890:	080048dd 	.word	0x080048dd
 8004894:	080048b7 	.word	0x080048b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7fe fe12 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 800489c:	61b8      	str	r0, [r7, #24]
        break;
 800489e:	e022      	b.n	80048e6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fe fe30 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 80048a4:	61b8      	str	r0, [r7, #24]
        break;
 80048a6:	e01e      	b.n	80048e6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <UART_SetConfig+0x34c>)
 80048aa:	61bb      	str	r3, [r7, #24]
        break;
 80048ac:	e01b      	b.n	80048e6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ae:	f7fe fd91 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80048b2:	61b8      	str	r0, [r7, #24]
        break;
 80048b4:	e017      	b.n	80048e6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ba:	61bb      	str	r3, [r7, #24]
        break;
 80048bc:	e013      	b.n	80048e6 <UART_SetConfig+0x35a>
 80048be:	bf00      	nop
 80048c0:	40013800 	.word	0x40013800
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40004400 	.word	0x40004400
 80048cc:	40004800 	.word	0x40004800
 80048d0:	40004c00 	.word	0x40004c00
 80048d4:	40005000 	.word	0x40005000
 80048d8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	77bb      	strb	r3, [r7, #30]
        break;
 80048e4:	bf00      	nop
    }

    if (pclk != 0U)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d018      	beq.n	800491e <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	085a      	lsrs	r2, r3, #1
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b0f      	cmp	r3, #15
 8004906:	d908      	bls.n	800491a <UART_SetConfig+0x38e>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490e:	d204      	bcs.n	800491a <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e001      	b.n	800491e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800492a:	7fbb      	ldrb	r3, [r7, #30]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01a      	beq.n	8004a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a32:	d10a      	bne.n	8004a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a88:	f7fd f95e 	bl	8001d48 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d10e      	bne.n	8004aba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f82d 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e023      	b.n	8004b02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d10e      	bne.n	8004ae6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f817 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e00d      	b.n	8004b02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b09c      	sub	sp, #112	; 0x70
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	e0a5      	b.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	f000 80a1 	beq.w	8004c68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fd f90f 	bl	8001d48 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x32>
 8004b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d13e      	bne.n	8004bba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b50:	667b      	str	r3, [r7, #100]	; 0x64
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e6      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	663b      	str	r3, [r7, #96]	; 0x60
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e067      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d04f      	beq.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd6:	d147      	bne.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
 8004c02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e6      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	613b      	str	r3, [r7, #16]
   return(result);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c34:	623a      	str	r2, [r7, #32]
 8004c36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	69f9      	ldr	r1, [r7, #28]
 8004c3a:	6a3a      	ldr	r2, [r7, #32]
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e5      	bne.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e010      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4013      	ands	r3, r2
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	bf0c      	ite	eq
 8004c78:	2301      	moveq	r3, #1
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	f43f af4a 	beq.w	8004b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3770      	adds	r7, #112	; 0x70
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004c98:	4904      	ldr	r1, [pc, #16]	; (8004cac <MX_FATFS_Init+0x18>)
 8004c9a:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <MX_FATFS_Init+0x1c>)
 8004c9c:	f004 fbc8 	bl	8009430 <FATFS_LinkDriver>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <MX_FATFS_Init+0x20>)
 8004ca6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ca8:	bf00      	nop
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	2000287c 	.word	0x2000287c
 8004cb0:	20000010 	.word	0x20000010
 8004cb4:	20002880 	.word	0x20002880

08004cb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004cbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fb ff93 	bl	8000c00 <SD_disk_initialize>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fc f870 	bl	8000dd8 <SD_disk_status>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	4603      	mov	r3, r0
 8004d12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8004d14:	7bf8      	ldrb	r0, [r7, #15]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	f7fc f872 	bl	8000e04 <SD_disk_read>
 8004d20:	4603      	mov	r3, r0
 8004d22:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8004d3c:	7bf8      	ldrb	r0, [r7, #15]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	f7fc f8c8 	bl	8000ed8 <SD_disk_write>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	603a      	str	r2, [r7, #0]
 8004d5e:	71fb      	strb	r3, [r7, #7]
 8004d60:	460b      	mov	r3, r1
 8004d62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	79b9      	ldrb	r1, [r7, #6]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc f938 	bl	8000fe0 <SD_disk_ioctl>
 8004d70:	4603      	mov	r3, r0
 8004d72:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	4a08      	ldr	r2, [pc, #32]	; (8004dac <disk_status+0x30>)
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	79fa      	ldrb	r2, [r7, #7]
 8004d94:	4905      	ldr	r1, [pc, #20]	; (8004dac <disk_status+0x30>)
 8004d96:	440a      	add	r2, r1
 8004d98:	7a12      	ldrb	r2, [r2, #8]
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4798      	blx	r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	200002cc 	.word	0x200002cc

08004db0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	4a0d      	ldr	r2, [pc, #52]	; (8004df8 <disk_initialize+0x48>)
 8004dc2:	5cd3      	ldrb	r3, [r2, r3]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d111      	bne.n	8004dec <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	4a0b      	ldr	r2, [pc, #44]	; (8004df8 <disk_initialize+0x48>)
 8004dcc:	2101      	movs	r1, #1
 8004dce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <disk_initialize+0x48>)
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	79fa      	ldrb	r2, [r7, #7]
 8004dde:	4906      	ldr	r1, [pc, #24]	; (8004df8 <disk_initialize+0x48>)
 8004de0:	440a      	add	r2, r1
 8004de2:	7a12      	ldrb	r2, [r2, #8]
 8004de4:	4610      	mov	r0, r2
 8004de6:	4798      	blx	r3
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	200002cc 	.word	0x200002cc

08004dfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <disk_read+0x3c>)
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	689c      	ldr	r4, [r3, #8]
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <disk_read+0x3c>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	7a18      	ldrb	r0, [r3, #8]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	47a0      	blx	r4
 8004e28:	4603      	mov	r3, r0
 8004e2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}
 8004e36:	bf00      	nop
 8004e38:	200002cc 	.word	0x200002cc

08004e3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <disk_write+0x3c>)
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	68dc      	ldr	r4, [r3, #12]
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	4a07      	ldr	r2, [pc, #28]	; (8004e78 <disk_write+0x3c>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	7a18      	ldrb	r0, [r3, #8]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	47a0      	blx	r4
 8004e68:	4603      	mov	r3, r0
 8004e6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd90      	pop	{r4, r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200002cc 	.word	0x200002cc

08004e7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	603a      	str	r2, [r7, #0]
 8004e86:	71fb      	strb	r3, [r7, #7]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <disk_ioctl+0x38>)
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	79fa      	ldrb	r2, [r7, #7]
 8004e9a:	4906      	ldr	r1, [pc, #24]	; (8004eb4 <disk_ioctl+0x38>)
 8004e9c:	440a      	add	r2, r1
 8004e9e:	7a10      	ldrb	r0, [r2, #8]
 8004ea0:	79b9      	ldrb	r1, [r7, #6]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4798      	blx	r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  return res;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200002cc 	.word	0x200002cc

08004eb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004ecc:	e007      	b.n	8004ede <mem_cpy+0x26>
		*d++ = *s++;
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	1c53      	adds	r3, r2, #1
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	6179      	str	r1, [r7, #20]
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	1e5a      	subs	r2, r3, #1
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f2      	bne.n	8004ece <mem_cpy+0x16>
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004ef6:	b480      	push	{r7}
 8004ef8:	b087      	sub	sp, #28
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004f06:	e005      	b.n	8004f14 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	617a      	str	r2, [r7, #20]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	1e5a      	subs	r2, r3, #1
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f4      	bne.n	8004f08 <mem_set+0x12>
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004f44:	bf00      	nop
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	1e5a      	subs	r2, r3, #1
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00d      	beq.n	8004f6c <mem_cmp+0x40>
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	61fa      	str	r2, [r7, #28]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	61ba      	str	r2, [r7, #24]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	1acb      	subs	r3, r1, r3
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ec      	beq.n	8004f46 <mem_cmp+0x1a>
	return r;
 8004f6c:	697b      	ldr	r3, [r7, #20]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004f84:	e002      	b.n	8004f8c <chk_chr+0x12>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <chk_chr+0x26>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d1f2      	bne.n	8004f86 <chk_chr+0xc>
	return *str;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e03d      	b.n	8005040 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8004fc4:	4932      	ldr	r1, [pc, #200]	; (8005090 <chk_lock+0xe0>)
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d02e      	beq.n	8005036 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004fd8:	492d      	ldr	r1, [pc, #180]	; (8005090 <chk_lock+0xe0>)
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d122      	bne.n	800503a <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8004ff4:	4926      	ldr	r1, [pc, #152]	; (8005090 <chk_lock+0xe0>)
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	3304      	adds	r3, #4
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500c:	3308      	adds	r3, #8
 800500e:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005010:	429a      	cmp	r2, r3
 8005012:	d112      	bne.n	800503a <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8005014:	491e      	ldr	r1, [pc, #120]	; (8005090 <chk_lock+0xe0>)
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	3308      	adds	r3, #8
 8005024:	881a      	ldrh	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502c:	3306      	adds	r3, #6
 800502e:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8005030:	429a      	cmp	r2, r3
 8005032:	d102      	bne.n	800503a <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8005034:	e007      	b.n	8005046 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8005036:	2301      	movs	r3, #1
 8005038:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d9be      	bls.n	8004fc4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d109      	bne.n	8005060 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <chk_lock+0xa8>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d101      	bne.n	800505c <chk_lock+0xac>
 8005058:	2300      	movs	r3, #0
 800505a:	e013      	b.n	8005084 <chk_lock+0xd4>
 800505c:	2312      	movs	r3, #18
 800505e:	e011      	b.n	8005084 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <chk_lock+0xce>
 8005066:	490a      	ldr	r1, [pc, #40]	; (8005090 <chk_lock+0xe0>)
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	330a      	adds	r3, #10
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507c:	d101      	bne.n	8005082 <chk_lock+0xd2>
 800507e:	2310      	movs	r3, #16
 8005080:	e000      	b.n	8005084 <chk_lock+0xd4>
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	200000b4 	.word	0x200000b4

08005094 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800509a:	2300      	movs	r3, #0
 800509c:	607b      	str	r3, [r7, #4]
 800509e:	e002      	b.n	80050a6 <enq_lock+0x12>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3301      	adds	r3, #1
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d809      	bhi.n	80050c0 <enq_lock+0x2c>
 80050ac:	490a      	ldr	r1, [pc, #40]	; (80050d8 <enq_lock+0x44>)
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ef      	bne.n	80050a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	200000b4 	.word	0x200000b4

080050dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e030      	b.n	800514e <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 80050ec:	495b      	ldr	r1, [pc, #364]	; (800525c <inc_lock+0x180>)
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d11f      	bne.n	8005148 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8005108:	4954      	ldr	r1, [pc, #336]	; (800525c <inc_lock+0x180>)
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4613      	mov	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	3304      	adds	r3, #4
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005120:	3308      	adds	r3, #8
 8005122:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8005124:	429a      	cmp	r2, r3
 8005126:	d10f      	bne.n	8005148 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8005128:	494c      	ldr	r1, [pc, #304]	; (800525c <inc_lock+0x180>)
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	3308      	adds	r3, #8
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005140:	3306      	adds	r3, #6
 8005142:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8005144:	429a      	cmp	r2, r3
 8005146:	d006      	beq.n	8005156 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d9cb      	bls.n	80050ec <inc_lock+0x10>
 8005154:	e000      	b.n	8005158 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8005156:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d14a      	bne.n	80051f4 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e002      	b.n	800516a <inc_lock+0x8e>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3301      	adds	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d809      	bhi.n	8005184 <inc_lock+0xa8>
 8005170:	493a      	ldr	r1, [pc, #232]	; (800525c <inc_lock+0x180>)
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4613      	mov	r3, r2
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ef      	bne.n	8005164 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d101      	bne.n	800518e <inc_lock+0xb2>
 800518a:	2300      	movs	r3, #0
 800518c:	e05f      	b.n	800524e <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005194:	6819      	ldr	r1, [r3, #0]
 8005196:	4831      	ldr	r0, [pc, #196]	; (800525c <inc_lock+0x180>)
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4403      	add	r3, r0
 80051a4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ac:	3308      	adds	r3, #8
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	482a      	ldr	r0, [pc, #168]	; (800525c <inc_lock+0x180>)
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4403      	add	r3, r0
 80051be:	3304      	adds	r3, #4
 80051c0:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c8:	3306      	adds	r3, #6
 80051ca:	8818      	ldrh	r0, [r3, #0]
 80051cc:	4923      	ldr	r1, [pc, #140]	; (800525c <inc_lock+0x180>)
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4613      	mov	r3, r2
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	3308      	adds	r3, #8
 80051dc:	4602      	mov	r2, r0
 80051de:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80051e0:	491e      	ldr	r1, [pc, #120]	; (800525c <inc_lock+0x180>)
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4613      	mov	r3, r2
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	330a      	adds	r3, #10
 80051f0:	2200      	movs	r2, #0
 80051f2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <inc_lock+0x138>
 80051fa:	4918      	ldr	r1, [pc, #96]	; (800525c <inc_lock+0x180>)
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4613      	mov	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	330a      	adds	r3, #10
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <inc_lock+0x138>
 8005210:	2300      	movs	r3, #0
 8005212:	e01c      	b.n	800524e <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <inc_lock+0x156>
 800521a:	4910      	ldr	r1, [pc, #64]	; (800525c <inc_lock+0x180>)
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4613      	mov	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	330a      	adds	r3, #10
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	b299      	uxth	r1, r3
 8005230:	e001      	b.n	8005236 <inc_lock+0x15a>
 8005232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005236:	4809      	ldr	r0, [pc, #36]	; (800525c <inc_lock+0x180>)
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4613      	mov	r3, r2
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4403      	add	r3, r0
 8005244:	330a      	adds	r3, #10
 8005246:	460a      	mov	r2, r1
 8005248:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	200000b4 	.word	0x200000b4

08005260 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3b01      	subs	r3, #1
 800526c:	607b      	str	r3, [r7, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d82e      	bhi.n	80052d2 <dec_lock+0x72>
		n = Files[i].ctr;
 8005274:	491b      	ldr	r1, [pc, #108]	; (80052e4 <dec_lock+0x84>)
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	330a      	adds	r3, #10
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005288:	89fb      	ldrh	r3, [r7, #14]
 800528a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528e:	d101      	bne.n	8005294 <dec_lock+0x34>
 8005290:	2300      	movs	r3, #0
 8005292:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005294:	89fb      	ldrh	r3, [r7, #14]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <dec_lock+0x40>
 800529a:	89fb      	ldrh	r3, [r7, #14]
 800529c:	3b01      	subs	r3, #1
 800529e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80052a0:	4910      	ldr	r1, [pc, #64]	; (80052e4 <dec_lock+0x84>)
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	330a      	adds	r3, #10
 80052b0:	89fa      	ldrh	r2, [r7, #14]
 80052b2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <dec_lock+0x6c>
 80052ba:	490a      	ldr	r1, [pc, #40]	; (80052e4 <dec_lock+0x84>)
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	737b      	strb	r3, [r7, #13]
 80052d0:	e001      	b.n	80052d6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80052d2:	2302      	movs	r3, #2
 80052d4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80052d6:	7b7b      	ldrb	r3, [r7, #13]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	200000b4 	.word	0x200000b4

080052e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e016      	b.n	8005324 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80052f6:	4910      	ldr	r1, [pc, #64]	; (8005338 <clear_lock+0x50>)
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d108      	bne.n	800531e <clear_lock+0x36>
 800530c:	490a      	ldr	r1, [pc, #40]	; (8005338 <clear_lock+0x50>)
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d9e5      	bls.n	80052f6 <clear_lock+0xe>
	}
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	200000b4 	.word	0x200000b4

0800533c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534e:	3304      	adds	r3, #4
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d047      	beq.n	80053e6 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800535c:	330c      	adds	r3, #12
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005368:	3301      	adds	r3, #1
 800536a:	7818      	ldrb	r0, [r3, #0]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	2301      	movs	r3, #1
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	f7ff fd63 	bl	8004e3c <disk_write>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <sync_window+0x46>
			res = FR_DISK_ERR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
 8005380:	e031      	b.n	80053e6 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005388:	3304      	adds	r3, #4
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	1ad2      	subs	r2, r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a0:	3318      	adds	r3, #24
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d21e      	bcs.n	80053e6 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ae:	3303      	adds	r3, #3
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	e014      	b.n	80053e0 <sync_window+0xa4>
					wsect += fs->fsize;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	3318      	adds	r3, #24
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053cc:	3301      	adds	r3, #1
 80053ce:	7818      	ldrb	r0, [r3, #0]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	2301      	movs	r3, #1
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	f7ff fd31 	bl	8004e3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	3b01      	subs	r3, #1
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d8e7      	bhi.n	80053b6 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005404:	330c      	adds	r3, #12
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d01f      	beq.n	800544e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ff94 	bl	800533c <sync_window>
 8005414:	4603      	mov	r3, r0
 8005416:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d117      	bne.n	800544e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005424:	3301      	adds	r3, #1
 8005426:	7818      	ldrb	r0, [r3, #0]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	2301      	movs	r3, #1
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	f7ff fce5 	bl	8004dfc <disk_read>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005438:	f04f 33ff 	mov.w	r3, #4294967295
 800543c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800543e:	2301      	movs	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005448:	330c      	adds	r3, #12
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ff6b 	bl	800533c <sync_window>
 8005466:	4603      	mov	r3, r0
 8005468:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 80bd 	bne.w	80055ec <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b03      	cmp	r3, #3
 800547c:	f040 80a7 	bne.w	80055ce <sync_fs+0x176>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005486:	3305      	adds	r3, #5
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	f040 809f 	bne.w	80055ce <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005498:	330a      	adds	r3, #10
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	2100      	movs	r1, #0
 80054a0:	f7ff fd29 	bl	8004ef6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2255      	movs	r2, #85	; 0x55
 80054a8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	22aa      	movs	r2, #170	; 0xaa
 80054b0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2252      	movs	r2, #82	; 0x52
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2252      	movs	r2, #82	; 0x52
 80054be:	705a      	strb	r2, [r3, #1]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2261      	movs	r2, #97	; 0x61
 80054c4:	709a      	strb	r2, [r3, #2]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2241      	movs	r2, #65	; 0x41
 80054ca:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2272      	movs	r2, #114	; 0x72
 80054d0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2272      	movs	r2, #114	; 0x72
 80054d8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2241      	movs	r2, #65	; 0x41
 80054e0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2261      	movs	r2, #97	; 0x61
 80054e8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f2:	3310      	adds	r3, #16
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005504:	3310      	adds	r3, #16
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	b29b      	uxth	r3, r3
 800550e:	b2da      	uxtb	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551c:	3310      	adds	r3, #16
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	b2da      	uxtb	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005530:	3310      	adds	r3, #16
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0e1b      	lsrs	r3, r3, #24
 8005536:	b2da      	uxtb	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005544:	330c      	adds	r3, #12
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005556:	330c      	adds	r3, #12
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	b29b      	uxth	r3, r3
 8005560:	b2da      	uxtb	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556e:	330c      	adds	r3, #12
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	0c1b      	lsrs	r3, r3, #16
 8005574:	b2da      	uxtb	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005582:	330c      	adds	r3, #12
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	0e1b      	lsrs	r3, r3, #24
 8005588:	b2da      	uxtb	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005596:	331c      	adds	r3, #28
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055a2:	330c      	adds	r3, #12
 80055a4:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ac:	3301      	adds	r3, #1
 80055ae:	7818      	ldrb	r0, [r3, #0]
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055b8:	330c      	adds	r3, #12
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	2301      	movs	r3, #1
 80055be:	f7ff fc3d 	bl	8004e3c <disk_write>
			fs->fsi_flag = 0;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c8:	3305      	adds	r3, #5
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d4:	3301      	adds	r3, #1
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2200      	movs	r2, #0
 80055da:	2100      	movs	r1, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fc4d 	bl	8004e7c <disk_ioctl>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <sync_fs+0x194>
			res = FR_DISK_ERR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	3b02      	subs	r3, #2
 8005604:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560c:	3314      	adds	r3, #20
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3b02      	subs	r3, #2
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d301      	bcc.n	800561c <clust2sect+0x26>
 8005618:	2300      	movs	r3, #0
 800561a:	e00e      	b.n	800563a <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005622:	3302      	adds	r3, #2
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	fb03 f202 	mul.w	r2, r3, r2
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005634:	3308      	adds	r3, #8
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4413      	add	r3, r2
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d907      	bls.n	8005666 <get_fat+0x20>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565c:	3314      	adds	r3, #20
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005666:	2301      	movs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e0ec      	b.n	8005846 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800566c:	f04f 33ff 	mov.w	r3, #4294967295
 8005670:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b03      	cmp	r3, #3
 800567c:	f000 809e 	beq.w	80057bc <get_fat+0x176>
 8005680:	2b03      	cmp	r3, #3
 8005682:	f300 80d6 	bgt.w	8005832 <get_fat+0x1ec>
 8005686:	2b01      	cmp	r3, #1
 8005688:	d002      	beq.n	8005690 <get_fat+0x4a>
 800568a:	2b02      	cmp	r3, #2
 800568c:	d063      	beq.n	8005756 <get_fat+0x110>
 800568e:	e0d0      	b.n	8005832 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ac:	330a      	adds	r3, #10
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80056b8:	4413      	add	r3, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fe97 	bl	80053f0 <move_window>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f040 80b7 	bne.w	8005838 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	60fa      	str	r2, [r7, #12]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056d6:	320a      	adds	r2, #10
 80056d8:	8812      	ldrh	r2, [r2, #0]
 80056da:	fbb3 f1f2 	udiv	r1, r3, r2
 80056de:	fb02 f201 	mul.w	r2, r2, r1
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	5cd3      	ldrb	r3, [r2, r3]
 80056e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f8:	330a      	adds	r3, #10
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	4619      	mov	r1, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	fbb3 f3f1 	udiv	r3, r3, r1
 8005704:	4413      	add	r3, r2
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fe71 	bl	80053f0 <move_window>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 8093 	bne.w	800583c <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571c:	330a      	adds	r3, #10
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	fbb3 f1f2 	udiv	r1, r3, r2
 8005728:	fb02 f201 	mul.w	r2, r2, r1
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	5cd3      	ldrb	r3, [r2, r3]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	461a      	mov	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4313      	orrs	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <get_fat+0x106>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	e002      	b.n	8005752 <get_fat+0x10c>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005752:	617b      	str	r3, [r7, #20]
			break;
 8005754:	e077      	b.n	8005846 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005764:	330a      	adds	r3, #10
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	b29b      	uxth	r3, r3
 800576c:	4619      	mov	r1, r3
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	fbb3 f3f1 	udiv	r3, r3, r1
 8005774:	4413      	add	r3, r2
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fe39 	bl	80053f0 <move_window>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d15d      	bne.n	8005840 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	005a      	lsls	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578e:	330a      	adds	r3, #10
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	fbb2 f1f3 	udiv	r1, r2, r3
 8005796:	fb03 f301 	mul.w	r3, r3, r1
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4413      	add	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3301      	adds	r3, #1
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	b21a      	sxth	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	b21b      	sxth	r3, r3
 80057b2:	4313      	orrs	r3, r2
 80057b4:	b21b      	sxth	r3, r3
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	617b      	str	r3, [r7, #20]
			break;
 80057ba:	e044      	b.n	8005846 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ca:	330a      	adds	r3, #10
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4619      	mov	r1, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057da:	4413      	add	r3, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fe06 	bl	80053f0 <move_window>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d12c      	bne.n	8005844 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	009a      	lsls	r2, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f4:	330a      	adds	r3, #10
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80057fc:	fb03 f301 	mul.w	r3, r3, r1
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3303      	adds	r3, #3
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	061a      	lsls	r2, r3, #24
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	3302      	adds	r3, #2
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	041b      	lsls	r3, r3, #16
 8005818:	4313      	orrs	r3, r2
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	3201      	adds	r2, #1
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	0212      	lsls	r2, r2, #8
 8005822:	4313      	orrs	r3, r2
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	4313      	orrs	r3, r2
 800582a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800582e:	617b      	str	r3, [r7, #20]
			break;
 8005830:	e009      	b.n	8005846 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8005832:	2301      	movs	r3, #1
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e006      	b.n	8005846 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005838:	bf00      	nop
 800583a:	e004      	b.n	8005846 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800583c:	bf00      	nop
 800583e:	e002      	b.n	8005846 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005844:	bf00      	nop
		}
	}

	return val;
 8005846:	697b      	ldr	r3, [r7, #20]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d907      	bls.n	8005872 <put_fat+0x22>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005868:	3314      	adds	r3, #20
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	d302      	bcc.n	8005878 <put_fat+0x28>
		res = FR_INT_ERR;
 8005872:	2302      	movs	r3, #2
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e146      	b.n	8005b06 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b03      	cmp	r3, #3
 8005882:	f000 80d9 	beq.w	8005a38 <put_fat+0x1e8>
 8005886:	2b03      	cmp	r3, #3
 8005888:	f300 8133 	bgt.w	8005af2 <put_fat+0x2a2>
 800588c:	2b01      	cmp	r3, #1
 800588e:	d003      	beq.n	8005898 <put_fat+0x48>
 8005890:	2b02      	cmp	r3, #2
 8005892:	f000 8095 	beq.w	80059c0 <put_fat+0x170>
 8005896:	e12c      	b.n	8005af2 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	330a      	adds	r3, #10
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	4619      	mov	r1, r3
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c0:	4413      	add	r3, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fd93 	bl	80053f0 <move_window>
 80058ca:	4603      	mov	r3, r0
 80058cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058ce:	7ffb      	ldrb	r3, [r7, #31]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8111 	bne.w	8005af8 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	617a      	str	r2, [r7, #20]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058e2:	320a      	adds	r2, #10
 80058e4:	8812      	ldrh	r2, [r2, #0]
 80058e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80058ea:	fb02 f201 	mul.w	r2, r2, r1
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00d      	beq.n	800591c <put_fat+0xcc>
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	b25b      	sxtb	r3, r3
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	b25a      	sxtb	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	b25b      	sxtb	r3, r3
 8005914:	4313      	orrs	r3, r2
 8005916:	b25b      	sxtb	r3, r3
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e001      	b.n	8005920 <put_fat+0xd0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592a:	3304      	adds	r3, #4
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593e:	330a      	adds	r3, #10
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	4619      	mov	r1, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	fbb3 f3f1 	udiv	r3, r3, r1
 800594a:	4413      	add	r3, r2
 800594c:	4619      	mov	r1, r3
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff fd4e 	bl	80053f0 <move_window>
 8005954:	4603      	mov	r3, r0
 8005956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005958:	7ffb      	ldrb	r3, [r7, #31]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 80ce 	bne.w	8005afc <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005966:	330a      	adds	r3, #10
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005972:	fb02 f201 	mul.w	r2, r2, r1
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <put_fat+0x140>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e00e      	b.n	80059ae <put_fat+0x15e>
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b25b      	sxtb	r3, r3
 8005996:	f023 030f 	bic.w	r3, r3, #15
 800599a:	b25a      	sxtb	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b25b      	sxtb	r3, r3
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b8:	3304      	adds	r3, #4
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]
			break;
 80059be:	e0a2      	b.n	8005b06 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ce:	330a      	adds	r3, #10
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	4619      	mov	r1, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	fbb3 f3f1 	udiv	r3, r3, r1
 80059de:	4413      	add	r3, r2
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fd04 	bl	80053f0 <move_window>
 80059e8:	4603      	mov	r3, r0
 80059ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059ec:	7ffb      	ldrb	r3, [r7, #31]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 8086 	bne.w	8005b00 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	005a      	lsls	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fe:	330a      	adds	r3, #10
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a06:	fb03 f301 	mul.w	r3, r3, r1
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	3301      	adds	r3, #1
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a30:	3304      	adds	r3, #4
 8005a32:	2201      	movs	r2, #1
 8005a34:	701a      	strb	r2, [r3, #0]
			break;
 8005a36:	e066      	b.n	8005b06 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a46:	330a      	adds	r3, #10
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	4619      	mov	r1, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a56:	4413      	add	r3, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fcc8 	bl	80053f0 <move_window>
 8005a60:	4603      	mov	r3, r0
 8005a62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a64:	7ffb      	ldrb	r3, [r7, #31]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d14c      	bne.n	8005b04 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	009a      	lsls	r2, r3, #2
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a74:	330a      	adds	r3, #10
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a7c:	fb03 f301 	mul.w	r3, r3, r1
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	3303      	adds	r3, #3
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	061a      	lsls	r2, r3, #24
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	3302      	adds	r3, #2
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	3201      	adds	r2, #1
 8005a9e:	7812      	ldrb	r2, [r2, #0]
 8005aa0:	0212      	lsls	r2, r2, #8
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	7812      	ldrb	r2, [r2, #0]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	0c1a      	lsrs	r2, r3, #16
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	0e1a      	lsrs	r2, r3, #24
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	3303      	adds	r3, #3
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aea:	3304      	adds	r3, #4
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
			break;
 8005af0:	e009      	b.n	8005b06 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8005af2:	2302      	movs	r3, #2
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e006      	b.n	8005b06 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8005af8:	bf00      	nop
 8005afa:	e004      	b.n	8005b06 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8005b04:	bf00      	nop
		}
	}

	return res;
 8005b06:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d907      	bls.n	8005b30 <remove_chain+0x20>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b26:	3314      	adds	r3, #20
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <remove_chain+0x26>
		res = FR_INT_ERR;
 8005b30:	2302      	movs	r3, #2
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	e04f      	b.n	8005bd6 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005b3a:	e040      	b.n	8005bbe <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fd81 	bl	8005646 <get_fat>
 8005b44:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d041      	beq.n	8005bd0 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d102      	bne.n	8005b58 <remove_chain+0x48>
 8005b52:	2302      	movs	r3, #2
 8005b54:	73fb      	strb	r3, [r7, #15]
 8005b56:	e03e      	b.n	8005bd6 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d102      	bne.n	8005b66 <remove_chain+0x56>
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
 8005b64:	e037      	b.n	8005bd6 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005b66:	2200      	movs	r2, #0
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fe70 	bl	8005850 <put_fat>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d12c      	bne.n	8005bd4 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b80:	3310      	adds	r3, #16
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d017      	beq.n	8005bba <remove_chain+0xaa>
				fs->free_clust++;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b90:	3310      	adds	r3, #16
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9c:	3310      	adds	r3, #16
 8005b9e:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	3305      	adds	r3, #5
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb6:	3305      	adds	r3, #5
 8005bb8:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d3b6      	bcc.n	8005b3c <remove_chain+0x2c>
 8005bce:	e002      	b.n	8005bd6 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8005bd0:	bf00      	nop
 8005bd2:	e000      	b.n	8005bd6 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8005bd4:	bf00      	nop
		}
	}

	return res;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d113      	bne.n	8005c18 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <create_chain+0x32>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c08:	3314      	adds	r3, #20
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d31e      	bcc.n	8005c50 <create_chain+0x70>
 8005c12:	2301      	movs	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e01b      	b.n	8005c50 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fd13 	bl	8005646 <get_fat>
 8005c20:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d801      	bhi.n	8005c2c <create_chain+0x4c>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e086      	b.n	8005d3a <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d101      	bne.n	8005c38 <create_chain+0x58>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	e080      	b.n	8005d3a <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3e:	3314      	adds	r3, #20
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d201      	bcs.n	8005c4c <create_chain+0x6c>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	e076      	b.n	8005d3a <create_chain+0x15a>
		scl = clst;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3301      	adds	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c60:	3314      	adds	r3, #20
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d307      	bcc.n	8005c7a <create_chain+0x9a>
			ncl = 2;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d901      	bls.n	8005c7a <create_chain+0x9a>
 8005c76:	2300      	movs	r3, #0
 8005c78:	e05f      	b.n	8005d3a <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005c7a:	6979      	ldr	r1, [r7, #20]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fce2 	bl	8005646 <get_fat>
 8005c82:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00e      	beq.n	8005ca8 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d002      	beq.n	8005c98 <create_chain+0xb8>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <create_chain+0xbc>
			return cs;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	e04e      	b.n	8005d3a <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d1d7      	bne.n	8005c54 <create_chain+0x74>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e048      	b.n	8005d3a <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8005ca8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005caa:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005cae:	6979      	ldr	r1, [r7, #20]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff fdcd 	bl	8005850 <put_fat>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <create_chain+0xf4>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff fdc0 	bl	8005850 <put_fat>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d126      	bne.n	8005d28 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cec:	3310      	adds	r3, #16
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d020      	beq.n	8005d38 <create_chain+0x158>
			fs->free_clust--;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfc:	3310      	adds	r3, #16
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	1e5a      	subs	r2, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d08:	3310      	adds	r3, #16
 8005d0a:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d12:	3305      	adds	r3, #5
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d22:	3305      	adds	r3, #5
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e007      	b.n	8005d38 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d102      	bne.n	8005d34 <create_chain+0x154>
 8005d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d32:	e000      	b.n	8005d36 <create_chain+0x156>
 8005d34:	2301      	movs	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005d38:	697b      	ldr	r3, [r7, #20]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b087      	sub	sp, #28
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005d52:	3304      	adds	r3, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3304      	adds	r3, #4
 8005d58:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d66:	330a      	adds	r3, #10
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7e:	3302      	adds	r3, #2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d86:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1d1a      	adds	r2, r3, #4
 8005d8c:	613a      	str	r2, [r7, #16]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <clmt_clust+0x5a>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e010      	b.n	8005dbe <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d307      	bcc.n	8005db4 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	3304      	adds	r3, #4
 8005db0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005db2:	e7e9      	b.n	8005d88 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8005db4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	4413      	add	r3, r2
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dde:	3306      	adds	r3, #6
 8005de0:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de8:	3308      	adds	r3, #8
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d00a      	beq.n	8005e0a <dir_sdi+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e00:	3314      	adds	r3, #20
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d301      	bcc.n	8005e0e <dir_sdi+0x44>
		return FR_INT_ERR;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e0b4      	b.n	8005f78 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d111      	bne.n	8005e38 <dir_sdi+0x6e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d108      	bne.n	8005e38 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e32:	3304      	adds	r3, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d117      	bne.n	8005e6e <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d301      	bcc.n	8005e5a <dir_sdi+0x90>
			return FR_INT_ERR;
 8005e56:	2302      	movs	r3, #2
 8005e58:	e08e      	b.n	8005f78 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e66:	3304      	adds	r3, #4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	e046      	b.n	8005efc <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7a:	330a      	adds	r3, #10
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e90:	3302      	adds	r3, #2
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	fb03 f302 	mul.w	r3, r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005e9a:	e022      	b.n	8005ee2 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6979      	ldr	r1, [r7, #20]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fbcd 	bl	8005646 <get_fat>
 8005eac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d101      	bne.n	8005eba <dir_sdi+0xf0>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e05e      	b.n	8005f78 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d90a      	bls.n	8005ed6 <dir_sdi+0x10c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ecc:	3314      	adds	r3, #20
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d301      	bcc.n	8005eda <dir_sdi+0x110>
				return FR_INT_ERR;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e04e      	b.n	8005f78 <dir_sdi+0x1ae>
			idx -= ic;
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d2d8      	bcs.n	8005e9c <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6979      	ldr	r1, [r7, #20]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fb7e 	bl	80055f6 <clust2sect>
 8005efa:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f02:	330c      	adds	r3, #12
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <dir_sdi+0x148>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e032      	b.n	8005f78 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1e:	330a      	adds	r3, #10
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	441a      	add	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	3310      	adds	r3, #16
 8005f3a:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f52:	330a      	adds	r3, #10
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f62:	fb02 f201 	mul.w	r2, r2, r1
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	015b      	lsls	r3, r3, #5
 8005f6a:	18c2      	adds	r2, r0, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f72:	3314      	adds	r3, #20
 8005f74:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	3306      	adds	r3, #6
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d006      	beq.n	8005fae <dir_next+0x2e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa6:	3310      	adds	r3, #16
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <dir_next+0x32>
		return FR_NO_FILE;
 8005fae:	2304      	movs	r3, #4
 8005fb0:	e144      	b.n	800623c <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbe:	330a      	adds	r3, #10
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fce:	fb02 f201 	mul.w	r2, r2, r1
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 810c 	bne.w	80061f2 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe0:	3310      	adds	r3, #16
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fec:	3310      	adds	r3, #16
 8005fee:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10e      	bne.n	800601c <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600a:	3308      	adds	r3, #8
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4293      	cmp	r3, r2
 8006014:	f0c0 80ed 	bcc.w	80061f2 <dir_next+0x272>
				return FR_NO_FILE;
 8006018:	2304      	movs	r3, #4
 800601a:	e10f      	b.n	800623c <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006028:	330a      	adds	r3, #10
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	fbb3 f2f2 	udiv	r2, r3, r2
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006044:	3302      	adds	r3, #2
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	3b01      	subs	r3, #1
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	f040 80d0 	bne.w	80061f2 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006060:	330c      	adds	r3, #12
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7ff faed 	bl	8005646 <get_fat>
 800606c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d801      	bhi.n	8006078 <dir_next+0xf8>
 8006074:	2302      	movs	r3, #2
 8006076:	e0e1      	b.n	800623c <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d101      	bne.n	8006084 <dir_next+0x104>
 8006080:	2301      	movs	r3, #1
 8006082:	e0db      	b.n	800623c <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006090:	3314      	adds	r3, #20
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	429a      	cmp	r2, r3
 8006098:	f0c0 8097 	bcc.w	80061ca <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <dir_next+0x126>
 80060a2:	2304      	movs	r3, #4
 80060a4:	e0ca      	b.n	800623c <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b4:	330c      	adds	r3, #12
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7ff fd90 	bl	8005be0 <create_chain>
 80060c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <dir_next+0x14c>
 80060c8:	2307      	movs	r3, #7
 80060ca:	e0b7      	b.n	800623c <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <dir_next+0x156>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0b2      	b.n	800623c <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d101      	bne.n	80060e2 <dir_next+0x162>
 80060de:	2301      	movs	r3, #1
 80060e0:	e0ac      	b.n	800623c <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff f926 	bl	800533c <sync_window>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <dir_next+0x17a>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e0a0      	b.n	800623c <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006110:	330a      	adds	r3, #10
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	2100      	movs	r1, #0
 8006118:	f7fe feed 	bl	8004ef6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612a:	681c      	ldr	r4, [r3, #0]
 800612c:	6979      	ldr	r1, [r7, #20]
 800612e:	4610      	mov	r0, r2
 8006130:	f7ff fa61 	bl	80055f6 <clust2sect>
 8006134:	4602      	mov	r2, r0
 8006136:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800613a:	330c      	adds	r3, #12
 800613c:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e024      	b.n	800618e <dir_next+0x20e>
						dp->fs->wflag = 1;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006150:	3304      	adds	r3, #4
 8006152:	2201      	movs	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff f8ec 	bl	800533c <sync_window>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <dir_next+0x1ee>
 800616a:	2301      	movs	r3, #1
 800616c:	e066      	b.n	800623c <dir_next+0x2bc>
						dp->fs->winsect++;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800617a:	330c      	adds	r3, #12
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	1c59      	adds	r1, r3, #1
 8006180:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8006184:	330c      	adds	r3, #12
 8006186:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	3301      	adds	r3, #1
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619a:	3302      	adds	r3, #2
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d3ce      	bcc.n	8006144 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80061b2:	330c      	adds	r3, #12
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	1a8a      	subs	r2, r1, r2
 80061c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80061c6:	330c      	adds	r3, #12
 80061c8:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d0:	330c      	adds	r3, #12
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6979      	ldr	r1, [r7, #20]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fa08 	bl	80055f6 <clust2sect>
 80061e6:	4602      	mov	r2, r0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ee:	3310      	adds	r3, #16
 80061f0:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fc:	3306      	adds	r3, #6
 80061fe:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006216:	330a      	adds	r3, #10
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	b29b      	uxth	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	fbb3 f1f2 	udiv	r1, r3, r2
 8006226:	fb02 f201 	mul.w	r2, r2, r1
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	015b      	lsls	r3, r3, #5
 800622e:	18c2      	adds	r2, r0, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006236:	3314      	adds	r3, #20
 8006238:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	bd90      	pop	{r4, r7, pc}

08006244 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800624e:	2100      	movs	r1, #0
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff fdba 	bl	8005dca <dir_sdi>
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d138      	bne.n	80062d2 <dir_alloc+0x8e>
		n = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006272:	3310      	adds	r3, #16
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f7ff f8b9 	bl	80053f0 <move_window>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d123      	bne.n	80062d0 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628e:	3314      	adds	r3, #20
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2be5      	cmp	r3, #229	; 0xe5
 8006296:	d007      	beq.n	80062a8 <dir_alloc+0x64>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629e:	3314      	adds	r3, #20
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d107      	bne.n	80062b8 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d102      	bne.n	80062bc <dir_alloc+0x78>
 80062b6:	e00c      	b.n	80062d2 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80062b8:	2300      	movs	r3, #0
 80062ba:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80062bc:	2101      	movs	r1, #1
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fe5e 	bl	8005f80 <dir_next>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0ca      	beq.n	8006264 <dir_alloc+0x20>
 80062ce:	e000      	b.n	80062d2 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 80062d0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d101      	bne.n	80062dc <dir_alloc+0x98>
 80062d8:	2307      	movs	r3, #7
 80062da:	73fb      	strb	r3, [r7, #15]
	return res;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	331b      	adds	r3, #27
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	b21a      	sxth	r2, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	331a      	adds	r3, #26
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	b21b      	sxth	r3, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	b21b      	sxth	r3, r3
 8006306:	b29b      	uxth	r3, r3
 8006308:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b03      	cmp	r3, #3
 8006314:	d10f      	bne.n	8006336 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	3315      	adds	r3, #21
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	b21a      	sxth	r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	3314      	adds	r3, #20
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	b21b      	sxth	r3, r3
 8006328:	4313      	orrs	r3, r2
 800632a:	b21b      	sxth	r3, r3
 800632c:	b29b      	uxth	r3, r3
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

	return cl;
 8006336:	68fb      	ldr	r3, [r7, #12]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	331a      	adds	r3, #26
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	b29a      	uxth	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	331b      	adds	r3, #27
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	0c1a      	lsrs	r2, r3, #16
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3314      	adds	r3, #20
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	0c1b      	lsrs	r3, r3, #16
 8006378:	b29b      	uxth	r3, r3
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	b29a      	uxth	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3315      	adds	r3, #21
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a6:	1e5a      	subs	r2, r3, #1
 80063a8:	4613      	mov	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	2301      	movs	r3, #1
 80063ba:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80063bc:	4a2b      	ldr	r2, [pc, #172]	; (800646c <cmp_lfn+0xd8>)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4413      	add	r3, r2
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	4413      	add	r3, r2
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	b21a      	sxth	r2, r3
 80063d0:	4926      	ldr	r1, [pc, #152]	; (800646c <cmp_lfn+0xd8>)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	440b      	add	r3, r1
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	440b      	add	r3, r1
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b21b      	sxth	r3, r3
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b21b      	sxth	r3, r3
 80063e6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80063e8:	89fb      	ldrh	r3, [r7, #14]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d019      	beq.n	8006422 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80063ee:	89bb      	ldrh	r3, [r7, #12]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f003 f869 	bl	80094c8 <ff_wtoupper>
 80063f6:	4603      	mov	r3, r0
 80063f8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2bfe      	cmp	r3, #254	; 0xfe
 80063fe:	d80e      	bhi.n	800641e <cmp_lfn+0x8a>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	617a      	str	r2, [r7, #20]
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f003 f85a 	bl	80094c8 <ff_wtoupper>
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	89fb      	ldrh	r3, [r7, #14]
 800641a:	4293      	cmp	r3, r2
 800641c:	d008      	beq.n	8006430 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800641e:	2300      	movs	r3, #0
 8006420:	e01f      	b.n	8006462 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006422:	89bb      	ldrh	r3, [r7, #12]
 8006424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006428:	4293      	cmp	r3, r2
 800642a:	d001      	beq.n	8006430 <cmp_lfn+0x9c>
 800642c:	2300      	movs	r3, #0
 800642e:	e018      	b.n	8006462 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	3301      	adds	r3, #1
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b0c      	cmp	r3, #12
 800643a:	d9bf      	bls.n	80063bc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <cmp_lfn+0xcc>
 8006448:	89fb      	ldrh	r3, [r7, #14]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <cmp_lfn+0xcc>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <cmp_lfn+0xcc>
		return 0;
 800645c:	2300      	movs	r3, #0
 800645e:	e000      	b.n	8006462 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006460:	2301      	movs	r3, #1
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	0800a240 	.word	0x0800a240

08006470 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006470:	b480      	push	{r7}
 8006472:	b089      	sub	sp, #36	; 0x24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4611      	mov	r1, r2
 800647c:	461a      	mov	r2, r3
 800647e:	460b      	mov	r3, r1
 8006480:	71fb      	strb	r3, [r7, #7]
 8006482:	4613      	mov	r3, r2
 8006484:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	330d      	adds	r3, #13
 800648a:	79ba      	ldrb	r2, [r7, #6]
 800648c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	330b      	adds	r3, #11
 8006492:	220f      	movs	r2, #15
 8006494:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	330c      	adds	r3, #12
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	331a      	adds	r3, #26
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	331b      	adds	r3, #27
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	1e5a      	subs	r2, r3, #1
 80064b2:	4613      	mov	r3, r2
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	82fb      	strh	r3, [r7, #22]
 80064c2:	2300      	movs	r3, #0
 80064c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80064c6:	8afb      	ldrh	r3, [r7, #22]
 80064c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <fit_lfn+0x70>
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	61fa      	str	r2, [r7, #28]
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80064e0:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <fit_lfn+0xe8>)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	4413      	add	r3, r2
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4413      	add	r3, r2
 80064ee:	8afa      	ldrh	r2, [r7, #22]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	8afb      	ldrh	r3, [r7, #22]
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	b299      	uxth	r1, r3
 80064fa:	4a17      	ldr	r2, [pc, #92]	; (8006558 <fit_lfn+0xe8>)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	4413      	add	r3, r2
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	4413      	add	r3, r2
 8006508:	b2ca      	uxtb	r2, r1
 800650a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800650c:	8afb      	ldrh	r3, [r7, #22]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d102      	bne.n	8006518 <fit_lfn+0xa8>
 8006512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006516:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	3301      	adds	r3, #1
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b0c      	cmp	r3, #12
 8006522:	d9d0      	bls.n	80064c6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006524:	8afb      	ldrh	r3, [r7, #22]
 8006526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800652a:	4293      	cmp	r3, r2
 800652c:	d006      	beq.n	800653c <fit_lfn+0xcc>
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <fit_lfn+0xd4>
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006542:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	79fa      	ldrb	r2, [r7, #7]
 8006548:	701a      	strb	r2, [r3, #0]
}
 800654a:	bf00      	nop
 800654c:	3724      	adds	r7, #36	; 0x24
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	0800a240 	.word	0x0800a240

0800655c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08c      	sub	sp, #48	; 0x30
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800656a:	220b      	movs	r2, #11
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7fe fca2 	bl	8004eb8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b05      	cmp	r3, #5
 8006578:	d92b      	bls.n	80065d2 <gen_numname+0x76>
		sr = seq;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800657e:	e022      	b.n	80065c6 <gen_numname+0x6a>
			wc = *lfn++;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	1c9a      	adds	r2, r3, #2
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800658a:	2300      	movs	r3, #0
 800658c:	62bb      	str	r3, [r7, #40]	; 0x28
 800658e:	e017      	b.n	80065c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	005a      	lsls	r2, r3, #1
 8006594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800659e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <gen_numname+0x5e>
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80065b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80065b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	3301      	adds	r3, #1
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b0f      	cmp	r3, #15
 80065c4:	d9e4      	bls.n	8006590 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1d8      	bne.n	8006580 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80065d2:	2307      	movs	r3, #7
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	3330      	adds	r3, #48	; 0x30
 80065e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80065e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ea:	2b39      	cmp	r3, #57	; 0x39
 80065ec:	d904      	bls.n	80065f8 <gen_numname+0x9c>
 80065ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f2:	3307      	adds	r3, #7
 80065f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	1e5a      	subs	r2, r3, #1
 80065fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80065fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006602:	4413      	add	r3, r2
 8006604:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006608:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	091b      	lsrs	r3, r3, #4
 8006610:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1de      	bne.n	80065d6 <gen_numname+0x7a>
	ns[i] = '~';
 8006618:	f107 0214 	add.w	r2, r7, #20
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	4413      	add	r3, r2
 8006620:	227e      	movs	r2, #126	; 0x7e
 8006622:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006624:	2300      	movs	r3, #0
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
 8006628:	e002      	b.n	8006630 <gen_numname+0xd4>
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	3301      	adds	r3, #1
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	429a      	cmp	r2, r3
 8006636:	d205      	bcs.n	8006644 <gen_numname+0xe8>
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	4413      	add	r3, r2
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b20      	cmp	r3, #32
 8006642:	d1f2      	bne.n	800662a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	2b07      	cmp	r3, #7
 8006648:	d808      	bhi.n	800665c <gen_numname+0x100>
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006650:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006654:	4413      	add	r3, r2
 8006656:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800665a:	e000      	b.n	800665e <gen_numname+0x102>
 800665c:	2120      	movs	r1, #32
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	627a      	str	r2, [r7, #36]	; 0x24
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	460a      	mov	r2, r1
 800666a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	2b07      	cmp	r3, #7
 8006670:	d9e8      	bls.n	8006644 <gen_numname+0xe8>
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	3730      	adds	r7, #48	; 0x30
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006688:	230b      	movs	r3, #11
 800668a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	0852      	lsrs	r2, r2, #1
 8006692:	01db      	lsls	r3, r3, #7
 8006694:	4313      	orrs	r3, r2
 8006696:	b2da      	uxtb	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	6079      	str	r1, [r7, #4]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4413      	add	r3, r2
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1ed      	bne.n	800668c <sum_sfn+0x10>
	return sum;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066c6:	2100      	movs	r1, #0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff fb7e 	bl	8005dca <dir_sdi>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <dir_find+0x1e>
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	e0c1      	b.n	8006860 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80066dc:	23ff      	movs	r3, #255	; 0xff
 80066de:	753b      	strb	r3, [r7, #20]
 80066e0:	7d3b      	ldrb	r3, [r7, #20]
 80066e2:	757b      	strb	r3, [r7, #21]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80066ea:	3304      	adds	r3, #4
 80066ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066f0:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006700:	3310      	adds	r3, #16
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f7fe fe72 	bl	80053f0 <move_window>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 809e 	bne.w	8006854 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671e:	3314      	adds	r3, #20
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800672a:	7dbb      	ldrb	r3, [r7, #22]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d102      	bne.n	8006736 <dir_find+0x78>
 8006730:	2304      	movs	r3, #4
 8006732:	75fb      	strb	r3, [r7, #23]
 8006734:	e093      	b.n	800685e <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	330b      	adds	r3, #11
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006740:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006742:	7dbb      	ldrb	r3, [r7, #22]
 8006744:	2be5      	cmp	r3, #229	; 0xe5
 8006746:	d007      	beq.n	8006758 <dir_find+0x9a>
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00c      	beq.n	800676c <dir_find+0xae>
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b0f      	cmp	r3, #15
 8006756:	d009      	beq.n	800676c <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006758:	23ff      	movs	r3, #255	; 0xff
 800675a:	757b      	strb	r3, [r7, #21]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006762:	3304      	adds	r3, #4
 8006764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e068      	b.n	800683e <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d139      	bne.n	80067e6 <dir_find+0x128>
				if (dp->lfn) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d05f      	beq.n	800683e <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800677e:	7dbb      	ldrb	r3, [r7, #22]
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d012      	beq.n	80067ae <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	7b5b      	ldrb	r3, [r3, #13]
 800678c:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800678e:	7dbb      	ldrb	r3, [r7, #22]
 8006790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006794:	75bb      	strb	r3, [r7, #22]
 8006796:	7dbb      	ldrb	r3, [r7, #22]
 8006798:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a0:	3306      	adds	r3, #6
 80067a2:	881a      	ldrh	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80067aa:	3304      	adds	r3, #4
 80067ac:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80067ae:	7dba      	ldrb	r2, [r7, #22]
 80067b0:	7d7b      	ldrb	r3, [r7, #21]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d114      	bne.n	80067e0 <dir_find+0x122>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	330d      	adds	r3, #13
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	7d3a      	ldrb	r2, [r7, #20]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d10e      	bne.n	80067e0 <dir_find+0x122>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6939      	ldr	r1, [r7, #16]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fde1 	bl	8006394 <cmp_lfn>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <dir_find+0x122>
 80067d8:	7d7b      	ldrb	r3, [r7, #21]
 80067da:	3b01      	subs	r3, #1
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	e000      	b.n	80067e2 <dir_find+0x124>
 80067e0:	23ff      	movs	r3, #255	; 0xff
 80067e2:	757b      	strb	r3, [r7, #21]
 80067e4:	e02b      	b.n	800683e <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80067e6:	7d7b      	ldrb	r3, [r7, #21]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d107      	bne.n	80067fc <dir_find+0x13e>
 80067ec:	6938      	ldr	r0, [r7, #16]
 80067ee:	f7ff ff45 	bl	800667c <sum_sfn>
 80067f2:	4603      	mov	r3, r0
 80067f4:	461a      	mov	r2, r3
 80067f6:	7d3b      	ldrb	r3, [r7, #20]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d02d      	beq.n	8006858 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006802:	3318      	adds	r3, #24
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	330b      	adds	r3, #11
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <dir_find+0x16e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006818:	3318      	adds	r3, #24
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	220b      	movs	r2, #11
 800681e:	4619      	mov	r1, r3
 8006820:	6938      	ldr	r0, [r7, #16]
 8006822:	f7fe fb83 	bl	8004f2c <mem_cmp>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d017      	beq.n	800685c <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800682c:	23ff      	movs	r3, #255	; 0xff
 800682e:	757b      	strb	r3, [r7, #21]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006836:	3304      	adds	r3, #4
 8006838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800683c:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800683e:	2100      	movs	r1, #0
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fb9d 	bl	8005f80 <dir_next>
 8006846:	4603      	mov	r3, r0
 8006848:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f43f af50 	beq.w	80066f2 <dir_find+0x34>
 8006852:	e004      	b.n	800685e <dir_find+0x1a0>
		if (res != FR_OK) break;
 8006854:	bf00      	nop
 8006856:	e002      	b.n	800685e <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006858:	bf00      	nop
 800685a:	e000      	b.n	800685e <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800685c:	bf00      	nop

	return res;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08c      	sub	sp, #48	; 0x30
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006876:	3318      	adds	r3, #24
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	623b      	str	r3, [r7, #32]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006886:	f107 030c 	add.w	r3, r7, #12
 800688a:	220c      	movs	r2, #12
 800688c:	6a39      	ldr	r1, [r7, #32]
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fb12 	bl	8004eb8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d039      	beq.n	8006912 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	330b      	adds	r3, #11
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 80068b0:	2301      	movs	r3, #1
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b4:	e013      	b.n	80068de <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80068b6:	f107 010c 	add.w	r1, r7, #12
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	6a38      	ldr	r0, [r7, #32]
 80068c0:	f7ff fe4c 	bl	800655c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff fefa 	bl	80066be <dir_find>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80068d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	3301      	adds	r3, #1
 80068dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	2b63      	cmp	r3, #99	; 0x63
 80068e2:	d9e8      	bls.n	80068b6 <dir_register+0x4e>
 80068e4:	e000      	b.n	80068e8 <dir_register+0x80>
			if (res != FR_OK) break;
 80068e6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	2b64      	cmp	r3, #100	; 0x64
 80068ec:	d101      	bne.n	80068f2 <dir_register+0x8a>
 80068ee:	2307      	movs	r3, #7
 80068f0:	e0e3      	b.n	8006aba <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80068f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d002      	beq.n	8006900 <dir_register+0x98>
 80068fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068fe:	e0dc      	b.n	8006aba <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	330b      	adds	r3, #11
 8006904:	7dfa      	ldrb	r2, [r7, #23]
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d014      	beq.n	8006946 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800691c:	2300      	movs	r3, #0
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006920:	e002      	b.n	8006928 <dir_register+0xc0>
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	3301      	adds	r3, #1
 8006926:	62bb      	str	r3, [r7, #40]	; 0x28
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f5      	bne.n	8006922 <dir_register+0xba>
		nent = (n + 25) / 13;
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	3319      	adds	r3, #25
 800693a:	4a62      	ldr	r2, [pc, #392]	; (8006ac4 <dir_register+0x25c>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
 8006944:	e001      	b.n	800694a <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006946:	2301      	movs	r3, #1
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800694a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fc79 	bl	8006244 <dir_alloc>
 8006952:	4603      	mov	r3, r0
 8006954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800695c:	2b00      	cmp	r3, #0
 800695e:	d160      	bne.n	8006a22 <dir_register+0x1ba>
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	3b01      	subs	r3, #1
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d05a      	beq.n	8006a22 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006972:	3306      	adds	r3, #6
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fa23 	bl	8005dca <dir_sdi>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800698a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800698e:	2b00      	cmp	r3, #0
 8006990:	d147      	bne.n	8006a22 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006998:	3318      	adds	r3, #24
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff fe6d 	bl	800667c <sum_sfn>
 80069a2:	4603      	mov	r3, r0
 80069a4:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b4:	3310      	adds	r3, #16
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7fe fd18 	bl	80053f0 <move_window>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80069c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d128      	bne.n	8006a20 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069dc:	3314      	adds	r3, #20
 80069de:	6819      	ldr	r1, [r3, #0]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	7efb      	ldrb	r3, [r7, #27]
 80069e6:	f7ff fd43 	bl	8006470 <fit_lfn>
				dp->fs->wflag = 1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f6:	3304      	adds	r3, #4
 80069f8:	2201      	movs	r2, #1
 80069fa:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 80069fc:	2100      	movs	r1, #0
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fabe 	bl	8005f80 <dir_next>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <dir_register+0x1ba>
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	3b01      	subs	r3, #1
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1c3      	bne.n	80069a6 <dir_register+0x13e>
 8006a1e:	e000      	b.n	8006a22 <dir_register+0x1ba>
				if (res != FR_OK) break;
 8006a20:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d145      	bne.n	8006ab6 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a38:	3310      	adds	r3, #16
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4610      	mov	r0, r2
 8006a40:	f7fe fcd6 	bl	80053f0 <move_window>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d131      	bne.n	8006ab6 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a58:	3314      	adds	r3, #20
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	2100      	movs	r1, #0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe fa48 	bl	8004ef6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a76:	3318      	adds	r3, #24
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	220b      	movs	r2, #11
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	f7fe fa1b 	bl	8004eb8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a88:	3318      	adds	r3, #24
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330b      	adds	r3, #11
 8006a8e:	781a      	ldrb	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a96:	3314      	adds	r3, #20
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	f002 0218 	and.w	r2, r2, #24
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8006ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3730      	adds	r7, #48	; 0x30
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	4ec4ec4f 	.word	0x4ec4ec4f

08006ac8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08a      	sub	sp, #40	; 0x28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	e002      	b.n	8006ae0 <create_name+0x18>
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	3301      	adds	r3, #1
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ae6:	d0f8      	beq.n	8006ada <create_name+0x12>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b5c      	cmp	r3, #92	; 0x5c
 8006aee:	d0f4      	beq.n	8006ada <create_name+0x12>
	lfn = dp->lfn;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	61ba      	str	r2, [r7, #24]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b12:	2b1f      	cmp	r3, #31
 8006b14:	d92f      	bls.n	8006b76 <create_name+0xae>
 8006b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b18:	2b2f      	cmp	r3, #47	; 0x2f
 8006b1a:	d02c      	beq.n	8006b76 <create_name+0xae>
 8006b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b1e:	2b5c      	cmp	r3, #92	; 0x5c
 8006b20:	d029      	beq.n	8006b76 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2bfe      	cmp	r3, #254	; 0xfe
 8006b26:	d901      	bls.n	8006b2c <create_name+0x64>
			return FR_INVALID_NAME;
 8006b28:	2306      	movs	r3, #6
 8006b2a:	e18b      	b.n	8006e44 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b34:	2101      	movs	r1, #1
 8006b36:	4618      	mov	r0, r3
 8006b38:	f002 fc8a 	bl	8009450 <ff_convert>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <create_name+0x82>
 8006b46:	2306      	movs	r3, #6
 8006b48:	e17c      	b.n	8006e44 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4e:	d809      	bhi.n	8006b64 <create_name+0x9c>
 8006b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b52:	4619      	mov	r1, r3
 8006b54:	488f      	ldr	r0, [pc, #572]	; (8006d94 <create_name+0x2cc>)
 8006b56:	f7fe fa10 	bl	8004f7a <chk_chr>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006b60:	2306      	movs	r3, #6
 8006b62:	e16f      	b.n	8006e44 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	617a      	str	r2, [r7, #20]
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b72:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006b74:	e7c5      	b.n	8006b02 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	441a      	add	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b82:	2b1f      	cmp	r3, #31
 8006b84:	d801      	bhi.n	8006b8a <create_name+0xc2>
 8006b86:	2304      	movs	r3, #4
 8006b88:	e000      	b.n	8006b8c <create_name+0xc4>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006b90:	e011      	b.n	8006bb6 <create_name+0xee>
		w = lfn[di - 1];
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d002      	beq.n	8006bb0 <create_name+0xe8>
 8006baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bac:	2b2e      	cmp	r3, #46	; 0x2e
 8006bae:	d106      	bne.n	8006bbe <create_name+0xf6>
		di--;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ea      	bne.n	8006b92 <create_name+0xca>
 8006bbc:	e000      	b.n	8006bc0 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006bbe:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <create_name+0x102>
 8006bc6:	2306      	movs	r3, #6
 8006bc8:	e13c      	b.n	8006e44 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bdc:	3318      	adds	r3, #24
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	220b      	movs	r2, #11
 8006be2:	2120      	movs	r1, #32
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe f986 	bl	8004ef6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e002      	b.n	8006bf6 <create_name+0x12e>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d0f5      	beq.n	8006bf0 <create_name+0x128>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c10:	d0ee      	beq.n	8006bf0 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <create_name+0x164>
 8006c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c1c:	f043 0303 	orr.w	r3, r3, #3
 8006c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006c24:	e002      	b.n	8006c2c <create_name+0x164>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <create_name+0x17e>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	2b2e      	cmp	r3, #46	; 0x2e
 8006c44:	d1ef      	bne.n	8006c26 <create_name+0x15e>

	b = i = 0; ni = 8;
 8006c46:	2300      	movs	r3, #0
 8006c48:	623b      	str	r3, [r7, #32]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c50:	2308      	movs	r3, #8
 8006c52:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	61ba      	str	r2, [r7, #24]
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8092 	beq.w	8006d90 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d006      	beq.n	8006c80 <create_name+0x1b8>
 8006c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c74:	2b2e      	cmp	r3, #46	; 0x2e
 8006c76:	d10a      	bne.n	8006c8e <create_name+0x1c6>
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d006      	beq.n	8006c8e <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8006c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c84:	f043 0303 	orr.w	r3, r3, #3
 8006c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c8c:	e07f      	b.n	8006d8e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006c8e:	6a3a      	ldr	r2, [r7, #32]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d203      	bcs.n	8006c9e <create_name+0x1d6>
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d123      	bne.n	8006ce6 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b0b      	cmp	r3, #11
 8006ca2:	d106      	bne.n	8006cb2 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8006ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ca8:	f043 0303 	orr.w	r3, r3, #3
 8006cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cb0:	e077      	b.n	8006da2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d005      	beq.n	8006cc6 <create_name+0x1fe>
 8006cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cbe:	f043 0303 	orr.w	r3, r3, #3
 8006cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d868      	bhi.n	8006da0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	623b      	str	r3, [r7, #32]
 8006cd6:	230b      	movs	r3, #11
 8006cd8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006cda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ce4:	e053      	b.n	8006d8e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cea:	d914      	bls.n	8006d16 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 fbad 	bl	8009450 <ff_convert>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <create_name+0x242>
 8006d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d02:	3b80      	subs	r3, #128	; 0x80
 8006d04:	4a24      	ldr	r2, [pc, #144]	; (8006d98 <create_name+0x2d0>)
 8006d06:	5cd3      	ldrb	r3, [r2, r3]
 8006d08:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d0e:	f043 0302 	orr.w	r3, r3, #2
 8006d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <create_name+0x264>
 8006d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d1e:	4619      	mov	r1, r3
 8006d20:	481e      	ldr	r0, [pc, #120]	; (8006d9c <create_name+0x2d4>)
 8006d22:	f7fe f92a 	bl	8004f7a <chk_chr>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d008      	beq.n	8006d3e <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006d2c:	235f      	movs	r3, #95	; 0x5f
 8006d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d34:	f043 0303 	orr.w	r3, r3, #3
 8006d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d3c:	e01b      	b.n	8006d76 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d909      	bls.n	8006d58 <create_name+0x290>
 8006d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d46:	2b5a      	cmp	r3, #90	; 0x5a
 8006d48:	d806      	bhi.n	8006d58 <create_name+0x290>
					b |= 2;
 8006d4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d4e:	f043 0302 	orr.w	r3, r3, #2
 8006d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d56:	e00e      	b.n	8006d76 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d5a:	2b60      	cmp	r3, #96	; 0x60
 8006d5c:	d90b      	bls.n	8006d76 <create_name+0x2ae>
 8006d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d60:	2b7a      	cmp	r3, #122	; 0x7a
 8006d62:	d808      	bhi.n	8006d76 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8006d64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d72:	3b20      	subs	r3, #32
 8006d74:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d7c:	3318      	adds	r3, #24
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	1c59      	adds	r1, r3, #1
 8006d84:	6239      	str	r1, [r7, #32]
 8006d86:	4413      	add	r3, r2
 8006d88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006d8e:	e761      	b.n	8006c54 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8006d90:	bf00      	nop
 8006d92:	e006      	b.n	8006da2 <create_name+0x2da>
 8006d94:	0800a140 	.word	0x0800a140
 8006d98:	0800a1c0 	.word	0x0800a1c0
 8006d9c:	0800a14c 	.word	0x0800a14c
			if (si > di) break;			/* No extension */
 8006da0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da8:	3318      	adds	r3, #24
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2be5      	cmp	r3, #229	; 0xe5
 8006db0:	d106      	bne.n	8006dc0 <create_name+0x2f8>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db8:	3318      	adds	r3, #24
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2205      	movs	r2, #5
 8006dbe:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d104      	bne.n	8006dd0 <create_name+0x308>
 8006dc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd4:	f003 030c 	and.w	r3, r3, #12
 8006dd8:	2b0c      	cmp	r3, #12
 8006dda:	d005      	beq.n	8006de8 <create_name+0x320>
 8006ddc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006de0:	f003 0303 	and.w	r3, r3, #3
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d105      	bne.n	8006df4 <create_name+0x32c>
		cf |= NS_LFN;
 8006de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dec:	f043 0302 	orr.w	r3, r3, #2
 8006df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d117      	bne.n	8006e30 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006e00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d105      	bne.n	8006e18 <create_name+0x350>
 8006e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e10:	f043 0310 	orr.w	r3, r3, #16
 8006e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e1c:	f003 030c 	and.w	r3, r3, #12
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d105      	bne.n	8006e30 <create_name+0x368>
 8006e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e28:	f043 0308 	orr.w	r3, r3, #8
 8006e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e36:	3318      	adds	r3, #24
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330b      	adds	r3, #11
 8006e3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e40:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006e42:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3728      	adds	r7, #40	; 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b2f      	cmp	r3, #47	; 0x2f
 8006e5c:	d003      	beq.n	8006e66 <follow_path+0x1a>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b5c      	cmp	r3, #92	; 0x5c
 8006e64:	d102      	bne.n	8006e6c <follow_path+0x20>
		path++;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e72:	3308      	adds	r3, #8
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b1f      	cmp	r3, #31
 8006e7e:	d80c      	bhi.n	8006e9a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006e80:	2100      	movs	r1, #0
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fe ffa1 	bl	8005dca <dir_sdi>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e92:	3314      	adds	r3, #20
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e04c      	b.n	8006f34 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff fe12 	bl	8006ac8 <create_name>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d13d      	bne.n	8006f2a <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fc05 	bl	80066be <dir_find>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebe:	3318      	adds	r3, #24
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	7adb      	ldrb	r3, [r3, #11]
 8006ec4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d12d      	bne.n	8006f2e <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d128      	bne.n	8006f2e <follow_path+0xe2>
 8006edc:	2305      	movs	r3, #5
 8006ede:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006ee0:	e025      	b.n	8006f2e <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d122      	bne.n	8006f32 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef2:	3314      	adds	r3, #20
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	330b      	adds	r3, #11
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f003 0310 	and.w	r3, r3, #16
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8006f06:	2305      	movs	r3, #5
 8006f08:	73fb      	strb	r3, [r7, #15]
 8006f0a:	e013      	b.n	8006f34 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff f9e5 	bl	80062e6 <ld_clust>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f24:	3308      	adds	r3, #8
 8006f26:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f28:	e7b7      	b.n	8006e9a <follow_path+0x4e>
			if (res != FR_OK) break;
 8006f2a:	bf00      	nop
 8006f2c:	e002      	b.n	8006f34 <follow_path+0xe8>
				break;
 8006f2e:	bf00      	nop
 8006f30:	e000      	b.n	8006f34 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f32:	bf00      	nop
		}
	}

	return res;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b087      	sub	sp, #28
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f46:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d031      	beq.n	8006fb8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	e002      	b.n	8006f62 <get_ldnumber+0x24>
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b1f      	cmp	r3, #31
 8006f68:	d903      	bls.n	8006f72 <get_ldnumber+0x34>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b3a      	cmp	r3, #58	; 0x3a
 8006f70:	d1f4      	bne.n	8006f5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b3a      	cmp	r3, #58	; 0x3a
 8006f78:	d11c      	bne.n	8006fb4 <get_ldnumber+0x76>
			tp = *path;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	60fa      	str	r2, [r7, #12]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	3b30      	subs	r3, #48	; 0x30
 8006f8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b09      	cmp	r3, #9
 8006f90:	d80e      	bhi.n	8006fb0 <get_ldnumber+0x72>
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d10a      	bne.n	8006fb0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <get_ldnumber+0x72>
					vol = (int)i;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	e002      	b.n	8006fba <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006fb8:	693b      	ldr	r3, [r7, #16]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd8:	3304      	adds	r3, #4
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fea:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fe f9fe 	bl	80053f0 <move_window>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <check_fs+0x36>
		return 3;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e04a      	b.n	8007094 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007004:	3301      	adds	r3, #1
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	b21a      	sxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007012:	b21b      	sxth	r3, r3
 8007014:	4313      	orrs	r3, r2
 8007016:	b21b      	sxth	r3, r3
 8007018:	4a20      	ldr	r2, [pc, #128]	; (800709c <check_fs+0xd4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d001      	beq.n	8007022 <check_fs+0x5a>
		return 2;
 800701e:	2302      	movs	r3, #2
 8007020:	e038      	b.n	8007094 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3336      	adds	r3, #54	; 0x36
 8007026:	3303      	adds	r3, #3
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	061a      	lsls	r2, r3, #24
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3336      	adds	r3, #54	; 0x36
 8007030:	3302      	adds	r3, #2
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	041b      	lsls	r3, r3, #16
 8007036:	4313      	orrs	r3, r2
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	3236      	adds	r2, #54	; 0x36
 800703c:	3201      	adds	r2, #1
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	0212      	lsls	r2, r2, #8
 8007042:	4313      	orrs	r3, r2
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800704a:	4313      	orrs	r3, r2
 800704c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007050:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <check_fs+0xd8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d101      	bne.n	800705a <check_fs+0x92>
		return 0;
 8007056:	2300      	movs	r3, #0
 8007058:	e01c      	b.n	8007094 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3352      	adds	r3, #82	; 0x52
 800705e:	3303      	adds	r3, #3
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	061a      	lsls	r2, r3, #24
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3352      	adds	r3, #82	; 0x52
 8007068:	3302      	adds	r3, #2
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	041b      	lsls	r3, r3, #16
 800706e:	4313      	orrs	r3, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	3252      	adds	r2, #82	; 0x52
 8007074:	3201      	adds	r2, #1
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	0212      	lsls	r2, r2, #8
 800707a:	4313      	orrs	r3, r2
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007082:	4313      	orrs	r3, r2
 8007084:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007088:	4a05      	ldr	r2, [pc, #20]	; (80070a0 <check_fs+0xd8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d101      	bne.n	8007092 <check_fs+0xca>
		return 0;
 800708e:	2300      	movs	r3, #0
 8007090:	e000      	b.n	8007094 <check_fs+0xcc>

	return 1;
 8007092:	2301      	movs	r3, #1
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	ffffaa55 	.word	0xffffaa55
 80070a0:	00544146 	.word	0x00544146

080070a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b096      	sub	sp, #88	; 0x58
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80070b8:	68b8      	ldr	r0, [r7, #8]
 80070ba:	f7ff ff40 	bl	8006f3e <get_ldnumber>
 80070be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80070c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da01      	bge.n	80070ca <find_volume+0x26>
 80070c6:	230b      	movs	r3, #11
 80070c8:	e33c      	b.n	8007744 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80070ca:	4ab3      	ldr	r2, [pc, #716]	; (8007398 <find_volume+0x2f4>)
 80070cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <find_volume+0x3a>
 80070da:	230c      	movs	r3, #12
 80070dc:	e332      	b.n	8007744 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070e2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01d      	beq.n	800712c <find_volume+0x88>
		stat = disk_status(fs->drv);
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f6:	3301      	adds	r3, #1
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd fe3e 	bl	8004d7c <disk_status>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10c      	bne.n	800712c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <find_volume+0x84>
 8007118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8007124:	230a      	movs	r3, #10
 8007126:	e30d      	b.n	8007744 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8007128:	2300      	movs	r3, #0
 800712a:	e30b      	b.n	8007744 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007138:	b2da      	uxtb	r2, r3
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007140:	3301      	adds	r3, #1
 8007142:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714a:	3301      	adds	r3, #1
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f7fd fe2e 	bl	8004db0 <disk_initialize>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800715a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007166:	2303      	movs	r3, #3
 8007168:	e2ec      	b.n	8007744 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <find_volume+0xdc>
 8007170:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800717c:	230a      	movs	r3, #10
 800717e:	e2e1      	b.n	8007744 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007186:	3301      	adds	r3, #1
 8007188:	7818      	ldrb	r0, [r3, #0]
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007190:	330a      	adds	r3, #10
 8007192:	461a      	mov	r2, r3
 8007194:	2102      	movs	r1, #2
 8007196:	f7fd fe71 	bl	8004e7c <disk_ioctl>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10f      	bne.n	80071c0 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a6:	330a      	adds	r3, #10
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ae:	d307      	bcc.n	80071c0 <find_volume+0x11c>
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b6:	330a      	adds	r3, #10
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071be:	d901      	bls.n	80071c4 <find_volume+0x120>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e2bf      	b.n	8007744 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80071c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80071ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071cc:	f7ff fefc 	bl	8006fc8 <check_fs>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80071d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d155      	bne.n	800728a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80071de:	2300      	movs	r3, #0
 80071e0:	643b      	str	r3, [r7, #64]	; 0x40
 80071e2:	e029      	b.n	8007238 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80071e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80071ee:	4413      	add	r3, r2
 80071f0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	3304      	adds	r3, #4
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d012      	beq.n	8007222 <find_volume+0x17e>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	330b      	adds	r3, #11
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	061a      	lsls	r2, r3, #24
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	330a      	adds	r3, #10
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	4313      	orrs	r3, r2
 800720e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007210:	3209      	adds	r2, #9
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	0212      	lsls	r2, r2, #8
 8007216:	4313      	orrs	r3, r2
 8007218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721a:	3208      	adds	r2, #8
 800721c:	7812      	ldrb	r2, [r2, #0]
 800721e:	431a      	orrs	r2, r3
 8007220:	e000      	b.n	8007224 <find_volume+0x180>
 8007222:	2200      	movs	r2, #0
 8007224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800722c:	440b      	add	r3, r1
 800722e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007234:	3301      	adds	r3, #1
 8007236:	643b      	str	r3, [r7, #64]	; 0x40
 8007238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723a:	2b03      	cmp	r3, #3
 800723c:	d9d2      	bls.n	80071e4 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800723e:	2300      	movs	r3, #0
 8007240:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <find_volume+0x1aa>
 8007248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724a:	3b01      	subs	r3, #1
 800724c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800724e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007256:	4413      	add	r3, r2
 8007258:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800725c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800725e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <find_volume+0x1cc>
 8007264:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007266:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007268:	f7ff feae 	bl	8006fc8 <check_fs>
 800726c:	4603      	mov	r3, r0
 800726e:	e000      	b.n	8007272 <find_volume+0x1ce>
 8007270:	2302      	movs	r3, #2
 8007272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <find_volume+0x1e6>
 800727e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007280:	3301      	adds	r3, #1
 8007282:	643b      	str	r3, [r7, #64]	; 0x40
 8007284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007286:	2b03      	cmp	r3, #3
 8007288:	d9e1      	bls.n	800724e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800728a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800728e:	2b03      	cmp	r3, #3
 8007290:	d101      	bne.n	8007296 <find_volume+0x1f2>
 8007292:	2301      	movs	r3, #1
 8007294:	e256      	b.n	8007744 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <find_volume+0x1fe>
 800729e:	230d      	movs	r3, #13
 80072a0:	e250      	b.n	8007744 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	7b1b      	ldrb	r3, [r3, #12]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	b21a      	sxth	r2, r3
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	7adb      	ldrb	r3, [r3, #11]
 80072ae:	b21b      	sxth	r3, r3
 80072b0:	4313      	orrs	r3, r2
 80072b2:	b21a      	sxth	r2, r3
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ba:	330a      	adds	r3, #10
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b21b      	sxth	r3, r3
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d001      	beq.n	80072c8 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 80072c4:	230d      	movs	r3, #13
 80072c6:	e23d      	b.n	8007744 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	7ddb      	ldrb	r3, [r3, #23]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	b21a      	sxth	r2, r3
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	7d9b      	ldrb	r3, [r3, #22]
 80072d4:	b21b      	sxth	r3, r3
 80072d6:	4313      	orrs	r3, r2
 80072d8:	b21b      	sxth	r3, r3
 80072da:	b29b      	uxth	r3, r3
 80072dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80072de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d112      	bne.n	800730a <find_volume+0x266>
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80072ea:	061a      	lsls	r2, r3, #24
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	4313      	orrs	r3, r2
 80072f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072f8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80072fc:	0212      	lsls	r2, r2, #8
 80072fe:	4313      	orrs	r3, r2
 8007300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007302:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007306:	4313      	orrs	r3, r2
 8007308:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007310:	3318      	adds	r3, #24
 8007312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007314:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	7c1a      	ldrb	r2, [r3, #16]
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007320:	3303      	adds	r3, #3
 8007322:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732a:	3303      	adds	r3, #3
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d008      	beq.n	8007344 <find_volume+0x2a0>
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007338:	3303      	adds	r3, #3
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d001      	beq.n	8007344 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8007340:	230d      	movs	r3, #13
 8007342:	e1ff      	b.n	8007744 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734a:	3303      	adds	r3, #3
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735a:	7b5a      	ldrb	r2, [r3, #13]
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007362:	3302      	adds	r3, #2
 8007364:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736c:	3302      	adds	r3, #2
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00e      	beq.n	8007392 <find_volume+0x2ee>
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737a:	3302      	adds	r3, #2
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007386:	3302      	adds	r3, #2
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	3b01      	subs	r3, #1
 800738c:	4013      	ands	r3, r2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8007392:	230d      	movs	r3, #13
 8007394:	e1d6      	b.n	8007744 <find_volume+0x6a0>
 8007396:	bf00      	nop
 8007398:	200000ac 	.word	0x200000ac

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	7c9b      	ldrb	r3, [r3, #18]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	b21a      	sxth	r2, r3
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	7c5b      	ldrb	r3, [r3, #17]
 80073a8:	b21b      	sxth	r3, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b6:	3308      	adds	r3, #8
 80073b8:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c0:	3308      	adds	r3, #8
 80073c2:	881a      	ldrh	r2, [r3, #0]
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ca:	330a      	adds	r3, #10
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	fbb2 f1f3 	udiv	r1, r2, r3
 80073d6:	fb03 f301 	mul.w	r3, r3, r1
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 80073e2:	230d      	movs	r3, #13
 80073e4:	e1ae      	b.n	8007744 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	7d1b      	ldrb	r3, [r3, #20]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	b21a      	sxth	r2, r3
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	7cdb      	ldrb	r3, [r3, #19]
 80073f2:	b21b      	sxth	r3, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	b21b      	sxth	r3, r3
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80073fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d112      	bne.n	8007428 <find_volume+0x384>
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007408:	061a      	lsls	r2, r3, #24
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007410:	041b      	lsls	r3, r3, #16
 8007412:	4313      	orrs	r3, r2
 8007414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007416:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800741a:	0212      	lsls	r2, r2, #8
 800741c:	4313      	orrs	r3, r2
 800741e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007420:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007424:	4313      	orrs	r3, r2
 8007426:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742a:	7bdb      	ldrb	r3, [r3, #15]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	b21a      	sxth	r2, r3
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	7b9b      	ldrb	r3, [r3, #14]
 8007434:	b21b      	sxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b21b      	sxth	r3, r3
 800743a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800743c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <find_volume+0x3a2>
 8007442:	230d      	movs	r3, #13
 8007444:	e17e      	b.n	8007744 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007446:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744a:	441a      	add	r2, r3
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007452:	3308      	adds	r3, #8
 8007454:	8819      	ldrh	r1, [r3, #0]
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745c:	330a      	adds	r3, #10
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	b29b      	uxth	r3, r3
 8007464:	fbb1 f3f3 	udiv	r3, r1, r3
 8007468:	b29b      	uxth	r3, r3
 800746a:	4413      	add	r3, r2
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800746e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	429a      	cmp	r2, r3
 8007474:	d201      	bcs.n	800747a <find_volume+0x3d6>
 8007476:	230d      	movs	r3, #13
 8007478:	e164      	b.n	8007744 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800747a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007486:	3302      	adds	r3, #2
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	fbb2 f3f3 	udiv	r3, r2, r3
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <find_volume+0x3f6>
 8007496:	230d      	movs	r3, #13
 8007498:	e154      	b.n	8007744 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d902      	bls.n	80074b0 <find_volume+0x40c>
 80074aa:	2302      	movs	r3, #2
 80074ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d902      	bls.n	80074c0 <find_volume+0x41c>
 80074ba:	2303      	movs	r3, #3
 80074bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	1c9a      	adds	r2, r3, #2
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ca:	3314      	adds	r3, #20
 80074cc:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d4:	331c      	adds	r3, #28
 80074d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074d8:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80074da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074de:	441a      	add	r2, r3
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80074e6:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 80074e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	441a      	add	r2, r3
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80074f4:	3308      	adds	r3, #8
 80074f6:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 80074f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d127      	bne.n	8007550 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007506:	3308      	adds	r3, #8
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <find_volume+0x46e>
 800750e:	230d      	movs	r3, #13
 8007510:	e118      	b.n	8007744 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007518:	061a      	lsls	r2, r3, #24
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	4313      	orrs	r3, r2
 8007524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007526:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800752a:	0212      	lsls	r2, r2, #8
 800752c:	4313      	orrs	r3, r2
 800752e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007530:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007534:	431a      	orrs	r2, r3
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800753c:	3304      	adds	r3, #4
 800753e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007546:	3314      	adds	r3, #20
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	647b      	str	r3, [r7, #68]	; 0x44
 800754e:	e030      	b.n	80075b2 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007556:	3308      	adds	r3, #8
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <find_volume+0x4be>
 800755e:	230d      	movs	r3, #13
 8007560:	e0f0      	b.n	8007744 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800756c:	441a      	add	r2, r3
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007574:	3304      	adds	r3, #4
 8007576:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007578:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800757c:	2b02      	cmp	r3, #2
 800757e:	d106      	bne.n	800758e <find_volume+0x4ea>
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007586:	3314      	adds	r3, #20
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	e010      	b.n	80075b0 <find_volume+0x50c>
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007594:	3314      	adds	r3, #20
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	085a      	lsrs	r2, r3, #1
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a6:	3314      	adds	r3, #20
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80075b0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b8:	3318      	adds	r3, #24
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c2:	330a      	adds	r3, #10
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ca:	440b      	add	r3, r1
 80075cc:	1e59      	subs	r1, r3, #1
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d4:	330a      	adds	r3, #10
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80075dc:	429a      	cmp	r2, r3
 80075de:	d201      	bcs.n	80075e4 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 80075e0:	230d      	movs	r3, #13
 80075e2:	e0af      	b.n	8007744 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ea:	3310      	adds	r3, #16
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f8:	3310      	adds	r3, #16
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007602:	330c      	adds	r3, #12
 8007604:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760c:	3305      	adds	r3, #5
 800760e:	2280      	movs	r2, #128	; 0x80
 8007610:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007612:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007616:	2b03      	cmp	r3, #3
 8007618:	d17d      	bne.n	8007716 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	b21a      	sxth	r2, r3
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800762a:	b21b      	sxth	r3, r3
 800762c:	4313      	orrs	r3, r2
 800762e:	b21b      	sxth	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	d170      	bne.n	8007716 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007636:	3301      	adds	r3, #1
 8007638:	4619      	mov	r1, r3
 800763a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800763c:	f7fd fed8 	bl	80053f0 <move_window>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d167      	bne.n	8007716 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800764c:	3305      	adds	r3, #5
 800764e:	2200      	movs	r2, #0
 8007650:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	b21a      	sxth	r2, r3
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007662:	b21b      	sxth	r3, r3
 8007664:	4313      	orrs	r3, r2
 8007666:	b21b      	sxth	r3, r3
 8007668:	4a38      	ldr	r2, [pc, #224]	; (800774c <find_volume+0x6a8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d153      	bne.n	8007716 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007670:	78db      	ldrb	r3, [r3, #3]
 8007672:	061a      	lsls	r2, r3, #24
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	789b      	ldrb	r3, [r3, #2]
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	4313      	orrs	r3, r2
 800767c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800767e:	7852      	ldrb	r2, [r2, #1]
 8007680:	0212      	lsls	r2, r2, #8
 8007682:	4313      	orrs	r3, r2
 8007684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007686:	7812      	ldrb	r2, [r2, #0]
 8007688:	4313      	orrs	r3, r2
 800768a:	4a31      	ldr	r2, [pc, #196]	; (8007750 <find_volume+0x6ac>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d142      	bne.n	8007716 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007696:	061a      	lsls	r2, r3, #24
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800769e:	041b      	lsls	r3, r3, #16
 80076a0:	4313      	orrs	r3, r2
 80076a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076a4:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80076a8:	0212      	lsls	r2, r2, #8
 80076aa:	4313      	orrs	r3, r2
 80076ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ae:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80076b2:	4313      	orrs	r3, r2
 80076b4:	4a27      	ldr	r2, [pc, #156]	; (8007754 <find_volume+0x6b0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d12d      	bne.n	8007716 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80076c0:	061a      	lsls	r2, r3, #24
 80076c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c4:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	4313      	orrs	r3, r2
 80076cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ce:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80076d2:	0212      	lsls	r2, r2, #8
 80076d4:	4313      	orrs	r3, r2
 80076d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d8:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80076dc:	431a      	orrs	r2, r3
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e4:	3310      	adds	r3, #16
 80076e6:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80076ee:	061a      	lsls	r2, r3, #24
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	4313      	orrs	r3, r2
 80076fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076fc:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007700:	0212      	lsls	r2, r2, #8
 8007702:	4313      	orrs	r3, r2
 8007704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007706:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800770a:	431a      	orrs	r2, r3
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007712:	330c      	adds	r3, #12
 8007714:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007720:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007722:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <find_volume+0x6b4>)
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	3301      	adds	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <find_volume+0x6b4>)
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <find_volume+0x6b4>)
 8007730:	881a      	ldrh	r2, [r3, #0]
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007738:	3306      	adds	r3, #6
 800773a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800773c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800773e:	f7fd fdd3 	bl	80052e8 <clear_lock>
#endif

	return FR_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3758      	adds	r7, #88	; 0x58
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	ffffaa55 	.word	0xffffaa55
 8007750:	41615252 	.word	0x41615252
 8007754:	61417272 	.word	0x61417272
 8007758:	200000b0 	.word	0x200000b0

0800775c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d02d      	beq.n	80077ca <validate+0x6e>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d027      	beq.n	80077ca <validate+0x6e>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01e      	beq.n	80077ca <validate+0x6e>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007798:	3306      	adds	r3, #6
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a2:	3304      	adds	r3, #4
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d10f      	bne.n	80077ca <validate+0x6e>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b6:	3301      	adds	r3, #1
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd fade 	bl	8004d7c <disk_status>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <validate+0x72>
		return FR_INVALID_OBJECT;
 80077ca:	2309      	movs	r3, #9
 80077cc:	e000      	b.n	80077d0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	4613      	mov	r3, r2
 80077e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80077ea:	f107 0310 	add.w	r3, r7, #16
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fba5 	bl	8006f3e <get_ldnumber>
 80077f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da01      	bge.n	8007800 <f_mount+0x28>
 80077fc:	230b      	movs	r3, #11
 80077fe:	e02f      	b.n	8007860 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007800:	4a19      	ldr	r2, [pc, #100]	; (8007868 <f_mount+0x90>)
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007808:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007810:	69b8      	ldr	r0, [r7, #24]
 8007812:	f7fd fd69 	bl	80052e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d004      	beq.n	8007830 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	490d      	ldr	r1, [pc, #52]	; (8007868 <f_mount+0x90>)
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <f_mount+0x6e>
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d001      	beq.n	800784a <f_mount+0x72>
 8007846:	2300      	movs	r3, #0
 8007848:	e00a      	b.n	8007860 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800784a:	f107 0108 	add.w	r1, r7, #8
 800784e:	f107 030c 	add.w	r3, r7, #12
 8007852:	2200      	movs	r2, #0
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff fc25 	bl	80070a4 <find_volume>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800785e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3720      	adds	r7, #32
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	200000ac 	.word	0x200000ac

0800786c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	f107 0318 	add.w	r3, r7, #24
 800787a:	3b0c      	subs	r3, #12
 800787c:	6018      	str	r0, [r3, #0]
 800787e:	f107 0318 	add.w	r3, r7, #24
 8007882:	3b10      	subs	r3, #16
 8007884:	6019      	str	r1, [r3, #0]
 8007886:	f107 0318 	add.w	r3, r7, #24
 800788a:	3b11      	subs	r3, #17
 800788c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800788e:	f107 0318 	add.w	r3, r7, #24
 8007892:	3b0c      	subs	r3, #12
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <f_open+0x32>
 800789a:	2309      	movs	r3, #9
 800789c:	e319      	b.n	8007ed2 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800789e:	f107 0318 	add.w	r3, r7, #24
 80078a2:	3b0c      	subs	r3, #12
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80078ae:	f107 0318 	add.w	r3, r7, #24
 80078b2:	3b11      	subs	r3, #17
 80078b4:	f107 0218 	add.w	r2, r7, #24
 80078b8:	3a11      	subs	r2, #17
 80078ba:	7812      	ldrb	r2, [r2, #0]
 80078bc:	f002 021f 	and.w	r2, r2, #31
 80078c0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80078c2:	f107 0318 	add.w	r3, r7, #24
 80078c6:	3b11      	subs	r3, #17
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f023 0301 	bic.w	r3, r3, #1
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	f107 0118 	add.w	r1, r7, #24
 80078d4:	3910      	subs	r1, #16
 80078d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078da:	3b18      	subs	r3, #24
 80078dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fbdf 	bl	80070a4 <find_volume>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078ec:	f102 0217 	add.w	r2, r2, #23
 80078f0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80078f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078f6:	f103 0317 	add.w	r3, r3, #23
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 82e3 	bne.w	8007ec8 <f_open+0x65c>
		INIT_BUF(dj);
 8007902:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007906:	3b18      	subs	r3, #24
 8007908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790c:	3318      	adds	r3, #24
 800790e:	f107 0218 	add.w	r2, r7, #24
 8007912:	3a04      	subs	r2, #4
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800791a:	3b18      	subs	r3, #24
 800791c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007920:	4ad1      	ldr	r2, [pc, #836]	; (8007c68 <f_open+0x3fc>)
 8007922:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007924:	f107 0318 	add.w	r3, r7, #24
 8007928:	3b10      	subs	r3, #16
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007930:	3b18      	subs	r3, #24
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff fa89 	bl	8006e4c <follow_path>
 800793a:	4603      	mov	r3, r0
 800793c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007940:	f102 0217 	add.w	r2, r2, #23
 8007944:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007946:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800794a:	3b18      	subs	r3, #24
 800794c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007950:	3314      	adds	r3, #20
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007958:	f102 0210 	add.w	r2, r2, #16
 800795c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800795e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007962:	f103 0317 	add.w	r3, r3, #23
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d126      	bne.n	80079ba <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800796c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007970:	f103 0310 	add.w	r3, r3, #16
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800797a:	2306      	movs	r3, #6
 800797c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007980:	f102 0217 	add.w	r2, r2, #23
 8007984:	7013      	strb	r3, [r2, #0]
 8007986:	e018      	b.n	80079ba <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007988:	f107 0318 	add.w	r3, r7, #24
 800798c:	3b11      	subs	r3, #17
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	f023 0301 	bic.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf14      	ite	ne
 8007998:	2301      	movne	r3, #1
 800799a:	2300      	moveq	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079a4:	3b18      	subs	r3, #24
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fd fb01 	bl	8004fb0 <chk_lock>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079b4:	f102 0217 	add.w	r2, r2, #23
 80079b8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80079ba:	f107 0318 	add.w	r3, r7, #24
 80079be:	3b11      	subs	r3, #17
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f003 031c 	and.w	r3, r3, #28
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8150 	beq.w	8007c6c <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 80079cc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079d0:	f103 0317 	add.w	r3, r3, #23
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d030      	beq.n	8007a3c <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80079da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079de:	f103 0317 	add.w	r3, r3, #23
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d112      	bne.n	8007a0e <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80079e8:	f7fd fb54 	bl	8005094 <enq_lock>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <f_open+0x196>
 80079f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079f6:	3b18      	subs	r3, #24
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe ff35 	bl	8006868 <dir_register>
 80079fe:	4603      	mov	r3, r0
 8007a00:	e000      	b.n	8007a04 <f_open+0x198>
 8007a02:	2312      	movs	r3, #18
 8007a04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a08:	f102 0217 	add.w	r2, r2, #23
 8007a0c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a0e:	f107 0318 	add.w	r3, r7, #24
 8007a12:	3b11      	subs	r3, #17
 8007a14:	f107 0218 	add.w	r2, r7, #24
 8007a18:	3a11      	subs	r2, #17
 8007a1a:	7812      	ldrb	r2, [r2, #0]
 8007a1c:	f042 0208 	orr.w	r2, r2, #8
 8007a20:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007a22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a26:	3b18      	subs	r3, #24
 8007a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a34:	f102 0210 	add.w	r2, r2, #16
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	e01f      	b.n	8007a7c <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a40:	f103 0310 	add.w	r3, r3, #16
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	330b      	adds	r3, #11
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	f003 0311 	and.w	r3, r3, #17
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d006      	beq.n	8007a60 <f_open+0x1f4>
					res = FR_DENIED;
 8007a52:	2307      	movs	r3, #7
 8007a54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a58:	f102 0217 	add.w	r2, r2, #23
 8007a5c:	7013      	strb	r3, [r2, #0]
 8007a5e:	e00d      	b.n	8007a7c <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007a60:	f107 0318 	add.w	r3, r7, #24
 8007a64:	3b11      	subs	r3, #17
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <f_open+0x210>
						res = FR_EXIST;
 8007a70:	2308      	movs	r3, #8
 8007a72:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a76:	f102 0217 	add.w	r2, r2, #23
 8007a7a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007a7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a80:	f103 0317 	add.w	r3, r3, #23
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f040 8122 	bne.w	8007cd0 <f_open+0x464>
 8007a8c:	f107 0318 	add.w	r3, r7, #24
 8007a90:	3b11      	subs	r3, #17
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8119 	beq.w	8007cd0 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8007a9e:	f7fd f90b 	bl	8004cb8 <get_fattime>
 8007aa2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007aa6:	f103 030c 	add.w	r3, r3, #12
 8007aaa:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007aac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ab0:	f103 0310 	add.w	r3, r3, #16
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330e      	adds	r3, #14
 8007ab8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007abc:	f102 020c 	add.w	r2, r2, #12
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007aca:	f103 030c 	add.w	r3, r3, #12
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ada:	f103 0310 	add.w	r3, r3, #16
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330f      	adds	r3, #15
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007aea:	f103 030c 	add.w	r3, r3, #12
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	0c1a      	lsrs	r2, r3, #16
 8007af2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007af6:	f103 0310 	add.w	r3, r3, #16
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3310      	adds	r3, #16
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b06:	f103 030c 	add.w	r3, r3, #12
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	0e1a      	lsrs	r2, r3, #24
 8007b0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b12:	f103 0310 	add.w	r3, r3, #16
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3311      	adds	r3, #17
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007b1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b22:	f103 0310 	add.w	r3, r3, #16
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	330b      	adds	r3, #11
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007b2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b32:	f103 0310 	add.w	r3, r3, #16
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	331c      	adds	r3, #28
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b42:	f103 0310 	add.w	r3, r3, #16
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	331d      	adds	r3, #29
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b52:	f103 0310 	add.w	r3, r3, #16
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	331e      	adds	r3, #30
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b62:	f103 0310 	add.w	r3, r3, #16
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	331f      	adds	r3, #31
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b72:	3b18      	subs	r3, #24
 8007b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b7e:	f102 0210 	add.w	r2, r2, #16
 8007b82:	6811      	ldr	r1, [r2, #0]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe fbae 	bl	80062e6 <ld_clust>
 8007b8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b8e:	f103 0308 	add.w	r3, r3, #8
 8007b92:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007b94:	2100      	movs	r1, #0
 8007b96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b9a:	f103 0310 	add.w	r3, r3, #16
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	f7fe fbd0 	bl	8006344 <st_clust>
				dj.fs->wflag = 1;
 8007ba4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ba8:	3b18      	subs	r3, #24
 8007baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8007bba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bbe:	f103 0308 	add.w	r3, r3, #8
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8083 	beq.w	8007cd0 <f_open+0x464>
					dw = dj.fs->winsect;
 8007bca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007bce:	3b18      	subs	r3, #24
 8007bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007bda:	330c      	adds	r3, #12
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007be2:	f102 020c 	add.w	r2, r2, #12
 8007be6:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007be8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007bec:	3b18      	subs	r3, #24
 8007bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bf8:	f102 0208 	add.w	r2, r2, #8
 8007bfc:	6811      	ldr	r1, [r2, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fd ff86 	bl	8005b10 <remove_chain>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c0a:	f102 0217 	add.w	r2, r2, #23
 8007c0e:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007c10:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c14:	f103 0317 	add.w	r3, r3, #23
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d158      	bne.n	8007cd0 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007c1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c22:	3b18      	subs	r3, #24
 8007c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c2e:	f102 0208 	add.w	r2, r2, #8
 8007c32:	6812      	ldr	r2, [r2, #0]
 8007c34:	3a01      	subs	r2, #1
 8007c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 8007c3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c42:	3b18      	subs	r3, #24
 8007c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c4e:	f102 020c 	add.w	r2, r2, #12
 8007c52:	6811      	ldr	r1, [r2, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fd fbcb 	bl	80053f0 <move_window>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c60:	f102 0217 	add.w	r2, r2, #23
 8007c64:	7013      	strb	r3, [r2, #0]
 8007c66:	e033      	b.n	8007cd0 <f_open+0x464>
 8007c68:	200000cc 	.word	0x200000cc
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007c6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c70:	f103 0317 	add.w	r3, r3, #23
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d12a      	bne.n	8007cd0 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007c7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c7e:	f103 0310 	add.w	r3, r3, #16
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	330b      	adds	r3, #11
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 0310 	and.w	r3, r3, #16
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d006      	beq.n	8007c9e <f_open+0x432>
					res = FR_NO_FILE;
 8007c90:	2304      	movs	r3, #4
 8007c92:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c96:	f102 0217 	add.w	r2, r2, #23
 8007c9a:	7013      	strb	r3, [r2, #0]
 8007c9c:	e018      	b.n	8007cd0 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007c9e:	f107 0318 	add.w	r3, r7, #24
 8007ca2:	3b11      	subs	r3, #17
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d010      	beq.n	8007cd0 <f_open+0x464>
 8007cae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cb2:	f103 0310 	add.w	r3, r3, #16
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	330b      	adds	r3, #11
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d005      	beq.n	8007cd0 <f_open+0x464>
						res = FR_DENIED;
 8007cc4:	2307      	movs	r3, #7
 8007cc6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cca:	f102 0217 	add.w	r2, r2, #23
 8007cce:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007cd0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cd4:	f103 0317 	add.w	r3, r3, #23
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d15b      	bne.n	8007d96 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007cde:	f107 0318 	add.w	r3, r7, #24
 8007ce2:	3b11      	subs	r3, #17
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <f_open+0x496>
				mode |= FA__WRITTEN;
 8007cee:	f107 0318 	add.w	r3, r7, #24
 8007cf2:	3b11      	subs	r3, #17
 8007cf4:	f107 0218 	add.w	r2, r7, #24
 8007cf8:	3a11      	subs	r2, #17
 8007cfa:	7812      	ldrb	r2, [r2, #0]
 8007cfc:	f042 0220 	orr.w	r2, r2, #32
 8007d00:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007d02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d06:	3b18      	subs	r3, #24
 8007d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007d12:	330c      	adds	r3, #12
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	f107 0318 	add.w	r3, r7, #24
 8007d1a:	3b0c      	subs	r3, #12
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	331c      	adds	r3, #28
 8007d24:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 8007d26:	f107 0318 	add.w	r3, r7, #24
 8007d2a:	3b0c      	subs	r3, #12
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007d32:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d36:	f102 0210 	add.w	r2, r2, #16
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d3e:	f107 0318 	add.w	r3, r7, #24
 8007d42:	3b11      	subs	r3, #17
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f023 0301 	bic.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bf14      	ite	ne
 8007d4e:	2301      	movne	r3, #1
 8007d50:	2300      	moveq	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	461a      	mov	r2, r3
 8007d56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d5a:	3b18      	subs	r3, #24
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fd f9bc 	bl	80050dc <inc_lock>
 8007d64:	4602      	mov	r2, r0
 8007d66:	f107 0318 	add.w	r3, r7, #24
 8007d6a:	3b0c      	subs	r3, #12
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007d72:	3308      	adds	r3, #8
 8007d74:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8007d76:	f107 0318 	add.w	r3, r7, #24
 8007d7a:	3b0c      	subs	r3, #12
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007d82:	3308      	adds	r3, #8
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d105      	bne.n	8007d96 <f_open+0x52a>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d90:	f102 0217 	add.w	r2, r2, #23
 8007d94:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007d96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d9a:	f103 0317 	add.w	r3, r3, #23
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f040 8091 	bne.w	8007ec8 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8007da6:	f107 0318 	add.w	r3, r7, #24
 8007daa:	3b0c      	subs	r3, #12
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db2:	3306      	adds	r3, #6
 8007db4:	f107 0218 	add.w	r2, r7, #24
 8007db8:	3a11      	subs	r2, #17
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8007dbe:	f107 0318 	add.w	r3, r7, #24
 8007dc2:	3b0c      	subs	r3, #12
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dca:	3307      	adds	r3, #7
 8007dcc:	2200      	movs	r2, #0
 8007dce:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007dd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007dd4:	3b18      	subs	r3, #24
 8007dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007de0:	f102 0210 	add.w	r2, r2, #16
 8007de4:	6811      	ldr	r1, [r2, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fa7d 	bl	80062e6 <ld_clust>
 8007dec:	4602      	mov	r2, r0
 8007dee:	f107 0318 	add.w	r3, r7, #24
 8007df2:	3b0c      	subs	r3, #12
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dfa:	3310      	adds	r3, #16
 8007dfc:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007dfe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e02:	f103 0310 	add.w	r3, r3, #16
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	331f      	adds	r3, #31
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	061a      	lsls	r2, r3, #24
 8007e0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e12:	f103 0310 	add.w	r3, r3, #16
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	331e      	adds	r3, #30
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	041b      	lsls	r3, r3, #16
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e24:	f102 0210 	add.w	r2, r2, #16
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	321d      	adds	r2, #29
 8007e2c:	7812      	ldrb	r2, [r2, #0]
 8007e2e:	0212      	lsls	r2, r2, #8
 8007e30:	4313      	orrs	r3, r2
 8007e32:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e36:	f102 0210 	add.w	r2, r2, #16
 8007e3a:	6812      	ldr	r2, [r2, #0]
 8007e3c:	321c      	adds	r2, #28
 8007e3e:	7812      	ldrb	r2, [r2, #0]
 8007e40:	431a      	orrs	r2, r3
 8007e42:	f107 0318 	add.w	r3, r7, #24
 8007e46:	3b0c      	subs	r3, #12
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4e:	330c      	adds	r3, #12
 8007e50:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8007e52:	f107 0318 	add.w	r3, r7, #24
 8007e56:	3b0c      	subs	r3, #12
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5e:	3308      	adds	r3, #8
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8007e64:	f107 0318 	add.w	r3, r7, #24
 8007e68:	3b0c      	subs	r3, #12
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e70:	3318      	adds	r3, #24
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007e76:	f107 0318 	add.w	r3, r7, #24
 8007e7a:	3b0c      	subs	r3, #12
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007e82:	3304      	adds	r3, #4
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007e88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e8c:	3b18      	subs	r3, #24
 8007e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	f107 0318 	add.w	r3, r7, #24
 8007e98:	3b0c      	subs	r3, #12
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea0:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8007ea2:	f107 0318 	add.w	r3, r7, #24
 8007ea6:	3b0c      	subs	r3, #12
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	3306      	adds	r3, #6
 8007eb6:	881a      	ldrh	r2, [r3, #0]
 8007eb8:	f107 0318 	add.w	r3, r7, #24
 8007ebc:	3b0c      	subs	r3, #12
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007ec8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ecc:	f103 0317 	add.w	r3, r3, #23
 8007ed0:	781b      	ldrb	r3, [r3, #0]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop

08007ee0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08c      	sub	sp, #48	; 0x30
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff fc2f 	bl	800775c <validate>
 8007efe:	4603      	mov	r3, r0
 8007f00:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007f02:	7ffb      	ldrb	r3, [r7, #31]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <f_read+0x2c>
 8007f08:	7ffb      	ldrb	r3, [r7, #31]
 8007f0a:	e1fb      	b.n	8008304 <f_read+0x424>
	if (fp->err)								/* Check error */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f12:	3307      	adds	r3, #7
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d005      	beq.n	8007f26 <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f20:	3307      	adds	r3, #7
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	e1ee      	b.n	8008304 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2c:	3306      	adds	r3, #6
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007f38:	2307      	movs	r3, #7
 8007f3a:	e1e3      	b.n	8008304 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f42:	330c      	adds	r3, #12
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	f240 81ce 	bls.w	80082fa <f_read+0x41a>
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007f62:	e1ca      	b.n	80082fa <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7a:	330a      	adds	r3, #10
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f82:	fb03 f301 	mul.w	r3, r3, r1
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 8160 	bne.w	800824e <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f94:	3308      	adds	r3, #8
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa4:	330a      	adds	r3, #10
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fba:	3302      	adds	r3, #2
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d14a      	bne.n	8008062 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe0:	3310      	adds	r3, #16
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fe6:	e01f      	b.n	8008028 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007fee:	3304      	adds	r3, #4
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7fd fe9d 	bl	8005d42 <clmt_clust>
 8008008:	62f8      	str	r0, [r7, #44]	; 0x2c
 800800a:	e00d      	b.n	8008028 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801a:	3314      	adds	r3, #20
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f7fd fb10 	bl	8005646 <get_fat>
 8008026:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	2b01      	cmp	r3, #1
 800802c:	d807      	bhi.n	800803e <f_read+0x15e>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008034:	3307      	adds	r3, #7
 8008036:	2202      	movs	r2, #2
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	2302      	movs	r3, #2
 800803c:	e162      	b.n	8008304 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d107      	bne.n	8008056 <f_read+0x176>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804c:	3307      	adds	r3, #7
 800804e:	2201      	movs	r2, #1
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	2301      	movs	r3, #1
 8008054:	e156      	b.n	8008304 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805c:	3314      	adds	r3, #20
 800805e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008060:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008070:	3314      	adds	r3, #20
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	f7fd fabd 	bl	80055f6 <clust2sect>
 800807c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d107      	bne.n	8008094 <f_read+0x1b4>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808a:	3307      	adds	r3, #7
 800808c:	2202      	movs	r2, #2
 800808e:	701a      	strb	r2, [r3, #0]
 8008090:	2302      	movs	r3, #2
 8008092:	e137      	b.n	8008304 <f_read+0x424>
			sect += csect;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4413      	add	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a8:	330a      	adds	r3, #10
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	461a      	mov	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d070      	beq.n	800819e <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80080bc:	7dfa      	ldrb	r2, [r7, #23]
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	441a      	add	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ce:	3302      	adds	r3, #2
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d90b      	bls.n	80080ee <f_read+0x20e>
					cc = fp->fs->csize - csect;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e2:	3302      	adds	r3, #2
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fa:	3301      	adds	r3, #1
 80080fc:	7818      	ldrb	r0, [r3, #0]
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	6a39      	ldr	r1, [r7, #32]
 8008104:	f7fc fe7a 	bl	8004dfc <disk_read>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008114:	3307      	adds	r3, #7
 8008116:	2201      	movs	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	2301      	movs	r3, #1
 800811c:	e0f2      	b.n	8008304 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008124:	3306      	adds	r3, #6
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d028      	beq.n	8008182 <f_read+0x2a2>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008136:	3318      	adds	r3, #24
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008140:	429a      	cmp	r2, r3
 8008142:	d91e      	bls.n	8008182 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800814a:	3318      	adds	r3, #24
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad2      	subs	r2, r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815e:	330a      	adds	r3, #10
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	fb03 f302 	mul.w	r3, r3, r2
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	18d0      	adds	r0, r2, r3
 800816a:	68f9      	ldr	r1, [r7, #12]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008178:	330a      	adds	r3, #10
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	f7fc fe9b 	bl	8004eb8 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818e:	330a      	adds	r3, #10
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	fb02 f303 	mul.w	r3, r2, r3
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800819c:	e093      	b.n	80082c6 <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a4:	3318      	adds	r3, #24
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d049      	beq.n	8008242 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b4:	3306      	adds	r3, #6
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d028      	beq.n	8008212 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081cc:	3301      	adds	r3, #1
 80081ce:	7818      	ldrb	r0, [r3, #0]
 80081d0:	68f9      	ldr	r1, [r7, #12]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d8:	3318      	adds	r3, #24
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	2301      	movs	r3, #1
 80081de:	f7fc fe2d 	bl	8004e3c <disk_write>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ee:	3307      	adds	r3, #7
 80081f0:	2201      	movs	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	2301      	movs	r3, #1
 80081f6:	e085      	b.n	8008304 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fe:	3306      	adds	r3, #6
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008206:	b2da      	uxtb	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820e:	3306      	adds	r3, #6
 8008210:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800821e:	3301      	adds	r3, #1
 8008220:	7818      	ldrb	r0, [r3, #0]
 8008222:	68f9      	ldr	r1, [r7, #12]
 8008224:	2301      	movs	r3, #1
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	f7fc fde8 	bl	8004dfc <disk_read>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008238:	3307      	adds	r3, #7
 800823a:	2201      	movs	r2, #1
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	2301      	movs	r3, #1
 8008240:	e060      	b.n	8008304 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008248:	3318      	adds	r3, #24
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825a:	330a      	adds	r3, #10
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	4618      	mov	r0, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008266:	3308      	adds	r3, #8
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008276:	330a      	adds	r3, #10
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	fbb2 f1f3 	udiv	r1, r2, r3
 800827e:	fb03 f301 	mul.w	r3, r3, r1
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	1ac3      	subs	r3, r0, r3
 8008286:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8008288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d901      	bls.n	8008294 <f_read+0x3b4>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829a:	3308      	adds	r3, #8
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082aa:	330a      	adds	r3, #10
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80082b2:	fb03 f301 	mul.w	r3, r3, r1
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4413      	add	r3, r2
 80082bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082be:	4619      	mov	r1, r3
 80082c0:	6a38      	ldr	r0, [r7, #32]
 80082c2:	f7fc fdf9 	bl	8004eb8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80082c6:	6a3a      	ldr	r2, [r7, #32]
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	4413      	add	r3, r2
 80082cc:	623b      	str	r3, [r7, #32]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d4:	3308      	adds	r3, #8
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	441a      	add	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e2:	3308      	adds	r3, #8
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	441a      	add	r2, r3
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f ae31 	bne.w	8007f64 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3730      	adds	r7, #48	; 0x30
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	; 0x28
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fa19 	bl	800775c <validate>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <f_write+0x2c>
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	e258      	b.n	80087ea <f_write+0x4de>
	if (fp->err)							/* Check error */
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800833e:	3307      	adds	r3, #7
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834c:	3307      	adds	r3, #7
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	e24b      	b.n	80087ea <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008358:	3306      	adds	r3, #6
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008364:	2307      	movs	r3, #7
 8008366:	e240      	b.n	80087ea <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836e:	3308      	adds	r3, #8
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	441a      	add	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837c:	3308      	adds	r3, #8
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	429a      	cmp	r2, r3
 8008382:	f080 8208 	bcs.w	8008796 <f_write+0x48a>
 8008386:	2300      	movs	r3, #0
 8008388:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800838a:	e204      	b.n	8008796 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008392:	3308      	adds	r3, #8
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a2:	330a      	adds	r3, #10
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80083aa:	fb03 f301 	mul.w	r3, r3, r1
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 818d 	bne.w	80086d0 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083bc:	3308      	adds	r3, #8
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083cc:	330a      	adds	r3, #10
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e2:	3302      	adds	r3, #2
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	4013      	ands	r3, r2
 80083ec:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80083ee:	7dbb      	ldrb	r3, [r7, #22]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d167      	bne.n	80084c4 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fa:	3308      	adds	r3, #8
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d112      	bne.n	8008428 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008408:	3310      	adds	r3, #16
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	2b00      	cmp	r3, #0
 8008412:	d129      	bne.n	8008468 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2100      	movs	r1, #0
 800841e:	4618      	mov	r0, r3
 8008420:	f7fd fbde 	bl	8005be0 <create_chain>
 8008424:	6278      	str	r0, [r7, #36]	; 0x24
 8008426:	e01f      	b.n	8008468 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800842e:	3304      	adds	r3, #4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800843c:	3308      	adds	r3, #8
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4619      	mov	r1, r3
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7fd fc7d 	bl	8005d42 <clmt_clust>
 8008448:	6278      	str	r0, [r7, #36]	; 0x24
 800844a:	e00d      	b.n	8008468 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845a:	3314      	adds	r3, #20
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f7fd fbbd 	bl	8005be0 <create_chain>
 8008466:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8198 	beq.w	80087a0 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	2b01      	cmp	r3, #1
 8008474:	d107      	bne.n	8008486 <f_write+0x17a>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	3307      	adds	r3, #7
 800847e:	2202      	movs	r2, #2
 8008480:	701a      	strb	r2, [r3, #0]
 8008482:	2302      	movs	r3, #2
 8008484:	e1b1      	b.n	80087ea <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848c:	d107      	bne.n	800849e <f_write+0x192>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008494:	3307      	adds	r3, #7
 8008496:	2201      	movs	r2, #1
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	2301      	movs	r3, #1
 800849c:	e1a5      	b.n	80087ea <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a4:	3314      	adds	r3, #20
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b0:	3310      	adds	r3, #16
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d105      	bne.n	80084c4 <f_write+0x1b8>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084be:	3310      	adds	r3, #16
 80084c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c2:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ca:	3306      	adds	r3, #6
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d028      	beq.n	8008528 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e2:	3301      	adds	r3, #1
 80084e4:	7818      	ldrb	r0, [r3, #0]
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ee:	3318      	adds	r3, #24
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	2301      	movs	r3, #1
 80084f4:	f7fc fca2 	bl	8004e3c <disk_write>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008504:	3307      	adds	r3, #7
 8008506:	2201      	movs	r2, #1
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	2301      	movs	r3, #1
 800850c:	e16d      	b.n	80087ea <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008514:	3306      	adds	r3, #6
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800851c:	b2da      	uxtb	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008524:	3306      	adds	r3, #6
 8008526:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008536:	3314      	adds	r3, #20
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7fd f85a 	bl	80055f6 <clust2sect>
 8008542:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d107      	bne.n	800855a <f_write+0x24e>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008550:	3307      	adds	r3, #7
 8008552:	2202      	movs	r2, #2
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	2302      	movs	r3, #2
 8008558:	e147      	b.n	80087ea <f_write+0x4de>
			sect += csect;
 800855a:	7dbb      	ldrb	r3, [r7, #22]
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4413      	add	r3, r2
 8008560:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800856e:	330a      	adds	r3, #10
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	fbb3 f3f2 	udiv	r3, r3, r2
 800857a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d074      	beq.n	800866c <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008582:	7dba      	ldrb	r2, [r7, #22]
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	441a      	add	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008594:	3302      	adds	r3, #2
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d90b      	bls.n	80085b4 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085a8:	3302      	adds	r3, #2
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	7dbb      	ldrb	r3, [r7, #22]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c0:	3301      	adds	r3, #1
 80085c2:	7818      	ldrb	r0, [r3, #0]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	69b9      	ldr	r1, [r7, #24]
 80085ca:	f7fc fc37 	bl	8004e3c <disk_write>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085da:	3307      	adds	r3, #7
 80085dc:	2201      	movs	r2, #1
 80085de:	701a      	strb	r2, [r3, #0]
 80085e0:	2301      	movs	r3, #1
 80085e2:	e102      	b.n	80087ea <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ea:	3318      	adds	r3, #24
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d92b      	bls.n	8008650 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008600:	3318      	adds	r3, #24
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008614:	330a      	adds	r3, #10
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	fb03 f302 	mul.w	r3, r3, r2
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	18d1      	adds	r1, r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862c:	330a      	adds	r3, #10
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	f7fc fc41 	bl	8004eb8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800863c:	3306      	adds	r3, #6
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800864c:	3306      	adds	r3, #6
 800864e:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800865c:	330a      	adds	r3, #10
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	fb02 f303 	mul.w	r3, r2, r3
 8008668:	623b      	str	r3, [r7, #32]
				continue;
 800866a:	e07a      	b.n	8008762 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008672:	3318      	adds	r3, #24
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	429a      	cmp	r2, r3
 800867a:	d023      	beq.n	80086c4 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008682:	3308      	adds	r3, #8
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868c:	330c      	adds	r3, #12
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d217      	bcs.n	80086c4 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a0:	3301      	adds	r3, #1
 80086a2:	7818      	ldrb	r0, [r3, #0]
 80086a4:	68f9      	ldr	r1, [r7, #12]
 80086a6:	2301      	movs	r3, #1
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	f7fc fba7 	bl	8004dfc <disk_read>
 80086ae:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d007      	beq.n	80086c4 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ba:	3307      	adds	r3, #7
 80086bc:	2201      	movs	r2, #1
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	2301      	movs	r3, #1
 80086c2:	e092      	b.n	80087ea <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ca:	3318      	adds	r3, #24
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086dc:	330a      	adds	r3, #10
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e8:	3308      	adds	r3, #8
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f8:	330a      	adds	r3, #10
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008700:	fb03 f301 	mul.w	r3, r3, r1
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	1ac3      	subs	r3, r0, r3
 8008708:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800870a:	6a3a      	ldr	r2, [r7, #32]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	429a      	cmp	r2, r3
 8008710:	d901      	bls.n	8008716 <f_write+0x40a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800871c:	3308      	adds	r3, #8
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800872c:	330a      	adds	r3, #10
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	fbb2 f1f3 	udiv	r1, r2, r3
 8008734:	fb03 f301 	mul.w	r3, r3, r1
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4413      	add	r3, r2
 800873e:	6a3a      	ldr	r2, [r7, #32]
 8008740:	69b9      	ldr	r1, [r7, #24]
 8008742:	4618      	mov	r0, r3
 8008744:	f7fc fbb8 	bl	8004eb8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874e:	3306      	adds	r3, #6
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008756:	b2da      	uxtb	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800875e:	3306      	adds	r3, #6
 8008760:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	4413      	add	r3, r2
 8008768:	61bb      	str	r3, [r7, #24]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008770:	3308      	adds	r3, #8
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	441a      	add	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800877e:	3308      	adds	r3, #8
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	441a      	add	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	f47f adf7 	bne.w	800838c <f_write+0x80>
 800879e:	e000      	b.n	80087a2 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087a0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a8:	3308      	adds	r3, #8
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b2:	330c      	adds	r3, #12
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d909      	bls.n	80087ce <f_write+0x4c2>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c0:	3308      	adds	r3, #8
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ca:	330c      	adds	r3, #12
 80087cc:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d4:	3306      	adds	r3, #6
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	f043 0320 	orr.w	r3, r3, #32
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e4:	3306      	adds	r3, #6
 80087e6:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3728      	adds	r7, #40	; 0x28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b086      	sub	sp, #24
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fe ffae 	bl	800775c <validate>
 8008800:	4603      	mov	r3, r0
 8008802:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 80cc 	bne.w	80089a4 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008812:	3306      	adds	r3, #6
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 80c2 	beq.w	80089a4 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008826:	3306      	adds	r3, #6
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d022      	beq.n	8008878 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883e:	3301      	adds	r3, #1
 8008840:	7818      	ldrb	r0, [r3, #0]
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884a:	3318      	adds	r3, #24
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	2301      	movs	r3, #1
 8008850:	f7fc faf4 	bl	8004e3c <disk_write>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800885a:	2301      	movs	r3, #1
 800885c:	e0a3      	b.n	80089a6 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008864:	3306      	adds	r3, #6
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800886c:	b2da      	uxtb	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008874:	3306      	adds	r3, #6
 8008876:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008886:	331c      	adds	r3, #28
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	4610      	mov	r0, r2
 800888e:	f7fc fdaf 	bl	80053f0 <move_window>
 8008892:	4603      	mov	r3, r0
 8008894:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	2b00      	cmp	r3, #0
 800889a:	f040 8083 	bne.w	80089a4 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	330b      	adds	r3, #11
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	330b      	adds	r3, #11
 80088b2:	f042 0220 	orr.w	r2, r2, #32
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c0:	330c      	adds	r3, #12
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	331c      	adds	r3, #28
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	701a      	strb	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d2:	330c      	adds	r3, #12
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	0a1b      	lsrs	r3, r3, #8
 80088da:	b29a      	uxth	r2, r3
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	331d      	adds	r3, #29
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	701a      	strb	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ea:	330c      	adds	r3, #12
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	0c1a      	lsrs	r2, r3, #16
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	331e      	adds	r3, #30
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	701a      	strb	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fe:	330c      	adds	r3, #12
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	0e1a      	lsrs	r2, r3, #24
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	331f      	adds	r3, #31
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008912:	3310      	adds	r3, #16
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
 8008918:	6938      	ldr	r0, [r7, #16]
 800891a:	f7fd fd13 	bl	8006344 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800891e:	f7fc f9cb 	bl	8004cb8 <get_fattime>
 8008922:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	3316      	adds	r3, #22
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	b29b      	uxth	r3, r3
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	b29a      	uxth	r2, r3
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3317      	adds	r3, #23
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	0c1a      	lsrs	r2, r3, #16
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	3318      	adds	r3, #24
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	0e1a      	lsrs	r2, r3, #24
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3319      	adds	r3, #25
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	3312      	adds	r3, #18
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	3313      	adds	r3, #19
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800896c:	3306      	adds	r3, #6
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	f023 0320 	bic.w	r3, r3, #32
 8008974:	b2da      	uxtb	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897c:	3306      	adds	r3, #6
 800897e:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898c:	3304      	adds	r3, #4
 800898e:	2201      	movs	r2, #1
 8008990:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f7fc fd5c 	bl	8005458 <sync_fs>
 80089a0:	4603      	mov	r3, r0
 80089a2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff ff1b 	bl	80087f2 <f_sync>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d119      	bne.n	80089fa <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fe fec8 	bl	800775c <validate>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d111      	bne.n	80089fa <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80089dc:	3308      	adds	r3, #8
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fc fc3d 	bl	8005260 <dec_lock>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d104      	bne.n	80089fa <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b090      	sub	sp, #64	; 0x40
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fe fea4 	bl	800775c <validate>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008a1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <f_lseek+0x24>
 8008a22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a26:	e31d      	b.n	8009064 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a2e:	3307      	adds	r3, #7
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3c:	3307      	adds	r3, #7
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	e310      	b.n	8009064 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008a48:	3304      	adds	r3, #4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 813c 	beq.w	8008cca <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a58:	d172      	bne.n	8008b40 <f_lseek+0x13c>
			tbl = fp->cltbl;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008a60:	3304      	adds	r3, #4
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	1d1a      	adds	r2, r3, #4
 8008a6a:	627a      	str	r2, [r7, #36]	; 0x24
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	2302      	movs	r3, #2
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a7a:	3310      	adds	r3, #16
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d049      	beq.n	8008b1a <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	613b      	str	r3, [r7, #16]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	3302      	adds	r3, #2
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fc fdcc 	bl	8005646 <get_fat>
 8008aae:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d807      	bhi.n	8008ac6 <f_lseek+0xc2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008abc:	3307      	adds	r3, #7
 8008abe:	2202      	movs	r2, #2
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e2ce      	b.n	8009064 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008acc:	d107      	bne.n	8008ade <f_lseek+0xda>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad4:	3307      	adds	r3, #7
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	2301      	movs	r3, #1
 8008adc:	e2c2      	b.n	8009064 <f_lseek+0x660>
					} while (cl == pcl + 1);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d0d5      	beq.n	8008a94 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d809      	bhi.n	8008b04 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	627a      	str	r2, [r7, #36]	; 0x24
 8008af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	1d1a      	adds	r2, r3, #4
 8008afe:	627a      	str	r2, [r7, #36]	; 0x24
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b10:	3314      	adds	r3, #20
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d3b5      	bcc.n	8008a86 <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008b20:	3304      	adds	r3, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b26:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d803      	bhi.n	8008b38 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	e293      	b.n	8009060 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008b38:	2311      	movs	r3, #17
 8008b3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008b3e:	e28f      	b.n	8009060 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b46:	330c      	adds	r3, #12
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d905      	bls.n	8008b5c <f_lseek+0x158>
				ofs = fp->fsize;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b56:	330c      	adds	r3, #12
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b62:	3308      	adds	r3, #8
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	601a      	str	r2, [r3, #0]
			if (ofs) {
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 8278 	beq.w	8009060 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fd f8e3 	bl	8005d42 <clmt_clust>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b84:	3314      	adds	r3, #20
 8008b86:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b96:	3314      	adds	r3, #20
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7fc fd2a 	bl	80055f6 <clust2sect>
 8008ba2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d107      	bne.n	8008bba <f_lseek+0x1b6>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e254      	b.n	8009064 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	1e5a      	subs	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bca:	330a      	adds	r3, #10
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bde:	3302      	adds	r3, #2
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	4013      	ands	r3, r2
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	4413      	add	r3, r2
 8008bea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c02:	330a      	adds	r3, #10
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c0a:	fb03 f301 	mul.w	r3, r3, r1
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 8225 	beq.w	8009060 <f_lseek+0x65c>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1c:	3318      	adds	r3, #24
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	f000 821c 	beq.w	8009060 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2e:	3306      	adds	r3, #6
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d028      	beq.n	8008c8c <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c46:	3301      	adds	r3, #1
 8008c48:	7818      	ldrb	r0, [r3, #0]
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c52:	3318      	adds	r3, #24
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	2301      	movs	r3, #1
 8008c58:	f7fc f8f0 	bl	8004e3c <disk_write>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d007      	beq.n	8008c72 <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c68:	3307      	adds	r3, #7
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e1f8      	b.n	8009064 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c78:	3306      	adds	r3, #6
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c88:	3306      	adds	r3, #6
 8008c8a:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c98:	3301      	adds	r3, #1
 8008c9a:	7818      	ldrb	r0, [r3, #0]
 8008c9c:	6879      	ldr	r1, [r7, #4]
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	f7fc f8ab 	bl	8004dfc <disk_read>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb2:	3307      	adds	r3, #7
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	701a      	strb	r2, [r3, #0]
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e1d3      	b.n	8009064 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc2:	3318      	adds	r3, #24
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	e1ca      	b.n	8009060 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd0:	330c      	adds	r3, #12
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d90e      	bls.n	8008cf8 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce0:	3306      	adds	r3, #6
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d105      	bne.n	8008cf8 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf2:	330c      	adds	r3, #12
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfe:	3308      	adds	r3, #8
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	637b      	str	r3, [r7, #52]	; 0x34
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d0e:	3308      	adds	r3, #8
 8008d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d12:	601a      	str	r2, [r3, #0]
		if (ofs) {
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8113 	beq.w	8008f42 <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d28:	3302      	adds	r3, #2
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3a:	330a      	adds	r3, #10
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	fb03 f302 	mul.w	r3, r3, r2
 8008d42:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d024      	beq.n	8008d94 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	1e5a      	subs	r2, r3, #1
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	1e59      	subs	r1, r3, #1
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d318      	bcc.n	8008d94 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	1e5a      	subs	r2, r3, #1
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	425b      	negs	r3, r3
 8008d6a:	401a      	ands	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d72:	3308      	adds	r3, #8
 8008d74:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7c:	3308      	adds	r3, #8
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d8c:	3314      	adds	r3, #20
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d92:	e034      	b.n	8008dfe <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d9a:	3310      	adds	r3, #16
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d125      	bne.n	8008df2 <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fc ff15 	bl	8005be0 <create_chain>
 8008db6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d107      	bne.n	8008dce <f_lseek+0x3ca>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc4:	3307      	adds	r3, #7
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e14a      	b.n	8009064 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd4:	d107      	bne.n	8008de6 <f_lseek+0x3e2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ddc:	3307      	adds	r3, #7
 8008dde:	2201      	movs	r2, #1
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	2301      	movs	r3, #1
 8008de4:	e13e      	b.n	8009064 <f_lseek+0x660>
					fp->sclust = clst;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dec:	3310      	adds	r3, #16
 8008dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008df0:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df8:	3314      	adds	r3, #20
 8008dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dfc:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 809e 	beq.w	8008f42 <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 8008e06:	e058      	b.n	8008eba <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e0e:	3306      	adds	r3, #6
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fc fedb 	bl	8005be0 <create_chain>
 8008e2a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10b      	bne.n	8008e4a <f_lseek+0x446>
							ofs = bcs; break;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	603b      	str	r3, [r7, #0]
 8008e36:	e044      	b.n	8008ec2 <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fc fbff 	bl	8005646 <get_fat>
 8008e48:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e50:	d107      	bne.n	8008e62 <f_lseek+0x45e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e58:	3307      	adds	r3, #7
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e100      	b.n	8009064 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d90a      	bls.n	8008e7e <f_lseek+0x47a>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e74:	3314      	adds	r3, #20
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d307      	bcc.n	8008e8e <f_lseek+0x48a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e84:	3307      	adds	r3, #7
 8008e86:	2202      	movs	r2, #2
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e0ea      	b.n	8009064 <f_lseek+0x660>
					fp->clust = clst;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e94:	3314      	adds	r3, #20
 8008e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e98:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	441a      	add	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eae:	3308      	adds	r3, #8
 8008eb0:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d8a2      	bhi.n	8008e08 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec8:	3308      	adds	r3, #8
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	441a      	add	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee6:	330a      	adds	r3, #10
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ef2:	fb02 f201 	mul.w	r2, r2, r1
 8008ef6:	1a9b      	subs	r3, r3, r2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d022      	beq.n	8008f42 <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fc fb75 	bl	80055f6 <clust2sect>
 8008f0c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d107      	bne.n	8008f24 <f_lseek+0x520>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1a:	3307      	adds	r3, #7
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	2302      	movs	r3, #2
 8008f22:	e09f      	b.n	8009064 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f30:	330a      	adds	r3, #10
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f3e:	4413      	add	r3, r2
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f48:	3308      	adds	r3, #8
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f58:	330a      	adds	r3, #10
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f60:	fb03 f301 	mul.w	r3, r3, r1
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d057      	beq.n	800901a <f_lseek+0x616>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f70:	3318      	adds	r3, #24
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d04f      	beq.n	800901a <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f80:	3306      	adds	r3, #6
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d028      	beq.n	8008fde <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f98:	3301      	adds	r3, #1
 8008f9a:	7818      	ldrb	r0, [r3, #0]
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa4:	3318      	adds	r3, #24
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f7fb ff47 	bl	8004e3c <disk_write>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d007      	beq.n	8008fc4 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fba:	3307      	adds	r3, #7
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	701a      	strb	r2, [r3, #0]
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e04f      	b.n	8009064 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fca:	3306      	adds	r3, #6
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fda:	3306      	adds	r3, #6
 8008fdc:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fea:	3301      	adds	r3, #1
 8008fec:	7818      	ldrb	r0, [r3, #0]
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ff4:	f7fb ff02 	bl	8004dfc <disk_read>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d007      	beq.n	800900e <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009004:	3307      	adds	r3, #7
 8009006:	2201      	movs	r2, #1
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	2301      	movs	r3, #1
 800900c:	e02a      	b.n	8009064 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009014:	3318      	adds	r3, #24
 8009016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009018:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009020:	3308      	adds	r3, #8
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902a:	330c      	adds	r3, #12
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	d916      	bls.n	8009060 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009038:	3308      	adds	r3, #8
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009042:	330c      	adds	r3, #12
 8009044:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904c:	3306      	adds	r3, #6
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f043 0320 	orr.w	r3, r3, #32
 8009054:	b2da      	uxtb	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905c:	3306      	adds	r3, #6
 800905e:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009060:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009064:	4618      	mov	r0, r3
 8009066:	3740      	adds	r7, #64	; 0x40
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08e      	sub	sp, #56	; 0x38
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8009078:	f107 030c 	add.w	r3, r7, #12
 800907c:	2200      	movs	r2, #0
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7fe f80f 	bl	80070a4 <find_volume>
 8009086:	4603      	mov	r3, r0
 8009088:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8009092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 80c4 	bne.w	8009224 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a2:	3310      	adds	r3, #16
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ac:	3314      	adds	r3, #20
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3b02      	subs	r3, #2
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d807      	bhi.n	80090c6 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090bc:	3310      	adds	r3, #16
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e0ae      	b.n	8009224 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80090d4:	7efb      	ldrb	r3, [r7, #27]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d127      	bne.n	800912a <f_getfree+0xbe>
				clst = 2;
 80090da:	2302      	movs	r3, #2
 80090dc:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80090de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090e0:	69f8      	ldr	r0, [r7, #28]
 80090e2:	f7fc fab0 	bl	8005646 <get_fat>
 80090e6:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ee:	d103      	bne.n	80090f8 <f_getfree+0x8c>
 80090f0:	2301      	movs	r3, #1
 80090f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80090f6:	e07f      	b.n	80091f8 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d103      	bne.n	8009106 <f_getfree+0x9a>
 80090fe:	2302      	movs	r3, #2
 8009100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009104:	e078      	b.n	80091f8 <f_getfree+0x18c>
					if (stat == 0) n++;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d102      	bne.n	8009112 <f_getfree+0xa6>
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	3301      	adds	r3, #1
 8009110:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	3301      	adds	r3, #1
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800911e:	3314      	adds	r3, #20
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009124:	429a      	cmp	r2, r3
 8009126:	d3da      	bcc.n	80090de <f_getfree+0x72>
 8009128:	e066      	b.n	80091f8 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009130:	3314      	adds	r3, #20
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
 8009144:	2300      	movs	r3, #0
 8009146:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	d115      	bne.n	800917a <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	62ba      	str	r2, [r7, #40]	; 0x28
 8009154:	4619      	mov	r1, r3
 8009156:	69f8      	ldr	r0, [r7, #28]
 8009158:	f7fc f94a 	bl	80053f0 <move_window>
 800915c:	4603      	mov	r3, r0
 800915e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8009162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009166:	2b00      	cmp	r3, #0
 8009168:	d145      	bne.n	80091f6 <f_getfree+0x18a>
						p = fs->win.d8;
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009174:	330a      	adds	r3, #10
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800917a:	7efb      	ldrb	r3, [r7, #27]
 800917c:	2b02      	cmp	r3, #2
 800917e:	d115      	bne.n	80091ac <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	3301      	adds	r3, #1
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	b21a      	sxth	r2, r3
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b21b      	sxth	r3, r3
 8009190:	4313      	orrs	r3, r2
 8009192:	b21b      	sxth	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d102      	bne.n	800919e <f_getfree+0x132>
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	3301      	adds	r3, #1
 800919c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	3302      	adds	r3, #2
 80091a2:	623b      	str	r3, [r7, #32]
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	3b02      	subs	r3, #2
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
 80091aa:	e01d      	b.n	80091e8 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	3303      	adds	r3, #3
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	061a      	lsls	r2, r3, #24
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	3302      	adds	r3, #2
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	041b      	lsls	r3, r3, #16
 80091bc:	4313      	orrs	r3, r2
 80091be:	6a3a      	ldr	r2, [r7, #32]
 80091c0:	3201      	adds	r2, #1
 80091c2:	7812      	ldrb	r2, [r2, #0]
 80091c4:	0212      	lsls	r2, r2, #8
 80091c6:	4313      	orrs	r3, r2
 80091c8:	6a3a      	ldr	r2, [r7, #32]
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d102      	bne.n	80091dc <f_getfree+0x170>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	3301      	adds	r3, #1
 80091da:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	3304      	adds	r3, #4
 80091e0:	623b      	str	r3, [r7, #32]
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	3b04      	subs	r3, #4
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	3b01      	subs	r3, #1
 80091ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1a9      	bne.n	8009148 <f_getfree+0xdc>
 80091f4:	e000      	b.n	80091f8 <f_getfree+0x18c>
						if (res != FR_OK) break;
 80091f6:	bf00      	nop
			}
			fs->free_clust = n;
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091fe:	3310      	adds	r3, #16
 8009200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009202:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800920a:	3305      	adds	r3, #5
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	f043 0301 	orr.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800921a:	3305      	adds	r3, #5
 800921c:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009222:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8009224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009228:	4618      	mov	r0, r3
 800922a:	3738      	adds	r7, #56	; 0x38
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009244:	e01b      	b.n	800927e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009246:	f107 0310 	add.w	r3, r7, #16
 800924a:	f107 0114 	add.w	r1, r7, #20
 800924e:	2201      	movs	r2, #1
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7fe fe45 	bl	8007ee0 <f_read>
		if (rc != 1) break;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d116      	bne.n	800928a <f_gets+0x5a>
		c = s[0];
 800925c:	7d3b      	ldrb	r3, [r7, #20]
 800925e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	2b0d      	cmp	r3, #13
 8009264:	d100      	bne.n	8009268 <f_gets+0x38>
 8009266:	e00a      	b.n	800927e <f_gets+0x4e>
		*p++ = c;
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	61ba      	str	r2, [r7, #24]
 800926e:	7dfa      	ldrb	r2, [r7, #23]
 8009270:	701a      	strb	r2, [r3, #0]
		n++;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	3301      	adds	r3, #1
 8009276:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	2b0a      	cmp	r3, #10
 800927c:	d007      	beq.n	800928e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	3b01      	subs	r3, #1
 8009282:	69fa      	ldr	r2, [r7, #28]
 8009284:	429a      	cmp	r2, r3
 8009286:	dbde      	blt.n	8009246 <f_gets+0x16>
 8009288:	e002      	b.n	8009290 <f_gets+0x60>
		if (rc != 1) break;
 800928a:	bf00      	nop
 800928c:	e000      	b.n	8009290 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800928e:	bf00      	nop
	}
	*p = 0;
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2200      	movs	r2, #0
 8009294:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <f_gets+0x70>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	e000      	b.n	80092a2 <f_gets+0x72>
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3720      	adds	r7, #32
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	460b      	mov	r3, r1
 80092b4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80092b6:	78fb      	ldrb	r3, [r7, #3]
 80092b8:	2b0a      	cmp	r3, #10
 80092ba:	d103      	bne.n	80092c4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80092bc:	210d      	movs	r1, #13
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff fff3 	bl	80092aa <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	db25      	blt.n	800931c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	60fa      	str	r2, [r7, #12]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	4413      	add	r3, r2
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b3c      	cmp	r3, #60	; 0x3c
 80092e2:	dd12      	ble.n	800930a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f103 010c 	add.w	r1, r3, #12
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	f107 0308 	add.w	r3, r7, #8
 80092f4:	f7ff f80a 	bl	800830c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d101      	bne.n	8009304 <putc_bfd+0x5a>
 8009300:	2300      	movs	r3, #0
 8009302:	e001      	b.n	8009308 <putc_bfd+0x5e>
 8009304:	f04f 33ff 	mov.w	r3, #4294967295
 8009308:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	609a      	str	r2, [r3, #8]
 800931a:	e000      	b.n	800931e <putc_bfd+0x74>
	if (i < 0) return;
 800931c:	bf00      	nop
}
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b097      	sub	sp, #92	; 0x5c
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800933a:	e009      	b.n	8009350 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	f107 030c 	add.w	r3, r7, #12
 8009348:	4611      	mov	r1, r2
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff ffad 	bl	80092aa <putc_bfd>
	while (*str)			/* Put the string */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1f1      	bne.n	800933c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	db15      	blt.n	800938a <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	461c      	mov	r4, r3
 8009364:	f107 0208 	add.w	r2, r7, #8
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	f103 010c 	add.w	r1, r3, #12
 8009370:	4613      	mov	r3, r2
 8009372:	4622      	mov	r2, r4
 8009374:	f7fe ffca 	bl	800830c <f_write>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d105      	bne.n	800938a <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	4293      	cmp	r3, r2
 8009384:	d101      	bne.n	800938a <f_puts+0x66>
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	e001      	b.n	800938e <f_puts+0x6a>
	return EOF;
 800938a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800938e:	4618      	mov	r0, r3
 8009390:	375c      	adds	r7, #92	; 0x5c
 8009392:	46bd      	mov	sp, r7
 8009394:	bd90      	pop	{r4, r7, pc}
	...

08009398 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80093a6:	2301      	movs	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80093ae:	4b1f      	ldr	r3, [pc, #124]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093b0:	7a5b      	ldrb	r3, [r3, #9]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d831      	bhi.n	800941c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093b8:	4b1c      	ldr	r3, [pc, #112]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093ba:	7a5b      	ldrb	r3, [r3, #9]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	461a      	mov	r2, r3
 80093c0:	4b1a      	ldr	r3, [pc, #104]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093c2:	2100      	movs	r1, #0
 80093c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80093c6:	4b19      	ldr	r3, [pc, #100]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093c8:	7a5b      	ldrb	r3, [r3, #9]
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	4a17      	ldr	r2, [pc, #92]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80093d6:	4b15      	ldr	r3, [pc, #84]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093d8:	7a5b      	ldrb	r3, [r3, #9]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	4b13      	ldr	r3, [pc, #76]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093e0:	4413      	add	r3, r2
 80093e2:	79fa      	ldrb	r2, [r7, #7]
 80093e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093e8:	7a5b      	ldrb	r3, [r3, #9]
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	b2d1      	uxtb	r1, r2
 80093f0:	4a0e      	ldr	r2, [pc, #56]	; (800942c <FATFS_LinkDriverEx+0x94>)
 80093f2:	7251      	strb	r1, [r2, #9]
 80093f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80093f6:	7dbb      	ldrb	r3, [r7, #22]
 80093f8:	3330      	adds	r3, #48	; 0x30
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	3301      	adds	r3, #1
 8009404:	223a      	movs	r2, #58	; 0x3a
 8009406:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	3302      	adds	r3, #2
 800940c:	222f      	movs	r2, #47	; 0x2f
 800940e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3303      	adds	r3, #3
 8009414:	2200      	movs	r2, #0
 8009416:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
}
 800941e:	4618      	mov	r0, r3
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	200002cc 	.word	0x200002cc

08009430 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800943a:	2200      	movs	r2, #0
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ffaa 	bl	8009398 <FATFS_LinkDriverEx>
 8009444:	4603      	mov	r3, r0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	6039      	str	r1, [r7, #0]
 800945a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800945c:	88fb      	ldrh	r3, [r7, #6]
 800945e:	2b7f      	cmp	r3, #127	; 0x7f
 8009460:	d802      	bhi.n	8009468 <ff_convert+0x18>
		c = chr;
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	81fb      	strh	r3, [r7, #14]
 8009466:	e025      	b.n	80094b4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00b      	beq.n	8009486 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800946e:	88fb      	ldrh	r3, [r7, #6]
 8009470:	2bff      	cmp	r3, #255	; 0xff
 8009472:	d805      	bhi.n	8009480 <ff_convert+0x30>
 8009474:	88fb      	ldrh	r3, [r7, #6]
 8009476:	3b80      	subs	r3, #128	; 0x80
 8009478:	4a12      	ldr	r2, [pc, #72]	; (80094c4 <ff_convert+0x74>)
 800947a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800947e:	e000      	b.n	8009482 <ff_convert+0x32>
 8009480:	2300      	movs	r3, #0
 8009482:	81fb      	strh	r3, [r7, #14]
 8009484:	e016      	b.n	80094b4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8009486:	2300      	movs	r3, #0
 8009488:	81fb      	strh	r3, [r7, #14]
 800948a:	e009      	b.n	80094a0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800948c:	89fb      	ldrh	r3, [r7, #14]
 800948e:	4a0d      	ldr	r2, [pc, #52]	; (80094c4 <ff_convert+0x74>)
 8009490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009494:	88fa      	ldrh	r2, [r7, #6]
 8009496:	429a      	cmp	r2, r3
 8009498:	d006      	beq.n	80094a8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800949a:	89fb      	ldrh	r3, [r7, #14]
 800949c:	3301      	adds	r3, #1
 800949e:	81fb      	strh	r3, [r7, #14]
 80094a0:	89fb      	ldrh	r3, [r7, #14]
 80094a2:	2b7f      	cmp	r3, #127	; 0x7f
 80094a4:	d9f2      	bls.n	800948c <ff_convert+0x3c>
 80094a6:	e000      	b.n	80094aa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80094a8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80094aa:	89fb      	ldrh	r3, [r7, #14]
 80094ac:	3380      	adds	r3, #128	; 0x80
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80094b4:	89fb      	ldrh	r3, [r7, #14]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	0800a250 	.word	0x0800a250

080094c8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	e002      	b.n	80094de <ff_wtoupper+0x16>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	4a0f      	ldr	r2, [pc, #60]	; (800951c <ff_wtoupper+0x54>)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d006      	beq.n	80094f8 <ff_wtoupper+0x30>
 80094ea:	4a0c      	ldr	r2, [pc, #48]	; (800951c <ff_wtoupper+0x54>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f2:	88fa      	ldrh	r2, [r7, #6]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d1ef      	bne.n	80094d8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80094f8:	4a08      	ldr	r2, [pc, #32]	; (800951c <ff_wtoupper+0x54>)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d004      	beq.n	800950e <ff_wtoupper+0x46>
 8009504:	4a06      	ldr	r2, [pc, #24]	; (8009520 <ff_wtoupper+0x58>)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800950c:	e000      	b.n	8009510 <ff_wtoupper+0x48>
 800950e:	88fb      	ldrh	r3, [r7, #6]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	0800a350 	.word	0x0800a350
 8009520:	0800a530 	.word	0x0800a530

08009524 <__errno>:
 8009524:	4b01      	ldr	r3, [pc, #4]	; (800952c <__errno+0x8>)
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20000024 	.word	0x20000024

08009530 <__libc_init_array>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	4d0d      	ldr	r5, [pc, #52]	; (8009568 <__libc_init_array+0x38>)
 8009534:	4c0d      	ldr	r4, [pc, #52]	; (800956c <__libc_init_array+0x3c>)
 8009536:	1b64      	subs	r4, r4, r5
 8009538:	10a4      	asrs	r4, r4, #2
 800953a:	2600      	movs	r6, #0
 800953c:	42a6      	cmp	r6, r4
 800953e:	d109      	bne.n	8009554 <__libc_init_array+0x24>
 8009540:	4d0b      	ldr	r5, [pc, #44]	; (8009570 <__libc_init_array+0x40>)
 8009542:	4c0c      	ldr	r4, [pc, #48]	; (8009574 <__libc_init_array+0x44>)
 8009544:	f000 fc4e 	bl	8009de4 <_init>
 8009548:	1b64      	subs	r4, r4, r5
 800954a:	10a4      	asrs	r4, r4, #2
 800954c:	2600      	movs	r6, #0
 800954e:	42a6      	cmp	r6, r4
 8009550:	d105      	bne.n	800955e <__libc_init_array+0x2e>
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	f855 3b04 	ldr.w	r3, [r5], #4
 8009558:	4798      	blx	r3
 800955a:	3601      	adds	r6, #1
 800955c:	e7ee      	b.n	800953c <__libc_init_array+0xc>
 800955e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009562:	4798      	blx	r3
 8009564:	3601      	adds	r6, #1
 8009566:	e7f2      	b.n	800954e <__libc_init_array+0x1e>
 8009568:	0800a744 	.word	0x0800a744
 800956c:	0800a744 	.word	0x0800a744
 8009570:	0800a744 	.word	0x0800a744
 8009574:	0800a748 	.word	0x0800a748

08009578 <memcpy>:
 8009578:	440a      	add	r2, r1
 800957a:	4291      	cmp	r1, r2
 800957c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009580:	d100      	bne.n	8009584 <memcpy+0xc>
 8009582:	4770      	bx	lr
 8009584:	b510      	push	{r4, lr}
 8009586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800958a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800958e:	4291      	cmp	r1, r2
 8009590:	d1f9      	bne.n	8009586 <memcpy+0xe>
 8009592:	bd10      	pop	{r4, pc}

08009594 <memset>:
 8009594:	4402      	add	r2, r0
 8009596:	4603      	mov	r3, r0
 8009598:	4293      	cmp	r3, r2
 800959a:	d100      	bne.n	800959e <memset+0xa>
 800959c:	4770      	bx	lr
 800959e:	f803 1b01 	strb.w	r1, [r3], #1
 80095a2:	e7f9      	b.n	8009598 <memset+0x4>

080095a4 <siprintf>:
 80095a4:	b40e      	push	{r1, r2, r3}
 80095a6:	b500      	push	{lr}
 80095a8:	b09c      	sub	sp, #112	; 0x70
 80095aa:	ab1d      	add	r3, sp, #116	; 0x74
 80095ac:	9002      	str	r0, [sp, #8]
 80095ae:	9006      	str	r0, [sp, #24]
 80095b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095b4:	4809      	ldr	r0, [pc, #36]	; (80095dc <siprintf+0x38>)
 80095b6:	9107      	str	r1, [sp, #28]
 80095b8:	9104      	str	r1, [sp, #16]
 80095ba:	4909      	ldr	r1, [pc, #36]	; (80095e0 <siprintf+0x3c>)
 80095bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c0:	9105      	str	r1, [sp, #20]
 80095c2:	6800      	ldr	r0, [r0, #0]
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	a902      	add	r1, sp, #8
 80095c8:	f000 f868 	bl	800969c <_svfiprintf_r>
 80095cc:	9b02      	ldr	r3, [sp, #8]
 80095ce:	2200      	movs	r2, #0
 80095d0:	701a      	strb	r2, [r3, #0]
 80095d2:	b01c      	add	sp, #112	; 0x70
 80095d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d8:	b003      	add	sp, #12
 80095da:	4770      	bx	lr
 80095dc:	20000024 	.word	0x20000024
 80095e0:	ffff0208 	.word	0xffff0208

080095e4 <__ssputs_r>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	688e      	ldr	r6, [r1, #8]
 80095ea:	429e      	cmp	r6, r3
 80095ec:	4682      	mov	sl, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	4690      	mov	r8, r2
 80095f2:	461f      	mov	r7, r3
 80095f4:	d838      	bhi.n	8009668 <__ssputs_r+0x84>
 80095f6:	898a      	ldrh	r2, [r1, #12]
 80095f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095fc:	d032      	beq.n	8009664 <__ssputs_r+0x80>
 80095fe:	6825      	ldr	r5, [r4, #0]
 8009600:	6909      	ldr	r1, [r1, #16]
 8009602:	eba5 0901 	sub.w	r9, r5, r1
 8009606:	6965      	ldr	r5, [r4, #20]
 8009608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800960c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009610:	3301      	adds	r3, #1
 8009612:	444b      	add	r3, r9
 8009614:	106d      	asrs	r5, r5, #1
 8009616:	429d      	cmp	r5, r3
 8009618:	bf38      	it	cc
 800961a:	461d      	movcc	r5, r3
 800961c:	0553      	lsls	r3, r2, #21
 800961e:	d531      	bpl.n	8009684 <__ssputs_r+0xa0>
 8009620:	4629      	mov	r1, r5
 8009622:	f000 fb39 	bl	8009c98 <_malloc_r>
 8009626:	4606      	mov	r6, r0
 8009628:	b950      	cbnz	r0, 8009640 <__ssputs_r+0x5c>
 800962a:	230c      	movs	r3, #12
 800962c:	f8ca 3000 	str.w	r3, [sl]
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
 800963c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009640:	6921      	ldr	r1, [r4, #16]
 8009642:	464a      	mov	r2, r9
 8009644:	f7ff ff98 	bl	8009578 <memcpy>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800964e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	6126      	str	r6, [r4, #16]
 8009656:	6165      	str	r5, [r4, #20]
 8009658:	444e      	add	r6, r9
 800965a:	eba5 0509 	sub.w	r5, r5, r9
 800965e:	6026      	str	r6, [r4, #0]
 8009660:	60a5      	str	r5, [r4, #8]
 8009662:	463e      	mov	r6, r7
 8009664:	42be      	cmp	r6, r7
 8009666:	d900      	bls.n	800966a <__ssputs_r+0x86>
 8009668:	463e      	mov	r6, r7
 800966a:	4632      	mov	r2, r6
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	4641      	mov	r1, r8
 8009670:	f000 faa8 	bl	8009bc4 <memmove>
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	1b9b      	subs	r3, r3, r6
 800967a:	4432      	add	r2, r6
 800967c:	60a3      	str	r3, [r4, #8]
 800967e:	6022      	str	r2, [r4, #0]
 8009680:	2000      	movs	r0, #0
 8009682:	e7db      	b.n	800963c <__ssputs_r+0x58>
 8009684:	462a      	mov	r2, r5
 8009686:	f000 fb61 	bl	8009d4c <_realloc_r>
 800968a:	4606      	mov	r6, r0
 800968c:	2800      	cmp	r0, #0
 800968e:	d1e1      	bne.n	8009654 <__ssputs_r+0x70>
 8009690:	6921      	ldr	r1, [r4, #16]
 8009692:	4650      	mov	r0, sl
 8009694:	f000 fab0 	bl	8009bf8 <_free_r>
 8009698:	e7c7      	b.n	800962a <__ssputs_r+0x46>
	...

0800969c <_svfiprintf_r>:
 800969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	4698      	mov	r8, r3
 80096a2:	898b      	ldrh	r3, [r1, #12]
 80096a4:	061b      	lsls	r3, r3, #24
 80096a6:	b09d      	sub	sp, #116	; 0x74
 80096a8:	4607      	mov	r7, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	4614      	mov	r4, r2
 80096ae:	d50e      	bpl.n	80096ce <_svfiprintf_r+0x32>
 80096b0:	690b      	ldr	r3, [r1, #16]
 80096b2:	b963      	cbnz	r3, 80096ce <_svfiprintf_r+0x32>
 80096b4:	2140      	movs	r1, #64	; 0x40
 80096b6:	f000 faef 	bl	8009c98 <_malloc_r>
 80096ba:	6028      	str	r0, [r5, #0]
 80096bc:	6128      	str	r0, [r5, #16]
 80096be:	b920      	cbnz	r0, 80096ca <_svfiprintf_r+0x2e>
 80096c0:	230c      	movs	r3, #12
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	e0d1      	b.n	800986e <_svfiprintf_r+0x1d2>
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	616b      	str	r3, [r5, #20]
 80096ce:	2300      	movs	r3, #0
 80096d0:	9309      	str	r3, [sp, #36]	; 0x24
 80096d2:	2320      	movs	r3, #32
 80096d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096dc:	2330      	movs	r3, #48	; 0x30
 80096de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009888 <_svfiprintf_r+0x1ec>
 80096e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096e6:	f04f 0901 	mov.w	r9, #1
 80096ea:	4623      	mov	r3, r4
 80096ec:	469a      	mov	sl, r3
 80096ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f2:	b10a      	cbz	r2, 80096f8 <_svfiprintf_r+0x5c>
 80096f4:	2a25      	cmp	r2, #37	; 0x25
 80096f6:	d1f9      	bne.n	80096ec <_svfiprintf_r+0x50>
 80096f8:	ebba 0b04 	subs.w	fp, sl, r4
 80096fc:	d00b      	beq.n	8009716 <_svfiprintf_r+0x7a>
 80096fe:	465b      	mov	r3, fp
 8009700:	4622      	mov	r2, r4
 8009702:	4629      	mov	r1, r5
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff ff6d 	bl	80095e4 <__ssputs_r>
 800970a:	3001      	adds	r0, #1
 800970c:	f000 80aa 	beq.w	8009864 <_svfiprintf_r+0x1c8>
 8009710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009712:	445a      	add	r2, fp
 8009714:	9209      	str	r2, [sp, #36]	; 0x24
 8009716:	f89a 3000 	ldrb.w	r3, [sl]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 80a2 	beq.w	8009864 <_svfiprintf_r+0x1c8>
 8009720:	2300      	movs	r3, #0
 8009722:	f04f 32ff 	mov.w	r2, #4294967295
 8009726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800972a:	f10a 0a01 	add.w	sl, sl, #1
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	9307      	str	r3, [sp, #28]
 8009732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009736:	931a      	str	r3, [sp, #104]	; 0x68
 8009738:	4654      	mov	r4, sl
 800973a:	2205      	movs	r2, #5
 800973c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009740:	4851      	ldr	r0, [pc, #324]	; (8009888 <_svfiprintf_r+0x1ec>)
 8009742:	f7f6 fd4d 	bl	80001e0 <memchr>
 8009746:	9a04      	ldr	r2, [sp, #16]
 8009748:	b9d8      	cbnz	r0, 8009782 <_svfiprintf_r+0xe6>
 800974a:	06d0      	lsls	r0, r2, #27
 800974c:	bf44      	itt	mi
 800974e:	2320      	movmi	r3, #32
 8009750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009754:	0711      	lsls	r1, r2, #28
 8009756:	bf44      	itt	mi
 8009758:	232b      	movmi	r3, #43	; 0x2b
 800975a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975e:	f89a 3000 	ldrb.w	r3, [sl]
 8009762:	2b2a      	cmp	r3, #42	; 0x2a
 8009764:	d015      	beq.n	8009792 <_svfiprintf_r+0xf6>
 8009766:	9a07      	ldr	r2, [sp, #28]
 8009768:	4654      	mov	r4, sl
 800976a:	2000      	movs	r0, #0
 800976c:	f04f 0c0a 	mov.w	ip, #10
 8009770:	4621      	mov	r1, r4
 8009772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009776:	3b30      	subs	r3, #48	; 0x30
 8009778:	2b09      	cmp	r3, #9
 800977a:	d94e      	bls.n	800981a <_svfiprintf_r+0x17e>
 800977c:	b1b0      	cbz	r0, 80097ac <_svfiprintf_r+0x110>
 800977e:	9207      	str	r2, [sp, #28]
 8009780:	e014      	b.n	80097ac <_svfiprintf_r+0x110>
 8009782:	eba0 0308 	sub.w	r3, r0, r8
 8009786:	fa09 f303 	lsl.w	r3, r9, r3
 800978a:	4313      	orrs	r3, r2
 800978c:	9304      	str	r3, [sp, #16]
 800978e:	46a2      	mov	sl, r4
 8009790:	e7d2      	b.n	8009738 <_svfiprintf_r+0x9c>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	1d19      	adds	r1, r3, #4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	9103      	str	r1, [sp, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	bfbb      	ittet	lt
 800979e:	425b      	neglt	r3, r3
 80097a0:	f042 0202 	orrlt.w	r2, r2, #2
 80097a4:	9307      	strge	r3, [sp, #28]
 80097a6:	9307      	strlt	r3, [sp, #28]
 80097a8:	bfb8      	it	lt
 80097aa:	9204      	strlt	r2, [sp, #16]
 80097ac:	7823      	ldrb	r3, [r4, #0]
 80097ae:	2b2e      	cmp	r3, #46	; 0x2e
 80097b0:	d10c      	bne.n	80097cc <_svfiprintf_r+0x130>
 80097b2:	7863      	ldrb	r3, [r4, #1]
 80097b4:	2b2a      	cmp	r3, #42	; 0x2a
 80097b6:	d135      	bne.n	8009824 <_svfiprintf_r+0x188>
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	1d1a      	adds	r2, r3, #4
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	9203      	str	r2, [sp, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	bfb8      	it	lt
 80097c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097c8:	3402      	adds	r4, #2
 80097ca:	9305      	str	r3, [sp, #20]
 80097cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009898 <_svfiprintf_r+0x1fc>
 80097d0:	7821      	ldrb	r1, [r4, #0]
 80097d2:	2203      	movs	r2, #3
 80097d4:	4650      	mov	r0, sl
 80097d6:	f7f6 fd03 	bl	80001e0 <memchr>
 80097da:	b140      	cbz	r0, 80097ee <_svfiprintf_r+0x152>
 80097dc:	2340      	movs	r3, #64	; 0x40
 80097de:	eba0 000a 	sub.w	r0, r0, sl
 80097e2:	fa03 f000 	lsl.w	r0, r3, r0
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	4303      	orrs	r3, r0
 80097ea:	3401      	adds	r4, #1
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f2:	4826      	ldr	r0, [pc, #152]	; (800988c <_svfiprintf_r+0x1f0>)
 80097f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097f8:	2206      	movs	r2, #6
 80097fa:	f7f6 fcf1 	bl	80001e0 <memchr>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d038      	beq.n	8009874 <_svfiprintf_r+0x1d8>
 8009802:	4b23      	ldr	r3, [pc, #140]	; (8009890 <_svfiprintf_r+0x1f4>)
 8009804:	bb1b      	cbnz	r3, 800984e <_svfiprintf_r+0x1b2>
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	3307      	adds	r3, #7
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	3308      	adds	r3, #8
 8009810:	9303      	str	r3, [sp, #12]
 8009812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009814:	4433      	add	r3, r6
 8009816:	9309      	str	r3, [sp, #36]	; 0x24
 8009818:	e767      	b.n	80096ea <_svfiprintf_r+0x4e>
 800981a:	fb0c 3202 	mla	r2, ip, r2, r3
 800981e:	460c      	mov	r4, r1
 8009820:	2001      	movs	r0, #1
 8009822:	e7a5      	b.n	8009770 <_svfiprintf_r+0xd4>
 8009824:	2300      	movs	r3, #0
 8009826:	3401      	adds	r4, #1
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	4619      	mov	r1, r3
 800982c:	f04f 0c0a 	mov.w	ip, #10
 8009830:	4620      	mov	r0, r4
 8009832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009836:	3a30      	subs	r2, #48	; 0x30
 8009838:	2a09      	cmp	r2, #9
 800983a:	d903      	bls.n	8009844 <_svfiprintf_r+0x1a8>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0c5      	beq.n	80097cc <_svfiprintf_r+0x130>
 8009840:	9105      	str	r1, [sp, #20]
 8009842:	e7c3      	b.n	80097cc <_svfiprintf_r+0x130>
 8009844:	fb0c 2101 	mla	r1, ip, r1, r2
 8009848:	4604      	mov	r4, r0
 800984a:	2301      	movs	r3, #1
 800984c:	e7f0      	b.n	8009830 <_svfiprintf_r+0x194>
 800984e:	ab03      	add	r3, sp, #12
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	462a      	mov	r2, r5
 8009854:	4b0f      	ldr	r3, [pc, #60]	; (8009894 <_svfiprintf_r+0x1f8>)
 8009856:	a904      	add	r1, sp, #16
 8009858:	4638      	mov	r0, r7
 800985a:	f3af 8000 	nop.w
 800985e:	1c42      	adds	r2, r0, #1
 8009860:	4606      	mov	r6, r0
 8009862:	d1d6      	bne.n	8009812 <_svfiprintf_r+0x176>
 8009864:	89ab      	ldrh	r3, [r5, #12]
 8009866:	065b      	lsls	r3, r3, #25
 8009868:	f53f af2c 	bmi.w	80096c4 <_svfiprintf_r+0x28>
 800986c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800986e:	b01d      	add	sp, #116	; 0x74
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009874:	ab03      	add	r3, sp, #12
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	462a      	mov	r2, r5
 800987a:	4b06      	ldr	r3, [pc, #24]	; (8009894 <_svfiprintf_r+0x1f8>)
 800987c:	a904      	add	r1, sp, #16
 800987e:	4638      	mov	r0, r7
 8009880:	f000 f87a 	bl	8009978 <_printf_i>
 8009884:	e7eb      	b.n	800985e <_svfiprintf_r+0x1c2>
 8009886:	bf00      	nop
 8009888:	0800a710 	.word	0x0800a710
 800988c:	0800a71a 	.word	0x0800a71a
 8009890:	00000000 	.word	0x00000000
 8009894:	080095e5 	.word	0x080095e5
 8009898:	0800a716 	.word	0x0800a716

0800989c <_printf_common>:
 800989c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a0:	4616      	mov	r6, r2
 80098a2:	4699      	mov	r9, r3
 80098a4:	688a      	ldr	r2, [r1, #8]
 80098a6:	690b      	ldr	r3, [r1, #16]
 80098a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098ac:	4293      	cmp	r3, r2
 80098ae:	bfb8      	it	lt
 80098b0:	4613      	movlt	r3, r2
 80098b2:	6033      	str	r3, [r6, #0]
 80098b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098b8:	4607      	mov	r7, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	b10a      	cbz	r2, 80098c2 <_printf_common+0x26>
 80098be:	3301      	adds	r3, #1
 80098c0:	6033      	str	r3, [r6, #0]
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	0699      	lsls	r1, r3, #26
 80098c6:	bf42      	ittt	mi
 80098c8:	6833      	ldrmi	r3, [r6, #0]
 80098ca:	3302      	addmi	r3, #2
 80098cc:	6033      	strmi	r3, [r6, #0]
 80098ce:	6825      	ldr	r5, [r4, #0]
 80098d0:	f015 0506 	ands.w	r5, r5, #6
 80098d4:	d106      	bne.n	80098e4 <_printf_common+0x48>
 80098d6:	f104 0a19 	add.w	sl, r4, #25
 80098da:	68e3      	ldr	r3, [r4, #12]
 80098dc:	6832      	ldr	r2, [r6, #0]
 80098de:	1a9b      	subs	r3, r3, r2
 80098e0:	42ab      	cmp	r3, r5
 80098e2:	dc26      	bgt.n	8009932 <_printf_common+0x96>
 80098e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098e8:	1e13      	subs	r3, r2, #0
 80098ea:	6822      	ldr	r2, [r4, #0]
 80098ec:	bf18      	it	ne
 80098ee:	2301      	movne	r3, #1
 80098f0:	0692      	lsls	r2, r2, #26
 80098f2:	d42b      	bmi.n	800994c <_printf_common+0xb0>
 80098f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098f8:	4649      	mov	r1, r9
 80098fa:	4638      	mov	r0, r7
 80098fc:	47c0      	blx	r8
 80098fe:	3001      	adds	r0, #1
 8009900:	d01e      	beq.n	8009940 <_printf_common+0xa4>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	68e5      	ldr	r5, [r4, #12]
 8009906:	6832      	ldr	r2, [r6, #0]
 8009908:	f003 0306 	and.w	r3, r3, #6
 800990c:	2b04      	cmp	r3, #4
 800990e:	bf08      	it	eq
 8009910:	1aad      	subeq	r5, r5, r2
 8009912:	68a3      	ldr	r3, [r4, #8]
 8009914:	6922      	ldr	r2, [r4, #16]
 8009916:	bf0c      	ite	eq
 8009918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800991c:	2500      	movne	r5, #0
 800991e:	4293      	cmp	r3, r2
 8009920:	bfc4      	itt	gt
 8009922:	1a9b      	subgt	r3, r3, r2
 8009924:	18ed      	addgt	r5, r5, r3
 8009926:	2600      	movs	r6, #0
 8009928:	341a      	adds	r4, #26
 800992a:	42b5      	cmp	r5, r6
 800992c:	d11a      	bne.n	8009964 <_printf_common+0xc8>
 800992e:	2000      	movs	r0, #0
 8009930:	e008      	b.n	8009944 <_printf_common+0xa8>
 8009932:	2301      	movs	r3, #1
 8009934:	4652      	mov	r2, sl
 8009936:	4649      	mov	r1, r9
 8009938:	4638      	mov	r0, r7
 800993a:	47c0      	blx	r8
 800993c:	3001      	adds	r0, #1
 800993e:	d103      	bne.n	8009948 <_printf_common+0xac>
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009948:	3501      	adds	r5, #1
 800994a:	e7c6      	b.n	80098da <_printf_common+0x3e>
 800994c:	18e1      	adds	r1, r4, r3
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	2030      	movs	r0, #48	; 0x30
 8009952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009956:	4422      	add	r2, r4
 8009958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800995c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009960:	3302      	adds	r3, #2
 8009962:	e7c7      	b.n	80098f4 <_printf_common+0x58>
 8009964:	2301      	movs	r3, #1
 8009966:	4622      	mov	r2, r4
 8009968:	4649      	mov	r1, r9
 800996a:	4638      	mov	r0, r7
 800996c:	47c0      	blx	r8
 800996e:	3001      	adds	r0, #1
 8009970:	d0e6      	beq.n	8009940 <_printf_common+0xa4>
 8009972:	3601      	adds	r6, #1
 8009974:	e7d9      	b.n	800992a <_printf_common+0x8e>
	...

08009978 <_printf_i>:
 8009978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800997c:	460c      	mov	r4, r1
 800997e:	4691      	mov	r9, r2
 8009980:	7e27      	ldrb	r7, [r4, #24]
 8009982:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009984:	2f78      	cmp	r7, #120	; 0x78
 8009986:	4680      	mov	r8, r0
 8009988:	469a      	mov	sl, r3
 800998a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800998e:	d807      	bhi.n	80099a0 <_printf_i+0x28>
 8009990:	2f62      	cmp	r7, #98	; 0x62
 8009992:	d80a      	bhi.n	80099aa <_printf_i+0x32>
 8009994:	2f00      	cmp	r7, #0
 8009996:	f000 80d8 	beq.w	8009b4a <_printf_i+0x1d2>
 800999a:	2f58      	cmp	r7, #88	; 0x58
 800999c:	f000 80a3 	beq.w	8009ae6 <_printf_i+0x16e>
 80099a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099a8:	e03a      	b.n	8009a20 <_printf_i+0xa8>
 80099aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ae:	2b15      	cmp	r3, #21
 80099b0:	d8f6      	bhi.n	80099a0 <_printf_i+0x28>
 80099b2:	a001      	add	r0, pc, #4	; (adr r0, 80099b8 <_printf_i+0x40>)
 80099b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80099b8:	08009a11 	.word	0x08009a11
 80099bc:	08009a25 	.word	0x08009a25
 80099c0:	080099a1 	.word	0x080099a1
 80099c4:	080099a1 	.word	0x080099a1
 80099c8:	080099a1 	.word	0x080099a1
 80099cc:	080099a1 	.word	0x080099a1
 80099d0:	08009a25 	.word	0x08009a25
 80099d4:	080099a1 	.word	0x080099a1
 80099d8:	080099a1 	.word	0x080099a1
 80099dc:	080099a1 	.word	0x080099a1
 80099e0:	080099a1 	.word	0x080099a1
 80099e4:	08009b31 	.word	0x08009b31
 80099e8:	08009a55 	.word	0x08009a55
 80099ec:	08009b13 	.word	0x08009b13
 80099f0:	080099a1 	.word	0x080099a1
 80099f4:	080099a1 	.word	0x080099a1
 80099f8:	08009b53 	.word	0x08009b53
 80099fc:	080099a1 	.word	0x080099a1
 8009a00:	08009a55 	.word	0x08009a55
 8009a04:	080099a1 	.word	0x080099a1
 8009a08:	080099a1 	.word	0x080099a1
 8009a0c:	08009b1b 	.word	0x08009b1b
 8009a10:	680b      	ldr	r3, [r1, #0]
 8009a12:	1d1a      	adds	r2, r3, #4
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	600a      	str	r2, [r1, #0]
 8009a18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a20:	2301      	movs	r3, #1
 8009a22:	e0a3      	b.n	8009b6c <_printf_i+0x1f4>
 8009a24:	6825      	ldr	r5, [r4, #0]
 8009a26:	6808      	ldr	r0, [r1, #0]
 8009a28:	062e      	lsls	r6, r5, #24
 8009a2a:	f100 0304 	add.w	r3, r0, #4
 8009a2e:	d50a      	bpl.n	8009a46 <_printf_i+0xce>
 8009a30:	6805      	ldr	r5, [r0, #0]
 8009a32:	600b      	str	r3, [r1, #0]
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	da03      	bge.n	8009a40 <_printf_i+0xc8>
 8009a38:	232d      	movs	r3, #45	; 0x2d
 8009a3a:	426d      	negs	r5, r5
 8009a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a40:	485e      	ldr	r0, [pc, #376]	; (8009bbc <_printf_i+0x244>)
 8009a42:	230a      	movs	r3, #10
 8009a44:	e019      	b.n	8009a7a <_printf_i+0x102>
 8009a46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a4a:	6805      	ldr	r5, [r0, #0]
 8009a4c:	600b      	str	r3, [r1, #0]
 8009a4e:	bf18      	it	ne
 8009a50:	b22d      	sxthne	r5, r5
 8009a52:	e7ef      	b.n	8009a34 <_printf_i+0xbc>
 8009a54:	680b      	ldr	r3, [r1, #0]
 8009a56:	6825      	ldr	r5, [r4, #0]
 8009a58:	1d18      	adds	r0, r3, #4
 8009a5a:	6008      	str	r0, [r1, #0]
 8009a5c:	0628      	lsls	r0, r5, #24
 8009a5e:	d501      	bpl.n	8009a64 <_printf_i+0xec>
 8009a60:	681d      	ldr	r5, [r3, #0]
 8009a62:	e002      	b.n	8009a6a <_printf_i+0xf2>
 8009a64:	0669      	lsls	r1, r5, #25
 8009a66:	d5fb      	bpl.n	8009a60 <_printf_i+0xe8>
 8009a68:	881d      	ldrh	r5, [r3, #0]
 8009a6a:	4854      	ldr	r0, [pc, #336]	; (8009bbc <_printf_i+0x244>)
 8009a6c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a6e:	bf0c      	ite	eq
 8009a70:	2308      	moveq	r3, #8
 8009a72:	230a      	movne	r3, #10
 8009a74:	2100      	movs	r1, #0
 8009a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a7a:	6866      	ldr	r6, [r4, #4]
 8009a7c:	60a6      	str	r6, [r4, #8]
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	bfa2      	ittt	ge
 8009a82:	6821      	ldrge	r1, [r4, #0]
 8009a84:	f021 0104 	bicge.w	r1, r1, #4
 8009a88:	6021      	strge	r1, [r4, #0]
 8009a8a:	b90d      	cbnz	r5, 8009a90 <_printf_i+0x118>
 8009a8c:	2e00      	cmp	r6, #0
 8009a8e:	d04d      	beq.n	8009b2c <_printf_i+0x1b4>
 8009a90:	4616      	mov	r6, r2
 8009a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a96:	fb03 5711 	mls	r7, r3, r1, r5
 8009a9a:	5dc7      	ldrb	r7, [r0, r7]
 8009a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aa0:	462f      	mov	r7, r5
 8009aa2:	42bb      	cmp	r3, r7
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	d9f4      	bls.n	8009a92 <_printf_i+0x11a>
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d10b      	bne.n	8009ac4 <_printf_i+0x14c>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	07df      	lsls	r7, r3, #31
 8009ab0:	d508      	bpl.n	8009ac4 <_printf_i+0x14c>
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	6861      	ldr	r1, [r4, #4]
 8009ab6:	4299      	cmp	r1, r3
 8009ab8:	bfde      	ittt	le
 8009aba:	2330      	movle	r3, #48	; 0x30
 8009abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ac4:	1b92      	subs	r2, r2, r6
 8009ac6:	6122      	str	r2, [r4, #16]
 8009ac8:	f8cd a000 	str.w	sl, [sp]
 8009acc:	464b      	mov	r3, r9
 8009ace:	aa03      	add	r2, sp, #12
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7ff fee2 	bl	800989c <_printf_common>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d14c      	bne.n	8009b76 <_printf_i+0x1fe>
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	b004      	add	sp, #16
 8009ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae6:	4835      	ldr	r0, [pc, #212]	; (8009bbc <_printf_i+0x244>)
 8009ae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	680e      	ldr	r6, [r1, #0]
 8009af0:	061f      	lsls	r7, r3, #24
 8009af2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009af6:	600e      	str	r6, [r1, #0]
 8009af8:	d514      	bpl.n	8009b24 <_printf_i+0x1ac>
 8009afa:	07d9      	lsls	r1, r3, #31
 8009afc:	bf44      	itt	mi
 8009afe:	f043 0320 	orrmi.w	r3, r3, #32
 8009b02:	6023      	strmi	r3, [r4, #0]
 8009b04:	b91d      	cbnz	r5, 8009b0e <_printf_i+0x196>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	f023 0320 	bic.w	r3, r3, #32
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	2310      	movs	r3, #16
 8009b10:	e7b0      	b.n	8009a74 <_printf_i+0xfc>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	f043 0320 	orr.w	r3, r3, #32
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	2378      	movs	r3, #120	; 0x78
 8009b1c:	4828      	ldr	r0, [pc, #160]	; (8009bc0 <_printf_i+0x248>)
 8009b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b22:	e7e3      	b.n	8009aec <_printf_i+0x174>
 8009b24:	065e      	lsls	r6, r3, #25
 8009b26:	bf48      	it	mi
 8009b28:	b2ad      	uxthmi	r5, r5
 8009b2a:	e7e6      	b.n	8009afa <_printf_i+0x182>
 8009b2c:	4616      	mov	r6, r2
 8009b2e:	e7bb      	b.n	8009aa8 <_printf_i+0x130>
 8009b30:	680b      	ldr	r3, [r1, #0]
 8009b32:	6826      	ldr	r6, [r4, #0]
 8009b34:	6960      	ldr	r0, [r4, #20]
 8009b36:	1d1d      	adds	r5, r3, #4
 8009b38:	600d      	str	r5, [r1, #0]
 8009b3a:	0635      	lsls	r5, r6, #24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	d501      	bpl.n	8009b44 <_printf_i+0x1cc>
 8009b40:	6018      	str	r0, [r3, #0]
 8009b42:	e002      	b.n	8009b4a <_printf_i+0x1d2>
 8009b44:	0671      	lsls	r1, r6, #25
 8009b46:	d5fb      	bpl.n	8009b40 <_printf_i+0x1c8>
 8009b48:	8018      	strh	r0, [r3, #0]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	4616      	mov	r6, r2
 8009b50:	e7ba      	b.n	8009ac8 <_printf_i+0x150>
 8009b52:	680b      	ldr	r3, [r1, #0]
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	600a      	str	r2, [r1, #0]
 8009b58:	681e      	ldr	r6, [r3, #0]
 8009b5a:	6862      	ldr	r2, [r4, #4]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7f6 fb3e 	bl	80001e0 <memchr>
 8009b64:	b108      	cbz	r0, 8009b6a <_printf_i+0x1f2>
 8009b66:	1b80      	subs	r0, r0, r6
 8009b68:	6060      	str	r0, [r4, #4]
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b74:	e7a8      	b.n	8009ac8 <_printf_i+0x150>
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	4632      	mov	r2, r6
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	47d0      	blx	sl
 8009b80:	3001      	adds	r0, #1
 8009b82:	d0ab      	beq.n	8009adc <_printf_i+0x164>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	079b      	lsls	r3, r3, #30
 8009b88:	d413      	bmi.n	8009bb2 <_printf_i+0x23a>
 8009b8a:	68e0      	ldr	r0, [r4, #12]
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	4298      	cmp	r0, r3
 8009b90:	bfb8      	it	lt
 8009b92:	4618      	movlt	r0, r3
 8009b94:	e7a4      	b.n	8009ae0 <_printf_i+0x168>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4632      	mov	r2, r6
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	47d0      	blx	sl
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d09b      	beq.n	8009adc <_printf_i+0x164>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	9903      	ldr	r1, [sp, #12]
 8009baa:	1a5b      	subs	r3, r3, r1
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	dcf2      	bgt.n	8009b96 <_printf_i+0x21e>
 8009bb0:	e7eb      	b.n	8009b8a <_printf_i+0x212>
 8009bb2:	2500      	movs	r5, #0
 8009bb4:	f104 0619 	add.w	r6, r4, #25
 8009bb8:	e7f5      	b.n	8009ba6 <_printf_i+0x22e>
 8009bba:	bf00      	nop
 8009bbc:	0800a721 	.word	0x0800a721
 8009bc0:	0800a732 	.word	0x0800a732

08009bc4 <memmove>:
 8009bc4:	4288      	cmp	r0, r1
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	eb01 0402 	add.w	r4, r1, r2
 8009bcc:	d902      	bls.n	8009bd4 <memmove+0x10>
 8009bce:	4284      	cmp	r4, r0
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	d807      	bhi.n	8009be4 <memmove+0x20>
 8009bd4:	1e43      	subs	r3, r0, #1
 8009bd6:	42a1      	cmp	r1, r4
 8009bd8:	d008      	beq.n	8009bec <memmove+0x28>
 8009bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009be2:	e7f8      	b.n	8009bd6 <memmove+0x12>
 8009be4:	4402      	add	r2, r0
 8009be6:	4601      	mov	r1, r0
 8009be8:	428a      	cmp	r2, r1
 8009bea:	d100      	bne.n	8009bee <memmove+0x2a>
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bf6:	e7f7      	b.n	8009be8 <memmove+0x24>

08009bf8 <_free_r>:
 8009bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	d048      	beq.n	8009c90 <_free_r+0x98>
 8009bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c02:	9001      	str	r0, [sp, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f1a1 0404 	sub.w	r4, r1, #4
 8009c0a:	bfb8      	it	lt
 8009c0c:	18e4      	addlt	r4, r4, r3
 8009c0e:	f000 f8d3 	bl	8009db8 <__malloc_lock>
 8009c12:	4a20      	ldr	r2, [pc, #128]	; (8009c94 <_free_r+0x9c>)
 8009c14:	9801      	ldr	r0, [sp, #4]
 8009c16:	6813      	ldr	r3, [r2, #0]
 8009c18:	4615      	mov	r5, r2
 8009c1a:	b933      	cbnz	r3, 8009c2a <_free_r+0x32>
 8009c1c:	6063      	str	r3, [r4, #4]
 8009c1e:	6014      	str	r4, [r2, #0]
 8009c20:	b003      	add	sp, #12
 8009c22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c26:	f000 b8cd 	b.w	8009dc4 <__malloc_unlock>
 8009c2a:	42a3      	cmp	r3, r4
 8009c2c:	d90b      	bls.n	8009c46 <_free_r+0x4e>
 8009c2e:	6821      	ldr	r1, [r4, #0]
 8009c30:	1862      	adds	r2, r4, r1
 8009c32:	4293      	cmp	r3, r2
 8009c34:	bf04      	itt	eq
 8009c36:	681a      	ldreq	r2, [r3, #0]
 8009c38:	685b      	ldreq	r3, [r3, #4]
 8009c3a:	6063      	str	r3, [r4, #4]
 8009c3c:	bf04      	itt	eq
 8009c3e:	1852      	addeq	r2, r2, r1
 8009c40:	6022      	streq	r2, [r4, #0]
 8009c42:	602c      	str	r4, [r5, #0]
 8009c44:	e7ec      	b.n	8009c20 <_free_r+0x28>
 8009c46:	461a      	mov	r2, r3
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	b10b      	cbz	r3, 8009c50 <_free_r+0x58>
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	d9fa      	bls.n	8009c46 <_free_r+0x4e>
 8009c50:	6811      	ldr	r1, [r2, #0]
 8009c52:	1855      	adds	r5, r2, r1
 8009c54:	42a5      	cmp	r5, r4
 8009c56:	d10b      	bne.n	8009c70 <_free_r+0x78>
 8009c58:	6824      	ldr	r4, [r4, #0]
 8009c5a:	4421      	add	r1, r4
 8009c5c:	1854      	adds	r4, r2, r1
 8009c5e:	42a3      	cmp	r3, r4
 8009c60:	6011      	str	r1, [r2, #0]
 8009c62:	d1dd      	bne.n	8009c20 <_free_r+0x28>
 8009c64:	681c      	ldr	r4, [r3, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	6053      	str	r3, [r2, #4]
 8009c6a:	4421      	add	r1, r4
 8009c6c:	6011      	str	r1, [r2, #0]
 8009c6e:	e7d7      	b.n	8009c20 <_free_r+0x28>
 8009c70:	d902      	bls.n	8009c78 <_free_r+0x80>
 8009c72:	230c      	movs	r3, #12
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	e7d3      	b.n	8009c20 <_free_r+0x28>
 8009c78:	6825      	ldr	r5, [r4, #0]
 8009c7a:	1961      	adds	r1, r4, r5
 8009c7c:	428b      	cmp	r3, r1
 8009c7e:	bf04      	itt	eq
 8009c80:	6819      	ldreq	r1, [r3, #0]
 8009c82:	685b      	ldreq	r3, [r3, #4]
 8009c84:	6063      	str	r3, [r4, #4]
 8009c86:	bf04      	itt	eq
 8009c88:	1949      	addeq	r1, r1, r5
 8009c8a:	6021      	streq	r1, [r4, #0]
 8009c8c:	6054      	str	r4, [r2, #4]
 8009c8e:	e7c7      	b.n	8009c20 <_free_r+0x28>
 8009c90:	b003      	add	sp, #12
 8009c92:	bd30      	pop	{r4, r5, pc}
 8009c94:	200002d8 	.word	0x200002d8

08009c98 <_malloc_r>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	1ccd      	adds	r5, r1, #3
 8009c9c:	f025 0503 	bic.w	r5, r5, #3
 8009ca0:	3508      	adds	r5, #8
 8009ca2:	2d0c      	cmp	r5, #12
 8009ca4:	bf38      	it	cc
 8009ca6:	250c      	movcc	r5, #12
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	4606      	mov	r6, r0
 8009cac:	db01      	blt.n	8009cb2 <_malloc_r+0x1a>
 8009cae:	42a9      	cmp	r1, r5
 8009cb0:	d903      	bls.n	8009cba <_malloc_r+0x22>
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	6033      	str	r3, [r6, #0]
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cba:	f000 f87d 	bl	8009db8 <__malloc_lock>
 8009cbe:	4921      	ldr	r1, [pc, #132]	; (8009d44 <_malloc_r+0xac>)
 8009cc0:	680a      	ldr	r2, [r1, #0]
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	b99c      	cbnz	r4, 8009cee <_malloc_r+0x56>
 8009cc6:	4f20      	ldr	r7, [pc, #128]	; (8009d48 <_malloc_r+0xb0>)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	b923      	cbnz	r3, 8009cd6 <_malloc_r+0x3e>
 8009ccc:	4621      	mov	r1, r4
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f000 f862 	bl	8009d98 <_sbrk_r>
 8009cd4:	6038      	str	r0, [r7, #0]
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 f85d 	bl	8009d98 <_sbrk_r>
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	d123      	bne.n	8009d2a <_malloc_r+0x92>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	6033      	str	r3, [r6, #0]
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f000 f86c 	bl	8009dc4 <__malloc_unlock>
 8009cec:	e7e3      	b.n	8009cb6 <_malloc_r+0x1e>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	1b5b      	subs	r3, r3, r5
 8009cf2:	d417      	bmi.n	8009d24 <_malloc_r+0x8c>
 8009cf4:	2b0b      	cmp	r3, #11
 8009cf6:	d903      	bls.n	8009d00 <_malloc_r+0x68>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	441c      	add	r4, r3
 8009cfc:	6025      	str	r5, [r4, #0]
 8009cfe:	e004      	b.n	8009d0a <_malloc_r+0x72>
 8009d00:	6863      	ldr	r3, [r4, #4]
 8009d02:	42a2      	cmp	r2, r4
 8009d04:	bf0c      	ite	eq
 8009d06:	600b      	streq	r3, [r1, #0]
 8009d08:	6053      	strne	r3, [r2, #4]
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f000 f85a 	bl	8009dc4 <__malloc_unlock>
 8009d10:	f104 000b 	add.w	r0, r4, #11
 8009d14:	1d23      	adds	r3, r4, #4
 8009d16:	f020 0007 	bic.w	r0, r0, #7
 8009d1a:	1ac2      	subs	r2, r0, r3
 8009d1c:	d0cc      	beq.n	8009cb8 <_malloc_r+0x20>
 8009d1e:	1a1b      	subs	r3, r3, r0
 8009d20:	50a3      	str	r3, [r4, r2]
 8009d22:	e7c9      	b.n	8009cb8 <_malloc_r+0x20>
 8009d24:	4622      	mov	r2, r4
 8009d26:	6864      	ldr	r4, [r4, #4]
 8009d28:	e7cc      	b.n	8009cc4 <_malloc_r+0x2c>
 8009d2a:	1cc4      	adds	r4, r0, #3
 8009d2c:	f024 0403 	bic.w	r4, r4, #3
 8009d30:	42a0      	cmp	r0, r4
 8009d32:	d0e3      	beq.n	8009cfc <_malloc_r+0x64>
 8009d34:	1a21      	subs	r1, r4, r0
 8009d36:	4630      	mov	r0, r6
 8009d38:	f000 f82e 	bl	8009d98 <_sbrk_r>
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d1dd      	bne.n	8009cfc <_malloc_r+0x64>
 8009d40:	e7cf      	b.n	8009ce2 <_malloc_r+0x4a>
 8009d42:	bf00      	nop
 8009d44:	200002d8 	.word	0x200002d8
 8009d48:	200002dc 	.word	0x200002dc

08009d4c <_realloc_r>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	4607      	mov	r7, r0
 8009d50:	4614      	mov	r4, r2
 8009d52:	460e      	mov	r6, r1
 8009d54:	b921      	cbnz	r1, 8009d60 <_realloc_r+0x14>
 8009d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	f7ff bf9c 	b.w	8009c98 <_malloc_r>
 8009d60:	b922      	cbnz	r2, 8009d6c <_realloc_r+0x20>
 8009d62:	f7ff ff49 	bl	8009bf8 <_free_r>
 8009d66:	4625      	mov	r5, r4
 8009d68:	4628      	mov	r0, r5
 8009d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d6c:	f000 f830 	bl	8009dd0 <_malloc_usable_size_r>
 8009d70:	42a0      	cmp	r0, r4
 8009d72:	d20f      	bcs.n	8009d94 <_realloc_r+0x48>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4638      	mov	r0, r7
 8009d78:	f7ff ff8e 	bl	8009c98 <_malloc_r>
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d0f2      	beq.n	8009d68 <_realloc_r+0x1c>
 8009d82:	4631      	mov	r1, r6
 8009d84:	4622      	mov	r2, r4
 8009d86:	f7ff fbf7 	bl	8009578 <memcpy>
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f7ff ff33 	bl	8009bf8 <_free_r>
 8009d92:	e7e9      	b.n	8009d68 <_realloc_r+0x1c>
 8009d94:	4635      	mov	r5, r6
 8009d96:	e7e7      	b.n	8009d68 <_realloc_r+0x1c>

08009d98 <_sbrk_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4d06      	ldr	r5, [pc, #24]	; (8009db4 <_sbrk_r+0x1c>)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7f7 ff04 	bl	8001bb0 <_sbrk>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_sbrk_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_sbrk_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	200048e0 	.word	0x200048e0

08009db8 <__malloc_lock>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__malloc_lock+0x8>)
 8009dba:	f000 b811 	b.w	8009de0 <__retarget_lock_acquire_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	200048e8 	.word	0x200048e8

08009dc4 <__malloc_unlock>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__malloc_unlock+0x8>)
 8009dc6:	f000 b80c 	b.w	8009de2 <__retarget_lock_release_recursive>
 8009dca:	bf00      	nop
 8009dcc:	200048e8 	.word	0x200048e8

08009dd0 <_malloc_usable_size_r>:
 8009dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd4:	1f18      	subs	r0, r3, #4
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bfbc      	itt	lt
 8009dda:	580b      	ldrlt	r3, [r1, r0]
 8009ddc:	18c0      	addlt	r0, r0, r3
 8009dde:	4770      	bx	lr

08009de0 <__retarget_lock_acquire_recursive>:
 8009de0:	4770      	bx	lr

08009de2 <__retarget_lock_release_recursive>:
 8009de2:	4770      	bx	lr

08009de4 <_init>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	bf00      	nop
 8009de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dea:	bc08      	pop	{r3}
 8009dec:	469e      	mov	lr, r3
 8009dee:	4770      	bx	lr

08009df0 <_fini>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	bf00      	nop
 8009df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df6:	bc08      	pop	{r3}
 8009df8:	469e      	mov	lr, r3
 8009dfa:	4770      	bx	lr
