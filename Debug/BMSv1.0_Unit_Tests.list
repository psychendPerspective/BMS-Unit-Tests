
BMSv1.0_Unit_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011520  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017fc  080116b0  080116b0  000216b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012eac  08012eac  000301f8  2**0
                  CONTENTS
  4 .ARM          00000000  08012eac  08012eac  000301f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012eac  08012eac  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012eac  08012eac  00022eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012eb0  08012eb0  00022eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08012eb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00004c90  200001f8  200001f8  000301f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e88  20004e88  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f631  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000413a  00000000  00000000  0004f859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  00053998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001340  00000000  00000000  00054e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220e4  00000000  00000000  000561a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d972  00000000  00000000  0007828c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd3eb  00000000  00000000  00095bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152fe9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006908  00000000  00000000  0015303c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011698 	.word	0x08011698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08011698 	.word	0x08011698

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <driverHWSPI1Init>:

#include "driverHWSPI1.h"

SPI_HandleTypeDef driverHWSPI1Handle;

void driverHWSPI1Init(GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  driverHWSPI1Handle.Instance = SPI1;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <driverHWSPI1Init+0x8c>)
 8000c98:	601a      	str	r2, [r3, #0]
  driverHWSPI1Handle.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  driverHWSPI1Handle.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  driverHWSPI1Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000caa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cae:	60da      	str	r2, [r3, #12]
  driverHWSPI1Handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	611a      	str	r2, [r3, #16]
  driverHWSPI1Handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	615a      	str	r2, [r3, #20]
  driverHWSPI1Handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cc2:	619a      	str	r2, [r3, #24]
  driverHWSPI1Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cc6:	2238      	movs	r2, #56	; 0x38
 8000cc8:	61da      	str	r2, [r3, #28]
  driverHWSPI1Handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  driverHWSPI1Handle.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  driverHWSPI1Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  driverHWSPI1Handle.Init.CRCPolynomial = 7;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  driverHWSPI1Handle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  driverHWSPI1Handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&driverHWSPI1Handle) != HAL_OK)
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cf0:	f006 ffcc 	bl	8007c8c <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d000      	beq.n	8000cfc <driverHWSPI1Init+0x74>
  {
    while(true);
 8000cfa:	e7fe      	b.n	8000cfa <driverHWSPI1Init+0x72>
  }

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f005 f916 	bl	8005f34 <HAL_GPIO_WritePin>
};
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000468 	.word	0x20000468
 8000d14:	40013000 	.word	0x40013000

08000d18 <driverHWSPI1Write>:

bool driverHWSPI1Write(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	461a      	mov	r2, r3
 8000d24:	460b      	mov	r3, r1
 8000d26:	72fb      	strb	r3, [r7, #11]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	813b      	strh	r3, [r7, #8]
	uint8_t *readBuffer;																																					// Make fake buffer holder
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state
	readBuffer = malloc(noOfBytesToWrite);																												// Make fake buffer for
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00d fe10 	bl	800e954 <malloc>
 8000d34:	4603      	mov	r3, r0
 8000d36:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);																      // Make CS low
 8000d38:	893b      	ldrh	r3, [r7, #8]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f005 f8f8 	bl	8005f34 <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeBuffer,readBuffer,noOfBytesToWrite,driverHWSPI1DefaultTimeout);	// Write desired data to slave and store the received data in readBuffer
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2264      	movs	r2, #100	; 0x64
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	480f      	ldr	r0, [pc, #60]	; (8000d90 <driverHWSPI1Write+0x78>)
 8000d52:	f007 f9b4 	bl	80080be <HAL_SPI_TransmitReceive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	74fb      	strb	r3, [r7, #19]
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  																		// Wait until transmission is complete
 8000d5a:	bf00      	nop
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <driverHWSPI1Write+0x78>)
 8000d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d0f9      	beq.n	8000d5c <driverHWSPI1Write+0x44>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);																	      // Make CS High
 8000d68:	893b      	ldrh	r3, [r7, #8]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f005 f8e0 	bl	8005f34 <HAL_GPIO_WritePin>

	free(readBuffer);																																							// Dump de fake buffer
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f00d fdf5 	bl	800e964 <free>

	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
 8000d7a:	7cfb      	ldrb	r3, [r7, #19]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
};
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000468 	.word	0x20000468

08000d94 <driverHWSPI1WriteRead>:

bool driverHWSPI1WriteRead(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, uint8_t *readBuffer, uint8_t noOfBytesToRead, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	460b      	mov	r3, r1
 8000da2:	72fb      	strb	r3, [r7, #11]
 8000da4:	4613      	mov	r3, r2
 8000da6:	72bb      	strb	r3, [r7, #10]
	uint8_t *writeArray, *readArray;
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state

	writeArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 8000da8:	7afa      	ldrb	r2, [r7, #11]
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	4413      	add	r3, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00d fdd0 	bl	800e954 <malloc>
 8000db4:	4603      	mov	r3, r0
 8000db6:	61fb      	str	r3, [r7, #28]
	readArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 8000db8:	7afa      	ldrb	r2, [r7, #11]
 8000dba:	7abb      	ldrb	r3, [r7, #10]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f00d fdc8 	bl	800e954 <malloc>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	61bb      	str	r3, [r7, #24]

	memset(writeArray,0xFF,noOfBytesToWrite+noOfBytesToRead);
 8000dc8:	7afa      	ldrb	r2, [r7, #11]
 8000dca:	7abb      	ldrb	r3, [r7, #10]
 8000dcc:	4413      	add	r3, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	21ff      	movs	r1, #255	; 0xff
 8000dd2:	69f8      	ldr	r0, [r7, #28]
 8000dd4:	f00d fddc 	bl	800e990 <memset>
	memcpy(writeArray,writeBuffer,noOfBytesToWrite);
 8000dd8:	7afb      	ldrb	r3, [r7, #11]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68f9      	ldr	r1, [r7, #12]
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f00d fdc8 	bl	800e974 <memcpy>

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);
 8000de4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dec:	f005 f8a2 	bl	8005f34 <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeArray,readArray,noOfBytesToWrite+noOfBytesToRead,driverHWSPI1DefaultTimeout);
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	7abb      	ldrb	r3, [r7, #10]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2264      	movs	r2, #100	; 0x64
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	69f9      	ldr	r1, [r7, #28]
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <driverHWSPI1WriteRead+0xc4>)
 8000e06:	f007 f95a 	bl	80080be <HAL_SPI_TransmitReceive>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	75fb      	strb	r3, [r7, #23]
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 8000e0e:	bf00      	nop
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <driverHWSPI1WriteRead+0xc4>)
 8000e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d0f9      	beq.n	8000e10 <driverHWSPI1WriteRead+0x7c>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 8000e1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4619      	mov	r1, r3
 8000e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e24:	f005 f886 	bl	8005f34 <HAL_GPIO_WritePin>

	memcpy(readBuffer,readArray+noOfBytesToWrite,noOfBytesToRead);
 8000e28:	7afb      	ldrb	r3, [r7, #11]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	7aba      	ldrb	r2, [r7, #10]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f00d fd9e 	bl	800e974 <memcpy>

	free(writeArray);
 8000e38:	69f8      	ldr	r0, [r7, #28]
 8000e3a:	f00d fd93 	bl	800e964 <free>
	free(readArray);
 8000e3e:	69b8      	ldr	r0, [r7, #24]
 8000e40:	f00d fd90 	bl	800e964 <free>

	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
};
 8000e50:	4618      	mov	r0, r3
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000468 	.word	0x20000468

08000e5c <driverSWLTC6804DelayMS>:
uint8_t driverSWLTC6804MaxNoOfCellPerModule = 0;
uint8_t driverSWLTC6804MaxNoOfTempSensorPerModule = 0;

driverLTC6804ConfigStructTypedef driverSWLTC6804ConfigStruct;

void driverSWLTC6804DelayMS(uint32_t delayMS) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = HAL_GetTick();
 8000e64:	f003 fed0 	bl	8004c08 <HAL_GetTick>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60fb      	str	r3, [r7, #12]
	while(!modDelayTick1ms(&currentTick,delayMS)){};
 8000e6c:	bf00      	nop
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fb7c 	bl	8004572 <modDelayTick1ms>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f6      	beq.n	8000e6e <driverSWLTC6804DelayMS+0x12>
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <driverSWLTC6804Init>:

void driverSWLTC6804Init(driverLTC6804ConfigStructTypedef configStruct, uint8_t totalNumberOfLTCs, uint8_t noOfCellPerModule, uint8_t noOfTempSensorPerModule, uint8_t cellMonitorType) {
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e9c:	466b      	mov	r3, sp
 8000e9e:	461e      	mov	r6, r3
	driverSWLTC6804ConfigStruct = configStruct;
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <driverSWLTC6804Init+0x110>)
 8000ea2:	461d      	mov	r5, r3
 8000ea4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eb0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	driverSWLTC6804TotalNumberOfICs = totalNumberOfLTCs;
 8000eb4:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000eb6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000eba:	7013      	strb	r3, [r2, #0]
	driverSWLTC6804MaxNoOfCellPerModule = noOfCellPerModule;
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <driverSWLTC6804Init+0x118>)
 8000ebe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000ec2:	7013      	strb	r3, [r2, #0]
	driverSWLTC6804MaxNoOfTempSensorPerModule = noOfTempSensorPerModule;
 8000ec4:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <driverSWLTC6804Init+0x11c>)
 8000ec6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000eca:	7013      	strb	r3, [r2, #0]

	uint8_t rxConfig [driverSWLTC6804TotalNumberOfICs][8];
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000ece:	781c      	ldrb	r4, [r3, #0]
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	b2e0      	uxtb	r0, r4
 8000ed8:	f04f 0100 	mov.w	r1, #0
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	018b      	lsls	r3, r1, #6
 8000ee6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000eea:	0182      	lsls	r2, r0, #6
 8000eec:	b2e0      	uxtb	r0, r4
 8000eee:	f04f 0100 	mov.w	r1, #0
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	018b      	lsls	r3, r1, #6
 8000efc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000f00:	0182      	lsls	r2, r0, #6
 8000f02:	4623      	mov	r3, r4
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	3307      	adds	r3, #7
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f10:	466b      	mov	r3, sp
 8000f12:	3300      	adds	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
	uint8_t LTCScanCount = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73bb      	strb	r3, [r7, #14]
	int8_t returnPEC = -1;
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	73fb      	strb	r3, [r7, #15]

	driverHWSPI1Init(GPIOA,GPIO_PIN_4);
 8000f1e:	2110      	movs	r1, #16
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f7ff feb0 	bl	8000c88 <driverHWSPI1Init>
	driverSWLTC6804WakeIC();
 8000f28:	f001 f9a5 	bl	8002276 <driverSWLTC6804WakeIC>

	while((LTCScanCount < 5) && (returnPEC == -1)){
 8000f2c:	e025      	b.n	8000f7a <driverSWLTC6804Init+0xee>
	  returnPEC =	driverSWLTC6804ReadConfigRegister(driverSWLTC6804TotalNumberOfICs,rxConfig);
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f902 	bl	8002140 <driverSWLTC6804ReadConfigRegister>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
		driverSWLTC6804WakeIC();
 8000f40:	f001 f999 	bl	8002276 <driverSWLTC6804WakeIC>
		driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,0,false);
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fdd3 	bl	8001af8 <driverSWLTC6804WriteConfigRegister>
		if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8000f52:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d003      	beq.n	8000f62 <driverSWLTC6804Init+0xd6>
 8000f5a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d106      	bne.n	8000f70 <driverSWLTC6804Init+0xe4>
			driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,0,false);
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 ff66 	bl	8001e3c <driverSWLTC6804WriteConfigRegisterB>
	}
		driverSWLTC6804WakeIC();
 8000f70:	f001 f981 	bl	8002276 <driverSWLTC6804WakeIC>
		LTCScanCount++;
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73bb      	strb	r3, [r7, #14]
	while((LTCScanCount < 5) && (returnPEC == -1)){
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d804      	bhi.n	8000f8a <driverSWLTC6804Init+0xfe>
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d0d1      	beq.n	8000f2e <driverSWLTC6804Init+0xa2>
 8000f8a:	46b5      	mov	sp, r6
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000f96:	b004      	add	sp, #16
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200004cc 	.word	0x200004cc
 8000fa0:	20000214 	.word	0x20000214
 8000fa4:	20000215 	.word	0x20000215
 8000fa8:	20000216 	.word	0x20000216

08000fac <driverSWLTC6804ResetCellVoltageRegisters>:

void driverSWLTC6804ResetCellVoltageRegisters(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = 0x07;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	703b      	strb	r3, [r7, #0]
  cmd[1] = 0x11;
 8000fb6:	2311      	movs	r3, #17
 8000fb8:	707b      	strb	r3, [r7, #1]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f001 f88a 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	80fb      	strh	r3, [r7, #6]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec );
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	70fb      	strb	r3, [r7, #3]

	driverSWLTC6804WakeIC();
 8000fd8:	f001 f94d 	bl	8002276 <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2104      	movs	r1, #4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f91e 	bl	8002222 <driverSWLTC6804Write>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <driverSWLTC6804ResetAuxRegisters>:

void driverSWLTC6804ResetAuxRegisters(void) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = 0x07;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	703b      	strb	r3, [r7, #0]
  cmd[1] = 0x12;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	707b      	strb	r3, [r7, #1]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	2002      	movs	r0, #2
 8001002:	f001 f869 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec );
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	70fb      	strb	r3, [r7, #3]

	driverSWLTC6804WakeIC();
 800101a:	f001 f92c 	bl	8002276 <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 800101e:	463b      	mov	r3, r7
 8001020:	2104      	movs	r1, #4
 8001022:	4618      	mov	r0, r3
 8001024:	f001 f8fd 	bl	8002222 <driverSWLTC6804Write>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <driverSWLTC6804StartCellAndAuxVoltageConversion>:

  driverSWLTC6804WakeIC();
  driverSWLTC6804Write(cmd,4);
}

void driverSWLTC6804StartCellAndAuxVoltageConversion(uint8_t MD,uint8_t DCP) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint16_t cmd_pec;
	uint8_t ADCVAX[2]; //!< Cell Voltage conversion command.

  ADCVAX[0] = ((MD & 0x02) >> 1) + 0x04;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	105b      	asrs	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3304      	adds	r3, #4
 800104e:	b2db      	uxtb	r3, r3
 8001050:	733b      	strb	r3, [r7, #12]
  ADCVAX[1] = ((MD & 0x01) << 7) + 0x6F + (DCP<<4);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	01db      	lsls	r3, r3, #7
 8001056:	b2da      	uxtb	r2, r3
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4413      	add	r3, r2
 8001060:	b2db      	uxtb	r3, r3
 8001062:	336f      	adds	r3, #111	; 0x6f
 8001064:	b2db      	uxtb	r3, r3
 8001066:	737b      	strb	r3, [r7, #13]

  cmd[0] = ADCVAX[0];
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	743b      	strb	r3, [r7, #16]
  cmd[1] = ADCVAX[1];
 800106c:	7b7b      	ldrb	r3, [r7, #13]
 800106e:	747b      	strb	r3, [r7, #17]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADCVAX);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	2002      	movs	r0, #2
 8001078:	f001 f82e 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 800107c:	4603      	mov	r3, r0
 800107e:	82fb      	strh	r3, [r7, #22]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001080:	8afb      	ldrh	r3, [r7, #22]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b29b      	uxth	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (uint8_t)(cmd_pec);
 800108a:	8afb      	ldrh	r3, [r7, #22]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	74fb      	strb	r3, [r7, #19]

  driverSWLTC6804WakeIC();
 8001090:	f001 f8f1 	bl	8002276 <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2104      	movs	r1, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f001 f8c1 	bl	8002222 <driverSWLTC6804Write>
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <driverSWLTC6804StartAuxVoltageConversion>:

	driverSWLTC6804WakeIC();
  driverSWLTC6804Write(cmd,4);
}

void driverSWLTC6804StartAuxVoltageConversion(uint8_t MD, uint8_t CHG) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint16_t cmd_pec;
	uint8_t ADAX[2]; //!< GPIO conversion command.

  ADAX[0] = ((MD & 0x02) >> 1) + 0x04;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	105b      	asrs	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	3304      	adds	r3, #4
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	733b      	strb	r3, [r7, #12]
  ADAX[1] = ((MD & 0x01) << 7) + 0x60 + CHG ;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	01db      	lsls	r3, r3, #7
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	4413      	add	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3360      	adds	r3, #96	; 0x60
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	737b      	strb	r3, [r7, #13]

  cmd[0] = ADAX[0];
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	743b      	strb	r3, [r7, #16]
  cmd[1] = ADAX[1];
 80010e0:	7b7b      	ldrb	r3, [r7, #13]
 80010e2:	747b      	strb	r3, [r7, #17]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADAX);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	2002      	movs	r0, #2
 80010ec:	f000 fff4 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 80010f0:	4603      	mov	r3, r0
 80010f2:	82fb      	strh	r3, [r7, #22]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (uint8_t)(cmd_pec);
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	74fb      	strb	r3, [r7, #19]

	driverSWLTC6804WakeIC();
 8001104:	f001 f8b7 	bl	8002276 <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2104      	movs	r1, #4
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f887 	bl	8002222 <driverSWLTC6804Write>
}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <driverSWLTC6804ReadCellVoltagesArray>:


bool driverSWLTC6804ReadCellVoltagesArray(float cellVoltagesArray[][driverSWLTC6804MaxNoOfCellPerModule]) {
 800111c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001120:	b089      	sub	sp, #36	; 0x24
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	4b64      	ldr	r3, [pc, #400]	; (80012b8 <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 8001128:	781e      	ldrb	r6, [r3, #0]
 800112a:	4633      	mov	r3, r6
 800112c:	3b01      	subs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	b2f0      	uxtb	r0, r6
 8001132:	f04f 0100 	mov.w	r1, #0
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	014b      	lsls	r3, r1, #5
 8001140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001144:	0142      	lsls	r2, r0, #5
 8001146:	466b      	mov	r3, sp
 8001148:	4699      	mov	r9, r3
	bool dataValid = true;
 800114a:	2301      	movs	r3, #1
 800114c:	767b      	strb	r3, [r7, #25]
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule];
 800114e:	4b5a      	ldr	r3, [pc, #360]	; (80012b8 <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 8001150:	781c      	ldrb	r4, [r3, #0]
 8001152:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 8001154:	781d      	ldrb	r5, [r3, #0]
 8001156:	4623      	mov	r3, r4
 8001158:	3b01      	subs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	b2e0      	uxtb	r0, r4
 800115e:	f04f 0100 	mov.w	r1, #0
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	010b      	lsls	r3, r1, #4
 800116c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001170:	0102      	lsls	r2, r0, #4
 8001172:	4623      	mov	r3, r4
 8001174:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001178:	462b      	mov	r3, r5
 800117a:	3b01      	subs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	b2e0      	uxtb	r0, r4
 8001180:	f04f 0100 	mov.w	r1, #0
 8001184:	b2ea      	uxtb	r2, r5
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	fb02 fe01 	mul.w	lr, r2, r1
 800118e:	fb00 fc03 	mul.w	ip, r0, r3
 8001192:	44f4      	add	ip, lr
 8001194:	fba0 2302 	umull	r2, r3, r0, r2
 8001198:	eb0c 0103 	add.w	r1, ip, r3
 800119c:	460b      	mov	r3, r1
 800119e:	f04f 0000 	mov.w	r0, #0
 80011a2:	f04f 0100 	mov.w	r1, #0
 80011a6:	0119      	lsls	r1, r3, #4
 80011a8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80011ac:	0110      	lsls	r0, r2, #4
 80011ae:	b2e0      	uxtb	r0, r4
 80011b0:	f04f 0100 	mov.w	r1, #0
 80011b4:	b2ea      	uxtb	r2, r5
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	fb02 fe01 	mul.w	lr, r2, r1
 80011be:	fb00 fc03 	mul.w	ip, r0, r3
 80011c2:	44f4      	add	ip, lr
 80011c4:	fba0 2302 	umull	r2, r3, r0, r2
 80011c8:	eb0c 0103 	add.w	r1, ip, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	f04f 0000 	mov.w	r0, #0
 80011d2:	f04f 0100 	mov.w	r1, #0
 80011d6:	0119      	lsls	r1, r3, #4
 80011d8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80011dc:	0110      	lsls	r0, r2, #4
 80011de:	4623      	mov	r3, r4
 80011e0:	462a      	mov	r2, r5
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	3307      	adds	r3, #7
 80011ea:	08db      	lsrs	r3, r3, #3
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	ebad 0d03 	sub.w	sp, sp, r3
 80011f2:	466b      	mov	r3, sp
 80011f4:	3301      	adds	r3, #1
 80011f6:	085b      	lsrs	r3, r3, #1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]

	driverSWLTC6804ReadCellVoltageRegisters(CELL_CH_ALL,driverSWLTC6804TotalNumberOfICs,cellVoltageArrayCodes);
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4619      	mov	r1, r3
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f85d 	bl	80012c4 <driverSWLTC6804ReadCellVoltageRegisters>

  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 800120a:	2300      	movs	r3, #0
 800120c:	76bb      	strb	r3, [r7, #26]
 800120e:	e047      	b.n	80012a0 <driverSWLTC6804ReadCellVoltagesArray+0x184>
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 8001210:	2300      	movs	r3, #0
 8001212:	76fb      	strb	r3, [r7, #27]
 8001214:	e03c      	b.n	8001290 <driverSWLTC6804ReadCellVoltagesArray+0x174>
			if(cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f < 10.0f)
 8001216:	ea4f 0158 	mov.w	r1, r8, lsr #1
 800121a:	7eb8      	ldrb	r0, [r7, #26]
 800121c:	7efa      	ldrb	r2, [r7, #27]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	fb00 f101 	mul.w	r1, r0, r1
 8001224:	440a      	add	r2, r1
 8001226:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80012c0 <driverSWLTC6804ReadCellVoltagesArray+0x1a4>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800123e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	d51e      	bpl.n	8001286 <driverSWLTC6804ReadCellVoltagesArray+0x16a>
			  cellVoltagesArray[modulePointer][cellPointer] = cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f;
 8001248:	ea4f 0158 	mov.w	r1, r8, lsr #1
 800124c:	7eb8      	ldrb	r0, [r7, #26]
 800124e:	7efa      	ldrb	r2, [r7, #27]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	fb00 f101 	mul.w	r1, r0, r1
 8001256:	440a      	add	r2, r1
 8001258:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001264:	7ebb      	ldrb	r3, [r7, #26]
 8001266:	4632      	mov	r2, r6
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	441a      	add	r2, r3
 8001272:	7efb      	ldrb	r3, [r7, #27]
 8001274:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012c0 <driverSWLTC6804ReadCellVoltagesArray+0x1a4>
 8001278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	edc3 7a00 	vstr	s15, [r3]
 8001284:	e001      	b.n	800128a <driverSWLTC6804ReadCellVoltagesArray+0x16e>
			else
				dataValid = false;
 8001286:	2300      	movs	r3, #0
 8001288:	767b      	strb	r3, [r7, #25]
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 800128a:	7efb      	ldrb	r3, [r7, #27]
 800128c:	3301      	adds	r3, #1
 800128e:	76fb      	strb	r3, [r7, #27]
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	7efa      	ldrb	r2, [r7, #27]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3bd      	bcc.n	8001216 <driverSWLTC6804ReadCellVoltagesArray+0xfa>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 800129a:	7ebb      	ldrb	r3, [r7, #26]
 800129c:	3301      	adds	r3, #1
 800129e:	76bb      	strb	r3, [r7, #26]
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	7eba      	ldrb	r2, [r7, #26]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3b2      	bcc.n	8001210 <driverSWLTC6804ReadCellVoltagesArray+0xf4>
		}
  }

	return dataValid;
 80012aa:	7e7b      	ldrb	r3, [r7, #25]
 80012ac:	46cd      	mov	sp, r9
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012b8:	20000215 	.word	0x20000215
 80012bc:	20000214 	.word	0x20000214
 80012c0:	38d1b717 	.word	0x38d1b717

080012c4 <driverSWLTC6804ReadCellVoltageRegisters>:

uint8_t driverSWLTC6804ReadCellVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t cell_codes[][driverSWLTC6804MaxNoOfCellPerModule]) {
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b08b      	sub	sp, #44	; 0x2c
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	603a      	str	r2, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	460b      	mov	r3, r1
 80012d2:	71bb      	strb	r3, [r7, #6]
 80012d4:	4b9d      	ldr	r3, [pc, #628]	; (800154c <driverSWLTC6804ReadCellVoltageRegisters+0x288>)
 80012d6:	781c      	ldrb	r4, [r3, #0]
 80012d8:	4623      	mov	r3, r4
 80012da:	3b01      	subs	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	b2e0      	uxtb	r0, r4
 80012e0:	f04f 0100 	mov.w	r1, #0
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	010b      	lsls	r3, r1, #4
 80012ee:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80012f2:	0102      	lsls	r2, r0, #4
  const uint8_t NUM_RX_BYT = 8;
 80012f4:	2308      	movs	r3, #8
 80012f6:	76fb      	strb	r3, [r7, #27]
  const uint8_t BYT_IN_REG = 6;
 80012f8:	2306      	movs	r3, #6
 80012fa:	76bb      	strb	r3, [r7, #26]
  const uint8_t CELL_IN_REG = 3;
 80012fc:	2303      	movs	r3, #3
 80012fe:	767b      	strb	r3, [r7, #25]

  uint8_t  *cell_data;
  int8_t  pec_error = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t parsed_cell;
  uint16_t received_pec;
  uint16_t data_pec;
  uint8_t data_counter=0; //data counter
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 800130c:	7efb      	ldrb	r3, [r7, #27]
 800130e:	79ba      	ldrb	r2, [r7, #6]
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f00d fb1d 	bl	800e954 <malloc>
 800131a:	4603      	mov	r3, r0
 800131c:	617b      	str	r3, [r7, #20]

  if (reg == 0) {
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 8092 	bne.w	800144a <driverSWLTC6804ReadCellVoltageRegisters+0x186>
    for(uint8_t cell_reg = 1; cell_reg<((driverSWLTC6804MaxNoOfCellPerModule/3)+1); cell_reg++) {        			 			                 //executes once for each of the LTC6804 cell voltage registers
 8001326:	2301      	movs	r3, #1
 8001328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800132c:	e080      	b.n	8001430 <driverSWLTC6804ReadCellVoltageRegisters+0x16c>
      data_counter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      driverSWLTC6804ReadCellVoltageGroups(cell_reg, total_ic,cell_data );								                     //Reads a single Cell voltage register
 8001334:	79b9      	ldrb	r1, [r7, #6]
 8001336:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f909 	bl	8001554 <driverSWLTC6804ReadCellVoltageGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001348:	e068      	b.n	800141c <driverSWLTC6804ReadCellVoltageRegisters+0x158>
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001350:	e02e      	b.n	80013b0 <driverSWLTC6804ReadCellVoltageRegisters+0xec>
          parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);      //Each cell code is received as two bytes and is combined to create the parsed cell voltage code
 8001352:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b29a      	uxth	r2, r3
 800135e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001362:	3301      	adds	r3, #1
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	440b      	add	r3, r1
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b29b      	uxth	r3, r3
 8001370:	4413      	add	r3, r2
 8001372:	81fb      	strh	r3, [r7, #14]
          cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001374:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001378:	4622      	mov	r2, r4
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001388:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800138c:	3a01      	subs	r2, #1
 800138e:	7e78      	ldrb	r0, [r7, #25]
 8001390:	fb00 f202 	mul.w	r2, r0, r2
 8001394:	440a      	add	r2, r1
 8001396:	89f9      	ldrh	r1, [r7, #14]
 8001398:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          data_counter = data_counter + 2;											                           //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 800139c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013a0:	3302      	adds	r3, #2
 80013a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 80013a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013aa:	3301      	adds	r3, #1
 80013ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80013b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013b4:	7e7b      	ldrb	r3, [r7, #25]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d3cb      	bcc.n	8001352 <driverSWLTC6804ReadCellVoltageRegisters+0x8e>
        }
        received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 80013ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ce:	3301      	adds	r3, #1
 80013d0:	6979      	ldr	r1, [r7, #20]
 80013d2:	440b      	add	r3, r1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	827b      	strh	r3, [r7, #18]
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80013dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013e0:	7efa      	ldrb	r2, [r7, #27]
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	441a      	add	r2, r3
 80013ec:	7ebb      	ldrb	r3, [r7, #26]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fe71 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 80013f6:	4603      	mov	r3, r0
 80013f8:	823b      	strh	r3, [r7, #16]
        if(received_pec != data_pec) {
 80013fa:	8a7a      	ldrh	r2, [r7, #18]
 80013fc:	8a3b      	ldrh	r3, [r7, #16]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d002      	beq.n	8001408 <driverSWLTC6804ReadCellVoltageRegisters+0x144>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 8001402:	23ff      	movs	r3, #255	; 0xff
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
        data_counter=data_counter+2;												                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs cell voltage data
 8001408:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140c:	3302      	adds	r3, #2
 800140e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001416:	3301      	adds	r3, #1
 8001418:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800141c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	429a      	cmp	r2, r3
 8001424:	d391      	bcc.n	800134a <driverSWLTC6804ReadCellVoltageRegisters+0x86>
    for(uint8_t cell_reg = 1; cell_reg<((driverSWLTC6804MaxNoOfCellPerModule/3)+1); cell_reg++) {        			 			                 //executes once for each of the LTC6804 cell voltage registers
 8001426:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800142a:	3301      	adds	r3, #1
 800142c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <driverSWLTC6804ReadCellVoltageRegisters+0x288>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4a46      	ldr	r2, [pc, #280]	; (8001550 <driverSWLTC6804ReadCellVoltageRegisters+0x28c>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001442:	429a      	cmp	r2, r3
 8001444:	f67f af73 	bls.w	800132e <driverSWLTC6804ReadCellVoltageRegisters+0x6a>
 8001448:	e076      	b.n	8001538 <driverSWLTC6804ReadCellVoltageRegisters+0x274>
      }
    }
  }else{
    driverSWLTC6804ReadCellVoltageGroups(reg, total_ic,cell_data);
 800144a:	79b9      	ldrb	r1, [r7, #6]
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f87f 	bl	8001554 <driverSWLTC6804ReadCellVoltageGroups>
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800145c:	e067      	b.n	800152e <driverSWLTC6804ReadCellVoltageRegisters+0x26a>
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001464:	e02d      	b.n	80014c2 <driverSWLTC6804ReadCellVoltageRegisters+0x1fe>
			  parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);            //Each cell code is received as two bytes and is combined to create the parsed cell voltage code
 8001466:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b29a      	uxth	r2, r3
 8001472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001476:	3301      	adds	r3, #1
 8001478:	6979      	ldr	r1, [r7, #20]
 800147a:	440b      	add	r3, r1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	4413      	add	r3, r2
 8001486:	81fb      	strh	r3, [r7, #14]
			  cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 8001488:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800148c:	4622      	mov	r2, r4
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	3a01      	subs	r2, #1
 80014a0:	7e78      	ldrb	r0, [r7, #25]
 80014a2:	fb00 f202 	mul.w	r2, r0, r2
 80014a6:	440a      	add	r2, r1
 80014a8:	89f9      	ldrh	r1, [r7, #14]
 80014aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  data_counter= data_counter + 2;     									                             //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 80014ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b2:	3302      	adds	r3, #2
 80014b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 80014b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80014bc:	3301      	adds	r3, #1
 80014be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80014c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80014c6:	7e7b      	ldrb	r3, [r7, #25]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d3cc      	bcc.n	8001466 <driverSWLTC6804ReadCellVoltageRegisters+0x1a2>
		  }
	    received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 80014cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014e0:	3301      	adds	r3, #1
 80014e2:	6979      	ldr	r1, [r7, #20]
 80014e4:	440b      	add	r3, r1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	827b      	strh	r3, [r7, #18]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80014ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014f2:	7efa      	ldrb	r2, [r7, #27]
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	441a      	add	r2, r3
 80014fe:	7ebb      	ldrb	r3, [r7, #26]
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fde8 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8001508:	4603      	mov	r3, r0
 800150a:	823b      	strh	r3, [r7, #16]

			if(received_pec != data_pec) {
 800150c:	8a7a      	ldrh	r2, [r7, #18]
 800150e:	8a3b      	ldrh	r3, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d002      	beq.n	800151a <driverSWLTC6804ReadCellVoltageRegisters+0x256>
			  pec_error = -1;															                                       //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 8001514:	23ff      	movs	r3, #255	; 0xff
 8001516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  }
		  data_counter= data_counter + 2; 											                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs cell voltage data
 800151a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800151e:	3302      	adds	r3, #2
 8001520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001524:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001528:	3301      	adds	r3, #1
 800152a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800152e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	429a      	cmp	r2, r3
 8001536:	d392      	bcc.n	800145e <driverSWLTC6804ReadCellVoltageRegisters+0x19a>
	  }
  }

  free(cell_data);
 8001538:	6978      	ldr	r0, [r7, #20]
 800153a:	f00d fa13 	bl	800e964 <free>
  return(pec_error);
 800153e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001542:	4618      	mov	r0, r3
 8001544:	372c      	adds	r7, #44	; 0x2c
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	bf00      	nop
 800154c:	20000215 	.word	0x20000215
 8001550:	aaaaaaab 	.word	0xaaaaaaab

08001554 <driverSWLTC6804ReadCellVoltageGroups>:

void driverSWLTC6804ReadCellVoltageGroups(uint8_t reg, uint8_t total_ic, uint8_t *data ) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	603a      	str	r2, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
 8001560:	460b      	mov	r3, r1
 8001562:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 8001564:	2308      	movs	r3, #8
 8001566:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1) {      //1: RDCVA
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d104      	bne.n	8001578 <driverSWLTC6804ReadCellVoltageGroups+0x24>
    cmd[1] = 0x04;
 800156e:	2304      	movs	r3, #4
 8001570:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	723b      	strb	r3, [r7, #8]
 8001576:	e026      	b.n	80015c6 <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 2) { //2: RDCVB
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d104      	bne.n	8001588 <driverSWLTC6804ReadCellVoltageGroups+0x34>
    cmd[1] = 0x06;
 800157e:	2306      	movs	r3, #6
 8001580:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	723b      	strb	r3, [r7, #8]
 8001586:	e01e      	b.n	80015c6 <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 3) { //3: RDCVC
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d104      	bne.n	8001598 <driverSWLTC6804ReadCellVoltageGroups+0x44>
    cmd[1] = 0x08;
 800158e:	2308      	movs	r3, #8
 8001590:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	723b      	strb	r3, [r7, #8]
 8001596:	e016      	b.n	80015c6 <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 4) { //4: RDCVD
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d104      	bne.n	80015a8 <driverSWLTC6804ReadCellVoltageGroups+0x54>
    cmd[1] = 0x0A;
 800159e:	230a      	movs	r3, #10
 80015a0:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015a2:	2300      	movs	r3, #0
 80015a4:	723b      	strb	r3, [r7, #8]
 80015a6:	e00e      	b.n	80015c6 <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 5) { //5: RDCVE - LTC6812 & LTC6813 only
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d104      	bne.n	80015b8 <driverSWLTC6804ReadCellVoltageGroups+0x64>
    cmd[1] = 0x09;
 80015ae:	2309      	movs	r3, #9
 80015b0:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015b2:	2300      	movs	r3, #0
 80015b4:	723b      	strb	r3, [r7, #8]
 80015b6:	e006      	b.n	80015c6 <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 6) { //6: RDCVF -  LTC6813 only
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d103      	bne.n	80015c6 <driverSWLTC6804ReadCellVoltageGroups+0x72>
    cmd[1] = 0x0B;
 80015be:	230b      	movs	r3, #11
 80015c0:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015c2:	2300      	movs	r3, #0
 80015c4:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	2002      	movs	r0, #2
 80015ce:	f000 fd83 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 80015d2:	4603      	mov	r3, r0
 80015d4:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80015d6:	89bb      	ldrh	r3, [r7, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	72fb      	strb	r3, [r7, #11]

  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 80015e6:	f000 fe46 	bl	8002276 <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	fb12 f303 	smulbb	r3, r2, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f107 0008 	add.w	r0, r7, #8
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	2104      	movs	r1, #4
 80015fc:	f000 fe22 	bl	8002244 <driverSWLTC6804WriteRead>
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <driverSWLTC6804ReadAuxVoltagesArray>:
  cmd[3] = (uint8_t)(cmd_pec);

	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
}

bool driverSWLTC6804ReadAuxVoltagesArray(float auxVoltagesArray[][driverSWLTC6804MaxNoOfTempSensorPerModule],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor,float ntcNominalTemp) {
 8001608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800160c:	b08d      	sub	sp, #52	; 0x34
 800160e:	af00      	add	r7, sp, #0
 8001610:	6178      	str	r0, [r7, #20]
 8001612:	6139      	str	r1, [r7, #16]
 8001614:	60fa      	str	r2, [r7, #12]
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
 800161a:	817b      	strh	r3, [r7, #10]
 800161c:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <driverSWLTC6804ReadAuxVoltagesArray+0x1cc>)
 800161e:	781e      	ldrb	r6, [r3, #0]
 8001620:	4633      	mov	r3, r6
 8001622:	3b01      	subs	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001626:	b2f0      	uxtb	r0, r6
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	014b      	lsls	r3, r1, #5
 8001636:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800163a:	0142      	lsls	r2, r0, #5
 800163c:	466b      	mov	r3, sp
 800163e:	4699      	mov	r9, r3
	bool dataValid = true;
 8001640:	2301      	movs	r3, #1
 8001642:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint16_t auxVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfTempSensorPerModule];
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <driverSWLTC6804ReadAuxVoltagesArray+0x1cc>)
 8001648:	781c      	ldrb	r4, [r3, #0]
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <driverSWLTC6804ReadAuxVoltagesArray+0x1d0>)
 800164c:	781d      	ldrb	r5, [r3, #0]
 800164e:	4623      	mov	r3, r4
 8001650:	3b01      	subs	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	b2e0      	uxtb	r0, r4
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	010b      	lsls	r3, r1, #4
 8001664:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001668:	0102      	lsls	r2, r0, #4
 800166a:	4623      	mov	r3, r4
 800166c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001670:	462b      	mov	r3, r5
 8001672:	3b01      	subs	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
 8001676:	b2e0      	uxtb	r0, r4
 8001678:	f04f 0100 	mov.w	r1, #0
 800167c:	b2ea      	uxtb	r2, r5
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	fb02 fe01 	mul.w	lr, r2, r1
 8001686:	fb00 fc03 	mul.w	ip, r0, r3
 800168a:	44f4      	add	ip, lr
 800168c:	fba0 2302 	umull	r2, r3, r0, r2
 8001690:	eb0c 0103 	add.w	r1, ip, r3
 8001694:	460b      	mov	r3, r1
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0119      	lsls	r1, r3, #4
 80016a0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80016a4:	0110      	lsls	r0, r2, #4
 80016a6:	b2e0      	uxtb	r0, r4
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	b2ea      	uxtb	r2, r5
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	fb02 fe01 	mul.w	lr, r2, r1
 80016b6:	fb00 fc03 	mul.w	ip, r0, r3
 80016ba:	44f4      	add	ip, lr
 80016bc:	fba0 2302 	umull	r2, r3, r0, r2
 80016c0:	eb0c 0103 	add.w	r1, ip, r3
 80016c4:	460b      	mov	r3, r1
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	0119      	lsls	r1, r3, #4
 80016d0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80016d4:	0110      	lsls	r0, r2, #4
 80016d6:	4623      	mov	r3, r4
 80016d8:	462a      	mov	r2, r5
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	3307      	adds	r3, #7
 80016e2:	08db      	lsrs	r3, r3, #3
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	ebad 0d03 	sub.w	sp, sp, r3
 80016ea:	466b      	mov	r3, sp
 80016ec:	3301      	adds	r3, #1
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]

	driverSWLTC6804ReadAuxVoltageRegisters(AUX_CH_ALL,driverSWLTC6804TotalNumberOfICs,auxVoltageArrayCodes);
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <driverSWLTC6804ReadAuxVoltagesArray+0x1d0>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	4619      	mov	r1, r3
 80016fc:	2000      	movs	r0, #0
 80016fe:	f000 f86f 	bl	80017e0 <driverSWLTC6804ReadAuxVoltageRegisters>

  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 8001702:	2300      	movs	r3, #0
 8001704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001708:	e055      	b.n	80017b6 <driverSWLTC6804ReadAuxVoltagesArray+0x1ae>
		for(uint8_t auxPointer = 0; auxPointer < driverSWLTC6804MaxNoOfTempSensorPerModule; auxPointer++){
 800170a:	2300      	movs	r3, #0
 800170c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001710:	e046      	b.n	80017a0 <driverSWLTC6804ReadAuxVoltagesArray+0x198>
			if(auxVoltageArrayCodes[modulePointer][auxPointer]*0.0001f < 10.0f)
 8001712:	ea4f 0158 	mov.w	r1, r8, lsr #1
 8001716:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 800171a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fb00 f101 	mul.w	r1, r0, r1
 8001724:	440a      	add	r2, r1
 8001726:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80017dc <driverSWLTC6804ReadAuxVoltagesArray+0x1d4>
 8001736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800173e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d523      	bpl.n	8001790 <driverSWLTC6804ReadAuxVoltagesArray+0x188>
			  auxVoltagesArray[modulePointer][auxPointer] = driverSWLTC6804ConvertTemperatureExt(auxVoltageArrayCodes[modulePointer][auxPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 8001748:	ea4f 0158 	mov.w	r1, r8, lsr #1
 800174c:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001750:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	fb00 f101 	mul.w	r1, r0, r1
 800175a:	440a      	add	r2, r1
 800175c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8001760:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001764:	4632      	mov	r2, r6
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	18d4      	adds	r4, r2, r3
 8001770:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
 8001774:	897b      	ldrh	r3, [r7, #10]
 8001776:	ed97 0a01 	vldr	s0, [r7, #4]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	6939      	ldr	r1, [r7, #16]
 800177e:	f000 fd93 	bl	80022a8 <driverSWLTC6804ConvertTemperatureExt>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	00ab      	lsls	r3, r5, #2
 8001788:	4423      	add	r3, r4
 800178a:	edc3 7a00 	vstr	s15, [r3]
 800178e:	e002      	b.n	8001796 <driverSWLTC6804ReadAuxVoltagesArray+0x18e>
			else
				dataValid = false;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		for(uint8_t auxPointer = 0; auxPointer < driverSWLTC6804MaxNoOfTempSensorPerModule; auxPointer++){
 8001796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800179a:	3301      	adds	r3, #1
 800179c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <driverSWLTC6804ReadAuxVoltagesArray+0x1cc>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d3b2      	bcc.n	8001712 <driverSWLTC6804ReadAuxVoltagesArray+0x10a>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 80017ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017b0:	3301      	adds	r3, #1
 80017b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <driverSWLTC6804ReadAuxVoltagesArray+0x1d0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3a3      	bcc.n	800170a <driverSWLTC6804ReadAuxVoltagesArray+0x102>
		}
  }

	return dataValid;
 80017c2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80017c6:	46cd      	mov	sp, r9
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3734      	adds	r7, #52	; 0x34
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d2:	bf00      	nop
 80017d4:	20000216 	.word	0x20000216
 80017d8:	20000214 	.word	0x20000214
 80017dc:	38d1b717 	.word	0x38d1b717

080017e0 <driverSWLTC6804ReadAuxVoltageRegisters>:

int8_t driverSWLTC6804ReadAuxVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t aux_codes[][driverSWLTC6804MaxNoOfTempSensorPerModule]) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b08d      	sub	sp, #52	; 0x34
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	603a      	str	r2, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	460b      	mov	r3, r1
 80017ee:	71bb      	strb	r3, [r7, #6]
 80017f0:	4b97      	ldr	r3, [pc, #604]	; (8001a50 <driverSWLTC6804ReadAuxVoltageRegisters+0x270>)
 80017f2:	781c      	ldrb	r4, [r3, #0]
 80017f4:	4623      	mov	r3, r4
 80017f6:	3b01      	subs	r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	b2e0      	uxtb	r0, r4
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	010b      	lsls	r3, r1, #4
 800180a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800180e:	0102      	lsls	r2, r0, #4
  const uint8_t NUM_RX_BYT = 8;
 8001810:	2308      	movs	r3, #8
 8001812:	76fb      	strb	r3, [r7, #27]
  const uint8_t BYT_IN_REG = 6;
 8001814:	2306      	movs	r3, #6
 8001816:	76bb      	strb	r3, [r7, #26]
  const uint8_t GPIO_IN_REG = 3;
 8001818:	2303      	movs	r3, #3
 800181a:	767b      	strb	r3, [r7, #25]

  uint8_t *data;
  uint8_t data_counter = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  int8_t pec_error = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint16_t parsed_aux;
  uint16_t received_pec;
  uint16_t data_pec;
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001828:	7efb      	ldrb	r3, [r7, #27]
 800182a:	79ba      	ldrb	r2, [r7, #6]
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f00d f88f 	bl	800e954 <malloc>
 8001836:	4603      	mov	r3, r0
 8001838:	617b      	str	r3, [r7, #20]
  //1.a
  if (reg == 0) {
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 8092 	bne.w	8001966 <driverSWLTC6804ReadAuxVoltageRegisters+0x186>
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 8001842:	2301      	movs	r3, #1
 8001844:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001848:	e080      	b.n	800194c <driverSWLTC6804ReadAuxVoltageRegisters+0x16c>
      data_counter = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      driverSWLTC6804ReadAuxGroups(gpio_reg, total_ic,data);									             //Reads the raw auxiliary register data into the data[] array
 8001850:	79b9      	ldrb	r1, [r7, #6]
 8001852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f8fd 	bl	8001a58 <driverSWLTC6804ReadAuxGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 800185e:	2300      	movs	r3, #0
 8001860:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001864:	e068      	b.n	8001938 <driverSWLTC6804ReadAuxVoltageRegisters+0x158>
		    for(uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) {	       // This loop parses the read back data into GPIO voltages, it loops once for each of the 3 gpio voltage codes in the register
 8001866:	2300      	movs	r3, #0
 8001868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800186c:	e02e      	b.n	80018cc <driverSWLTC6804ReadAuxVoltageRegisters+0xec>
		      parsed_aux = data[data_counter] + (data[data_counter+1]<<8);                     //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 800186e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b29a      	uxth	r2, r3
 800187a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800187e:	3301      	adds	r3, #1
 8001880:	6979      	ldr	r1, [r7, #20]
 8001882:	440b      	add	r3, r1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b29b      	uxth	r3, r3
 800188c:	4413      	add	r3, r2
 800188e:	81fb      	strh	r3, [r7, #14]
          aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
 8001890:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001894:	4622      	mov	r2, r4
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80018a4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018a8:	3a01      	subs	r2, #1
 80018aa:	7e78      	ldrb	r0, [r7, #25]
 80018ac:	fb00 f202 	mul.w	r2, r0, r2
 80018b0:	440a      	add	r2, r1
 80018b2:	89f9      	ldrh	r1, [r7, #14]
 80018b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          data_counter=data_counter+2;												                             //Because gpio voltage codes are two bytes the data counter must increment by two for each parsed gpio voltage code
 80018b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018bc:	3302      	adds	r3, #2
 80018be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		    for(uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) {	       // This loop parses the read back data into GPIO voltages, it loops once for each of the 3 gpio voltage codes in the register
 80018c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80018c6:	3301      	adds	r3, #1
 80018c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018cc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80018d0:	7e7b      	ldrb	r3, [r7, #25]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3cb      	bcc.n	800186e <driverSWLTC6804ReadAuxVoltageRegisters+0x8e>
        }

        received_pec = (data[data_counter]<<8)+ data[data_counter+1]; 				             //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 80018d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018ea:	3301      	adds	r3, #1
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	440b      	add	r3, r1
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	827b      	strh	r3, [r7, #18]
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80018f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018fc:	7efa      	ldrb	r2, [r7, #27]
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	461a      	mov	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	441a      	add	r2, r3
 8001908:	7ebb      	ldrb	r3, [r7, #26]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fbe3 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8001912:	4603      	mov	r3, r0
 8001914:	823b      	strh	r3, [r7, #16]
        if(received_pec != data_pec) {
 8001916:	8a7a      	ldrh	r2, [r7, #18]
 8001918:	8a3b      	ldrh	r3, [r7, #16]
 800191a:	429a      	cmp	r2, r3
 800191c:	d002      	beq.n	8001924 <driverSWLTC6804ReadAuxVoltageRegisters+0x144>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the received serial data
 800191e:	23ff      	movs	r3, #255	; 0xff
 8001920:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        data_counter=data_counter+2;												                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs gpio voltage data
 8001924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001928:	3302      	adds	r3, #2
 800192a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 800192e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001932:	3301      	adds	r3, #1
 8001934:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001938:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	429a      	cmp	r2, r3
 8001940:	d391      	bcc.n	8001866 <driverSWLTC6804ReadAuxVoltageRegisters+0x86>
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 8001942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001946:	3301      	adds	r3, #1
 8001948:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800194c:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <driverSWLTC6804ReadAuxVoltageRegisters+0x270>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4a40      	ldr	r2, [pc, #256]	; (8001a54 <driverSWLTC6804ReadAuxVoltageRegisters+0x274>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800195e:	429a      	cmp	r2, r3
 8001960:	f67f af73 	bls.w	800184a <driverSWLTC6804ReadAuxVoltageRegisters+0x6a>
 8001964:	e06b      	b.n	8001a3e <driverSWLTC6804ReadAuxVoltageRegisters+0x25e>
      }
    }
  }else{
    driverSWLTC6804ReadAuxGroups(reg, total_ic, data);
 8001966:	79b9      	ldrb	r1, [r7, #6]
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f873 	bl	8001a58 <driverSWLTC6804ReadAuxGroups>
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	e05e      	b.n	8001a36 <driverSWLTC6804ReadAuxVoltageRegisters+0x256>

		  for(int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++) {  	 	           // This loop parses the read back data. Loops once for each aux voltage in the register
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	e029      	b.n	80019d2 <driverSWLTC6804ReadAuxVoltageRegisters+0x1f2>
			  parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));    		             //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 800197e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4413      	add	r3, r2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b29a      	uxth	r2, r3
 800198a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800198e:	3301      	adds	r3, #1
 8001990:	6979      	ldr	r1, [r7, #20]
 8001992:	440b      	add	r3, r1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	b29b      	uxth	r3, r3
 800199c:	4413      	add	r3, r2
 800199e:	81fb      	strh	r3, [r7, #14]
			  aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
 80019a0:	4622      	mov	r2, r4
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	fb03 f302 	mul.w	r3, r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	3a01      	subs	r2, #1
 80019b2:	7e79      	ldrb	r1, [r7, #25]
 80019b4:	fb01 f102 	mul.w	r1, r1, r2
 80019b8:	6a3a      	ldr	r2, [r7, #32]
 80019ba:	440a      	add	r2, r1
 80019bc:	89f9      	ldrh	r1, [r7, #14]
 80019be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  data_counter=data_counter+2;									 		                                 //Because gpio voltage codes are two bytes the data counter must increment by two for each parsed gpio voltage code
 80019c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019c6:	3302      	adds	r3, #2
 80019c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++) {  	 	           // This loop parses the read back data. Loops once for each aux voltage in the register
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	3301      	adds	r3, #1
 80019d0:	623b      	str	r3, [r7, #32]
 80019d2:	7e7b      	ldrb	r3, [r7, #25]
 80019d4:	6a3a      	ldr	r2, [r7, #32]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbd1      	blt.n	800197e <driverSWLTC6804ReadAuxVoltageRegisters+0x19e>
		  }
		  received_pec = (data[data_counter]<<8) + data[data_counter+1]; 				               //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 80019da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019ee:	3301      	adds	r3, #1
 80019f0:	6979      	ldr	r1, [r7, #20]
 80019f2:	440b      	add	r3, r1
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	827b      	strh	r3, [r7, #18]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80019fc:	7efb      	ldrb	r3, [r7, #27]
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	441a      	add	r2, r3
 8001a0a:	7ebb      	ldrb	r3, [r7, #26]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fb62 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8001a14:	4603      	mov	r3, r0
 8001a16:	823b      	strh	r3, [r7, #16]

			if(received_pec != data_pec) {
 8001a18:	8a7a      	ldrh	r2, [r7, #18]
 8001a1a:	8a3b      	ldrh	r3, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d002      	beq.n	8001a26 <driverSWLTC6804ReadAuxVoltageRegisters+0x246>
        pec_error = -1;													   		                                     //The pec_error variable is simply set negative if any PEC errors  are detected in the received serial data
 8001a20:	23ff      	movs	r3, #255	; 0xff
 8001a22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

			data_counter=data_counter+2;												                                 //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs gpio voltage data
 8001a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	3301      	adds	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	db9c      	blt.n	8001978 <driverSWLTC6804ReadAuxVoltageRegisters+0x198>
	  }
  }
  free(data);
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f00c ff90 	bl	800e964 <free>
  return (pec_error);
 8001a44:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3734      	adds	r7, #52	; 0x34
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}
 8001a50:	20000216 	.word	0x20000216
 8001a54:	aaaaaaab 	.word	0xaaaaaaab

08001a58 <driverSWLTC6804ReadAuxGroups>:

void driverSWLTC6804ReadAuxGroups(uint8_t reg, uint8_t total_ic, uint8_t *data) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	603a      	str	r2, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	460b      	mov	r3, r1
 8001a66:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001a68:	2308      	movs	r3, #8
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  //1
  if (reg == 1) {			//Read back auxiliary group A
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d104      	bne.n	8001a7c <driverSWLTC6804ReadAuxGroups+0x24>
    cmd[1] = 0x0C;
 8001a72:	230c      	movs	r3, #12
 8001a74:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	723b      	strb	r3, [r7, #8]
 8001a7a:	e01b      	b.n	8001ab4 <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 2) {		//Read back auxiliary group B
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d104      	bne.n	8001a8c <driverSWLTC6804ReadAuxGroups+0x34>
    cmd[1] = 0x0E;
 8001a82:	230e      	movs	r3, #14
 8001a84:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	723b      	strb	r3, [r7, #8]
 8001a8a:	e013      	b.n	8001ab4 <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 3) {		//Read auxiliary group C LTC6812 & LTC6813 only
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d104      	bne.n	8001a9c <driverSWLTC6804ReadAuxGroups+0x44>
    cmd[1] = 0x0D;
 8001a92:	230d      	movs	r3, #13
 8001a94:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	723b      	strb	r3, [r7, #8]
 8001a9a:	e00b      	b.n	8001ab4 <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 4) {		//Read auxiliary group D LTC6812 & LTC6813 only
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d104      	bne.n	8001aac <driverSWLTC6804ReadAuxGroups+0x54>
    cmd[1] = 0x0F;
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	723b      	strb	r3, [r7, #8]
 8001aaa:	e003      	b.n	8001ab4 <driverSWLTC6804ReadAuxGroups+0x5c>
  }else{					     //Read back auxiliary group A
     cmd[1] = 0x0C;
 8001aac:	230c      	movs	r3, #12
 8001aae:	727b      	strb	r3, [r7, #9]
     cmd[0] = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2002      	movs	r0, #2
 8001abc:	f000 fb0c 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001ac4:	89bb      	ldrh	r3, [r7, #12]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001ace:	89bb      	ldrh	r3, [r7, #12]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	72fb      	strb	r3, [r7, #11]

  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake, this command can be removed.
 8001ad4:	f000 fbcf 	bl	8002276 <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	fb12 f303 	smulbb	r3, r2, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f107 0008 	add.w	r0, r7, #8
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	2104      	movs	r1, #4
 8001aea:	f000 fbab 	bl	8002244 <driverSWLTC6804WriteRead>
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <driverSWLTC6804WriteConfigRegister>:

void driverSWLTC6804WriteConfigRegister(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8001af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001afc:	b08c      	sub	sp, #48	; 0x30
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	6039      	str	r1, [r7, #0]
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	4613      	mov	r3, r2
 8001b08:	71bb      	strb	r3, [r7, #6]
 8001b0a:	466b      	mov	r3, sp
 8001b0c:	461d      	mov	r5, r3
  const uint8_t BYTES_IN_REG = 6;
 8001b0e:	2306      	movs	r3, #6
 8001b10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t *cmd;
  uint16_t cfg_pec;
  uint8_t cmd_index; //command counter
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8001b20:	79fc      	ldrb	r4, [r7, #7]
 8001b22:	4623      	mov	r3, r4
 8001b24:	3b01      	subs	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	b2e0      	uxtb	r0, r4
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	eb12 0a02 	adds.w	sl, r2, r2
 8001b36:	eb43 0b03 	adc.w	fp, r3, r3
 8001b3a:	4652      	mov	r2, sl
 8001b3c:	465b      	mov	r3, fp
 8001b3e:	1812      	adds	r2, r2, r0
 8001b40:	eb41 0303 	adc.w	r3, r1, r3
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	0119      	lsls	r1, r3, #4
 8001b4e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001b52:	0110      	lsls	r0, r2, #4
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4622      	mov	r2, r4
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b2e0      	uxtb	r0, r4
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	eb12 0802 	adds.w	r8, r2, r2
 8001b70:	eb43 0903 	adc.w	r9, r3, r3
 8001b74:	4642      	mov	r2, r8
 8001b76:	464b      	mov	r3, r9
 8001b78:	1812      	adds	r2, r2, r0
 8001b7a:	eb41 0303 	adc.w	r3, r1, r3
 8001b7e:	f04f 0000 	mov.w	r0, #0
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	0119      	lsls	r1, r3, #4
 8001b88:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001b8c:	0110      	lsls	r0, r2, #4
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4622      	mov	r2, r4
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	3307      	adds	r3, #7
 8001b9e:	08db      	lsrs	r3, r3, #3
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ba6:	466b      	mov	r3, sp
 8001ba8:	3300      	adds	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 8001bac:	4ba2      	ldr	r3, [pc, #648]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcc9 	bl	8000548 <__aeabi_f2d>
 8001bb6:	a39e      	add	r3, pc, #632	; (adr r3, 8001e30 <driverSWLTC6804WriteConfigRegister+0x338>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ffee 	bl	8000ba8 <__aeabi_d2uiz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	82fb      	strh	r3, [r7, #22]
	uint16_t VoV = driverSWLTC6804ConfigStruct.CellOverVoltageLimit/(16*0.0001);
 8001bd0:	4b99      	ldr	r3, [pc, #612]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fcb7 	bl	8000548 <__aeabi_f2d>
 8001bda:	a395      	add	r3, pc, #596	; (adr r3, 8001e30 <driverSWLTC6804WriteConfigRegister+0x338>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fe34 	bl	800084c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7fe ffdc 	bl	8000ba8 <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	82bb      	strh	r3, [r7, #20]
	uint32_t activeBalanceMask=0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24

  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfc:	e08d      	b.n	8001d1a <driverSWLTC6804WriteConfigRegister+0x222>
		if(useArray)
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <driverSWLTC6804WriteConfigRegister+0x11a>
			activeBalanceMask = balanceEnableMaskArray[i];
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	e002      	b.n	8001c18 <driverSWLTC6804WriteConfigRegister+0x120>
		else
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24

    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 8001c18:	4b87      	ldr	r3, [pc, #540]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c1a:	791b      	ldrb	r3, [r3, #4]
 8001c1c:	01db      	lsls	r3, r3, #7
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	4b85      	ldr	r3, [pc, #532]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c22:	78db      	ldrb	r3, [r3, #3]
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	b25b      	sxtb	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b25a      	sxtb	r2, r3
 8001c2c:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	015b      	lsls	r3, r3, #5
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b25a      	sxtb	r2, r3
 8001c38:	4b7f      	ldr	r3, [pc, #508]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	4b7c      	ldr	r3, [pc, #496]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b25a      	sxtb	r2, r3
 8001c50:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c52:	7a5b      	ldrb	r3, [r3, #9]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b25a      	sxtb	r2, r3
 8001c5c:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c5e:	7adb      	ldrb	r3, [r3, #11]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	b2d8      	uxtb	r0, r3
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	440b      	add	r3, r1
 8001c76:	4602      	mov	r2, r0
 8001c78:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][1] = (VuV & 0xFF) ;
 8001c7a:	8afb      	ldrh	r3, [r7, #22]
 8001c7c:	b2d8      	uxtb	r0, r3
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4602      	mov	r2, r0
 8001c90:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][2] = ((VoV & 0x0F) << 4) | (VuV >> 8) ;
 8001c92:	8abb      	ldrh	r3, [r7, #20]
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	8afb      	ldrh	r3, [r7, #22]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	b2d8      	uxtb	r0, r3
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][3] = (VoV >> 4) ;
 8001cba:	8abb      	ldrh	r3, [r7, #20]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b2d8      	uxtb	r0, r3
 8001cc2:	69b9      	ldr	r1, [r7, #24]
 8001cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	440b      	add	r3, r1
 8001cd0:	3303      	adds	r3, #3
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][4] = (activeBalanceMask & 0xFF) ;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	b2d8      	uxtb	r0, r3
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3304      	adds	r3, #4
 8001cea:	4602      	mov	r2, r0
 8001cec:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ;
 8001cee:	4b52      	ldr	r3, [pc, #328]	; (8001e38 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001cf0:	7d1b      	ldrb	r3, [r3, #20]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b2d8      	uxtb	r0, r3
 8001d00:	69b9      	ldr	r1, [r7, #24]
 8001d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3305      	adds	r3, #5
 8001d10:	4602      	mov	r2, r0
 8001d12:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	3301      	adds	r3, #1
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	f6ff af6d 	blt.w	8001bfe <driverSWLTC6804WriteConfigRegister+0x106>
  }

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00c fe13 	bl	800e954 <malloc>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	613b      	str	r3, [r7, #16]
  cmd[0] = 0x00; // config register command
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x01; // config register command
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
  cmd[2] = 0x3d; // PEC
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	3302      	adds	r3, #2
 8001d44:	223d      	movs	r2, #61	; 0x3d
 8001d46:	701a      	strb	r2, [r3, #0]
  cmd[3] = 0x6e; // PEC
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	226e      	movs	r2, #110	; 0x6e
 8001d4e:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 8001d50:	2304      	movs	r3, #4
 8001d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d5c:	e051      	b.n	8001e02 <driverSWLTC6804WriteConfigRegister+0x30a>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d64:	e01b      	b.n	8001d9e <driverSWLTC6804WriteConfigRegister+0x2a6>
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent
 8001d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8001d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d74:	6939      	ldr	r1, [r7, #16]
 8001d76:	4419      	add	r1, r3
 8001d78:	69bc      	ldr	r4, [r7, #24]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4423      	add	r3, r4
 8001d84:	4403      	add	r3, r0
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	700b      	strb	r3, [r1, #0]
      cmd_index = cmd_index + 1;
 8001d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8001d94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d9e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001da2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d3dd      	bcc.n	8001d66 <driverSWLTC6804WriteConfigRegister+0x26e>
    }
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 8001daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dae:	1e5a      	subs	r2, r3, #1
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	441a      	add	r2, r3
 8001dbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f988 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	81fb      	strh	r3, [r7, #14]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001dcc:	89fb      	ldrh	r3, [r7, #14]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b299      	uxth	r1, r3
 8001dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b2ca      	uxtb	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001dde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001de2:	3301      	adds	r3, #1
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	89fa      	ldrh	r2, [r7, #14]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8001dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001df2:	3302      	adds	r3, #2
 8001df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1a9      	bne.n	8001d5e <driverSWLTC6804WriteConfigRegister+0x266>
  }

	driverSWLTC6804WakeIC();
 8001e0a:	f000 fa34 	bl	8002276 <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 8001e0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e12:	4619      	mov	r1, r3
 8001e14:	6938      	ldr	r0, [r7, #16]
 8001e16:	f000 fa04 	bl	8002222 <driverSWLTC6804Write>
  free(cmd);
 8001e1a:	6938      	ldr	r0, [r7, #16]
 8001e1c:	f00c fda2 	bl	800e964 <free>
 8001e20:	46ad      	mov	sp, r5
}
 8001e22:	bf00      	nop
 8001e24:	3730      	adds	r7, #48	; 0x30
 8001e26:	46bd      	mov	sp, r7
 8001e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e2c:	f3af 8000 	nop.w
 8001e30:	eb1c432d 	.word	0xeb1c432d
 8001e34:	3f5a36e2 	.word	0x3f5a36e2
 8001e38:	200004cc 	.word	0x200004cc

08001e3c <driverSWLTC6804WriteConfigRegisterB>:

void driverSWLTC6804WriteConfigRegisterB(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8001e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e40:	b08a      	sub	sp, #40	; 0x28
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	6039      	str	r1, [r7, #0]
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	71bb      	strb	r3, [r7, #6]
 8001e4e:	466b      	mov	r3, sp
 8001e50:	461d      	mov	r5, r3
  const uint8_t BYTES_IN_REG = 6;
 8001e52:	2306      	movs	r3, #6
 8001e54:	767b      	strb	r3, [r7, #25]
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	763b      	strb	r3, [r7, #24]
  uint8_t *cmd;
  uint16_t cfg_pec;
  uint8_t cmd_index; //command counter
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8001e60:	79fc      	ldrb	r4, [r7, #7]
 8001e62:	4623      	mov	r3, r4
 8001e64:	3b01      	subs	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	b2e0      	uxtb	r0, r4
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	eb12 0a02 	adds.w	sl, r2, r2
 8001e76:	eb43 0b03 	adc.w	fp, r3, r3
 8001e7a:	4652      	mov	r2, sl
 8001e7c:	465b      	mov	r3, fp
 8001e7e:	1812      	adds	r2, r2, r0
 8001e80:	eb41 0303 	adc.w	r3, r1, r3
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	0119      	lsls	r1, r3, #4
 8001e8e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001e92:	0110      	lsls	r0, r2, #4
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4622      	mov	r2, r4
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	b2e0      	uxtb	r0, r4
 8001ea4:	f04f 0100 	mov.w	r1, #0
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	eb12 0802 	adds.w	r8, r2, r2
 8001eb0:	eb43 0903 	adc.w	r9, r3, r3
 8001eb4:	4642      	mov	r2, r8
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	1812      	adds	r2, r2, r0
 8001eba:	eb41 0303 	adc.w	r3, r1, r3
 8001ebe:	f04f 0000 	mov.w	r0, #0
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	0119      	lsls	r1, r3, #4
 8001ec8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001ecc:	0110      	lsls	r0, r2, #4
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4622      	mov	r2, r4
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	3307      	adds	r3, #7
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ee6:	466b      	mov	r3, sp
 8001ee8:	3300      	adds	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
	uint32_t activeBalanceMask=0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
	uint16_t cmd_pec;

  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	e06c      	b.n	8001fd0 <driverSWLTC6804WriteConfigRegisterB+0x194>
		if(useArray)
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <driverSWLTC6804WriteConfigRegisterB+0xce>
			activeBalanceMask = balanceEnableMaskArray[i];
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e002      	b.n	8001f10 <driverSWLTC6804WriteConfigRegisterB+0xd4>
		else
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 8001f0a:	4b72      	ldr	r3, [pc, #456]	; (80020d4 <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	61fb      	str	r3, [r7, #28]


    tx_cfg[i][0] = ((activeBalanceMask >> 8 ) & 0x000000F0) | (driverSWLTC6804ConfigStruct.GPIO9 << 3) | (driverSWLTC6804ConfigStruct.GPIO8 << 2) | (driverSWLTC6804ConfigStruct.GPIO7 << 1) | (driverSWLTC6804ConfigStruct.GPIO6) ;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f023 030f 	bic.w	r3, r3, #15
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b6d      	ldr	r3, [pc, #436]	; (80020d4 <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f1e:	7a1b      	ldrb	r3, [r3, #8]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f2a:	79db      	ldrb	r3, [r3, #7]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f36:	799b      	ldrb	r3, [r3, #6]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	4a64      	ldr	r2, [pc, #400]	; (80020d4 <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f42:	7952      	ldrb	r2, [r2, #5]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b2d8      	uxtb	r0, r3
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	6a3a      	ldr	r2, [r7, #32]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	440b      	add	r3, r1
 8001f56:	4602      	mov	r2, r0
 8001f58:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][1] = ((activeBalanceMask >> 16 ) & 0x00000003) ;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	b2d8      	uxtb	r0, r3
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	440b      	add	r3, r1
 8001f74:	3301      	adds	r3, #1
 8001f76:	4602      	mov	r2, r0
 8001f78:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][2] = 0;
 8001f7a:	6939      	ldr	r1, [r7, #16]
 8001f7c:	6a3a      	ldr	r2, [r7, #32]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	440b      	add	r3, r1
 8001f88:	3302      	adds	r3, #2
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][3] = 0;
 8001f8e:	6939      	ldr	r1, [r7, #16]
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3303      	adds	r3, #3
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][4] = 0;
 8001fa2:	6939      	ldr	r1, [r7, #16]
 8001fa4:	6a3a      	ldr	r2, [r7, #32]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	440b      	add	r3, r1
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][5] = 0;
 8001fb6:	6939      	ldr	r1, [r7, #16]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3305      	adds	r3, #5
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	6a3a      	ldr	r2, [r7, #32]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	db8e      	blt.n	8001ef6 <driverSWLTC6804WriteConfigRegisterB+0xba>
  }

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001fd8:	7e3b      	ldrb	r3, [r7, #24]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00c fcba 	bl	800e954 <malloc>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]
  cmd[0] = 0x00; // config register B command
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x24; // config register B command
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3301      	adds	r3, #1
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	701a      	strb	r2, [r3, #0]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f000 f86f 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	817b      	strh	r3, [r7, #10]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3302      	adds	r3, #2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3303      	adds	r3, #3
 8002010:	897a      	ldrh	r2, [r7, #10]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 8002016:	2304      	movs	r3, #4
 8002018:	76fb      	strb	r3, [r7, #27]

  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002020:	e043      	b.n	80020aa <driverSWLTC6804WriteConfigRegisterB+0x26e>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8002022:	2300      	movs	r3, #0
 8002024:	76bb      	strb	r3, [r7, #26]
 8002026:	e015      	b.n	8002054 <driverSWLTC6804WriteConfigRegisterB+0x218>
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent
 8002028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800202c:	1e5a      	subs	r2, r3, #1
 800202e:	7eb8      	ldrb	r0, [r7, #26]
 8002030:	7efb      	ldrb	r3, [r7, #27]
 8002032:	68f9      	ldr	r1, [r7, #12]
 8002034:	4419      	add	r1, r3
 8002036:	693c      	ldr	r4, [r7, #16]
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4423      	add	r3, r4
 8002042:	4403      	add	r3, r0
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	700b      	strb	r3, [r1, #0]
      cmd_index = cmd_index + 1;
 8002048:	7efb      	ldrb	r3, [r7, #27]
 800204a:	3301      	adds	r3, #1
 800204c:	76fb      	strb	r3, [r7, #27]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 800204e:	7ebb      	ldrb	r3, [r7, #26]
 8002050:	3301      	adds	r3, #1
 8002052:	76bb      	strb	r3, [r7, #26]
 8002054:	7eba      	ldrb	r2, [r7, #26]
 8002056:	7e7b      	ldrb	r3, [r7, #25]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3e5      	bcc.n	8002028 <driverSWLTC6804WriteConfigRegisterB+0x1ec>
    }
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 800205c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	441a      	add	r2, r3
 800206e:	7e7b      	ldrb	r3, [r7, #25]
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f830 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 8002078:	4603      	mov	r3, r0
 800207a:	813b      	strh	r3, [r7, #8]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 800207c:	893b      	ldrh	r3, [r7, #8]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b299      	uxth	r1, r3
 8002082:	7efb      	ldrb	r3, [r7, #27]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	b2ca      	uxtb	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 800208c:	7efb      	ldrb	r3, [r7, #27]
 800208e:	3301      	adds	r3, #1
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 800209a:	7efb      	ldrb	r3, [r7, #27]
 800209c:	3302      	adds	r3, #2
 800209e:	76fb      	strb	r3, [r7, #27]
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 80020a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a4:	3b01      	subs	r3, #1
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1b7      	bne.n	8002022 <driverSWLTC6804WriteConfigRegisterB+0x1e6>
  }

	driverSWLTC6804WakeIC();
 80020b2:	f000 f8e0 	bl	8002276 <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 80020b6:	7e3b      	ldrb	r3, [r7, #24]
 80020b8:	4619      	mov	r1, r3
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f8b1 	bl	8002222 <driverSWLTC6804Write>
  free(cmd);
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f00c fc4f 	bl	800e964 <free>
 80020c6:	46ad      	mov	sp, r5
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020d2:	bf00      	nop
 80020d4:	200004cc 	.word	0x200004cc

080020d8 <driverSWLTC6804CalcPEC15>:
	if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
		driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,enableMask,true);
	}
}

uint16_t driverSWLTC6804CalcPEC15(uint8_t len, uint8_t *data) {
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;

	remainder = 16;//initialize the PEC
 80020e4:	2310      	movs	r3, #16
 80020e6:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 80020e8:	2300      	movs	r3, #0
 80020ea:	737b      	strb	r3, [r7, #13]
 80020ec:	e018      	b.n	8002120 <driverSWLTC6804CalcPEC15+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80020ee:	89fb      	ldrh	r3, [r7, #14]
 80020f0:	09db      	lsrs	r3, r3, #7
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	7b7b      	ldrb	r3, [r7, #13]
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	440b      	add	r3, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4053      	eors	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b29a      	uxth	r2, r3
 800210c:	897b      	ldrh	r3, [r7, #10]
 800210e:	490b      	ldr	r1, [pc, #44]	; (800213c <driverSWLTC6804CalcPEC15+0x64>)
 8002110:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4053      	eors	r3, r2
 8002118:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 800211a:	7b7b      	ldrb	r3, [r7, #13]
 800211c:	3301      	adds	r3, #1
 800211e:	737b      	strb	r3, [r7, #13]
 8002120:	7b7a      	ldrb	r2, [r7, #13]
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	429a      	cmp	r2, r3
 8002126:	d3e2      	bcc.n	80020ee <driverSWLTC6804CalcPEC15+0x16>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002128:	89fb      	ldrh	r3, [r7, #14]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	b29b      	uxth	r3, r3
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	08012140 	.word	0x08012140

08002140 <driverSWLTC6804ReadConfigRegister>:

int8_t driverSWLTC6804ReadConfigRegister(uint8_t total_ic, uint8_t r_config[][8]) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  const uint8_t BYTES_IN_REG = 8;
 800214c:	2308      	movs	r3, #8
 800214e:	753b      	strb	r3, [r7, #20]

  uint8_t cmd[4];
  uint8_t *rx_data;
  int8_t pec_error = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	75fb      	strb	r3, [r7, #23]
  uint16_t data_pec;
  uint16_t received_pec;

  rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4618      	mov	r0, r3
 800215a:	f00c fbfb 	bl	800e954 <malloc>
 800215e:	4603      	mov	r3, r0
 8002160:	613b      	str	r3, [r7, #16]

  cmd[0] = 0x00;
 8002162:	2300      	movs	r3, #0
 8002164:	723b      	strb	r3, [r7, #8]
  cmd[1] = 0x02;
 8002166:	2302      	movs	r3, #2
 8002168:	727b      	strb	r3, [r7, #9]
  cmd[2] = 0x2b;
 800216a:	232b      	movs	r3, #43	; 0x2b
 800216c:	72bb      	strb	r3, [r7, #10]
  cmd[3] = 0x0A;
 800216e:	230a      	movs	r3, #10
 8002170:	72fb      	strb	r3, [r7, #11]

	driverSWLTC6804WriteRead(cmd, 4, rx_data, (BYTES_IN_REG*total_ic));
 8002172:	7d3a      	ldrb	r2, [r7, #20]
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	fb12 f303 	smulbb	r3, r2, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f107 0008 	add.w	r0, r7, #8
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	2104      	movs	r1, #4
 8002184:	f000 f85e 	bl	8002244 <driverSWLTC6804WriteRead>

  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors
 8002188:	2300      	movs	r3, #0
 800218a:	75bb      	strb	r3, [r7, #22]
 800218c:	e03c      	b.n	8002208 <driverSWLTC6804ReadConfigRegister+0xc8>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 800218e:	2300      	movs	r3, #0
 8002190:	757b      	strb	r3, [r7, #21]
 8002192:	e012      	b.n	80021ba <driverSWLTC6804ReadConfigRegister+0x7a>
      r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 8002194:	7d7a      	ldrb	r2, [r7, #21]
 8002196:	7dbb      	ldrb	r3, [r7, #22]
 8002198:	7d39      	ldrb	r1, [r7, #20]
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1899      	adds	r1, r3, r2
 80021a6:	7dbb      	ldrb	r3, [r7, #22]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	441a      	add	r2, r3
 80021ae:	7d7b      	ldrb	r3, [r7, #21]
 80021b0:	7809      	ldrb	r1, [r1, #0]
 80021b2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 80021b4:	7d7b      	ldrb	r3, [r7, #21]
 80021b6:	3301      	adds	r3, #1
 80021b8:	757b      	strb	r3, [r7, #21]
 80021ba:	7d7a      	ldrb	r2, [r7, #21]
 80021bc:	7d3b      	ldrb	r3, [r7, #20]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3e8      	bcc.n	8002194 <driverSWLTC6804ReadConfigRegister+0x54>
    }
    received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 80021c2:	7dbb      	ldrb	r3, [r7, #22]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	799b      	ldrb	r3, [r3, #6]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	7dbb      	ldrb	r3, [r7, #22]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	440b      	add	r3, r1
 80021da:	79db      	ldrb	r3, [r3, #7]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4413      	add	r3, r2
 80021e0:	81fb      	strh	r3, [r7, #14]
    data_pec = driverSWLTC6804CalcPEC15(6, &r_config[current_ic][0]);
 80021e2:	7dbb      	ldrb	r3, [r7, #22]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	2006      	movs	r0, #6
 80021ee:	f7ff ff73 	bl	80020d8 <driverSWLTC6804CalcPEC15>
 80021f2:	4603      	mov	r3, r0
 80021f4:	81bb      	strh	r3, [r7, #12]
    if(received_pec != data_pec) {
 80021f6:	89fa      	ldrh	r2, [r7, #14]
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <driverSWLTC6804ReadConfigRegister+0xc2>
      pec_error = -1;
 80021fe:	23ff      	movs	r3, #255	; 0xff
 8002200:	75fb      	strb	r3, [r7, #23]
  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors
 8002202:	7dbb      	ldrb	r3, [r7, #22]
 8002204:	3301      	adds	r3, #1
 8002206:	75bb      	strb	r3, [r7, #22]
 8002208:	7dba      	ldrb	r2, [r7, #22]
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	429a      	cmp	r2, r3
 800220e:	d3be      	bcc.n	800218e <driverSWLTC6804ReadConfigRegister+0x4e>
    }
  }
  free(rx_data);
 8002210:	6938      	ldr	r0, [r7, #16]
 8002212:	f00c fba7 	bl	800e964 <free>
  return(pec_error);
 8002216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <driverSWLTC6804Write>:

// Coupling of drivers
void driverSWLTC6804Write(uint8_t *writeBytes, uint8_t writeLength) {
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	70fb      	strb	r3, [r7, #3]
	driverHWSPI1Write(writeBytes,writeLength,GPIOA,GPIO_PIN_4);
 800222e:	78f9      	ldrb	r1, [r7, #3]
 8002230:	2310      	movs	r3, #16
 8002232:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fd6e 	bl	8000d18 <driverHWSPI1Write>
};
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <driverSWLTC6804WriteRead>:

// Coupling of drivers
void driverSWLTC6804WriteRead(uint8_t *writeBytes, uint8_t writeLength, uint8_t *readBytes, uint8_t readLength) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	461a      	mov	r2, r3
 8002250:	460b      	mov	r3, r1
 8002252:	72fb      	strb	r3, [r7, #11]
 8002254:	4613      	mov	r3, r2
 8002256:	72bb      	strb	r3, [r7, #10]
	driverHWSPI1WriteRead(writeBytes,writeLength,readBytes,readLength,GPIOA,GPIO_PIN_4);
 8002258:	7abb      	ldrb	r3, [r7, #10]
 800225a:	7af9      	ldrb	r1, [r7, #11]
 800225c:	2210      	movs	r2, #16
 800225e:	9201      	str	r2, [sp, #4]
 8002260:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002264:	9200      	str	r2, [sp, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7fe fd93 	bl	8000d94 <driverHWSPI1WriteRead>
};
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <driverSWLTC6804WakeIC>:

void driverSWLTC6804WakeIC(void){
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
	driverSWLTC6804DelayMS(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f7fe fdee 	bl	8000e5c <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	2110      	movs	r1, #16
 8002284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002288:	f003 fe54 	bl	8005f34 <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 800228c:	2001      	movs	r0, #1
 800228e:	f7fe fde5 	bl	8000e5c <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	2110      	movs	r1, #16
 8002296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229a:	f003 fe4b 	bl	8005f34 <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 800229e:	2001      	movs	r0, #1
 80022a0:	f7fe fddc 	bl	8000e5c <driverSWLTC6804DelayMS>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <driverSWLTC6804ConvertTemperatureExt>:

float driverSWLTC6804ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	ed87 0a00 	vstr	s0, [r7]
 80022b8:	4603      	mov	r3, r0
 80022ba:	81fb      	strh	r3, [r7, #14]
 80022bc:	4613      	mov	r3, r2
 80022be:	81bb      	strh	r3, [r7, #12]
	static float scalar;
	static float steinhart;

  scalar = 30000.0f / (float)inputValue - 1.0f;
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ca:	eddf 6a43 	vldr	s13, [pc, #268]	; 80023d8 <driverSWLTC6804ConvertTemperatureExt+0x130>
 80022ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022da:	4b40      	ldr	r3, [pc, #256]	; (80023dc <driverSWLTC6804ConvertTemperatureExt+0x134>)
 80022dc:	edc3 7a00 	vstr	s15, [r3]
  scalar = (float)ntcSeriesResistance / scalar;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ea:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <driverSWLTC6804ConvertTemperatureExt+0x134>)
 80022ec:	ed93 7a00 	vldr	s14, [r3]
 80022f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <driverSWLTC6804ConvertTemperatureExt+0x134>)
 80022f6:	edc3 7a00 	vstr	s15, [r3]
  steinhart = scalar / (float)ntcNominal;               // (R/Ro)
 80022fa:	4b38      	ldr	r3, [pc, #224]	; (80023dc <driverSWLTC6804ConvertTemperatureExt+0x134>)
 80022fc:	edd3 6a00 	vldr	s13, [r3]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800230a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002310:	edc3 7a00 	vstr	s15, [r3]
  steinhart = log(steinhart);                           // ln(R/Ro)
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f915 	bl	8000548 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	ec43 2b10 	vmov	d0, r2, r3
 8002326:	f00c f8df 	bl	800e4e8 <log>
 800232a:	ec53 2b10 	vmov	r2, r3, d0
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fc59 	bl	8000be8 <__aeabi_d2f>
 8002336:	4603      	mov	r3, r0
 8002338:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800233a:	6013      	str	r3, [r2, #0]
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800233e:	edd3 6a00 	vldr	s13, [r3]
 8002342:	89bb      	ldrh	r3, [r7, #12]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800234c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002352:	edc3 7a00 	vstr	s15, [r3]
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8002356:	edd7 7a00 	vldr	s15, [r7]
 800235a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80023e4 <driverSWLTC6804ConvertTemperatureExt+0x13c>
 800235e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002376:	edc3 7a00 	vstr	s15, [r3]
  steinhart = 1.0f / steinhart;                         // Invert
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800238a:	edc3 7a00 	vstr	s15, [r3]
  steinhart -= 273.15f;                                 // convert to degree
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80023e4 <driverSWLTC6804ConvertTemperatureExt+0x13c>
 8002398:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800239e:	edc3 7a00 	vstr	s15, [r3]

	if(steinhart < -50.0f || (float)inputValue >= 30000.0f)
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80023e8 <driverSWLTC6804ConvertTemperatureExt+0x140>
 80023ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	d404      	bmi.n	80023c0 <driverSWLTC6804ConvertTemperatureExt+0x118>
 80023b6:	89fb      	ldrh	r3, [r7, #14]
 80023b8:	f247 522f 	movw	r2, #29999	; 0x752f
 80023bc:	4293      	cmp	r3, r2
 80023be:	d902      	bls.n	80023c6 <driverSWLTC6804ConvertTemperatureExt+0x11e>
		steinhart = 100.0f;
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <driverSWLTC6804ConvertTemperatureExt+0x144>)
 80023c4:	601a      	str	r2, [r3, #0]

  return steinhart;
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	ee07 3a90 	vmov	s15, r3
}
 80023ce:	eeb0 0a67 	vmov.f32	s0, s15
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	46ea6000 	.word	0x46ea6000
 80023dc:	20000218 	.word	0x20000218
 80023e0:	2000021c 	.word	0x2000021c
 80023e4:	43889333 	.word	0x43889333
 80023e8:	c2480000 	.word	0xc2480000
 80023ec:	42c80000 	.word	0x42c80000

080023f0 <driverSWLTC6804ReadPackCurrent>:
	return(pec_error);
}


bool driverSWLTC6804ReadPackCurrent(float auxVoltagesArray[][12])
{
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	466b      	mov	r3, sp
 80023fc:	461d      	mov	r5, r3
	bool dataValid = false;
 80023fe:	2300      	movs	r3, #0
 8002400:	75bb      	strb	r3, [r7, #22]
	uint16_t auxVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][12];
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <driverSWLTC6804ReadPackCurrent+0x13c>)
 8002404:	781c      	ldrb	r4, [r3, #0]
 8002406:	4623      	mov	r3, r4
 8002408:	3b01      	subs	r3, #1
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	b2e0      	uxtb	r0, r4
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	eb12 0a02 	adds.w	sl, r2, r2
 800241a:	eb43 0b03 	adc.w	fp, r3, r3
 800241e:	4652      	mov	r2, sl
 8002420:	465b      	mov	r3, fp
 8002422:	1812      	adds	r2, r2, r0
 8002424:	eb41 0303 	adc.w	r3, r1, r3
 8002428:	f04f 0000 	mov.w	r0, #0
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	0199      	lsls	r1, r3, #6
 8002432:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002436:	0190      	lsls	r0, r2, #6
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4622      	mov	r2, r4
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	b2e0      	uxtb	r0, r4
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	eb12 0802 	adds.w	r8, r2, r2
 8002454:	eb43 0903 	adc.w	r9, r3, r3
 8002458:	4642      	mov	r2, r8
 800245a:	464b      	mov	r3, r9
 800245c:	1812      	adds	r2, r2, r0
 800245e:	eb41 0303 	adc.w	r3, r1, r3
 8002462:	f04f 0000 	mov.w	r0, #0
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	0199      	lsls	r1, r3, #6
 800246c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002470:	0190      	lsls	r0, r2, #6
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4622      	mov	r2, r4
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	3307      	adds	r3, #7
 8002482:	08db      	lsrs	r3, r3, #3
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	ebad 0d03 	sub.w	sp, sp, r3
 800248a:	466b      	mov	r3, sp
 800248c:	3301      	adds	r3, #1
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	60fb      	str	r3, [r7, #12]

	driverSWLTC6804ReadAuxVoltageRegisters(AUX_CH_GPIO1,driverSWLTC6804TotalNumberOfICs,auxVoltageArrayCodes);
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <driverSWLTC6804ReadPackCurrent+0x13c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4619      	mov	r1, r3
 800249c:	2001      	movs	r0, #1
 800249e:	f7ff f99f 	bl	80017e0 <driverSWLTC6804ReadAuxVoltageRegisters>

	for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
 80024a6:	e035      	b.n	8002514 <driverSWLTC6804ReadPackCurrent+0x124>
	{
			if(auxVoltageArrayCodes[modulePointer][0]*0.0001f < 10.0f)
 80024a8:	7dfa      	ldrb	r2, [r7, #23]
 80024aa:	68f9      	ldr	r1, [r7, #12]
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002530 <driverSWLTC6804ReadPackCurrent+0x140>
 80024c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	d51b      	bpl.n	800250e <driverSWLTC6804ReadPackCurrent+0x11e>
			{
				auxVoltagesArray[modulePointer][0] = auxVoltageArrayCodes[modulePointer][0]*0.0001f;
 80024d6:	7dfa      	ldrb	r2, [r7, #23]
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ee:	7dfa      	ldrb	r2, [r7, #23]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002530 <driverSWLTC6804ReadPackCurrent+0x140>
 8002502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002506:	edc3 7a00 	vstr	s15, [r3]
				dataValid = true;
 800250a:	2301      	movs	r3, #1
 800250c:	75bb      	strb	r3, [r7, #22]
	for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++)
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	3301      	adds	r3, #1
 8002512:	75fb      	strb	r3, [r7, #23]
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <driverSWLTC6804ReadPackCurrent+0x13c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	7dfa      	ldrb	r2, [r7, #23]
 800251a:	429a      	cmp	r2, r3
 800251c:	d3c4      	bcc.n	80024a8 <driverSWLTC6804ReadPackCurrent+0xb8>
			}
	}

	return dataValid;
 800251e:	7dbb      	ldrb	r3, [r7, #22]
 8002520:	46ad      	mov	sp, r5
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800252c:	20000214 	.word	0x20000214
 8002530:	38d1b717 	.word	0x38d1b717

08002534 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800253e:	4804      	ldr	r0, [pc, #16]	; (8002550 <SELECT+0x1c>)
 8002540:	f003 fcf8 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002544:	2001      	movs	r0, #1
 8002546:	f002 fb6b 	bl	8004c20 <HAL_Delay>
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	48000400 	.word	0x48000400

08002554 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002558:	2201      	movs	r2, #1
 800255a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800255e:	4804      	ldr	r0, [pc, #16]	; (8002570 <DESELECT+0x1c>)
 8002560:	f003 fce8 	bl	8005f34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002564:	2001      	movs	r0, #1
 8002566:	f002 fb5b 	bl	8004c20 <HAL_Delay>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	48000400 	.word	0x48000400

08002574 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800257e:	bf00      	nop
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <SPI_TxByte+0x30>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d1f8      	bne.n	8002580 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800258e:	1df9      	adds	r1, r7, #7
 8002590:	2364      	movs	r3, #100	; 0x64
 8002592:	2201      	movs	r2, #1
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <SPI_TxByte+0x30>)
 8002596:	f005 fc24 	bl	8007de2 <HAL_SPI_Transmit>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000540 	.word	0x20000540

080025a8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80025b4:	bf00      	nop
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <SPI_TxBuffer+0x30>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d1f8      	bne.n	80025b6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80025c4:	887a      	ldrh	r2, [r7, #2]
 80025c6:	2364      	movs	r3, #100	; 0x64
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4803      	ldr	r0, [pc, #12]	; (80025d8 <SPI_TxBuffer+0x30>)
 80025cc:	f005 fc09 	bl	8007de2 <HAL_SPI_Transmit>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000540 	.word	0x20000540

080025dc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80025e2:	23ff      	movs	r3, #255	; 0xff
 80025e4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80025e6:	bf00      	nop
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <SPI_RxByte+0x34>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d1f8      	bne.n	80025e8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80025f6:	1dba      	adds	r2, r7, #6
 80025f8:	1df9      	adds	r1, r7, #7
 80025fa:	2364      	movs	r3, #100	; 0x64
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2301      	movs	r3, #1
 8002600:	4803      	ldr	r0, [pc, #12]	; (8002610 <SPI_RxByte+0x34>)
 8002602:	f005 fd5c 	bl	80080be <HAL_SPI_TransmitReceive>

	return data;
 8002606:	79bb      	ldrb	r3, [r7, #6]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000540 	.word	0x20000540

08002614 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800261c:	f7ff ffde 	bl	80025dc <SPI_RxByte>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <SD_ReadyWait+0x30>)
 8002638:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800263c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800263e:	f7ff ffcd 	bl	80025dc <SPI_RxByte>
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2bff      	cmp	r3, #255	; 0xff
 800264a:	d004      	beq.n	8002656 <SD_ReadyWait+0x26>
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <SD_ReadyWait+0x30>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f3      	bne.n	800263e <SD_ReadyWait+0xe>

	return res;
 8002656:	79fb      	ldrb	r3, [r7, #7]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20002e0a 	.word	0x20002e0a

08002664 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800266a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800266e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002670:	f7ff ff70 	bl	8002554 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	e005      	b.n	8002686 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800267a:	20ff      	movs	r0, #255	; 0xff
 800267c:	f7ff ff7a 	bl	8002574 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3301      	adds	r3, #1
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b09      	cmp	r3, #9
 800268a:	ddf6      	ble.n	800267a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800268c:	f7ff ff52 	bl	8002534 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002690:	2340      	movs	r3, #64	; 0x40
 8002692:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80026a4:	2395      	movs	r3, #149	; 0x95
 80026a6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80026a8:	463b      	mov	r3, r7
 80026aa:	2106      	movs	r1, #6
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff7b 	bl	80025a8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80026b2:	e002      	b.n	80026ba <SD_PowerOn+0x56>
	{
		cnt--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80026ba:	f7ff ff8f 	bl	80025dc <SPI_RxByte>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <SD_PowerOn+0x66>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f4      	bne.n	80026b4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80026ca:	f7ff ff43 	bl	8002554 <DESELECT>
	SPI_TxByte(0XFF);
 80026ce:	20ff      	movs	r0, #255	; 0xff
 80026d0:	f7ff ff50 	bl	8002574 <SPI_TxByte>

	PowerFlag = 1;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <SD_PowerOn+0x80>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000221 	.word	0x20000221

080026e8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <SD_PowerOff+0x14>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	20000221 	.word	0x20000221

08002700 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <SD_CheckPower+0x14>)
 8002706:	781b      	ldrb	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000221 	.word	0x20000221

08002718 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <SD_RxDataBlock+0x5c>)
 8002724:	22c8      	movs	r2, #200	; 0xc8
 8002726:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002728:	f7ff ff58 	bl	80025dc <SPI_RxByte>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d104      	bne.n	8002740 <SD_RxDataBlock+0x28>
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <SD_RxDataBlock+0x5c>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f3      	bne.n	8002728 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2bfe      	cmp	r3, #254	; 0xfe
 8002744:	d001      	beq.n	800274a <SD_RxDataBlock+0x32>
 8002746:	2300      	movs	r3, #0
 8002748:	e00f      	b.n	800276a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5f 	bl	8002614 <SPI_RxBytePtr>
	} while(len--);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	603a      	str	r2, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f4      	bne.n	800274a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002760:	f7ff ff3c 	bl	80025dc <SPI_RxByte>
	SPI_RxByte();
 8002764:	f7ff ff3a 	bl	80025dc <SPI_RxByte>

	return TRUE;
 8002768:	2301      	movs	r3, #1
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20002e0c 	.word	0x20002e0c

08002778 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002788:	f7ff ff52 	bl	8002630 <SD_ReadyWait>
 800278c:	4603      	mov	r3, r0
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d001      	beq.n	8002796 <SD_TxDataBlock+0x1e>
 8002792:	2300      	movs	r3, #0
 8002794:	e02f      	b.n	80027f6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff feeb 	bl	8002574 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	2bfd      	cmp	r3, #253	; 0xfd
 80027a2:	d020      	beq.n	80027e6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80027a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff fefd 	bl	80025a8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80027ae:	f7ff ff15 	bl	80025dc <SPI_RxByte>
		SPI_RxByte();
 80027b2:	f7ff ff13 	bl	80025dc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80027b6:	e00b      	b.n	80027d0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80027b8:	f7ff ff10 	bl	80025dc <SPI_RxByte>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d006      	beq.n	80027d8 <SD_TxDataBlock+0x60>
			i++;
 80027ca:	7bbb      	ldrb	r3, [r7, #14]
 80027cc:	3301      	adds	r3, #1
 80027ce:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d9f0      	bls.n	80027b8 <SD_TxDataBlock+0x40>
 80027d6:	e000      	b.n	80027da <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80027d8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80027da:	bf00      	nop
 80027dc:	f7ff fefe 	bl	80025dc <SPI_RxByte>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0fa      	beq.n	80027dc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d101      	bne.n	80027f4 <SD_TxDataBlock+0x7c>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	6039      	str	r1, [r7, #0]
 8002808:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800280a:	f7ff ff11 	bl	8002630 <SD_ReadyWait>
 800280e:	4603      	mov	r3, r0
 8002810:	2bff      	cmp	r3, #255	; 0xff
 8002812:	d001      	beq.n	8002818 <SD_SendCmd+0x1a>
 8002814:	23ff      	movs	r3, #255	; 0xff
 8002816:	e042      	b.n	800289e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff feaa 	bl	8002574 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	0e1b      	lsrs	r3, r3, #24
 8002824:	b2db      	uxtb	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fea4 	bl	8002574 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	0c1b      	lsrs	r3, r3, #16
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fe9e 	bl	8002574 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fe98 	bl	8002574 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fe93 	bl	8002574 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d102      	bne.n	800285a <SD_SendCmd+0x5c>
 8002854:	2395      	movs	r3, #149	; 0x95
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e007      	b.n	800286a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	2b48      	cmp	r3, #72	; 0x48
 800285e:	d102      	bne.n	8002866 <SD_SendCmd+0x68>
 8002860:	2387      	movs	r3, #135	; 0x87
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	e001      	b.n	800286a <SD_SendCmd+0x6c>
	else crc = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fe81 	bl	8002574 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b4c      	cmp	r3, #76	; 0x4c
 8002876:	d101      	bne.n	800287c <SD_SendCmd+0x7e>
 8002878:	f7ff feb0 	bl	80025dc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800287c:	230a      	movs	r3, #10
 800287e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002880:	f7ff feac 	bl	80025dc <SPI_RxByte>
 8002884:	4603      	mov	r3, r0
 8002886:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002888:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da05      	bge.n	800289c <SD_SendCmd+0x9e>
 8002890:	7bbb      	ldrb	r3, [r7, #14]
 8002892:	3b01      	subs	r3, #1
 8002894:	73bb      	strb	r3, [r7, #14]
 8002896:	7bbb      	ldrb	r3, [r7, #14]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f1      	bne.n	8002880 <SD_SendCmd+0x82>

	return res;
 800289c:	7b7b      	ldrb	r3, [r7, #13]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <SD_disk_initialize+0x14>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0d6      	b.n	8002a6a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80028bc:	4b6d      	ldr	r3, [pc, #436]	; (8002a74 <SD_disk_initialize+0x1cc>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <SD_disk_initialize+0x2a>
 80028ca:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <SD_disk_initialize+0x1cc>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	e0cb      	b.n	8002a6a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80028d2:	f7ff fec7 	bl	8002664 <SD_PowerOn>

	/* slave select */
	SELECT();
 80028d6:	f7ff fe2d 	bl	8002534 <SELECT>

	/* check disk type */
	type = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80028de:	2100      	movs	r1, #0
 80028e0:	2040      	movs	r0, #64	; 0x40
 80028e2:	f7ff ff8c 	bl	80027fe <SD_SendCmd>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 80a6 	bne.w	8002a3a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80028ee:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <SD_disk_initialize+0x1d0>)
 80028f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028f4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80028f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80028fa:	2048      	movs	r0, #72	; 0x48
 80028fc:	f7ff ff7f 	bl	80027fe <SD_SendCmd>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d158      	bne.n	80029b8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e00c      	b.n	8002926 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800290c:	7bfc      	ldrb	r4, [r7, #15]
 800290e:	f7ff fe65 	bl	80025dc <SPI_RxByte>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	4423      	add	r3, r4
 800291c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	3301      	adds	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d9ef      	bls.n	800290c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800292c:	7abb      	ldrb	r3, [r7, #10]
 800292e:	2b01      	cmp	r3, #1
 8002930:	f040 8083 	bne.w	8002a3a <SD_disk_initialize+0x192>
 8002934:	7afb      	ldrb	r3, [r7, #11]
 8002936:	2baa      	cmp	r3, #170	; 0xaa
 8002938:	d17f      	bne.n	8002a3a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800293a:	2100      	movs	r1, #0
 800293c:	2077      	movs	r0, #119	; 0x77
 800293e:	f7ff ff5e 	bl	80027fe <SD_SendCmd>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d807      	bhi.n	8002958 <SD_disk_initialize+0xb0>
 8002948:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800294c:	2069      	movs	r0, #105	; 0x69
 800294e:	f7ff ff56 	bl	80027fe <SD_SendCmd>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8002958:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <SD_disk_initialize+0x1d0>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1eb      	bne.n	800293a <SD_disk_initialize+0x92>
 8002962:	e000      	b.n	8002966 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002964:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002966:	4b44      	ldr	r3, [pc, #272]	; (8002a78 <SD_disk_initialize+0x1d0>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d064      	beq.n	8002a3a <SD_disk_initialize+0x192>
 8002970:	2100      	movs	r1, #0
 8002972:	207a      	movs	r0, #122	; 0x7a
 8002974:	f7ff ff43 	bl	80027fe <SD_SendCmd>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d15d      	bne.n	8002a3a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	e00c      	b.n	800299e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002984:	7bfc      	ldrb	r4, [r7, #15]
 8002986:	f7ff fe29 	bl	80025dc <SPI_RxByte>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4423      	add	r3, r4
 8002994:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	3301      	adds	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d9ef      	bls.n	8002984 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80029a4:	7a3b      	ldrb	r3, [r7, #8]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <SD_disk_initialize+0x10a>
 80029ae:	230c      	movs	r3, #12
 80029b0:	e000      	b.n	80029b4 <SD_disk_initialize+0x10c>
 80029b2:	2304      	movs	r3, #4
 80029b4:	73bb      	strb	r3, [r7, #14]
 80029b6:	e040      	b.n	8002a3a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80029b8:	2100      	movs	r1, #0
 80029ba:	2077      	movs	r0, #119	; 0x77
 80029bc:	f7ff ff1f 	bl	80027fe <SD_SendCmd>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d808      	bhi.n	80029d8 <SD_disk_initialize+0x130>
 80029c6:	2100      	movs	r1, #0
 80029c8:	2069      	movs	r0, #105	; 0x69
 80029ca:	f7ff ff18 	bl	80027fe <SD_SendCmd>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d801      	bhi.n	80029d8 <SD_disk_initialize+0x130>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e000      	b.n	80029da <SD_disk_initialize+0x132>
 80029d8:	2301      	movs	r3, #1
 80029da:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80029dc:	7bbb      	ldrb	r3, [r7, #14]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d10e      	bne.n	8002a00 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80029e2:	2100      	movs	r1, #0
 80029e4:	2077      	movs	r0, #119	; 0x77
 80029e6:	f7ff ff0a 	bl	80027fe <SD_SendCmd>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d80e      	bhi.n	8002a0e <SD_disk_initialize+0x166>
 80029f0:	2100      	movs	r1, #0
 80029f2:	2069      	movs	r0, #105	; 0x69
 80029f4:	f7ff ff03 	bl	80027fe <SD_SendCmd>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <SD_disk_initialize+0x166>
 80029fe:	e00d      	b.n	8002a1c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002a00:	2100      	movs	r1, #0
 8002a02:	2041      	movs	r0, #65	; 0x41
 8002a04:	f7ff fefb 	bl	80027fe <SD_SendCmd>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <SD_disk_initialize+0x1d0>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e1      	bne.n	80029dc <SD_disk_initialize+0x134>
 8002a18:	e000      	b.n	8002a1c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002a1a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <SD_disk_initialize+0x1d0>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <SD_disk_initialize+0x18e>
 8002a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a2a:	2050      	movs	r0, #80	; 0x50
 8002a2c:	f7ff fee7 	bl	80027fe <SD_SendCmd>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <SD_disk_initialize+0x192>
 8002a36:	2300      	movs	r3, #0
 8002a38:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <SD_disk_initialize+0x1d4>)
 8002a3c:	7bbb      	ldrb	r3, [r7, #14]
 8002a3e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002a40:	f7ff fd88 	bl	8002554 <DESELECT>
	SPI_RxByte();
 8002a44:	f7ff fdca 	bl	80025dc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002a48:	7bbb      	ldrb	r3, [r7, #14]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <SD_disk_initialize+0x1cc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <SD_disk_initialize+0x1cc>)
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e001      	b.n	8002a64 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002a60:	f7ff fe42 	bl	80026e8 <SD_PowerOff>
	}

	return Stat;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <SD_disk_initialize+0x1cc>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd90      	pop	{r4, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000
 8002a78:	20002e0c 	.word	0x20002e0c
 8002a7c:	20000220 	.word	0x20000220

08002a80 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <SD_disk_status+0x14>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e002      	b.n	8002a9a <SD_disk_status+0x1a>
	return Stat;
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SD_disk_status+0x28>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000

08002aac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <SD_disk_read+0x1c>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <SD_disk_read+0x20>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	e051      	b.n	8002b70 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <SD_disk_read+0xcc>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <SD_disk_read+0x32>
 8002ada:	2303      	movs	r3, #3
 8002adc:	e048      	b.n	8002b70 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002ade:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <SD_disk_read+0xd0>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <SD_disk_read+0x44>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	607b      	str	r3, [r7, #4]

	SELECT();
 8002af0:	f7ff fd20 	bl	8002534 <SELECT>

	if (count == 1)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d111      	bne.n	8002b1e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	2051      	movs	r0, #81	; 0x51
 8002afe:	f7ff fe7e 	bl	80027fe <SD_SendCmd>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d129      	bne.n	8002b5c <SD_disk_read+0xb0>
 8002b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b0c:	68b8      	ldr	r0, [r7, #8]
 8002b0e:	f7ff fe03 	bl	8002718 <SD_RxDataBlock>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d021      	beq.n	8002b5c <SD_disk_read+0xb0>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	e01e      	b.n	8002b5c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	2052      	movs	r0, #82	; 0x52
 8002b22:	f7ff fe6c 	bl	80027fe <SD_SendCmd>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d117      	bne.n	8002b5c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b30:	68b8      	ldr	r0, [r7, #8]
 8002b32:	f7ff fdf1 	bl	8002718 <SD_RxDataBlock>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <SD_disk_read+0xa6>
				buff += 512;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b42:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ed      	bne.n	8002b2c <SD_disk_read+0x80>
 8002b50:	e000      	b.n	8002b54 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002b52:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002b54:	2100      	movs	r1, #0
 8002b56:	204c      	movs	r0, #76	; 0x4c
 8002b58:	f7ff fe51 	bl	80027fe <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002b5c:	f7ff fcfa 	bl	8002554 <DESELECT>
	SPI_RxByte();
 8002b60:	f7ff fd3c 	bl	80025dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000220 	.word	0x20000220

08002b80 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <SD_disk_write+0x1c>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <SD_disk_write+0x20>
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	e06b      	b.n	8002c78 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002ba0:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <SD_disk_write+0x100>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <SD_disk_write+0x32>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e062      	b.n	8002c78 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002bb2:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <SD_disk_write+0x100>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <SD_disk_write+0x44>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e059      	b.n	8002c78 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <SD_disk_write+0x104>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <SD_disk_write+0x56>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	025b      	lsls	r3, r3, #9
 8002bd4:	607b      	str	r3, [r7, #4]

	SELECT();
 8002bd6:	f7ff fcad 	bl	8002534 <SELECT>

	if (count == 1)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d110      	bne.n	8002c02 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	2058      	movs	r0, #88	; 0x58
 8002be4:	f7ff fe0b 	bl	80027fe <SD_SendCmd>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d13a      	bne.n	8002c64 <SD_disk_write+0xe4>
 8002bee:	21fe      	movs	r1, #254	; 0xfe
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f7ff fdc1 	bl	8002778 <SD_TxDataBlock>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d033      	beq.n	8002c64 <SD_disk_write+0xe4>
			count = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	e030      	b.n	8002c64 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <SD_disk_write+0x104>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2077      	movs	r0, #119	; 0x77
 8002c12:	f7ff fdf4 	bl	80027fe <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002c16:	6839      	ldr	r1, [r7, #0]
 8002c18:	2057      	movs	r0, #87	; 0x57
 8002c1a:	f7ff fdf0 	bl	80027fe <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	2059      	movs	r0, #89	; 0x59
 8002c22:	f7ff fdec 	bl	80027fe <SD_SendCmd>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11b      	bne.n	8002c64 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002c2c:	21fc      	movs	r1, #252	; 0xfc
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	f7ff fda2 	bl	8002778 <SD_TxDataBlock>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <SD_disk_write+0xd0>
				buff += 512;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c40:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ee      	bne.n	8002c2c <SD_disk_write+0xac>
 8002c4e:	e000      	b.n	8002c52 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002c50:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002c52:	21fd      	movs	r1, #253	; 0xfd
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7ff fd8f 	bl	8002778 <SD_TxDataBlock>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <SD_disk_write+0xe4>
			{
				count = 1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002c64:	f7ff fc76 	bl	8002554 <DESELECT>
	SPI_RxByte();
 8002c68:	f7ff fcb8 	bl	80025dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000220 	.word	0x20000220

08002c88 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b08b      	sub	sp, #44	; 0x2c
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	603a      	str	r2, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
 8002c94:	460b      	mov	r3, r1
 8002c96:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <SD_disk_ioctl+0x1e>
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	e115      	b.n	8002ed2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002cac:	79bb      	ldrb	r3, [r7, #6]
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d124      	bne.n	8002cfc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d012      	beq.n	8002ce0 <SD_disk_ioctl+0x58>
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	dc1a      	bgt.n	8002cf4 <SD_disk_ioctl+0x6c>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <SD_disk_ioctl+0x40>
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d006      	beq.n	8002cd4 <SD_disk_ioctl+0x4c>
 8002cc6:	e015      	b.n	8002cf4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002cc8:	f7ff fd0e 	bl	80026e8 <SD_PowerOff>
			res = RES_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002cd2:	e0fc      	b.n	8002ece <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002cd4:	f7ff fcc6 	bl	8002664 <SD_PowerOn>
			res = RES_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002cde:	e0f6      	b.n	8002ece <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	1c5c      	adds	r4, r3, #1
 8002ce4:	f7ff fd0c 	bl	8002700 <SD_CheckPower>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002cec:	2300      	movs	r3, #0
 8002cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002cf2:	e0ec      	b.n	8002ece <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cfa:	e0e8      	b.n	8002ece <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002cfc:	4b77      	ldr	r3, [pc, #476]	; (8002edc <SD_disk_ioctl+0x254>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <SD_disk_ioctl+0x86>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0e1      	b.n	8002ed2 <SD_disk_ioctl+0x24a>

		SELECT();
 8002d0e:	f7ff fc11 	bl	8002534 <SELECT>

		switch (ctrl)
 8002d12:	79bb      	ldrb	r3, [r7, #6]
 8002d14:	2b0d      	cmp	r3, #13
 8002d16:	f200 80cb 	bhi.w	8002eb0 <SD_disk_ioctl+0x228>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <SD_disk_ioctl+0x98>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002e1b 	.word	0x08002e1b
 8002d24:	08002d59 	.word	0x08002d59
 8002d28:	08002e0b 	.word	0x08002e0b
 8002d2c:	08002eb1 	.word	0x08002eb1
 8002d30:	08002eb1 	.word	0x08002eb1
 8002d34:	08002eb1 	.word	0x08002eb1
 8002d38:	08002eb1 	.word	0x08002eb1
 8002d3c:	08002eb1 	.word	0x08002eb1
 8002d40:	08002eb1 	.word	0x08002eb1
 8002d44:	08002eb1 	.word	0x08002eb1
 8002d48:	08002eb1 	.word	0x08002eb1
 8002d4c:	08002e2d 	.word	0x08002e2d
 8002d50:	08002e51 	.word	0x08002e51
 8002d54:	08002e75 	.word	0x08002e75
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2049      	movs	r0, #73	; 0x49
 8002d5c:	f7ff fd4f 	bl	80027fe <SD_SendCmd>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 80a8 	bne.w	8002eb8 <SD_disk_ioctl+0x230>
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2110      	movs	r1, #16
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fcd2 	bl	8002718 <SD_RxDataBlock>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 809e 	beq.w	8002eb8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002d7c:	7b3b      	ldrb	r3, [r7, #12]
 8002d7e:	099b      	lsrs	r3, r3, #6
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10e      	bne.n	8002da4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002d86:	7d7b      	ldrb	r3, [r7, #21]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	7d3b      	ldrb	r3, [r7, #20]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002d9a:	8bfb      	ldrh	r3, [r7, #30]
 8002d9c:	029a      	lsls	r2, r3, #10
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e02e      	b.n	8002e02 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002da4:	7c7b      	ldrb	r3, [r7, #17]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	7dbb      	ldrb	r3, [r7, #22]
 8002dae:	09db      	lsrs	r3, r3, #7
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	7d7b      	ldrb	r3, [r7, #21]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0306 	and.w	r3, r3, #6
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002dcc:	7d3b      	ldrb	r3, [r7, #20]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	7cbb      	ldrb	r3, [r7, #18]
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002df4:	8bfa      	ldrh	r2, [r7, #30]
 8002df6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dfa:	3b09      	subs	r3, #9
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002e08:	e056      	b.n	8002eb8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e10:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002e18:	e055      	b.n	8002ec6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002e1a:	f7ff fc09 	bl	8002630 <SD_ReadyWait>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2bff      	cmp	r3, #255	; 0xff
 8002e22:	d14b      	bne.n	8002ebc <SD_disk_ioctl+0x234>
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002e2a:	e047      	b.n	8002ebc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2049      	movs	r0, #73	; 0x49
 8002e30:	f7ff fce5 	bl	80027fe <SD_SendCmd>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d142      	bne.n	8002ec0 <SD_disk_ioctl+0x238>
 8002e3a:	2110      	movs	r1, #16
 8002e3c:	6a38      	ldr	r0, [r7, #32]
 8002e3e:	f7ff fc6b 	bl	8002718 <SD_RxDataBlock>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03b      	beq.n	8002ec0 <SD_disk_ioctl+0x238>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002e4e:	e037      	b.n	8002ec0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002e50:	2100      	movs	r1, #0
 8002e52:	204a      	movs	r0, #74	; 0x4a
 8002e54:	f7ff fcd3 	bl	80027fe <SD_SendCmd>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d132      	bne.n	8002ec4 <SD_disk_ioctl+0x23c>
 8002e5e:	2110      	movs	r1, #16
 8002e60:	6a38      	ldr	r0, [r7, #32]
 8002e62:	f7ff fc59 	bl	8002718 <SD_RxDataBlock>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d02b      	beq.n	8002ec4 <SD_disk_ioctl+0x23c>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002e72:	e027      	b.n	8002ec4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002e74:	2100      	movs	r1, #0
 8002e76:	207a      	movs	r0, #122	; 0x7a
 8002e78:	f7ff fcc1 	bl	80027fe <SD_SendCmd>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d116      	bne.n	8002eb0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e88:	e00b      	b.n	8002ea2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002e8a:	6a3c      	ldr	r4, [r7, #32]
 8002e8c:	1c63      	adds	r3, r4, #1
 8002e8e:	623b      	str	r3, [r7, #32]
 8002e90:	f7ff fba4 	bl	80025dc <SPI_RxByte>
 8002e94:	4603      	mov	r3, r0
 8002e96:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002e98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ea2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d9ef      	bls.n	8002e8a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eb6:	e006      	b.n	8002ec6 <SD_disk_ioctl+0x23e>
			break;
 8002eb8:	bf00      	nop
 8002eba:	e004      	b.n	8002ec6 <SD_disk_ioctl+0x23e>
			break;
 8002ebc:	bf00      	nop
 8002ebe:	e002      	b.n	8002ec6 <SD_disk_ioctl+0x23e>
			break;
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <SD_disk_ioctl+0x23e>
			break;
 8002ec4:	bf00      	nop
		}

		DESELECT();
 8002ec6:	f7ff fb45 	bl	8002554 <DESELECT>
		SPI_RxByte();
 8002eca:	f7ff fb87 	bl	80025dc <SPI_RxByte>
	}

	return res;
 8002ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	372c      	adds	r7, #44	; 0x2c
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000000 	.word	0x20000000

08002ee0 <bufsize>:
int32_t packCurrent;


/*******************************************************************************/
int bufsize (char *buf)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	int i=0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8002eec:	e002      	b.n	8002ef4 <bufsize+0x14>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f6      	bne.n	8002eee <bufsize+0xe>
	return i;
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <clear_buffer>:

void clear_buffer (void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	e007      	b.n	8002f2c <clear_buffer+0x1c>
 8002f1c:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <clear_buffer+0x34>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	dbf3      	blt.n	8002f1c <clear_buffer+0xc>
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20001674 	.word	0x20001674

08002f48 <send_uart>:

void send_uart (char *string)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7fd f93d 	bl	80001d0 <strlen>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4803      	ldr	r0, [pc, #12]	; (8002f74 <send_uart+0x2c>)
 8002f66:	f005 fc6f 	bl	8008848 <HAL_UART_Transmit>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20001c28 	.word	0x20001c28

08002f78 <write_to_csvfile>:

void write_to_csvfile (void)
{
 8002f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f7c:	b0d9      	sub	sp, #356	; 0x164
 8002f7e:	af30      	add	r7, sp, #192	; 0xc0
		  //dummy_cell_votlages += 1;
		  //dummy_pack_voltage += 11;
		  //dummy_pack_current += 0.1;
		  //dummy_temperature += 1.0;

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8002f80:	2203      	movs	r2, #3
 8002f82:	499d      	ldr	r1, [pc, #628]	; (80031f8 <write_to_csvfile+0x280>)
 8002f84:	489d      	ldr	r0, [pc, #628]	; (80031fc <write_to_csvfile+0x284>)
 8002f86:	f009 fc51 	bl	800c82c <f_open>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b9c      	ldr	r3, [pc, #624]	; (8003200 <write_to_csvfile+0x288>)
 8002f90:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 8002f92:	4b9a      	ldr	r3, [pc, #616]	; (80031fc <write_to_csvfile+0x284>)
 8002f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f98:	330c      	adds	r3, #12
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4897      	ldr	r0, [pc, #604]	; (80031fc <write_to_csvfile+0x284>)
 8002fa0:	f00a fd10 	bl	800d9c4 <f_lseek>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b95      	ldr	r3, [pc, #596]	; (8003200 <write_to_csvfile+0x288>)
 8002faa:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002fac:	f001 fe2c 	bl	8004c08 <HAL_GetTick>
 8002fb0:	4603      	mov	r3, r0
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd faa6 	bl	8000504 <__aeabi_ui2d>
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	4b91      	ldr	r3, [pc, #580]	; (8003204 <write_to_csvfile+0x28c>)
 8002fbe:	f7fd fc45 	bl	800084c <__aeabi_ddiv>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002fca:	4b8f      	ldr	r3, [pc, #572]	; (8003208 <write_to_csvfile+0x290>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd faba 	bl	8000548 <__aeabi_f2d>
 8002fd4:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002fd8:	4b8b      	ldr	r3, [pc, #556]	; (8003208 <write_to_csvfile+0x290>)
 8002fda:	685b      	ldr	r3, [r3, #4]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fab3 	bl	8000548 <__aeabi_f2d>
 8002fe2:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <write_to_csvfile+0x290>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd faac 	bl	8000548 <__aeabi_f2d>
 8002ff0:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002ff4:	4b84      	ldr	r3, [pc, #528]	; (8003208 <write_to_csvfile+0x290>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd faa5 	bl	8000548 <__aeabi_f2d>
 8002ffe:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003002:	4b81      	ldr	r3, [pc, #516]	; (8003208 <write_to_csvfile+0x290>)
 8003004:	691b      	ldr	r3, [r3, #16]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa9e 	bl	8000548 <__aeabi_f2d>
 800300c:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003010:	4b7d      	ldr	r3, [pc, #500]	; (8003208 <write_to_csvfile+0x290>)
 8003012:	695b      	ldr	r3, [r3, #20]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fa97 	bl	8000548 <__aeabi_f2d>
 800301a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800301e:	4b7a      	ldr	r3, [pc, #488]	; (8003208 <write_to_csvfile+0x290>)
 8003020:	699b      	ldr	r3, [r3, #24]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fa90 	bl	8000548 <__aeabi_f2d>
 8003028:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800302c:	4b76      	ldr	r3, [pc, #472]	; (8003208 <write_to_csvfile+0x290>)
 800302e:	69db      	ldr	r3, [r3, #28]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa89 	bl	8000548 <__aeabi_f2d>
 8003036:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800303a:	4b73      	ldr	r3, [pc, #460]	; (8003208 <write_to_csvfile+0x290>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa82 	bl	8000548 <__aeabi_f2d>
 8003044:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <write_to_csvfile+0x290>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa7b 	bl	8000548 <__aeabi_f2d>
 8003052:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003056:	4b6c      	ldr	r3, [pc, #432]	; (8003208 <write_to_csvfile+0x290>)
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa74 	bl	8000548 <__aeabi_f2d>
 8003060:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <write_to_csvfile+0x290>)
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa6d 	bl	8000548 <__aeabi_f2d>
 800306e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003072:	4b65      	ldr	r3, [pc, #404]	; (8003208 <write_to_csvfile+0x290>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa66 	bl	8000548 <__aeabi_f2d>
 800307c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, packCurrent ,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003080:	4b61      	ldr	r3, [pc, #388]	; (8003208 <write_to_csvfile+0x290>)
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fa5f 	bl	8000548 <__aeabi_f2d>
 800308a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, packCurrent ,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 800308e:	4b5e      	ldr	r3, [pc, #376]	; (8003208 <write_to_csvfile+0x290>)
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fa58 	bl	8000548 <__aeabi_f2d>
 8003098:	e9c7 0108 	strd	r0, r1, [r7, #32]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, packCurrent ,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 800309c:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <write_to_csvfile+0x290>)
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fa51 	bl	8000548 <__aeabi_f2d>
 80030a6:	e9c7 0106 	strd	r0, r1, [r7, #24]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, packCurrent ,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 80030aa:	4b57      	ldr	r3, [pc, #348]	; (8003208 <write_to_csvfile+0x290>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa4a 	bl	8000548 <__aeabi_f2d>
 80030b4:	e9c7 0104 	strd	r0, r1, [r7, #16]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, packCurrent ,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <write_to_csvfile+0x290>)
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fa43 	bl	8000548 <__aeabi_f2d>
 80030c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80030c6:	4b51      	ldr	r3, [pc, #324]	; (800320c <write_to_csvfile+0x294>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fa3c 	bl	8000548 <__aeabi_f2d>
 80030d0:	e9c7 0100 	strd	r0, r1, [r7]
 80030d4:	4b4e      	ldr	r3, [pc, #312]	; (8003210 <write_to_csvfile+0x298>)
 80030d6:	681e      	ldr	r6, [r3, #0]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, packCurrent ,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 80030d8:	4b4e      	ldr	r3, [pc, #312]	; (8003214 <write_to_csvfile+0x29c>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fa33 	bl	8000548 <__aeabi_f2d>
 80030e2:	4682      	mov	sl, r0
 80030e4:	468b      	mov	fp, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, packCurrent ,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 80030e6:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <write_to_csvfile+0x29c>)
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%ld,%.3f,%.3f,%.3f,%.3f \r\n",
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fa2c 	bl	8000548 <__aeabi_f2d>
 80030f0:	4680      	mov	r8, r0
 80030f2:	4689      	mov	r9, r1
 80030f4:	4b48      	ldr	r3, [pc, #288]	; (8003218 <write_to_csvfile+0x2a0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fa25 	bl	8000548 <__aeabi_f2d>
 80030fe:	4604      	mov	r4, r0
 8003100:	460d      	mov	r5, r1
 8003102:	4b46      	ldr	r3, [pc, #280]	; (800321c <write_to_csvfile+0x2a4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fa1e 	bl	8000548 <__aeabi_f2d>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
 8003114:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8003118:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 800311c:	e9cd ab28 	strd	sl, fp, [sp, #160]	; 0xa0
 8003120:	9626      	str	r6, [sp, #152]	; 0x98
 8003122:	ed97 7b00 	vldr	d7, [r7]
 8003126:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800312a:	ed97 7b02 	vldr	d7, [r7, #8]
 800312e:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8003132:	ed97 7b04 	vldr	d7, [r7, #16]
 8003136:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800313a:	ed97 7b06 	vldr	d7, [r7, #24]
 800313e:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8003142:	ed97 7b08 	vldr	d7, [r7, #32]
 8003146:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800314a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800314e:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8003152:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003156:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800315a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800315e:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003162:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003166:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800316a:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800316e:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003172:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8003176:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800317a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800317e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003182:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8003186:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800318a:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800318e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003192:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8003196:	ed8d 7b08 	vstr	d7, [sp, #32]
 800319a:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800319e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80031a2:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80031a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80031aa:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80031ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80031b2:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 80031b6:	ed8d 7b00 	vstr	d7, [sp]
 80031ba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80031be:	4918      	ldr	r1, [pc, #96]	; (8003220 <write_to_csvfile+0x2a8>)
 80031c0:	4818      	ldr	r0, [pc, #96]	; (8003224 <write_to_csvfile+0x2ac>)
 80031c2:	f00c f911 	bl	800f3e8 <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80031c6:	4817      	ldr	r0, [pc, #92]	; (8003224 <write_to_csvfile+0x2ac>)
 80031c8:	f7ff fe8a 	bl	8002ee0 <bufsize>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <write_to_csvfile+0x2b0>)
 80031d2:	4914      	ldr	r1, [pc, #80]	; (8003224 <write_to_csvfile+0x2ac>)
 80031d4:	4809      	ldr	r0, [pc, #36]	; (80031fc <write_to_csvfile+0x284>)
 80031d6:	f00a f879 	bl	800d2cc <f_write>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <write_to_csvfile+0x288>)
 80031e0:	701a      	strb	r2, [r3, #0]
		  //send_uart(buffer);
		  f_close (&fil);
 80031e2:	4806      	ldr	r0, [pc, #24]	; (80031fc <write_to_csvfile+0x284>)
 80031e4:	f00a fbc3 	bl	800d96e <f_close>

		  clear_buffer();
 80031e8:	f7ff fe92 	bl	8002f10 <clear_buffer>
}
 80031ec:	bf00      	nop
 80031ee:	37a4      	adds	r7, #164	; 0xa4
 80031f0:	46bd      	mov	sp, r7
 80031f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f6:	bf00      	nop
 80031f8:	080116b0 	.word	0x080116b0
 80031fc:	20001dd8 	.word	0x20001dd8
 8003200:	20001bb8 	.word	0x20001bb8
 8003204:	408f4000 	.word	0x408f4000
 8003208:	200004f8 	.word	0x200004f8
 800320c:	20002e04 	.word	0x20002e04
 8003210:	20001670 	.word	0x20001670
 8003214:	20001cb8 	.word	0x20001cb8
 8003218:	200004f0 	.word	0x200004f0
 800321c:	20001624 	.word	0x20001624
 8003220:	080116bc 	.word	0x080116bc
 8003224:	20001674 	.word	0x20001674
 8003228:	20001b84 	.word	0x20001b84

0800322c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003238:	2100      	movs	r1, #0
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f001 fff8 	bl	8005230 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2 )
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d102      	bne.n	800324e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		CAN_data_checkFlag = 1;
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
	}
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20001c20 	.word	0x20001c20
 800325c:	20001dac 	.word	0x20001dac
 8003260:	20000228 	.word	0x20000228

08003264 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, uart_rx_data, 4);
 800326c:	2204      	movs	r2, #4
 800326e:	4905      	ldr	r1, [pc, #20]	; (8003284 <HAL_UART_RxCpltCallback+0x20>)
 8003270:	4805      	ldr	r0, [pc, #20]	; (8003288 <HAL_UART_RxCpltCallback+0x24>)
 8003272:	f005 fb7d 	bl	8008970 <HAL_UART_Receive_IT>
  uart_rx_flag = 1;
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_UART_RxCpltCallback+0x28>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]

}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20001dcc 	.word	0x20001dcc
 8003288:	20001c28 	.word	0x20001c28
 800328c:	20000224 	.word	0x20000224

08003290 <set_time>:



void set_time(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 80032a4:	2300      	movs	r3, #0
 80032a6:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x53;
 80032ac:	2353      	movs	r3, #83	; 0x53
 80032ae:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2201      	movs	r2, #1
 80032c0:	4619      	mov	r1, r3
 80032c2:	4812      	ldr	r0, [pc, #72]	; (800330c <set_time+0x7c>)
 80032c4:	f004 fa0f 	bl	80076e6 <HAL_RTC_SetTime>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <set_time+0x42>
	  {
	    Error_Handler();
 80032ce:	f001 f94b 	bl	8004568 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80032d2:	2303      	movs	r3, #3
 80032d4:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JUNE;
 80032d6:	2306      	movs	r3, #6
 80032d8:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x22;
 80032da:	2322      	movs	r3, #34	; 0x22
 80032dc:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x22;
 80032de:	2322      	movs	r3, #34	; 0x22
 80032e0:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80032e2:	463b      	mov	r3, r7
 80032e4:	2201      	movs	r2, #1
 80032e6:	4619      	mov	r1, r3
 80032e8:	4808      	ldr	r0, [pc, #32]	; (800330c <set_time+0x7c>)
 80032ea:	f004 fb17 	bl	800791c <HAL_RTC_SetDate>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <set_time+0x68>
	  {
	    Error_Handler();
 80032f4:	f001 f938 	bl	8004568 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 80032f8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80032fc:	2101      	movs	r1, #1
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <set_time+0x7c>)
 8003300:	f004 fc92 	bl	8007c28 <HAL_RTCEx_BKUPWrite>

	  /* USER CODE END RTC_Init 2 */
}
 8003304:	bf00      	nop
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20001a74 	.word	0x20001a74

08003310 <get_time>:


void get_time(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003316:	463b      	mov	r3, r7
 8003318:	2200      	movs	r2, #0
 800331a:	4619      	mov	r1, r3
 800331c:	4817      	ldr	r0, [pc, #92]	; (800337c <get_time+0x6c>)
 800331e:	f004 fa9f 	bl	8007860 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	2200      	movs	r2, #0
 8003328:	4619      	mov	r1, r3
 800332a:	4814      	ldr	r0, [pc, #80]	; (800337c <get_time+0x6c>)
 800332c:	f004 fb9d 	bl	8007a6a <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf(buffer,"Time is: %02d:%02d:%02d\r\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8003330:	783b      	ldrb	r3, [r7, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	4619      	mov	r1, r3
 8003338:	78bb      	ldrb	r3, [r7, #2]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	460b      	mov	r3, r1
 800333e:	4910      	ldr	r1, [pc, #64]	; (8003380 <get_time+0x70>)
 8003340:	4810      	ldr	r0, [pc, #64]	; (8003384 <get_time+0x74>)
 8003342:	f00c f851 	bl	800f3e8 <siprintf>
 send_uart(buffer);
 8003346:	480f      	ldr	r0, [pc, #60]	; (8003384 <get_time+0x74>)
 8003348:	f7ff fdfe 	bl	8002f48 <send_uart>
 clear_buffer();
 800334c:	f7ff fde0 	bl	8002f10 <clear_buffer>
/* Display date Format: dd-mm-yy */
 sprintf(buffer,"Date is : %02d-%02d-%2d\r\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8003350:	7dbb      	ldrb	r3, [r7, #22]
 8003352:	461a      	mov	r2, r3
 8003354:	7d7b      	ldrb	r3, [r7, #21]
 8003356:	4619      	mov	r1, r3
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	460b      	mov	r3, r1
 8003362:	4909      	ldr	r1, [pc, #36]	; (8003388 <get_time+0x78>)
 8003364:	4807      	ldr	r0, [pc, #28]	; (8003384 <get_time+0x74>)
 8003366:	f00c f83f 	bl	800f3e8 <siprintf>
 send_uart(buffer);
 800336a:	4806      	ldr	r0, [pc, #24]	; (8003384 <get_time+0x74>)
 800336c:	f7ff fdec 	bl	8002f48 <send_uart>
 clear_buffer();
 8003370:	f7ff fdce 	bl	8002f10 <clear_buffer>
}
 8003374:	bf00      	nop
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20001a74 	.word	0x20001a74
 8003380:	0801173c 	.word	0x0801173c
 8003384:	20001674 	.word	0x20001674
 8003388:	08011758 	.word	0x08011758

0800338c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //interrupt callback function for Charger detect
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI5 (PB5 Pin)
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	2b20      	cmp	r3, #32
 800339a:	d119      	bne.n	80033d0 <HAL_GPIO_EXTI_Callback+0x44>
    {
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 800339c:	2120      	movs	r1, #32
 800339e:	480e      	ldr	r0, [pc, #56]	; (80033d8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80033a0:	f002 fdb0 	bl	8005f04 <HAL_GPIO_ReadPin>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_GPIO_EXTI_Callback+0x32>
    	{
    		sprintf(buffer, "Charger detected\r\n");
 80033aa:	490c      	ldr	r1, [pc, #48]	; (80033dc <HAL_GPIO_EXTI_Callback+0x50>)
 80033ac:	480c      	ldr	r0, [pc, #48]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80033ae:	f00c f81b 	bl	800f3e8 <siprintf>
    		send_uart(buffer);
 80033b2:	480b      	ldr	r0, [pc, #44]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80033b4:	f7ff fdc8 	bl	8002f48 <send_uart>
    		clear_buffer();
 80033b8:	f7ff fdaa 	bl	8002f10 <clear_buffer>
    		sprintf(buffer, "Charger has been disconnected\r\n");
    		send_uart(buffer);
    		clear_buffer();
    	}
    }
}
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_EXTI_Callback+0x44>
    		sprintf(buffer, "Charger has been disconnected\r\n");
 80033be:	4909      	ldr	r1, [pc, #36]	; (80033e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80033c0:	4807      	ldr	r0, [pc, #28]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80033c2:	f00c f811 	bl	800f3e8 <siprintf>
    		send_uart(buffer);
 80033c6:	4806      	ldr	r0, [pc, #24]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80033c8:	f7ff fdbe 	bl	8002f48 <send_uart>
    		clear_buffer();
 80033cc:	f7ff fda0 	bl	8002f10 <clear_buffer>
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	48000400 	.word	0x48000400
 80033dc:	08011774 	.word	0x08011774
 80033e0:	20001674 	.word	0x20001674
 80033e4:	08011788 	.word	0x08011788

080033e8 <sd_init>:
		HAL_Delay(0.01);
	}
}

void sd_init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
	  //mount SD card and check SD card mounting status
	  fresult = f_mount(&fs, "/", 1);
 80033ec:	2201      	movs	r2, #1
 80033ee:	49b4      	ldr	r1, [pc, #720]	; (80036c0 <sd_init+0x2d8>)
 80033f0:	48b4      	ldr	r0, [pc, #720]	; (80036c4 <sd_init+0x2dc>)
 80033f2:	f009 f9d1 	bl	800c798 <f_mount>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	4bb3      	ldr	r3, [pc, #716]	; (80036c8 <sd_init+0x2e0>)
 80033fc:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK)
 80033fe:	4bb2      	ldr	r3, [pc, #712]	; (80036c8 <sd_init+0x2e0>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <sd_init+0x26>
	  	{
	  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8003406:	48b1      	ldr	r0, [pc, #708]	; (80036cc <sd_init+0x2e4>)
 8003408:	f7ff fd9e 	bl	8002f48 <send_uart>
 800340c:	e002      	b.n	8003414 <sd_init+0x2c>

	  	}
	  	else
	  	{
	  		send_uart("SD CARD mounted successfully...\r\n");
 800340e:	48b0      	ldr	r0, [pc, #704]	; (80036d0 <sd_init+0x2e8>)
 8003410:	f7ff fd9a 	bl	8002f48 <send_uart>
	  	}

	  	/*************** Card capacity details ********************/

	  	/* Check free space */
	  	f_getfree("", &fre_clust, &pfs);
 8003414:	4aaf      	ldr	r2, [pc, #700]	; (80036d4 <sd_init+0x2ec>)
 8003416:	49b0      	ldr	r1, [pc, #704]	; (80036d8 <sd_init+0x2f0>)
 8003418:	48b0      	ldr	r0, [pc, #704]	; (80036dc <sd_init+0x2f4>)
 800341a:	f00a fe07 	bl	800e02c <f_getfree>

	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800341e:	4bad      	ldr	r3, [pc, #692]	; (80036d4 <sd_init+0x2ec>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003426:	3314      	adds	r3, #20
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1e9a      	subs	r2, r3, #2
 800342c:	4ba9      	ldr	r3, [pc, #676]	; (80036d4 <sd_init+0x2ec>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003434:	3302      	adds	r3, #2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	fb03 f302 	mul.w	r3, r3, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f861 	bl	8000504 <__aeabi_ui2d>
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	4ba6      	ldr	r3, [pc, #664]	; (80036e0 <sd_init+0x2f8>)
 8003448:	f7fd f8d6 	bl	80005f8 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	f7fd fba8 	bl	8000ba8 <__aeabi_d2uiz>
 8003458:	4603      	mov	r3, r0
 800345a:	4aa2      	ldr	r2, [pc, #648]	; (80036e4 <sd_init+0x2fc>)
 800345c:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 800345e:	4ba1      	ldr	r3, [pc, #644]	; (80036e4 <sd_init+0x2fc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	49a0      	ldr	r1, [pc, #640]	; (80036e8 <sd_init+0x300>)
 8003466:	48a1      	ldr	r0, [pc, #644]	; (80036ec <sd_init+0x304>)
 8003468:	f00b ffbe 	bl	800f3e8 <siprintf>
	  	send_uart(buffer);
 800346c:	489f      	ldr	r0, [pc, #636]	; (80036ec <sd_init+0x304>)
 800346e:	f7ff fd6b 	bl	8002f48 <send_uart>
	  	clear_buffer();
 8003472:	f7ff fd4d 	bl	8002f10 <clear_buffer>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8003476:	4b97      	ldr	r3, [pc, #604]	; (80036d4 <sd_init+0x2ec>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347e:	3302      	adds	r3, #2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	4b94      	ldr	r3, [pc, #592]	; (80036d8 <sd_init+0x2f0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fb03 f302 	mul.w	r3, r3, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd f839 	bl	8000504 <__aeabi_ui2d>
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	4b92      	ldr	r3, [pc, #584]	; (80036e0 <sd_init+0x2f8>)
 8003498:	f7fd f8ae 	bl	80005f8 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f7fd fb80 	bl	8000ba8 <__aeabi_d2uiz>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4a91      	ldr	r2, [pc, #580]	; (80036f0 <sd_init+0x308>)
 80034ac:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 80034ae:	4b90      	ldr	r3, [pc, #576]	; (80036f0 <sd_init+0x308>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	498f      	ldr	r1, [pc, #572]	; (80036f4 <sd_init+0x30c>)
 80034b6:	488d      	ldr	r0, [pc, #564]	; (80036ec <sd_init+0x304>)
 80034b8:	f00b ff96 	bl	800f3e8 <siprintf>
	  	send_uart(buffer);
 80034bc:	488b      	ldr	r0, [pc, #556]	; (80036ec <sd_init+0x304>)
 80034be:	f7ff fd43 	bl	8002f48 <send_uart>
	  	clear_buffer();
 80034c2:	f7ff fd25 	bl	8002f10 <clear_buffer>


	  	/************* The following operation is using PUTS and GETS *********************/

	  	/* Open file to write/ create a file if it doesn't exist */
	    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80034c6:	2213      	movs	r2, #19
 80034c8:	498b      	ldr	r1, [pc, #556]	; (80036f8 <sd_init+0x310>)
 80034ca:	488c      	ldr	r0, [pc, #560]	; (80036fc <sd_init+0x314>)
 80034cc:	f009 f9ae 	bl	800c82c <f_open>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <sd_init+0x2e0>)
 80034d6:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 80034d8:	4988      	ldr	r1, [pc, #544]	; (80036fc <sd_init+0x314>)
 80034da:	4889      	ldr	r0, [pc, #548]	; (8003700 <sd_init+0x318>)
 80034dc:	f00a ff02 	bl	800e2e4 <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 80034e0:	4886      	ldr	r0, [pc, #536]	; (80036fc <sd_init+0x314>)
 80034e2:	f00a fa44 	bl	800d96e <f_close>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b77      	ldr	r3, [pc, #476]	; (80036c8 <sd_init+0x2e0>)
 80034ec:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 80034ee:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <sd_init+0x2e0>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <sd_init+0x114>
	  	{
	  		send_uart ("File1.txt created and the data is written \r\n");
 80034f6:	4883      	ldr	r0, [pc, #524]	; (8003704 <sd_init+0x31c>)
 80034f8:	f7ff fd26 	bl	8002f48 <send_uart>
	  	}

	  	/* Open file to read */
	  	fresult = f_open(&fil, "file1.txt", FA_READ);
 80034fc:	2201      	movs	r2, #1
 80034fe:	497e      	ldr	r1, [pc, #504]	; (80036f8 <sd_init+0x310>)
 8003500:	487e      	ldr	r0, [pc, #504]	; (80036fc <sd_init+0x314>)
 8003502:	f009 f993 	bl	800c82c <f_open>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	4b6f      	ldr	r3, [pc, #444]	; (80036c8 <sd_init+0x2e0>)
 800350c:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	f_gets(buffer, f_size(&fil), &fil);
 800350e:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <sd_init+0x314>)
 8003510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003514:	330c      	adds	r3, #12
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a78      	ldr	r2, [pc, #480]	; (80036fc <sd_init+0x314>)
 800351a:	4619      	mov	r1, r3
 800351c:	4873      	ldr	r0, [pc, #460]	; (80036ec <sd_init+0x304>)
 800351e:	f00a fe67 	bl	800e1f0 <f_gets>

	  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 8003522:	4879      	ldr	r0, [pc, #484]	; (8003708 <sd_init+0x320>)
 8003524:	f7ff fd10 	bl	8002f48 <send_uart>
	  	send_uart(buffer);
 8003528:	4870      	ldr	r0, [pc, #448]	; (80036ec <sd_init+0x304>)
 800352a:	f7ff fd0d 	bl	8002f48 <send_uart>
	  	send_uart("\r\n");
 800352e:	4877      	ldr	r0, [pc, #476]	; (800370c <sd_init+0x324>)
 8003530:	f7ff fd0a 	bl	8002f48 <send_uart>
	  	/* Close file */
	  	f_close(&fil);
 8003534:	4871      	ldr	r0, [pc, #452]	; (80036fc <sd_init+0x314>)
 8003536:	f00a fa1a 	bl	800d96e <f_close>
	  	clear_buffer();
 800353a:	f7ff fce9 	bl	8002f10 <clear_buffer>
	  	/**************** The following operation is using f_write and f_read **************************/

	  	/* Create second file with read write access and open it */
	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800353e:	220a      	movs	r2, #10
 8003540:	4973      	ldr	r1, [pc, #460]	; (8003710 <sd_init+0x328>)
 8003542:	486e      	ldr	r0, [pc, #440]	; (80036fc <sd_init+0x314>)
 8003544:	f009 f972 	bl	800c82c <f_open>
 8003548:	4603      	mov	r3, r0
 800354a:	461a      	mov	r2, r3
 800354c:	4b5e      	ldr	r3, [pc, #376]	; (80036c8 <sd_init+0x2e0>)
 800354e:	701a      	strb	r2, [r3, #0]

	  	/* Writing text */
	  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 8003550:	4a66      	ldr	r2, [pc, #408]	; (80036ec <sd_init+0x304>)
 8003552:	4b70      	ldr	r3, [pc, #448]	; (8003714 <sd_init+0x32c>)
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	2351      	movs	r3, #81	; 0x51
 800355a:	461a      	mov	r2, r3
 800355c:	f00b fa0a 	bl	800e974 <memcpy>

	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8003560:	4862      	ldr	r0, [pc, #392]	; (80036ec <sd_init+0x304>)
 8003562:	f7ff fcbd 	bl	8002ee0 <bufsize>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	4b6b      	ldr	r3, [pc, #428]	; (8003718 <sd_init+0x330>)
 800356c:	495f      	ldr	r1, [pc, #380]	; (80036ec <sd_init+0x304>)
 800356e:	4863      	ldr	r0, [pc, #396]	; (80036fc <sd_init+0x314>)
 8003570:	f009 feac 	bl	800d2cc <f_write>
 8003574:	4603      	mov	r3, r0
 8003576:	461a      	mov	r2, r3
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <sd_init+0x2e0>)
 800357a:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 800357c:	4b52      	ldr	r3, [pc, #328]	; (80036c8 <sd_init+0x2e0>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <sd_init+0x1a2>
	  	{
	  		send_uart ("File2.txt created and the data is written \r\n");
 8003584:	4865      	ldr	r0, [pc, #404]	; (800371c <sd_init+0x334>)
 8003586:	f7ff fcdf 	bl	8002f48 <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 800358a:	485c      	ldr	r0, [pc, #368]	; (80036fc <sd_init+0x314>)
 800358c:	f00a f9ef 	bl	800d96e <f_close>
	  	// clearing buffer to show that result obtained is from the file
	  	clear_buffer();
 8003590:	f7ff fcbe 	bl	8002f10 <clear_buffer>
	  	/* Open second file to read */
	  	fresult = f_open(&fil, "file2.txt", FA_READ);
 8003594:	2201      	movs	r2, #1
 8003596:	495e      	ldr	r1, [pc, #376]	; (8003710 <sd_init+0x328>)
 8003598:	4858      	ldr	r0, [pc, #352]	; (80036fc <sd_init+0x314>)
 800359a:	f009 f947 	bl	800c82c <f_open>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <sd_init+0x2e0>)
 80035a4:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK){
 80035a6:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <sd_init+0x2e0>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <sd_init+0x1cc>
	  		send_uart ("file2.txt is open and the data is shown below\r\n");
 80035ae:	485c      	ldr	r0, [pc, #368]	; (8003720 <sd_init+0x338>)
 80035b0:	f7ff fcca 	bl	8002f48 <send_uart>
	  	}

	  	/* Read data from the file
	  	 * Please see the function details for the arguments */
	  	f_read (&fil, buffer, f_size(&fil), &br);
 80035b4:	4b51      	ldr	r3, [pc, #324]	; (80036fc <sd_init+0x314>)
 80035b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ba:	330c      	adds	r3, #12
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b59      	ldr	r3, [pc, #356]	; (8003724 <sd_init+0x33c>)
 80035c0:	494a      	ldr	r1, [pc, #296]	; (80036ec <sd_init+0x304>)
 80035c2:	484e      	ldr	r0, [pc, #312]	; (80036fc <sd_init+0x314>)
 80035c4:	f009 fc6c 	bl	800cea0 <f_read>
	  	send_uart(buffer);
 80035c8:	4848      	ldr	r0, [pc, #288]	; (80036ec <sd_init+0x304>)
 80035ca:	f7ff fcbd 	bl	8002f48 <send_uart>
	  	send_uart("\r\n");
 80035ce:	484f      	ldr	r0, [pc, #316]	; (800370c <sd_init+0x324>)
 80035d0:	f7ff fcba 	bl	8002f48 <send_uart>

	  	/* Close file */
	  	f_close(&fil);
 80035d4:	4849      	ldr	r0, [pc, #292]	; (80036fc <sd_init+0x314>)
 80035d6:	f00a f9ca 	bl	800d96e <f_close>

	  	clear_buffer();
 80035da:	f7ff fc99 	bl	8002f10 <clear_buffer>


	  	/*********************UPDATING an existing file ***************************/

	  	/* Open the file with write access */
	  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80035de:	2203      	movs	r2, #3
 80035e0:	494b      	ldr	r1, [pc, #300]	; (8003710 <sd_init+0x328>)
 80035e2:	4846      	ldr	r0, [pc, #280]	; (80036fc <sd_init+0x314>)
 80035e4:	f009 f922 	bl	800c82c <f_open>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <sd_init+0x2e0>)
 80035ee:	701a      	strb	r2, [r3, #0]

	  	/* Move to offset to the end of the file */
	  	fresult = f_lseek(&fil, f_size(&fil));
 80035f0:	4b42      	ldr	r3, [pc, #264]	; (80036fc <sd_init+0x314>)
 80035f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f6:	330c      	adds	r3, #12
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	483f      	ldr	r0, [pc, #252]	; (80036fc <sd_init+0x314>)
 80035fe:	f00a f9e1 	bl	800d9c4 <f_lseek>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <sd_init+0x2e0>)
 8003608:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <sd_init+0x2e0>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <sd_init+0x230>
	  	{
	  		send_uart ("About to update the file2.txt\r\n");
 8003612:	4845      	ldr	r0, [pc, #276]	; (8003728 <sd_init+0x340>)
 8003614:	f7ff fc98 	bl	8002f48 <send_uart>
	  	}

	  	/* write the string to the file */
	  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8003618:	4938      	ldr	r1, [pc, #224]	; (80036fc <sd_init+0x314>)
 800361a:	4844      	ldr	r0, [pc, #272]	; (800372c <sd_init+0x344>)
 800361c:	f00a fe62 	bl	800e2e4 <f_puts>
 8003620:	4603      	mov	r3, r0
 8003622:	b2da      	uxtb	r2, r3
 8003624:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <sd_init+0x2e0>)
 8003626:	701a      	strb	r2, [r3, #0]
	  	f_close (&fil);
 8003628:	4834      	ldr	r0, [pc, #208]	; (80036fc <sd_init+0x314>)
 800362a:	f00a f9a0 	bl	800d96e <f_close>
	  	clear_buffer();
 800362e:	f7ff fc6f 	bl	8002f10 <clear_buffer>

	  	/* Open to read the file */
	  	fresult = f_open (&fil, "file2.txt", FA_READ);
 8003632:	2201      	movs	r2, #1
 8003634:	4936      	ldr	r1, [pc, #216]	; (8003710 <sd_init+0x328>)
 8003636:	4831      	ldr	r0, [pc, #196]	; (80036fc <sd_init+0x314>)
 8003638:	f009 f8f8 	bl	800c82c <f_open>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <sd_init+0x2e0>)
 8003642:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <sd_init+0x314>)
 8003646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364a:	330c      	adds	r3, #12
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b35      	ldr	r3, [pc, #212]	; (8003724 <sd_init+0x33c>)
 8003650:	4926      	ldr	r1, [pc, #152]	; (80036ec <sd_init+0x304>)
 8003652:	482a      	ldr	r0, [pc, #168]	; (80036fc <sd_init+0x314>)
 8003654:	f009 fc24 	bl	800cea0 <f_read>
 8003658:	4603      	mov	r3, r0
 800365a:	461a      	mov	r2, r3
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <sd_init+0x2e0>)
 800365e:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <sd_init+0x2e0>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d108      	bne.n	800367a <sd_init+0x292>
	  	{
	  		send_uart ("Below is the data from updated file2.txt\r\n");
 8003668:	4831      	ldr	r0, [pc, #196]	; (8003730 <sd_init+0x348>)
 800366a:	f7ff fc6d 	bl	8002f48 <send_uart>
	  		send_uart(buffer);
 800366e:	481f      	ldr	r0, [pc, #124]	; (80036ec <sd_init+0x304>)
 8003670:	f7ff fc6a 	bl	8002f48 <send_uart>
	  		send_uart("\r\n");
 8003674:	4825      	ldr	r0, [pc, #148]	; (800370c <sd_init+0x324>)
 8003676:	f7ff fc67 	bl	8002f48 <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 800367a:	4820      	ldr	r0, [pc, #128]	; (80036fc <sd_init+0x314>)
 800367c:	f00a f977 	bl	800d96e <f_close>

	  	clear_buffer();
 8003680:	f7ff fc46 	bl	8002f10 <clear_buffer>


	  	/*Create csv file to log random data*/
	  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8003684:	2213      	movs	r2, #19
 8003686:	492b      	ldr	r1, [pc, #172]	; (8003734 <sd_init+0x34c>)
 8003688:	481c      	ldr	r0, [pc, #112]	; (80036fc <sd_init+0x314>)
 800368a:	f009 f8cf 	bl	800c82c <f_open>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <sd_init+0x2e0>)
 8003694:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("Timer(s), Cell_Voltage_1,Cell_Voltage_2,Cell_Voltage_3,Cell_Voltage_4,Cell_Voltage_5,Cell_Voltage_6,Cell_Voltage_7,Cell_Voltage_8,Cell_Voltage_9,Cell_Voltage_10,Cell_Voltage_11,Cell_Voltage_12,Cell_Voltage_13,Cell_Voltage_14,Cell_Voltage_15,Cell_Voltage_16,Cell_Voltage_17,Cell_Voltage_18, Pack_Voltage, Pack_Current, Temperature_3, Temperature_4, Max_cell_voltage, Min_cell_voltage \r\n ", &fil);
 8003696:	4919      	ldr	r1, [pc, #100]	; (80036fc <sd_init+0x314>)
 8003698:	4827      	ldr	r0, [pc, #156]	; (8003738 <sd_init+0x350>)
 800369a:	f00a fe23 	bl	800e2e4 <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 800369e:	4817      	ldr	r0, [pc, #92]	; (80036fc <sd_init+0x314>)
 80036a0:	f00a f965 	bl	800d96e <f_close>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <sd_init+0x2e0>)
 80036aa:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <sd_init+0x2e0>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <sd_init+0x2d2>
	  	{
	  		send_uart ("File3.csv created and header is written \r\n");
 80036b4:	4821      	ldr	r0, [pc, #132]	; (800373c <sd_init+0x354>)
 80036b6:	f7ff fc47 	bl	8002f48 <send_uart>
	//  	if (fresult == FR_OK)
	//  	{
	//  		send_uart ("SD CARD UNMOUNTED successfully...\r\n");
	//  	}

}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	080117a8 	.word	0x080117a8
 80036c4:	200005f4 	.word	0x200005f4
 80036c8:	20001bb8 	.word	0x20001bb8
 80036cc:	080117ac 	.word	0x080117ac
 80036d0:	080117d0 	.word	0x080117d0
 80036d4:	20001bb4 	.word	0x20001bb4
 80036d8:	200004ec 	.word	0x200004ec
 80036dc:	080117f4 	.word	0x080117f4
 80036e0:	3fe00000 	.word	0x3fe00000
 80036e4:	20001cac 	.word	0x20001cac
 80036e8:	080117f8 	.word	0x080117f8
 80036ec:	20001674 	.word	0x20001674
 80036f0:	2000166c 	.word	0x2000166c
 80036f4:	08011814 	.word	0x08011814
 80036f8:	08011830 	.word	0x08011830
 80036fc:	20001dd8 	.word	0x20001dd8
 8003700:	0801183c 	.word	0x0801183c
 8003704:	08011880 	.word	0x08011880
 8003708:	080118b0 	.word	0x080118b0
 800370c:	080118f0 	.word	0x080118f0
 8003710:	080118f4 	.word	0x080118f4
 8003714:	08011900 	.word	0x08011900
 8003718:	20001b84 	.word	0x20001b84
 800371c:	08011954 	.word	0x08011954
 8003720:	08011984 	.word	0x08011984
 8003724:	2000165c 	.word	0x2000165c
 8003728:	080119b4 	.word	0x080119b4
 800372c:	080119d4 	.word	0x080119d4
 8003730:	08011a08 	.word	0x08011a08
 8003734:	080116b0 	.word	0x080116b0
 8003738:	08011a34 	.word	0x08011a34
 800373c:	08011bb8 	.word	0x08011bb8

08003740 <CellMonitorsArrayTranslate>:

void CellMonitorsArrayTranslate(void)
{
 8003740:	b490      	push	{r4, r7}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
	uint8_t individualCellPointer = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	71fb      	strb	r3, [r7, #7]

  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 800374a:	2300      	movs	r3, #0
 800374c:	71bb      	strb	r3, [r7, #6]
 800374e:	e048      	b.n	80037e2 <CellMonitorsArrayTranslate+0xa2>
		if((modulePointer+1) % (cellMonitorICCount/1)==0 && modulePointer != 0)
 8003750:	79bb      	ldrb	r3, [r7, #6]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d021      	beq.n	800379a <CellMonitorsArrayTranslate+0x5a>
		{ // If end of series string, use lastICNoOfCells instead of noOfCellsPerModule
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++)
 8003756:	2300      	movs	r3, #0
 8003758:	717b      	strb	r3, [r7, #5]
 800375a:	e01a      	b.n	8003792 <CellMonitorsArrayTranslate+0x52>
			{
				cellVoltagesIndividual[individualCellPointer].cellVoltage = cellModuleVoltages[modulePointer][modulePointerCell];
 800375c:	79ba      	ldrb	r2, [r7, #6]
 800375e:	7978      	ldrb	r0, [r7, #5]
 8003760:	79f9      	ldrb	r1, [r7, #7]
 8003762:	4c24      	ldr	r4, [pc, #144]	; (80037f4 <CellMonitorsArrayTranslate+0xb4>)
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4403      	add	r3, r0
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4423      	add	r3, r4
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4820      	ldr	r0, [pc, #128]	; (80037f8 <CellMonitorsArrayTranslate+0xb8>)
 8003776:	00cb      	lsls	r3, r1, #3
 8003778:	4403      	add	r3, r0
 800377a:	601a      	str	r2, [r3, #0]
				cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 800377c:	79fa      	ldrb	r2, [r7, #7]
 800377e:	1c53      	adds	r3, r2, #1
 8003780:	71fb      	strb	r3, [r7, #7]
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	491c      	ldr	r1, [pc, #112]	; (80037f8 <CellMonitorsArrayTranslate+0xb8>)
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	711a      	strb	r2, [r3, #4]
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++)
 800378c:	797b      	ldrb	r3, [r7, #5]
 800378e:	3301      	adds	r3, #1
 8003790:	717b      	strb	r3, [r7, #5]
 8003792:	797b      	ldrb	r3, [r7, #5]
 8003794:	2b11      	cmp	r3, #17
 8003796:	d9e1      	bls.n	800375c <CellMonitorsArrayTranslate+0x1c>
 8003798:	e020      	b.n	80037dc <CellMonitorsArrayTranslate+0x9c>
			}
		}
		else
		{ // use noOfCellsPerModule as usually
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++) {
 800379a:	2300      	movs	r3, #0
 800379c:	713b      	strb	r3, [r7, #4]
 800379e:	e01a      	b.n	80037d6 <CellMonitorsArrayTranslate+0x96>
				cellVoltagesIndividual[individualCellPointer].cellVoltage = cellModuleVoltages[modulePointer][modulePointerCell];
 80037a0:	79ba      	ldrb	r2, [r7, #6]
 80037a2:	7938      	ldrb	r0, [r7, #4]
 80037a4:	79f9      	ldrb	r1, [r7, #7]
 80037a6:	4c13      	ldr	r4, [pc, #76]	; (80037f4 <CellMonitorsArrayTranslate+0xb4>)
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4403      	add	r3, r0
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4423      	add	r3, r4
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	480f      	ldr	r0, [pc, #60]	; (80037f8 <CellMonitorsArrayTranslate+0xb8>)
 80037ba:	00cb      	lsls	r3, r1, #3
 80037bc:	4403      	add	r3, r0
 80037be:	601a      	str	r2, [r3, #0]
				cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 80037c0:	79fa      	ldrb	r2, [r7, #7]
 80037c2:	1c53      	adds	r3, r2, #1
 80037c4:	71fb      	strb	r3, [r7, #7]
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	490b      	ldr	r1, [pc, #44]	; (80037f8 <CellMonitorsArrayTranslate+0xb8>)
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	711a      	strb	r2, [r3, #4]
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++) {
 80037d0:	793b      	ldrb	r3, [r7, #4]
 80037d2:	3301      	adds	r3, #1
 80037d4:	713b      	strb	r3, [r7, #4]
 80037d6:	793b      	ldrb	r3, [r7, #4]
 80037d8:	2b11      	cmp	r3, #17
 80037da:	d9e1      	bls.n	80037a0 <CellMonitorsArrayTranslate+0x60>
  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 80037dc:	79bb      	ldrb	r3, [r7, #6]
 80037de:	3301      	adds	r3, #1
 80037e0:	71bb      	strb	r3, [r7, #6]
 80037e2:	79bb      	ldrb	r3, [r7, #6]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0b3      	beq.n	8003750 <CellMonitorsArrayTranslate+0x10>
			}
		};
	}
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc90      	pop	{r4, r7}
 80037f2:	4770      	bx	lr
 80037f4:	200004f8 	.word	0x200004f8
 80037f8:	20001d18 	.word	0x20001d18

080037fc <AuxMonitorsArrayTranslate>:

void AuxMonitorsArrayTranslate(void) {
 80037fc:	b490      	push	{r4, r7}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
	uint8_t individualAuxPointer = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	71fb      	strb	r3, [r7, #7]

  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 8003806:	2300      	movs	r3, #0
 8003808:	71bb      	strb	r3, [r7, #6]
 800380a:	e03e      	b.n	800388a <AuxMonitorsArrayTranslate+0x8e>
	  for(uint8_t modulePointerAux = 0;modulePointerAux < noOfTempSensorPerModule; modulePointerAux++) {
 800380c:	2300      	movs	r3, #0
 800380e:	717b      	strb	r3, [r7, #5]
 8003810:	e035      	b.n	800387e <AuxMonitorsArrayTranslate+0x82>
			if(modulePointerAux < 5)
 8003812:	797b      	ldrb	r3, [r7, #5]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d817      	bhi.n	8003848 <AuxMonitorsArrayTranslate+0x4c>
			{
				auxVoltagesIndividual[individualAuxPointer].auxVoltage = auxModuleVoltages[modulePointer][modulePointerAux];
 8003818:	79ba      	ldrb	r2, [r7, #6]
 800381a:	7978      	ldrb	r0, [r7, #5]
 800381c:	79f9      	ldrb	r1, [r7, #7]
 800381e:	4c1f      	ldr	r4, [pc, #124]	; (800389c <AuxMonitorsArrayTranslate+0xa0>)
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	4403      	add	r3, r0
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4423      	add	r3, r4
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	481c      	ldr	r0, [pc, #112]	; (80038a0 <AuxMonitorsArrayTranslate+0xa4>)
 8003830:	00cb      	lsls	r3, r1, #3
 8003832:	4403      	add	r3, r0
 8003834:	601a      	str	r2, [r3, #0]
				auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 8003836:	79fa      	ldrb	r2, [r7, #7]
 8003838:	1c53      	adds	r3, r2, #1
 800383a:	71fb      	strb	r3, [r7, #7]
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	4918      	ldr	r1, [pc, #96]	; (80038a0 <AuxMonitorsArrayTranslate+0xa4>)
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	711a      	strb	r2, [r3, #4]
 8003846:	e017      	b.n	8003878 <AuxMonitorsArrayTranslate+0x7c>
			}
			else
			{ // when above 5, remove reference voltage measurement from Aux register group B : AVBR4 & AVBR5 for LTC6812 & LTC6813
				auxVoltagesIndividual[individualAuxPointer].auxVoltage = auxModuleVoltages[modulePointer][modulePointerAux+1];
 8003848:	79ba      	ldrb	r2, [r7, #6]
 800384a:	797b      	ldrb	r3, [r7, #5]
 800384c:	1c58      	adds	r0, r3, #1
 800384e:	79f9      	ldrb	r1, [r7, #7]
 8003850:	4c12      	ldr	r4, [pc, #72]	; (800389c <AuxMonitorsArrayTranslate+0xa0>)
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	4403      	add	r3, r0
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4423      	add	r3, r4
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	480f      	ldr	r0, [pc, #60]	; (80038a0 <AuxMonitorsArrayTranslate+0xa4>)
 8003862:	00cb      	lsls	r3, r1, #3
 8003864:	4403      	add	r3, r0
 8003866:	601a      	str	r2, [r3, #0]
				auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 8003868:	79fa      	ldrb	r2, [r7, #7]
 800386a:	1c53      	adds	r3, r2, #1
 800386c:	71fb      	strb	r3, [r7, #7]
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	490b      	ldr	r1, [pc, #44]	; (80038a0 <AuxMonitorsArrayTranslate+0xa4>)
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	711a      	strb	r2, [r3, #4]
	  for(uint8_t modulePointerAux = 0;modulePointerAux < noOfTempSensorPerModule; modulePointerAux++) {
 8003878:	797b      	ldrb	r3, [r7, #5]
 800387a:	3301      	adds	r3, #1
 800387c:	717b      	strb	r3, [r7, #5]
 800387e:	797b      	ldrb	r3, [r7, #5]
 8003880:	2b09      	cmp	r3, #9
 8003882:	d9c6      	bls.n	8003812 <AuxMonitorsArrayTranslate+0x16>
  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 8003884:	79bb      	ldrb	r3, [r7, #6]
 8003886:	3301      	adds	r3, #1
 8003888:	71bb      	strb	r3, [r7, #6]
 800388a:	79bb      	ldrb	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0bd      	beq.n	800380c <AuxMonitorsArrayTranslate+0x10>
			}
		}
	}
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bc90      	pop	{r4, r7}
 800389a:	4770      	bx	lr
 800389c:	20001b8c 	.word	0x20001b8c
 80038a0:	20001cb8 	.word	0x20001cb8

080038a4 <calculateMaxandMinCellVoltages>:

void calculateMaxandMinCellVoltages(void)
{
 80038a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af04      	add	r7, sp, #16
	cellVoltageHigh = 0.0f;
 80038ac:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <calculateMaxandMinCellVoltages+0x100>)
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
	cellVoltageLow = 10.0f;
 80038b4:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <calculateMaxandMinCellVoltages+0x104>)
 80038b6:	4a3d      	ldr	r2, [pc, #244]	; (80039ac <calculateMaxandMinCellVoltages+0x108>)
 80038b8:	601a      	str	r2, [r3, #0]
	for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	71fb      	strb	r3, [r7, #7]
 80038be:	e039      	b.n	8003934 <calculateMaxandMinCellVoltages+0x90>
	{
		if(cellVoltagesIndividual[cellPointer].cellVoltage > cellVoltageHigh)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	4a3b      	ldr	r2, [pc, #236]	; (80039b0 <calculateMaxandMinCellVoltages+0x10c>)
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	ed93 7a00 	vldr	s14, [r3]
 80038cc:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <calculateMaxandMinCellVoltages+0x100>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	dd06      	ble.n	80038ea <calculateMaxandMinCellVoltages+0x46>
		{
			cellVoltageHigh = cellVoltagesIndividual[cellPointer].cellVoltage;
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	4a34      	ldr	r2, [pc, #208]	; (80039b0 <calculateMaxandMinCellVoltages+0x10c>)
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <calculateMaxandMinCellVoltages+0x100>)
 80038e8:	6013      	str	r3, [r2, #0]
		}
		if(cellVoltagesIndividual[cellPointer].cellVoltage < cellVoltageLow && cellVoltagesIndividual[cellPointer].cellVoltage > 0.5f)
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <calculateMaxandMinCellVoltages+0x10c>)
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	ed93 7a00 	vldr	s14, [r3]
 80038f6:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <calculateMaxandMinCellVoltages+0x104>)
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d513      	bpl.n	800392e <calculateMaxandMinCellVoltages+0x8a>
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <calculateMaxandMinCellVoltages+0x10c>)
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800391a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391e:	dd06      	ble.n	800392e <calculateMaxandMinCellVoltages+0x8a>
		{
			cellVoltageLow = cellVoltagesIndividual[cellPointer].cellVoltage;
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <calculateMaxandMinCellVoltages+0x10c>)
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <calculateMaxandMinCellVoltages+0x104>)
 800392c:	6013      	str	r3, [r2, #0]
	for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	3301      	adds	r3, #1
 8003932:	71fb      	strb	r3, [r7, #7]
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	2b11      	cmp	r3, #17
 8003938:	d9c2      	bls.n	80038c0 <calculateMaxandMinCellVoltages+0x1c>
		}
	}
	maxImbalanceVoltage = cellVoltageHigh - cellVoltageLow;
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <calculateMaxandMinCellVoltages+0x100>)
 800393c:	ed93 7a00 	vldr	s14, [r3]
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <calculateMaxandMinCellVoltages+0x104>)
 8003942:	edd3 7a00 	vldr	s15, [r3]
 8003946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <calculateMaxandMinCellVoltages+0x110>)
 800394c:	edc3 7a00 	vstr	s15, [r3]
	sprintf(buffer, "Max Cell Voltage = %.3f, Min Cell Voltage = %.3f , Max Imbalance Voltage = %.3f\r\n",cellVoltageHigh, cellVoltageLow, maxImbalanceVoltage);
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <calculateMaxandMinCellVoltages+0x100>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fc fdf7 	bl	8000548 <__aeabi_f2d>
 800395a:	4680      	mov	r8, r0
 800395c:	4689      	mov	r9, r1
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <calculateMaxandMinCellVoltages+0x104>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fc fdf0 	bl	8000548 <__aeabi_f2d>
 8003968:	4604      	mov	r4, r0
 800396a:	460d      	mov	r5, r1
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <calculateMaxandMinCellVoltages+0x110>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fde9 	bl	8000548 <__aeabi_f2d>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800397e:	e9cd 4500 	strd	r4, r5, [sp]
 8003982:	4642      	mov	r2, r8
 8003984:	464b      	mov	r3, r9
 8003986:	490c      	ldr	r1, [pc, #48]	; (80039b8 <calculateMaxandMinCellVoltages+0x114>)
 8003988:	480c      	ldr	r0, [pc, #48]	; (80039bc <calculateMaxandMinCellVoltages+0x118>)
 800398a:	f00b fd2d 	bl	800f3e8 <siprintf>
	send_uart(buffer);
 800398e:	480b      	ldr	r0, [pc, #44]	; (80039bc <calculateMaxandMinCellVoltages+0x118>)
 8003990:	f7ff fada 	bl	8002f48 <send_uart>
	clear_buffer();
 8003994:	f7ff fabc 	bl	8002f10 <clear_buffer>

}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039a2:	bf00      	nop
 80039a4:	200004f0 	.word	0x200004f0
 80039a8:	20001624 	.word	0x20001624
 80039ac:	41200000 	.word	0x41200000
 80039b0:	20001d18 	.word	0x20001d18
 80039b4:	20001da8 	.word	0x20001da8
 80039b8:	08011be4 	.word	0x08011be4
 80039bc:	20001674 	.word	0x20001674

080039c0 <init_LTC6813>:
	      LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
	      LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
	}
}
void init_LTC6813(void)
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b093      	sub	sp, #76	; 0x4c
 80039c4:	af08      	add	r7, sp, #32
	driverLTC6804ConfigStructTypedef configStruct;
	configStruct.GPIO1                    = true;																														// Do not pull down this pin (false = pull down)
 80039c6:	2301      	movs	r3, #1
 80039c8:	713b      	strb	r3, [r7, #4]
	configStruct.GPIO2                    = true;																														//
 80039ca:	2301      	movs	r3, #1
 80039cc:	717b      	strb	r3, [r7, #5]
	configStruct.GPIO3                    = true;																														//
 80039ce:	2301      	movs	r3, #1
 80039d0:	71bb      	strb	r3, [r7, #6]
	configStruct.GPIO4                    = true;																														//
 80039d2:	2301      	movs	r3, #1
 80039d4:	71fb      	strb	r3, [r7, #7]
	configStruct.GPIO5                    = true;																														//
 80039d6:	2301      	movs	r3, #1
 80039d8:	723b      	strb	r3, [r7, #8]
	configStruct.GPIO6                    = true;																														//
 80039da:	2301      	movs	r3, #1
 80039dc:	727b      	strb	r3, [r7, #9]
	configStruct.GPIO7                    = true;																														//
 80039de:	2301      	movs	r3, #1
 80039e0:	72bb      	strb	r3, [r7, #10]
	configStruct.GPIO8                    = true;																														//
 80039e2:	2301      	movs	r3, #1
 80039e4:	72fb      	strb	r3, [r7, #11]
	configStruct.GPIO9                    = true;																														//
 80039e6:	2301      	movs	r3, #1
 80039e8:	733b      	strb	r3, [r7, #12]
	configStruct.ReferenceON              = true;																														// Reference ON
 80039ea:	2301      	movs	r3, #1
 80039ec:	737b      	strb	r3, [r7, #13]
	configStruct.ADCOption                = true;																											  		// ADC Option register for configuration of over sampling ratio
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
	configStruct.noOfCells                = 18;			// Number of cells to monitor (that can cause interrupt)
 80039f2:	2312      	movs	r3, #18
 80039f4:	743b      	strb	r3, [r7, #16]
	configStruct.DisChargeEnableMask      = 0x00000000;	// Set enable state of discharge, 1=EnableDischarge, 0=DisableDischarge
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
	configStruct.DischargeTimout          = 0;		// Discharge timout value / limit
 80039fa:	2300      	movs	r3, #0
 80039fc:	763b      	strb	r3, [r7, #24]
	configStruct.CellUnderVoltageLimit    = 2.80f; // Undervoltage level, cell voltages under this limit will cause interrupt
 80039fe:	4b41      	ldr	r3, [pc, #260]	; (8003b04 <init_LTC6813+0x144>)
 8003a00:	61fb      	str	r3, [r7, #28]
	configStruct.CellOverVoltageLimit     = 4.20f;
 8003a02:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <init_LTC6813+0x148>)
 8003a04:	623b      	str	r3, [r7, #32]

	driverSWLTC6804Init(configStruct, NoOfCellMonitorsPossibleOnBMS, noOfTotalCells, noOfTempSensorPerModule,CELL_MON_LTC6811_1);
 8003a06:	2301      	movs	r3, #1
 8003a08:	9307      	str	r3, [sp, #28]
 8003a0a:	230a      	movs	r3, #10
 8003a0c:	9306      	str	r3, [sp, #24]
 8003a0e:	2312      	movs	r3, #18
 8003a10:	9305      	str	r3, [sp, #20]
 8003a12:	2301      	movs	r3, #1
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	466c      	mov	r4, sp
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a26:	f7fd fa31 	bl	8000e8c <driverSWLTC6804Init>

	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a30:	e02c      	b.n	8003a8c <init_LTC6813+0xcc>
	{
		for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a38:	e013      	b.n	8003a62 <init_LTC6813+0xa2>
			cellModuleVoltages[modulePointer][cellPointer] = 0.0f;
 8003a3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a3e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003a42:	4832      	ldr	r0, [pc, #200]	; (8003b0c <init_LTC6813+0x14c>)
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	440b      	add	r3, r1
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4403      	add	r3, r0
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
		for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 8003a58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a66:	2b11      	cmp	r3, #17
 8003a68:	d9e7      	bls.n	8003a3a <init_LTC6813+0x7a>

		cellModuleBalanceResistorEnableMask[modulePointer] = 0;
 8003a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a6e:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <init_LTC6813+0x150>)
 8003a70:	2100      	movs	r1, #0
 8003a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		cellModuleBalanceResistorEnableMaskTest[modulePointer] = 0;
 8003a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a7a:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <init_LTC6813+0x154>)
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8003a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a86:	3301      	adds	r3, #1
 8003a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ce      	beq.n	8003a32 <init_LTC6813+0x72>
	}
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003a9a:	e01f      	b.n	8003adc <init_LTC6813+0x11c>
	{
		for(uint8_t auxPointer = 0; auxPointer < noOfTempSensorPerModule; auxPointer++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003aa2:	e012      	b.n	8003aca <init_LTC6813+0x10a>
			auxModuleVoltages[modulePointer][auxPointer] = 0.0f;
 8003aa4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003aa8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003aac:	481a      	ldr	r0, [pc, #104]	; (8003b18 <init_LTC6813+0x158>)
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4403      	add	r3, r0
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
		for(uint8_t auxPointer = 0; auxPointer < noOfTempSensorPerModule; auxPointer++)
 8003ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003aca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d9e8      	bls.n	8003aa4 <init_LTC6813+0xe4>
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8003ad2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003adc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0db      	beq.n	8003a9c <init_LTC6813+0xdc>
	}

	driverSWLTC6804ResetCellVoltageRegisters();
 8003ae4:	f7fd fa62 	bl	8000fac <driverSWLTC6804ResetCellVoltageRegisters>
	//driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
	//driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
	driverSWLTC6804ResetAuxRegisters();
 8003ae8:	f7fd fa81 	bl	8000fee <driverSWLTC6804ResetAuxRegisters>
	driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);
 8003aec:	2100      	movs	r1, #0
 8003aee:	2003      	movs	r0, #3
 8003af0:	f7fd fa9e 	bl	8001030 <driverSWLTC6804StartCellAndAuxVoltageConversion>
	driverSWLTC6804StartAuxVoltageConversion(MD_FILTERED, AUX_CH_ALL);
 8003af4:	2100      	movs	r1, #0
 8003af6:	2003      	movs	r0, #3
 8003af8:	f7fd fad6 	bl	80010a8 <driverSWLTC6804StartAuxVoltageConversion>
	//driverSWLTC6804StartLoadedCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL,true);
	//driverSWLTC6804ResetAuxRegisters();
	//driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);

}
 8003afc:	bf00      	nop
 8003afe:	372c      	adds	r7, #44	; 0x2c
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd90      	pop	{r4, r7, pc}
 8003b04:	40333333 	.word	0x40333333
 8003b08:	40866666 	.word	0x40866666
 8003b0c:	200004f8 	.word	0x200004f8
 8003b10:	20001628 	.word	0x20001628
 8003b14:	20001658 	.word	0x20001658
 8003b18:	20001b8c 	.word	0x20001b8c
 8003b1c:	00000000 	.word	0x00000000

08003b20 <unit_test_LTC6813>:
void unit_test_LTC6813(void)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	b0be      	sub	sp, #248	; 0xf8
 8003b26:	af22      	add	r7, sp, #136	; 0x88

	//driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);
	//HAL_Delay(300);
	driverSWLTC6804ResetCellVoltageRegisters();
 8003b28:	f7fd fa40 	bl	8000fac <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804ResetAuxRegisters();
 8003b2c:	f7fd fa5f 	bl	8000fee <driverSWLTC6804ResetAuxRegisters>
	driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);
 8003b30:	2100      	movs	r1, #0
 8003b32:	2003      	movs	r0, #3
 8003b34:	f7fd fa7c 	bl	8001030 <driverSWLTC6804StartCellAndAuxVoltageConversion>
	HAL_Delay(250);
 8003b38:	20fa      	movs	r0, #250	; 0xfa
 8003b3a:	f001 f871 	bl	8004c20 <HAL_Delay>
	if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 8003b3e:	48ba      	ldr	r0, [pc, #744]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003b40:	f7fd faec 	bl	800111c <driverSWLTC6804ReadCellVoltagesArray>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8122 	beq.w	8003d90 <unit_test_LTC6813+0x270>
	{
		CellMonitorsArrayTranslate();
 8003b4c:	f7ff fdf8 	bl	8003740 <CellMonitorsArrayTranslate>
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003b50:	4bb5      	ldr	r3, [pc, #724]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003b52:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fcf7 	bl	8000548 <__aeabi_f2d>
 8003b5a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003b5e:	4bb2      	ldr	r3, [pc, #712]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003b60:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fcf0 	bl	8000548 <__aeabi_f2d>
 8003b68:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003b6c:	4bae      	ldr	r3, [pc, #696]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fc fce9 	bl	8000548 <__aeabi_f2d>
 8003b76:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003b7a:	4bab      	ldr	r3, [pc, #684]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fce2 	bl	8000548 <__aeabi_f2d>
 8003b84:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003b88:	4ba7      	ldr	r3, [pc, #668]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc fcdb 	bl	8000548 <__aeabi_f2d>
 8003b92:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003b96:	4ba4      	ldr	r3, [pc, #656]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003b98:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fcd4 	bl	8000548 <__aeabi_f2d>
 8003ba0:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003ba4:	4ba0      	ldr	r3, [pc, #640]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fccd 	bl	8000548 <__aeabi_f2d>
 8003bae:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003bb2:	4b9d      	ldr	r3, [pc, #628]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fcc6 	bl	8000548 <__aeabi_f2d>
 8003bbc:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003bc0:	4b99      	ldr	r3, [pc, #612]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fcbf 	bl	8000548 <__aeabi_f2d>
 8003bca:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003bce:	4b96      	ldr	r3, [pc, #600]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fcb8 	bl	8000548 <__aeabi_f2d>
 8003bd8:	e9c7 0108 	strd	r0, r1, [r7, #32]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003bdc:	4b92      	ldr	r3, [pc, #584]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fcb1 	bl	8000548 <__aeabi_f2d>
 8003be6:	e9c7 0106 	strd	r0, r1, [r7, #24]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003bea:	4b8f      	ldr	r3, [pc, #572]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fcaa 	bl	8000548 <__aeabi_f2d>
 8003bf4:	e9c7 0104 	strd	r0, r1, [r7, #16]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003bf8:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fca3 	bl	8000548 <__aeabi_f2d>
 8003c02:	e9c7 0102 	strd	r0, r1, [r7, #8]
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fc fc9c 	bl	8000548 <__aeabi_f2d>
 8003c10:	e9c7 0100 	strd	r0, r1, [r7]
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003c14:	4b84      	ldr	r3, [pc, #528]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fc fc95 	bl	8000548 <__aeabi_f2d>
 8003c1e:	4682      	mov	sl, r0
 8003c20:	468b      	mov	fp, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003c22:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fc fc8e 	bl	8000548 <__aeabi_f2d>
 8003c2c:	4680      	mov	r8, r0
 8003c2e:	4689      	mov	r9, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003c30:	4b7d      	ldr	r3, [pc, #500]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fc87 	bl	8000548 <__aeabi_f2d>
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	460d      	mov	r5, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fc80 	bl	8000548 <__aeabi_f2d>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8003c50:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8003c54:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8003c58:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8003c5c:	ed97 7b00 	vldr	d7, [r7]
 8003c60:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003c64:	ed97 7b02 	vldr	d7, [r7, #8]
 8003c68:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003c6c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003c70:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003c74:	ed97 7b06 	vldr	d7, [r7, #24]
 8003c78:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003c7c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003c80:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003c84:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003c88:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003c8c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003c90:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003c94:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003c98:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003c9c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003ca0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003ca4:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003ca8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003cac:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8003cb0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003cb4:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003cbc:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8003cc0:	ed8d 7b00 	vstr	d7, [sp]
 8003cc4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003cc8:	4958      	ldr	r1, [pc, #352]	; (8003e2c <unit_test_LTC6813+0x30c>)
 8003cca:	4859      	ldr	r0, [pc, #356]	; (8003e30 <unit_test_LTC6813+0x310>)
 8003ccc:	f00b fb8c 	bl	800f3e8 <siprintf>
		send_uart(buffer);
 8003cd0:	4857      	ldr	r0, [pc, #348]	; (8003e30 <unit_test_LTC6813+0x310>)
 8003cd2:	f7ff f939 	bl	8002f48 <send_uart>
		clear_buffer();
 8003cd6:	f7ff f91b 	bl	8002f10 <clear_buffer>
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8003cda:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003cdc:	ed93 7a00 	vldr	s14, [r3]
 8003ce0:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003ce2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cea:	4b4f      	ldr	r3, [pc, #316]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003cec:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cf4:	4b4c      	ldr	r3, [pc, #304]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003cf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d00:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d08:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d12:	4b45      	ldr	r3, [pc, #276]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d14:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d18:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 8003d1c:	4b42      	ldr	r3, [pc, #264]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d1e:	edd3 7a07 	vldr	s15, [r3, #28]
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8003d22:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 8003d26:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d28:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d30:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003d36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d3c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d44:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d4e:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d50:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003d54:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][13] + cellModuleVoltages[0][14] + cellModuleVoltages[0][15] + cellModuleVoltages[0][16] + cellModuleVoltages[0][17] ;
 8003d58:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d5a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 8003d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][13] + cellModuleVoltages[0][14] + cellModuleVoltages[0][15] + cellModuleVoltages[0][16] + cellModuleVoltages[0][17] ;
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d64:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d6e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003d72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d78:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <unit_test_LTC6813+0x308>)
 8003d82:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003d86:	ee77 7a27 	vadd.f32	s15, s14, s15
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8003d8a:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <unit_test_LTC6813+0x314>)
 8003d8c:	edc3 7a00 	vstr	s15, [r3]
	}

	if(driverSWLTC6804ReadPackCurrent(packCurrentVoltage))
 8003d90:	4829      	ldr	r0, [pc, #164]	; (8003e38 <unit_test_LTC6813+0x318>)
 8003d92:	f7fe fb2d 	bl	80023f0 <driverSWLTC6804ReadPackCurrent>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d059      	beq.n	8003e50 <unit_test_LTC6813+0x330>
	{
		sprintf(buffer, "Pack Current ADC voltage : %f\r\n", packCurrentVoltage[0][0]);
 8003d9c:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <unit_test_LTC6813+0x318>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fbd1 	bl	8000548 <__aeabi_f2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4924      	ldr	r1, [pc, #144]	; (8003e3c <unit_test_LTC6813+0x31c>)
 8003dac:	4820      	ldr	r0, [pc, #128]	; (8003e30 <unit_test_LTC6813+0x310>)
 8003dae:	f00b fb1b 	bl	800f3e8 <siprintf>
		send_uart(buffer);
 8003db2:	481f      	ldr	r0, [pc, #124]	; (8003e30 <unit_test_LTC6813+0x310>)
 8003db4:	f7ff f8c8 	bl	8002f48 <send_uart>
		clear_buffer();
 8003db8:	f7ff f8aa 	bl	8002f10 <clear_buffer>
		packCurrent = (packCurrentVoltage[0][0]*1000.0f - 2.5*1000.0f)/6.25; //Vout = Vref +/- (1.25xIp / Ipn)
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <unit_test_LTC6813+0x318>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003e40 <unit_test_LTC6813+0x320>
 8003dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dca:	ee17 0a90 	vmov	r0, s15
 8003dce:	f7fc fbbb 	bl	8000548 <__aeabi_f2d>
 8003dd2:	a313      	add	r3, pc, #76	; (adr r3, 8003e20 <unit_test_LTC6813+0x300>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fa56 	bl	8000288 <__aeabi_dsub>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <unit_test_LTC6813+0x324>)
 8003dea:	f7fc fd2f 	bl	800084c <__aeabi_ddiv>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f7fc feaf 	bl	8000b58 <__aeabi_d2iz>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <unit_test_LTC6813+0x328>)
 8003dfe:	6013      	str	r3, [r2, #0]
																//Ip -> packCurrent , Vref = 2.5V
		sprintf(buffer, "Pack Current is : %ld\r\n", packCurrent); //TO DO: moving average filter, zero current calibration
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <unit_test_LTC6813+0x328>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4911      	ldr	r1, [pc, #68]	; (8003e4c <unit_test_LTC6813+0x32c>)
 8003e08:	4809      	ldr	r0, [pc, #36]	; (8003e30 <unit_test_LTC6813+0x310>)
 8003e0a:	f00b faed 	bl	800f3e8 <siprintf>
		send_uart(buffer);
 8003e0e:	4808      	ldr	r0, [pc, #32]	; (8003e30 <unit_test_LTC6813+0x310>)
 8003e10:	f7ff f89a 	bl	8002f48 <send_uart>
		clear_buffer();
 8003e14:	f7ff f87c 	bl	8002f10 <clear_buffer>
 8003e18:	e01a      	b.n	8003e50 <unit_test_LTC6813+0x330>
 8003e1a:	bf00      	nop
 8003e1c:	f3af 8000 	nop.w
 8003e20:	00000000 	.word	0x00000000
 8003e24:	40a38800 	.word	0x40a38800
 8003e28:	200004f8 	.word	0x200004f8
 8003e2c:	08011fb0 	.word	0x08011fb0
 8003e30:	20001674 	.word	0x20001674
 8003e34:	20002e04 	.word	0x20002e04
 8003e38:	200005a4 	.word	0x200005a4
 8003e3c:	08012028 	.word	0x08012028
 8003e40:	447a0000 	.word	0x447a0000
 8003e44:	40190000 	.word	0x40190000
 8003e48:	20001670 	.word	0x20001670
 8003e4c:	08012048 	.word	0x08012048
	}

	driverSWLTC6804ResetAuxRegisters();
 8003e50:	f7fd f8cd 	bl	8000fee <driverSWLTC6804ResetAuxRegisters>
	driverSWLTC6804StartAuxVoltageConversion(MD_FILTERED, AUX_CH_ALL);
 8003e54:	2100      	movs	r1, #0
 8003e56:	2003      	movs	r0, #3
 8003e58:	f7fd f926 	bl	80010a8 <driverSWLTC6804StartAuxVoltageConversion>
	HAL_Delay(250);
 8003e5c:	20fa      	movs	r0, #250	; 0xfa
 8003e5e:	f000 fedf 	bl	8004c20 <HAL_Delay>

	if(driverSWLTC6804ReadAuxVoltagesArray(auxModuleVoltages,NTCnominalResistance, NTCseriesResistor, NTCbetaFactor, 25.0f))
 8003e62:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003e66:	f640 536b 	movw	r3, #3435	; 0xd6b
 8003e6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e6e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003e72:	482c      	ldr	r0, [pc, #176]	; (8003f24 <unit_test_LTC6813+0x404>)
 8003e74:	f7fd fbc8 	bl	8001608 <driverSWLTC6804ReadAuxVoltagesArray>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04d      	beq.n	8003f1a <unit_test_LTC6813+0x3fa>
	{
		AuxMonitorsArrayTranslate();
 8003e7e:	f7ff fcbd 	bl	80037fc <AuxMonitorsArrayTranslate>
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 8003e82:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <unit_test_LTC6813+0x408>)
 8003e84:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc fb5e 	bl	8000548 <__aeabi_f2d>
 8003e8c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <unit_test_LTC6813+0x408>)
 8003e92:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fc fb57 	bl	8000548 <__aeabi_f2d>
 8003e9a:	4680      	mov	r8, r0
 8003e9c:	4689      	mov	r9, r1
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <unit_test_LTC6813+0x408>)
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc fb50 	bl	8000548 <__aeabi_f2d>
 8003ea8:	4682      	mov	sl, r0
 8003eaa:	468b      	mov	fp, r1
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8003eac:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <unit_test_LTC6813+0x408>)
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fc fb49 	bl	8000548 <__aeabi_f2d>
 8003eb6:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8003eba:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <unit_test_LTC6813+0x408>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fb42 	bl	8000548 <__aeabi_f2d>
 8003ec4:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <unit_test_LTC6813+0x408>)
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fb3b 	bl	8000548 <__aeabi_f2d>
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	460d      	mov	r5, r1
				auxVoltagesIndividual[8].auxVoltage);
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <unit_test_LTC6813+0x408>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fb34 	bl	8000548 <__aeabi_f2d>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003ee8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003eec:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003ef0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003ef4:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8003ef8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003efc:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003f00:	e9cd 8900 	strd	r8, r9, [sp]
 8003f04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003f08:	4908      	ldr	r1, [pc, #32]	; (8003f2c <unit_test_LTC6813+0x40c>)
 8003f0a:	4809      	ldr	r0, [pc, #36]	; (8003f30 <unit_test_LTC6813+0x410>)
 8003f0c:	f00b fa6c 	bl	800f3e8 <siprintf>
				send_uart(buffer);
 8003f10:	4807      	ldr	r0, [pc, #28]	; (8003f30 <unit_test_LTC6813+0x410>)
 8003f12:	f7ff f819 	bl	8002f48 <send_uart>
				clear_buffer();
 8003f16:	f7fe fffb 	bl	8002f10 <clear_buffer>

	//driverSWLTC6804ResetCellVoltageRegisters();
	//driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
	//driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
	//driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);
}
 8003f1a:	bf00      	nop
 8003f1c:	3770      	adds	r7, #112	; 0x70
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f24:	20001b8c 	.word	0x20001b8c
 8003f28:	20001cb8 	.word	0x20001cb8
 8003f2c:	08012060 	.word	0x08012060
 8003f30:	20001674 	.word	0x20001674

08003f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f3a:	f000 fe0b 	bl	8004b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f3e:	f000 f8c5 	bl	80040cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f42:	f000 fa8f 	bl	8004464 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003f46:	f000 fa5d 	bl	8004404 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8003f4a:	f000 fa1d 	bl	8004388 <MX_SPI2_Init>
  MX_FATFS_Init();
 8003f4e:	f005 fe81 	bl	8009c54 <MX_FATFS_Init>
  MX_CAN_Init();
 8003f52:	f000 f927 	bl	80041a4 <MX_CAN_Init>
  MX_RTC_Init();
 8003f56:	f000 f979 	bl	800424c <MX_RTC_Init>
  MX_SPI1_Init();
 8003f5a:	f000 f9d7 	bl	800430c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  //HAL_Delay(250);

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 8003f5e:	494c      	ldr	r1, [pc, #304]	; (8004090 <main+0x15c>)
 8003f60:	484c      	ldr	r0, [pc, #304]	; (8004094 <main+0x160>)
 8003f62:	f00b fa41 	bl	800f3e8 <siprintf>
  send_uart(buffer);
 8003f66:	484b      	ldr	r0, [pc, #300]	; (8004094 <main+0x160>)
 8003f68:	f7fe ffee 	bl	8002f48 <send_uart>
  clear_buffer();
 8003f6c:	f7fe ffd0 	bl	8002f10 <clear_buffer>

  if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0x32F2)
 8003f70:	2101      	movs	r1, #1
 8003f72:	4849      	ldr	r0, [pc, #292]	; (8004098 <main+0x164>)
 8003f74:	f003 fe72 	bl	8007c5c <HAL_RTCEx_BKUPRead>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d001      	beq.n	8003f86 <main+0x52>
  	  {
	  	  set_time(); //set RTC init value
 8003f82:	f7ff f985 	bl	8003290 <set_time>
  	  }

  sd_init();
 8003f86:	f7ff fa2f 	bl	80033e8 <sd_init>

  /*CAN Initializations*/
  HAL_CAN_Start(&hcan);
 8003f8a:	4844      	ldr	r0, [pc, #272]	; (800409c <main+0x168>)
 8003f8c:	f001 f831 	bl	8004ff2 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //using FIFO0 for RX callback reception
 8003f90:	2102      	movs	r1, #2
 8003f92:	4842      	ldr	r0, [pc, #264]	; (800409c <main+0x168>)
 8003f94:	f001 fa5e 	bl	8005454 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; //data
 8003f98:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <main+0x16c>)
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8003f9e:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <main+0x16c>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8003fa4:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <main+0x16c>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  //id
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <main+0x16c>)
 8003fac:	f240 4246 	movw	r2, #1094	; 0x446
 8003fb0:	601a      	str	r2, [r3, #0]
  //populate data to Txdata bytes
  TxData[0] = 11;
 8003fb2:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <main+0x170>)
 8003fb4:	220b      	movs	r2, #11
 8003fb6:	701a      	strb	r2, [r3, #0]
  TxData[1] = 100;
 8003fb8:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <main+0x170>)
 8003fba:	2264      	movs	r2, #100	; 0x64
 8003fbc:	705a      	strb	r2, [r3, #1]
  //send CAN message // TO DO:check CAN message reception on BluePill
  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);

  /*UART2 Interrupt*/
  HAL_UART_Receive_IT (&huart2, uart_rx_data, 4); //set interrupt for uart rx
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4939      	ldr	r1, [pc, #228]	; (80040a8 <main+0x174>)
 8003fc2:	483a      	ldr	r0, [pc, #232]	; (80040ac <main+0x178>)
 8003fc4:	f004 fcd4 	bl	8008970 <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fce:	4838      	ldr	r0, [pc, #224]	; (80040b0 <main+0x17c>)
 8003fd0:	f001 ffb0 	bl	8005f34 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8003fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fd8:	f000 fe22 	bl	8004c20 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); //turn OFF precharge relay
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fe2:	4833      	ldr	r0, [pc, #204]	; (80040b0 <main+0x17c>)
 8003fe4:	f001 ffa6 	bl	8005f34 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8003fe8:	20fa      	movs	r0, #250	; 0xfa
 8003fea:	f000 fe19 	bl	8004c20 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET); //turn ON HV+ contactor
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ff4:	482e      	ldr	r0, [pc, #184]	; (80040b0 <main+0x17c>)
 8003ff6:	f001 ff9d 	bl	8005f34 <HAL_GPIO_WritePin>
  //wakeup_sleep(1);
  //wakeup_idle(1);
#ifdef ext_LTC681x_lib
  //init_cell_asic_structure(cellMonitorICCount, BMS_IC);
#endif
  init_LTC6813();
 8003ffa:	f7ff fce1 	bl	80039c0 <init_LTC6813>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8003ffe:	2108      	movs	r1, #8
 8004000:	482b      	ldr	r0, [pc, #172]	; (80040b0 <main+0x17c>)
 8004002:	f001 ffaf 	bl	8005f64 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8004006:	20fa      	movs	r0, #250	; 0xfa
 8004008:	f000 fe0a 	bl	8004c20 <HAL_Delay>
	  //send CAN message // TO DO:check CAN message reception on BluePill
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <main+0x180>)
 800400e:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <main+0x170>)
 8004010:	4923      	ldr	r1, [pc, #140]	; (80040a0 <main+0x16c>)
 8004012:	4822      	ldr	r0, [pc, #136]	; (800409c <main+0x168>)
 8004014:	f001 f831 	bl	800507a <HAL_CAN_AddTxMessage>

	  //wakeup_idle(1);
	  unit_test_LTC6813();
 8004018:	f7ff fd82 	bl	8003b20 <unit_test_LTC6813>
	  calculateMaxandMinCellVoltages();
 800401c:	f7ff fc42 	bl	80038a4 <calculateMaxandMinCellVoltages>
	  //cellBalancingTask();
#ifdef ext_LTC681x_lib
	  //cellBalancingUnitTest();
#endif

	  if(CAN_data_checkFlag) //check if CAN RX flag is set in HAL_CAN_RxFifo0MsgPendingCallback
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <main+0x184>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <main+0x116>
	  {
		  sprintf(buffer, "CAN Message values received is:%d, %d\r\n", RxData[0], RxData[1]);
 8004028:	4b24      	ldr	r3, [pc, #144]	; (80040bc <main+0x188>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	4b23      	ldr	r3, [pc, #140]	; (80040bc <main+0x188>)
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	4923      	ldr	r1, [pc, #140]	; (80040c0 <main+0x18c>)
 8004034:	4817      	ldr	r0, [pc, #92]	; (8004094 <main+0x160>)
 8004036:	f00b f9d7 	bl	800f3e8 <siprintf>
		  send_uart(buffer);
 800403a:	4816      	ldr	r0, [pc, #88]	; (8004094 <main+0x160>)
 800403c:	f7fe ff84 	bl	8002f48 <send_uart>
		  clear_buffer();
 8004040:	f7fe ff66 	bl	8002f10 <clear_buffer>
		  CAN_data_checkFlag = 0;
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <main+0x184>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
		  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	  }

	  if(uart_rx_flag)
 800404a:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <main+0x190>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d015      	beq.n	800407e <main+0x14a>
	  {
		  sprintf(buffer, "RX Message is: %c, %c, %c\r\n", uart_rx_data[0], uart_rx_data[1], uart_rx_data[2]);
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <main+0x174>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <main+0x174>)
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	4619      	mov	r1, r3
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <main+0x174>)
 8004060:	789b      	ldrb	r3, [r3, #2]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	4918      	ldr	r1, [pc, #96]	; (80040c8 <main+0x194>)
 8004068:	480a      	ldr	r0, [pc, #40]	; (8004094 <main+0x160>)
 800406a:	f00b f9bd 	bl	800f3e8 <siprintf>
		  send_uart(buffer);
 800406e:	4809      	ldr	r0, [pc, #36]	; (8004094 <main+0x160>)
 8004070:	f7fe ff6a 	bl	8002f48 <send_uart>
		  clear_buffer();
 8004074:	f7fe ff4c 	bl	8002f10 <clear_buffer>
		  uart_rx_flag = 0;
 8004078:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <main+0x190>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]

	  }

	  get_time();  //print RTC
 800407e:	f7ff f947 	bl	8003310 <get_time>
	  write_to_csvfile();
 8004082:	f7fe ff79 	bl	8002f78 <write_to_csvfile>
	  HAL_Delay(250);
 8004086:	20fa      	movs	r0, #250	; 0xfa
 8004088:	f000 fdca 	bl	8004c20 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 800408c:	e7b7      	b.n	8003ffe <main+0xca>
 800408e:	bf00      	nop
 8004090:	0801208c 	.word	0x0801208c
 8004094:	20001674 	.word	0x20001674
 8004098:	20001a74 	.word	0x20001a74
 800409c:	20001630 	.word	0x20001630
 80040a0:	20001d00 	.word	0x20001d00
 80040a4:	20001b7c 	.word	0x20001b7c
 80040a8:	20001dcc 	.word	0x20001dcc
 80040ac:	20001c28 	.word	0x20001c28
 80040b0:	48000400 	.word	0x48000400
 80040b4:	20001bb0 	.word	0x20001bb0
 80040b8:	20000228 	.word	0x20000228
 80040bc:	20001c20 	.word	0x20001c20
 80040c0:	080120b4 	.word	0x080120b4
 80040c4:	20000224 	.word	0x20000224
 80040c8:	080120dc 	.word	0x080120dc

080040cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b09e      	sub	sp, #120	; 0x78
 80040d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040d6:	2228      	movs	r2, #40	; 0x28
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f00a fc58 	bl	800e990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040f0:	463b      	mov	r3, r7
 80040f2:	223c      	movs	r2, #60	; 0x3c
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f00a fc4a 	bl	800e990 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80040fc:	f001 ff64 	bl	8005fc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004100:	4b26      	ldr	r3, [pc, #152]	; (800419c <SystemClock_Config+0xd0>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <SystemClock_Config+0xd0>)
 8004106:	f023 0318 	bic.w	r3, r3, #24
 800410a:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800410c:	2305      	movs	r3, #5
 800410e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004114:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004116:	2300      	movs	r3, #0
 8004118:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800411a:	2301      	movs	r3, #1
 800411c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800411e:	2301      	movs	r3, #1
 8004120:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004122:	2302      	movs	r3, #2
 8004124:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800412c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004130:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004132:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004136:	4618      	mov	r0, r3
 8004138:	f001 ff56 	bl	8005fe8 <HAL_RCC_OscConfig>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8004142:	f000 fa11 	bl	8004568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004146:	230f      	movs	r3, #15
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800414a:	2302      	movs	r3, #2
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800414e:	2300      	movs	r3, #0
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004158:	2300      	movs	r3, #0
 800415a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800415c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004160:	2102      	movs	r1, #2
 8004162:	4618      	mov	r0, r3
 8004164:	f002 fe48 	bl	8006df8 <HAL_RCC_ClockConfig>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800416e:	f000 f9fb 	bl	8004568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <SystemClock_Config+0xd4>)
 8004174:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800417a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800417e:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004180:	463b      	mov	r3, r7
 8004182:	4618      	mov	r0, r3
 8004184:	f003 f86e 	bl	8007264 <HAL_RCCEx_PeriphCLKConfig>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800418e:	f000 f9eb 	bl	8004568 <Error_Handler>
  }
}
 8004192:	bf00      	nop
 8004194:	3778      	adds	r7, #120	; 0x78
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	00010002 	.word	0x00010002

080041a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <MX_CAN_Init+0xa0>)
 80041ac:	4a26      	ldr	r2, [pc, #152]	; (8004248 <MX_CAN_Init+0xa4>)
 80041ae:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80041b0:	4b24      	ldr	r3, [pc, #144]	; (8004244 <MX_CAN_Init+0xa0>)
 80041b2:	2212      	movs	r2, #18
 80041b4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80041b6:	4b23      	ldr	r3, [pc, #140]	; (8004244 <MX_CAN_Init+0xa0>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80041bc:	4b21      	ldr	r3, [pc, #132]	; (8004244 <MX_CAN_Init+0xa0>)
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <MX_CAN_Init+0xa0>)
 80041c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041c8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <MX_CAN_Init+0xa0>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80041d0:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <MX_CAN_Init+0xa0>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80041d6:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <MX_CAN_Init+0xa0>)
 80041d8:	2200      	movs	r2, #0
 80041da:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <MX_CAN_Init+0xa0>)
 80041de:	2200      	movs	r2, #0
 80041e0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <MX_CAN_Init+0xa0>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <MX_CAN_Init+0xa0>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <MX_CAN_Init+0xa0>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80041f4:	4813      	ldr	r0, [pc, #76]	; (8004244 <MX_CAN_Init+0xa0>)
 80041f6:	f000 fd37 	bl	8004c68 <HAL_CAN_Init>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8004200:	f000 f9b2 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //CAN filter settings
  CAN_FilterTypeDef canfilterConfig;

  canfilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8004204:	2301      	movs	r3, #1
 8004206:	623b      	str	r3, [r7, #32]
  canfilterConfig.FilterBank = 11;
 8004208:	230b      	movs	r3, #11
 800420a:	617b      	str	r3, [r7, #20]
  canfilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
  canfilterConfig.FilterIdHigh = 0x103<<5;
 8004210:	f242 0360 	movw	r3, #8288	; 0x2060
 8004214:	603b      	str	r3, [r7, #0]
  canfilterConfig.FilterIdLow = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	607b      	str	r3, [r7, #4]
  canfilterConfig.FilterMaskIdHigh = 0x103<<5;
 800421a:	f242 0360 	movw	r3, #8288	; 0x2060
 800421e:	60bb      	str	r3, [r7, #8]
  canfilterConfig.FilterMaskIdLow = 0x0000;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
  canfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004224:	2300      	movs	r3, #0
 8004226:	61bb      	str	r3, [r7, #24]
  canfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004228:	2301      	movs	r3, #1
 800422a:	61fb      	str	r3, [r7, #28]
  canfilterConfig.SlaveStartFilterBank = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterConfig);
 8004230:	463b      	mov	r3, r7
 8004232:	4619      	mov	r1, r3
 8004234:	4803      	ldr	r0, [pc, #12]	; (8004244 <MX_CAN_Init+0xa0>)
 8004236:	f000 fe12 	bl	8004e5e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800423a:	bf00      	nop
 800423c:	3728      	adds	r7, #40	; 0x28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20001630 	.word	0x20001630
 8004248:	40006400 	.word	0x40006400

0800424c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004260:	2300      	movs	r3, #0
 8004262:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <MX_RTC_Init+0xb8>)
 8004266:	4a28      	ldr	r2, [pc, #160]	; (8004308 <MX_RTC_Init+0xbc>)
 8004268:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800426a:	4b26      	ldr	r3, [pc, #152]	; (8004304 <MX_RTC_Init+0xb8>)
 800426c:	2200      	movs	r2, #0
 800426e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <MX_RTC_Init+0xb8>)
 8004272:	227f      	movs	r2, #127	; 0x7f
 8004274:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004276:	4b23      	ldr	r3, [pc, #140]	; (8004304 <MX_RTC_Init+0xb8>)
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <MX_RTC_Init+0xb8>)
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <MX_RTC_Init+0xb8>)
 8004284:	2200      	movs	r2, #0
 8004286:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004288:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <MX_RTC_Init+0xb8>)
 800428a:	2200      	movs	r2, #0
 800428c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800428e:	481d      	ldr	r0, [pc, #116]	; (8004304 <MX_RTC_Init+0xb8>)
 8004290:	f003 f998 	bl	80075c4 <HAL_RTC_Init>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800429a:	f000 f965 	bl	8004568 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x02;
 800429e:	2302      	movs	r3, #2
 80042a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x03;
 80042a2:	2303      	movs	r3, #3
 80042a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	2201      	movs	r2, #1
 80042b6:	4619      	mov	r1, r3
 80042b8:	4812      	ldr	r0, [pc, #72]	; (8004304 <MX_RTC_Init+0xb8>)
 80042ba:	f003 fa14 	bl	80076e6 <HAL_RTC_SetTime>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80042c4:	f000 f950 	bl	8004568 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80042c8:	2307      	movs	r3, #7
 80042ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80042cc:	2307      	movs	r3, #7
 80042ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 80042d0:	2310      	movs	r3, #16
 80042d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80042d4:	2322      	movs	r3, #34	; 0x22
 80042d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80042d8:	463b      	mov	r3, r7
 80042da:	2201      	movs	r2, #1
 80042dc:	4619      	mov	r1, r3
 80042de:	4809      	ldr	r0, [pc, #36]	; (8004304 <MX_RTC_Init+0xb8>)
 80042e0:	f003 fb1c 	bl	800791c <HAL_RTC_SetDate>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80042ea:	f000 f93d 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 80042ee:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80042f2:	2101      	movs	r1, #1
 80042f4:	4803      	ldr	r0, [pc, #12]	; (8004304 <MX_RTC_Init+0xb8>)
 80042f6:	f003 fc97 	bl	8007c28 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20001a74 	.word	0x20001a74
 8004308:	40002800 	.word	0x40002800

0800430c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <MX_SPI1_Init+0x74>)
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <MX_SPI1_Init+0x78>)
 8004314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <MX_SPI1_Init+0x74>)
 8004318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800431c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <MX_SPI1_Init+0x74>)
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004324:	4b16      	ldr	r3, [pc, #88]	; (8004380 <MX_SPI1_Init+0x74>)
 8004326:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800432a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <MX_SPI1_Init+0x74>)
 800432e:	2202      	movs	r2, #2
 8004330:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <MX_SPI1_Init+0x74>)
 8004334:	2201      	movs	r2, #1
 8004336:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <MX_SPI1_Init+0x74>)
 800433a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <MX_SPI1_Init+0x74>)
 8004342:	2238      	movs	r2, #56	; 0x38
 8004344:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004346:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <MX_SPI1_Init+0x74>)
 8004348:	2200      	movs	r2, #0
 800434a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <MX_SPI1_Init+0x74>)
 800434e:	2200      	movs	r2, #0
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <MX_SPI1_Init+0x74>)
 8004354:	2200      	movs	r2, #0
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <MX_SPI1_Init+0x74>)
 800435a:	2207      	movs	r2, #7
 800435c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <MX_SPI1_Init+0x74>)
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <MX_SPI1_Init+0x74>)
 8004366:	2200      	movs	r2, #0
 8004368:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800436a:	4805      	ldr	r0, [pc, #20]	; (8004380 <MX_SPI1_Init+0x74>)
 800436c:	f003 fc8e 	bl	8007c8c <HAL_SPI_Init>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004376:	f000 f8f7 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20001bbc 	.word	0x20001bbc
 8004384:	40013000 	.word	0x40013000

08004388 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <MX_SPI2_Init+0x74>)
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <MX_SPI2_Init+0x78>)
 8004390:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <MX_SPI2_Init+0x74>)
 8004394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004398:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <MX_SPI2_Init+0x74>)
 800439c:	2200      	movs	r2, #0
 800439e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043a0:	4b16      	ldr	r3, [pc, #88]	; (80043fc <MX_SPI2_Init+0x74>)
 80043a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <MX_SPI2_Init+0x74>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <MX_SPI2_Init+0x74>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <MX_SPI2_Init+0x74>)
 80043b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <MX_SPI2_Init+0x74>)
 80043be:	2208      	movs	r2, #8
 80043c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <MX_SPI2_Init+0x74>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <MX_SPI2_Init+0x74>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <MX_SPI2_Init+0x74>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <MX_SPI2_Init+0x74>)
 80043d6:	2207      	movs	r2, #7
 80043d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <MX_SPI2_Init+0x74>)
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <MX_SPI2_Init+0x74>)
 80043e2:	2208      	movs	r2, #8
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043e6:	4805      	ldr	r0, [pc, #20]	; (80043fc <MX_SPI2_Init+0x74>)
 80043e8:	f003 fc50 	bl	8007c8c <HAL_SPI_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80043f2:	f000 f8b9 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000540 	.word	0x20000540
 8004400:	40003800 	.word	0x40003800

08004404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <MX_USART2_UART_Init+0x58>)
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <MX_USART2_UART_Init+0x5c>)
 800440c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800440e:	4b13      	ldr	r3, [pc, #76]	; (800445c <MX_USART2_UART_Init+0x58>)
 8004410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <MX_USART2_UART_Init+0x58>)
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <MX_USART2_UART_Init+0x58>)
 800441e:	2200      	movs	r2, #0
 8004420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <MX_USART2_UART_Init+0x58>)
 8004424:	2200      	movs	r2, #0
 8004426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <MX_USART2_UART_Init+0x58>)
 800442a:	220c      	movs	r2, #12
 800442c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <MX_USART2_UART_Init+0x58>)
 8004430:	2200      	movs	r2, #0
 8004432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <MX_USART2_UART_Init+0x58>)
 8004436:	2200      	movs	r2, #0
 8004438:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <MX_USART2_UART_Init+0x58>)
 800443c:	2200      	movs	r2, #0
 800443e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <MX_USART2_UART_Init+0x58>)
 8004442:	2200      	movs	r2, #0
 8004444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004446:	4805      	ldr	r0, [pc, #20]	; (800445c <MX_USART2_UART_Init+0x58>)
 8004448:	f004 f9b0 	bl	80087ac <HAL_UART_Init>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004452:	f000 f889 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20001c28 	.word	0x20001c28
 8004460:	40004400 	.word	0x40004400

08004464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446a:	f107 0314 	add.w	r3, r7, #20
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	60da      	str	r2, [r3, #12]
 8004478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800447a:	4b39      	ldr	r3, [pc, #228]	; (8004560 <MX_GPIO_Init+0xfc>)
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	4a38      	ldr	r2, [pc, #224]	; (8004560 <MX_GPIO_Init+0xfc>)
 8004480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004484:	6153      	str	r3, [r2, #20]
 8004486:	4b36      	ldr	r3, [pc, #216]	; (8004560 <MX_GPIO_Init+0xfc>)
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004492:	4b33      	ldr	r3, [pc, #204]	; (8004560 <MX_GPIO_Init+0xfc>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4a32      	ldr	r2, [pc, #200]	; (8004560 <MX_GPIO_Init+0xfc>)
 8004498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800449c:	6153      	str	r3, [r2, #20]
 800449e:	4b30      	ldr	r3, [pc, #192]	; (8004560 <MX_GPIO_Init+0xfc>)
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044aa:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <MX_GPIO_Init+0xfc>)
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <MX_GPIO_Init+0xfc>)
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	6153      	str	r3, [r2, #20]
 80044b6:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <MX_GPIO_Init+0xfc>)
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c2:	4b27      	ldr	r3, [pc, #156]	; (8004560 <MX_GPIO_Init+0xfc>)
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4a26      	ldr	r2, [pc, #152]	; (8004560 <MX_GPIO_Init+0xfc>)
 80044c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044cc:	6153      	str	r3, [r2, #20]
 80044ce:	4b24      	ldr	r3, [pc, #144]	; (8004560 <MX_GPIO_Init+0xfc>)
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80044da:	2200      	movs	r2, #0
 80044dc:	2110      	movs	r1, #16
 80044de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044e2:	f001 fd27 	bl	8005f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 80044e6:	2200      	movs	r2, #0
 80044e8:	f641 4108 	movw	r1, #7176	; 0x1c08
 80044ec:	481d      	ldr	r0, [pc, #116]	; (8004564 <MX_GPIO_Init+0x100>)
 80044ee:	f001 fd21 	bl	8005f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80044f2:	2310      	movs	r3, #16
 80044f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fe:	2300      	movs	r3, #0
 8004500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004502:	f107 0314 	add.w	r3, r7, #20
 8004506:	4619      	mov	r1, r3
 8004508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800450c:	f001 fb80 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 8004510:	f641 4308 	movw	r3, #7176	; 0x1c08
 8004514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004516:	2301      	movs	r3, #1
 8004518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451e:	2300      	movs	r3, #0
 8004520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004522:	f107 0314 	add.w	r3, r7, #20
 8004526:	4619      	mov	r1, r3
 8004528:	480e      	ldr	r0, [pc, #56]	; (8004564 <MX_GPIO_Init+0x100>)
 800452a:	f001 fb71 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800452e:	2320      	movs	r3, #32
 8004530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004532:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453c:	f107 0314 	add.w	r3, r7, #20
 8004540:	4619      	mov	r1, r3
 8004542:	4808      	ldr	r0, [pc, #32]	; (8004564 <MX_GPIO_Init+0x100>)
 8004544:	f001 fb64 	bl	8005c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004548:	2200      	movs	r2, #0
 800454a:	2100      	movs	r1, #0
 800454c:	2017      	movs	r0, #23
 800454e:	f001 fab2 	bl	8005ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004552:	2017      	movs	r0, #23
 8004554:	f001 facb 	bl	8005aee <HAL_NVIC_EnableIRQ>

}
 8004558:	bf00      	nop
 800455a:	3728      	adds	r7, #40	; 0x28
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	48000400 	.word	0x48000400

08004568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800456c:	b672      	cpsid	i
}
 800456e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004570:	e7fe      	b.n	8004570 <Error_Handler+0x8>

08004572 <modDelayTick1ms>:
	if(SysTick_Config(72000)){
		while(1); //Error setting SysTick.
	}
}

uint8_t modDelayTick1ms(uint32_t *last, uint32_t ticks) {
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
	if((uint32_t)(HAL_GetTick() - *last) >= ticks)
 800457c:	f000 fb44 	bl	8004c08 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d806      	bhi.n	800459c <modDelayTick1ms+0x2a>
	{
		*last = HAL_GetTick();
 800458e:	f000 fb3b 	bl	8004c08 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	601a      	str	r2, [r3, #0]
		return true;
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <modDelayTick1ms+0x2c>
	}

	return false;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_MspInit+0x44>)
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <HAL_MspInit+0x44>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	6193      	str	r3, [r2, #24]
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_MspInit+0x44>)
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_MspInit+0x44>)
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	4a08      	ldr	r2, [pc, #32]	; (80045ec <HAL_MspInit+0x44>)
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	61d3      	str	r3, [r2, #28]
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_MspInit+0x44>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000

080045f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f8:	f107 0314 	add.w	r3, r7, #20
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	60da      	str	r2, [r3, #12]
 8004606:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <HAL_CAN_MspInit+0x90>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d131      	bne.n	8004676 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004612:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <HAL_CAN_MspInit+0x94>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	4a1b      	ldr	r2, [pc, #108]	; (8004684 <HAL_CAN_MspInit+0x94>)
 8004618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800461c:	61d3      	str	r3, [r2, #28]
 800461e:	4b19      	ldr	r3, [pc, #100]	; (8004684 <HAL_CAN_MspInit+0x94>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_CAN_MspInit+0x94>)
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_CAN_MspInit+0x94>)
 8004630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004634:	6153      	str	r3, [r2, #20]
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <HAL_CAN_MspInit+0x94>)
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004642:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004650:	2303      	movs	r3, #3
 8004652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8004654:	2309      	movs	r3, #9
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4619      	mov	r1, r3
 800465e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004662:	f001 fad5 	bl	8005c10 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8004666:	2200      	movs	r2, #0
 8004668:	2100      	movs	r1, #0
 800466a:	2014      	movs	r0, #20
 800466c:	f001 fa23 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8004670:	2014      	movs	r0, #20
 8004672:	f001 fa3c 	bl	8005aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8004676:	bf00      	nop
 8004678:	3728      	adds	r7, #40	; 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40006400 	.word	0x40006400
 8004684:	40021000 	.word	0x40021000

08004688 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <HAL_RTC_MspInit+0x44>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d111      	bne.n	80046be <HAL_RTC_MspInit+0x36>
 800469a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046a8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <HAL_RTC_MspInit+0x48>)
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	461a      	mov	r2, r3
 80046ba:	2301      	movs	r3, #1
 80046bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40002800 	.word	0x40002800
 80046d0:	10908100 	.word	0x10908100

080046d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08c      	sub	sp, #48	; 0x30
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	f107 031c 	add.w	r3, r7, #28
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2f      	ldr	r2, [pc, #188]	; (80047b0 <HAL_SPI_MspInit+0xdc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d129      	bne.n	800474a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	4a2e      	ldr	r2, [pc, #184]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 80046fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004700:	6193      	str	r3, [r2, #24]
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 8004714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004718:	6153      	str	r3, [r2, #20]
 800471a:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004726:	23e0      	movs	r3, #224	; 0xe0
 8004728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004736:	2305      	movs	r3, #5
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473a:	f107 031c 	add.w	r3, r7, #28
 800473e:	4619      	mov	r1, r3
 8004740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004744:	f001 fa64 	bl	8005c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004748:	e02d      	b.n	80047a6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1a      	ldr	r2, [pc, #104]	; (80047b8 <HAL_SPI_MspInit+0xe4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d128      	bne.n	80047a6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 800475a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800475e:	61d3      	str	r3, [r2, #28]
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 8004772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004776:	6153      	str	r3, [r2, #20]
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_SPI_MspInit+0xe0>)
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004784:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478a:	2302      	movs	r3, #2
 800478c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004792:	2303      	movs	r3, #3
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004796:	2305      	movs	r3, #5
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800479a:	f107 031c 	add.w	r3, r7, #28
 800479e:	4619      	mov	r1, r3
 80047a0:	4806      	ldr	r0, [pc, #24]	; (80047bc <HAL_SPI_MspInit+0xe8>)
 80047a2:	f001 fa35 	bl	8005c10 <HAL_GPIO_Init>
}
 80047a6:	bf00      	nop
 80047a8:	3730      	adds	r7, #48	; 0x30
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40013000 	.word	0x40013000
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40003800 	.word	0x40003800
 80047bc:	48000400 	.word	0x48000400

080047c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	; 0x28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c8:	f107 0314 	add.w	r3, r7, #20
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <HAL_UART_MspInit+0x8c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d130      	bne.n	8004844 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <HAL_UART_MspInit+0x90>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <HAL_UART_MspInit+0x90>)
 80047e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ec:	61d3      	str	r3, [r2, #28]
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <HAL_UART_MspInit+0x90>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047fa:	4b15      	ldr	r3, [pc, #84]	; (8004850 <HAL_UART_MspInit+0x90>)
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	4a14      	ldr	r2, [pc, #80]	; (8004850 <HAL_UART_MspInit+0x90>)
 8004800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004804:	6153      	str	r3, [r2, #20]
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <HAL_UART_MspInit+0x90>)
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004812:	230c      	movs	r3, #12
 8004814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004816:	2302      	movs	r3, #2
 8004818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800481e:	2303      	movs	r3, #3
 8004820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004822:	2307      	movs	r3, #7
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	4619      	mov	r1, r3
 800482c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004830:	f001 f9ee 	bl	8005c10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004834:	2200      	movs	r2, #0
 8004836:	2100      	movs	r1, #0
 8004838:	2026      	movs	r0, #38	; 0x26
 800483a:	f001 f93c 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800483e:	2026      	movs	r0, #38	; 0x26
 8004840:	f001 f955 	bl	8005aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004844:	bf00      	nop
 8004846:	3728      	adds	r7, #40	; 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40004400 	.word	0x40004400
 8004850:	40021000 	.word	0x40021000

08004854 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <SDTimer_Handler+0x40>)
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <SDTimer_Handler+0x1c>
    Timer1--;
 8004862:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <SDTimer_Handler+0x40>)
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <SDTimer_Handler+0x40>)
 800486e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <SDTimer_Handler+0x44>)
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d006      	beq.n	8004888 <SDTimer_Handler+0x34>
    Timer2--;
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <SDTimer_Handler+0x44>)
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <SDTimer_Handler+0x44>)
 8004886:	801a      	strh	r2, [r3, #0]
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20002e0c 	.word	0x20002e0c
 8004898:	20002e0a 	.word	0x20002e0a

0800489c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048a0:	e7fe      	b.n	80048a0 <NMI_Handler+0x4>

080048a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048a6:	e7fe      	b.n	80048a6 <HardFault_Handler+0x4>

080048a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048ac:	e7fe      	b.n	80048ac <MemManage_Handler+0x4>

080048ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048b2:	e7fe      	b.n	80048b2 <BusFault_Handler+0x4>

080048b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048b8:	e7fe      	b.n	80048b8 <UsageFault_Handler+0x4>

080048ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <SysTick_Handler+0x30>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	3301      	adds	r3, #1
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	4b08      	ldr	r3, [pc, #32]	; (8004914 <SysTick_Handler+0x30>)
 80048f4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <SysTick_Handler+0x30>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b09      	cmp	r3, #9
 80048fe:	d904      	bls.n	800490a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <SysTick_Handler+0x30>)
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004906:	f7ff ffa5 	bl	8004854 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800490a:	f000 f969 	bl	8004be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2000022c 	.word	0x2000022c

08004918 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800491c:	4802      	ldr	r0, [pc, #8]	; (8004928 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800491e:	f000 fdbf 	bl	80054a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20001630 	.word	0x20001630

0800492c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004930:	2020      	movs	r0, #32
 8004932:	f001 fb31 	bl	8005f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004940:	4802      	ldr	r0, [pc, #8]	; (800494c <USART2_IRQHandler+0x10>)
 8004942:	f004 f863 	bl	8008a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20001c28 	.word	0x20001c28

08004950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
	return 1;
 8004954:	2301      	movs	r3, #1
}
 8004956:	4618      	mov	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <_kill>:

int _kill(int pid, int sig)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800496a:	f009 ffc9 	bl	800e900 <__errno>
 800496e:	4603      	mov	r3, r0
 8004970:	2216      	movs	r2, #22
 8004972:	601a      	str	r2, [r3, #0]
	return -1;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_exit>:

void _exit (int status)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004988:	f04f 31ff 	mov.w	r1, #4294967295
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ffe7 	bl	8004960 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004992:	e7fe      	b.n	8004992 <_exit+0x12>

08004994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e00a      	b.n	80049bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80049a6:	f3af 8000 	nop.w
 80049aa:	4601      	mov	r1, r0
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	60ba      	str	r2, [r7, #8]
 80049b2:	b2ca      	uxtb	r2, r1
 80049b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3301      	adds	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	dbf0      	blt.n	80049a6 <_read+0x12>
	}

return len;
 80049c4:	687b      	ldr	r3, [r7, #4]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b086      	sub	sp, #24
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e009      	b.n	80049f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	60ba      	str	r2, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3301      	adds	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	dbf1      	blt.n	80049e0 <_write+0x12>
	}
	return len;
 80049fc:	687b      	ldr	r3, [r7, #4]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <_close>:

int _close(int file)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8004a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a2e:	605a      	str	r2, [r3, #4]
	return 0;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <_isatty>:

int _isatty(int file)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
	return 1;
 8004a46:	2301      	movs	r3, #1
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <_sbrk+0x5c>)
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <_sbrk+0x60>)
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a84:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <_sbrk+0x64>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a8c:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <_sbrk+0x64>)
 8004a8e:	4a12      	ldr	r2, [pc, #72]	; (8004ad8 <_sbrk+0x68>)
 8004a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <_sbrk+0x64>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d207      	bcs.n	8004ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004aa0:	f009 ff2e 	bl	800e900 <__errno>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	220c      	movs	r2, #12
 8004aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	e009      	b.n	8004ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ab0:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <_sbrk+0x64>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <_sbrk+0x64>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <_sbrk+0x64>)
 8004ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	2000a000 	.word	0x2000a000
 8004ad0:	00000400 	.word	0x00000400
 8004ad4:	20000230 	.word	0x20000230
 8004ad8:	20004e88 	.word	0x20004e88

08004adc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <SystemInit+0x20>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	4a05      	ldr	r2, [pc, #20]	; (8004afc <SystemInit+0x20>)
 8004ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b04:	480d      	ldr	r0, [pc, #52]	; (8004b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8004b06:	490e      	ldr	r1, [pc, #56]	; (8004b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b08:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <LoopForever+0xe>)
  movs r3, #0
 8004b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b0c:	e002      	b.n	8004b14 <LoopCopyDataInit>

08004b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b12:	3304      	adds	r3, #4

08004b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b18:	d3f9      	bcc.n	8004b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b1a:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b1c:	4c0b      	ldr	r4, [pc, #44]	; (8004b4c <LoopForever+0x16>)
  movs r3, #0
 8004b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b20:	e001      	b.n	8004b26 <LoopFillZerobss>

08004b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b24:	3204      	adds	r2, #4

08004b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b28:	d3fb      	bcc.n	8004b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b2a:	f7ff ffd7 	bl	8004adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b2e:	f009 feed 	bl	800e90c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b32:	f7ff f9ff 	bl	8003f34 <main>

08004b36 <LoopForever>:

LoopForever:
    b LoopForever
 8004b36:	e7fe      	b.n	8004b36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b38:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b40:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004b44:	08012eb4 	.word	0x08012eb4
  ldr r2, =_sbss
 8004b48:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004b4c:	20004e88 	.word	0x20004e88

08004b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b50:	e7fe      	b.n	8004b50 <ADC1_2_IRQHandler>
	...

08004b54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <HAL_Init+0x28>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a07      	ldr	r2, [pc, #28]	; (8004b7c <HAL_Init+0x28>)
 8004b5e:	f043 0310 	orr.w	r3, r3, #16
 8004b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b64:	2003      	movs	r0, #3
 8004b66:	f000 ff9b 	bl	8005aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b6a:	200f      	movs	r0, #15
 8004b6c:	f000 f808 	bl	8004b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b70:	f7ff fd1a 	bl	80045a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40022000 	.word	0x40022000

08004b80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_InitTick+0x54>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <HAL_InitTick+0x58>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	4619      	mov	r1, r3
 8004b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 ffb3 	bl	8005b0a <HAL_SYSTICK_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e00e      	b.n	8004bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b0f      	cmp	r3, #15
 8004bb2:	d80a      	bhi.n	8004bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	f000 ff7b 	bl	8005ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bc0:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <HAL_InitTick+0x5c>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e000      	b.n	8004bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000004 	.word	0x20000004
 8004bd8:	2000000c 	.word	0x2000000c
 8004bdc:	20000008 	.word	0x20000008

08004be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_IncTick+0x20>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_IncTick+0x24>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4413      	add	r3, r2
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <HAL_IncTick+0x24>)
 8004bf2:	6013      	str	r3, [r2, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	2000000c 	.word	0x2000000c
 8004c04:	20002e10 	.word	0x20002e10

08004c08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <HAL_GetTick+0x14>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20002e10 	.word	0x20002e10

08004c20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c28:	f7ff ffee 	bl	8004c08 <HAL_GetTick>
 8004c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d005      	beq.n	8004c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <HAL_Delay+0x44>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004c46:	bf00      	nop
 8004c48:	f7ff ffde 	bl	8004c08 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d8f7      	bhi.n	8004c48 <HAL_Delay+0x28>
  {
  }
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e0ed      	b.n	8004e56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fcb2 	bl	80045f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c9c:	f7ff ffb4 	bl	8004c08 <HAL_GetTick>
 8004ca0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ca2:	e012      	b.n	8004cca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ca4:	f7ff ffb0 	bl	8004c08 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b0a      	cmp	r3, #10
 8004cb0:	d90b      	bls.n	8004cca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0c5      	b.n	8004e56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0e5      	beq.n	8004ca4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0202 	bic.w	r2, r2, #2
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ce8:	f7ff ff8e 	bl	8004c08 <HAL_GetTick>
 8004cec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cee:	e012      	b.n	8004d16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cf0:	f7ff ff8a 	bl	8004c08 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b0a      	cmp	r3, #10
 8004cfc:	d90b      	bls.n	8004d16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2205      	movs	r2, #5
 8004d0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e09f      	b.n	8004e56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e5      	bne.n	8004cf0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7e1b      	ldrb	r3, [r3, #24]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d108      	bne.n	8004d3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e007      	b.n	8004d4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7e5b      	ldrb	r3, [r3, #25]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d108      	bne.n	8004d68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e007      	b.n	8004d78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	7e9b      	ldrb	r3, [r3, #26]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d108      	bne.n	8004d92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0220 	orr.w	r2, r2, #32
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e007      	b.n	8004da2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0220 	bic.w	r2, r2, #32
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7edb      	ldrb	r3, [r3, #27]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d108      	bne.n	8004dbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0210 	bic.w	r2, r2, #16
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e007      	b.n	8004dcc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0210 	orr.w	r2, r2, #16
 8004dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	7f1b      	ldrb	r3, [r3, #28]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d108      	bne.n	8004de6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0208 	orr.w	r2, r2, #8
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e007      	b.n	8004df6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0208 	bic.w	r2, r2, #8
 8004df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7f5b      	ldrb	r3, [r3, #29]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d108      	bne.n	8004e10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0204 	orr.w	r2, r2, #4
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e007      	b.n	8004e20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0204 	bic.w	r2, r2, #4
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	ea42 0103 	orr.w	r1, r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b087      	sub	sp, #28
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e74:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d003      	beq.n	8004e84 <HAL_CAN_ConfigFilter+0x26>
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	f040 80aa 	bne.w	8004fd8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e8a:	f043 0201 	orr.w	r2, r3, #1
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d123      	bne.n	8004f06 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	401a      	ands	r2, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ee0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3248      	adds	r2, #72	; 0x48
 8004ee6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004efa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004efc:	6979      	ldr	r1, [r7, #20]
 8004efe:	3348      	adds	r3, #72	; 0x48
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	440b      	add	r3, r1
 8004f04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d122      	bne.n	8004f54 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	3248      	adds	r2, #72	; 0x48
 8004f34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	3348      	adds	r3, #72	; 0x48
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	401a      	ands	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004f6e:	e007      	b.n	8004f80 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004f9a:	e007      	b.n	8004fac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d107      	bne.n	8004fc4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e006      	b.n	8004fe6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	d12e      	bne.n	8005064 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800501e:	f7ff fdf3 	bl	8004c08 <HAL_GetTick>
 8005022:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005024:	e012      	b.n	800504c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005026:	f7ff fdef 	bl	8004c08 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b0a      	cmp	r3, #10
 8005032:	d90b      	bls.n	800504c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2205      	movs	r2, #5
 8005044:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e012      	b.n	8005072 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e5      	bne.n	8005026 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e006      	b.n	8005072 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800507a:	b480      	push	{r7}
 800507c:	b089      	sub	sp, #36	; 0x24
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800508e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005098:	7ffb      	ldrb	r3, [r7, #31]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d003      	beq.n	80050a6 <HAL_CAN_AddTxMessage+0x2c>
 800509e:	7ffb      	ldrb	r3, [r7, #31]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	f040 80b8 	bne.w	8005216 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80a0 	beq.w	8005206 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	0e1b      	lsrs	r3, r3, #24
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d907      	bls.n	80050e6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e09e      	b.n	8005224 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80050e6:	2201      	movs	r2, #1
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	409a      	lsls	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10d      	bne.n	8005114 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	6809      	ldr	r1, [r1, #0]
 8005106:	431a      	orrs	r2, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	3318      	adds	r3, #24
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	440b      	add	r3, r1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e00f      	b.n	8005134 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800511e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005124:	68f9      	ldr	r1, [r7, #12]
 8005126:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005128:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	3318      	adds	r3, #24
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	440b      	add	r3, r1
 8005132:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3318      	adds	r3, #24
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	440b      	add	r3, r1
 8005144:	3304      	adds	r3, #4
 8005146:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	7d1b      	ldrb	r3, [r3, #20]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d111      	bne.n	8005174 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3318      	adds	r3, #24
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	4413      	add	r3, r2
 800515c:	3304      	adds	r3, #4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	6811      	ldr	r1, [r2, #0]
 8005164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3318      	adds	r3, #24
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	440b      	add	r3, r1
 8005170:	3304      	adds	r3, #4
 8005172:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3307      	adds	r3, #7
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	061a      	lsls	r2, r3, #24
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3306      	adds	r3, #6
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3305      	adds	r3, #5
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	4313      	orrs	r3, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	3204      	adds	r2, #4
 8005194:	7812      	ldrb	r2, [r2, #0]
 8005196:	4610      	mov	r0, r2
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	6811      	ldr	r1, [r2, #0]
 800519c:	ea43 0200 	orr.w	r2, r3, r0
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	440b      	add	r3, r1
 80051a6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80051aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3303      	adds	r3, #3
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	061a      	lsls	r2, r3, #24
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3302      	adds	r3, #2
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3301      	adds	r3, #1
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4313      	orrs	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	4610      	mov	r0, r2
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	6811      	ldr	r1, [r2, #0]
 80051d2:	ea43 0200 	orr.w	r2, r3, r0
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	440b      	add	r3, r1
 80051dc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80051e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	3318      	adds	r3, #24
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	4413      	add	r3, r2
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	6811      	ldr	r1, [r2, #0]
 80051f4:	f043 0201 	orr.w	r2, r3, #1
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3318      	adds	r3, #24
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	440b      	add	r3, r1
 8005200:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e00e      	b.n	8005224 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e006      	b.n	8005224 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3724      	adds	r7, #36	; 0x24
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005244:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d003      	beq.n	8005254 <HAL_CAN_GetRxMessage+0x24>
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b02      	cmp	r3, #2
 8005250:	f040 80f3 	bne.w	800543a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10e      	bne.n	8005278 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d116      	bne.n	8005296 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0e7      	b.n	8005448 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d107      	bne.n	8005296 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e0d8      	b.n	8005448 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	331b      	adds	r3, #27
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	4413      	add	r3, r2
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0204 	and.w	r2, r3, #4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10c      	bne.n	80052ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	331b      	adds	r3, #27
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	4413      	add	r3, r2
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	0d5b      	lsrs	r3, r3, #21
 80052c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e00b      	b.n	80052e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	331b      	adds	r3, #27
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4413      	add	r3, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	08db      	lsrs	r3, r3, #3
 80052de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	331b      	adds	r3, #27
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	4413      	add	r3, r2
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0202 	and.w	r2, r3, #2
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	331b      	adds	r3, #27
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	4413      	add	r3, r2
 8005308:	3304      	adds	r3, #4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	331b      	adds	r3, #27
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	4413      	add	r3, r2
 8005320:	3304      	adds	r3, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	0a1b      	lsrs	r3, r3, #8
 8005326:	b2da      	uxtb	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	331b      	adds	r3, #27
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	4413      	add	r3, r2
 8005338:	3304      	adds	r3, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	4413      	add	r3, r2
 800534e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	4413      	add	r3, r2
 8005364:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	0a1a      	lsrs	r2, r3, #8
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	4413      	add	r3, r2
 800537e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	0c1a      	lsrs	r2, r3, #16
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	3302      	adds	r3, #2
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	4413      	add	r3, r2
 8005398:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	0e1a      	lsrs	r2, r3, #24
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	3303      	adds	r3, #3
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	3304      	adds	r3, #4
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	0a1a      	lsrs	r2, r3, #8
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	3305      	adds	r3, #5
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	0c1a      	lsrs	r2, r3, #16
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	3306      	adds	r3, #6
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	0e1a      	lsrs	r2, r3, #24
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	3307      	adds	r3, #7
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d108      	bne.n	8005426 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0220 	orr.w	r2, r2, #32
 8005422:	60da      	str	r2, [r3, #12]
 8005424:	e007      	b.n	8005436 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0220 	orr.w	r2, r2, #32
 8005434:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e006      	b.n	8005448 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
  }
}
 8005448:	4618      	mov	r0, r3
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005464:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d002      	beq.n	8005472 <HAL_CAN_ActivateNotification+0x1e>
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d109      	bne.n	8005486 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6959      	ldr	r1, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e006      	b.n	8005494 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	; 0x28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d07c      	beq.n	80055e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d023      	beq.n	8005538 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f983 	bl	800580e <HAL_CAN_TxMailbox0CompleteCallback>
 8005508:	e016      	b.n	8005538 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
 800551c:	e00c      	b.n	8005538 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
 8005530:	e002      	b.n	8005538 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f989 	bl	800584a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d024      	beq.n	800558c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800554a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f963 	bl	8005822 <HAL_CAN_TxMailbox1CompleteCallback>
 800555c:	e016      	b.n	800558c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
 8005570:	e00c      	b.n	800558c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
 8005584:	e002      	b.n	800558c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f969 	bl	800585e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d024      	beq.n	80055e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800559e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f943 	bl	8005836 <HAL_CAN_TxMailbox2CompleteCallback>
 80055b0:	e016      	b.n	80055e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
 80055c4:	e00c      	b.n	80055e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	e002      	b.n	80055e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f949 	bl	8005872 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2210      	movs	r2, #16
 8005602:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d006      	beq.n	8005626 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2208      	movs	r2, #8
 800561e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f930 	bl	8005886 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fd fdf4 	bl	800322c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800565e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2210      	movs	r2, #16
 8005666:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2208      	movs	r2, #8
 8005682:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f912 	bl	80058ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8f9 	bl	800589a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2210      	movs	r2, #16
 80056c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8fc 	bl	80058c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d006      	beq.n	80056ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2208      	movs	r2, #8
 80056e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8f5 	bl	80058d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d07b      	beq.n	80057ee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d072      	beq.n	80057e6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	f043 0302 	orr.w	r3, r3, #2
 8005736:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	f043 0304 	orr.w	r3, r3, #4
 8005752:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575a:	2b00      	cmp	r3, #0
 800575c:	d043      	beq.n	80057e6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005764:	2b00      	cmp	r3, #0
 8005766:	d03e      	beq.n	80057e6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800576e:	2b60      	cmp	r3, #96	; 0x60
 8005770:	d02b      	beq.n	80057ca <HAL_CAN_IRQHandler+0x32a>
 8005772:	2b60      	cmp	r3, #96	; 0x60
 8005774:	d82e      	bhi.n	80057d4 <HAL_CAN_IRQHandler+0x334>
 8005776:	2b50      	cmp	r3, #80	; 0x50
 8005778:	d022      	beq.n	80057c0 <HAL_CAN_IRQHandler+0x320>
 800577a:	2b50      	cmp	r3, #80	; 0x50
 800577c:	d82a      	bhi.n	80057d4 <HAL_CAN_IRQHandler+0x334>
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d019      	beq.n	80057b6 <HAL_CAN_IRQHandler+0x316>
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d826      	bhi.n	80057d4 <HAL_CAN_IRQHandler+0x334>
 8005786:	2b30      	cmp	r3, #48	; 0x30
 8005788:	d010      	beq.n	80057ac <HAL_CAN_IRQHandler+0x30c>
 800578a:	2b30      	cmp	r3, #48	; 0x30
 800578c:	d822      	bhi.n	80057d4 <HAL_CAN_IRQHandler+0x334>
 800578e:	2b10      	cmp	r3, #16
 8005790:	d002      	beq.n	8005798 <HAL_CAN_IRQHandler+0x2f8>
 8005792:	2b20      	cmp	r3, #32
 8005794:	d005      	beq.n	80057a2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005796:	e01d      	b.n	80057d4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	f043 0308 	orr.w	r3, r3, #8
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057a0:	e019      	b.n	80057d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	f043 0310 	orr.w	r3, r3, #16
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057aa:	e014      	b.n	80057d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	f043 0320 	orr.w	r3, r3, #32
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057b4:	e00f      	b.n	80057d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057be:	e00a      	b.n	80057d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057c8:	e005      	b.n	80057d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057d2:	e000      	b.n	80057d6 <HAL_CAN_IRQHandler+0x336>
            break;
 80057d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2204      	movs	r2, #4
 80057ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f872 	bl	80058ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005806:	bf00      	nop
 8005808:	3728      	adds	r7, #40	; 0x28
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800591c:	4013      	ands	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005932:	4a04      	ldr	r2, [pc, #16]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	60d3      	str	r3, [r2, #12]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <__NVIC_GetPriorityGrouping+0x18>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	f003 0307 	and.w	r3, r3, #7
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800596e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	db0b      	blt.n	800598e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	f003 021f 	and.w	r2, r3, #31
 800597c:	4907      	ldr	r1, [pc, #28]	; (800599c <__NVIC_EnableIRQ+0x38>)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2001      	movs	r0, #1
 8005986:	fa00 f202 	lsl.w	r2, r0, r2
 800598a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	e000e100 	.word	0xe000e100

080059a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db0a      	blt.n	80059ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	490c      	ldr	r1, [pc, #48]	; (80059ec <__NVIC_SetPriority+0x4c>)
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	0112      	lsls	r2, r2, #4
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	440b      	add	r3, r1
 80059c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059c8:	e00a      	b.n	80059e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4908      	ldr	r1, [pc, #32]	; (80059f0 <__NVIC_SetPriority+0x50>)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	3b04      	subs	r3, #4
 80059d8:	0112      	lsls	r2, r2, #4
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	440b      	add	r3, r1
 80059de:	761a      	strb	r2, [r3, #24]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000e100 	.word	0xe000e100
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f1c3 0307 	rsb	r3, r3, #7
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	bf28      	it	cs
 8005a12:	2304      	movcs	r3, #4
 8005a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d902      	bls.n	8005a24 <NVIC_EncodePriority+0x30>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3b03      	subs	r3, #3
 8005a22:	e000      	b.n	8005a26 <NVIC_EncodePriority+0x32>
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	401a      	ands	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	43d9      	mvns	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	4313      	orrs	r3, r2
         );
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a6c:	d301      	bcc.n	8005a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e00f      	b.n	8005a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a72:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <SysTick_Config+0x40>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a7a:	210f      	movs	r1, #15
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	f7ff ff8e 	bl	80059a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <SysTick_Config+0x40>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <SysTick_Config+0x40>)
 8005a8c:	2207      	movs	r2, #7
 8005a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	e000e010 	.word	0xe000e010

08005aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff ff29 	bl	8005900 <__NVIC_SetPriorityGrouping>
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ac8:	f7ff ff3e 	bl	8005948 <__NVIC_GetPriorityGrouping>
 8005acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	6978      	ldr	r0, [r7, #20]
 8005ad4:	f7ff ff8e 	bl	80059f4 <NVIC_EncodePriority>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff5d 	bl	80059a0 <__NVIC_SetPriority>
}
 8005ae6:	bf00      	nop
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	4603      	mov	r3, r0
 8005af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff ff31 	bl	8005964 <__NVIC_EnableIRQ>
}
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff ffa2 	bl	8005a5c <SysTick_Config>
 8005b18:	4603      	mov	r3, r0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d008      	beq.n	8005b46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2204      	movs	r2, #4
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e020      	b.n	8005b88 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 020e 	bic.w	r2, r2, #14
 8005b54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0201 	bic.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	2101      	movs	r1, #1
 8005b70:	fa01 f202 	lsl.w	r2, r1, r2
 8005b74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d005      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2204      	movs	r2, #4
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e027      	b.n	8005c06 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 020e 	bic.w	r2, r2, #14
 8005bc4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	2101      	movs	r1, #1
 8005be0:	fa01 f202 	lsl.w	r2, r1, r2
 8005be4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4798      	blx	r3
    } 
  }
  return status;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c1e:	e154      	b.n	8005eca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	2101      	movs	r1, #1
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8146 	beq.w	8005ec4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d005      	beq.n	8005c50 <HAL_GPIO_Init+0x40>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d130      	bne.n	8005cb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4013      	ands	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c86:	2201      	movs	r2, #1
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4013      	ands	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	f003 0201 	and.w	r2, r3, #1
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d017      	beq.n	8005cee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	2203      	movs	r2, #3
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d123      	bne.n	8005d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	08da      	lsrs	r2, r3, #3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3208      	adds	r2, #8
 8005d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	220f      	movs	r2, #15
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43db      	mvns	r3, r3
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	08da      	lsrs	r2, r3, #3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3208      	adds	r2, #8
 8005d3c:	6939      	ldr	r1, [r7, #16]
 8005d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4013      	ands	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f003 0203 	and.w	r2, r3, #3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80a0 	beq.w	8005ec4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d84:	4b58      	ldr	r3, [pc, #352]	; (8005ee8 <HAL_GPIO_Init+0x2d8>)
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	4a57      	ldr	r2, [pc, #348]	; (8005ee8 <HAL_GPIO_Init+0x2d8>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6193      	str	r3, [r2, #24]
 8005d90:	4b55      	ldr	r3, [pc, #340]	; (8005ee8 <HAL_GPIO_Init+0x2d8>)
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	60bb      	str	r3, [r7, #8]
 8005d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d9c:	4a53      	ldr	r2, [pc, #332]	; (8005eec <HAL_GPIO_Init+0x2dc>)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	089b      	lsrs	r3, r3, #2
 8005da2:	3302      	adds	r3, #2
 8005da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	220f      	movs	r2, #15
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dc6:	d019      	beq.n	8005dfc <HAL_GPIO_Init+0x1ec>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a49      	ldr	r2, [pc, #292]	; (8005ef0 <HAL_GPIO_Init+0x2e0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <HAL_GPIO_Init+0x1e8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a48      	ldr	r2, [pc, #288]	; (8005ef4 <HAL_GPIO_Init+0x2e4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00d      	beq.n	8005df4 <HAL_GPIO_Init+0x1e4>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a47      	ldr	r2, [pc, #284]	; (8005ef8 <HAL_GPIO_Init+0x2e8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <HAL_GPIO_Init+0x1e0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a46      	ldr	r2, [pc, #280]	; (8005efc <HAL_GPIO_Init+0x2ec>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d101      	bne.n	8005dec <HAL_GPIO_Init+0x1dc>
 8005de8:	2304      	movs	r3, #4
 8005dea:	e008      	b.n	8005dfe <HAL_GPIO_Init+0x1ee>
 8005dec:	2305      	movs	r3, #5
 8005dee:	e006      	b.n	8005dfe <HAL_GPIO_Init+0x1ee>
 8005df0:	2303      	movs	r3, #3
 8005df2:	e004      	b.n	8005dfe <HAL_GPIO_Init+0x1ee>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e002      	b.n	8005dfe <HAL_GPIO_Init+0x1ee>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <HAL_GPIO_Init+0x1ee>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	f002 0203 	and.w	r2, r2, #3
 8005e04:	0092      	lsls	r2, r2, #2
 8005e06:	4093      	lsls	r3, r2
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e0e:	4937      	ldr	r1, [pc, #220]	; (8005eec <HAL_GPIO_Init+0x2dc>)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	3302      	adds	r3, #2
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e1c:	4b38      	ldr	r3, [pc, #224]	; (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	43db      	mvns	r3, r3
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005e40:	4a2f      	ldr	r2, [pc, #188]	; (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e46:	4b2e      	ldr	r3, [pc, #184]	; (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4013      	ands	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005e6a:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e70:	4b23      	ldr	r3, [pc, #140]	; (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005e94:	4a1a      	ldr	r2, [pc, #104]	; (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e9a:	4b19      	ldr	r3, [pc, #100]	; (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005ebe:	4a10      	ldr	r2, [pc, #64]	; (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f47f aea3 	bne.w	8005c20 <HAL_GPIO_Init+0x10>
  }
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	48000400 	.word	0x48000400
 8005ef4:	48000800 	.word	0x48000800
 8005ef8:	48000c00 	.word	0x48000c00
 8005efc:	48001000 	.word	0x48001000
 8005f00:	40010400 	.word	0x40010400

08005f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	887b      	ldrh	r3, [r7, #2]
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	e001      	b.n	8005f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	807b      	strh	r3, [r7, #2]
 8005f40:	4613      	mov	r3, r2
 8005f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f44:	787b      	ldrb	r3, [r7, #1]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f4a:	887a      	ldrh	r2, [r7, #2]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f50:	e002      	b.n	8005f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f52:	887a      	ldrh	r2, [r7, #2]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f76:	887a      	ldrh	r2, [r7, #2]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	041a      	lsls	r2, r3, #16
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	43d9      	mvns	r1, r3
 8005f82:	887b      	ldrh	r3, [r7, #2]
 8005f84:	400b      	ands	r3, r1
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	619a      	str	r2, [r3, #24]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005fa2:	4b08      	ldr	r3, [pc, #32]	; (8005fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d006      	beq.n	8005fbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fae:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fd f9e8 	bl	800338c <HAL_GPIO_EXTI_Callback>
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40010400 	.word	0x40010400

08005fc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a04      	ldr	r2, [pc, #16]	; (8005fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd6:	6013      	str	r3, [r2, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40007000 	.word	0x40007000

08005fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	1d3b      	adds	r3, r7, #4
 8005ff2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f000 bef4 	b.w	8006dea <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 816a 	beq.w	80062e6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006012:	4bb3      	ldr	r3, [pc, #716]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b04      	cmp	r3, #4
 800601c:	d00c      	beq.n	8006038 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800601e:	4bb0      	ldr	r3, [pc, #704]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 030c 	and.w	r3, r3, #12
 8006026:	2b08      	cmp	r3, #8
 8006028:	d159      	bne.n	80060de <HAL_RCC_OscConfig+0xf6>
 800602a:	4bad      	ldr	r3, [pc, #692]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006036:	d152      	bne.n	80060de <HAL_RCC_OscConfig+0xf6>
 8006038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800603c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006040:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006044:	fa93 f3a3 	rbit	r3, r3
 8006048:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800604c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006050:	fab3 f383 	clz	r3, r3
 8006054:	b2db      	uxtb	r3, r3
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	b2db      	uxtb	r3, r3
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	d102      	bne.n	800606a <HAL_RCC_OscConfig+0x82>
 8006064:	4b9e      	ldr	r3, [pc, #632]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	e015      	b.n	8006096 <HAL_RCC_OscConfig+0xae>
 800606a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800606e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006072:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006076:	fa93 f3a3 	rbit	r3, r3
 800607a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800607e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006082:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006086:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800608a:	fa93 f3a3 	rbit	r3, r3
 800608e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006092:	4b93      	ldr	r3, [pc, #588]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800609a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800609e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80060a2:	fa92 f2a2 	rbit	r2, r2
 80060a6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80060aa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80060ae:	fab2 f282 	clz	r2, r2
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	f042 0220 	orr.w	r2, r2, #32
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	f002 021f 	and.w	r2, r2, #31
 80060be:	2101      	movs	r1, #1
 80060c0:	fa01 f202 	lsl.w	r2, r1, r2
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 810c 	beq.w	80062e4 <HAL_RCC_OscConfig+0x2fc>
 80060cc:	1d3b      	adds	r3, r7, #4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f040 8106 	bne.w	80062e4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f000 be86 	b.w	8006dea <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060de:	1d3b      	adds	r3, r7, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e8:	d106      	bne.n	80060f8 <HAL_RCC_OscConfig+0x110>
 80060ea:	4b7d      	ldr	r3, [pc, #500]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a7c      	ldr	r2, [pc, #496]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 80060f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e030      	b.n	800615a <HAL_RCC_OscConfig+0x172>
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10c      	bne.n	800611c <HAL_RCC_OscConfig+0x134>
 8006102:	4b77      	ldr	r3, [pc, #476]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a76      	ldr	r2, [pc, #472]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	4b74      	ldr	r3, [pc, #464]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a73      	ldr	r2, [pc, #460]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	e01e      	b.n	800615a <HAL_RCC_OscConfig+0x172>
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006126:	d10c      	bne.n	8006142 <HAL_RCC_OscConfig+0x15a>
 8006128:	4b6d      	ldr	r3, [pc, #436]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a6c      	ldr	r2, [pc, #432]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 800612e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b6a      	ldr	r3, [pc, #424]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a69      	ldr	r2, [pc, #420]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 800613a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e00b      	b.n	800615a <HAL_RCC_OscConfig+0x172>
 8006142:	4b67      	ldr	r3, [pc, #412]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a66      	ldr	r2, [pc, #408]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b64      	ldr	r3, [pc, #400]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a63      	ldr	r2, [pc, #396]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 8006154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006158:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800615a:	4b61      	ldr	r3, [pc, #388]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	f023 020f 	bic.w	r2, r3, #15
 8006162:	1d3b      	adds	r3, r7, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	495d      	ldr	r1, [pc, #372]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 800616a:	4313      	orrs	r3, r2
 800616c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d059      	beq.n	800622c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006178:	f7fe fd46 	bl	8004c08 <HAL_GetTick>
 800617c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006180:	e00a      	b.n	8006198 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006182:	f7fe fd41 	bl	8004c08 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d902      	bls.n	8006198 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	f000 be29 	b.w	8006dea <HAL_RCC_OscConfig+0xe02>
 8006198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800619c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80061a4:	fa93 f3a3 	rbit	r3, r3
 80061a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80061ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b0:	fab3 f383 	clz	r3, r3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d102      	bne.n	80061ca <HAL_RCC_OscConfig+0x1e2>
 80061c4:	4b46      	ldr	r3, [pc, #280]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	e015      	b.n	80061f6 <HAL_RCC_OscConfig+0x20e>
 80061ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80061d6:	fa93 f3a3 	rbit	r3, r3
 80061da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80061de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80061e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80061ea:	fa93 f3a3 	rbit	r3, r3
 80061ee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80061f2:	4b3b      	ldr	r3, [pc, #236]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80061fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006202:	fa92 f2a2 	rbit	r2, r2
 8006206:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800620a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800620e:	fab2 f282 	clz	r2, r2
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	f042 0220 	orr.w	r2, r2, #32
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	f002 021f 	and.w	r2, r2, #31
 800621e:	2101      	movs	r1, #1
 8006220:	fa01 f202 	lsl.w	r2, r1, r2
 8006224:	4013      	ands	r3, r2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0ab      	beq.n	8006182 <HAL_RCC_OscConfig+0x19a>
 800622a:	e05c      	b.n	80062e6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622c:	f7fe fcec 	bl	8004c08 <HAL_GetTick>
 8006230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006234:	e00a      	b.n	800624c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006236:	f7fe fce7 	bl	8004c08 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b64      	cmp	r3, #100	; 0x64
 8006244:	d902      	bls.n	800624c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	f000 bdcf 	b.w	8006dea <HAL_RCC_OscConfig+0xe02>
 800624c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006250:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006254:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006258:	fa93 f3a3 	rbit	r3, r3
 800625c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006260:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006264:	fab3 f383 	clz	r3, r3
 8006268:	b2db      	uxtb	r3, r3
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d102      	bne.n	800627e <HAL_RCC_OscConfig+0x296>
 8006278:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	e015      	b.n	80062aa <HAL_RCC_OscConfig+0x2c2>
 800627e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006282:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006286:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800628a:	fa93 f3a3 	rbit	r3, r3
 800628e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006296:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800629a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <HAL_RCC_OscConfig+0x2f8>)
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80062b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80062b6:	fa92 f2a2 	rbit	r2, r2
 80062ba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80062be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80062c2:	fab2 f282 	clz	r2, r2
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	f042 0220 	orr.w	r2, r2, #32
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	f002 021f 	and.w	r2, r2, #31
 80062d2:	2101      	movs	r1, #1
 80062d4:	fa01 f202 	lsl.w	r2, r1, r2
 80062d8:	4013      	ands	r3, r2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1ab      	bne.n	8006236 <HAL_RCC_OscConfig+0x24e>
 80062de:	e002      	b.n	80062e6 <HAL_RCC_OscConfig+0x2fe>
 80062e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 816f 	beq.w	80065d4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80062f6:	4bd0      	ldr	r3, [pc, #832]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006302:	4bcd      	ldr	r3, [pc, #820]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b08      	cmp	r3, #8
 800630c:	d16c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x400>
 800630e:	4bca      	ldr	r3, [pc, #808]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d166      	bne.n	80063e8 <HAL_RCC_OscConfig+0x400>
 800631a:	2302      	movs	r3, #2
 800631c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006324:	fa93 f3a3 	rbit	r3, r3
 8006328:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800632c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006330:	fab3 f383 	clz	r3, r3
 8006334:	b2db      	uxtb	r3, r3
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	d102      	bne.n	800634a <HAL_RCC_OscConfig+0x362>
 8006344:	4bbc      	ldr	r3, [pc, #752]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	e013      	b.n	8006372 <HAL_RCC_OscConfig+0x38a>
 800634a:	2302      	movs	r3, #2
 800634c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006350:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006354:	fa93 f3a3 	rbit	r3, r3
 8006358:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800635c:	2302      	movs	r3, #2
 800635e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006362:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006366:	fa93 f3a3 	rbit	r3, r3
 800636a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800636e:	4bb2      	ldr	r3, [pc, #712]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2202      	movs	r2, #2
 8006374:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006378:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800637c:	fa92 f2a2 	rbit	r2, r2
 8006380:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006384:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006388:	fab2 f282 	clz	r2, r2
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	f042 0220 	orr.w	r2, r2, #32
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	f002 021f 	and.w	r2, r2, #31
 8006398:	2101      	movs	r1, #1
 800639a:	fa01 f202 	lsl.w	r2, r1, r2
 800639e:	4013      	ands	r3, r2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <HAL_RCC_OscConfig+0x3cc>
 80063a4:	1d3b      	adds	r3, r7, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d002      	beq.n	80063b4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f000 bd1b 	b.w	8006dea <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b4:	4ba0      	ldr	r3, [pc, #640]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063bc:	1d3b      	adds	r3, r7, #4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	21f8      	movs	r1, #248	; 0xf8
 80063c4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80063cc:	fa91 f1a1 	rbit	r1, r1
 80063d0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80063d4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80063d8:	fab1 f181 	clz	r1, r1
 80063dc:	b2c9      	uxtb	r1, r1
 80063de:	408b      	lsls	r3, r1
 80063e0:	4995      	ldr	r1, [pc, #596]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e6:	e0f5      	b.n	80065d4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 8085 	beq.w	80064fe <HAL_RCC_OscConfig+0x516>
 80063f4:	2301      	movs	r3, #1
 80063f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80063fe:	fa93 f3a3 	rbit	r3, r3
 8006402:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006406:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800640a:	fab3 f383 	clz	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	461a      	mov	r2, r3
 800641c:	2301      	movs	r3, #1
 800641e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7fe fbf2 	bl	8004c08 <HAL_GetTick>
 8006424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006428:	e00a      	b.n	8006440 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800642a:	f7fe fbed 	bl	8004c08 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d902      	bls.n	8006440 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	f000 bcd5 	b.w	8006dea <HAL_RCC_OscConfig+0xe02>
 8006440:	2302      	movs	r3, #2
 8006442:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800644a:	fa93 f3a3 	rbit	r3, r3
 800644e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006452:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006456:	fab3 f383 	clz	r3, r3
 800645a:	b2db      	uxtb	r3, r3
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d102      	bne.n	8006470 <HAL_RCC_OscConfig+0x488>
 800646a:	4b73      	ldr	r3, [pc, #460]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	e013      	b.n	8006498 <HAL_RCC_OscConfig+0x4b0>
 8006470:	2302      	movs	r3, #2
 8006472:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006476:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800647a:	fa93 f3a3 	rbit	r3, r3
 800647e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006482:	2302      	movs	r3, #2
 8006484:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006488:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800648c:	fa93 f3a3 	rbit	r3, r3
 8006490:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006494:	4b68      	ldr	r3, [pc, #416]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	2202      	movs	r2, #2
 800649a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800649e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80064a2:	fa92 f2a2 	rbit	r2, r2
 80064a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80064aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80064ae:	fab2 f282 	clz	r2, r2
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	f042 0220 	orr.w	r2, r2, #32
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	f002 021f 	and.w	r2, r2, #31
 80064be:	2101      	movs	r1, #1
 80064c0:	fa01 f202 	lsl.w	r2, r1, r2
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0af      	beq.n	800642a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ca:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d2:	1d3b      	adds	r3, r7, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	21f8      	movs	r1, #248	; 0xf8
 80064da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80064e2:	fa91 f1a1 	rbit	r1, r1
 80064e6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80064ea:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80064ee:	fab1 f181 	clz	r1, r1
 80064f2:	b2c9      	uxtb	r1, r1
 80064f4:	408b      	lsls	r3, r1
 80064f6:	4950      	ldr	r1, [pc, #320]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	600b      	str	r3, [r1, #0]
 80064fc:	e06a      	b.n	80065d4 <HAL_RCC_OscConfig+0x5ec>
 80064fe:	2301      	movs	r3, #1
 8006500:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006504:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006508:	fa93 f3a3 	rbit	r3, r3
 800650c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006510:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006514:	fab3 f383 	clz	r3, r3
 8006518:	b2db      	uxtb	r3, r3
 800651a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800651e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	461a      	mov	r2, r3
 8006526:	2300      	movs	r3, #0
 8006528:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652a:	f7fe fb6d 	bl	8004c08 <HAL_GetTick>
 800652e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006534:	f7fe fb68 	bl	8004c08 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d902      	bls.n	800654a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	f000 bc50 	b.w	8006dea <HAL_RCC_OscConfig+0xe02>
 800654a:	2302      	movs	r3, #2
 800654c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006550:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006554:	fa93 f3a3 	rbit	r3, r3
 8006558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800655c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006560:	fab3 f383 	clz	r3, r3
 8006564:	b2db      	uxtb	r3, r3
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	d102      	bne.n	800657a <HAL_RCC_OscConfig+0x592>
 8006574:	4b30      	ldr	r3, [pc, #192]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	e013      	b.n	80065a2 <HAL_RCC_OscConfig+0x5ba>
 800657a:	2302      	movs	r3, #2
 800657c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006580:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006584:	fa93 f3a3 	rbit	r3, r3
 8006588:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800658c:	2302      	movs	r3, #2
 800658e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006592:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006596:	fa93 f3a3 	rbit	r3, r3
 800659a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800659e:	4b26      	ldr	r3, [pc, #152]	; (8006638 <HAL_RCC_OscConfig+0x650>)
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	2202      	movs	r2, #2
 80065a4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80065a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80065ac:	fa92 f2a2 	rbit	r2, r2
 80065b0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80065b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80065b8:	fab2 f282 	clz	r2, r2
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	f042 0220 	orr.w	r2, r2, #32
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	f002 021f 	and.w	r2, r2, #31
 80065c8:	2101      	movs	r1, #1
 80065ca:	fa01 f202 	lsl.w	r2, r1, r2
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1af      	bne.n	8006534 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065d4:	1d3b      	adds	r3, r7, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 80da 	beq.w	8006798 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065e4:	1d3b      	adds	r3, r7, #4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d069      	beq.n	80066c2 <HAL_RCC_OscConfig+0x6da>
 80065ee:	2301      	movs	r3, #1
 80065f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065f8:	fa93 f3a3 	rbit	r3, r3
 80065fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006604:	fab3 f383 	clz	r3, r3
 8006608:	b2db      	uxtb	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <HAL_RCC_OscConfig+0x654>)
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	461a      	mov	r2, r3
 8006614:	2301      	movs	r3, #1
 8006616:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006618:	f7fe faf6 	bl	8004c08 <HAL_GetTick>
 800661c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006620:	e00e      	b.n	8006640 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006622:	f7fe faf1 	bl	8004c08 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d906      	bls.n	8006640 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e3d9      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
 8006636:	bf00      	nop
 8006638:	40021000 	.word	0x40021000
 800663c:	10908120 	.word	0x10908120
 8006640:	2302      	movs	r3, #2
 8006642:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664a:	fa93 f3a3 	rbit	r3, r3
 800664e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006652:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006656:	2202      	movs	r2, #2
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	fa93 f2a3 	rbit	r2, r3
 8006664:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800666e:	2202      	movs	r2, #2
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	fa93 f2a3 	rbit	r2, r3
 800667c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006680:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006682:	4ba5      	ldr	r3, [pc, #660]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006686:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800668a:	2102      	movs	r1, #2
 800668c:	6019      	str	r1, [r3, #0]
 800668e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	fa93 f1a3 	rbit	r1, r3
 8006698:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800669c:	6019      	str	r1, [r3, #0]
  return result;
 800669e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	fab3 f383 	clz	r3, r3
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	2101      	movs	r1, #1
 80066b6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0b0      	beq.n	8006622 <HAL_RCC_OscConfig+0x63a>
 80066c0:	e06a      	b.n	8006798 <HAL_RCC_OscConfig+0x7b0>
 80066c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80066c6:	2201      	movs	r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	fa93 f2a3 	rbit	r2, r3
 80066d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80066d8:	601a      	str	r2, [r3, #0]
  return result;
 80066da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80066de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066e0:	fab3 f383 	clz	r3, r3
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	4b8c      	ldr	r3, [pc, #560]	; (800691c <HAL_RCC_OscConfig+0x934>)
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f4:	f7fe fa88 	bl	8004c08 <HAL_GetTick>
 80066f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066fc:	e009      	b.n	8006712 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066fe:	f7fe fa83 	bl	8004c08 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e36b      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
 8006712:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006716:	2202      	movs	r2, #2
 8006718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	fa93 f2a3 	rbit	r2, r3
 8006724:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800672e:	2202      	movs	r2, #2
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	fa93 f2a3 	rbit	r2, r3
 800673c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006746:	2202      	movs	r2, #2
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	fa93 f2a3 	rbit	r2, r3
 8006754:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006758:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800675a:	4b6f      	ldr	r3, [pc, #444]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 800675c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800675e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006762:	2102      	movs	r1, #2
 8006764:	6019      	str	r1, [r3, #0]
 8006766:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	fa93 f1a3 	rbit	r1, r3
 8006770:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006774:	6019      	str	r1, [r3, #0]
  return result;
 8006776:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	fab3 f383 	clz	r3, r3
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2101      	movs	r1, #1
 800678e:	fa01 f303 	lsl.w	r3, r1, r3
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1b2      	bne.n	80066fe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8158 	beq.w	8006a58 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067a8:	2300      	movs	r3, #0
 80067aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ae:	4b5a      	ldr	r3, [pc, #360]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d112      	bne.n	80067e0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ba:	4b57      	ldr	r3, [pc, #348]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	4a56      	ldr	r2, [pc, #344]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 80067c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c4:	61d3      	str	r3, [r2, #28]
 80067c6:	4b54      	ldr	r3, [pc, #336]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80067ce:	f107 0308 	add.w	r3, r7, #8
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f107 0308 	add.w	r3, r7, #8
 80067d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e0:	4b4f      	ldr	r3, [pc, #316]	; (8006920 <HAL_RCC_OscConfig+0x938>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11a      	bne.n	8006822 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ec:	4b4c      	ldr	r3, [pc, #304]	; (8006920 <HAL_RCC_OscConfig+0x938>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a4b      	ldr	r2, [pc, #300]	; (8006920 <HAL_RCC_OscConfig+0x938>)
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f8:	f7fe fa06 	bl	8004c08 <HAL_GetTick>
 80067fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006800:	e009      	b.n	8006816 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006802:	f7fe fa01 	bl	8004c08 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b64      	cmp	r3, #100	; 0x64
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e2e9      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006816:	4b42      	ldr	r3, [pc, #264]	; (8006920 <HAL_RCC_OscConfig+0x938>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0ef      	beq.n	8006802 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d106      	bne.n	800683a <HAL_RCC_OscConfig+0x852>
 800682c:	4b3a      	ldr	r3, [pc, #232]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	4a39      	ldr	r2, [pc, #228]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	6213      	str	r3, [r2, #32]
 8006838:	e02f      	b.n	800689a <HAL_RCC_OscConfig+0x8b2>
 800683a:	1d3b      	adds	r3, r7, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10c      	bne.n	800685e <HAL_RCC_OscConfig+0x876>
 8006844:	4b34      	ldr	r3, [pc, #208]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	4a33      	ldr	r2, [pc, #204]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	6213      	str	r3, [r2, #32]
 8006850:	4b31      	ldr	r3, [pc, #196]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	4a30      	ldr	r2, [pc, #192]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006856:	f023 0304 	bic.w	r3, r3, #4
 800685a:	6213      	str	r3, [r2, #32]
 800685c:	e01d      	b.n	800689a <HAL_RCC_OscConfig+0x8b2>
 800685e:	1d3b      	adds	r3, r7, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b05      	cmp	r3, #5
 8006866:	d10c      	bne.n	8006882 <HAL_RCC_OscConfig+0x89a>
 8006868:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	4a2a      	ldr	r2, [pc, #168]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 800686e:	f043 0304 	orr.w	r3, r3, #4
 8006872:	6213      	str	r3, [r2, #32]
 8006874:	4b28      	ldr	r3, [pc, #160]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	4a27      	ldr	r2, [pc, #156]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	6213      	str	r3, [r2, #32]
 8006880:	e00b      	b.n	800689a <HAL_RCC_OscConfig+0x8b2>
 8006882:	4b25      	ldr	r3, [pc, #148]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	4a24      	ldr	r2, [pc, #144]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	6213      	str	r3, [r2, #32]
 800688e:	4b22      	ldr	r3, [pc, #136]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	4a21      	ldr	r2, [pc, #132]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006894:	f023 0304 	bic.w	r3, r3, #4
 8006898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d06b      	beq.n	800697c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a4:	f7fe f9b0 	bl	8004c08 <HAL_GetTick>
 80068a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ac:	e00b      	b.n	80068c6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ae:	f7fe f9ab 	bl	8004c08 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80068be:	4293      	cmp	r3, r2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e291      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
 80068c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80068ca:	2202      	movs	r2, #2
 80068cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	fa93 f2a3 	rbit	r2, r3
 80068d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80068e2:	2202      	movs	r2, #2
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	fa93 f2a3 	rbit	r2, r3
 80068f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80068f4:	601a      	str	r2, [r3, #0]
  return result;
 80068f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80068fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fc:	fab3 f383 	clz	r3, r3
 8006900:	b2db      	uxtb	r3, r3
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f043 0302 	orr.w	r3, r3, #2
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d109      	bne.n	8006924 <HAL_RCC_OscConfig+0x93c>
 8006910:	4b01      	ldr	r3, [pc, #4]	; (8006918 <HAL_RCC_OscConfig+0x930>)
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	e014      	b.n	8006940 <HAL_RCC_OscConfig+0x958>
 8006916:	bf00      	nop
 8006918:	40021000 	.word	0x40021000
 800691c:	10908120 	.word	0x10908120
 8006920:	40007000 	.word	0x40007000
 8006924:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006928:	2202      	movs	r2, #2
 800692a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	fa93 f2a3 	rbit	r2, r3
 8006936:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	4bbb      	ldr	r3, [pc, #748]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006944:	2102      	movs	r1, #2
 8006946:	6011      	str	r1, [r2, #0]
 8006948:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	fa92 f1a2 	rbit	r1, r2
 8006952:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006956:	6011      	str	r1, [r2, #0]
  return result;
 8006958:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	fab2 f282 	clz	r2, r2
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	f002 021f 	and.w	r2, r2, #31
 800696e:	2101      	movs	r1, #1
 8006970:	fa01 f202 	lsl.w	r2, r1, r2
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d099      	beq.n	80068ae <HAL_RCC_OscConfig+0x8c6>
 800697a:	e063      	b.n	8006a44 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697c:	f7fe f944 	bl	8004c08 <HAL_GetTick>
 8006980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006984:	e00b      	b.n	800699e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fe f93f 	bl	8004c08 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e225      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
 800699e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80069a2:	2202      	movs	r2, #2
 80069a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	fa93 f2a3 	rbit	r2, r3
 80069b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80069ba:	2202      	movs	r2, #2
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	fa93 f2a3 	rbit	r2, r3
 80069c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80069cc:	601a      	str	r2, [r3, #0]
  return result;
 80069ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80069d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d4:	fab3 f383 	clz	r3, r3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f043 0302 	orr.w	r3, r3, #2
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d102      	bne.n	80069ee <HAL_RCC_OscConfig+0xa06>
 80069e8:	4b90      	ldr	r3, [pc, #576]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	e00d      	b.n	8006a0a <HAL_RCC_OscConfig+0xa22>
 80069ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80069f2:	2202      	movs	r2, #2
 80069f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	fa93 f2a3 	rbit	r2, r3
 8006a00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	4b89      	ldr	r3, [pc, #548]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006a0e:	2102      	movs	r1, #2
 8006a10:	6011      	str	r1, [r2, #0]
 8006a12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	fa92 f1a2 	rbit	r1, r2
 8006a1c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006a20:	6011      	str	r1, [r2, #0]
  return result;
 8006a22:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	fab2 f282 	clz	r2, r2
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	f002 021f 	and.w	r2, r2, #31
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1a0      	bne.n	8006986 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a44:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d105      	bne.n	8006a58 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a4c:	4b77      	ldr	r3, [pc, #476]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	4a76      	ldr	r2, [pc, #472]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a56:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a58:	1d3b      	adds	r3, r7, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 81c2 	beq.w	8006de8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a64:	4b71      	ldr	r3, [pc, #452]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f003 030c 	and.w	r3, r3, #12
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	f000 819c 	beq.w	8006daa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	f040 8114 	bne.w	8006ca6 <HAL_RCC_OscConfig+0xcbe>
 8006a7e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	fa93 f2a3 	rbit	r2, r3
 8006a92:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006a96:	601a      	str	r2, [r3, #0]
  return result;
 8006a98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006a9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9e:	fab3 f383 	clz	r3, r3
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006aa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	461a      	mov	r2, r3
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab4:	f7fe f8a8 	bl	8004c08 <HAL_GetTick>
 8006ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006abc:	e009      	b.n	8006ad2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006abe:	f7fe f8a3 	bl	8004c08 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e18b      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
 8006ad2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006adc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	fa93 f2a3 	rbit	r2, r3
 8006ae6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006aea:	601a      	str	r2, [r3, #0]
  return result;
 8006aec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006af0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006af2:	fab3 f383 	clz	r3, r3
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f043 0301 	orr.w	r3, r3, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d102      	bne.n	8006b0c <HAL_RCC_OscConfig+0xb24>
 8006b06:	4b49      	ldr	r3, [pc, #292]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	e01b      	b.n	8006b44 <HAL_RCC_OscConfig+0xb5c>
 8006b0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	fa93 f2a3 	rbit	r2, r3
 8006b20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	fa93 f2a3 	rbit	r2, r3
 8006b3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	4b3a      	ldr	r3, [pc, #232]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006b48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	fa92 f1a2 	rbit	r1, r2
 8006b58:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006b5c:	6011      	str	r1, [r2, #0]
  return result;
 8006b5e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	fab2 f282 	clz	r2, r2
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	f042 0220 	orr.w	r2, r2, #32
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	f002 021f 	and.w	r2, r2, #31
 8006b74:	2101      	movs	r1, #1
 8006b76:	fa01 f202 	lsl.w	r2, r1, r2
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d19e      	bne.n	8006abe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b80:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006b88:	1d3b      	adds	r3, r7, #4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	430b      	orrs	r3, r1
 8006b96:	4925      	ldr	r1, [pc, #148]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	604b      	str	r3, [r1, #4]
 8006b9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	fa93 f2a3 	rbit	r2, r3
 8006bb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006bb4:	601a      	str	r2, [r3, #0]
  return result;
 8006bb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006bba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bbc:	fab3 f383 	clz	r3, r3
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006bc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2301      	movs	r3, #1
 8006bd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd2:	f7fe f819 	bl	8004c08 <HAL_GetTick>
 8006bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bda:	e009      	b.n	8006bf0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bdc:	f7fe f814 	bl	8004c08 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e0fc      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
 8006bf0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	fa93 f2a3 	rbit	r2, r3
 8006c04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c08:	601a      	str	r2, [r3, #0]
  return result;
 8006c0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c10:	fab3 f383 	clz	r3, r3
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d105      	bne.n	8006c30 <HAL_RCC_OscConfig+0xc48>
 8006c24:	4b01      	ldr	r3, [pc, #4]	; (8006c2c <HAL_RCC_OscConfig+0xc44>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	e01e      	b.n	8006c68 <HAL_RCC_OscConfig+0xc80>
 8006c2a:	bf00      	nop
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	fa93 f2a3 	rbit	r2, r3
 8006c44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	fa93 f2a3 	rbit	r2, r3
 8006c5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	4b63      	ldr	r3, [pc, #396]	; (8006df4 <HAL_RCC_OscConfig+0xe0c>)
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c70:	6011      	str	r1, [r2, #0]
 8006c72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	fa92 f1a2 	rbit	r1, r2
 8006c7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006c80:	6011      	str	r1, [r2, #0]
  return result;
 8006c82:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	fab2 f282 	clz	r2, r2
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	f042 0220 	orr.w	r2, r2, #32
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	f002 021f 	and.w	r2, r2, #31
 8006c98:	2101      	movs	r1, #1
 8006c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d09b      	beq.n	8006bdc <HAL_RCC_OscConfig+0xbf4>
 8006ca4:	e0a0      	b.n	8006de8 <HAL_RCC_OscConfig+0xe00>
 8006ca6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006caa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	fa93 f2a3 	rbit	r2, r3
 8006cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cbe:	601a      	str	r2, [r3, #0]
  return result;
 8006cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc6:	fab3 f383 	clz	r3, r3
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2300      	movs	r3, #0
 8006cda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cdc:	f7fd ff94 	bl	8004c08 <HAL_GetTick>
 8006ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ce4:	e009      	b.n	8006cfa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ce6:	f7fd ff8f 	bl	8004c08 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e077      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
 8006cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	fa93 f2a3 	rbit	r2, r3
 8006d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d12:	601a      	str	r2, [r3, #0]
  return result;
 8006d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d1a:	fab3 f383 	clz	r3, r3
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d102      	bne.n	8006d34 <HAL_RCC_OscConfig+0xd4c>
 8006d2e:	4b31      	ldr	r3, [pc, #196]	; (8006df4 <HAL_RCC_OscConfig+0xe0c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	e01b      	b.n	8006d6c <HAL_RCC_OscConfig+0xd84>
 8006d34:	f107 0320 	add.w	r3, r7, #32
 8006d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3e:	f107 0320 	add.w	r3, r7, #32
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	fa93 f2a3 	rbit	r2, r3
 8006d48:	f107 031c 	add.w	r3, r7, #28
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	f107 0318 	add.w	r3, r7, #24
 8006d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	f107 0318 	add.w	r3, r7, #24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	fa93 f2a3 	rbit	r2, r3
 8006d62:	f107 0314 	add.w	r3, r7, #20
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	4b22      	ldr	r3, [pc, #136]	; (8006df4 <HAL_RCC_OscConfig+0xe0c>)
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f107 0210 	add.w	r2, r7, #16
 8006d70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d74:	6011      	str	r1, [r2, #0]
 8006d76:	f107 0210 	add.w	r2, r7, #16
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	fa92 f1a2 	rbit	r1, r2
 8006d80:	f107 020c 	add.w	r2, r7, #12
 8006d84:	6011      	str	r1, [r2, #0]
  return result;
 8006d86:	f107 020c 	add.w	r2, r7, #12
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	fab2 f282 	clz	r2, r2
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	f042 0220 	orr.w	r2, r2, #32
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	f002 021f 	and.w	r2, r2, #31
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d19e      	bne.n	8006ce6 <HAL_RCC_OscConfig+0xcfe>
 8006da8:	e01e      	b.n	8006de8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e018      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006db8:	4b0e      	ldr	r3, [pc, #56]	; (8006df4 <HAL_RCC_OscConfig+0xe0c>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006dc0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006dc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006dc8:	1d3b      	adds	r3, r7, #4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d108      	bne.n	8006de4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006dd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006dd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d001      	beq.n	8006de8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40021000 	.word	0x40021000

08006df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b09e      	sub	sp, #120	; 0x78
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e162      	b.n	80070d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e10:	4b90      	ldr	r3, [pc, #576]	; (8007054 <HAL_RCC_ClockConfig+0x25c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d910      	bls.n	8006e40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1e:	4b8d      	ldr	r3, [pc, #564]	; (8007054 <HAL_RCC_ClockConfig+0x25c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f023 0207 	bic.w	r2, r3, #7
 8006e26:	498b      	ldr	r1, [pc, #556]	; (8007054 <HAL_RCC_ClockConfig+0x25c>)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2e:	4b89      	ldr	r3, [pc, #548]	; (8007054 <HAL_RCC_ClockConfig+0x25c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e14a      	b.n	80070d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e4c:	4b82      	ldr	r3, [pc, #520]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	497f      	ldr	r1, [pc, #508]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80dc 	beq.w	8007024 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d13c      	bne.n	8006eee <HAL_RCC_ClockConfig+0xf6>
 8006e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e7c:	fa93 f3a3 	rbit	r3, r3
 8006e80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e84:	fab3 f383 	clz	r3, r3
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d102      	bne.n	8006e9e <HAL_RCC_ClockConfig+0xa6>
 8006e98:	4b6f      	ldr	r3, [pc, #444]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	e00f      	b.n	8006ebe <HAL_RCC_ClockConfig+0xc6>
 8006e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ea2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ea6:	fa93 f3a3 	rbit	r3, r3
 8006eaa:	667b      	str	r3, [r7, #100]	; 0x64
 8006eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006eb0:	663b      	str	r3, [r7, #96]	; 0x60
 8006eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006eb4:	fa93 f3a3 	rbit	r3, r3
 8006eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eba:	4b67      	ldr	r3, [pc, #412]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ec2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ec6:	fa92 f2a2 	rbit	r2, r2
 8006eca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ece:	fab2 f282 	clz	r2, r2
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	f042 0220 	orr.w	r2, r2, #32
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	f002 021f 	and.w	r2, r2, #31
 8006ede:	2101      	movs	r1, #1
 8006ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d17b      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e0f3      	b.n	80070d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d13c      	bne.n	8006f70 <HAL_RCC_ClockConfig+0x178>
 8006ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006efa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efe:	fa93 f3a3 	rbit	r3, r3
 8006f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f06:	fab3 f383 	clz	r3, r3
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f043 0301 	orr.w	r3, r3, #1
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d102      	bne.n	8006f20 <HAL_RCC_ClockConfig+0x128>
 8006f1a:	4b4f      	ldr	r3, [pc, #316]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	e00f      	b.n	8006f40 <HAL_RCC_ClockConfig+0x148>
 8006f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f28:	fa93 f3a3 	rbit	r3, r3
 8006f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f32:	643b      	str	r3, [r7, #64]	; 0x40
 8006f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3c:	4b46      	ldr	r3, [pc, #280]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f44:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f48:	fa92 f2a2 	rbit	r2, r2
 8006f4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f50:	fab2 f282 	clz	r2, r2
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	f042 0220 	orr.w	r2, r2, #32
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	f002 021f 	and.w	r2, r2, #31
 8006f60:	2101      	movs	r1, #1
 8006f62:	fa01 f202 	lsl.w	r2, r1, r2
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d13a      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e0b2      	b.n	80070d6 <HAL_RCC_ClockConfig+0x2de>
 8006f70:	2302      	movs	r3, #2
 8006f72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	fa93 f3a3 	rbit	r3, r3
 8006f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f7e:	fab3 f383 	clz	r3, r3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d102      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
 8006f92:	4b31      	ldr	r3, [pc, #196]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	e00d      	b.n	8006fb4 <HAL_RCC_ClockConfig+0x1bc>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	fa93 f3a3 	rbit	r3, r3
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	623b      	str	r3, [r7, #32]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	fa93 f3a3 	rbit	r3, r3
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	4b29      	ldr	r3, [pc, #164]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	61ba      	str	r2, [r7, #24]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	fa92 f2a2 	rbit	r2, r2
 8006fbe:	617a      	str	r2, [r7, #20]
  return result;
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	fab2 f282 	clz	r2, r2
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	f042 0220 	orr.w	r2, r2, #32
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	f002 021f 	and.w	r2, r2, #31
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e079      	b.n	80070d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f023 0203 	bic.w	r2, r3, #3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	491a      	ldr	r1, [pc, #104]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ff4:	f7fd fe08 	bl	8004c08 <HAL_GetTick>
 8006ff8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffa:	e00a      	b.n	8007012 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ffc:	f7fd fe04 	bl	8004c08 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	f241 3288 	movw	r2, #5000	; 0x1388
 800700a:	4293      	cmp	r3, r2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e061      	b.n	80070d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <HAL_RCC_ClockConfig+0x260>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f003 020c 	and.w	r2, r3, #12
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	429a      	cmp	r2, r3
 8007022:	d1eb      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <HAL_RCC_ClockConfig+0x25c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d214      	bcs.n	800705c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007032:	4b08      	ldr	r3, [pc, #32]	; (8007054 <HAL_RCC_ClockConfig+0x25c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f023 0207 	bic.w	r2, r3, #7
 800703a:	4906      	ldr	r1, [pc, #24]	; (8007054 <HAL_RCC_ClockConfig+0x25c>)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	4313      	orrs	r3, r2
 8007040:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007042:	4b04      	ldr	r3, [pc, #16]	; (8007054 <HAL_RCC_ClockConfig+0x25c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d005      	beq.n	800705c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e040      	b.n	80070d6 <HAL_RCC_ClockConfig+0x2de>
 8007054:	40022000 	.word	0x40022000
 8007058:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007068:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <HAL_RCC_ClockConfig+0x2e8>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	491a      	ldr	r1, [pc, #104]	; (80070e0 <HAL_RCC_ClockConfig+0x2e8>)
 8007076:	4313      	orrs	r3, r2
 8007078:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007086:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <HAL_RCC_ClockConfig+0x2e8>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	4912      	ldr	r1, [pc, #72]	; (80070e0 <HAL_RCC_ClockConfig+0x2e8>)
 8007096:	4313      	orrs	r3, r2
 8007098:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800709a:	f000 f829 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 800709e:	4601      	mov	r1, r0
 80070a0:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <HAL_RCC_ClockConfig+0x2e8>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070a8:	22f0      	movs	r2, #240	; 0xf0
 80070aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	fa92 f2a2 	rbit	r2, r2
 80070b2:	60fa      	str	r2, [r7, #12]
  return result;
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	fab2 f282 	clz	r2, r2
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	40d3      	lsrs	r3, r2
 80070be:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <HAL_RCC_ClockConfig+0x2ec>)
 80070c0:	5cd3      	ldrb	r3, [r2, r3]
 80070c2:	fa21 f303 	lsr.w	r3, r1, r3
 80070c6:	4a08      	ldr	r2, [pc, #32]	; (80070e8 <HAL_RCC_ClockConfig+0x2f0>)
 80070c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80070ca:	4b08      	ldr	r3, [pc, #32]	; (80070ec <HAL_RCC_ClockConfig+0x2f4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd fd56 	bl	8004b80 <HAL_InitTick>
  
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3778      	adds	r7, #120	; 0x78
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	40021000 	.word	0x40021000
 80070e4:	08012540 	.word	0x08012540
 80070e8:	20000004 	.word	0x20000004
 80070ec:	20000008 	.word	0x20000008

080070f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b08b      	sub	sp, #44	; 0x2c
 80070f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	2300      	movs	r3, #0
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800710a:	4b29      	ldr	r3, [pc, #164]	; (80071b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b04      	cmp	r3, #4
 8007118:	d002      	beq.n	8007120 <HAL_RCC_GetSysClockFreq+0x30>
 800711a:	2b08      	cmp	r3, #8
 800711c:	d003      	beq.n	8007126 <HAL_RCC_GetSysClockFreq+0x36>
 800711e:	e03c      	b.n	800719a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007120:	4b24      	ldr	r3, [pc, #144]	; (80071b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007122:	623b      	str	r3, [r7, #32]
      break;
 8007124:	e03c      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800712c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007130:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	fa92 f2a2 	rbit	r2, r2
 8007138:	607a      	str	r2, [r7, #4]
  return result;
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	fab2 f282 	clz	r2, r2
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	40d3      	lsrs	r3, r2
 8007144:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007146:	5cd3      	ldrb	r3, [r2, r3]
 8007148:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800714a:	4b19      	ldr	r3, [pc, #100]	; (80071b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	220f      	movs	r2, #15
 8007154:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	fa92 f2a2 	rbit	r2, r2
 800715c:	60fa      	str	r2, [r7, #12]
  return result;
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	fab2 f282 	clz	r2, r2
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	40d3      	lsrs	r3, r2
 8007168:	4a14      	ldr	r2, [pc, #80]	; (80071bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800716a:	5cd3      	ldrb	r3, [r2, r3]
 800716c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d008      	beq.n	800718a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007178:	4a0e      	ldr	r2, [pc, #56]	; (80071b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	fb02 f303 	mul.w	r3, r2, r3
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
 8007188:	e004      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4a0c      	ldr	r2, [pc, #48]	; (80071c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800718e:	fb02 f303 	mul.w	r3, r2, r3
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	623b      	str	r3, [r7, #32]
      break;
 8007198:	e002      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800719a:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800719c:	623b      	str	r3, [r7, #32]
      break;
 800719e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071a0:	6a3b      	ldr	r3, [r7, #32]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	372c      	adds	r7, #44	; 0x2c
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000
 80071b4:	007a1200 	.word	0x007a1200
 80071b8:	08012558 	.word	0x08012558
 80071bc:	08012568 	.word	0x08012568
 80071c0:	003d0900 	.word	0x003d0900

080071c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071c8:	4b03      	ldr	r3, [pc, #12]	; (80071d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80071ca:	681b      	ldr	r3, [r3, #0]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000004 	.word	0x20000004

080071dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80071e2:	f7ff ffef 	bl	80071c4 <HAL_RCC_GetHCLKFreq>
 80071e6:	4601      	mov	r1, r0
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80071f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	fa92 f2a2 	rbit	r2, r2
 80071fc:	603a      	str	r2, [r7, #0]
  return result;
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	fab2 f282 	clz	r2, r2
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	40d3      	lsrs	r3, r2
 8007208:	4a04      	ldr	r2, [pc, #16]	; (800721c <HAL_RCC_GetPCLK1Freq+0x40>)
 800720a:	5cd3      	ldrb	r3, [r2, r3]
 800720c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40021000 	.word	0x40021000
 800721c:	08012550 	.word	0x08012550

08007220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007226:	f7ff ffcd 	bl	80071c4 <HAL_RCC_GetHCLKFreq>
 800722a:	4601      	mov	r1, r0
 800722c:	4b0b      	ldr	r3, [pc, #44]	; (800725c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007234:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007238:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	fa92 f2a2 	rbit	r2, r2
 8007240:	603a      	str	r2, [r7, #0]
  return result;
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	fab2 f282 	clz	r2, r2
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	40d3      	lsrs	r3, r2
 800724c:	4a04      	ldr	r2, [pc, #16]	; (8007260 <HAL_RCC_GetPCLK2Freq+0x40>)
 800724e:	5cd3      	ldrb	r3, [r2, r3]
 8007250:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40021000 	.word	0x40021000
 8007260:	08012550 	.word	0x08012550

08007264 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b092      	sub	sp, #72	; 0x48
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007274:	2300      	movs	r3, #0
 8007276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80d4 	beq.w	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007288:	4b4e      	ldr	r3, [pc, #312]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10e      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007294:	4b4b      	ldr	r3, [pc, #300]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	4a4a      	ldr	r2, [pc, #296]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729e:	61d3      	str	r3, [r2, #28]
 80072a0:	4b48      	ldr	r3, [pc, #288]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b2:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d118      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072be:	4b42      	ldr	r3, [pc, #264]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a41      	ldr	r2, [pc, #260]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ca:	f7fd fc9d 	bl	8004c08 <HAL_GetTick>
 80072ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d0:	e008      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d2:	f7fd fc99 	bl	8004c08 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b64      	cmp	r3, #100	; 0x64
 80072de:	d901      	bls.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e169      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e4:	4b38      	ldr	r3, [pc, #224]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0f0      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072f0:	4b34      	ldr	r3, [pc, #208]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8084 	beq.w	800740a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800730c:	429a      	cmp	r2, r3
 800730e:	d07c      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007310:	4b2c      	ldr	r3, [pc, #176]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800731a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800731e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	fa93 f3a3 	rbit	r3, r3
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800732a:	fab3 f383 	clz	r3, r3
 800732e:	b2db      	uxtb	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	4b26      	ldr	r3, [pc, #152]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	461a      	mov	r2, r3
 800733a:	2301      	movs	r3, #1
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007342:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	fa93 f3a3 	rbit	r3, r3
 800734a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800734e:	fab3 f383 	clz	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	4b1d      	ldr	r3, [pc, #116]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	461a      	mov	r2, r3
 800735e:	2300      	movs	r3, #0
 8007360:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007362:	4a18      	ldr	r2, [pc, #96]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007366:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d04b      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007372:	f7fd fc49 	bl	8004c08 <HAL_GetTick>
 8007376:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007378:	e00a      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800737a:	f7fd fc45 	bl	8004c08 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f241 3288 	movw	r2, #5000	; 0x1388
 8007388:	4293      	cmp	r3, r2
 800738a:	d901      	bls.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e113      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007390:	2302      	movs	r3, #2
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	fa93 f3a3 	rbit	r3, r3
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	2302      	movs	r3, #2
 800739e:	623b      	str	r3, [r7, #32]
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	fa93 f3a3 	rbit	r3, r3
 80073a6:	61fb      	str	r3, [r7, #28]
  return result;
 80073a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073aa:	fab3 f383 	clz	r3, r3
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f043 0302 	orr.w	r3, r3, #2
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d108      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80073be:	4b01      	ldr	r3, [pc, #4]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	e00d      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40007000 	.word	0x40007000
 80073cc:	10908100 	.word	0x10908100
 80073d0:	2302      	movs	r3, #2
 80073d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	fa93 f3a3 	rbit	r3, r3
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	4b78      	ldr	r3, [pc, #480]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2202      	movs	r2, #2
 80073e2:	613a      	str	r2, [r7, #16]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	fa92 f2a2 	rbit	r2, r2
 80073ea:	60fa      	str	r2, [r7, #12]
  return result;
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	fab2 f282 	clz	r2, r2
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	f002 021f 	and.w	r2, r2, #31
 80073fe:	2101      	movs	r1, #1
 8007400:	fa01 f202 	lsl.w	r2, r1, r2
 8007404:	4013      	ands	r3, r2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0b7      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800740a:	4b6d      	ldr	r3, [pc, #436]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	496a      	ldr	r1, [pc, #424]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007418:	4313      	orrs	r3, r2
 800741a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800741c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007420:	2b01      	cmp	r3, #1
 8007422:	d105      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007424:	4b66      	ldr	r3, [pc, #408]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	4a65      	ldr	r2, [pc, #404]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800742a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800742e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d008      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800743c:	4b60      	ldr	r3, [pc, #384]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	f023 0203 	bic.w	r2, r3, #3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	495d      	ldr	r1, [pc, #372]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800745a:	4b59      	ldr	r3, [pc, #356]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4956      	ldr	r1, [pc, #344]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007468:	4313      	orrs	r3, r2
 800746a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d008      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007478:	4b51      	ldr	r3, [pc, #324]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	494e      	ldr	r1, [pc, #312]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007486:	4313      	orrs	r3, r2
 8007488:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d008      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007496:	4b4a      	ldr	r3, [pc, #296]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	f023 0210 	bic.w	r2, r3, #16
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	4947      	ldr	r1, [pc, #284]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d008      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80074b4:	4b42      	ldr	r3, [pc, #264]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	493f      	ldr	r1, [pc, #252]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d008      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074d2:	4b3b      	ldr	r3, [pc, #236]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	f023 0220 	bic.w	r2, r3, #32
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	4938      	ldr	r1, [pc, #224]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d008      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074f0:	4b33      	ldr	r3, [pc, #204]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	4930      	ldr	r1, [pc, #192]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800750e:	4b2c      	ldr	r3, [pc, #176]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	4929      	ldr	r1, [pc, #164]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800751c:	4313      	orrs	r3, r2
 800751e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007528:	2b00      	cmp	r3, #0
 800752a:	d008      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800752c:	4b24      	ldr	r3, [pc, #144]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	4921      	ldr	r1, [pc, #132]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800753a:	4313      	orrs	r3, r2
 800753c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800754a:	4b1d      	ldr	r3, [pc, #116]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800754c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	491a      	ldr	r1, [pc, #104]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007558:	4313      	orrs	r3, r2
 800755a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007568:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	4912      	ldr	r1, [pc, #72]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007576:	4313      	orrs	r3, r2
 8007578:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d008      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007586:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	490b      	ldr	r1, [pc, #44]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007594:	4313      	orrs	r3, r2
 8007596:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b0:	4903      	ldr	r1, [pc, #12]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3748      	adds	r7, #72	; 0x48
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40021000 	.word	0x40021000

080075c4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e083      	b.n	80076de <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7f5b      	ldrb	r3, [r3, #29]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d105      	bne.n	80075ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fd f84e 	bl	8004688 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	22ca      	movs	r2, #202	; 0xca
 80075f8:	625a      	str	r2, [r3, #36]	; 0x24
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2253      	movs	r2, #83	; 0x53
 8007600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 faa8 	bl	8007b58 <RTC_EnterInitMode>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d008      	beq.n	8007620 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	22ff      	movs	r2, #255	; 0xff
 8007614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2204      	movs	r2, #4
 800761a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e05e      	b.n	80076de <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800762e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007632:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6899      	ldr	r1, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	68d2      	ldr	r2, [r2, #12]
 800765a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6919      	ldr	r1, [r3, #16]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	041a      	lsls	r2, r3, #16
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800767e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10e      	bne.n	80076ac <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa3a 	bl	8007b08 <HAL_RTC_WaitForSynchro>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d008      	beq.n	80076ac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	22ff      	movs	r2, #255	; 0xff
 80076a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2204      	movs	r2, #4
 80076a6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e018      	b.n	80076de <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076ba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	22ff      	movs	r2, #255	; 0xff
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80076dc:	2300      	movs	r3, #0
  }
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076e6:	b590      	push	{r4, r7, lr}
 80076e8:	b087      	sub	sp, #28
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	7f1b      	ldrb	r3, [r3, #28]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_RTC_SetTime+0x1c>
 80076fe:	2302      	movs	r3, #2
 8007700:	e0aa      	b.n	8007858 <HAL_RTC_SetTime+0x172>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2202      	movs	r2, #2
 800770c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d126      	bne.n	8007762 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2200      	movs	r2, #0
 8007726:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fa3f 	bl	8007bb0 <RTC_ByteToBcd2>
 8007732:	4603      	mov	r3, r0
 8007734:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fa38 	bl	8007bb0 <RTC_ByteToBcd2>
 8007740:	4603      	mov	r3, r0
 8007742:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007744:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	789b      	ldrb	r3, [r3, #2]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fa30 	bl	8007bb0 <RTC_ByteToBcd2>
 8007750:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007752:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	78db      	ldrb	r3, [r3, #3]
 800775a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e018      	b.n	8007794 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007782:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007788:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	78db      	ldrb	r3, [r3, #3]
 800778e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	22ca      	movs	r2, #202	; 0xca
 800779a:	625a      	str	r2, [r3, #36]	; 0x24
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2253      	movs	r2, #83	; 0x53
 80077a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f9d7 	bl	8007b58 <RTC_EnterInitMode>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	22ff      	movs	r2, #255	; 0xff
 80077b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2204      	movs	r2, #4
 80077bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e047      	b.n	8007858 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6899      	ldr	r1, [r3, #8]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d111      	bne.n	8007842 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 f972 	bl	8007b08 <HAL_RTC_WaitForSynchro>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	22ff      	movs	r2, #255	; 0xff
 8007830:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2204      	movs	r2, #4
 8007836:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e00a      	b.n	8007858 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	22ff      	movs	r2, #255	; 0xff
 8007848:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007856:	2300      	movs	r3, #0
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	bd90      	pop	{r4, r7, pc}

08007860 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007892:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007896:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	0c1b      	lsrs	r3, r3, #16
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d11a      	bne.n	8007912 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 f983 	bl	8007bec <RTC_Bcd2ToByte>
 80078e6:	4603      	mov	r3, r0
 80078e8:	461a      	mov	r2, r3
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f97a 	bl	8007bec <RTC_Bcd2ToByte>
 80078f8:	4603      	mov	r3, r0
 80078fa:	461a      	mov	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	789b      	ldrb	r3, [r3, #2]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f971 	bl	8007bec <RTC_Bcd2ToByte>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	7f1b      	ldrb	r3, [r3, #28]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_RTC_SetDate+0x1c>
 8007934:	2302      	movs	r3, #2
 8007936:	e094      	b.n	8007a62 <HAL_RTC_SetDate+0x146>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2201      	movs	r2, #1
 800793c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2202      	movs	r2, #2
 8007942:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10e      	bne.n	8007968 <HAL_RTC_SetDate+0x4c>
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	785b      	ldrb	r3, [r3, #1]
 800795a:	f023 0310 	bic.w	r3, r3, #16
 800795e:	b2db      	uxtb	r3, r3
 8007960:	330a      	adds	r3, #10
 8007962:	b2da      	uxtb	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d11c      	bne.n	80079a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	78db      	ldrb	r3, [r3, #3]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f91c 	bl	8007bb0 <RTC_ByteToBcd2>
 8007978:	4603      	mov	r3, r0
 800797a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f915 	bl	8007bb0 <RTC_ByteToBcd2>
 8007986:	4603      	mov	r3, r0
 8007988:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800798a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	789b      	ldrb	r3, [r3, #2]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f90d 	bl	8007bb0 <RTC_ByteToBcd2>
 8007996:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007998:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	e00e      	b.n	80079c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	78db      	ldrb	r3, [r3, #3]
 80079ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	785b      	ldrb	r3, [r3, #1]
 80079b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80079ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	22ca      	movs	r2, #202	; 0xca
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2253      	movs	r2, #83	; 0x53
 80079d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f8be 	bl	8007b58 <RTC_EnterInitMode>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	22ff      	movs	r2, #255	; 0xff
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2204      	movs	r2, #4
 80079ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e033      	b.n	8007a62 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a18:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d111      	bne.n	8007a4c <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f86d 	bl	8007b08 <HAL_RTC_WaitForSynchro>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	22ff      	movs	r2, #255	; 0xff
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2204      	movs	r2, #4
 8007a40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e00a      	b.n	8007a62 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	22ff      	movs	r2, #255	; 0xff
 8007a52:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007a60:	2300      	movs	r3, #0
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd90      	pop	{r4, r7, pc}

08007a6a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b086      	sub	sp, #24
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a88:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	0c1b      	lsrs	r3, r3, #16
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	0b5b      	lsrs	r3, r3, #13
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11a      	bne.n	8007afe <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	78db      	ldrb	r3, [r3, #3]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f88d 	bl	8007bec <RTC_Bcd2ToByte>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 f884 	bl	8007bec <RTC_Bcd2ToByte>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	789b      	ldrb	r3, [r3, #2]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f87b 	bl	8007bec <RTC_Bcd2ToByte>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b22:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007b24:	f7fd f870 	bl	8004c08 <HAL_GetTick>
 8007b28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b2a:	e009      	b.n	8007b40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b2c:	f7fd f86c 	bl	8004c08 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b3a:	d901      	bls.n	8007b40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e007      	b.n	8007b50 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ee      	beq.n	8007b2c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d119      	bne.n	8007ba6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b7c:	f7fd f844 	bl	8004c08 <HAL_GetTick>
 8007b80:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b82:	e009      	b.n	8007b98 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b84:	f7fd f840 	bl	8004c08 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b92:	d901      	bls.n	8007b98 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e007      	b.n	8007ba8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0ee      	beq.n	8007b84 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007bbe:	e005      	b.n	8007bcc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	3b0a      	subs	r3, #10
 8007bca:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	2b09      	cmp	r3, #9
 8007bd0:	d8f6      	bhi.n	8007bc0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	b2db      	uxtb	r3, r3
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	091b      	lsrs	r3, r3, #4
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	4613      	mov	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	4413      	add	r3, r2
 8007c1a:	b2db      	uxtb	r3, r3
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3350      	adds	r3, #80	; 0x50
 8007c3e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	4413      	add	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3350      	adds	r3, #80	; 0x50
 8007c70:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e09d      	b.n	8007dda <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d108      	bne.n	8007cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cae:	d009      	beq.n	8007cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	61da      	str	r2, [r3, #28]
 8007cb6:	e005      	b.n	8007cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d106      	bne.n	8007ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7fc fcf8 	bl	80046d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d04:	d902      	bls.n	8007d0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e002      	b.n	8007d12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007d1a:	d007      	beq.n	8007d2c <HAL_SPI_Init+0xa0>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d24:	d002      	beq.n	8007d2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6e:	ea42 0103 	orr.w	r1, r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	0c1b      	lsrs	r3, r3, #16
 8007d88:	f003 0204 	and.w	r2, r3, #4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	431a      	orrs	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9a:	f003 0308 	and.w	r3, r3, #8
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007da8:	ea42 0103 	orr.w	r1, r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b088      	sub	sp, #32
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_SPI_Transmit+0x22>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e158      	b.n	80080b6 <HAL_SPI_Transmit+0x2d4>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e0c:	f7fc fefc 	bl	8004c08 <HAL_GetTick>
 8007e10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e12:	88fb      	ldrh	r3, [r7, #6]
 8007e14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d002      	beq.n	8007e28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007e22:	2302      	movs	r3, #2
 8007e24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e26:	e13d      	b.n	80080a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_SPI_Transmit+0x52>
 8007e2e:	88fb      	ldrh	r3, [r7, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e38:	e134      	b.n	80080a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2203      	movs	r2, #3
 8007e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	88fa      	ldrh	r2, [r7, #6]
 8007e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	88fa      	ldrh	r2, [r7, #6]
 8007e58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e84:	d10f      	bne.n	8007ea6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ea4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d007      	beq.n	8007ec4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ecc:	d94b      	bls.n	8007f66 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <HAL_SPI_Transmit+0xfa>
 8007ed6:	8afb      	ldrh	r3, [r7, #22]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d13e      	bne.n	8007f5a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	881a      	ldrh	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	1c9a      	adds	r2, r3, #2
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f00:	e02b      	b.n	8007f5a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d112      	bne.n	8007f36 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	881a      	ldrh	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	1c9a      	adds	r2, r3, #2
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f34:	e011      	b.n	8007f5a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f36:	f7fc fe67 	bl	8004c08 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d803      	bhi.n	8007f4e <HAL_SPI_Transmit+0x16c>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4c:	d102      	bne.n	8007f54 <HAL_SPI_Transmit+0x172>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f58:	e0a4      	b.n	80080a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1ce      	bne.n	8007f02 <HAL_SPI_Transmit+0x120>
 8007f64:	e07c      	b.n	8008060 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <HAL_SPI_Transmit+0x192>
 8007f6e:	8afb      	ldrh	r3, [r7, #22]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d170      	bne.n	8008056 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d912      	bls.n	8007fa4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	881a      	ldrh	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	1c9a      	adds	r2, r3, #2
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b02      	subs	r3, #2
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fa2:	e058      	b.n	8008056 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	330c      	adds	r3, #12
 8007fae:	7812      	ldrb	r2, [r2, #0]
 8007fb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007fca:	e044      	b.n	8008056 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d12b      	bne.n	8008032 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d912      	bls.n	800800a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	881a      	ldrh	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff4:	1c9a      	adds	r2, r3, #2
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	3b02      	subs	r3, #2
 8008002:	b29a      	uxth	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008008:	e025      	b.n	8008056 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	330c      	adds	r3, #12
 8008014:	7812      	ldrb	r2, [r2, #0]
 8008016:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008030:	e011      	b.n	8008056 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008032:	f7fc fde9 	bl	8004c08 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	429a      	cmp	r2, r3
 8008040:	d803      	bhi.n	800804a <HAL_SPI_Transmit+0x268>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d102      	bne.n	8008050 <HAL_SPI_Transmit+0x26e>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008054:	e026      	b.n	80080a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1b5      	bne.n	8007fcc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fb5b 	bl	8008720 <SPI_EndRxTxTransaction>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2220      	movs	r2, #32
 8008074:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800807e:	2300      	movs	r3, #0
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	77fb      	strb	r3, [r7, #31]
 80080a0:	e000      	b.n	80080a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80080a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80080b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3720      	adds	r7, #32
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b08a      	sub	sp, #40	; 0x28
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
 80080ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080cc:	2301      	movs	r3, #1
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_SPI_TransmitReceive+0x26>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e1fb      	b.n	80084dc <HAL_SPI_TransmitReceive+0x41e>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080ec:	f7fc fd8c 	bl	8004c08 <HAL_GetTick>
 80080f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008100:	887b      	ldrh	r3, [r7, #2]
 8008102:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008104:	887b      	ldrh	r3, [r7, #2]
 8008106:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008108:	7efb      	ldrb	r3, [r7, #27]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d00e      	beq.n	800812c <HAL_SPI_TransmitReceive+0x6e>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008114:	d106      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x66>
 800811e:	7efb      	ldrb	r3, [r7, #27]
 8008120:	2b04      	cmp	r3, #4
 8008122:	d003      	beq.n	800812c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008124:	2302      	movs	r3, #2
 8008126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800812a:	e1cd      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <HAL_SPI_TransmitReceive+0x80>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <HAL_SPI_TransmitReceive+0x80>
 8008138:	887b      	ldrh	r3, [r7, #2]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008144:	e1c0      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b04      	cmp	r3, #4
 8008150:	d003      	beq.n	800815a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2205      	movs	r2, #5
 8008156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	887a      	ldrh	r2, [r7, #2]
 800816a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	887a      	ldrh	r2, [r7, #2]
 8008172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	887a      	ldrh	r2, [r7, #2]
 8008180:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	887a      	ldrh	r2, [r7, #2]
 8008186:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800819c:	d802      	bhi.n	80081a4 <HAL_SPI_TransmitReceive+0xe6>
 800819e:	8a3b      	ldrh	r3, [r7, #16]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d908      	bls.n	80081b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081b2:	605a      	str	r2, [r3, #4]
 80081b4:	e007      	b.n	80081c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d0:	2b40      	cmp	r3, #64	; 0x40
 80081d2:	d007      	beq.n	80081e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081ec:	d97c      	bls.n	80082e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <HAL_SPI_TransmitReceive+0x13e>
 80081f6:	8a7b      	ldrh	r3, [r7, #18]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d169      	bne.n	80082d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	881a      	ldrh	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	1c9a      	adds	r2, r3, #2
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008220:	e056      	b.n	80082d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b02      	cmp	r3, #2
 800822e:	d11b      	bne.n	8008268 <HAL_SPI_TransmitReceive+0x1aa>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d016      	beq.n	8008268 <HAL_SPI_TransmitReceive+0x1aa>
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	2b01      	cmp	r3, #1
 800823e:	d113      	bne.n	8008268 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	881a      	ldrh	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	1c9a      	adds	r2, r3, #2
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b01      	cmp	r3, #1
 8008274:	d11c      	bne.n	80082b0 <HAL_SPI_TransmitReceive+0x1f2>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d016      	beq.n	80082b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	b292      	uxth	r2, r2
 800828e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	1c9a      	adds	r2, r3, #2
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082ac:	2301      	movs	r3, #1
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082b0:	f7fc fcaa 	bl	8004c08 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082bc:	429a      	cmp	r2, r3
 80082be:	d807      	bhi.n	80082d0 <HAL_SPI_TransmitReceive+0x212>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d003      	beq.n	80082d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80082ce:	e0fb      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1a3      	bne.n	8008222 <HAL_SPI_TransmitReceive+0x164>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d19d      	bne.n	8008222 <HAL_SPI_TransmitReceive+0x164>
 80082e6:	e0df      	b.n	80084a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <HAL_SPI_TransmitReceive+0x23a>
 80082f0:	8a7b      	ldrh	r3, [r7, #18]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	f040 80cb 	bne.w	800848e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d912      	bls.n	8008328 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	881a      	ldrh	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	1c9a      	adds	r2, r3, #2
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b02      	subs	r3, #2
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008326:	e0b2      	b.n	800848e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	330c      	adds	r3, #12
 8008332:	7812      	ldrb	r2, [r2, #0]
 8008334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800834e:	e09e      	b.n	800848e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b02      	cmp	r3, #2
 800835c:	d134      	bne.n	80083c8 <HAL_SPI_TransmitReceive+0x30a>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d02f      	beq.n	80083c8 <HAL_SPI_TransmitReceive+0x30a>
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	2b01      	cmp	r3, #1
 800836c:	d12c      	bne.n	80083c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	d912      	bls.n	800839e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	881a      	ldrh	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	1c9a      	adds	r2, r3, #2
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b02      	subs	r3, #2
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800839c:	e012      	b.n	80083c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	330c      	adds	r3, #12
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d148      	bne.n	8008468 <HAL_SPI_TransmitReceive+0x3aa>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d042      	beq.n	8008468 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d923      	bls.n	8008436 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68da      	ldr	r2, [r3, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	b292      	uxth	r2, r2
 80083fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	1c9a      	adds	r2, r3, #2
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b02      	subs	r3, #2
 8008410:	b29a      	uxth	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800841e:	b29b      	uxth	r3, r3
 8008420:	2b01      	cmp	r3, #1
 8008422:	d81f      	bhi.n	8008464 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008432:	605a      	str	r2, [r3, #4]
 8008434:	e016      	b.n	8008464 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f103 020c 	add.w	r2, r3, #12
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008458:	b29b      	uxth	r3, r3
 800845a:	3b01      	subs	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008464:	2301      	movs	r3, #1
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008468:	f7fc fbce 	bl	8004c08 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008474:	429a      	cmp	r2, r3
 8008476:	d803      	bhi.n	8008480 <HAL_SPI_TransmitReceive+0x3c2>
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847e:	d102      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x3c8>
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800848c:	e01c      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008492:	b29b      	uxth	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	f47f af5b 	bne.w	8008350 <HAL_SPI_TransmitReceive+0x292>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f47f af54 	bne.w	8008350 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f937 	bl	8008720 <SPI_EndRxTxTransaction>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d006      	beq.n	80084c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2220      	movs	r2, #32
 80084c2:	661a      	str	r2, [r3, #96]	; 0x60
 80084c4:	e000      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80084c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3728      	adds	r7, #40	; 0x28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	4613      	mov	r3, r2
 80084f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084f4:	f7fc fb88 	bl	8004c08 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	1a9b      	subs	r3, r3, r2
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4413      	add	r3, r2
 8008502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008504:	f7fc fb80 	bl	8004c08 <HAL_GetTick>
 8008508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800850a:	4b39      	ldr	r3, [pc, #228]	; (80085f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	015b      	lsls	r3, r3, #5
 8008510:	0d1b      	lsrs	r3, r3, #20
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	fb02 f303 	mul.w	r3, r2, r3
 8008518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800851a:	e054      	b.n	80085c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d050      	beq.n	80085c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008524:	f7fc fb70 	bl	8004c08 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	429a      	cmp	r2, r3
 8008532:	d902      	bls.n	800853a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d13d      	bne.n	80085b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008552:	d111      	bne.n	8008578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855c:	d004      	beq.n	8008568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008566:	d107      	bne.n	8008578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008580:	d10f      	bne.n	80085a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e017      	b.n	80085e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4013      	ands	r3, r2
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	bf0c      	ite	eq
 80085d6:	2301      	moveq	r3, #1
 80085d8:	2300      	movne	r3, #0
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d19b      	bne.n	800851c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000004 	.word	0x20000004

080085f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	; 0x28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008606:	f7fc faff 	bl	8004c08 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	4413      	add	r3, r2
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008616:	f7fc faf7 	bl	8004c08 <HAL_GetTick>
 800861a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	330c      	adds	r3, #12
 8008622:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008624:	4b3d      	ldr	r3, [pc, #244]	; (800871c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	00da      	lsls	r2, r3, #3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	0d1b      	lsrs	r3, r3, #20
 8008634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800863c:	e060      	b.n	8008700 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008644:	d107      	bne.n	8008656 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008654:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865c:	d050      	beq.n	8008700 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800865e:	f7fc fad3 	bl	8004c08 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866a:	429a      	cmp	r2, r3
 800866c:	d902      	bls.n	8008674 <SPI_WaitFifoStateUntilTimeout+0x80>
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d13d      	bne.n	80086f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008682:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800868c:	d111      	bne.n	80086b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008696:	d004      	beq.n	80086a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a0:	d107      	bne.n	80086b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ba:	d10f      	bne.n	80086dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e010      	b.n	8008712 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4013      	ands	r3, r2
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	429a      	cmp	r2, r3
 800870e:	d196      	bne.n	800863e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3728      	adds	r7, #40	; 0x28
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20000004 	.word	0x20000004

08008720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af02      	add	r7, sp, #8
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff ff5b 	bl	80085f4 <SPI_WaitFifoStateUntilTimeout>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d007      	beq.n	8008754 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008748:	f043 0220 	orr.w	r2, r3, #32
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e027      	b.n	80087a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2200      	movs	r2, #0
 800875c:	2180      	movs	r1, #128	; 0x80
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff fec0 	bl	80084e4 <SPI_WaitFlagStateUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d007      	beq.n	800877a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876e:	f043 0220 	orr.w	r2, r3, #32
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e014      	b.n	80087a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7ff ff34 	bl	80085f4 <SPI_WaitFifoStateUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008796:	f043 0220 	orr.w	r2, r3, #32
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e000      	b.n	80087a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e040      	b.n	8008840 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fb fff6 	bl	80047c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2224      	movs	r2, #36	; 0x24
 80087d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0201 	bic.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fc0c 	bl	8009008 <UART_SetConfig>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e022      	b.n	8008840 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fdd4 	bl	80093b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0201 	orr.w	r2, r2, #1
 8008836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fe5b 	bl	80094f4 <UART_CheckIdleState>
 800883e:	4603      	mov	r3, r0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b08a      	sub	sp, #40	; 0x28
 800884c:	af02      	add	r7, sp, #8
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	4613      	mov	r3, r2
 8008856:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800885c:	2b20      	cmp	r3, #32
 800885e:	f040 8082 	bne.w	8008966 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_UART_Transmit+0x26>
 8008868:	88fb      	ldrh	r3, [r7, #6]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e07a      	b.n	8008968 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_UART_Transmit+0x38>
 800887c:	2302      	movs	r3, #2
 800887e:	e073      	b.n	8008968 <HAL_UART_Transmit+0x120>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2221      	movs	r2, #33	; 0x21
 8008894:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008896:	f7fc f9b7 	bl	8004c08 <HAL_GetTick>
 800889a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	88fa      	ldrh	r2, [r7, #6]
 80088a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b4:	d108      	bne.n	80088c8 <HAL_UART_Transmit+0x80>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	61bb      	str	r3, [r7, #24]
 80088c6:	e003      	b.n	80088d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80088d8:	e02d      	b.n	8008936 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2200      	movs	r2, #0
 80088e2:	2180      	movs	r1, #128	; 0x80
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fe4e 	bl	8009586 <UART_WaitOnFlagUntilTimeout>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e039      	b.n	8008968 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10b      	bne.n	8008912 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	881a      	ldrh	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008906:	b292      	uxth	r2, r2
 8008908:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	3302      	adds	r3, #2
 800890e:	61bb      	str	r3, [r7, #24]
 8008910:	e008      	b.n	8008924 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	781a      	ldrb	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	b292      	uxth	r2, r2
 800891c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	3301      	adds	r3, #1
 8008922:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1cb      	bne.n	80088da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2200      	movs	r2, #0
 800894a:	2140      	movs	r1, #64	; 0x40
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fe1a 	bl	8009586 <UART_WaitOnFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e005      	b.n	8008968 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2220      	movs	r2, #32
 8008960:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	e000      	b.n	8008968 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008966:	2302      	movs	r3, #2
  }
}
 8008968:	4618      	mov	r0, r3
 800896a:	3720      	adds	r7, #32
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	; 0x28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008982:	2b20      	cmp	r3, #32
 8008984:	d13d      	bne.n	8008a02 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <HAL_UART_Receive_IT+0x22>
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e036      	b.n	8008a04 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_UART_Receive_IT+0x34>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e02f      	b.n	8008a04 <HAL_UART_Receive_IT+0x94>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d018      	beq.n	80089f2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	613b      	str	r3, [r7, #16]
   return(result);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	623b      	str	r3, [r7, #32]
 80089e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	69f9      	ldr	r1, [r7, #28]
 80089e4:	6a3a      	ldr	r2, [r7, #32]
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e6      	bne.n	80089c0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089f2:	88fb      	ldrh	r3, [r7, #6]
 80089f4:	461a      	mov	r2, r3
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fe89 	bl	8009710 <UART_Start_Receive_IT>
 80089fe:	4603      	mov	r3, r0
 8008a00:	e000      	b.n	8008a04 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a02:	2302      	movs	r3, #2
  }
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3728      	adds	r7, #40	; 0x28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b0ba      	sub	sp, #232	; 0xe8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a36:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d115      	bne.n	8008a74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00f      	beq.n	8008a74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d009      	beq.n	8008a74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 82a3 	beq.w	8008fb0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	4798      	blx	r3
      }
      return;
 8008a72:	e29d      	b.n	8008fb0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8117 	beq.w	8008cac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008a8e:	4b85      	ldr	r3, [pc, #532]	; (8008ca4 <HAL_UART_IRQHandler+0x298>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 810a 	beq.w	8008cac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d011      	beq.n	8008ac8 <HAL_UART_IRQHandler+0xbc>
 8008aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008abe:	f043 0201 	orr.w	r2, r3, #1
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d011      	beq.n	8008af8 <HAL_UART_IRQHandler+0xec>
 8008ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aee:	f043 0204 	orr.w	r2, r3, #4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d011      	beq.n	8008b28 <HAL_UART_IRQHandler+0x11c>
 8008b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00b      	beq.n	8008b28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2204      	movs	r2, #4
 8008b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b1e:	f043 0202 	orr.w	r2, r3, #2
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b2c:	f003 0308 	and.w	r3, r3, #8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d017      	beq.n	8008b64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d105      	bne.n	8008b4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2208      	movs	r2, #8
 8008b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b5a:	f043 0208 	orr.w	r2, r3, #8
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d012      	beq.n	8008b96 <HAL_UART_IRQHandler+0x18a>
 8008b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00c      	beq.n	8008b96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b8c:	f043 0220 	orr.w	r2, r3, #32
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8209 	beq.w	8008fb4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00d      	beq.n	8008bca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bde:	2b40      	cmp	r3, #64	; 0x40
 8008be0:	d005      	beq.n	8008bee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d04f      	beq.n	8008c8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fe26 	bl	8009840 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfe:	2b40      	cmp	r3, #64	; 0x40
 8008c00:	d141      	bne.n	8008c86 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3308      	adds	r3, #8
 8008c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3308      	adds	r3, #8
 8008c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1d9      	bne.n	8008c02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d013      	beq.n	8008c7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <HAL_UART_IRQHandler+0x29c>)
 8008c5c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fc ff96 	bl	8005b94 <HAL_DMA_Abort_IT>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d017      	beq.n	8008c9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c7c:	e00f      	b.n	8008c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f9ac 	bl	8008fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c84:	e00b      	b.n	8008c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f9a8 	bl	8008fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8c:	e007      	b.n	8008c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f9a4 	bl	8008fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008c9c:	e18a      	b.n	8008fb4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9e:	bf00      	nop
    return;
 8008ca0:	e188      	b.n	8008fb4 <HAL_UART_IRQHandler+0x5a8>
 8008ca2:	bf00      	nop
 8008ca4:	04000120 	.word	0x04000120
 8008ca8:	08009907 	.word	0x08009907

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	f040 8143 	bne.w	8008f3c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cba:	f003 0310 	and.w	r3, r3, #16
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 813c 	beq.w	8008f3c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc8:	f003 0310 	and.w	r3, r3, #16
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8135 	beq.w	8008f3c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2210      	movs	r2, #16
 8008cd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b40      	cmp	r3, #64	; 0x40
 8008ce6:	f040 80b1 	bne.w	8008e4c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 815c 	beq.w	8008fb8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	f080 8154 	bcs.w	8008fb8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	f000 8085 	beq.w	8008e30 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1da      	bne.n	8008d26 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3308      	adds	r3, #8
 8008d76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d82:	f023 0301 	bic.w	r3, r3, #1
 8008d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e1      	bne.n	8008d70 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3308      	adds	r3, #8
 8008db2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008dd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008dd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008dd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e3      	bne.n	8008dac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2220      	movs	r2, #32
 8008de8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e00:	f023 0310 	bic.w	r3, r3, #16
 8008e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e12:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e4      	bne.n	8008df0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fc fe79 	bl	8005b22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f8d3 	bl	8008ff0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e4a:	e0b5      	b.n	8008fb8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 80a7 	beq.w	8008fbc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 80a2 	beq.w	8008fbc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
 8008e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e4      	bne.n	8008e78 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	f023 0301 	bic.w	r3, r3, #1
 8008ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3308      	adds	r3, #8
 8008ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8008ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e3      	bne.n	8008eae <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f023 0310 	bic.w	r3, r3, #16
 8008f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	69b9      	ldr	r1, [r7, #24]
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	617b      	str	r3, [r7, #20]
   return(result);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e4      	bne.n	8008ef8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f85b 	bl	8008ff0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f3a:	e03f      	b.n	8008fbc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00e      	beq.n	8008f66 <HAL_UART_IRQHandler+0x55a>
 8008f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d008      	beq.n	8008f66 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fe6d 	bl	8009c3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f64:	e02d      	b.n	8008fc2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00e      	beq.n	8008f90 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d008      	beq.n	8008f90 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01c      	beq.n	8008fc0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3
    }
    return;
 8008f8e:	e017      	b.n	8008fc0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d012      	beq.n	8008fc2 <HAL_UART_IRQHandler+0x5b6>
 8008f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00c      	beq.n	8008fc2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fcc2 	bl	8009932 <UART_EndTransmit_IT>
    return;
 8008fae:	e008      	b.n	8008fc2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008fb0:	bf00      	nop
 8008fb2:	e006      	b.n	8008fc2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008fb4:	bf00      	nop
 8008fb6:	e004      	b.n	8008fc2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008fb8:	bf00      	nop
 8008fba:	e002      	b.n	8008fc2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008fbc:	bf00      	nop
 8008fbe:	e000      	b.n	8008fc2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008fc0:	bf00      	nop
  }

}
 8008fc2:	37e8      	adds	r7, #232	; 0xe8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	431a      	orrs	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	431a      	orrs	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	4313      	orrs	r3, r2
 800902a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009036:	f023 030c 	bic.w	r3, r3, #12
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	6812      	ldr	r2, [r2, #0]
 800903e:	6979      	ldr	r1, [r7, #20]
 8009040:	430b      	orrs	r3, r1
 8009042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	430a      	orrs	r2, r1
 800907c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4aae      	ldr	r2, [pc, #696]	; (800933c <UART_SetConfig+0x334>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d120      	bne.n	80090ca <UART_SetConfig+0xc2>
 8009088:	4bad      	ldr	r3, [pc, #692]	; (8009340 <UART_SetConfig+0x338>)
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	f003 0303 	and.w	r3, r3, #3
 8009090:	2b03      	cmp	r3, #3
 8009092:	d817      	bhi.n	80090c4 <UART_SetConfig+0xbc>
 8009094:	a201      	add	r2, pc, #4	; (adr r2, 800909c <UART_SetConfig+0x94>)
 8009096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909a:	bf00      	nop
 800909c:	080090ad 	.word	0x080090ad
 80090a0:	080090b9 	.word	0x080090b9
 80090a4:	080090bf 	.word	0x080090bf
 80090a8:	080090b3 	.word	0x080090b3
 80090ac:	2301      	movs	r3, #1
 80090ae:	77fb      	strb	r3, [r7, #31]
 80090b0:	e0b5      	b.n	800921e <UART_SetConfig+0x216>
 80090b2:	2302      	movs	r3, #2
 80090b4:	77fb      	strb	r3, [r7, #31]
 80090b6:	e0b2      	b.n	800921e <UART_SetConfig+0x216>
 80090b8:	2304      	movs	r3, #4
 80090ba:	77fb      	strb	r3, [r7, #31]
 80090bc:	e0af      	b.n	800921e <UART_SetConfig+0x216>
 80090be:	2308      	movs	r3, #8
 80090c0:	77fb      	strb	r3, [r7, #31]
 80090c2:	e0ac      	b.n	800921e <UART_SetConfig+0x216>
 80090c4:	2310      	movs	r3, #16
 80090c6:	77fb      	strb	r3, [r7, #31]
 80090c8:	e0a9      	b.n	800921e <UART_SetConfig+0x216>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a9d      	ldr	r2, [pc, #628]	; (8009344 <UART_SetConfig+0x33c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d124      	bne.n	800911e <UART_SetConfig+0x116>
 80090d4:	4b9a      	ldr	r3, [pc, #616]	; (8009340 <UART_SetConfig+0x338>)
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090e0:	d011      	beq.n	8009106 <UART_SetConfig+0xfe>
 80090e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090e6:	d817      	bhi.n	8009118 <UART_SetConfig+0x110>
 80090e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090ec:	d011      	beq.n	8009112 <UART_SetConfig+0x10a>
 80090ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f2:	d811      	bhi.n	8009118 <UART_SetConfig+0x110>
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <UART_SetConfig+0xf8>
 80090f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090fc:	d006      	beq.n	800910c <UART_SetConfig+0x104>
 80090fe:	e00b      	b.n	8009118 <UART_SetConfig+0x110>
 8009100:	2300      	movs	r3, #0
 8009102:	77fb      	strb	r3, [r7, #31]
 8009104:	e08b      	b.n	800921e <UART_SetConfig+0x216>
 8009106:	2302      	movs	r3, #2
 8009108:	77fb      	strb	r3, [r7, #31]
 800910a:	e088      	b.n	800921e <UART_SetConfig+0x216>
 800910c:	2304      	movs	r3, #4
 800910e:	77fb      	strb	r3, [r7, #31]
 8009110:	e085      	b.n	800921e <UART_SetConfig+0x216>
 8009112:	2308      	movs	r3, #8
 8009114:	77fb      	strb	r3, [r7, #31]
 8009116:	e082      	b.n	800921e <UART_SetConfig+0x216>
 8009118:	2310      	movs	r3, #16
 800911a:	77fb      	strb	r3, [r7, #31]
 800911c:	e07f      	b.n	800921e <UART_SetConfig+0x216>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a89      	ldr	r2, [pc, #548]	; (8009348 <UART_SetConfig+0x340>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d124      	bne.n	8009172 <UART_SetConfig+0x16a>
 8009128:	4b85      	ldr	r3, [pc, #532]	; (8009340 <UART_SetConfig+0x338>)
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009130:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009134:	d011      	beq.n	800915a <UART_SetConfig+0x152>
 8009136:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800913a:	d817      	bhi.n	800916c <UART_SetConfig+0x164>
 800913c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009140:	d011      	beq.n	8009166 <UART_SetConfig+0x15e>
 8009142:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009146:	d811      	bhi.n	800916c <UART_SetConfig+0x164>
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <UART_SetConfig+0x14c>
 800914c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009150:	d006      	beq.n	8009160 <UART_SetConfig+0x158>
 8009152:	e00b      	b.n	800916c <UART_SetConfig+0x164>
 8009154:	2300      	movs	r3, #0
 8009156:	77fb      	strb	r3, [r7, #31]
 8009158:	e061      	b.n	800921e <UART_SetConfig+0x216>
 800915a:	2302      	movs	r3, #2
 800915c:	77fb      	strb	r3, [r7, #31]
 800915e:	e05e      	b.n	800921e <UART_SetConfig+0x216>
 8009160:	2304      	movs	r3, #4
 8009162:	77fb      	strb	r3, [r7, #31]
 8009164:	e05b      	b.n	800921e <UART_SetConfig+0x216>
 8009166:	2308      	movs	r3, #8
 8009168:	77fb      	strb	r3, [r7, #31]
 800916a:	e058      	b.n	800921e <UART_SetConfig+0x216>
 800916c:	2310      	movs	r3, #16
 800916e:	77fb      	strb	r3, [r7, #31]
 8009170:	e055      	b.n	800921e <UART_SetConfig+0x216>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a75      	ldr	r2, [pc, #468]	; (800934c <UART_SetConfig+0x344>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d124      	bne.n	80091c6 <UART_SetConfig+0x1be>
 800917c:	4b70      	ldr	r3, [pc, #448]	; (8009340 <UART_SetConfig+0x338>)
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009184:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009188:	d011      	beq.n	80091ae <UART_SetConfig+0x1a6>
 800918a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800918e:	d817      	bhi.n	80091c0 <UART_SetConfig+0x1b8>
 8009190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009194:	d011      	beq.n	80091ba <UART_SetConfig+0x1b2>
 8009196:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800919a:	d811      	bhi.n	80091c0 <UART_SetConfig+0x1b8>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <UART_SetConfig+0x1a0>
 80091a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091a4:	d006      	beq.n	80091b4 <UART_SetConfig+0x1ac>
 80091a6:	e00b      	b.n	80091c0 <UART_SetConfig+0x1b8>
 80091a8:	2300      	movs	r3, #0
 80091aa:	77fb      	strb	r3, [r7, #31]
 80091ac:	e037      	b.n	800921e <UART_SetConfig+0x216>
 80091ae:	2302      	movs	r3, #2
 80091b0:	77fb      	strb	r3, [r7, #31]
 80091b2:	e034      	b.n	800921e <UART_SetConfig+0x216>
 80091b4:	2304      	movs	r3, #4
 80091b6:	77fb      	strb	r3, [r7, #31]
 80091b8:	e031      	b.n	800921e <UART_SetConfig+0x216>
 80091ba:	2308      	movs	r3, #8
 80091bc:	77fb      	strb	r3, [r7, #31]
 80091be:	e02e      	b.n	800921e <UART_SetConfig+0x216>
 80091c0:	2310      	movs	r3, #16
 80091c2:	77fb      	strb	r3, [r7, #31]
 80091c4:	e02b      	b.n	800921e <UART_SetConfig+0x216>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a61      	ldr	r2, [pc, #388]	; (8009350 <UART_SetConfig+0x348>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d124      	bne.n	800921a <UART_SetConfig+0x212>
 80091d0:	4b5b      	ldr	r3, [pc, #364]	; (8009340 <UART_SetConfig+0x338>)
 80091d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80091d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80091dc:	d011      	beq.n	8009202 <UART_SetConfig+0x1fa>
 80091de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80091e2:	d817      	bhi.n	8009214 <UART_SetConfig+0x20c>
 80091e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091e8:	d011      	beq.n	800920e <UART_SetConfig+0x206>
 80091ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091ee:	d811      	bhi.n	8009214 <UART_SetConfig+0x20c>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <UART_SetConfig+0x1f4>
 80091f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091f8:	d006      	beq.n	8009208 <UART_SetConfig+0x200>
 80091fa:	e00b      	b.n	8009214 <UART_SetConfig+0x20c>
 80091fc:	2300      	movs	r3, #0
 80091fe:	77fb      	strb	r3, [r7, #31]
 8009200:	e00d      	b.n	800921e <UART_SetConfig+0x216>
 8009202:	2302      	movs	r3, #2
 8009204:	77fb      	strb	r3, [r7, #31]
 8009206:	e00a      	b.n	800921e <UART_SetConfig+0x216>
 8009208:	2304      	movs	r3, #4
 800920a:	77fb      	strb	r3, [r7, #31]
 800920c:	e007      	b.n	800921e <UART_SetConfig+0x216>
 800920e:	2308      	movs	r3, #8
 8009210:	77fb      	strb	r3, [r7, #31]
 8009212:	e004      	b.n	800921e <UART_SetConfig+0x216>
 8009214:	2310      	movs	r3, #16
 8009216:	77fb      	strb	r3, [r7, #31]
 8009218:	e001      	b.n	800921e <UART_SetConfig+0x216>
 800921a:	2310      	movs	r3, #16
 800921c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009226:	d15c      	bne.n	80092e2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8009228:	7ffb      	ldrb	r3, [r7, #31]
 800922a:	2b08      	cmp	r3, #8
 800922c:	d827      	bhi.n	800927e <UART_SetConfig+0x276>
 800922e:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <UART_SetConfig+0x22c>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009259 	.word	0x08009259
 8009238:	08009261 	.word	0x08009261
 800923c:	08009269 	.word	0x08009269
 8009240:	0800927f 	.word	0x0800927f
 8009244:	0800926f 	.word	0x0800926f
 8009248:	0800927f 	.word	0x0800927f
 800924c:	0800927f 	.word	0x0800927f
 8009250:	0800927f 	.word	0x0800927f
 8009254:	08009277 	.word	0x08009277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009258:	f7fd ffc0 	bl	80071dc <HAL_RCC_GetPCLK1Freq>
 800925c:	61b8      	str	r0, [r7, #24]
        break;
 800925e:	e013      	b.n	8009288 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009260:	f7fd ffde 	bl	8007220 <HAL_RCC_GetPCLK2Freq>
 8009264:	61b8      	str	r0, [r7, #24]
        break;
 8009266:	e00f      	b.n	8009288 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009268:	4b3a      	ldr	r3, [pc, #232]	; (8009354 <UART_SetConfig+0x34c>)
 800926a:	61bb      	str	r3, [r7, #24]
        break;
 800926c:	e00c      	b.n	8009288 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800926e:	f7fd ff3f 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8009272:	61b8      	str	r0, [r7, #24]
        break;
 8009274:	e008      	b.n	8009288 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800927a:	61bb      	str	r3, [r7, #24]
        break;
 800927c:	e004      	b.n	8009288 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	77bb      	strb	r3, [r7, #30]
        break;
 8009286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 8085 	beq.w	800939a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	005a      	lsls	r2, r3, #1
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	441a      	add	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	2b0f      	cmp	r3, #15
 80092ac:	d916      	bls.n	80092dc <UART_SetConfig+0x2d4>
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b4:	d212      	bcs.n	80092dc <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	f023 030f 	bic.w	r3, r3, #15
 80092be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	085b      	lsrs	r3, r3, #1
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	89fb      	ldrh	r3, [r7, #14]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	89fa      	ldrh	r2, [r7, #14]
 80092d8:	60da      	str	r2, [r3, #12]
 80092da:	e05e      	b.n	800939a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	77bb      	strb	r3, [r7, #30]
 80092e0:	e05b      	b.n	800939a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092e2:	7ffb      	ldrb	r3, [r7, #31]
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d837      	bhi.n	8009358 <UART_SetConfig+0x350>
 80092e8:	a201      	add	r2, pc, #4	; (adr r2, 80092f0 <UART_SetConfig+0x2e8>)
 80092ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ee:	bf00      	nop
 80092f0:	08009315 	.word	0x08009315
 80092f4:	0800931d 	.word	0x0800931d
 80092f8:	08009325 	.word	0x08009325
 80092fc:	08009359 	.word	0x08009359
 8009300:	0800932b 	.word	0x0800932b
 8009304:	08009359 	.word	0x08009359
 8009308:	08009359 	.word	0x08009359
 800930c:	08009359 	.word	0x08009359
 8009310:	08009333 	.word	0x08009333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009314:	f7fd ff62 	bl	80071dc <HAL_RCC_GetPCLK1Freq>
 8009318:	61b8      	str	r0, [r7, #24]
        break;
 800931a:	e022      	b.n	8009362 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800931c:	f7fd ff80 	bl	8007220 <HAL_RCC_GetPCLK2Freq>
 8009320:	61b8      	str	r0, [r7, #24]
        break;
 8009322:	e01e      	b.n	8009362 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009324:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <UART_SetConfig+0x34c>)
 8009326:	61bb      	str	r3, [r7, #24]
        break;
 8009328:	e01b      	b.n	8009362 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800932a:	f7fd fee1 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 800932e:	61b8      	str	r0, [r7, #24]
        break;
 8009330:	e017      	b.n	8009362 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009336:	61bb      	str	r3, [r7, #24]
        break;
 8009338:	e013      	b.n	8009362 <UART_SetConfig+0x35a>
 800933a:	bf00      	nop
 800933c:	40013800 	.word	0x40013800
 8009340:	40021000 	.word	0x40021000
 8009344:	40004400 	.word	0x40004400
 8009348:	40004800 	.word	0x40004800
 800934c:	40004c00 	.word	0x40004c00
 8009350:	40005000 	.word	0x40005000
 8009354:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	77bb      	strb	r3, [r7, #30]
        break;
 8009360:	bf00      	nop
    }

    if (pclk != 0U)
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d018      	beq.n	800939a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	085a      	lsrs	r2, r3, #1
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	441a      	add	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	fbb2 f3f3 	udiv	r3, r2, r3
 800937a:	b29b      	uxth	r3, r3
 800937c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b0f      	cmp	r3, #15
 8009382:	d908      	bls.n	8009396 <UART_SetConfig+0x38e>
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938a:	d204      	bcs.n	8009396 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	60da      	str	r2, [r3, #12]
 8009394:	e001      	b.n	800939a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80093a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3720      	adds	r7, #32
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00a      	beq.n	80093da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	f003 0304 	and.w	r3, r3, #4
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	f003 0308 	and.w	r3, r3, #8
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	f003 0310 	and.w	r3, r3, #16
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00a      	beq.n	8009462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01a      	beq.n	80094c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094ae:	d10a      	bne.n	80094c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	605a      	str	r2, [r3, #4]
  }
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009504:	f7fb fb80 	bl	8004c08 <HAL_GetTick>
 8009508:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b08      	cmp	r3, #8
 8009516:	d10e      	bne.n	8009536 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f82d 	bl	8009586 <UART_WaitOnFlagUntilTimeout>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e023      	b.n	800957e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b04      	cmp	r3, #4
 8009542:	d10e      	bne.n	8009562 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f817 	bl	8009586 <UART_WaitOnFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e00d      	b.n	800957e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2220      	movs	r2, #32
 800956c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b09c      	sub	sp, #112	; 0x70
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	603b      	str	r3, [r7, #0]
 8009592:	4613      	mov	r3, r2
 8009594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009596:	e0a5      	b.n	80096e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	f000 80a1 	beq.w	80096e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095a2:	f7fb fb31 	bl	8004c08 <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d302      	bcc.n	80095b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80095b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d13e      	bne.n	8009636 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095cc:	667b      	str	r3, [r7, #100]	; 0x64
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e6      	bne.n	80095b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3308      	adds	r3, #8
 80095f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	f023 0301 	bic.w	r3, r3, #1
 8009600:	663b      	str	r3, [r7, #96]	; 0x60
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3308      	adds	r3, #8
 8009608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800960a:	64ba      	str	r2, [r7, #72]	; 0x48
 800960c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e5      	bne.n	80095ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2220      	movs	r2, #32
 8009628:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e067      	b.n	8009706 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d04f      	beq.n	80096e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800964e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009652:	d147      	bne.n	80096e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800965c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967c:	637b      	str	r3, [r7, #52]	; 0x34
 800967e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e6      	bne.n	800965e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	e853 3f00 	ldrex	r3, [r3]
 800969e:	613b      	str	r3, [r7, #16]
   return(result);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f023 0301 	bic.w	r3, r3, #1
 80096a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3308      	adds	r3, #8
 80096ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096b0:	623a      	str	r2, [r7, #32]
 80096b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b4:	69f9      	ldr	r1, [r7, #28]
 80096b6:	6a3a      	ldr	r2, [r7, #32]
 80096b8:	e841 2300 	strex	r3, r2, [r1]
 80096bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e5      	bne.n	8009690 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2220      	movs	r2, #32
 80096c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2220      	movs	r2, #32
 80096ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e010      	b.n	8009706 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	69da      	ldr	r2, [r3, #28]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	4013      	ands	r3, r2
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	bf0c      	ite	eq
 80096f4:	2301      	moveq	r3, #1
 80096f6:	2300      	movne	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	461a      	mov	r2, r3
 80096fc:	79fb      	ldrb	r3, [r7, #7]
 80096fe:	429a      	cmp	r2, r3
 8009700:	f43f af4a 	beq.w	8009598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3770      	adds	r7, #112	; 0x70
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009710:	b480      	push	{r7}
 8009712:	b091      	sub	sp, #68	; 0x44
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4613      	mov	r3, r2
 800971c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	88fa      	ldrh	r2, [r7, #6]
 8009728:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	88fa      	ldrh	r2, [r7, #6]
 8009730:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009742:	d10e      	bne.n	8009762 <UART_Start_Receive_IT+0x52>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d105      	bne.n	8009758 <UART_Start_Receive_IT+0x48>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009756:	e01a      	b.n	800978e <UART_Start_Receive_IT+0x7e>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	22ff      	movs	r2, #255	; 0xff
 800975c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009760:	e015      	b.n	800978e <UART_Start_Receive_IT+0x7e>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10d      	bne.n	8009786 <UART_Start_Receive_IT+0x76>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d104      	bne.n	800977c <UART_Start_Receive_IT+0x6c>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	22ff      	movs	r2, #255	; 0xff
 8009776:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800977a:	e008      	b.n	800978e <UART_Start_Receive_IT+0x7e>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	227f      	movs	r2, #127	; 0x7f
 8009780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009784:	e003      	b.n	800978e <UART_Start_Receive_IT+0x7e>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2222      	movs	r2, #34	; 0x22
 800979a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	f043 0301 	orr.w	r3, r3, #1
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3308      	adds	r3, #8
 80097ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097bc:	637a      	str	r2, [r7, #52]	; 0x34
 80097be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e5      	bne.n	800979c <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d8:	d107      	bne.n	80097ea <UART_Start_Receive_IT+0xda>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d103      	bne.n	80097ea <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	4a14      	ldr	r2, [pc, #80]	; (8009838 <UART_Start_Receive_IT+0x128>)
 80097e6:	665a      	str	r2, [r3, #100]	; 0x64
 80097e8:	e002      	b.n	80097f0 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4a13      	ldr	r2, [pc, #76]	; (800983c <UART_Start_Receive_IT+0x12c>)
 80097ee:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	613b      	str	r3, [r7, #16]
   return(result);
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800980c:	63bb      	str	r3, [r7, #56]	; 0x38
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	623b      	str	r3, [r7, #32]
 8009818:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	69f9      	ldr	r1, [r7, #28]
 800981c:	6a3a      	ldr	r2, [r7, #32]
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	61bb      	str	r3, [r7, #24]
   return(result);
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e6      	bne.n	80097f8 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3744      	adds	r7, #68	; 0x44
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	08009ae3 	.word	0x08009ae3
 800983c:	08009987 	.word	0x08009987

08009840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b095      	sub	sp, #84	; 0x54
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800985c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009866:	643b      	str	r3, [r7, #64]	; 0x40
 8009868:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800986c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e6      	bne.n	8009848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	61fb      	str	r3, [r7, #28]
   return(result);
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f023 0301 	bic.w	r3, r3, #1
 8009890:	64bb      	str	r3, [r7, #72]	; 0x48
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800989a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800989c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e5      	bne.n	800987a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d118      	bne.n	80098e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	e853 3f00 	ldrex	r3, [r3]
 80098c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f023 0310 	bic.w	r3, r3, #16
 80098ca:	647b      	str	r3, [r7, #68]	; 0x44
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d4:	61bb      	str	r3, [r7, #24]
 80098d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d8:	6979      	ldr	r1, [r7, #20]
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	e841 2300 	strex	r3, r2, [r1]
 80098e0:	613b      	str	r3, [r7, #16]
   return(result);
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e6      	bne.n	80098b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2220      	movs	r2, #32
 80098ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80098fa:	bf00      	nop
 80098fc:	3754      	adds	r7, #84	; 0x54
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009912:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff fb59 	bl	8008fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b088      	sub	sp, #32
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	60bb      	str	r3, [r7, #8]
   return(result);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	61bb      	str	r3, [r7, #24]
 800995a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	6979      	ldr	r1, [r7, #20]
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	613b      	str	r3, [r7, #16]
   return(result);
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e6      	bne.n	800993a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2220      	movs	r2, #32
 8009970:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fb25 	bl	8008fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800997e:	bf00      	nop
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b096      	sub	sp, #88	; 0x58
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009994:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800999c:	2b22      	cmp	r3, #34	; 0x22
 800999e:	f040 8094 	bne.w	8009aca <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80099a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80099b0:	b2d9      	uxtb	r1, r3
 80099b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099bc:	400a      	ands	r2, r1
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d177      	bne.n	8009ada <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099fe:	653b      	str	r3, [r7, #80]	; 0x50
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a08:	647b      	str	r3, [r7, #68]	; 0x44
 8009a0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a10:	e841 2300 	strex	r3, r2, [r1]
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e6      	bne.n	80099ea <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3308      	adds	r3, #8
 8009a22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	f023 0301 	bic.w	r3, r3, #1
 8009a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a3c:	633a      	str	r2, [r7, #48]	; 0x30
 8009a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e5      	bne.n	8009a1c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2220      	movs	r2, #32
 8009a54:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d12e      	bne.n	8009ac2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f023 0310 	bic.w	r3, r3, #16
 8009a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a88:	61fb      	str	r3, [r7, #28]
 8009a8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	69b9      	ldr	r1, [r7, #24]
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	e841 2300 	strex	r3, r2, [r1]
 8009a94:	617b      	str	r3, [r7, #20]
   return(result);
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e6      	bne.n	8009a6a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	69db      	ldr	r3, [r3, #28]
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	2b10      	cmp	r3, #16
 8009aa8:	d103      	bne.n	8009ab2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2210      	movs	r2, #16
 8009ab0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fa98 	bl	8008ff0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ac0:	e00b      	b.n	8009ada <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7f9 fbce 	bl	8003264 <HAL_UART_RxCpltCallback>
}
 8009ac8:	e007      	b.n	8009ada <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0208 	orr.w	r2, r2, #8
 8009ad8:	619a      	str	r2, [r3, #24]
}
 8009ada:	bf00      	nop
 8009adc:	3758      	adds	r7, #88	; 0x58
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b096      	sub	sp, #88	; 0x58
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009af0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009af8:	2b22      	cmp	r3, #34	; 0x22
 8009afa:	f040 8094 	bne.w	8009c26 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b04:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b0e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009b12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b16:	4013      	ands	r3, r2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	1c9a      	adds	r2, r3, #2
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	3b01      	subs	r3, #1
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d177      	bne.n	8009c36 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b64:	643b      	str	r3, [r7, #64]	; 0x40
 8009b66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b6c:	e841 2300 	strex	r3, r2, [r1]
 8009b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e6      	bne.n	8009b46 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	f023 0301 	bic.w	r3, r3, #1
 8009b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3308      	adds	r3, #8
 8009b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e5      	bne.n	8009b78 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d12e      	bne.n	8009c1e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f023 0310 	bic.w	r3, r3, #16
 8009bda:	647b      	str	r3, [r7, #68]	; 0x44
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	461a      	mov	r2, r3
 8009be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be4:	61bb      	str	r3, [r7, #24]
 8009be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be8:	6979      	ldr	r1, [r7, #20]
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	e841 2300 	strex	r3, r2, [r1]
 8009bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e6      	bne.n	8009bc6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f003 0310 	and.w	r3, r3, #16
 8009c02:	2b10      	cmp	r3, #16
 8009c04:	d103      	bne.n	8009c0e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2210      	movs	r2, #16
 8009c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff f9ea 	bl	8008ff0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c1c:	e00b      	b.n	8009c36 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f9 fb20 	bl	8003264 <HAL_UART_RxCpltCallback>
}
 8009c24:	e007      	b.n	8009c36 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	699a      	ldr	r2, [r3, #24]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f042 0208 	orr.w	r2, r2, #8
 8009c34:	619a      	str	r2, [r3, #24]
}
 8009c36:	bf00      	nop
 8009c38:	3758      	adds	r7, #88	; 0x58
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
	...

08009c54 <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009c58:	4904      	ldr	r1, [pc, #16]	; (8009c6c <MX_FATFS_Init+0x18>)
 8009c5a:	4805      	ldr	r0, [pc, #20]	; (8009c70 <MX_FATFS_Init+0x1c>)
 8009c5c:	f004 fbc8 	bl	800e3f0 <FATFS_LinkDriver>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <MX_FATFS_Init+0x20>)
 8009c66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009c68:	bf00      	nop
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20002e14 	.word	0x20002e14
 8009c70:	20000010 	.word	0x20000010
 8009c74:	20002e18 	.word	0x20002e18

08009c78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009c7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7f8 fe07 	bl	80028a8 <SD_disk_initialize>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	4603      	mov	r3, r0
 8009cae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7f8 fee4 	bl	8002a80 <SD_disk_status>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	607a      	str	r2, [r7, #4]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8009cd4:	7bf8      	ldrb	r0, [r7, #15]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	68b9      	ldr	r1, [r7, #8]
 8009cdc:	f7f8 fee6 	bl	8002aac <SD_disk_read>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8009cfc:	7bf8      	ldrb	r0, [r7, #15]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	f7f8 ff3c 	bl	8002b80 <SD_disk_write>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	603a      	str	r2, [r7, #0]
 8009d1e:	71fb      	strb	r3, [r7, #7]
 8009d20:	460b      	mov	r3, r1
 8009d22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	79b9      	ldrb	r1, [r7, #6]
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7f8 ffac 	bl	8002c88 <SD_disk_ioctl>
 8009d30:	4603      	mov	r3, r0
 8009d32:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <disk_status+0x30>)
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	79fa      	ldrb	r2, [r7, #7]
 8009d54:	4905      	ldr	r1, [pc, #20]	; (8009d6c <disk_status+0x30>)
 8009d56:	440a      	add	r2, r1
 8009d58:	7a12      	ldrb	r2, [r2, #8]
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	4798      	blx	r3
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	20000454 	.word	0x20000454

08009d70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	4a0d      	ldr	r2, [pc, #52]	; (8009db8 <disk_initialize+0x48>)
 8009d82:	5cd3      	ldrb	r3, [r2, r3]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d111      	bne.n	8009dac <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	4a0b      	ldr	r2, [pc, #44]	; (8009db8 <disk_initialize+0x48>)
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	4a09      	ldr	r2, [pc, #36]	; (8009db8 <disk_initialize+0x48>)
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	79fa      	ldrb	r2, [r7, #7]
 8009d9e:	4906      	ldr	r1, [pc, #24]	; (8009db8 <disk_initialize+0x48>)
 8009da0:	440a      	add	r2, r1
 8009da2:	7a12      	ldrb	r2, [r2, #8]
 8009da4:	4610      	mov	r0, r2
 8009da6:	4798      	blx	r3
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000454 	.word	0x20000454

08009dbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009dbc:	b590      	push	{r4, r7, lr}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <disk_read+0x3c>)
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	689c      	ldr	r4, [r3, #8]
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	4a07      	ldr	r2, [pc, #28]	; (8009df8 <disk_read+0x3c>)
 8009ddc:	4413      	add	r3, r2
 8009dde:	7a18      	ldrb	r0, [r3, #8]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	47a0      	blx	r4
 8009de8:	4603      	mov	r3, r0
 8009dea:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd90      	pop	{r4, r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000454 	.word	0x20000454

08009dfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009dfc:	b590      	push	{r4, r7, lr}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	607a      	str	r2, [r7, #4]
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	4a0a      	ldr	r2, [pc, #40]	; (8009e38 <disk_write+0x3c>)
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	68dc      	ldr	r4, [r3, #12]
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	4a07      	ldr	r2, [pc, #28]	; (8009e38 <disk_write+0x3c>)
 8009e1c:	4413      	add	r3, r2
 8009e1e:	7a18      	ldrb	r0, [r3, #8]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	47a0      	blx	r4
 8009e28:	4603      	mov	r3, r0
 8009e2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd90      	pop	{r4, r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000454 	.word	0x20000454

08009e3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	603a      	str	r2, [r7, #0]
 8009e46:	71fb      	strb	r3, [r7, #7]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	4a09      	ldr	r2, [pc, #36]	; (8009e74 <disk_ioctl+0x38>)
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	79fa      	ldrb	r2, [r7, #7]
 8009e5a:	4906      	ldr	r1, [pc, #24]	; (8009e74 <disk_ioctl+0x38>)
 8009e5c:	440a      	add	r2, r1
 8009e5e:	7a10      	ldrb	r0, [r2, #8]
 8009e60:	79b9      	ldrb	r1, [r7, #6]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4798      	blx	r3
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
  return res;
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000454 	.word	0x20000454

08009e78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009e8c:	e007      	b.n	8009e9e <mem_cpy+0x26>
		*d++ = *s++;
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	1c53      	adds	r3, r2, #1
 8009e92:	613b      	str	r3, [r7, #16]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	1c59      	adds	r1, r3, #1
 8009e98:	6179      	str	r1, [r7, #20]
 8009e9a:	7812      	ldrb	r2, [r2, #0]
 8009e9c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	1e5a      	subs	r2, r3, #1
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1f2      	bne.n	8009e8e <mem_cpy+0x16>
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	371c      	adds	r7, #28
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009eb6:	b480      	push	{r7}
 8009eb8:	b087      	sub	sp, #28
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009ec6:	e005      	b.n	8009ed4 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	617a      	str	r2, [r7, #20]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	b2d2      	uxtb	r2, r2
 8009ed2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	1e5a      	subs	r2, r3, #1
 8009ed8:	607a      	str	r2, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f4      	bne.n	8009ec8 <mem_set+0x12>
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009eec:	b480      	push	{r7}
 8009eee:	b089      	sub	sp, #36	; 0x24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	61fb      	str	r3, [r7, #28]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009f04:	bf00      	nop
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	1e5a      	subs	r2, r3, #1
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00d      	beq.n	8009f2c <mem_cmp+0x40>
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	61fa      	str	r2, [r7, #28]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	61ba      	str	r2, [r7, #24]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	1acb      	subs	r3, r1, r3
 8009f24:	617b      	str	r3, [r7, #20]
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d0ec      	beq.n	8009f06 <mem_cmp+0x1a>
	return r;
 8009f2c:	697b      	ldr	r3, [r7, #20]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3724      	adds	r7, #36	; 0x24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009f44:	e002      	b.n	8009f4c <chk_chr+0x12>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	607b      	str	r3, [r7, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <chk_chr+0x26>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d1f2      	bne.n	8009f46 <chk_chr+0xc>
	return *str;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	781b      	ldrb	r3, [r3, #0]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	e03d      	b.n	800a000 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8009f84:	4932      	ldr	r1, [pc, #200]	; (800a050 <chk_lock+0xe0>)
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d02e      	beq.n	8009ff6 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009f98:	492d      	ldr	r1, [pc, #180]	; (800a050 <chk_lock+0xe0>)
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	005b      	lsls	r3, r3, #1
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d122      	bne.n	8009ffa <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8009fb4:	4926      	ldr	r1, [pc, #152]	; (800a050 <chk_lock+0xe0>)
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fcc:	3308      	adds	r3, #8
 8009fce:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d112      	bne.n	8009ffa <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8009fd4:	491e      	ldr	r1, [pc, #120]	; (800a050 <chk_lock+0xe0>)
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	440b      	add	r3, r1
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	881a      	ldrh	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fec:	3306      	adds	r3, #6
 8009fee:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d102      	bne.n	8009ffa <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8009ff4:	e007      	b.n	800a006 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d9be      	bls.n	8009f84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d109      	bne.n	800a020 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <chk_lock+0xa8>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d101      	bne.n	800a01c <chk_lock+0xac>
 800a018:	2300      	movs	r3, #0
 800a01a:	e013      	b.n	800a044 <chk_lock+0xd4>
 800a01c:	2312      	movs	r3, #18
 800a01e:	e011      	b.n	800a044 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10b      	bne.n	800a03e <chk_lock+0xce>
 800a026:	490a      	ldr	r1, [pc, #40]	; (800a050 <chk_lock+0xe0>)
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	4613      	mov	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	330a      	adds	r3, #10
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03c:	d101      	bne.n	800a042 <chk_lock+0xd2>
 800a03e:	2310      	movs	r3, #16
 800a040:	e000      	b.n	800a044 <chk_lock+0xd4>
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	2000023c 	.word	0x2000023c

0800a054 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a05a:	2300      	movs	r3, #0
 800a05c:	607b      	str	r3, [r7, #4]
 800a05e:	e002      	b.n	800a066 <enq_lock+0x12>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3301      	adds	r3, #1
 800a064:	607b      	str	r3, [r7, #4]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d809      	bhi.n	800a080 <enq_lock+0x2c>
 800a06c:	490a      	ldr	r1, [pc, #40]	; (800a098 <enq_lock+0x44>)
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	4613      	mov	r3, r2
 800a072:	005b      	lsls	r3, r3, #1
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1ef      	bne.n	800a060 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b02      	cmp	r3, #2
 800a084:	bf14      	ite	ne
 800a086:	2301      	movne	r3, #1
 800a088:	2300      	moveq	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	2000023c 	.word	0x2000023c

0800a09c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	e030      	b.n	800a10e <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800a0ac:	495b      	ldr	r1, [pc, #364]	; (800a21c <inc_lock+0x180>)
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d11f      	bne.n	800a108 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800a0c8:	4954      	ldr	r1, [pc, #336]	; (800a21c <inc_lock+0x180>)
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	440b      	add	r3, r1
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d10f      	bne.n	800a108 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800a0e8:	494c      	ldr	r1, [pc, #304]	; (800a21c <inc_lock+0x180>)
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	881a      	ldrh	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a100:	3306      	adds	r3, #6
 800a102:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800a104:	429a      	cmp	r2, r3
 800a106:	d006      	beq.n	800a116 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3301      	adds	r3, #1
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d9cb      	bls.n	800a0ac <inc_lock+0x10>
 800a114:	e000      	b.n	800a118 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800a116:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d14a      	bne.n	800a1b4 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	e002      	b.n	800a12a <inc_lock+0x8e>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3301      	adds	r3, #1
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d809      	bhi.n	800a144 <inc_lock+0xa8>
 800a130:	493a      	ldr	r1, [pc, #232]	; (800a21c <inc_lock+0x180>)
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4613      	mov	r3, r2
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	440b      	add	r3, r1
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1ef      	bne.n	800a124 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d101      	bne.n	800a14e <inc_lock+0xb2>
 800a14a:	2300      	movs	r3, #0
 800a14c:	e05f      	b.n	800a20e <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a154:	6819      	ldr	r1, [r3, #0]
 800a156:	4831      	ldr	r0, [pc, #196]	; (800a21c <inc_lock+0x180>)
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4613      	mov	r3, r2
 800a15c:	005b      	lsls	r3, r3, #1
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4403      	add	r3, r0
 800a164:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16c:	3308      	adds	r3, #8
 800a16e:	6819      	ldr	r1, [r3, #0]
 800a170:	482a      	ldr	r0, [pc, #168]	; (800a21c <inc_lock+0x180>)
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	4613      	mov	r3, r2
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	4413      	add	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4403      	add	r3, r0
 800a17e:	3304      	adds	r3, #4
 800a180:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a188:	3306      	adds	r3, #6
 800a18a:	8818      	ldrh	r0, [r3, #0]
 800a18c:	4923      	ldr	r1, [pc, #140]	; (800a21c <inc_lock+0x180>)
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4613      	mov	r3, r2
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	4413      	add	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	440b      	add	r3, r1
 800a19a:	3308      	adds	r3, #8
 800a19c:	4602      	mov	r2, r0
 800a19e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a1a0:	491e      	ldr	r1, [pc, #120]	; (800a21c <inc_lock+0x180>)
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	330a      	adds	r3, #10
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00c      	beq.n	800a1d4 <inc_lock+0x138>
 800a1ba:	4918      	ldr	r1, [pc, #96]	; (800a21c <inc_lock+0x180>)
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	330a      	adds	r3, #10
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <inc_lock+0x138>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e01c      	b.n	800a20e <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10b      	bne.n	800a1f2 <inc_lock+0x156>
 800a1da:	4910      	ldr	r1, [pc, #64]	; (800a21c <inc_lock+0x180>)
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	330a      	adds	r3, #10
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	b299      	uxth	r1, r3
 800a1f0:	e001      	b.n	800a1f6 <inc_lock+0x15a>
 800a1f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1f6:	4809      	ldr	r0, [pc, #36]	; (800a21c <inc_lock+0x180>)
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4403      	add	r3, r0
 800a204:	330a      	adds	r3, #10
 800a206:	460a      	mov	r2, r1
 800a208:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	2000023c 	.word	0x2000023c

0800a220 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	607b      	str	r3, [r7, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d82e      	bhi.n	800a292 <dec_lock+0x72>
		n = Files[i].ctr;
 800a234:	491b      	ldr	r1, [pc, #108]	; (800a2a4 <dec_lock+0x84>)
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	4613      	mov	r3, r2
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	4413      	add	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	440b      	add	r3, r1
 800a242:	330a      	adds	r3, #10
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a248:	89fb      	ldrh	r3, [r7, #14]
 800a24a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a24e:	d101      	bne.n	800a254 <dec_lock+0x34>
 800a250:	2300      	movs	r3, #0
 800a252:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a254:	89fb      	ldrh	r3, [r7, #14]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d002      	beq.n	800a260 <dec_lock+0x40>
 800a25a:	89fb      	ldrh	r3, [r7, #14]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a260:	4910      	ldr	r1, [pc, #64]	; (800a2a4 <dec_lock+0x84>)
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	4613      	mov	r3, r2
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	440b      	add	r3, r1
 800a26e:	330a      	adds	r3, #10
 800a270:	89fa      	ldrh	r2, [r7, #14]
 800a272:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a274:	89fb      	ldrh	r3, [r7, #14]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d108      	bne.n	800a28c <dec_lock+0x6c>
 800a27a:	490a      	ldr	r1, [pc, #40]	; (800a2a4 <dec_lock+0x84>)
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	4613      	mov	r3, r2
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	4413      	add	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	440b      	add	r3, r1
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	737b      	strb	r3, [r7, #13]
 800a290:	e001      	b.n	800a296 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a292:	2302      	movs	r3, #2
 800a294:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a296:	7b7b      	ldrb	r3, [r7, #13]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	2000023c 	.word	0x2000023c

0800a2a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e016      	b.n	800a2e4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a2b6:	4910      	ldr	r1, [pc, #64]	; (800a2f8 <clear_lock+0x50>)
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	005b      	lsls	r3, r3, #1
 800a2be:	4413      	add	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	440b      	add	r3, r1
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d108      	bne.n	800a2de <clear_lock+0x36>
 800a2cc:	490a      	ldr	r1, [pc, #40]	; (800a2f8 <clear_lock+0x50>)
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	440b      	add	r3, r1
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d9e5      	bls.n	800a2b6 <clear_lock+0xe>
	}
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	2000023c 	.word	0x2000023c

0800a2fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a30e:	3304      	adds	r3, #4
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d047      	beq.n	800a3a6 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a31c:	330c      	adds	r3, #12
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a328:	3301      	adds	r3, #1
 800a32a:	7818      	ldrb	r0, [r3, #0]
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	2301      	movs	r3, #1
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	f7ff fd63 	bl	8009dfc <disk_write>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <sync_window+0x46>
			res = FR_DISK_ERR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	73fb      	strb	r3, [r7, #15]
 800a340:	e031      	b.n	800a3a6 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a348:	3304      	adds	r3, #4
 800a34a:	2200      	movs	r2, #0
 800a34c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	1ad2      	subs	r2, r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a360:	3318      	adds	r3, #24
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	429a      	cmp	r2, r3
 800a366:	d21e      	bcs.n	800a3a6 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36e:	3303      	adds	r3, #3
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	613b      	str	r3, [r7, #16]
 800a374:	e014      	b.n	800a3a0 <sync_window+0xa4>
					wsect += fs->fsize;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37c:	3318      	adds	r3, #24
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	4413      	add	r3, r2
 800a384:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a38c:	3301      	adds	r3, #1
 800a38e:	7818      	ldrb	r0, [r3, #0]
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	2301      	movs	r3, #1
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	f7ff fd31 	bl	8009dfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	613b      	str	r3, [r7, #16]
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d8e7      	bhi.n	800a376 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3718      	adds	r7, #24
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a3c4:	330c      	adds	r3, #12
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d01f      	beq.n	800a40e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff ff94 	bl	800a2fc <sync_window>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d117      	bne.n	800a40e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	7818      	ldrb	r0, [r3, #0]
 800a3e8:	6879      	ldr	r1, [r7, #4]
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	f7ff fce5 	bl	8009dbc <disk_read>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a408:	330c      	adds	r3, #12
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7ff ff6b 	bl	800a2fc <sync_window>
 800a426:	4603      	mov	r3, r0
 800a428:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f040 80bd 	bne.w	800a5ac <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	f040 80a7 	bne.w	800a58e <sync_fs+0x176>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a446:	3305      	adds	r3, #5
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	f040 809f 	bne.w	800a58e <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a458:	330a      	adds	r3, #10
 800a45a:	881b      	ldrh	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	2100      	movs	r1, #0
 800a460:	f7ff fd29 	bl	8009eb6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2255      	movs	r2, #85	; 0x55
 800a468:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	22aa      	movs	r2, #170	; 0xaa
 800a470:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2252      	movs	r2, #82	; 0x52
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2252      	movs	r2, #82	; 0x52
 800a47e:	705a      	strb	r2, [r3, #1]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2261      	movs	r2, #97	; 0x61
 800a484:	709a      	strb	r2, [r3, #2]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2241      	movs	r2, #65	; 0x41
 800a48a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2272      	movs	r2, #114	; 0x72
 800a490:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2272      	movs	r2, #114	; 0x72
 800a498:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2241      	movs	r2, #65	; 0x41
 800a4a0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2261      	movs	r2, #97	; 0x61
 800a4a8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b2:	3310      	adds	r3, #16
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c4:	3310      	adds	r3, #16
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	0a1b      	lsrs	r3, r3, #8
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4dc:	3310      	adds	r3, #16
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	0c1b      	lsrs	r3, r3, #16
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f0:	3310      	adds	r3, #16
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	0e1b      	lsrs	r3, r3, #24
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a504:	330c      	adds	r3, #12
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a516:	330c      	adds	r3, #12
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	0a1b      	lsrs	r3, r3, #8
 800a51e:	b29b      	uxth	r3, r3
 800a520:	b2da      	uxtb	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52e:	330c      	adds	r3, #12
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	0c1b      	lsrs	r3, r3, #16
 800a534:	b2da      	uxtb	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a542:	330c      	adds	r3, #12
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	0e1b      	lsrs	r3, r3, #24
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a556:	331c      	adds	r3, #28
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	1c5a      	adds	r2, r3, #1
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a562:	330c      	adds	r3, #12
 800a564:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a56c:	3301      	adds	r3, #1
 800a56e:	7818      	ldrb	r0, [r3, #0]
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a578:	330c      	adds	r3, #12
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	2301      	movs	r3, #1
 800a57e:	f7ff fc3d 	bl	8009dfc <disk_write>
			fs->fsi_flag = 0;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a588:	3305      	adds	r3, #5
 800a58a:	2200      	movs	r2, #0
 800a58c:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a594:	3301      	adds	r3, #1
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff fc4d 	bl	8009e3c <disk_ioctl>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <sync_fs+0x194>
			res = FR_DISK_ERR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	3b02      	subs	r3, #2
 800a5c4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5cc:	3314      	adds	r3, #20
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3b02      	subs	r3, #2
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d301      	bcc.n	800a5dc <clust2sect+0x26>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e00e      	b.n	800a5fa <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	fb03 f202 	mul.w	r2, r3, r2
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4413      	add	r3, r2
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b086      	sub	sp, #24
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d907      	bls.n	800a626 <get_fat+0x20>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a61c:	3314      	adds	r3, #20
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	429a      	cmp	r2, r3
 800a624:	d302      	bcc.n	800a62c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a626:	2301      	movs	r3, #1
 800a628:	617b      	str	r3, [r7, #20]
 800a62a:	e0ec      	b.n	800a806 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a62c:	f04f 33ff 	mov.w	r3, #4294967295
 800a630:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	f000 809e 	beq.w	800a77c <get_fat+0x176>
 800a640:	2b03      	cmp	r3, #3
 800a642:	f300 80d6 	bgt.w	800a7f2 <get_fat+0x1ec>
 800a646:	2b01      	cmp	r3, #1
 800a648:	d002      	beq.n	800a650 <get_fat+0x4a>
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d063      	beq.n	800a716 <get_fat+0x110>
 800a64e:	e0d0      	b.n	800a7f2 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	085b      	lsrs	r3, r3, #1
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66c:	330a      	adds	r3, #10
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	4619      	mov	r1, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	fbb3 f3f1 	udiv	r3, r3, r1
 800a678:	4413      	add	r3, r2
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff fe97 	bl	800a3b0 <move_window>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	f040 80b7 	bne.w	800a7f8 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	1c5a      	adds	r2, r3, #1
 800a68e:	60fa      	str	r2, [r7, #12]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a696:	320a      	adds	r2, #10
 800a698:	8812      	ldrh	r2, [r2, #0]
 800a69a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a69e:	fb02 f201 	mul.w	r2, r2, r1
 800a6a2:	1a9b      	subs	r3, r3, r2
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	5cd3      	ldrb	r3, [r2, r3]
 800a6a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b8:	330a      	adds	r3, #10
 800a6ba:	881b      	ldrh	r3, [r3, #0]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6c4:	4413      	add	r3, r2
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff fe71 	bl	800a3b0 <move_window>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f040 8093 	bne.w	800a7fc <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6dc:	330a      	adds	r3, #10
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6e8:	fb02 f201 	mul.w	r2, r2, r1
 800a6ec:	1a9b      	subs	r3, r3, r2
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	5cd3      	ldrb	r3, [r2, r3]
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <get_fat+0x106>
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	091b      	lsrs	r3, r3, #4
 800a70a:	e002      	b.n	800a712 <get_fat+0x10c>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a712:	617b      	str	r3, [r7, #20]
			break;
 800a714:	e077      	b.n	800a806 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a724:	330a      	adds	r3, #10
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	085b      	lsrs	r3, r3, #1
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	4619      	mov	r1, r3
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	fbb3 f3f1 	udiv	r3, r3, r1
 800a734:	4413      	add	r3, r2
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff fe39 	bl	800a3b0 <move_window>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d15d      	bne.n	800a800 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	005a      	lsls	r2, r3, #1
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a74e:	330a      	adds	r3, #10
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	fbb2 f1f3 	udiv	r1, r2, r3
 800a756:	fb03 f301 	mul.w	r3, r3, r1
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	4413      	add	r3, r2
 800a760:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	3301      	adds	r3, #1
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	021b      	lsls	r3, r3, #8
 800a76a:	b21a      	sxth	r2, r3
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	b21b      	sxth	r3, r3
 800a772:	4313      	orrs	r3, r2
 800a774:	b21b      	sxth	r3, r3
 800a776:	b29b      	uxth	r3, r3
 800a778:	617b      	str	r3, [r7, #20]
			break;
 800a77a:	e044      	b.n	800a806 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78a:	330a      	adds	r3, #10
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	089b      	lsrs	r3, r3, #2
 800a790:	b29b      	uxth	r3, r3
 800a792:	4619      	mov	r1, r3
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	fbb3 f3f1 	udiv	r3, r3, r1
 800a79a:	4413      	add	r3, r2
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff fe06 	bl	800a3b0 <move_window>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d12c      	bne.n	800a804 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	009a      	lsls	r2, r3, #2
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b4:	330a      	adds	r3, #10
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7bc:	fb03 f301 	mul.w	r3, r3, r1
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	3303      	adds	r3, #3
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	061a      	lsls	r2, r3, #24
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	041b      	lsls	r3, r3, #16
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	3201      	adds	r2, #1
 800a7de:	7812      	ldrb	r2, [r2, #0]
 800a7e0:	0212      	lsls	r2, r2, #8
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	7812      	ldrb	r2, [r2, #0]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7ee:	617b      	str	r3, [r7, #20]
			break;
 800a7f0:	e009      	b.n	800a806 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	e006      	b.n	800a806 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7f8:	bf00      	nop
 800a7fa:	e004      	b.n	800a806 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7fc:	bf00      	nop
 800a7fe:	e002      	b.n	800a806 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a800:	bf00      	nop
 800a802:	e000      	b.n	800a806 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a804:	bf00      	nop
		}
	}

	return val;
 800a806:	697b      	ldr	r3, [r7, #20]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d907      	bls.n	800a832 <put_fat+0x22>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a828:	3314      	adds	r3, #20
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d302      	bcc.n	800a838 <put_fat+0x28>
		res = FR_INT_ERR;
 800a832:	2302      	movs	r3, #2
 800a834:	77fb      	strb	r3, [r7, #31]
 800a836:	e146      	b.n	800aac6 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b03      	cmp	r3, #3
 800a842:	f000 80d9 	beq.w	800a9f8 <put_fat+0x1e8>
 800a846:	2b03      	cmp	r3, #3
 800a848:	f300 8133 	bgt.w	800aab2 <put_fat+0x2a2>
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d003      	beq.n	800a858 <put_fat+0x48>
 800a850:	2b02      	cmp	r3, #2
 800a852:	f000 8095 	beq.w	800a980 <put_fat+0x170>
 800a856:	e12c      	b.n	800aab2 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	617b      	str	r3, [r7, #20]
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	085b      	lsrs	r3, r3, #1
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4413      	add	r3, r2
 800a864:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a874:	330a      	adds	r3, #10
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	4619      	mov	r1, r3
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a880:	4413      	add	r3, r2
 800a882:	4619      	mov	r1, r3
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f7ff fd93 	bl	800a3b0 <move_window>
 800a88a:	4603      	mov	r3, r0
 800a88c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a88e:	7ffb      	ldrb	r3, [r7, #31]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f040 8111 	bne.w	800aab8 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	617a      	str	r2, [r7, #20]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8a2:	320a      	adds	r2, #10
 800a8a4:	8812      	ldrh	r2, [r2, #0]
 800a8a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8aa:	fb02 f201 	mul.w	r2, r2, r1
 800a8ae:	1a9b      	subs	r3, r3, r2
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00d      	beq.n	800a8dc <put_fat+0xcc>
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	b25b      	sxtb	r3, r3
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	b25a      	sxtb	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	b25b      	sxtb	r3, r3
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	b25b      	sxtb	r3, r3
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	e001      	b.n	800a8e0 <put_fat+0xd0>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8fe:	330a      	adds	r3, #10
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	4619      	mov	r1, r3
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	fbb3 f3f1 	udiv	r3, r3, r1
 800a90a:	4413      	add	r3, r2
 800a90c:	4619      	mov	r1, r3
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f7ff fd4e 	bl	800a3b0 <move_window>
 800a914:	4603      	mov	r3, r0
 800a916:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a918:	7ffb      	ldrb	r3, [r7, #31]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f040 80ce 	bne.w	800aabc <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a926:	330a      	adds	r3, #10
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a932:	fb02 f201 	mul.w	r2, r2, r1
 800a936:	1a9b      	subs	r3, r3, r2
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <put_fat+0x140>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	091b      	lsrs	r3, r3, #4
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	e00e      	b.n	800a96e <put_fat+0x15e>
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	b25b      	sxtb	r3, r3
 800a956:	f023 030f 	bic.w	r3, r3, #15
 800a95a:	b25a      	sxtb	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	0a1b      	lsrs	r3, r3, #8
 800a960:	b25b      	sxtb	r3, r3
 800a962:	f003 030f 	and.w	r3, r3, #15
 800a966:	b25b      	sxtb	r3, r3
 800a968:	4313      	orrs	r3, r2
 800a96a:	b25b      	sxtb	r3, r3
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	69ba      	ldr	r2, [r7, #24]
 800a970:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a978:	3304      	adds	r3, #4
 800a97a:	2201      	movs	r2, #1
 800a97c:	701a      	strb	r2, [r3, #0]
			break;
 800a97e:	e0a2      	b.n	800aac6 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a98e:	330a      	adds	r3, #10
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	085b      	lsrs	r3, r3, #1
 800a994:	b29b      	uxth	r3, r3
 800a996:	4619      	mov	r1, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a99e:	4413      	add	r3, r2
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff fd04 	bl	800a3b0 <move_window>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9ac:	7ffb      	ldrb	r3, [r7, #31]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f040 8086 	bne.w	800aac0 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	005a      	lsls	r2, r3, #1
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9be:	330a      	adds	r3, #10
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9c6:	fb03 f301 	mul.w	r3, r3, r1
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	701a      	strb	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	0a1b      	lsrs	r3, r3, #8
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	b2d2      	uxtb	r2, r2
 800a9e8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	701a      	strb	r2, [r3, #0]
			break;
 800a9f6:	e066      	b.n	800aac6 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa06:	330a      	adds	r3, #10
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	089b      	lsrs	r3, r3, #2
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4619      	mov	r1, r3
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa16:	4413      	add	r3, r2
 800aa18:	4619      	mov	r1, r3
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7ff fcc8 	bl	800a3b0 <move_window>
 800aa20:	4603      	mov	r3, r0
 800aa22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa24:	7ffb      	ldrb	r3, [r7, #31]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d14c      	bne.n	800aac4 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	009a      	lsls	r2, r3, #2
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa34:	330a      	adds	r3, #10
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa3c:	fb03 f301 	mul.w	r3, r3, r1
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	3303      	adds	r3, #3
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	061a      	lsls	r2, r3, #24
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	3302      	adds	r3, #2
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	041b      	lsls	r3, r3, #16
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	3201      	adds	r2, #1
 800aa5e:	7812      	ldrb	r2, [r2, #0]
 800aa60:	0212      	lsls	r2, r2, #8
 800aa62:	4313      	orrs	r3, r2
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	0a1b      	lsrs	r3, r3, #8
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	3301      	adds	r3, #1
 800aa88:	b2d2      	uxtb	r2, r2
 800aa8a:	701a      	strb	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	0c1a      	lsrs	r2, r3, #16
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	3302      	adds	r3, #2
 800aa94:	b2d2      	uxtb	r2, r2
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	0e1a      	lsrs	r2, r3, #24
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	3303      	adds	r3, #3
 800aaa0:	b2d2      	uxtb	r2, r2
 800aaa2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaaa:	3304      	adds	r3, #4
 800aaac:	2201      	movs	r2, #1
 800aaae:	701a      	strb	r2, [r3, #0]
			break;
 800aab0:	e009      	b.n	800aac6 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800aab2:	2302      	movs	r3, #2
 800aab4:	77fb      	strb	r3, [r7, #31]
 800aab6:	e006      	b.n	800aac6 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800aab8:	bf00      	nop
 800aaba:	e004      	b.n	800aac6 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800aabc:	bf00      	nop
 800aabe:	e002      	b.n	800aac6 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800aac0:	bf00      	nop
 800aac2:	e000      	b.n	800aac6 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800aac4:	bf00      	nop
		}
	}

	return res;
 800aac6:	7ffb      	ldrb	r3, [r7, #31]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d907      	bls.n	800aaf0 <remove_chain+0x20>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae6:	3314      	adds	r3, #20
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d302      	bcc.n	800aaf6 <remove_chain+0x26>
		res = FR_INT_ERR;
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	73fb      	strb	r3, [r7, #15]
 800aaf4:	e04f      	b.n	800ab96 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800aafa:	e040      	b.n	800ab7e <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff fd81 	bl	800a606 <get_fat>
 800ab04:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d041      	beq.n	800ab90 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d102      	bne.n	800ab18 <remove_chain+0x48>
 800ab12:	2302      	movs	r3, #2
 800ab14:	73fb      	strb	r3, [r7, #15]
 800ab16:	e03e      	b.n	800ab96 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1e:	d102      	bne.n	800ab26 <remove_chain+0x56>
 800ab20:	2301      	movs	r3, #1
 800ab22:	73fb      	strb	r3, [r7, #15]
 800ab24:	e037      	b.n	800ab96 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800ab26:	2200      	movs	r2, #0
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff fe70 	bl	800a810 <put_fat>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d12c      	bne.n	800ab94 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab40:	3310      	adds	r3, #16
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab48:	d017      	beq.n	800ab7a <remove_chain+0xaa>
				fs->free_clust++;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab50:	3310      	adds	r3, #16
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab5c:	3310      	adds	r3, #16
 800ab5e:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab66:	3305      	adds	r3, #5
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab76:	3305      	adds	r3, #5
 800ab78:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab84:	3314      	adds	r3, #20
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d3b6      	bcc.n	800aafc <remove_chain+0x2c>
 800ab8e:	e002      	b.n	800ab96 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800ab90:	bf00      	nop
 800ab92:	e000      	b.n	800ab96 <remove_chain+0xc6>
			if (res != FR_OK) break;
 800ab94:	bf00      	nop
		}
	}

	return res;
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d113      	bne.n	800abd8 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb6:	330c      	adds	r3, #12
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d007      	beq.n	800abd2 <create_chain+0x32>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abc8:	3314      	adds	r3, #20
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d31e      	bcc.n	800ac10 <create_chain+0x70>
 800abd2:	2301      	movs	r3, #1
 800abd4:	613b      	str	r3, [r7, #16]
 800abd6:	e01b      	b.n	800ac10 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff fd13 	bl	800a606 <get_fat>
 800abe0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d801      	bhi.n	800abec <create_chain+0x4c>
 800abe8:	2301      	movs	r3, #1
 800abea:	e086      	b.n	800acfa <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf2:	d101      	bne.n	800abf8 <create_chain+0x58>
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	e080      	b.n	800acfa <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfe:	3314      	adds	r3, #20
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d201      	bcs.n	800ac0c <create_chain+0x6c>
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	e076      	b.n	800acfa <create_chain+0x15a>
		scl = clst;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	3301      	adds	r3, #1
 800ac18:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac20:	3314      	adds	r3, #20
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d307      	bcc.n	800ac3a <create_chain+0x9a>
			ncl = 2;
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d901      	bls.n	800ac3a <create_chain+0x9a>
 800ac36:	2300      	movs	r3, #0
 800ac38:	e05f      	b.n	800acfa <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800ac3a:	6979      	ldr	r1, [r7, #20]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff fce2 	bl	800a606 <get_fat>
 800ac42:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00e      	beq.n	800ac68 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac50:	d002      	beq.n	800ac58 <create_chain+0xb8>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d101      	bne.n	800ac5c <create_chain+0xbc>
			return cs;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	e04e      	b.n	800acfa <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d1d7      	bne.n	800ac14 <create_chain+0x74>
 800ac64:	2300      	movs	r3, #0
 800ac66:	e048      	b.n	800acfa <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800ac68:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800ac6a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800ac6e:	6979      	ldr	r1, [r7, #20]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff fdcd 	bl	800a810 <put_fat>
 800ac76:	4603      	mov	r3, r0
 800ac78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d109      	bne.n	800ac94 <create_chain+0xf4>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d006      	beq.n	800ac94 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff fdc0 	bl	800a810 <put_fat>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d126      	bne.n	800ace8 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca0:	330c      	adds	r3, #12
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acac:	3310      	adds	r3, #16
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb4:	d020      	beq.n	800acf8 <create_chain+0x158>
			fs->free_clust--;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acbc:	3310      	adds	r3, #16
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	1e5a      	subs	r2, r3, #1
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc8:	3310      	adds	r3, #16
 800acca:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd2:	3305      	adds	r3, #5
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	f043 0301 	orr.w	r3, r3, #1
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace2:	3305      	adds	r3, #5
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	e007      	b.n	800acf8 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d102      	bne.n	800acf4 <create_chain+0x154>
 800acee:	f04f 33ff 	mov.w	r3, #4294967295
 800acf2:	e000      	b.n	800acf6 <create_chain+0x156>
 800acf4:	2301      	movs	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800acf8:	697b      	ldr	r3, [r7, #20]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b087      	sub	sp, #28
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ad12:	3304      	adds	r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3304      	adds	r3, #4
 800ad18:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad26:	330a      	adds	r3, #10
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3e:	3302      	adds	r3, #2
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad46:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	1d1a      	adds	r2, r3, #4
 800ad4c:	613a      	str	r2, [r7, #16]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d101      	bne.n	800ad5c <clmt_clust+0x5a>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e010      	b.n	800ad7e <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d307      	bcc.n	800ad74 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	617b      	str	r3, [r7, #20]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad72:	e7e9      	b.n	800ad48 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800ad74:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	4413      	add	r3, r2
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	371c      	adds	r7, #28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b086      	sub	sp, #24
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad9e:	3306      	adds	r3, #6
 800ada0:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada8:	3308      	adds	r3, #8
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d00a      	beq.n	800adca <dir_sdi+0x40>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc0:	3314      	adds	r3, #20
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d301      	bcc.n	800adce <dir_sdi+0x44>
		return FR_INT_ERR;
 800adca:	2302      	movs	r3, #2
 800adcc:	e0b4      	b.n	800af38 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d111      	bne.n	800adf8 <dir_sdi+0x6e>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d108      	bne.n	800adf8 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800adf2:	3304      	adds	r3, #4
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d117      	bne.n	800ae2e <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d301      	bcc.n	800ae1a <dir_sdi+0x90>
			return FR_INT_ERR;
 800ae16:	2302      	movs	r3, #2
 800ae18:	e08e      	b.n	800af38 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ae26:	3304      	adds	r3, #4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	e046      	b.n	800aebc <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae3a:	330a      	adds	r3, #10
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	095b      	lsrs	r3, r3, #5
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	461a      	mov	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae50:	3302      	adds	r3, #2
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	fb03 f302 	mul.w	r3, r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800ae5a:	e022      	b.n	800aea2 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6979      	ldr	r1, [r7, #20]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff fbcd 	bl	800a606 <get_fat>
 800ae6c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d101      	bne.n	800ae7a <dir_sdi+0xf0>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e05e      	b.n	800af38 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d90a      	bls.n	800ae96 <dir_sdi+0x10c>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8c:	3314      	adds	r3, #20
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d301      	bcc.n	800ae9a <dir_sdi+0x110>
				return FR_INT_ERR;
 800ae96:	2302      	movs	r3, #2
 800ae98:	e04e      	b.n	800af38 <dir_sdi+0x1ae>
			idx -= ic;
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d2d8      	bcs.n	800ae5c <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6979      	ldr	r1, [r7, #20]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff fb7e 	bl	800a5b6 <clust2sect>
 800aeba:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aec2:	330c      	adds	r3, #12
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <dir_sdi+0x148>
 800aece:	2302      	movs	r3, #2
 800aed0:	e032      	b.n	800af38 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aede:	330a      	adds	r3, #10
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	095b      	lsrs	r3, r3, #5
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	461a      	mov	r2, r3
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	fbb3 f2f2 	udiv	r2, r3, r2
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	441a      	add	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef8:	3310      	adds	r3, #16
 800aefa:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af12:	330a      	adds	r3, #10
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	095b      	lsrs	r3, r3, #5
 800af18:	b29b      	uxth	r3, r3
 800af1a:	461a      	mov	r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800af22:	fb02 f201 	mul.w	r2, r2, r1
 800af26:	1a9b      	subs	r3, r3, r2
 800af28:	015b      	lsls	r3, r3, #5
 800af2a:	18c2      	adds	r2, r0, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af32:	3314      	adds	r3, #20
 800af34:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3718      	adds	r7, #24
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800af40:	b590      	push	{r4, r7, lr}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af50:	3306      	adds	r3, #6
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	3301      	adds	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d006      	beq.n	800af6e <dir_next+0x2e>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af66:	3310      	adds	r3, #16
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <dir_next+0x32>
		return FR_NO_FILE;
 800af6e:	2304      	movs	r3, #4
 800af70:	e144      	b.n	800b1fc <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af7e:	330a      	adds	r3, #10
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	095b      	lsrs	r3, r3, #5
 800af84:	b29b      	uxth	r3, r3
 800af86:	461a      	mov	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800af8e:	fb02 f201 	mul.w	r2, r2, r1
 800af92:	1a9b      	subs	r3, r3, r2
 800af94:	2b00      	cmp	r3, #0
 800af96:	f040 810c 	bne.w	800b1b2 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa0:	3310      	adds	r3, #16
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afac:	3310      	adds	r3, #16
 800afae:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb6:	330c      	adds	r3, #12
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10e      	bne.n	800afdc <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afca:	3308      	adds	r3, #8
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4293      	cmp	r3, r2
 800afd4:	f0c0 80ed 	bcc.w	800b1b2 <dir_next+0x272>
				return FR_NO_FILE;
 800afd8:	2304      	movs	r3, #4
 800afda:	e10f      	b.n	800b1fc <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe8:	330a      	adds	r3, #10
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	095b      	lsrs	r3, r3, #5
 800afee:	b29b      	uxth	r3, r3
 800aff0:	461a      	mov	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	fbb3 f2f2 	udiv	r2, r3, r2
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b004:	3302      	adds	r3, #2
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	3b01      	subs	r3, #1
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f040 80d0 	bne.w	800b1b2 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b020:	330c      	adds	r3, #12
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4619      	mov	r1, r3
 800b026:	4610      	mov	r0, r2
 800b028:	f7ff faed 	bl	800a606 <get_fat>
 800b02c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d801      	bhi.n	800b038 <dir_next+0xf8>
 800b034:	2302      	movs	r3, #2
 800b036:	e0e1      	b.n	800b1fc <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03e:	d101      	bne.n	800b044 <dir_next+0x104>
 800b040:	2301      	movs	r3, #1
 800b042:	e0db      	b.n	800b1fc <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b050:	3314      	adds	r3, #20
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	429a      	cmp	r2, r3
 800b058:	f0c0 8097 	bcc.w	800b18a <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <dir_next+0x126>
 800b062:	2304      	movs	r3, #4
 800b064:	e0ca      	b.n	800b1fc <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b074:	330c      	adds	r3, #12
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7ff fd90 	bl	800aba0 <create_chain>
 800b080:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <dir_next+0x14c>
 800b088:	2307      	movs	r3, #7
 800b08a:	e0b7      	b.n	800b1fc <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d101      	bne.n	800b096 <dir_next+0x156>
 800b092:	2302      	movs	r3, #2
 800b094:	e0b2      	b.n	800b1fc <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09c:	d101      	bne.n	800b0a2 <dir_next+0x162>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e0ac      	b.n	800b1fc <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff f926 	bl	800a2fc <sync_window>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <dir_next+0x17a>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e0a0      	b.n	800b1fc <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d0:	330a      	adds	r3, #10
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	f7fe feed 	bl	8009eb6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ea:	681c      	ldr	r4, [r3, #0]
 800b0ec:	6979      	ldr	r1, [r7, #20]
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f7ff fa61 	bl	800a5b6 <clust2sect>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800b0fa:	330c      	adds	r3, #12
 800b0fc:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b0fe:	2300      	movs	r3, #0
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	e024      	b.n	800b14e <dir_next+0x20e>
						dp->fs->wflag = 1;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b110:	3304      	adds	r3, #4
 800b112:	2201      	movs	r2, #1
 800b114:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff f8ec 	bl	800a2fc <sync_window>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <dir_next+0x1ee>
 800b12a:	2301      	movs	r3, #1
 800b12c:	e066      	b.n	800b1fc <dir_next+0x2bc>
						dp->fs->winsect++;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b13a:	330c      	adds	r3, #12
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	1c59      	adds	r1, r3, #1
 800b140:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b144:	330c      	adds	r3, #12
 800b146:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	3301      	adds	r3, #1
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b15a:	3302      	adds	r3, #2
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	4293      	cmp	r3, r2
 800b164:	d3ce      	bcc.n	800b104 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b172:	330c      	adds	r3, #12
 800b174:	6819      	ldr	r1, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	1a8a      	subs	r2, r1, r2
 800b182:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b186:	330c      	adds	r3, #12
 800b188:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b190:	330c      	adds	r3, #12
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6979      	ldr	r1, [r7, #20]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff fa08 	bl	800a5b6 <clust2sect>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ae:	3310      	adds	r3, #16
 800b1b0:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1bc:	3306      	adds	r3, #6
 800b1be:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1d6:	330a      	adds	r3, #10
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	095b      	lsrs	r3, r3, #5
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	461a      	mov	r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1e6:	fb02 f201 	mul.w	r2, r2, r1
 800b1ea:	1a9b      	subs	r3, r3, r2
 800b1ec:	015b      	lsls	r3, r3, #5
 800b1ee:	18c2      	adds	r2, r0, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f6:	3314      	adds	r3, #20
 800b1f8:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	371c      	adds	r7, #28
 800b200:	46bd      	mov	sp, r7
 800b202:	bd90      	pop	{r4, r7, pc}

0800b204 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800b20e:	2100      	movs	r1, #0
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fdba 	bl	800ad8a <dir_sdi>
 800b216:	4603      	mov	r3, r0
 800b218:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d138      	bne.n	800b292 <dir_alloc+0x8e>
		n = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b232:	3310      	adds	r3, #16
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f7ff f8b9 	bl	800a3b0 <move_window>
 800b23e:	4603      	mov	r3, r0
 800b240:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d123      	bne.n	800b290 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b24e:	3314      	adds	r3, #20
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2be5      	cmp	r3, #229	; 0xe5
 800b256:	d007      	beq.n	800b268 <dir_alloc+0x64>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b25e:	3314      	adds	r3, #20
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d107      	bne.n	800b278 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3301      	adds	r3, #1
 800b26c:	60bb      	str	r3, [r7, #8]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	429a      	cmp	r2, r3
 800b274:	d102      	bne.n	800b27c <dir_alloc+0x78>
 800b276:	e00c      	b.n	800b292 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b278:	2300      	movs	r3, #0
 800b27a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800b27c:	2101      	movs	r1, #1
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7ff fe5e 	bl	800af40 <dir_next>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d0ca      	beq.n	800b224 <dir_alloc+0x20>
 800b28e:	e000      	b.n	800b292 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800b290:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b292:	7bfb      	ldrb	r3, [r7, #15]
 800b294:	2b04      	cmp	r3, #4
 800b296:	d101      	bne.n	800b29c <dir_alloc+0x98>
 800b298:	2307      	movs	r3, #7
 800b29a:	73fb      	strb	r3, [r7, #15]
	return res;
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b085      	sub	sp, #20
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	331b      	adds	r3, #27
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	021b      	lsls	r3, r3, #8
 800b2b8:	b21a      	sxth	r2, r3
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	331a      	adds	r3, #26
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	b21b      	sxth	r3, r3
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	b21b      	sxth	r3, r3
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d10f      	bne.n	800b2f6 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	3315      	adds	r3, #21
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	b21a      	sxth	r2, r3
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	3314      	adds	r3, #20
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	b21b      	sxth	r3, r3
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	b21b      	sxth	r3, r3
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	041b      	lsls	r3, r3, #16
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	60fb      	str	r3, [r7, #12]

	return cl;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	331a      	adds	r3, #26
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	0a1b      	lsrs	r3, r3, #8
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	331b      	adds	r3, #27
 800b324:	b2d2      	uxtb	r2, r2
 800b326:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	0c1a      	lsrs	r2, r3, #16
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3314      	adds	r3, #20
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	0c1b      	lsrs	r3, r3, #16
 800b338:	b29b      	uxth	r3, r3
 800b33a:	0a1b      	lsrs	r3, r3, #8
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3315      	adds	r3, #21
 800b342:	b2d2      	uxtb	r2, r2
 800b344:	701a      	strb	r2, [r3, #0]
}
 800b346:	bf00      	nop
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
	...

0800b354 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b366:	1e5a      	subs	r2, r3, #1
 800b368:	4613      	mov	r3, r2
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800b374:	2300      	movs	r3, #0
 800b376:	613b      	str	r3, [r7, #16]
 800b378:	2301      	movs	r3, #1
 800b37a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800b37c:	4a2b      	ldr	r2, [pc, #172]	; (800b42c <cmp_lfn+0xd8>)
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	4413      	add	r3, r2
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	4413      	add	r3, r2
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	b21a      	sxth	r2, r3
 800b390:	4926      	ldr	r1, [pc, #152]	; (800b42c <cmp_lfn+0xd8>)
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	440b      	add	r3, r1
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	4619      	mov	r1, r3
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	440b      	add	r3, r1
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b21b      	sxth	r3, r3
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	b21b      	sxth	r3, r3
 800b3a6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b3a8:	89fb      	ldrh	r3, [r7, #14]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d019      	beq.n	800b3e2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800b3ae:	89bb      	ldrh	r3, [r7, #12]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f003 f869 	bl	800e488 <ff_wtoupper>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2bfe      	cmp	r3, #254	; 0xfe
 800b3be:	d80e      	bhi.n	800b3de <cmp_lfn+0x8a>
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	617a      	str	r2, [r7, #20]
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	881b      	ldrh	r3, [r3, #0]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f003 f85a 	bl	800e488 <ff_wtoupper>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	89fb      	ldrh	r3, [r7, #14]
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d008      	beq.n	800b3f0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e01f      	b.n	800b422 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800b3e2:	89bb      	ldrh	r3, [r7, #12]
 800b3e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d001      	beq.n	800b3f0 <cmp_lfn+0x9c>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	e018      	b.n	800b422 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	613b      	str	r3, [r7, #16]
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	2b0c      	cmp	r3, #12
 800b3fa:	d9bf      	bls.n	800b37c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <cmp_lfn+0xcc>
 800b408:	89fb      	ldrh	r3, [r7, #14]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <cmp_lfn+0xcc>
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	005b      	lsls	r3, r3, #1
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	4413      	add	r3, r2
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <cmp_lfn+0xcc>
		return 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	e000      	b.n	800b422 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800b420:	2301      	movs	r3, #1
}
 800b422:	4618      	mov	r0, r3
 800b424:	3718      	adds	r7, #24
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	080125f8 	.word	0x080125f8

0800b430 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800b430:	b480      	push	{r7}
 800b432:	b089      	sub	sp, #36	; 0x24
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	4611      	mov	r1, r2
 800b43c:	461a      	mov	r2, r3
 800b43e:	460b      	mov	r3, r1
 800b440:	71fb      	strb	r3, [r7, #7]
 800b442:	4613      	mov	r3, r2
 800b444:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	330d      	adds	r3, #13
 800b44a:	79ba      	ldrb	r2, [r7, #6]
 800b44c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	330b      	adds	r3, #11
 800b452:	220f      	movs	r2, #15
 800b454:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	330c      	adds	r3, #12
 800b45a:	2200      	movs	r2, #0
 800b45c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	331a      	adds	r3, #26
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	331b      	adds	r3, #27
 800b46a:	2200      	movs	r2, #0
 800b46c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800b46e:	79fb      	ldrb	r3, [r7, #7]
 800b470:	1e5a      	subs	r2, r3, #1
 800b472:	4613      	mov	r3, r2
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	4413      	add	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	82fb      	strh	r3, [r7, #22]
 800b482:	2300      	movs	r3, #0
 800b484:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800b486:	8afb      	ldrh	r3, [r7, #22]
 800b488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d007      	beq.n	800b4a0 <fit_lfn+0x70>
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	61fa      	str	r2, [r7, #28]
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4413      	add	r3, r2
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800b4a0:	4a1d      	ldr	r2, [pc, #116]	; (800b518 <fit_lfn+0xe8>)
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	8afa      	ldrh	r2, [r7, #22]
 800b4b0:	b2d2      	uxtb	r2, r2
 800b4b2:	701a      	strb	r2, [r3, #0]
 800b4b4:	8afb      	ldrh	r3, [r7, #22]
 800b4b6:	0a1b      	lsrs	r3, r3, #8
 800b4b8:	b299      	uxth	r1, r3
 800b4ba:	4a17      	ldr	r2, [pc, #92]	; (800b518 <fit_lfn+0xe8>)
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	4413      	add	r3, r2
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	b2ca      	uxtb	r2, r1
 800b4ca:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800b4cc:	8afb      	ldrh	r3, [r7, #22]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <fit_lfn+0xa8>
 800b4d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	61bb      	str	r3, [r7, #24]
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2b0c      	cmp	r3, #12
 800b4e2:	d9d0      	bls.n	800b486 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800b4e4:	8afb      	ldrh	r3, [r7, #22]
 800b4e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d006      	beq.n	800b4fc <fit_lfn+0xcc>
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	881b      	ldrh	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d103      	bne.n	800b504 <fit_lfn+0xd4>
 800b4fc:	79fb      	ldrb	r3, [r7, #7]
 800b4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b502:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	79fa      	ldrb	r2, [r7, #7]
 800b508:	701a      	strb	r2, [r3, #0]
}
 800b50a:	bf00      	nop
 800b50c:	3724      	adds	r7, #36	; 0x24
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	080125f8 	.word	0x080125f8

0800b51c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08c      	sub	sp, #48	; 0x30
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b52a:	220b      	movs	r2, #11
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f7fe fca2 	bl	8009e78 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	2b05      	cmp	r3, #5
 800b538:	d92b      	bls.n	800b592 <gen_numname+0x76>
		sr = seq;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b53e:	e022      	b.n	800b586 <gen_numname+0x6a>
			wc = *lfn++;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	1c9a      	adds	r2, r3, #2
 800b544:	607a      	str	r2, [r7, #4]
 800b546:	881b      	ldrh	r3, [r3, #0]
 800b548:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b54a:	2300      	movs	r3, #0
 800b54c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b54e:	e017      	b.n	800b580 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	005a      	lsls	r2, r3, #1
 800b554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	4413      	add	r3, r2
 800b55c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b55e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b560:	085b      	lsrs	r3, r3, #1
 800b562:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d005      	beq.n	800b57a <gen_numname+0x5e>
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b574:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b578:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57c:	3301      	adds	r3, #1
 800b57e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	2b0f      	cmp	r3, #15
 800b584:	d9e4      	bls.n	800b550 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1d8      	bne.n	800b540 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b592:	2307      	movs	r3, #7
 800b594:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	f003 030f 	and.w	r3, r3, #15
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	3330      	adds	r3, #48	; 0x30
 800b5a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b5a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5aa:	2b39      	cmp	r3, #57	; 0x39
 800b5ac:	d904      	bls.n	800b5b8 <gen_numname+0x9c>
 800b5ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5b2:	3307      	adds	r3, #7
 800b5b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ba:	1e5a      	subs	r2, r3, #1
 800b5bc:	62ba      	str	r2, [r7, #40]	; 0x28
 800b5be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b5c8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	091b      	lsrs	r3, r3, #4
 800b5d0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1de      	bne.n	800b596 <gen_numname+0x7a>
	ns[i] = '~';
 800b5d8:	f107 0214 	add.w	r2, r7, #20
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	4413      	add	r3, r2
 800b5e0:	227e      	movs	r2, #126	; 0x7e
 800b5e2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e8:	e002      	b.n	800b5f0 <gen_numname+0xd4>
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d205      	bcs.n	800b604 <gen_numname+0xe8>
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	4413      	add	r3, r2
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b20      	cmp	r3, #32
 800b602:	d1f2      	bne.n	800b5ea <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b606:	2b07      	cmp	r3, #7
 800b608:	d808      	bhi.n	800b61c <gen_numname+0x100>
 800b60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60c:	1c5a      	adds	r2, r3, #1
 800b60e:	62ba      	str	r2, [r7, #40]	; 0x28
 800b610:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b614:	4413      	add	r3, r2
 800b616:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b61a:	e000      	b.n	800b61e <gen_numname+0x102>
 800b61c:	2120      	movs	r1, #32
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	627a      	str	r2, [r7, #36]	; 0x24
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4413      	add	r3, r2
 800b628:	460a      	mov	r2, r1
 800b62a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	2b07      	cmp	r3, #7
 800b630:	d9e8      	bls.n	800b604 <gen_numname+0xe8>
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	3730      	adds	r7, #48	; 0x30
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b648:	230b      	movs	r3, #11
 800b64a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	0852      	lsrs	r2, r2, #1
 800b652:	01db      	lsls	r3, r3, #7
 800b654:	4313      	orrs	r3, r2
 800b656:	b2da      	uxtb	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	1c59      	adds	r1, r3, #1
 800b65c:	6079      	str	r1, [r7, #4]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	4413      	add	r3, r2
 800b662:	73fb      	strb	r3, [r7, #15]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	3b01      	subs	r3, #1
 800b668:	60bb      	str	r3, [r7, #8]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1ed      	bne.n	800b64c <sum_sfn+0x10>
	return sum;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b086      	sub	sp, #24
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b686:	2100      	movs	r1, #0
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff fb7e 	bl	800ad8a <dir_sdi>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b692:	7dfb      	ldrb	r3, [r7, #23]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <dir_find+0x1e>
 800b698:	7dfb      	ldrb	r3, [r7, #23]
 800b69a:	e0c1      	b.n	800b820 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b69c:	23ff      	movs	r3, #255	; 0xff
 800b69e:	753b      	strb	r3, [r7, #20]
 800b6a0:	7d3b      	ldrb	r3, [r7, #20]
 800b6a2:	757b      	strb	r3, [r7, #21]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6b0:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c0:	3310      	adds	r3, #16
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	f7fe fe72 	bl	800a3b0 <move_window>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 809e 	bne.w	800b814 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6de:	3314      	adds	r3, #20
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b6ea:	7dbb      	ldrb	r3, [r7, #22]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d102      	bne.n	800b6f6 <dir_find+0x78>
 800b6f0:	2304      	movs	r3, #4
 800b6f2:	75fb      	strb	r3, [r7, #23]
 800b6f4:	e093      	b.n	800b81e <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	330b      	adds	r3, #11
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b700:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b702:	7dbb      	ldrb	r3, [r7, #22]
 800b704:	2be5      	cmp	r3, #229	; 0xe5
 800b706:	d007      	beq.n	800b718 <dir_find+0x9a>
 800b708:	7bfb      	ldrb	r3, [r7, #15]
 800b70a:	f003 0308 	and.w	r3, r3, #8
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00c      	beq.n	800b72c <dir_find+0xae>
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	2b0f      	cmp	r3, #15
 800b716:	d009      	beq.n	800b72c <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b718:	23ff      	movs	r3, #255	; 0xff
 800b71a:	757b      	strb	r3, [r7, #21]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b722:	3304      	adds	r3, #4
 800b724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b728:	801a      	strh	r2, [r3, #0]
 800b72a:	e068      	b.n	800b7fe <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	2b0f      	cmp	r3, #15
 800b730:	d139      	bne.n	800b7a6 <dir_find+0x128>
				if (dp->lfn) {
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d05f      	beq.n	800b7fe <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b73e:	7dbb      	ldrb	r3, [r7, #22]
 800b740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b744:	2b00      	cmp	r3, #0
 800b746:	d012      	beq.n	800b76e <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	7b5b      	ldrb	r3, [r3, #13]
 800b74c:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800b74e:	7dbb      	ldrb	r3, [r7, #22]
 800b750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b754:	75bb      	strb	r3, [r7, #22]
 800b756:	7dbb      	ldrb	r3, [r7, #22]
 800b758:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b760:	3306      	adds	r3, #6
 800b762:	881a      	ldrh	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b76a:	3304      	adds	r3, #4
 800b76c:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800b76e:	7dba      	ldrb	r2, [r7, #22]
 800b770:	7d7b      	ldrb	r3, [r7, #21]
 800b772:	429a      	cmp	r2, r3
 800b774:	d114      	bne.n	800b7a0 <dir_find+0x122>
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	330d      	adds	r3, #13
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	7d3a      	ldrb	r2, [r7, #20]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d10e      	bne.n	800b7a0 <dir_find+0x122>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6939      	ldr	r1, [r7, #16]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7ff fde1 	bl	800b354 <cmp_lfn>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d003      	beq.n	800b7a0 <dir_find+0x122>
 800b798:	7d7b      	ldrb	r3, [r7, #21]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	e000      	b.n	800b7a2 <dir_find+0x124>
 800b7a0:	23ff      	movs	r3, #255	; 0xff
 800b7a2:	757b      	strb	r3, [r7, #21]
 800b7a4:	e02b      	b.n	800b7fe <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b7a6:	7d7b      	ldrb	r3, [r7, #21]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d107      	bne.n	800b7bc <dir_find+0x13e>
 800b7ac:	6938      	ldr	r0, [r7, #16]
 800b7ae:	f7ff ff45 	bl	800b63c <sum_sfn>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	7d3b      	ldrb	r3, [r7, #20]
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d02d      	beq.n	800b818 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7c2:	3318      	adds	r3, #24
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	330b      	adds	r3, #11
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10c      	bne.n	800b7ec <dir_find+0x16e>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d8:	3318      	adds	r3, #24
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	220b      	movs	r2, #11
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6938      	ldr	r0, [r7, #16]
 800b7e2:	f7fe fb83 	bl	8009eec <mem_cmp>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d017      	beq.n	800b81c <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b7ec:	23ff      	movs	r3, #255	; 0xff
 800b7ee:	757b      	strb	r3, [r7, #21]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7fc:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800b7fe:	2100      	movs	r1, #0
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fb9d 	bl	800af40 <dir_next>
 800b806:	4603      	mov	r3, r0
 800b808:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f43f af50 	beq.w	800b6b2 <dir_find+0x34>
 800b812:	e004      	b.n	800b81e <dir_find+0x1a0>
		if (res != FR_OK) break;
 800b814:	bf00      	nop
 800b816:	e002      	b.n	800b81e <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b818:	bf00      	nop
 800b81a:	e000      	b.n	800b81e <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b81c:	bf00      	nop

	return res;
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08c      	sub	sp, #48	; 0x30
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b836:	3318      	adds	r3, #24
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	623b      	str	r3, [r7, #32]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800b846:	f107 030c 	add.w	r3, r7, #12
 800b84a:	220c      	movs	r2, #12
 800b84c:	6a39      	ldr	r1, [r7, #32]
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fb12 	bl	8009e78 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d039      	beq.n	800b8d2 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	330b      	adds	r3, #11
 800b862:	2200      	movs	r2, #0
 800b864:	701a      	strb	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b86c:	2200      	movs	r2, #0
 800b86e:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800b870:	2301      	movs	r3, #1
 800b872:	62bb      	str	r3, [r7, #40]	; 0x28
 800b874:	e013      	b.n	800b89e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800b876:	f107 010c 	add.w	r1, r7, #12
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	69fa      	ldr	r2, [r7, #28]
 800b87e:	6a38      	ldr	r0, [r7, #32]
 800b880:	f7ff fe4c 	bl	800b51c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff fefa 	bl	800b67e <dir_find>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b894:	2b00      	cmp	r3, #0
 800b896:	d106      	bne.n	800b8a6 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	3301      	adds	r3, #1
 800b89c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a0:	2b63      	cmp	r3, #99	; 0x63
 800b8a2:	d9e8      	bls.n	800b876 <dir_register+0x4e>
 800b8a4:	e000      	b.n	800b8a8 <dir_register+0x80>
			if (res != FR_OK) break;
 800b8a6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	2b64      	cmp	r3, #100	; 0x64
 800b8ac:	d101      	bne.n	800b8b2 <dir_register+0x8a>
 800b8ae:	2307      	movs	r3, #7
 800b8b0:	e0e3      	b.n	800ba7a <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b8b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8b6:	2b04      	cmp	r3, #4
 800b8b8:	d002      	beq.n	800b8c0 <dir_register+0x98>
 800b8ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8be:	e0dc      	b.n	800ba7a <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	330b      	adds	r3, #11
 800b8c4:	7dfa      	ldrb	r2, [r7, #23]
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8ce:	69fa      	ldr	r2, [r7, #28]
 800b8d0:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	f003 0302 	and.w	r3, r3, #2
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d014      	beq.n	800b906 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e0:	e002      	b.n	800b8e8 <dir_register+0xc0>
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	69fa      	ldr	r2, [r7, #28]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1f5      	bne.n	800b8e2 <dir_register+0xba>
		nent = (n + 25) / 13;
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	3319      	adds	r3, #25
 800b8fa:	4a62      	ldr	r2, [pc, #392]	; (800ba84 <dir_register+0x25c>)
 800b8fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b900:	089b      	lsrs	r3, r3, #2
 800b902:	627b      	str	r3, [r7, #36]	; 0x24
 800b904:	e001      	b.n	800b90a <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800b906:	2301      	movs	r3, #1
 800b908:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b90a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff fc79 	bl	800b204 <dir_alloc>
 800b912:	4603      	mov	r3, r0
 800b914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b918:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d160      	bne.n	800b9e2 <dir_register+0x1ba>
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	3b01      	subs	r3, #1
 800b924:	627b      	str	r3, [r7, #36]	; 0x24
 800b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d05a      	beq.n	800b9e2 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b932:	3306      	adds	r3, #6
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	461a      	mov	r2, r3
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff fa23 	bl	800ad8a <dir_sdi>
 800b944:	4603      	mov	r3, r0
 800b946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b94a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d147      	bne.n	800b9e2 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b958:	3318      	adds	r3, #24
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fe6d 	bl	800b63c <sum_sfn>
 800b962:	4603      	mov	r3, r0
 800b964:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b974:	3310      	adds	r3, #16
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4619      	mov	r1, r3
 800b97a:	4610      	mov	r0, r2
 800b97c:	f7fe fd18 	bl	800a3b0 <move_window>
 800b980:	4603      	mov	r3, r0
 800b982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d128      	bne.n	800b9e0 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99c:	3314      	adds	r3, #20
 800b99e:	6819      	ldr	r1, [r3, #0]
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	7efb      	ldrb	r3, [r7, #27]
 800b9a6:	f7ff fd43 	bl	800b430 <fit_lfn>
				dp->fs->wflag = 1;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800b9bc:	2100      	movs	r1, #0
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7ff fabe 	bl	800af40 <dir_next>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b9ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d107      	bne.n	800b9e2 <dir_register+0x1ba>
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1c3      	bne.n	800b966 <dir_register+0x13e>
 800b9de:	e000      	b.n	800b9e2 <dir_register+0x1ba>
				if (res != FR_OK) break;
 800b9e0:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800b9e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d145      	bne.n	800ba76 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f8:	3310      	adds	r3, #16
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4610      	mov	r0, r2
 800ba00:	f7fe fcd6 	bl	800a3b0 <move_window>
 800ba04:	4603      	mov	r3, r0
 800ba06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ba0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d131      	bne.n	800ba76 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba18:	3314      	adds	r3, #20
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	2100      	movs	r1, #0
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe fa48 	bl	8009eb6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba2c:	3314      	adds	r3, #20
 800ba2e:	6818      	ldr	r0, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba36:	3318      	adds	r3, #24
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	220b      	movs	r2, #11
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	f7fe fa1b 	bl	8009e78 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba48:	3318      	adds	r3, #24
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	330b      	adds	r3, #11
 800ba4e:	781a      	ldrb	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba56:	3314      	adds	r3, #20
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	330c      	adds	r3, #12
 800ba5c:	f002 0218 	and.w	r2, r2, #24
 800ba60:	b2d2      	uxtb	r2, r2
 800ba62:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba70:	3304      	adds	r3, #4
 800ba72:	2201      	movs	r2, #1
 800ba74:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800ba76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3730      	adds	r7, #48	; 0x30
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	4ec4ec4f 	.word	0x4ec4ec4f

0800ba88 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08a      	sub	sp, #40	; 0x28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	e002      	b.n	800baa0 <create_name+0x18>
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	613b      	str	r3, [r7, #16]
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	2b2f      	cmp	r3, #47	; 0x2f
 800baa6:	d0f8      	beq.n	800ba9a <create_name+0x12>
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b5c      	cmp	r3, #92	; 0x5c
 800baae:	d0f4      	beq.n	800ba9a <create_name+0x12>
	lfn = dp->lfn;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	617b      	str	r3, [r7, #20]
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	61ba      	str	r2, [r7, #24]
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	4413      	add	r3, r2
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800bad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bad2:	2b1f      	cmp	r3, #31
 800bad4:	d92f      	bls.n	800bb36 <create_name+0xae>
 800bad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bad8:	2b2f      	cmp	r3, #47	; 0x2f
 800bada:	d02c      	beq.n	800bb36 <create_name+0xae>
 800badc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bade:	2b5c      	cmp	r3, #92	; 0x5c
 800bae0:	d029      	beq.n	800bb36 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	2bfe      	cmp	r3, #254	; 0xfe
 800bae6:	d901      	bls.n	800baec <create_name+0x64>
			return FR_INVALID_NAME;
 800bae8:	2306      	movs	r3, #6
 800baea:	e18b      	b.n	800be04 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800baec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800baf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baf4:	2101      	movs	r1, #1
 800baf6:	4618      	mov	r0, r3
 800baf8:	f002 fc8a 	bl	800e410 <ff_convert>
 800bafc:	4603      	mov	r3, r0
 800bafe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bb00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <create_name+0x82>
 800bb06:	2306      	movs	r3, #6
 800bb08:	e17c      	b.n	800be04 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800bb0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb0c:	2b7f      	cmp	r3, #127	; 0x7f
 800bb0e:	d809      	bhi.n	800bb24 <create_name+0x9c>
 800bb10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb12:	4619      	mov	r1, r3
 800bb14:	488f      	ldr	r0, [pc, #572]	; (800bd54 <create_name+0x2cc>)
 800bb16:	f7fe fa10 	bl	8009f3a <chk_chr>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <create_name+0x9c>
			return FR_INVALID_NAME;
 800bb20:	2306      	movs	r3, #6
 800bb22:	e16f      	b.n	800be04 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	617a      	str	r2, [r7, #20]
 800bb2a:	005b      	lsls	r3, r3, #1
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	4413      	add	r3, r2
 800bb30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb32:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bb34:	e7c5      	b.n	800bac2 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	441a      	add	r2, r3
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800bb40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb42:	2b1f      	cmp	r3, #31
 800bb44:	d801      	bhi.n	800bb4a <create_name+0xc2>
 800bb46:	2304      	movs	r3, #4
 800bb48:	e000      	b.n	800bb4c <create_name+0xc4>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800bb50:	e011      	b.n	800bb76 <create_name+0xee>
		w = lfn[di - 1];
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	005b      	lsls	r3, r3, #1
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bb64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb66:	2b20      	cmp	r3, #32
 800bb68:	d002      	beq.n	800bb70 <create_name+0xe8>
 800bb6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb6c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb6e:	d106      	bne.n	800bb7e <create_name+0xf6>
		di--;
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1ea      	bne.n	800bb52 <create_name+0xca>
 800bb7c:	e000      	b.n	800bb80 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800bb7e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <create_name+0x102>
 800bb86:	2306      	movs	r3, #6
 800bb88:	e13c      	b.n	800be04 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	4413      	add	r3, r2
 800bb92:	2200      	movs	r2, #0
 800bb94:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb9c:	3318      	adds	r3, #24
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	220b      	movs	r2, #11
 800bba2:	2120      	movs	r1, #32
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe f986 	bl	8009eb6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bbaa:	2300      	movs	r3, #0
 800bbac:	61bb      	str	r3, [r7, #24]
 800bbae:	e002      	b.n	800bbb6 <create_name+0x12e>
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	61bb      	str	r3, [r7, #24]
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	2b20      	cmp	r3, #32
 800bbc2:	d0f5      	beq.n	800bbb0 <create_name+0x128>
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd0:	d0ee      	beq.n	800bbb0 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d009      	beq.n	800bbec <create_name+0x164>
 800bbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbdc:	f043 0303 	orr.w	r3, r3, #3
 800bbe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bbe4:	e002      	b.n	800bbec <create_name+0x164>
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	617b      	str	r3, [r7, #20]
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <create_name+0x17e>
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	2b2e      	cmp	r3, #46	; 0x2e
 800bc04:	d1ef      	bne.n	800bbe6 <create_name+0x15e>

	b = i = 0; ni = 8;
 800bc06:	2300      	movs	r3, #0
 800bc08:	623b      	str	r3, [r7, #32]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bc10:	2308      	movs	r3, #8
 800bc12:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	1c5a      	adds	r2, r3, #1
 800bc18:	61ba      	str	r2, [r7, #24]
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	4413      	add	r3, r2
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bc24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f000 8092 	beq.w	800bd50 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bc2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc2e:	2b20      	cmp	r3, #32
 800bc30:	d006      	beq.n	800bc40 <create_name+0x1b8>
 800bc32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc34:	2b2e      	cmp	r3, #46	; 0x2e
 800bc36:	d10a      	bne.n	800bc4e <create_name+0x1c6>
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d006      	beq.n	800bc4e <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800bc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc44:	f043 0303 	orr.w	r3, r3, #3
 800bc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc4c:	e07f      	b.n	800bd4e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bc4e:	6a3a      	ldr	r2, [r7, #32]
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d203      	bcs.n	800bc5e <create_name+0x1d6>
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d123      	bne.n	800bca6 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	2b0b      	cmp	r3, #11
 800bc62:	d106      	bne.n	800bc72 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800bc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc68:	f043 0303 	orr.w	r3, r3, #3
 800bc6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc70:	e077      	b.n	800bd62 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d005      	beq.n	800bc86 <create_name+0x1fe>
 800bc7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc7e:	f043 0303 	orr.w	r3, r3, #3
 800bc82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bc86:	69ba      	ldr	r2, [r7, #24]
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d868      	bhi.n	800bd60 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	61bb      	str	r3, [r7, #24]
 800bc92:	2308      	movs	r3, #8
 800bc94:	623b      	str	r3, [r7, #32]
 800bc96:	230b      	movs	r3, #11
 800bc98:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bc9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bca4:	e053      	b.n	800bd4e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bca8:	2b7f      	cmp	r3, #127	; 0x7f
 800bcaa:	d914      	bls.n	800bcd6 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bcac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcae:	2100      	movs	r1, #0
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f002 fbad 	bl	800e410 <ff_convert>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bcba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d004      	beq.n	800bcca <create_name+0x242>
 800bcc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcc2:	3b80      	subs	r3, #128	; 0x80
 800bcc4:	4a24      	ldr	r2, [pc, #144]	; (800bd58 <create_name+0x2d0>)
 800bcc6:	5cd3      	ldrb	r3, [r2, r3]
 800bcc8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bcca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcce:	f043 0302 	orr.w	r3, r3, #2
 800bcd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bcd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d007      	beq.n	800bcec <create_name+0x264>
 800bcdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcde:	4619      	mov	r1, r3
 800bce0:	481e      	ldr	r0, [pc, #120]	; (800bd5c <create_name+0x2d4>)
 800bce2:	f7fe f92a 	bl	8009f3a <chk_chr>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d008      	beq.n	800bcfe <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bcec:	235f      	movs	r3, #95	; 0x5f
 800bcee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcf4:	f043 0303 	orr.w	r3, r3, #3
 800bcf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bcfc:	e01b      	b.n	800bd36 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bcfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd00:	2b40      	cmp	r3, #64	; 0x40
 800bd02:	d909      	bls.n	800bd18 <create_name+0x290>
 800bd04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd06:	2b5a      	cmp	r3, #90	; 0x5a
 800bd08:	d806      	bhi.n	800bd18 <create_name+0x290>
					b |= 2;
 800bd0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd0e:	f043 0302 	orr.w	r3, r3, #2
 800bd12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd16:	e00e      	b.n	800bd36 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bd18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd1a:	2b60      	cmp	r3, #96	; 0x60
 800bd1c:	d90b      	bls.n	800bd36 <create_name+0x2ae>
 800bd1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd20:	2b7a      	cmp	r3, #122	; 0x7a
 800bd22:	d808      	bhi.n	800bd36 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800bd24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd28:	f043 0301 	orr.w	r3, r3, #1
 800bd2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd32:	3b20      	subs	r3, #32
 800bd34:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd3c:	3318      	adds	r3, #24
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	6a3b      	ldr	r3, [r7, #32]
 800bd42:	1c59      	adds	r1, r3, #1
 800bd44:	6239      	str	r1, [r7, #32]
 800bd46:	4413      	add	r3, r2
 800bd48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800bd4e:	e761      	b.n	800bc14 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800bd50:	bf00      	nop
 800bd52:	e006      	b.n	800bd62 <create_name+0x2da>
 800bd54:	080120f8 	.word	0x080120f8
 800bd58:	08012578 	.word	0x08012578
 800bd5c:	08012104 	.word	0x08012104
			if (si > di) break;			/* No extension */
 800bd60:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd68:	3318      	adds	r3, #24
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	2be5      	cmp	r3, #229	; 0xe5
 800bd70:	d106      	bne.n	800bd80 <create_name+0x2f8>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd78:	3318      	adds	r3, #24
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2205      	movs	r2, #5
 800bd7e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	2b08      	cmp	r3, #8
 800bd84:	d104      	bne.n	800bd90 <create_name+0x308>
 800bd86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800bd90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd94:	f003 030c 	and.w	r3, r3, #12
 800bd98:	2b0c      	cmp	r3, #12
 800bd9a:	d005      	beq.n	800bda8 <create_name+0x320>
 800bd9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bda0:	f003 0303 	and.w	r3, r3, #3
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d105      	bne.n	800bdb4 <create_name+0x32c>
		cf |= NS_LFN;
 800bda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdac:	f043 0302 	orr.w	r3, r3, #2
 800bdb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bdb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdb8:	f003 0302 	and.w	r3, r3, #2
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d117      	bne.n	800bdf0 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bdc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdc4:	f003 0303 	and.w	r3, r3, #3
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d105      	bne.n	800bdd8 <create_name+0x350>
 800bdcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdd0:	f043 0310 	orr.w	r3, r3, #16
 800bdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bdd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bddc:	f003 030c 	and.w	r3, r3, #12
 800bde0:	2b04      	cmp	r3, #4
 800bde2:	d105      	bne.n	800bdf0 <create_name+0x368>
 800bde4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bde8:	f043 0308 	orr.w	r3, r3, #8
 800bdec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf6:	3318      	adds	r3, #24
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	330b      	adds	r3, #11
 800bdfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be00:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be02:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800be04:	4618      	mov	r0, r3
 800be06:	3728      	adds	r7, #40	; 0x28
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	2b2f      	cmp	r3, #47	; 0x2f
 800be1c:	d003      	beq.n	800be26 <follow_path+0x1a>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b5c      	cmp	r3, #92	; 0x5c
 800be24:	d102      	bne.n	800be2c <follow_path+0x20>
		path++;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be32:	3308      	adds	r3, #8
 800be34:	2200      	movs	r2, #0
 800be36:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b1f      	cmp	r3, #31
 800be3e:	d80c      	bhi.n	800be5a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800be40:	2100      	movs	r1, #0
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7fe ffa1 	bl	800ad8a <dir_sdi>
 800be48:	4603      	mov	r3, r0
 800be4a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be52:	3314      	adds	r3, #20
 800be54:	2200      	movs	r2, #0
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	e04c      	b.n	800bef4 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be5a:	463b      	mov	r3, r7
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff fe12 	bl	800ba88 <create_name>
 800be64:	4603      	mov	r3, r0
 800be66:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d13d      	bne.n	800beea <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7ff fc05 	bl	800b67e <dir_find>
 800be74:	4603      	mov	r3, r0
 800be76:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be7e:	3318      	adds	r3, #24
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	7adb      	ldrb	r3, [r3, #11]
 800be84:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800be86:	7bfb      	ldrb	r3, [r7, #15]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00a      	beq.n	800bea2 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
 800be8e:	2b04      	cmp	r3, #4
 800be90:	d12d      	bne.n	800beee <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800be92:	7bbb      	ldrb	r3, [r7, #14]
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d128      	bne.n	800beee <follow_path+0xe2>
 800be9c:	2305      	movs	r3, #5
 800be9e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800bea0:	e025      	b.n	800beee <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d122      	bne.n	800bef2 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb2:	3314      	adds	r3, #20
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	330b      	adds	r3, #11
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	f003 0310 	and.w	r3, r3, #16
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800bec6:	2305      	movs	r3, #5
 800bec8:	73fb      	strb	r3, [r7, #15]
 800beca:	e013      	b.n	800bef4 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68b9      	ldr	r1, [r7, #8]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff f9e5 	bl	800b2a6 <ld_clust>
 800bedc:	4602      	mov	r2, r0
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee4:	3308      	adds	r3, #8
 800bee6:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bee8:	e7b7      	b.n	800be5a <follow_path+0x4e>
			if (res != FR_OK) break;
 800beea:	bf00      	nop
 800beec:	e002      	b.n	800bef4 <follow_path+0xe8>
				break;
 800beee:	bf00      	nop
 800bef0:	e000      	b.n	800bef4 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bef2:	bf00      	nop
		}
	}

	return res;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800befe:	b480      	push	{r7}
 800bf00:	b087      	sub	sp, #28
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf06:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d031      	beq.n	800bf78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	617b      	str	r3, [r7, #20]
 800bf1a:	e002      	b.n	800bf22 <get_ldnumber+0x24>
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	617b      	str	r3, [r7, #20]
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	2b1f      	cmp	r3, #31
 800bf28:	d903      	bls.n	800bf32 <get_ldnumber+0x34>
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b3a      	cmp	r3, #58	; 0x3a
 800bf30:	d1f4      	bne.n	800bf1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	2b3a      	cmp	r3, #58	; 0x3a
 800bf38:	d11c      	bne.n	800bf74 <get_ldnumber+0x76>
			tp = *path;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	60fa      	str	r2, [r7, #12]
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	3b30      	subs	r3, #48	; 0x30
 800bf4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2b09      	cmp	r3, #9
 800bf50:	d80e      	bhi.n	800bf70 <get_ldnumber+0x72>
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d10a      	bne.n	800bf70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d107      	bne.n	800bf70 <get_ldnumber+0x72>
					vol = (int)i;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	3301      	adds	r3, #1
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	697a      	ldr	r2, [r7, #20]
 800bf6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	e002      	b.n	800bf7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bf74:	2300      	movs	r3, #0
 800bf76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bf78:	693b      	ldr	r3, [r7, #16]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	371c      	adds	r7, #28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
	...

0800bf88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf98:	3304      	adds	r3, #4
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7fe f9fe 	bl	800a3b0 <move_window>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <check_fs+0x36>
		return 3;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e04a      	b.n	800c054 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	021b      	lsls	r3, r3, #8
 800bfca:	b21a      	sxth	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bfd2:	b21b      	sxth	r3, r3
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	b21b      	sxth	r3, r3
 800bfd8:	4a20      	ldr	r2, [pc, #128]	; (800c05c <check_fs+0xd4>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d001      	beq.n	800bfe2 <check_fs+0x5a>
		return 2;
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e038      	b.n	800c054 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	3336      	adds	r3, #54	; 0x36
 800bfe6:	3303      	adds	r3, #3
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	061a      	lsls	r2, r3, #24
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3336      	adds	r3, #54	; 0x36
 800bff0:	3302      	adds	r3, #2
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	041b      	lsls	r3, r3, #16
 800bff6:	4313      	orrs	r3, r2
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	3236      	adds	r2, #54	; 0x36
 800bffc:	3201      	adds	r2, #1
 800bffe:	7812      	ldrb	r2, [r2, #0]
 800c000:	0212      	lsls	r2, r2, #8
 800c002:	4313      	orrs	r3, r2
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c00a:	4313      	orrs	r3, r2
 800c00c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c010:	4a13      	ldr	r2, [pc, #76]	; (800c060 <check_fs+0xd8>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d101      	bne.n	800c01a <check_fs+0x92>
		return 0;
 800c016:	2300      	movs	r3, #0
 800c018:	e01c      	b.n	800c054 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	3352      	adds	r3, #82	; 0x52
 800c01e:	3303      	adds	r3, #3
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	061a      	lsls	r2, r3, #24
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3352      	adds	r3, #82	; 0x52
 800c028:	3302      	adds	r3, #2
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	041b      	lsls	r3, r3, #16
 800c02e:	4313      	orrs	r3, r2
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	3252      	adds	r2, #82	; 0x52
 800c034:	3201      	adds	r2, #1
 800c036:	7812      	ldrb	r2, [r2, #0]
 800c038:	0212      	lsls	r2, r2, #8
 800c03a:	4313      	orrs	r3, r2
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c042:	4313      	orrs	r3, r2
 800c044:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c048:	4a05      	ldr	r2, [pc, #20]	; (800c060 <check_fs+0xd8>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d101      	bne.n	800c052 <check_fs+0xca>
		return 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	e000      	b.n	800c054 <check_fs+0xcc>

	return 1;
 800c052:	2301      	movs	r3, #1
}
 800c054:	4618      	mov	r0, r3
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	ffffaa55 	.word	0xffffaa55
 800c060:	00544146 	.word	0x00544146

0800c064 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b096      	sub	sp, #88	; 0x58
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	4613      	mov	r3, r2
 800c070:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c078:	68b8      	ldr	r0, [r7, #8]
 800c07a:	f7ff ff40 	bl	800befe <get_ldnumber>
 800c07e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c082:	2b00      	cmp	r3, #0
 800c084:	da01      	bge.n	800c08a <find_volume+0x26>
 800c086:	230b      	movs	r3, #11
 800c088:	e33c      	b.n	800c704 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c08a:	4ab3      	ldr	r2, [pc, #716]	; (800c358 <find_volume+0x2f4>)
 800c08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c092:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <find_volume+0x3a>
 800c09a:	230c      	movs	r3, #12
 800c09c:	e332      	b.n	800c704 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0a2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d01d      	beq.n	800c0ec <find_volume+0x88>
		stat = disk_status(fs->drv);
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fd fe3e 	bl	8009d3c <disk_status>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c0c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10c      	bne.n	800c0ec <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c0d2:	79fb      	ldrb	r3, [r7, #7]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d007      	beq.n	800c0e8 <find_volume+0x84>
 800c0d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0dc:	f003 0304 	and.w	r3, r3, #4
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c0e4:	230a      	movs	r3, #10
 800c0e6:	e30d      	b.n	800c704 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e30b      	b.n	800c704 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c100:	3301      	adds	r3, #1
 800c102:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c10a:	3301      	adds	r3, #1
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fd fe2e 	bl	8009d70 <disk_initialize>
 800c114:	4603      	mov	r3, r0
 800c116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c11a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c11e:	f003 0301 	and.w	r3, r3, #1
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c126:	2303      	movs	r3, #3
 800c128:	e2ec      	b.n	800c704 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d007      	beq.n	800c140 <find_volume+0xdc>
 800c130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c134:	f003 0304 	and.w	r3, r3, #4
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800c13c:	230a      	movs	r3, #10
 800c13e:	e2e1      	b.n	800c704 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c146:	3301      	adds	r3, #1
 800c148:	7818      	ldrb	r0, [r3, #0]
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c150:	330a      	adds	r3, #10
 800c152:	461a      	mov	r2, r3
 800c154:	2102      	movs	r1, #2
 800c156:	f7fd fe71 	bl	8009e3c <disk_ioctl>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10f      	bne.n	800c180 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800c160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c166:	330a      	adds	r3, #10
 800c168:	881b      	ldrh	r3, [r3, #0]
 800c16a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c16e:	d307      	bcc.n	800c180 <find_volume+0x11c>
 800c170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c176:	330a      	adds	r3, #10
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17e:	d901      	bls.n	800c184 <find_volume+0x120>
 800c180:	2301      	movs	r3, #1
 800c182:	e2bf      	b.n	800c704 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c184:	2300      	movs	r3, #0
 800c186:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c188:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c18a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c18c:	f7ff fefc 	bl	800bf88 <check_fs>
 800c190:	4603      	mov	r3, r0
 800c192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d155      	bne.n	800c24a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c19e:	2300      	movs	r3, #0
 800c1a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c1a2:	e029      	b.n	800c1f8 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1a8:	011b      	lsls	r3, r3, #4
 800c1aa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c1ae:	4413      	add	r3, r2
 800c1b0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d012      	beq.n	800c1e2 <find_volume+0x17e>
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	330b      	adds	r3, #11
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	061a      	lsls	r2, r3, #24
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	330a      	adds	r3, #10
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	041b      	lsls	r3, r3, #16
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1d0:	3209      	adds	r2, #9
 800c1d2:	7812      	ldrb	r2, [r2, #0]
 800c1d4:	0212      	lsls	r2, r2, #8
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1da:	3208      	adds	r2, #8
 800c1dc:	7812      	ldrb	r2, [r2, #0]
 800c1de:	431a      	orrs	r2, r3
 800c1e0:	e000      	b.n	800c1e4 <find_volume+0x180>
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c1ec:	440b      	add	r3, r1
 800c1ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	643b      	str	r3, [r7, #64]	; 0x40
 800c1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1fa:	2b03      	cmp	r3, #3
 800c1fc:	d9d2      	bls.n	800c1a4 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c1fe:	2300      	movs	r3, #0
 800c200:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <find_volume+0x1aa>
 800c208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c20a:	3b01      	subs	r3, #1
 800c20c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c216:	4413      	add	r3, r2
 800c218:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c21c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c21e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c220:	2b00      	cmp	r3, #0
 800c222:	d005      	beq.n	800c230 <find_volume+0x1cc>
 800c224:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c226:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c228:	f7ff feae 	bl	800bf88 <check_fs>
 800c22c:	4603      	mov	r3, r0
 800c22e:	e000      	b.n	800c232 <find_volume+0x1ce>
 800c230:	2302      	movs	r3, #2
 800c232:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c236:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d005      	beq.n	800c24a <find_volume+0x1e6>
 800c23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c240:	3301      	adds	r3, #1
 800c242:	643b      	str	r3, [r7, #64]	; 0x40
 800c244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c246:	2b03      	cmp	r3, #3
 800c248:	d9e1      	bls.n	800c20e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c24a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d101      	bne.n	800c256 <find_volume+0x1f2>
 800c252:	2301      	movs	r3, #1
 800c254:	e256      	b.n	800c704 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <find_volume+0x1fe>
 800c25e:	230d      	movs	r3, #13
 800c260:	e250      	b.n	800c704 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c264:	7b1b      	ldrb	r3, [r3, #12]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	b21a      	sxth	r2, r3
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	7adb      	ldrb	r3, [r3, #11]
 800c26e:	b21b      	sxth	r3, r3
 800c270:	4313      	orrs	r3, r2
 800c272:	b21a      	sxth	r2, r3
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c27a:	330a      	adds	r3, #10
 800c27c:	881b      	ldrh	r3, [r3, #0]
 800c27e:	b21b      	sxth	r3, r3
 800c280:	429a      	cmp	r2, r3
 800c282:	d001      	beq.n	800c288 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800c284:	230d      	movs	r3, #13
 800c286:	e23d      	b.n	800c704 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	7ddb      	ldrb	r3, [r3, #23]
 800c28c:	021b      	lsls	r3, r3, #8
 800c28e:	b21a      	sxth	r2, r3
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	7d9b      	ldrb	r3, [r3, #22]
 800c294:	b21b      	sxth	r3, r3
 800c296:	4313      	orrs	r3, r2
 800c298:	b21b      	sxth	r3, r3
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d112      	bne.n	800c2ca <find_volume+0x266>
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c2aa:	061a      	lsls	r2, r3, #24
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c2b2:	041b      	lsls	r3, r3, #16
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2b8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c2bc:	0212      	lsls	r2, r2, #8
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2c2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2d0:	3318      	adds	r3, #24
 800c2d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2d4:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d8:	7c1a      	ldrb	r2, [r3, #16]
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2e0:	3303      	adds	r3, #3
 800c2e2:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ea:	3303      	adds	r3, #3
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d008      	beq.n	800c304 <find_volume+0x2a0>
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f8:	3303      	adds	r3, #3
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d001      	beq.n	800c304 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800c300:	230d      	movs	r3, #13
 800c302:	e1ff      	b.n	800c704 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c30a:	3303      	adds	r3, #3
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	7b5a      	ldrb	r2, [r3, #13]
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c322:	3302      	adds	r3, #2
 800c324:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c32c:	3302      	adds	r3, #2
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00e      	beq.n	800c352 <find_volume+0x2ee>
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c33a:	3302      	adds	r3, #2
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c346:	3302      	adds	r3, #2
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	4013      	ands	r3, r2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d004      	beq.n	800c35c <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800c352:	230d      	movs	r3, #13
 800c354:	e1d6      	b.n	800c704 <find_volume+0x6a0>
 800c356:	bf00      	nop
 800c358:	20000234 	.word	0x20000234

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35e:	7c9b      	ldrb	r3, [r3, #18]
 800c360:	021b      	lsls	r3, r3, #8
 800c362:	b21a      	sxth	r2, r3
 800c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c366:	7c5b      	ldrb	r3, [r3, #17]
 800c368:	b21b      	sxth	r3, r3
 800c36a:	4313      	orrs	r3, r2
 800c36c:	b21b      	sxth	r3, r3
 800c36e:	b29a      	uxth	r2, r3
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c376:	3308      	adds	r3, #8
 800c378:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c380:	3308      	adds	r3, #8
 800c382:	881a      	ldrh	r2, [r3, #0]
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c38a:	330a      	adds	r3, #10
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	095b      	lsrs	r3, r3, #5
 800c390:	b29b      	uxth	r3, r3
 800c392:	fbb2 f1f3 	udiv	r1, r2, r3
 800c396:	fb03 f301 	mul.w	r3, r3, r1
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800c3a2:	230d      	movs	r3, #13
 800c3a4:	e1ae      	b.n	800c704 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	7d1b      	ldrb	r3, [r3, #20]
 800c3aa:	021b      	lsls	r3, r3, #8
 800c3ac:	b21a      	sxth	r2, r3
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b0:	7cdb      	ldrb	r3, [r3, #19]
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	b21b      	sxth	r3, r3
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d112      	bne.n	800c3e8 <find_volume+0x384>
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c3c8:	061a      	lsls	r2, r3, #24
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c3d0:	041b      	lsls	r3, r3, #16
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3d6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c3da:	0212      	lsls	r2, r2, #8
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3e0:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	7bdb      	ldrb	r3, [r3, #15]
 800c3ec:	021b      	lsls	r3, r3, #8
 800c3ee:	b21a      	sxth	r2, r3
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	7b9b      	ldrb	r3, [r3, #14]
 800c3f4:	b21b      	sxth	r3, r3
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	b21b      	sxth	r3, r3
 800c3fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c3fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <find_volume+0x3a2>
 800c402:	230d      	movs	r3, #13
 800c404:	e17e      	b.n	800c704 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c406:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c40a:	441a      	add	r2, r3
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c412:	3308      	adds	r3, #8
 800c414:	8819      	ldrh	r1, [r3, #0]
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c41c:	330a      	adds	r3, #10
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	095b      	lsrs	r3, r3, #5
 800c422:	b29b      	uxth	r3, r3
 800c424:	fbb1 f3f3 	udiv	r3, r1, r3
 800c428:	b29b      	uxth	r3, r3
 800c42a:	4413      	add	r3, r2
 800c42c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c42e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	429a      	cmp	r2, r3
 800c434:	d201      	bcs.n	800c43a <find_volume+0x3d6>
 800c436:	230d      	movs	r3, #13
 800c438:	e164      	b.n	800c704 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c43a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c446:	3302      	adds	r3, #2
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c44e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <find_volume+0x3f6>
 800c456:	230d      	movs	r3, #13
 800c458:	e154      	b.n	800c704 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800c45a:	2301      	movs	r3, #1
 800c45c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c466:	4293      	cmp	r3, r2
 800c468:	d902      	bls.n	800c470 <find_volume+0x40c>
 800c46a:	2302      	movs	r3, #2
 800c46c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c476:	4293      	cmp	r3, r2
 800c478:	d902      	bls.n	800c480 <find_volume+0x41c>
 800c47a:	2303      	movs	r3, #3
 800c47c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	1c9a      	adds	r2, r3, #2
 800c484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c48a:	3314      	adds	r3, #20
 800c48c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800c48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c494:	331c      	adds	r3, #28
 800c496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c498:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c49a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c49e:	441a      	add	r2, r3
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c4a6:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800c4a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	441a      	add	r2, r3
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800c4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d127      	bne.n	800c510 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4c6:	3308      	adds	r3, #8
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <find_volume+0x46e>
 800c4ce:	230d      	movs	r3, #13
 800c4d0:	e118      	b.n	800c704 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4d8:	061a      	lsls	r2, r3, #24
 800c4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c4e0:	041b      	lsls	r3, r3, #16
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4e6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c4ea:	0212      	lsls	r2, r2, #8
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4f0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c506:	3314      	adds	r3, #20
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	647b      	str	r3, [r7, #68]	; 0x44
 800c50e:	e030      	b.n	800c572 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c516:	3308      	adds	r3, #8
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <find_volume+0x4be>
 800c51e:	230d      	movs	r3, #13
 800c520:	e0f0      	b.n	800c704 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c524:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c52c:	441a      	add	r2, r3
 800c52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c530:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c534:	3304      	adds	r3, #4
 800c536:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d106      	bne.n	800c54e <find_volume+0x4ea>
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c546:	3314      	adds	r3, #20
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	e010      	b.n	800c570 <find_volume+0x50c>
 800c54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c554:	3314      	adds	r3, #20
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	4613      	mov	r3, r2
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	4413      	add	r3, r2
 800c55e:	085a      	lsrs	r2, r3, #1
 800c560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c566:	3314      	adds	r3, #20
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800c570:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c578:	3318      	adds	r3, #24
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c582:	330a      	adds	r3, #10
 800c584:	881b      	ldrh	r3, [r3, #0]
 800c586:	4619      	mov	r1, r3
 800c588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c58a:	440b      	add	r3, r1
 800c58c:	1e59      	subs	r1, r3, #1
 800c58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c594:	330a      	adds	r3, #10
 800c596:	881b      	ldrh	r3, [r3, #0]
 800c598:	fbb1 f3f3 	udiv	r3, r1, r3
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d201      	bcs.n	800c5a4 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800c5a0:	230d      	movs	r3, #13
 800c5a2:	e0af      	b.n	800c704 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5aa:	3310      	adds	r3, #16
 800c5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b8:	3310      	adds	r3, #16
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5c2:	330c      	adds	r3, #12
 800c5c4:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5cc:	3305      	adds	r3, #5
 800c5ce:	2280      	movs	r2, #128	; 0x80
 800c5d0:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800c5d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d17d      	bne.n	800c6d6 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5e0:	021b      	lsls	r3, r3, #8
 800c5e2:	b21a      	sxth	r2, r3
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5ea:	b21b      	sxth	r3, r3
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	b21b      	sxth	r3, r3
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d170      	bne.n	800c6d6 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800c5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5fc:	f7fd fed8 	bl	800a3b0 <move_window>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d167      	bne.n	800c6d6 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c60c:	3305      	adds	r3, #5
 800c60e:	2200      	movs	r2, #0
 800c610:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800c618:	021b      	lsls	r3, r3, #8
 800c61a:	b21a      	sxth	r2, r3
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c622:	b21b      	sxth	r3, r3
 800c624:	4313      	orrs	r3, r2
 800c626:	b21b      	sxth	r3, r3
 800c628:	4a38      	ldr	r2, [pc, #224]	; (800c70c <find_volume+0x6a8>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d153      	bne.n	800c6d6 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c630:	78db      	ldrb	r3, [r3, #3]
 800c632:	061a      	lsls	r2, r3, #24
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	789b      	ldrb	r3, [r3, #2]
 800c638:	041b      	lsls	r3, r3, #16
 800c63a:	4313      	orrs	r3, r2
 800c63c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c63e:	7852      	ldrb	r2, [r2, #1]
 800c640:	0212      	lsls	r2, r2, #8
 800c642:	4313      	orrs	r3, r2
 800c644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c646:	7812      	ldrb	r2, [r2, #0]
 800c648:	4313      	orrs	r3, r2
 800c64a:	4a31      	ldr	r2, [pc, #196]	; (800c710 <find_volume+0x6ac>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d142      	bne.n	800c6d6 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800c656:	061a      	lsls	r2, r3, #24
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800c65e:	041b      	lsls	r3, r3, #16
 800c660:	4313      	orrs	r3, r2
 800c662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c664:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800c668:	0212      	lsls	r2, r2, #8
 800c66a:	4313      	orrs	r3, r2
 800c66c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c66e:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800c672:	4313      	orrs	r3, r2
 800c674:	4a27      	ldr	r2, [pc, #156]	; (800c714 <find_volume+0x6b0>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d12d      	bne.n	800c6d6 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800c680:	061a      	lsls	r2, r3, #24
 800c682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c684:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800c688:	041b      	lsls	r3, r3, #16
 800c68a:	4313      	orrs	r3, r2
 800c68c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c68e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800c692:	0212      	lsls	r2, r2, #8
 800c694:	4313      	orrs	r3, r2
 800c696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c698:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800c69c:	431a      	orrs	r2, r3
 800c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6a4:	3310      	adds	r3, #16
 800c6a6:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800c6ae:	061a      	lsls	r2, r3, #24
 800c6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800c6b6:	041b      	lsls	r3, r3, #16
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6bc:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800c6c0:	0212      	lsls	r2, r2, #8
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6c6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800c6ca:	431a      	orrs	r2, r3
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d2:	330c      	adds	r3, #12
 800c6d4:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6dc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c6e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800c6e2:	4b0d      	ldr	r3, [pc, #52]	; (800c718 <find_volume+0x6b4>)
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	4b0b      	ldr	r3, [pc, #44]	; (800c718 <find_volume+0x6b4>)
 800c6ec:	801a      	strh	r2, [r3, #0]
 800c6ee:	4b0a      	ldr	r3, [pc, #40]	; (800c718 <find_volume+0x6b4>)
 800c6f0:	881a      	ldrh	r2, [r3, #0]
 800c6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6f8:	3306      	adds	r3, #6
 800c6fa:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c6fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6fe:	f7fd fdd3 	bl	800a2a8 <clear_lock>
#endif

	return FR_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3758      	adds	r7, #88	; 0x58
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	ffffaa55 	.word	0xffffaa55
 800c710:	41615252 	.word	0x41615252
 800c714:	61417272 	.word	0x61417272
 800c718:	20000238 	.word	0x20000238

0800c71c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d02d      	beq.n	800c78a <validate+0x6e>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d027      	beq.n	800c78a <validate+0x6e>
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d01e      	beq.n	800c78a <validate+0x6e>
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c758:	3306      	adds	r3, #6
 800c75a:	881a      	ldrh	r2, [r3, #0]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c762:	3304      	adds	r3, #4
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	429a      	cmp	r2, r3
 800c768:	d10f      	bne.n	800c78a <validate+0x6e>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c776:	3301      	adds	r3, #1
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7fd fade 	bl	8009d3c <disk_status>
 800c780:	4603      	mov	r3, r0
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <validate+0x72>
		return FR_INVALID_OBJECT;
 800c78a:	2309      	movs	r3, #9
 800c78c:	e000      	b.n	800c790 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800c7aa:	f107 0310 	add.w	r3, r7, #16
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff fba5 	bl	800befe <get_ldnumber>
 800c7b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	da01      	bge.n	800c7c0 <f_mount+0x28>
 800c7bc:	230b      	movs	r3, #11
 800c7be:	e02f      	b.n	800c820 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c7c0:	4a19      	ldr	r2, [pc, #100]	; (800c828 <f_mount+0x90>)
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d007      	beq.n	800c7e0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800c7d0:	69b8      	ldr	r0, [r7, #24]
 800c7d2:	f7fd fd69 	bl	800a2a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d004      	beq.n	800c7f0 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	490d      	ldr	r1, [pc, #52]	; (800c828 <f_mount+0x90>)
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <f_mount+0x6e>
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d001      	beq.n	800c80a <f_mount+0x72>
 800c806:	2300      	movs	r3, #0
 800c808:	e00a      	b.n	800c820 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800c80a:	f107 0108 	add.w	r1, r7, #8
 800c80e:	f107 030c 	add.w	r3, r7, #12
 800c812:	2200      	movs	r2, #0
 800c814:	4618      	mov	r0, r3
 800c816:	f7ff fc25 	bl	800c064 <find_volume>
 800c81a:	4603      	mov	r3, r0
 800c81c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3720      	adds	r7, #32
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	20000234 	.word	0x20000234

0800c82c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	f107 0318 	add.w	r3, r7, #24
 800c83a:	3b0c      	subs	r3, #12
 800c83c:	6018      	str	r0, [r3, #0]
 800c83e:	f107 0318 	add.w	r3, r7, #24
 800c842:	3b10      	subs	r3, #16
 800c844:	6019      	str	r1, [r3, #0]
 800c846:	f107 0318 	add.w	r3, r7, #24
 800c84a:	3b11      	subs	r3, #17
 800c84c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800c84e:	f107 0318 	add.w	r3, r7, #24
 800c852:	3b0c      	subs	r3, #12
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <f_open+0x32>
 800c85a:	2309      	movs	r3, #9
 800c85c:	e319      	b.n	800ce92 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800c85e:	f107 0318 	add.w	r3, r7, #24
 800c862:	3b0c      	subs	r3, #12
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800c86e:	f107 0318 	add.w	r3, r7, #24
 800c872:	3b11      	subs	r3, #17
 800c874:	f107 0218 	add.w	r2, r7, #24
 800c878:	3a11      	subs	r2, #17
 800c87a:	7812      	ldrb	r2, [r2, #0]
 800c87c:	f002 021f 	and.w	r2, r2, #31
 800c880:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800c882:	f107 0318 	add.w	r3, r7, #24
 800c886:	3b11      	subs	r3, #17
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	f023 0301 	bic.w	r3, r3, #1
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	f107 0118 	add.w	r1, r7, #24
 800c894:	3910      	subs	r1, #16
 800c896:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c89a:	3b18      	subs	r3, #24
 800c89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7ff fbdf 	bl	800c064 <find_volume>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c8ac:	f102 0217 	add.w	r2, r2, #23
 800c8b0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800c8b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c8b6:	f103 0317 	add.w	r3, r3, #23
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f040 82e3 	bne.w	800ce88 <f_open+0x65c>
		INIT_BUF(dj);
 800c8c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c8c6:	3b18      	subs	r3, #24
 800c8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8cc:	3318      	adds	r3, #24
 800c8ce:	f107 0218 	add.w	r2, r7, #24
 800c8d2:	3a04      	subs	r2, #4
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c8da:	3b18      	subs	r3, #24
 800c8dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c8e0:	4ad1      	ldr	r2, [pc, #836]	; (800cc28 <f_open+0x3fc>)
 800c8e2:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c8e4:	f107 0318 	add.w	r3, r7, #24
 800c8e8:	3b10      	subs	r3, #16
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c8f0:	3b18      	subs	r3, #24
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff fa89 	bl	800be0c <follow_path>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c900:	f102 0217 	add.w	r2, r2, #23
 800c904:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800c906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c90a:	3b18      	subs	r3, #24
 800c90c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c910:	3314      	adds	r3, #20
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c918:	f102 0210 	add.w	r2, r2, #16
 800c91c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c91e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c922:	f103 0317 	add.w	r3, r3, #23
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d126      	bne.n	800c97a <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800c92c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c930:	f103 0310 	add.w	r3, r3, #16
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d106      	bne.n	800c948 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800c93a:	2306      	movs	r3, #6
 800c93c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c940:	f102 0217 	add.w	r2, r2, #23
 800c944:	7013      	strb	r3, [r2, #0]
 800c946:	e018      	b.n	800c97a <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c948:	f107 0318 	add.w	r3, r7, #24
 800c94c:	3b11      	subs	r3, #17
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	f023 0301 	bic.w	r3, r3, #1
 800c954:	2b00      	cmp	r3, #0
 800c956:	bf14      	ite	ne
 800c958:	2301      	movne	r3, #1
 800c95a:	2300      	moveq	r3, #0
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	461a      	mov	r2, r3
 800c960:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c964:	3b18      	subs	r3, #24
 800c966:	4611      	mov	r1, r2
 800c968:	4618      	mov	r0, r3
 800c96a:	f7fd fb01 	bl	8009f70 <chk_lock>
 800c96e:	4603      	mov	r3, r0
 800c970:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c974:	f102 0217 	add.w	r2, r2, #23
 800c978:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c97a:	f107 0318 	add.w	r3, r7, #24
 800c97e:	3b11      	subs	r3, #17
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	f003 031c 	and.w	r3, r3, #28
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 8150 	beq.w	800cc2c <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800c98c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c990:	f103 0317 	add.w	r3, r3, #23
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d030      	beq.n	800c9fc <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800c99a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c99e:	f103 0317 	add.w	r3, r3, #23
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2b04      	cmp	r3, #4
 800c9a6:	d112      	bne.n	800c9ce <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c9a8:	f7fd fb54 	bl	800a054 <enq_lock>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d007      	beq.n	800c9c2 <f_open+0x196>
 800c9b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c9b6:	3b18      	subs	r3, #24
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7fe ff35 	bl	800b828 <dir_register>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	e000      	b.n	800c9c4 <f_open+0x198>
 800c9c2:	2312      	movs	r3, #18
 800c9c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c9c8:	f102 0217 	add.w	r2, r2, #23
 800c9cc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c9ce:	f107 0318 	add.w	r3, r7, #24
 800c9d2:	3b11      	subs	r3, #17
 800c9d4:	f107 0218 	add.w	r2, r7, #24
 800c9d8:	3a11      	subs	r2, #17
 800c9da:	7812      	ldrb	r2, [r2, #0]
 800c9dc:	f042 0208 	orr.w	r2, r2, #8
 800c9e0:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800c9e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c9e6:	3b18      	subs	r3, #24
 800c9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ec:	3314      	adds	r3, #20
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c9f4:	f102 0210 	add.w	r2, r2, #16
 800c9f8:	6013      	str	r3, [r2, #0]
 800c9fa:	e01f      	b.n	800ca3c <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c9fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca00:	f103 0310 	add.w	r3, r3, #16
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	330b      	adds	r3, #11
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	f003 0311 	and.w	r3, r3, #17
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d006      	beq.n	800ca20 <f_open+0x1f4>
					res = FR_DENIED;
 800ca12:	2307      	movs	r3, #7
 800ca14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca18:	f102 0217 	add.w	r2, r2, #23
 800ca1c:	7013      	strb	r3, [r2, #0]
 800ca1e:	e00d      	b.n	800ca3c <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ca20:	f107 0318 	add.w	r3, r7, #24
 800ca24:	3b11      	subs	r3, #17
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	f003 0304 	and.w	r3, r3, #4
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d005      	beq.n	800ca3c <f_open+0x210>
						res = FR_EXIST;
 800ca30:	2308      	movs	r3, #8
 800ca32:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca36:	f102 0217 	add.w	r2, r2, #23
 800ca3a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca40:	f103 0317 	add.w	r3, r3, #23
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f040 8122 	bne.w	800cc90 <f_open+0x464>
 800ca4c:	f107 0318 	add.w	r3, r7, #24
 800ca50:	3b11      	subs	r3, #17
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	f003 0308 	and.w	r3, r3, #8
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 8119 	beq.w	800cc90 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800ca5e:	f7fd f90b 	bl	8009c78 <get_fattime>
 800ca62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca66:	f103 030c 	add.w	r3, r3, #12
 800ca6a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800ca6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca70:	f103 0310 	add.w	r3, r3, #16
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	330e      	adds	r3, #14
 800ca78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca7c:	f102 020c 	add.w	r2, r2, #12
 800ca80:	6812      	ldr	r2, [r2, #0]
 800ca82:	b2d2      	uxtb	r2, r2
 800ca84:	701a      	strb	r2, [r3, #0]
 800ca86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca8a:	f103 030c 	add.w	r3, r3, #12
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	0a1b      	lsrs	r3, r3, #8
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca9a:	f103 0310 	add.w	r3, r3, #16
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	330f      	adds	r3, #15
 800caa2:	b2d2      	uxtb	r2, r2
 800caa4:	701a      	strb	r2, [r3, #0]
 800caa6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800caaa:	f103 030c 	add.w	r3, r3, #12
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	0c1a      	lsrs	r2, r3, #16
 800cab2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cab6:	f103 0310 	add.w	r3, r3, #16
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	3310      	adds	r3, #16
 800cabe:	b2d2      	uxtb	r2, r2
 800cac0:	701a      	strb	r2, [r3, #0]
 800cac2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cac6:	f103 030c 	add.w	r3, r3, #12
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	0e1a      	lsrs	r2, r3, #24
 800cace:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cad2:	f103 0310 	add.w	r3, r3, #16
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3311      	adds	r3, #17
 800cada:	b2d2      	uxtb	r2, r2
 800cadc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800cade:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cae2:	f103 0310 	add.w	r3, r3, #16
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	330b      	adds	r3, #11
 800caea:	2200      	movs	r2, #0
 800caec:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800caee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800caf2:	f103 0310 	add.w	r3, r3, #16
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	331c      	adds	r3, #28
 800cafa:	2200      	movs	r2, #0
 800cafc:	701a      	strb	r2, [r3, #0]
 800cafe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb02:	f103 0310 	add.w	r3, r3, #16
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	331d      	adds	r3, #29
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	701a      	strb	r2, [r3, #0]
 800cb0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb12:	f103 0310 	add.w	r3, r3, #16
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	331e      	adds	r3, #30
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	701a      	strb	r2, [r3, #0]
 800cb1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb22:	f103 0310 	add.w	r3, r3, #16
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	331f      	adds	r3, #31
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800cb2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb32:	3b18      	subs	r3, #24
 800cb34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb3e:	f102 0210 	add.w	r2, r2, #16
 800cb42:	6811      	ldr	r1, [r2, #0]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe fbae 	bl	800b2a6 <ld_clust>
 800cb4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb4e:	f103 0308 	add.w	r3, r3, #8
 800cb52:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800cb54:	2100      	movs	r1, #0
 800cb56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb5a:	f103 0310 	add.w	r3, r3, #16
 800cb5e:	6818      	ldr	r0, [r3, #0]
 800cb60:	f7fe fbd0 	bl	800b304 <st_clust>
				dj.fs->wflag = 1;
 800cb64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb68:	3b18      	subs	r3, #24
 800cb6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb74:	3304      	adds	r3, #4
 800cb76:	2201      	movs	r2, #1
 800cb78:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800cb7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb7e:	f103 0308 	add.w	r3, r3, #8
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f000 8083 	beq.w	800cc90 <f_open+0x464>
					dw = dj.fs->winsect;
 800cb8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb8e:	3b18      	subs	r3, #24
 800cb90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cb9a:	330c      	adds	r3, #12
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cba2:	f102 020c 	add.w	r2, r2, #12
 800cba6:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800cba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cbac:	3b18      	subs	r3, #24
 800cbae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbb8:	f102 0208 	add.w	r2, r2, #8
 800cbbc:	6811      	ldr	r1, [r2, #0]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fd ff86 	bl	800aad0 <remove_chain>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbca:	f102 0217 	add.w	r2, r2, #23
 800cbce:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800cbd0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cbd4:	f103 0317 	add.w	r3, r3, #23
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d158      	bne.n	800cc90 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800cbde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cbe2:	3b18      	subs	r3, #24
 800cbe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbee:	f102 0208 	add.w	r2, r2, #8
 800cbf2:	6812      	ldr	r2, [r2, #0]
 800cbf4:	3a01      	subs	r2, #1
 800cbf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbfa:	330c      	adds	r3, #12
 800cbfc:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800cbfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cc02:	3b18      	subs	r3, #24
 800cc04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc0e:	f102 020c 	add.w	r2, r2, #12
 800cc12:	6811      	ldr	r1, [r2, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fd fbcb 	bl	800a3b0 <move_window>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc20:	f102 0217 	add.w	r2, r2, #23
 800cc24:	7013      	strb	r3, [r2, #0]
 800cc26:	e033      	b.n	800cc90 <f_open+0x464>
 800cc28:	20000254 	.word	0x20000254
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800cc2c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc30:	f103 0317 	add.w	r3, r3, #23
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d12a      	bne.n	800cc90 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800cc3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc3e:	f103 0310 	add.w	r3, r3, #16
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	330b      	adds	r3, #11
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	f003 0310 	and.w	r3, r3, #16
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d006      	beq.n	800cc5e <f_open+0x432>
					res = FR_NO_FILE;
 800cc50:	2304      	movs	r3, #4
 800cc52:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc56:	f102 0217 	add.w	r2, r2, #23
 800cc5a:	7013      	strb	r3, [r2, #0]
 800cc5c:	e018      	b.n	800cc90 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800cc5e:	f107 0318 	add.w	r3, r7, #24
 800cc62:	3b11      	subs	r3, #17
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	f003 0302 	and.w	r3, r3, #2
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d010      	beq.n	800cc90 <f_open+0x464>
 800cc6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc72:	f103 0310 	add.w	r3, r3, #16
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	330b      	adds	r3, #11
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d005      	beq.n	800cc90 <f_open+0x464>
						res = FR_DENIED;
 800cc84:	2307      	movs	r3, #7
 800cc86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc8a:	f102 0217 	add.w	r2, r2, #23
 800cc8e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800cc90:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc94:	f103 0317 	add.w	r3, r3, #23
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d15b      	bne.n	800cd56 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cc9e:	f107 0318 	add.w	r3, r7, #24
 800cca2:	3b11      	subs	r3, #17
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	f003 0308 	and.w	r3, r3, #8
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d009      	beq.n	800ccc2 <f_open+0x496>
				mode |= FA__WRITTEN;
 800ccae:	f107 0318 	add.w	r3, r7, #24
 800ccb2:	3b11      	subs	r3, #17
 800ccb4:	f107 0218 	add.w	r2, r7, #24
 800ccb8:	3a11      	subs	r2, #17
 800ccba:	7812      	ldrb	r2, [r2, #0]
 800ccbc:	f042 0220 	orr.w	r2, r2, #32
 800ccc0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ccc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ccc6:	3b18      	subs	r3, #24
 800ccc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccd2:	330c      	adds	r3, #12
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	f107 0318 	add.w	r3, r7, #24
 800ccda:	3b0c      	subs	r3, #12
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cce2:	331c      	adds	r3, #28
 800cce4:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800cce6:	f107 0318 	add.w	r3, r7, #24
 800ccea:	3b0c      	subs	r3, #12
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccf2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ccf6:	f102 0210 	add.w	r2, r2, #16
 800ccfa:	6812      	ldr	r2, [r2, #0]
 800ccfc:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ccfe:	f107 0318 	add.w	r3, r7, #24
 800cd02:	3b11      	subs	r3, #17
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	f023 0301 	bic.w	r3, r3, #1
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	bf14      	ite	ne
 800cd0e:	2301      	movne	r3, #1
 800cd10:	2300      	moveq	r3, #0
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	461a      	mov	r2, r3
 800cd16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd1a:	3b18      	subs	r3, #24
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fd f9bc 	bl	800a09c <inc_lock>
 800cd24:	4602      	mov	r2, r0
 800cd26:	f107 0318 	add.w	r3, r7, #24
 800cd2a:	3b0c      	subs	r3, #12
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd32:	3308      	adds	r3, #8
 800cd34:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800cd36:	f107 0318 	add.w	r3, r7, #24
 800cd3a:	3b0c      	subs	r3, #12
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd42:	3308      	adds	r3, #8
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d105      	bne.n	800cd56 <f_open+0x52a>
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cd50:	f102 0217 	add.w	r2, r2, #23
 800cd54:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800cd56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cd5a:	f103 0317 	add.w	r3, r3, #23
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f040 8091 	bne.w	800ce88 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800cd66:	f107 0318 	add.w	r3, r7, #24
 800cd6a:	3b0c      	subs	r3, #12
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd72:	3306      	adds	r3, #6
 800cd74:	f107 0218 	add.w	r2, r7, #24
 800cd78:	3a11      	subs	r2, #17
 800cd7a:	7812      	ldrb	r2, [r2, #0]
 800cd7c:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800cd7e:	f107 0318 	add.w	r3, r7, #24
 800cd82:	3b0c      	subs	r3, #12
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd8a:	3307      	adds	r3, #7
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800cd90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd94:	3b18      	subs	r3, #24
 800cd96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cda0:	f102 0210 	add.w	r2, r2, #16
 800cda4:	6811      	ldr	r1, [r2, #0]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe fa7d 	bl	800b2a6 <ld_clust>
 800cdac:	4602      	mov	r2, r0
 800cdae:	f107 0318 	add.w	r3, r7, #24
 800cdb2:	3b0c      	subs	r3, #12
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdba:	3310      	adds	r3, #16
 800cdbc:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800cdbe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cdc2:	f103 0310 	add.w	r3, r3, #16
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	331f      	adds	r3, #31
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	061a      	lsls	r2, r3, #24
 800cdce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cdd2:	f103 0310 	add.w	r3, r3, #16
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	331e      	adds	r3, #30
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	041b      	lsls	r3, r3, #16
 800cdde:	4313      	orrs	r3, r2
 800cde0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cde4:	f102 0210 	add.w	r2, r2, #16
 800cde8:	6812      	ldr	r2, [r2, #0]
 800cdea:	321d      	adds	r2, #29
 800cdec:	7812      	ldrb	r2, [r2, #0]
 800cdee:	0212      	lsls	r2, r2, #8
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cdf6:	f102 0210 	add.w	r2, r2, #16
 800cdfa:	6812      	ldr	r2, [r2, #0]
 800cdfc:	321c      	adds	r2, #28
 800cdfe:	7812      	ldrb	r2, [r2, #0]
 800ce00:	431a      	orrs	r2, r3
 800ce02:	f107 0318 	add.w	r3, r7, #24
 800ce06:	3b0c      	subs	r3, #12
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce0e:	330c      	adds	r3, #12
 800ce10:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800ce12:	f107 0318 	add.w	r3, r7, #24
 800ce16:	3b0c      	subs	r3, #12
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce1e:	3308      	adds	r3, #8
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800ce24:	f107 0318 	add.w	r3, r7, #24
 800ce28:	3b0c      	subs	r3, #12
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce30:	3318      	adds	r3, #24
 800ce32:	2200      	movs	r2, #0
 800ce34:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800ce36:	f107 0318 	add.w	r3, r7, #24
 800ce3a:	3b0c      	subs	r3, #12
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ce42:	3304      	adds	r3, #4
 800ce44:	2200      	movs	r2, #0
 800ce46:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800ce48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce4c:	3b18      	subs	r3, #24
 800ce4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	f107 0318 	add.w	r3, r7, #24
 800ce58:	3b0c      	subs	r3, #12
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce60:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800ce62:	f107 0318 	add.w	r3, r7, #24
 800ce66:	3b0c      	subs	r3, #12
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce74:	3306      	adds	r3, #6
 800ce76:	881a      	ldrh	r2, [r3, #0]
 800ce78:	f107 0318 	add.w	r3, r7, #24
 800ce7c:	3b0c      	subs	r3, #12
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce84:	3304      	adds	r3, #4
 800ce86:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800ce88:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ce8c:	f103 0317 	add.w	r3, r3, #23
 800ce90:	781b      	ldrb	r3, [r3, #0]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop

0800cea0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08c      	sub	sp, #48	; 0x30
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f7ff fc2f 	bl	800c71c <validate>
 800cebe:	4603      	mov	r3, r0
 800cec0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800cec2:	7ffb      	ldrb	r3, [r7, #31]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d001      	beq.n	800cecc <f_read+0x2c>
 800cec8:	7ffb      	ldrb	r3, [r7, #31]
 800ceca:	e1fb      	b.n	800d2c4 <f_read+0x424>
	if (fp->err)								/* Check error */
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced2:	3307      	adds	r3, #7
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d005      	beq.n	800cee6 <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cee0:	3307      	adds	r3, #7
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	e1ee      	b.n	800d2c4 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceec:	3306      	adds	r3, #6
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	f003 0301 	and.w	r3, r3, #1
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800cef8:	2307      	movs	r3, #7
 800cefa:	e1e3      	b.n	800d2c4 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf02:	330c      	adds	r3, #12
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf0c:	3308      	adds	r3, #8
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	f240 81ce 	bls.w	800d2ba <f_read+0x41a>
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cf22:	e1ca      	b.n	800d2ba <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf3a:	330a      	adds	r3, #10
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf42:	fb03 f301 	mul.w	r3, r3, r1
 800cf46:	1ad3      	subs	r3, r2, r3
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f040 8160 	bne.w	800d20e <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf54:	3308      	adds	r3, #8
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf64:	330a      	adds	r3, #10
 800cf66:	881b      	ldrh	r3, [r3, #0]
 800cf68:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf7a:	3302      	adds	r3, #2
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	4013      	ands	r3, r2
 800cf84:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d14a      	bne.n	800d022 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf92:	3308      	adds	r3, #8
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d106      	bne.n	800cfa8 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfa0:	3310      	adds	r3, #16
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfa6:	e01f      	b.n	800cfe8 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cfae:	3304      	adds	r3, #4
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00a      	beq.n	800cfcc <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f7fd fe9d 	bl	800ad02 <clmt_clust>
 800cfc8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cfca:	e00d      	b.n	800cfe8 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfda:	3314      	adds	r3, #20
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	f7fd fb10 	bl	800a606 <get_fat>
 800cfe6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d807      	bhi.n	800cffe <f_read+0x15e>
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cff4:	3307      	adds	r3, #7
 800cff6:	2202      	movs	r2, #2
 800cff8:	701a      	strb	r2, [r3, #0]
 800cffa:	2302      	movs	r3, #2
 800cffc:	e162      	b.n	800d2c4 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d004:	d107      	bne.n	800d016 <f_read+0x176>
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d00c:	3307      	adds	r3, #7
 800d00e:	2201      	movs	r2, #1
 800d010:	701a      	strb	r2, [r3, #0]
 800d012:	2301      	movs	r3, #1
 800d014:	e156      	b.n	800d2c4 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d01c:	3314      	adds	r3, #20
 800d01e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d020:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d030:	3314      	adds	r3, #20
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4619      	mov	r1, r3
 800d036:	4610      	mov	r0, r2
 800d038:	f7fd fabd 	bl	800a5b6 <clust2sect>
 800d03c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d107      	bne.n	800d054 <f_read+0x1b4>
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d04a:	3307      	adds	r3, #7
 800d04c:	2202      	movs	r2, #2
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	2302      	movs	r3, #2
 800d052:	e137      	b.n	800d2c4 <f_read+0x424>
			sect += csect;
 800d054:	7dfb      	ldrb	r3, [r7, #23]
 800d056:	693a      	ldr	r2, [r7, #16]
 800d058:	4413      	add	r3, r2
 800d05a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d068:	330a      	adds	r3, #10
 800d06a:	881b      	ldrh	r3, [r3, #0]
 800d06c:	461a      	mov	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	fbb3 f3f2 	udiv	r3, r3, r2
 800d074:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d070      	beq.n	800d15e <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d07c:	7dfa      	ldrb	r2, [r7, #23]
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d080:	441a      	add	r2, r3
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d08e:	3302      	adds	r3, #2
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	429a      	cmp	r2, r3
 800d094:	d90b      	bls.n	800d0ae <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a2:	3302      	adds	r3, #2
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	7dfb      	ldrb	r3, [r7, #23]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	7818      	ldrb	r0, [r3, #0]
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	6a39      	ldr	r1, [r7, #32]
 800d0c4:	f7fc fe7a 	bl	8009dbc <disk_read>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d007      	beq.n	800d0de <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0d4:	3307      	adds	r3, #7
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e0f2      	b.n	800d2c4 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e4:	3306      	adds	r3, #6
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d028      	beq.n	800d142 <f_read+0x2a2>
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0f6:	3318      	adds	r3, #24
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d100:	429a      	cmp	r2, r3
 800d102:	d91e      	bls.n	800d142 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d10a:	3318      	adds	r3, #24
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	1ad2      	subs	r2, r2, r3
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d11e:	330a      	adds	r3, #10
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	fb03 f302 	mul.w	r3, r3, r2
 800d126:	6a3a      	ldr	r2, [r7, #32]
 800d128:	18d0      	adds	r0, r2, r3
 800d12a:	68f9      	ldr	r1, [r7, #12]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d138:	330a      	adds	r3, #10
 800d13a:	881b      	ldrh	r3, [r3, #0]
 800d13c:	461a      	mov	r2, r3
 800d13e:	f7fc fe9b 	bl	8009e78 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d14e:	330a      	adds	r3, #10
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	fb02 f303 	mul.w	r3, r2, r3
 800d15a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800d15c:	e093      	b.n	800d286 <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d164:	3318      	adds	r3, #24
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d049      	beq.n	800d202 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d174:	3306      	adds	r3, #6
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d028      	beq.n	800d1d2 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d18c:	3301      	adds	r3, #1
 800d18e:	7818      	ldrb	r0, [r3, #0]
 800d190:	68f9      	ldr	r1, [r7, #12]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d198:	3318      	adds	r3, #24
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	2301      	movs	r3, #1
 800d19e:	f7fc fe2d 	bl	8009dfc <disk_write>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d007      	beq.n	800d1b8 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1ae:	3307      	adds	r3, #7
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	701a      	strb	r2, [r3, #0]
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e085      	b.n	800d2c4 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1be:	3306      	adds	r3, #6
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1ce:	3306      	adds	r3, #6
 800d1d0:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1de:	3301      	adds	r3, #1
 800d1e0:	7818      	ldrb	r0, [r3, #0]
 800d1e2:	68f9      	ldr	r1, [r7, #12]
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	f7fc fde8 	bl	8009dbc <disk_read>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d007      	beq.n	800d202 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1f8:	3307      	adds	r3, #7
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	701a      	strb	r2, [r3, #0]
 800d1fe:	2301      	movs	r3, #1
 800d200:	e060      	b.n	800d2c4 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d208:	3318      	adds	r3, #24
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d21a:	330a      	adds	r3, #10
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	4618      	mov	r0, r3
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d226:	3308      	adds	r3, #8
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d236:	330a      	adds	r3, #10
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	fbb2 f1f3 	udiv	r1, r2, r3
 800d23e:	fb03 f301 	mul.w	r3, r3, r1
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	1ac3      	subs	r3, r0, r3
 800d246:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800d248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d901      	bls.n	800d254 <f_read+0x3b4>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d25a:	3308      	adds	r3, #8
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d26a:	330a      	adds	r3, #10
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	fbb2 f1f3 	udiv	r1, r2, r3
 800d272:	fb03 f301 	mul.w	r3, r3, r1
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	4413      	add	r3, r2
 800d27c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d27e:	4619      	mov	r1, r3
 800d280:	6a38      	ldr	r0, [r7, #32]
 800d282:	f7fc fdf9 	bl	8009e78 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d286:	6a3a      	ldr	r2, [r7, #32]
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	4413      	add	r3, r2
 800d28c:	623b      	str	r3, [r7, #32]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d294:	3308      	adds	r3, #8
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	441a      	add	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	441a      	add	r2, r3
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f47f ae31 	bne.w	800cf24 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3730      	adds	r7, #48	; 0x30
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08a      	sub	sp, #40	; 0x28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
 800d2d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7ff fa19 	bl	800c71c <validate>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d2ee:	7dfb      	ldrb	r3, [r7, #23]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <f_write+0x2c>
 800d2f4:	7dfb      	ldrb	r3, [r7, #23]
 800d2f6:	e258      	b.n	800d7aa <f_write+0x4de>
	if (fp->err)							/* Check error */
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2fe:	3307      	adds	r3, #7
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d30c:	3307      	adds	r3, #7
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	e24b      	b.n	800d7aa <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d318:	3306      	adds	r3, #6
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	f003 0302 	and.w	r3, r3, #2
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d324:	2307      	movs	r3, #7
 800d326:	e240      	b.n	800d7aa <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d32e:	3308      	adds	r3, #8
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	441a      	add	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d33c:	3308      	adds	r3, #8
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	f080 8208 	bcs.w	800d756 <f_write+0x48a>
 800d346:	2300      	movs	r3, #0
 800d348:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800d34a:	e204      	b.n	800d756 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d352:	3308      	adds	r3, #8
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d362:	330a      	adds	r3, #10
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	fbb2 f1f3 	udiv	r1, r2, r3
 800d36a:	fb03 f301 	mul.w	r3, r3, r1
 800d36e:	1ad3      	subs	r3, r2, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	f040 818d 	bne.w	800d690 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d37c:	3308      	adds	r3, #8
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d38c:	330a      	adds	r3, #10
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	fbb2 f3f3 	udiv	r3, r2, r3
 800d394:	b2da      	uxtb	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3a2:	3302      	adds	r3, #2
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800d3ae:	7dbb      	ldrb	r3, [r7, #22]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d167      	bne.n	800d484 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ba:	3308      	adds	r3, #8
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d112      	bne.n	800d3e8 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3c8:	3310      	adds	r3, #16
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d129      	bne.n	800d428 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2100      	movs	r1, #0
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fd fbde 	bl	800aba0 <create_chain>
 800d3e4:	6278      	str	r0, [r7, #36]	; 0x24
 800d3e6:	e01f      	b.n	800d428 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00a      	beq.n	800d40c <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4619      	mov	r1, r3
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f7fd fc7d 	bl	800ad02 <clmt_clust>
 800d408:	6278      	str	r0, [r7, #36]	; 0x24
 800d40a:	e00d      	b.n	800d428 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41a:	3314      	adds	r3, #20
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f7fd fbbd 	bl	800aba0 <create_chain>
 800d426:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f000 8198 	beq.w	800d760 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	2b01      	cmp	r3, #1
 800d434:	d107      	bne.n	800d446 <f_write+0x17a>
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d43c:	3307      	adds	r3, #7
 800d43e:	2202      	movs	r2, #2
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	2302      	movs	r3, #2
 800d444:	e1b1      	b.n	800d7aa <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44c:	d107      	bne.n	800d45e <f_write+0x192>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d454:	3307      	adds	r3, #7
 800d456:	2201      	movs	r2, #1
 800d458:	701a      	strb	r2, [r3, #0]
 800d45a:	2301      	movs	r3, #1
 800d45c:	e1a5      	b.n	800d7aa <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d464:	3314      	adds	r3, #20
 800d466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d468:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d470:	3310      	adds	r3, #16
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d105      	bne.n	800d484 <f_write+0x1b8>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d47e:	3310      	adds	r3, #16
 800d480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d482:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d48a:	3306      	adds	r3, #6
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d492:	2b00      	cmp	r3, #0
 800d494:	d028      	beq.n	800d4e8 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	7818      	ldrb	r0, [r3, #0]
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ae:	3318      	adds	r3, #24
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	f7fc fca2 	bl	8009dfc <disk_write>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d007      	beq.n	800d4ce <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c4:	3307      	adds	r3, #7
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	701a      	strb	r2, [r3, #0]
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e16d      	b.n	800d7aa <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4d4:	3306      	adds	r3, #6
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4e4:	3306      	adds	r3, #6
 800d4e6:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f6:	3314      	adds	r3, #20
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	f7fd f85a 	bl	800a5b6 <clust2sect>
 800d502:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d107      	bne.n	800d51a <f_write+0x24e>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d510:	3307      	adds	r3, #7
 800d512:	2202      	movs	r2, #2
 800d514:	701a      	strb	r2, [r3, #0]
 800d516:	2302      	movs	r3, #2
 800d518:	e147      	b.n	800d7aa <f_write+0x4de>
			sect += csect;
 800d51a:	7dbb      	ldrb	r3, [r7, #22]
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	4413      	add	r3, r2
 800d520:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d52e:	330a      	adds	r3, #10
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	fbb3 f3f2 	udiv	r3, r3, r2
 800d53a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d074      	beq.n	800d62c <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d542:	7dba      	ldrb	r2, [r7, #22]
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	441a      	add	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d554:	3302      	adds	r3, #2
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d90b      	bls.n	800d574 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d568:	3302      	adds	r3, #2
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	461a      	mov	r2, r3
 800d56e:	7dbb      	ldrb	r3, [r7, #22]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d580:	3301      	adds	r3, #1
 800d582:	7818      	ldrb	r0, [r3, #0]
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	693a      	ldr	r2, [r7, #16]
 800d588:	69b9      	ldr	r1, [r7, #24]
 800d58a:	f7fc fc37 	bl	8009dfc <disk_write>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d007      	beq.n	800d5a4 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d59a:	3307      	adds	r3, #7
 800d59c:	2201      	movs	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e102      	b.n	800d7aa <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5aa:	3318      	adds	r3, #24
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	69fa      	ldr	r2, [r7, #28]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d92b      	bls.n	800d610 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5c0:	3318      	adds	r3, #24
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	1ad2      	subs	r2, r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5d4:	330a      	adds	r3, #10
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	fb03 f302 	mul.w	r3, r3, r2
 800d5dc:	69ba      	ldr	r2, [r7, #24]
 800d5de:	18d1      	adds	r1, r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ec:	330a      	adds	r3, #10
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	f7fc fc41 	bl	8009e78 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5fc:	3306      	adds	r3, #6
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d604:	b2da      	uxtb	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d60c:	3306      	adds	r3, #6
 800d60e:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d61c:	330a      	adds	r3, #10
 800d61e:	881b      	ldrh	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	fb02 f303 	mul.w	r3, r2, r3
 800d628:	623b      	str	r3, [r7, #32]
				continue;
 800d62a:	e07a      	b.n	800d722 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d632:	3318      	adds	r3, #24
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	693a      	ldr	r2, [r7, #16]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d023      	beq.n	800d684 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d642:	3308      	adds	r3, #8
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d64c:	330c      	adds	r3, #12
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d217      	bcs.n	800d684 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d660:	3301      	adds	r3, #1
 800d662:	7818      	ldrb	r0, [r3, #0]
 800d664:	68f9      	ldr	r1, [r7, #12]
 800d666:	2301      	movs	r3, #1
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	f7fc fba7 	bl	8009dbc <disk_read>
 800d66e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800d670:	2b00      	cmp	r3, #0
 800d672:	d007      	beq.n	800d684 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d67a:	3307      	adds	r3, #7
 800d67c:	2201      	movs	r2, #1
 800d67e:	701a      	strb	r2, [r3, #0]
 800d680:	2301      	movs	r3, #1
 800d682:	e092      	b.n	800d7aa <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d68a:	3318      	adds	r3, #24
 800d68c:	693a      	ldr	r2, [r7, #16]
 800d68e:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d69c:	330a      	adds	r3, #10
 800d69e:	881b      	ldrh	r3, [r3, #0]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b8:	330a      	adds	r3, #10
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800d6c0:	fb03 f301 	mul.w	r3, r3, r1
 800d6c4:	1ad3      	subs	r3, r2, r3
 800d6c6:	1ac3      	subs	r3, r0, r3
 800d6c8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800d6ca:	6a3a      	ldr	r2, [r7, #32]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d901      	bls.n	800d6d6 <f_write+0x40a>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6dc:	3308      	adds	r3, #8
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ec:	330a      	adds	r3, #10
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d6f4:	fb03 f301 	mul.w	r3, r3, r1
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	6a3a      	ldr	r2, [r7, #32]
 800d700:	69b9      	ldr	r1, [r7, #24]
 800d702:	4618      	mov	r0, r3
 800d704:	f7fc fbb8 	bl	8009e78 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d70e:	3306      	adds	r3, #6
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d716:	b2da      	uxtb	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71e:	3306      	adds	r3, #6
 800d720:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d722:	69ba      	ldr	r2, [r7, #24]
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	4413      	add	r3, r2
 800d728:	61bb      	str	r3, [r7, #24]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d730:	3308      	adds	r3, #8
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	441a      	add	r2, r3
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d73e:	3308      	adds	r3, #8
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	441a      	add	r2, r3
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	6a3b      	ldr	r3, [r7, #32]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f47f adf7 	bne.w	800d34c <f_write+0x80>
 800d75e:	e000      	b.n	800d762 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d760:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d768:	3308      	adds	r3, #8
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d772:	330c      	adds	r3, #12
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	429a      	cmp	r2, r3
 800d778:	d909      	bls.n	800d78e <f_write+0x4c2>
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d780:	3308      	adds	r3, #8
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d78a:	330c      	adds	r3, #12
 800d78c:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d794:	3306      	adds	r3, #6
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	f043 0320 	orr.w	r3, r3, #32
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7a4:	3306      	adds	r3, #6
 800d7a6:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3728      	adds	r7, #40	; 0x28
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b086      	sub	sp, #24
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7fe ffae 	bl	800c71c <validate>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7c4:	7dfb      	ldrb	r3, [r7, #23]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f040 80cc 	bne.w	800d964 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7d2:	3306      	adds	r3, #6
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f000 80c2 	beq.w	800d964 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7e6:	3306      	adds	r3, #6
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d022      	beq.n	800d838 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7fe:	3301      	adds	r3, #1
 800d800:	7818      	ldrb	r0, [r3, #0]
 800d802:	6879      	ldr	r1, [r7, #4]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d80a:	3318      	adds	r3, #24
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	2301      	movs	r3, #1
 800d810:	f7fc faf4 	bl	8009dfc <disk_write>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d81a:	2301      	movs	r3, #1
 800d81c:	e0a3      	b.n	800d966 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d824:	3306      	adds	r3, #6
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d834:	3306      	adds	r3, #6
 800d836:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d846:	331c      	adds	r3, #28
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4619      	mov	r1, r3
 800d84c:	4610      	mov	r0, r2
 800d84e:	f7fc fdaf 	bl	800a3b0 <move_window>
 800d852:	4603      	mov	r3, r0
 800d854:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d856:	7dfb      	ldrb	r3, [r7, #23]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f040 8083 	bne.w	800d964 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	330b      	adds	r3, #11
 800d86c:	781a      	ldrb	r2, [r3, #0]
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	330b      	adds	r3, #11
 800d872:	f042 0220 	orr.w	r2, r2, #32
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d880:	330c      	adds	r3, #12
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	331c      	adds	r3, #28
 800d888:	b2d2      	uxtb	r2, r2
 800d88a:	701a      	strb	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d892:	330c      	adds	r3, #12
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	b29b      	uxth	r3, r3
 800d898:	0a1b      	lsrs	r3, r3, #8
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	331d      	adds	r3, #29
 800d8a0:	b2d2      	uxtb	r2, r2
 800d8a2:	701a      	strb	r2, [r3, #0]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8aa:	330c      	adds	r3, #12
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	0c1a      	lsrs	r2, r3, #16
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	331e      	adds	r3, #30
 800d8b4:	b2d2      	uxtb	r2, r2
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8be:	330c      	adds	r3, #12
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	0e1a      	lsrs	r2, r3, #24
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	331f      	adds	r3, #31
 800d8c8:	b2d2      	uxtb	r2, r2
 800d8ca:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8d2:	3310      	adds	r3, #16
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6938      	ldr	r0, [r7, #16]
 800d8da:	f7fd fd13 	bl	800b304 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d8de:	f7fc f9cb 	bl	8009c78 <get_fattime>
 800d8e2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	3316      	adds	r3, #22
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	b2d2      	uxtb	r2, r2
 800d8ec:	701a      	strb	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	0a1b      	lsrs	r3, r3, #8
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	3317      	adds	r3, #23
 800d8fa:	b2d2      	uxtb	r2, r2
 800d8fc:	701a      	strb	r2, [r3, #0]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	0c1a      	lsrs	r2, r3, #16
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	3318      	adds	r3, #24
 800d906:	b2d2      	uxtb	r2, r2
 800d908:	701a      	strb	r2, [r3, #0]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	0e1a      	lsrs	r2, r3, #24
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	3319      	adds	r3, #25
 800d912:	b2d2      	uxtb	r2, r2
 800d914:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	3312      	adds	r3, #18
 800d91a:	2200      	movs	r2, #0
 800d91c:	701a      	strb	r2, [r3, #0]
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	3313      	adds	r3, #19
 800d922:	2200      	movs	r2, #0
 800d924:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d92c:	3306      	adds	r3, #6
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	f023 0320 	bic.w	r3, r3, #32
 800d934:	b2da      	uxtb	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d93c:	3306      	adds	r3, #6
 800d93e:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d94c:	3304      	adds	r3, #4
 800d94e:	2201      	movs	r2, #1
 800d950:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fc fd5c 	bl	800a418 <sync_fs>
 800d960:	4603      	mov	r3, r0
 800d962:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d964:	7dfb      	ldrb	r3, [r7, #23]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3718      	adds	r7, #24
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b084      	sub	sp, #16
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7ff ff1b 	bl	800d7b2 <f_sync>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d119      	bne.n	800d9ba <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7fe fec8 	bl	800c71c <validate>
 800d98c:	4603      	mov	r3, r0
 800d98e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d990:	7bfb      	ldrb	r3, [r7, #15]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d111      	bne.n	800d9ba <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d99c:	3308      	adds	r3, #8
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fc fc3d 	bl	800a220 <dec_lock>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d104      	bne.n	800d9ba <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b090      	sub	sp, #64	; 0x40
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7fe fea4 	bl	800c71c <validate>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d9da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d002      	beq.n	800d9e8 <f_lseek+0x24>
 800d9e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9e6:	e31d      	b.n	800e024 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9ee:	3307      	adds	r3, #7
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d005      	beq.n	800da02 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9fc:	3307      	adds	r3, #7
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	e310      	b.n	800e024 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da08:	3304      	adds	r3, #4
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f000 813c 	beq.w	800dc8a <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d172      	bne.n	800db00 <f_lseek+0x13c>
			tbl = fp->cltbl;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da20:	3304      	adds	r3, #4
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	1d1a      	adds	r2, r3, #4
 800da2a:	627a      	str	r2, [r7, #36]	; 0x24
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	617b      	str	r3, [r7, #20]
 800da30:	2302      	movs	r3, #2
 800da32:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da3a:	3310      	adds	r3, #16
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800da40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da42:	2b00      	cmp	r3, #0
 800da44:	d049      	beq.n	800dada <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	613b      	str	r3, [r7, #16]
 800da4a:	2300      	movs	r3, #0
 800da4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da50:	3302      	adds	r3, #2
 800da52:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	3301      	adds	r3, #1
 800da5c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fc fdcc 	bl	800a606 <get_fat>
 800da6e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800da70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da72:	2b01      	cmp	r3, #1
 800da74:	d807      	bhi.n	800da86 <f_lseek+0xc2>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da7c:	3307      	adds	r3, #7
 800da7e:	2202      	movs	r2, #2
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	2302      	movs	r3, #2
 800da84:	e2ce      	b.n	800e024 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8c:	d107      	bne.n	800da9e <f_lseek+0xda>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da94:	3307      	adds	r3, #7
 800da96:	2201      	movs	r2, #1
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	2301      	movs	r3, #1
 800da9c:	e2c2      	b.n	800e024 <f_lseek+0x660>
					} while (cl == pcl + 1);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3301      	adds	r3, #1
 800daa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d0d5      	beq.n	800da54 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800daa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	429a      	cmp	r2, r3
 800daae:	d809      	bhi.n	800dac4 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	1d1a      	adds	r2, r3, #4
 800dab4:	627a      	str	r2, [r7, #36]	; 0x24
 800dab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	1d1a      	adds	r2, r3, #4
 800dabe:	627a      	str	r2, [r7, #36]	; 0x24
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dad0:	3314      	adds	r3, #20
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d3b5      	bcc.n	800da46 <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dae0:	3304      	adds	r3, #4
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dae6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800dae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	429a      	cmp	r2, r3
 800daee:	d803      	bhi.n	800daf8 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	2200      	movs	r2, #0
 800daf4:	601a      	str	r2, [r3, #0]
 800daf6:	e293      	b.n	800e020 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800daf8:	2311      	movs	r3, #17
 800dafa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dafe:	e28f      	b.n	800e020 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db06:	330c      	adds	r3, #12
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d905      	bls.n	800db1c <f_lseek+0x158>
				ofs = fp->fsize;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db16:	330c      	adds	r3, #12
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db22:	3308      	adds	r3, #8
 800db24:	683a      	ldr	r2, [r7, #0]
 800db26:	601a      	str	r2, [r3, #0]
			if (ofs) {
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 8278 	beq.w	800e020 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	3b01      	subs	r3, #1
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7fd f8e3 	bl	800ad02 <clmt_clust>
 800db3c:	4602      	mov	r2, r0
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db44:	3314      	adds	r3, #20
 800db46:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db56:	3314      	adds	r3, #20
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4619      	mov	r1, r3
 800db5c:	4610      	mov	r0, r2
 800db5e:	f7fc fd2a 	bl	800a5b6 <clust2sect>
 800db62:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d107      	bne.n	800db7a <f_lseek+0x1b6>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db70:	3307      	adds	r3, #7
 800db72:	2202      	movs	r2, #2
 800db74:	701a      	strb	r2, [r3, #0]
 800db76:	2302      	movs	r3, #2
 800db78:	e254      	b.n	800e024 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	1e5a      	subs	r2, r3, #1
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db8a:	330a      	adds	r3, #10
 800db8c:	881b      	ldrh	r3, [r3, #0]
 800db8e:	fbb2 f2f3 	udiv	r2, r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db9e:	3302      	adds	r3, #2
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	3b01      	subs	r3, #1
 800dba4:	4013      	ands	r3, r2
 800dba6:	69ba      	ldr	r2, [r7, #24]
 800dba8:	4413      	add	r3, r2
 800dbaa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbb2:	3308      	adds	r3, #8
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbc2:	330a      	adds	r3, #10
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	fbb2 f1f3 	udiv	r1, r2, r3
 800dbca:	fb03 f301 	mul.w	r3, r3, r1
 800dbce:	1ad3      	subs	r3, r2, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 8225 	beq.w	800e020 <f_lseek+0x65c>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbdc:	3318      	adds	r3, #24
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	69ba      	ldr	r2, [r7, #24]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	f000 821c 	beq.w	800e020 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbee:	3306      	adds	r3, #6
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d028      	beq.n	800dc4c <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc06:	3301      	adds	r3, #1
 800dc08:	7818      	ldrb	r0, [r3, #0]
 800dc0a:	6879      	ldr	r1, [r7, #4]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc12:	3318      	adds	r3, #24
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	2301      	movs	r3, #1
 800dc18:	f7fc f8f0 	bl	8009dfc <disk_write>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d007      	beq.n	800dc32 <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc28:	3307      	adds	r3, #7
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	701a      	strb	r2, [r3, #0]
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e1f8      	b.n	800e024 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc38:	3306      	adds	r3, #6
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc48:	3306      	adds	r3, #6
 800dc4a:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc58:	3301      	adds	r3, #1
 800dc5a:	7818      	ldrb	r0, [r3, #0]
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	2301      	movs	r3, #1
 800dc60:	69ba      	ldr	r2, [r7, #24]
 800dc62:	f7fc f8ab 	bl	8009dbc <disk_read>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d007      	beq.n	800dc7c <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc72:	3307      	adds	r3, #7
 800dc74:	2201      	movs	r2, #1
 800dc76:	701a      	strb	r2, [r3, #0]
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e1d3      	b.n	800e024 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc82:	3318      	adds	r3, #24
 800dc84:	69ba      	ldr	r2, [r7, #24]
 800dc86:	601a      	str	r2, [r3, #0]
 800dc88:	e1ca      	b.n	800e020 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc90:	330c      	adds	r3, #12
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	683a      	ldr	r2, [r7, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d90e      	bls.n	800dcb8 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dca0:	3306      	adds	r3, #6
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 0302 	and.w	r3, r3, #2
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d105      	bne.n	800dcb8 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcb2:	330c      	adds	r3, #12
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	637b      	str	r3, [r7, #52]	; 0x34
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcce:	3308      	adds	r3, #8
 800dcd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcd2:	601a      	str	r2, [r3, #0]
		if (ofs) {
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 8113 	beq.w	800df02 <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dce8:	3302      	adds	r3, #2
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	461a      	mov	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcfa:	330a      	adds	r3, #10
 800dcfc:	881b      	ldrh	r3, [r3, #0]
 800dcfe:	fb03 f302 	mul.w	r3, r3, r2
 800dd02:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dd04:	6a3b      	ldr	r3, [r7, #32]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d024      	beq.n	800dd54 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	1e5a      	subs	r2, r3, #1
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd14:	6a3b      	ldr	r3, [r7, #32]
 800dd16:	1e59      	subs	r1, r3, #1
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d318      	bcc.n	800dd54 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800dd22:	6a3b      	ldr	r3, [r7, #32]
 800dd24:	1e5a      	subs	r2, r3, #1
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	425b      	negs	r3, r3
 800dd2a:	401a      	ands	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd32:	3308      	adds	r3, #8
 800dd34:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd3c:	3308      	adds	r3, #8
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	683a      	ldr	r2, [r7, #0]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd4c:	3314      	adds	r3, #20
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd52:	e034      	b.n	800ddbe <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd5a:	3310      	adds	r3, #16
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d125      	bne.n	800ddb2 <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2100      	movs	r1, #0
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fc ff15 	bl	800aba0 <create_chain>
 800dd76:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d107      	bne.n	800dd8e <f_lseek+0x3ca>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd84:	3307      	adds	r3, #7
 800dd86:	2202      	movs	r2, #2
 800dd88:	701a      	strb	r2, [r3, #0]
 800dd8a:	2302      	movs	r3, #2
 800dd8c:	e14a      	b.n	800e024 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800dd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd94:	d107      	bne.n	800dda6 <f_lseek+0x3e2>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd9c:	3307      	adds	r3, #7
 800dd9e:	2201      	movs	r2, #1
 800dda0:	701a      	strb	r2, [r3, #0]
 800dda2:	2301      	movs	r3, #1
 800dda4:	e13e      	b.n	800e024 <f_lseek+0x660>
					fp->sclust = clst;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddac:	3310      	adds	r3, #16
 800ddae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddb0:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb8:	3314      	adds	r3, #20
 800ddba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddbc:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 809e 	beq.w	800df02 <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 800ddc6:	e058      	b.n	800de7a <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddce:	3306      	adds	r3, #6
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	f003 0302 	and.w	r3, r3, #2
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00e      	beq.n	800ddf8 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fc fedb 	bl	800aba0 <create_chain>
 800ddea:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800ddec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10b      	bne.n	800de0a <f_lseek+0x446>
							ofs = bcs; break;
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	603b      	str	r3, [r7, #0]
 800ddf6:	e044      	b.n	800de82 <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de02:	4618      	mov	r0, r3
 800de04:	f7fc fbff 	bl	800a606 <get_fat>
 800de08:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de10:	d107      	bne.n	800de22 <f_lseek+0x45e>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de18:	3307      	adds	r3, #7
 800de1a:	2201      	movs	r2, #1
 800de1c:	701a      	strb	r2, [r3, #0]
 800de1e:	2301      	movs	r3, #1
 800de20:	e100      	b.n	800e024 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800de22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de24:	2b01      	cmp	r3, #1
 800de26:	d90a      	bls.n	800de3e <f_lseek+0x47a>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de34:	3314      	adds	r3, #20
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d307      	bcc.n	800de4e <f_lseek+0x48a>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de44:	3307      	adds	r3, #7
 800de46:	2202      	movs	r2, #2
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	2302      	movs	r3, #2
 800de4c:	e0ea      	b.n	800e024 <f_lseek+0x660>
					fp->clust = clst;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de54:	3314      	adds	r3, #20
 800de56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de58:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de60:	3308      	adds	r3, #8
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	441a      	add	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de6e:	3308      	adds	r3, #8
 800de70:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d8a2      	bhi.n	800ddc8 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de88:	3308      	adds	r3, #8
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	441a      	add	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de96:	3308      	adds	r3, #8
 800de98:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dea6:	330a      	adds	r3, #10
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	461a      	mov	r2, r3
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	fbb3 f1f2 	udiv	r1, r3, r2
 800deb2:	fb02 f201 	mul.w	r2, r2, r1
 800deb6:	1a9b      	subs	r3, r3, r2
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d022      	beq.n	800df02 <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fc fb75 	bl	800a5b6 <clust2sect>
 800decc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800dece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d107      	bne.n	800dee4 <f_lseek+0x520>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deda:	3307      	adds	r3, #7
 800dedc:	2202      	movs	r2, #2
 800dede:	701a      	strb	r2, [r3, #0]
 800dee0:	2302      	movs	r3, #2
 800dee2:	e09f      	b.n	800e024 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800def0:	330a      	adds	r3, #10
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	461a      	mov	r2, r3
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	fbb3 f3f2 	udiv	r3, r3, r2
 800defc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800defe:	4413      	add	r3, r2
 800df00:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df08:	3308      	adds	r3, #8
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df18:	330a      	adds	r3, #10
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	fbb2 f1f3 	udiv	r1, r2, r3
 800df20:	fb03 f301 	mul.w	r3, r3, r1
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	2b00      	cmp	r3, #0
 800df28:	d057      	beq.n	800dfda <f_lseek+0x616>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df30:	3318      	adds	r3, #24
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df36:	429a      	cmp	r2, r3
 800df38:	d04f      	beq.n	800dfda <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df40:	3306      	adds	r3, #6
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d028      	beq.n	800df9e <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df58:	3301      	adds	r3, #1
 800df5a:	7818      	ldrb	r0, [r3, #0]
 800df5c:	6879      	ldr	r1, [r7, #4]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df64:	3318      	adds	r3, #24
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	2301      	movs	r3, #1
 800df6a:	f7fb ff47 	bl	8009dfc <disk_write>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d007      	beq.n	800df84 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df7a:	3307      	adds	r3, #7
 800df7c:	2201      	movs	r2, #1
 800df7e:	701a      	strb	r2, [r3, #0]
 800df80:	2301      	movs	r3, #1
 800df82:	e04f      	b.n	800e024 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df8a:	3306      	adds	r3, #6
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df92:	b2da      	uxtb	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df9a:	3306      	adds	r3, #6
 800df9c:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfaa:	3301      	adds	r3, #1
 800dfac:	7818      	ldrb	r0, [r3, #0]
 800dfae:	6879      	ldr	r1, [r7, #4]
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfb4:	f7fb ff02 	bl	8009dbc <disk_read>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d007      	beq.n	800dfce <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfc4:	3307      	adds	r3, #7
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e02a      	b.n	800e024 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfd4:	3318      	adds	r3, #24
 800dfd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfd8:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfea:	330c      	adds	r3, #12
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d916      	bls.n	800e020 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dff8:	3308      	adds	r3, #8
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e002:	330c      	adds	r3, #12
 800e004:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e00c:	3306      	adds	r3, #6
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	f043 0320 	orr.w	r3, r3, #32
 800e014:	b2da      	uxtb	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e01c:	3306      	adds	r3, #6
 800e01e:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800e020:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e024:	4618      	mov	r0, r3
 800e026:	3740      	adds	r7, #64	; 0x40
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08e      	sub	sp, #56	; 0x38
 800e030:	af00      	add	r7, sp, #0
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800e038:	f107 030c 	add.w	r3, r7, #12
 800e03c:	2200      	movs	r2, #0
 800e03e:	4619      	mov	r1, r3
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7fe f80f 	bl	800c064 <find_volume>
 800e046:	4603      	mov	r3, r0
 800e048:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800e052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e056:	2b00      	cmp	r3, #0
 800e058:	f040 80c4 	bne.w	800e1e4 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e062:	3310      	adds	r3, #16
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e06c:	3314      	adds	r3, #20
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	3b02      	subs	r3, #2
 800e072:	429a      	cmp	r2, r3
 800e074:	d807      	bhi.n	800e086 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800e076:	69fb      	ldr	r3, [r7, #28]
 800e078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e07c:	3310      	adds	r3, #16
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	601a      	str	r2, [r3, #0]
 800e084:	e0ae      	b.n	800e1e4 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800e090:	2300      	movs	r3, #0
 800e092:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800e094:	7efb      	ldrb	r3, [r7, #27]
 800e096:	2b01      	cmp	r3, #1
 800e098:	d127      	bne.n	800e0ea <f_getfree+0xbe>
				clst = 2;
 800e09a:	2302      	movs	r3, #2
 800e09c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800e09e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0a0:	69f8      	ldr	r0, [r7, #28]
 800e0a2:	f7fc fab0 	bl	800a606 <get_fat>
 800e0a6:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ae:	d103      	bne.n	800e0b8 <f_getfree+0x8c>
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0b6:	e07f      	b.n	800e1b8 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d103      	bne.n	800e0c6 <f_getfree+0x9a>
 800e0be:	2302      	movs	r3, #2
 800e0c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0c4:	e078      	b.n	800e1b8 <f_getfree+0x18c>
					if (stat == 0) n++;
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d102      	bne.n	800e0d2 <f_getfree+0xa6>
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800e0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0de:	3314      	adds	r3, #20
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d3da      	bcc.n	800e09e <f_getfree+0x72>
 800e0e8:	e066      	b.n	800e1b8 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f0:	3314      	adds	r3, #20
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800e100:	2300      	movs	r3, #0
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
 800e104:	2300      	movs	r3, #0
 800e106:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d115      	bne.n	800e13a <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800e10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e110:	1c5a      	adds	r2, r3, #1
 800e112:	62ba      	str	r2, [r7, #40]	; 0x28
 800e114:	4619      	mov	r1, r3
 800e116:	69f8      	ldr	r0, [r7, #28]
 800e118:	f7fc f94a 	bl	800a3b0 <move_window>
 800e11c:	4603      	mov	r3, r0
 800e11e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800e122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e126:	2b00      	cmp	r3, #0
 800e128:	d145      	bne.n	800e1b6 <f_getfree+0x18a>
						p = fs->win.d8;
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e134:	330a      	adds	r3, #10
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800e13a:	7efb      	ldrb	r3, [r7, #27]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d115      	bne.n	800e16c <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	3301      	adds	r3, #1
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	021b      	lsls	r3, r3, #8
 800e148:	b21a      	sxth	r2, r3
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	b21b      	sxth	r3, r3
 800e150:	4313      	orrs	r3, r2
 800e152:	b21b      	sxth	r3, r3
 800e154:	2b00      	cmp	r3, #0
 800e156:	d102      	bne.n	800e15e <f_getfree+0x132>
 800e158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15a:	3301      	adds	r3, #1
 800e15c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800e15e:	6a3b      	ldr	r3, [r7, #32]
 800e160:	3302      	adds	r3, #2
 800e162:	623b      	str	r3, [r7, #32]
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	3b02      	subs	r3, #2
 800e168:	627b      	str	r3, [r7, #36]	; 0x24
 800e16a:	e01d      	b.n	800e1a8 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800e16c:	6a3b      	ldr	r3, [r7, #32]
 800e16e:	3303      	adds	r3, #3
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	061a      	lsls	r2, r3, #24
 800e174:	6a3b      	ldr	r3, [r7, #32]
 800e176:	3302      	adds	r3, #2
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	041b      	lsls	r3, r3, #16
 800e17c:	4313      	orrs	r3, r2
 800e17e:	6a3a      	ldr	r2, [r7, #32]
 800e180:	3201      	adds	r2, #1
 800e182:	7812      	ldrb	r2, [r2, #0]
 800e184:	0212      	lsls	r2, r2, #8
 800e186:	4313      	orrs	r3, r2
 800e188:	6a3a      	ldr	r2, [r7, #32]
 800e18a:	7812      	ldrb	r2, [r2, #0]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e192:	2b00      	cmp	r3, #0
 800e194:	d102      	bne.n	800e19c <f_getfree+0x170>
 800e196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e198:	3301      	adds	r3, #1
 800e19a:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	3304      	adds	r3, #4
 800e1a0:	623b      	str	r3, [r7, #32]
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a4:	3b04      	subs	r3, #4
 800e1a6:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1a9      	bne.n	800e108 <f_getfree+0xdc>
 800e1b4:	e000      	b.n	800e1b8 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800e1b6:	bf00      	nop
			}
			fs->free_clust = n;
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1be:	3310      	adds	r3, #16
 800e1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c2:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ca:	3305      	adds	r3, #5
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	f043 0301 	orr.w	r3, r3, #1
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1da:	3305      	adds	r3, #5
 800e1dc:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e2:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800e1e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3738      	adds	r7, #56	; 0x38
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b088      	sub	sp, #32
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
	int n = 0;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e204:	e01b      	b.n	800e23e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800e206:	f107 0310 	add.w	r3, r7, #16
 800e20a:	f107 0114 	add.w	r1, r7, #20
 800e20e:	2201      	movs	r2, #1
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7fe fe45 	bl	800cea0 <f_read>
		if (rc != 1) break;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d116      	bne.n	800e24a <f_gets+0x5a>
		c = s[0];
 800e21c:	7d3b      	ldrb	r3, [r7, #20]
 800e21e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800e220:	7dfb      	ldrb	r3, [r7, #23]
 800e222:	2b0d      	cmp	r3, #13
 800e224:	d100      	bne.n	800e228 <f_gets+0x38>
 800e226:	e00a      	b.n	800e23e <f_gets+0x4e>
		*p++ = c;
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	61ba      	str	r2, [r7, #24]
 800e22e:	7dfa      	ldrb	r2, [r7, #23]
 800e230:	701a      	strb	r2, [r3, #0]
		n++;
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	3301      	adds	r3, #1
 800e236:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800e238:	7dfb      	ldrb	r3, [r7, #23]
 800e23a:	2b0a      	cmp	r3, #10
 800e23c:	d007      	beq.n	800e24e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	3b01      	subs	r3, #1
 800e242:	69fa      	ldr	r2, [r7, #28]
 800e244:	429a      	cmp	r2, r3
 800e246:	dbde      	blt.n	800e206 <f_gets+0x16>
 800e248:	e002      	b.n	800e250 <f_gets+0x60>
		if (rc != 1) break;
 800e24a:	bf00      	nop
 800e24c:	e000      	b.n	800e250 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800e24e:	bf00      	nop
	}
	*p = 0;
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	2200      	movs	r2, #0
 800e254:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <f_gets+0x70>
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	e000      	b.n	800e262 <f_gets+0x72>
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3720      	adds	r7, #32
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b084      	sub	sp, #16
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	460b      	mov	r3, r1
 800e274:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800e276:	78fb      	ldrb	r3, [r7, #3]
 800e278:	2b0a      	cmp	r3, #10
 800e27a:	d103      	bne.n	800e284 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e27c:	210d      	movs	r1, #13
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff fff3 	bl	800e26a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	db25      	blt.n	800e2dc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	60fa      	str	r2, [r7, #12]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	4413      	add	r3, r2
 800e29a:	78fa      	ldrb	r2, [r7, #3]
 800e29c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2b3c      	cmp	r3, #60	; 0x3c
 800e2a2:	dd12      	ble.n	800e2ca <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6818      	ldr	r0, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f103 010c 	add.w	r1, r3, #12
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	f107 0308 	add.w	r3, r7, #8
 800e2b4:	f7ff f80a 	bl	800d2cc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d101      	bne.n	800e2c4 <putc_bfd+0x5a>
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	e001      	b.n	800e2c8 <putc_bfd+0x5e>
 800e2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	1c5a      	adds	r2, r3, #1
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	609a      	str	r2, [r3, #8]
 800e2da:	e000      	b.n	800e2de <putc_bfd+0x74>
	if (i < 0) return;
 800e2dc:	bf00      	nop
}
 800e2de:	3710      	adds	r7, #16
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800e2e4:	b590      	push	{r4, r7, lr}
 800e2e6:	b097      	sub	sp, #92	; 0x5c
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	613b      	str	r3, [r7, #16]
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800e2fa:	e009      	b.n	800e310 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	1c5a      	adds	r2, r3, #1
 800e300:	607a      	str	r2, [r7, #4]
 800e302:	781a      	ldrb	r2, [r3, #0]
 800e304:	f107 030c 	add.w	r3, r7, #12
 800e308:	4611      	mov	r1, r2
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7ff ffad 	bl	800e26a <putc_bfd>
	while (*str)			/* Put the string */
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1f1      	bne.n	800e2fc <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	db15      	blt.n	800e34a <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	461c      	mov	r4, r3
 800e324:	f107 0208 	add.w	r2, r7, #8
 800e328:	f107 030c 	add.w	r3, r7, #12
 800e32c:	f103 010c 	add.w	r1, r3, #12
 800e330:	4613      	mov	r3, r2
 800e332:	4622      	mov	r2, r4
 800e334:	f7fe ffca 	bl	800d2cc <f_write>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d105      	bne.n	800e34a <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	4293      	cmp	r3, r2
 800e344:	d101      	bne.n	800e34a <f_puts+0x66>
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	e001      	b.n	800e34e <f_puts+0x6a>
	return EOF;
 800e34a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e34e:	4618      	mov	r0, r3
 800e350:	375c      	adds	r7, #92	; 0x5c
 800e352:	46bd      	mov	sp, r7
 800e354:	bd90      	pop	{r4, r7, pc}
	...

0800e358 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e358:	b480      	push	{r7}
 800e35a:	b087      	sub	sp, #28
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	4613      	mov	r3, r2
 800e364:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e366:	2301      	movs	r3, #1
 800e368:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e36a:	2300      	movs	r3, #0
 800e36c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800e36e:	4b1f      	ldr	r3, [pc, #124]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e370:	7a5b      	ldrb	r3, [r3, #9]
 800e372:	b2db      	uxtb	r3, r3
 800e374:	2b01      	cmp	r3, #1
 800e376:	d831      	bhi.n	800e3dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e378:	4b1c      	ldr	r3, [pc, #112]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e37a:	7a5b      	ldrb	r3, [r3, #9]
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	461a      	mov	r2, r3
 800e380:	4b1a      	ldr	r3, [pc, #104]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e382:	2100      	movs	r1, #0
 800e384:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800e386:	4b19      	ldr	r3, [pc, #100]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e388:	7a5b      	ldrb	r3, [r3, #9]
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	4a17      	ldr	r2, [pc, #92]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	4413      	add	r3, r2
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800e396:	4b15      	ldr	r3, [pc, #84]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e398:	7a5b      	ldrb	r3, [r3, #9]
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	461a      	mov	r2, r3
 800e39e:	4b13      	ldr	r3, [pc, #76]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e3a0:	4413      	add	r3, r2
 800e3a2:	79fa      	ldrb	r2, [r7, #7]
 800e3a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e3a6:	4b11      	ldr	r3, [pc, #68]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e3a8:	7a5b      	ldrb	r3, [r3, #9]
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	b2d1      	uxtb	r1, r2
 800e3b0:	4a0e      	ldr	r2, [pc, #56]	; (800e3ec <FATFS_LinkDriverEx+0x94>)
 800e3b2:	7251      	strb	r1, [r2, #9]
 800e3b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e3b6:	7dbb      	ldrb	r3, [r7, #22]
 800e3b8:	3330      	adds	r3, #48	; 0x30
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	223a      	movs	r2, #58	; 0x3a
 800e3c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	3302      	adds	r3, #2
 800e3cc:	222f      	movs	r2, #47	; 0x2f
 800e3ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	3303      	adds	r3, #3
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800e3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	371c      	adds	r7, #28
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	20000454 	.word	0x20000454

0800e3f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7ff ffaa 	bl	800e358 <FATFS_LinkDriverEx>
 800e404:	4603      	mov	r3, r0
}
 800e406:	4618      	mov	r0, r3
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
	...

0800e410 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800e410:	b480      	push	{r7}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	4603      	mov	r3, r0
 800e418:	6039      	str	r1, [r7, #0]
 800e41a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e41c:	88fb      	ldrh	r3, [r7, #6]
 800e41e:	2b7f      	cmp	r3, #127	; 0x7f
 800e420:	d802      	bhi.n	800e428 <ff_convert+0x18>
		c = chr;
 800e422:	88fb      	ldrh	r3, [r7, #6]
 800e424:	81fb      	strh	r3, [r7, #14]
 800e426:	e025      	b.n	800e474 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00b      	beq.n	800e446 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e42e:	88fb      	ldrh	r3, [r7, #6]
 800e430:	2bff      	cmp	r3, #255	; 0xff
 800e432:	d805      	bhi.n	800e440 <ff_convert+0x30>
 800e434:	88fb      	ldrh	r3, [r7, #6]
 800e436:	3b80      	subs	r3, #128	; 0x80
 800e438:	4a12      	ldr	r2, [pc, #72]	; (800e484 <ff_convert+0x74>)
 800e43a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e43e:	e000      	b.n	800e442 <ff_convert+0x32>
 800e440:	2300      	movs	r3, #0
 800e442:	81fb      	strh	r3, [r7, #14]
 800e444:	e016      	b.n	800e474 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800e446:	2300      	movs	r3, #0
 800e448:	81fb      	strh	r3, [r7, #14]
 800e44a:	e009      	b.n	800e460 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e44c:	89fb      	ldrh	r3, [r7, #14]
 800e44e:	4a0d      	ldr	r2, [pc, #52]	; (800e484 <ff_convert+0x74>)
 800e450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e454:	88fa      	ldrh	r2, [r7, #6]
 800e456:	429a      	cmp	r2, r3
 800e458:	d006      	beq.n	800e468 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e45a:	89fb      	ldrh	r3, [r7, #14]
 800e45c:	3301      	adds	r3, #1
 800e45e:	81fb      	strh	r3, [r7, #14]
 800e460:	89fb      	ldrh	r3, [r7, #14]
 800e462:	2b7f      	cmp	r3, #127	; 0x7f
 800e464:	d9f2      	bls.n	800e44c <ff_convert+0x3c>
 800e466:	e000      	b.n	800e46a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e468:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e46a:	89fb      	ldrh	r3, [r7, #14]
 800e46c:	3380      	adds	r3, #128	; 0x80
 800e46e:	b29b      	uxth	r3, r3
 800e470:	b2db      	uxtb	r3, r3
 800e472:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e474:	89fb      	ldrh	r3, [r7, #14]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3714      	adds	r7, #20
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop
 800e484:	08012608 	.word	0x08012608

0800e488 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800e492:	2300      	movs	r3, #0
 800e494:	60fb      	str	r3, [r7, #12]
 800e496:	e002      	b.n	800e49e <ff_wtoupper+0x16>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3301      	adds	r3, #1
 800e49c:	60fb      	str	r3, [r7, #12]
 800e49e:	4a0f      	ldr	r2, [pc, #60]	; (800e4dc <ff_wtoupper+0x54>)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d006      	beq.n	800e4b8 <ff_wtoupper+0x30>
 800e4aa:	4a0c      	ldr	r2, [pc, #48]	; (800e4dc <ff_wtoupper+0x54>)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4b2:	88fa      	ldrh	r2, [r7, #6]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d1ef      	bne.n	800e498 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800e4b8:	4a08      	ldr	r2, [pc, #32]	; (800e4dc <ff_wtoupper+0x54>)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d004      	beq.n	800e4ce <ff_wtoupper+0x46>
 800e4c4:	4a06      	ldr	r2, [pc, #24]	; (800e4e0 <ff_wtoupper+0x58>)
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4cc:	e000      	b.n	800e4d0 <ff_wtoupper+0x48>
 800e4ce:	88fb      	ldrh	r3, [r7, #6]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3714      	adds	r7, #20
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr
 800e4dc:	08012708 	.word	0x08012708
 800e4e0:	080128e8 	.word	0x080128e8
 800e4e4:	00000000 	.word	0x00000000

0800e4e8 <log>:
 800e4e8:	b538      	push	{r3, r4, r5, lr}
 800e4ea:	ed2d 8b02 	vpush	{d8}
 800e4ee:	ec55 4b10 	vmov	r4, r5, d0
 800e4f2:	f000 f841 	bl	800e578 <__ieee754_log>
 800e4f6:	4b1e      	ldr	r3, [pc, #120]	; (800e570 <log+0x88>)
 800e4f8:	eeb0 8a40 	vmov.f32	s16, s0
 800e4fc:	eef0 8a60 	vmov.f32	s17, s1
 800e500:	f993 3000 	ldrsb.w	r3, [r3]
 800e504:	3301      	adds	r3, #1
 800e506:	d01a      	beq.n	800e53e <log+0x56>
 800e508:	4622      	mov	r2, r4
 800e50a:	462b      	mov	r3, r5
 800e50c:	4620      	mov	r0, r4
 800e50e:	4629      	mov	r1, r5
 800e510:	f7f2 fb0c 	bl	8000b2c <__aeabi_dcmpun>
 800e514:	b998      	cbnz	r0, 800e53e <log+0x56>
 800e516:	2200      	movs	r2, #0
 800e518:	2300      	movs	r3, #0
 800e51a:	4620      	mov	r0, r4
 800e51c:	4629      	mov	r1, r5
 800e51e:	f7f2 fafb 	bl	8000b18 <__aeabi_dcmpgt>
 800e522:	b960      	cbnz	r0, 800e53e <log+0x56>
 800e524:	2200      	movs	r2, #0
 800e526:	2300      	movs	r3, #0
 800e528:	4620      	mov	r0, r4
 800e52a:	4629      	mov	r1, r5
 800e52c:	f7f2 facc 	bl	8000ac8 <__aeabi_dcmpeq>
 800e530:	b160      	cbz	r0, 800e54c <log+0x64>
 800e532:	f000 f9e5 	bl	800e900 <__errno>
 800e536:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800e568 <log+0x80>
 800e53a:	2322      	movs	r3, #34	; 0x22
 800e53c:	6003      	str	r3, [r0, #0]
 800e53e:	eeb0 0a48 	vmov.f32	s0, s16
 800e542:	eef0 0a68 	vmov.f32	s1, s17
 800e546:	ecbd 8b02 	vpop	{d8}
 800e54a:	bd38      	pop	{r3, r4, r5, pc}
 800e54c:	f000 f9d8 	bl	800e900 <__errno>
 800e550:	ecbd 8b02 	vpop	{d8}
 800e554:	2321      	movs	r3, #33	; 0x21
 800e556:	6003      	str	r3, [r0, #0]
 800e558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e55c:	4805      	ldr	r0, [pc, #20]	; (800e574 <log+0x8c>)
 800e55e:	f000 b9c7 	b.w	800e8f0 <nan>
 800e562:	bf00      	nop
 800e564:	f3af 8000 	nop.w
 800e568:	00000000 	.word	0x00000000
 800e56c:	fff00000 	.word	0xfff00000
 800e570:	20000024 	.word	0x20000024
 800e574:	08012d40 	.word	0x08012d40

0800e578 <__ieee754_log>:
 800e578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e57c:	ec51 0b10 	vmov	r0, r1, d0
 800e580:	ed2d 8b04 	vpush	{d8-d9}
 800e584:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e588:	b083      	sub	sp, #12
 800e58a:	460d      	mov	r5, r1
 800e58c:	da29      	bge.n	800e5e2 <__ieee754_log+0x6a>
 800e58e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e592:	4303      	orrs	r3, r0
 800e594:	ee10 2a10 	vmov	r2, s0
 800e598:	d10c      	bne.n	800e5b4 <__ieee754_log+0x3c>
 800e59a:	49cf      	ldr	r1, [pc, #828]	; (800e8d8 <__ieee754_log+0x360>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	2300      	movs	r3, #0
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	f7f2 f953 	bl	800084c <__aeabi_ddiv>
 800e5a6:	ec41 0b10 	vmov	d0, r0, r1
 800e5aa:	b003      	add	sp, #12
 800e5ac:	ecbd 8b04 	vpop	{d8-d9}
 800e5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b4:	2900      	cmp	r1, #0
 800e5b6:	da05      	bge.n	800e5c4 <__ieee754_log+0x4c>
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	f7f1 fe65 	bl	8000288 <__aeabi_dsub>
 800e5be:	2200      	movs	r2, #0
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	e7ee      	b.n	800e5a2 <__ieee754_log+0x2a>
 800e5c4:	4bc5      	ldr	r3, [pc, #788]	; (800e8dc <__ieee754_log+0x364>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f7f2 f816 	bl	80005f8 <__aeabi_dmul>
 800e5cc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e5d0:	460d      	mov	r5, r1
 800e5d2:	4ac3      	ldr	r2, [pc, #780]	; (800e8e0 <__ieee754_log+0x368>)
 800e5d4:	4295      	cmp	r5, r2
 800e5d6:	dd06      	ble.n	800e5e6 <__ieee754_log+0x6e>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	f7f1 fe56 	bl	800028c <__adddf3>
 800e5e0:	e7e1      	b.n	800e5a6 <__ieee754_log+0x2e>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e7f5      	b.n	800e5d2 <__ieee754_log+0x5a>
 800e5e6:	152c      	asrs	r4, r5, #20
 800e5e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e5ec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e5f0:	441c      	add	r4, r3
 800e5f2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e5f6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e5fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5fe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e602:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e606:	ea42 0105 	orr.w	r1, r2, r5
 800e60a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e60e:	2200      	movs	r2, #0
 800e610:	4bb4      	ldr	r3, [pc, #720]	; (800e8e4 <__ieee754_log+0x36c>)
 800e612:	f7f1 fe39 	bl	8000288 <__aeabi_dsub>
 800e616:	1cab      	adds	r3, r5, #2
 800e618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	4682      	mov	sl, r0
 800e620:	468b      	mov	fp, r1
 800e622:	f04f 0200 	mov.w	r2, #0
 800e626:	dc53      	bgt.n	800e6d0 <__ieee754_log+0x158>
 800e628:	2300      	movs	r3, #0
 800e62a:	f7f2 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e62e:	b1d0      	cbz	r0, 800e666 <__ieee754_log+0xee>
 800e630:	2c00      	cmp	r4, #0
 800e632:	f000 8122 	beq.w	800e87a <__ieee754_log+0x302>
 800e636:	4620      	mov	r0, r4
 800e638:	f7f1 ff74 	bl	8000524 <__aeabi_i2d>
 800e63c:	a390      	add	r3, pc, #576	; (adr r3, 800e880 <__ieee754_log+0x308>)
 800e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e642:	4606      	mov	r6, r0
 800e644:	460f      	mov	r7, r1
 800e646:	f7f1 ffd7 	bl	80005f8 <__aeabi_dmul>
 800e64a:	a38f      	add	r3, pc, #572	; (adr r3, 800e888 <__ieee754_log+0x310>)
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e650:	4604      	mov	r4, r0
 800e652:	460d      	mov	r5, r1
 800e654:	4630      	mov	r0, r6
 800e656:	4639      	mov	r1, r7
 800e658:	f7f1 ffce 	bl	80005f8 <__aeabi_dmul>
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	4620      	mov	r0, r4
 800e662:	4629      	mov	r1, r5
 800e664:	e7ba      	b.n	800e5dc <__ieee754_log+0x64>
 800e666:	a38a      	add	r3, pc, #552	; (adr r3, 800e890 <__ieee754_log+0x318>)
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	4650      	mov	r0, sl
 800e66e:	4659      	mov	r1, fp
 800e670:	f7f1 ffc2 	bl	80005f8 <__aeabi_dmul>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	2000      	movs	r0, #0
 800e67a:	499b      	ldr	r1, [pc, #620]	; (800e8e8 <__ieee754_log+0x370>)
 800e67c:	f7f1 fe04 	bl	8000288 <__aeabi_dsub>
 800e680:	4652      	mov	r2, sl
 800e682:	4606      	mov	r6, r0
 800e684:	460f      	mov	r7, r1
 800e686:	465b      	mov	r3, fp
 800e688:	4650      	mov	r0, sl
 800e68a:	4659      	mov	r1, fp
 800e68c:	f7f1 ffb4 	bl	80005f8 <__aeabi_dmul>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4630      	mov	r0, r6
 800e696:	4639      	mov	r1, r7
 800e698:	f7f1 ffae 	bl	80005f8 <__aeabi_dmul>
 800e69c:	4606      	mov	r6, r0
 800e69e:	460f      	mov	r7, r1
 800e6a0:	b914      	cbnz	r4, 800e6a8 <__ieee754_log+0x130>
 800e6a2:	4632      	mov	r2, r6
 800e6a4:	463b      	mov	r3, r7
 800e6a6:	e0a2      	b.n	800e7ee <__ieee754_log+0x276>
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f7f1 ff3b 	bl	8000524 <__aeabi_i2d>
 800e6ae:	a374      	add	r3, pc, #464	; (adr r3, 800e880 <__ieee754_log+0x308>)
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	4680      	mov	r8, r0
 800e6b6:	4689      	mov	r9, r1
 800e6b8:	f7f1 ff9e 	bl	80005f8 <__aeabi_dmul>
 800e6bc:	a372      	add	r3, pc, #456	; (adr r3, 800e888 <__ieee754_log+0x310>)
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	460d      	mov	r5, r1
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	f7f1 ff95 	bl	80005f8 <__aeabi_dmul>
 800e6ce:	e0a7      	b.n	800e820 <__ieee754_log+0x2a8>
 800e6d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e6d4:	f7f1 fdda 	bl	800028c <__adddf3>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4650      	mov	r0, sl
 800e6de:	4659      	mov	r1, fp
 800e6e0:	f7f2 f8b4 	bl	800084c <__aeabi_ddiv>
 800e6e4:	ec41 0b18 	vmov	d8, r0, r1
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	f7f1 ff1b 	bl	8000524 <__aeabi_i2d>
 800e6ee:	ec53 2b18 	vmov	r2, r3, d8
 800e6f2:	ec41 0b19 	vmov	d9, r0, r1
 800e6f6:	ec51 0b18 	vmov	r0, r1, d8
 800e6fa:	f7f1 ff7d 	bl	80005f8 <__aeabi_dmul>
 800e6fe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e702:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e706:	9301      	str	r3, [sp, #4]
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	4680      	mov	r8, r0
 800e70e:	4689      	mov	r9, r1
 800e710:	f7f1 ff72 	bl	80005f8 <__aeabi_dmul>
 800e714:	a360      	add	r3, pc, #384	; (adr r3, 800e898 <__ieee754_log+0x320>)
 800e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71a:	4606      	mov	r6, r0
 800e71c:	460f      	mov	r7, r1
 800e71e:	f7f1 ff6b 	bl	80005f8 <__aeabi_dmul>
 800e722:	a35f      	add	r3, pc, #380	; (adr r3, 800e8a0 <__ieee754_log+0x328>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f7f1 fdb0 	bl	800028c <__adddf3>
 800e72c:	4632      	mov	r2, r6
 800e72e:	463b      	mov	r3, r7
 800e730:	f7f1 ff62 	bl	80005f8 <__aeabi_dmul>
 800e734:	a35c      	add	r3, pc, #368	; (adr r3, 800e8a8 <__ieee754_log+0x330>)
 800e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73a:	f7f1 fda7 	bl	800028c <__adddf3>
 800e73e:	4632      	mov	r2, r6
 800e740:	463b      	mov	r3, r7
 800e742:	f7f1 ff59 	bl	80005f8 <__aeabi_dmul>
 800e746:	a35a      	add	r3, pc, #360	; (adr r3, 800e8b0 <__ieee754_log+0x338>)
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	f7f1 fd9e 	bl	800028c <__adddf3>
 800e750:	4642      	mov	r2, r8
 800e752:	464b      	mov	r3, r9
 800e754:	f7f1 ff50 	bl	80005f8 <__aeabi_dmul>
 800e758:	a357      	add	r3, pc, #348	; (adr r3, 800e8b8 <__ieee754_log+0x340>)
 800e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75e:	4680      	mov	r8, r0
 800e760:	4689      	mov	r9, r1
 800e762:	4630      	mov	r0, r6
 800e764:	4639      	mov	r1, r7
 800e766:	f7f1 ff47 	bl	80005f8 <__aeabi_dmul>
 800e76a:	a355      	add	r3, pc, #340	; (adr r3, 800e8c0 <__ieee754_log+0x348>)
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f1 fd8c 	bl	800028c <__adddf3>
 800e774:	4632      	mov	r2, r6
 800e776:	463b      	mov	r3, r7
 800e778:	f7f1 ff3e 	bl	80005f8 <__aeabi_dmul>
 800e77c:	a352      	add	r3, pc, #328	; (adr r3, 800e8c8 <__ieee754_log+0x350>)
 800e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e782:	f7f1 fd83 	bl	800028c <__adddf3>
 800e786:	4632      	mov	r2, r6
 800e788:	463b      	mov	r3, r7
 800e78a:	f7f1 ff35 	bl	80005f8 <__aeabi_dmul>
 800e78e:	460b      	mov	r3, r1
 800e790:	4602      	mov	r2, r0
 800e792:	4649      	mov	r1, r9
 800e794:	4640      	mov	r0, r8
 800e796:	f7f1 fd79 	bl	800028c <__adddf3>
 800e79a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e79e:	9b01      	ldr	r3, [sp, #4]
 800e7a0:	3551      	adds	r5, #81	; 0x51
 800e7a2:	431d      	orrs	r5, r3
 800e7a4:	2d00      	cmp	r5, #0
 800e7a6:	4680      	mov	r8, r0
 800e7a8:	4689      	mov	r9, r1
 800e7aa:	dd48      	ble.n	800e83e <__ieee754_log+0x2c6>
 800e7ac:	4b4e      	ldr	r3, [pc, #312]	; (800e8e8 <__ieee754_log+0x370>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	4650      	mov	r0, sl
 800e7b2:	4659      	mov	r1, fp
 800e7b4:	f7f1 ff20 	bl	80005f8 <__aeabi_dmul>
 800e7b8:	4652      	mov	r2, sl
 800e7ba:	465b      	mov	r3, fp
 800e7bc:	f7f1 ff1c 	bl	80005f8 <__aeabi_dmul>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	4606      	mov	r6, r0
 800e7c6:	460f      	mov	r7, r1
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	4649      	mov	r1, r9
 800e7cc:	f7f1 fd5e 	bl	800028c <__adddf3>
 800e7d0:	ec53 2b18 	vmov	r2, r3, d8
 800e7d4:	f7f1 ff10 	bl	80005f8 <__aeabi_dmul>
 800e7d8:	4680      	mov	r8, r0
 800e7da:	4689      	mov	r9, r1
 800e7dc:	b964      	cbnz	r4, 800e7f8 <__ieee754_log+0x280>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	f7f1 fd4f 	bl	8000288 <__aeabi_dsub>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4650      	mov	r0, sl
 800e7f0:	4659      	mov	r1, fp
 800e7f2:	f7f1 fd49 	bl	8000288 <__aeabi_dsub>
 800e7f6:	e6d6      	b.n	800e5a6 <__ieee754_log+0x2e>
 800e7f8:	a321      	add	r3, pc, #132	; (adr r3, 800e880 <__ieee754_log+0x308>)
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	ec51 0b19 	vmov	r0, r1, d9
 800e802:	f7f1 fef9 	bl	80005f8 <__aeabi_dmul>
 800e806:	a320      	add	r3, pc, #128	; (adr r3, 800e888 <__ieee754_log+0x310>)
 800e808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80c:	4604      	mov	r4, r0
 800e80e:	460d      	mov	r5, r1
 800e810:	ec51 0b19 	vmov	r0, r1, d9
 800e814:	f7f1 fef0 	bl	80005f8 <__aeabi_dmul>
 800e818:	4642      	mov	r2, r8
 800e81a:	464b      	mov	r3, r9
 800e81c:	f7f1 fd36 	bl	800028c <__adddf3>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	4630      	mov	r0, r6
 800e826:	4639      	mov	r1, r7
 800e828:	f7f1 fd2e 	bl	8000288 <__aeabi_dsub>
 800e82c:	4652      	mov	r2, sl
 800e82e:	465b      	mov	r3, fp
 800e830:	f7f1 fd2a 	bl	8000288 <__aeabi_dsub>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	4620      	mov	r0, r4
 800e83a:	4629      	mov	r1, r5
 800e83c:	e7d9      	b.n	800e7f2 <__ieee754_log+0x27a>
 800e83e:	4602      	mov	r2, r0
 800e840:	460b      	mov	r3, r1
 800e842:	4650      	mov	r0, sl
 800e844:	4659      	mov	r1, fp
 800e846:	f7f1 fd1f 	bl	8000288 <__aeabi_dsub>
 800e84a:	ec53 2b18 	vmov	r2, r3, d8
 800e84e:	f7f1 fed3 	bl	80005f8 <__aeabi_dmul>
 800e852:	4606      	mov	r6, r0
 800e854:	460f      	mov	r7, r1
 800e856:	2c00      	cmp	r4, #0
 800e858:	f43f af23 	beq.w	800e6a2 <__ieee754_log+0x12a>
 800e85c:	a308      	add	r3, pc, #32	; (adr r3, 800e880 <__ieee754_log+0x308>)
 800e85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e862:	ec51 0b19 	vmov	r0, r1, d9
 800e866:	f7f1 fec7 	bl	80005f8 <__aeabi_dmul>
 800e86a:	a307      	add	r3, pc, #28	; (adr r3, 800e888 <__ieee754_log+0x310>)
 800e86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e870:	4604      	mov	r4, r0
 800e872:	460d      	mov	r5, r1
 800e874:	ec51 0b19 	vmov	r0, r1, d9
 800e878:	e727      	b.n	800e6ca <__ieee754_log+0x152>
 800e87a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e8d0 <__ieee754_log+0x358>
 800e87e:	e694      	b.n	800e5aa <__ieee754_log+0x32>
 800e880:	fee00000 	.word	0xfee00000
 800e884:	3fe62e42 	.word	0x3fe62e42
 800e888:	35793c76 	.word	0x35793c76
 800e88c:	3dea39ef 	.word	0x3dea39ef
 800e890:	55555555 	.word	0x55555555
 800e894:	3fd55555 	.word	0x3fd55555
 800e898:	df3e5244 	.word	0xdf3e5244
 800e89c:	3fc2f112 	.word	0x3fc2f112
 800e8a0:	96cb03de 	.word	0x96cb03de
 800e8a4:	3fc74664 	.word	0x3fc74664
 800e8a8:	94229359 	.word	0x94229359
 800e8ac:	3fd24924 	.word	0x3fd24924
 800e8b0:	55555593 	.word	0x55555593
 800e8b4:	3fe55555 	.word	0x3fe55555
 800e8b8:	d078c69f 	.word	0xd078c69f
 800e8bc:	3fc39a09 	.word	0x3fc39a09
 800e8c0:	1d8e78af 	.word	0x1d8e78af
 800e8c4:	3fcc71c5 	.word	0x3fcc71c5
 800e8c8:	9997fa04 	.word	0x9997fa04
 800e8cc:	3fd99999 	.word	0x3fd99999
	...
 800e8d8:	c3500000 	.word	0xc3500000
 800e8dc:	43500000 	.word	0x43500000
 800e8e0:	7fefffff 	.word	0x7fefffff
 800e8e4:	3ff00000 	.word	0x3ff00000
 800e8e8:	3fe00000 	.word	0x3fe00000
 800e8ec:	00000000 	.word	0x00000000

0800e8f0 <nan>:
 800e8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e8f8 <nan+0x8>
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	00000000 	.word	0x00000000
 800e8fc:	7ff80000 	.word	0x7ff80000

0800e900 <__errno>:
 800e900:	4b01      	ldr	r3, [pc, #4]	; (800e908 <__errno+0x8>)
 800e902:	6818      	ldr	r0, [r3, #0]
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	20000028 	.word	0x20000028

0800e90c <__libc_init_array>:
 800e90c:	b570      	push	{r4, r5, r6, lr}
 800e90e:	4d0d      	ldr	r5, [pc, #52]	; (800e944 <__libc_init_array+0x38>)
 800e910:	4c0d      	ldr	r4, [pc, #52]	; (800e948 <__libc_init_array+0x3c>)
 800e912:	1b64      	subs	r4, r4, r5
 800e914:	10a4      	asrs	r4, r4, #2
 800e916:	2600      	movs	r6, #0
 800e918:	42a6      	cmp	r6, r4
 800e91a:	d109      	bne.n	800e930 <__libc_init_array+0x24>
 800e91c:	4d0b      	ldr	r5, [pc, #44]	; (800e94c <__libc_init_array+0x40>)
 800e91e:	4c0c      	ldr	r4, [pc, #48]	; (800e950 <__libc_init_array+0x44>)
 800e920:	f002 feba 	bl	8011698 <_init>
 800e924:	1b64      	subs	r4, r4, r5
 800e926:	10a4      	asrs	r4, r4, #2
 800e928:	2600      	movs	r6, #0
 800e92a:	42a6      	cmp	r6, r4
 800e92c:	d105      	bne.n	800e93a <__libc_init_array+0x2e>
 800e92e:	bd70      	pop	{r4, r5, r6, pc}
 800e930:	f855 3b04 	ldr.w	r3, [r5], #4
 800e934:	4798      	blx	r3
 800e936:	3601      	adds	r6, #1
 800e938:	e7ee      	b.n	800e918 <__libc_init_array+0xc>
 800e93a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e93e:	4798      	blx	r3
 800e940:	3601      	adds	r6, #1
 800e942:	e7f2      	b.n	800e92a <__libc_init_array+0x1e>
 800e944:	08012eac 	.word	0x08012eac
 800e948:	08012eac 	.word	0x08012eac
 800e94c:	08012eac 	.word	0x08012eac
 800e950:	08012eb0 	.word	0x08012eb0

0800e954 <malloc>:
 800e954:	4b02      	ldr	r3, [pc, #8]	; (800e960 <malloc+0xc>)
 800e956:	4601      	mov	r1, r0
 800e958:	6818      	ldr	r0, [r3, #0]
 800e95a:	f000 b871 	b.w	800ea40 <_malloc_r>
 800e95e:	bf00      	nop
 800e960:	20000028 	.word	0x20000028

0800e964 <free>:
 800e964:	4b02      	ldr	r3, [pc, #8]	; (800e970 <free+0xc>)
 800e966:	4601      	mov	r1, r0
 800e968:	6818      	ldr	r0, [r3, #0]
 800e96a:	f000 b819 	b.w	800e9a0 <_free_r>
 800e96e:	bf00      	nop
 800e970:	20000028 	.word	0x20000028

0800e974 <memcpy>:
 800e974:	440a      	add	r2, r1
 800e976:	4291      	cmp	r1, r2
 800e978:	f100 33ff 	add.w	r3, r0, #4294967295
 800e97c:	d100      	bne.n	800e980 <memcpy+0xc>
 800e97e:	4770      	bx	lr
 800e980:	b510      	push	{r4, lr}
 800e982:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e98a:	4291      	cmp	r1, r2
 800e98c:	d1f9      	bne.n	800e982 <memcpy+0xe>
 800e98e:	bd10      	pop	{r4, pc}

0800e990 <memset>:
 800e990:	4402      	add	r2, r0
 800e992:	4603      	mov	r3, r0
 800e994:	4293      	cmp	r3, r2
 800e996:	d100      	bne.n	800e99a <memset+0xa>
 800e998:	4770      	bx	lr
 800e99a:	f803 1b01 	strb.w	r1, [r3], #1
 800e99e:	e7f9      	b.n	800e994 <memset+0x4>

0800e9a0 <_free_r>:
 800e9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9a2:	2900      	cmp	r1, #0
 800e9a4:	d048      	beq.n	800ea38 <_free_r+0x98>
 800e9a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9aa:	9001      	str	r0, [sp, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f1a1 0404 	sub.w	r4, r1, #4
 800e9b2:	bfb8      	it	lt
 800e9b4:	18e4      	addlt	r4, r4, r3
 800e9b6:	f001 fbb3 	bl	8010120 <__malloc_lock>
 800e9ba:	4a20      	ldr	r2, [pc, #128]	; (800ea3c <_free_r+0x9c>)
 800e9bc:	9801      	ldr	r0, [sp, #4]
 800e9be:	6813      	ldr	r3, [r2, #0]
 800e9c0:	4615      	mov	r5, r2
 800e9c2:	b933      	cbnz	r3, 800e9d2 <_free_r+0x32>
 800e9c4:	6063      	str	r3, [r4, #4]
 800e9c6:	6014      	str	r4, [r2, #0]
 800e9c8:	b003      	add	sp, #12
 800e9ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9ce:	f001 bbad 	b.w	801012c <__malloc_unlock>
 800e9d2:	42a3      	cmp	r3, r4
 800e9d4:	d90b      	bls.n	800e9ee <_free_r+0x4e>
 800e9d6:	6821      	ldr	r1, [r4, #0]
 800e9d8:	1862      	adds	r2, r4, r1
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	bf04      	itt	eq
 800e9de:	681a      	ldreq	r2, [r3, #0]
 800e9e0:	685b      	ldreq	r3, [r3, #4]
 800e9e2:	6063      	str	r3, [r4, #4]
 800e9e4:	bf04      	itt	eq
 800e9e6:	1852      	addeq	r2, r2, r1
 800e9e8:	6022      	streq	r2, [r4, #0]
 800e9ea:	602c      	str	r4, [r5, #0]
 800e9ec:	e7ec      	b.n	800e9c8 <_free_r+0x28>
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	b10b      	cbz	r3, 800e9f8 <_free_r+0x58>
 800e9f4:	42a3      	cmp	r3, r4
 800e9f6:	d9fa      	bls.n	800e9ee <_free_r+0x4e>
 800e9f8:	6811      	ldr	r1, [r2, #0]
 800e9fa:	1855      	adds	r5, r2, r1
 800e9fc:	42a5      	cmp	r5, r4
 800e9fe:	d10b      	bne.n	800ea18 <_free_r+0x78>
 800ea00:	6824      	ldr	r4, [r4, #0]
 800ea02:	4421      	add	r1, r4
 800ea04:	1854      	adds	r4, r2, r1
 800ea06:	42a3      	cmp	r3, r4
 800ea08:	6011      	str	r1, [r2, #0]
 800ea0a:	d1dd      	bne.n	800e9c8 <_free_r+0x28>
 800ea0c:	681c      	ldr	r4, [r3, #0]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	6053      	str	r3, [r2, #4]
 800ea12:	4421      	add	r1, r4
 800ea14:	6011      	str	r1, [r2, #0]
 800ea16:	e7d7      	b.n	800e9c8 <_free_r+0x28>
 800ea18:	d902      	bls.n	800ea20 <_free_r+0x80>
 800ea1a:	230c      	movs	r3, #12
 800ea1c:	6003      	str	r3, [r0, #0]
 800ea1e:	e7d3      	b.n	800e9c8 <_free_r+0x28>
 800ea20:	6825      	ldr	r5, [r4, #0]
 800ea22:	1961      	adds	r1, r4, r5
 800ea24:	428b      	cmp	r3, r1
 800ea26:	bf04      	itt	eq
 800ea28:	6819      	ldreq	r1, [r3, #0]
 800ea2a:	685b      	ldreq	r3, [r3, #4]
 800ea2c:	6063      	str	r3, [r4, #4]
 800ea2e:	bf04      	itt	eq
 800ea30:	1949      	addeq	r1, r1, r5
 800ea32:	6021      	streq	r1, [r4, #0]
 800ea34:	6054      	str	r4, [r2, #4]
 800ea36:	e7c7      	b.n	800e9c8 <_free_r+0x28>
 800ea38:	b003      	add	sp, #12
 800ea3a:	bd30      	pop	{r4, r5, pc}
 800ea3c:	20000460 	.word	0x20000460

0800ea40 <_malloc_r>:
 800ea40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea42:	1ccd      	adds	r5, r1, #3
 800ea44:	f025 0503 	bic.w	r5, r5, #3
 800ea48:	3508      	adds	r5, #8
 800ea4a:	2d0c      	cmp	r5, #12
 800ea4c:	bf38      	it	cc
 800ea4e:	250c      	movcc	r5, #12
 800ea50:	2d00      	cmp	r5, #0
 800ea52:	4606      	mov	r6, r0
 800ea54:	db01      	blt.n	800ea5a <_malloc_r+0x1a>
 800ea56:	42a9      	cmp	r1, r5
 800ea58:	d903      	bls.n	800ea62 <_malloc_r+0x22>
 800ea5a:	230c      	movs	r3, #12
 800ea5c:	6033      	str	r3, [r6, #0]
 800ea5e:	2000      	movs	r0, #0
 800ea60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea62:	f001 fb5d 	bl	8010120 <__malloc_lock>
 800ea66:	4921      	ldr	r1, [pc, #132]	; (800eaec <_malloc_r+0xac>)
 800ea68:	680a      	ldr	r2, [r1, #0]
 800ea6a:	4614      	mov	r4, r2
 800ea6c:	b99c      	cbnz	r4, 800ea96 <_malloc_r+0x56>
 800ea6e:	4f20      	ldr	r7, [pc, #128]	; (800eaf0 <_malloc_r+0xb0>)
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	b923      	cbnz	r3, 800ea7e <_malloc_r+0x3e>
 800ea74:	4621      	mov	r1, r4
 800ea76:	4630      	mov	r0, r6
 800ea78:	f000 fca6 	bl	800f3c8 <_sbrk_r>
 800ea7c:	6038      	str	r0, [r7, #0]
 800ea7e:	4629      	mov	r1, r5
 800ea80:	4630      	mov	r0, r6
 800ea82:	f000 fca1 	bl	800f3c8 <_sbrk_r>
 800ea86:	1c43      	adds	r3, r0, #1
 800ea88:	d123      	bne.n	800ead2 <_malloc_r+0x92>
 800ea8a:	230c      	movs	r3, #12
 800ea8c:	6033      	str	r3, [r6, #0]
 800ea8e:	4630      	mov	r0, r6
 800ea90:	f001 fb4c 	bl	801012c <__malloc_unlock>
 800ea94:	e7e3      	b.n	800ea5e <_malloc_r+0x1e>
 800ea96:	6823      	ldr	r3, [r4, #0]
 800ea98:	1b5b      	subs	r3, r3, r5
 800ea9a:	d417      	bmi.n	800eacc <_malloc_r+0x8c>
 800ea9c:	2b0b      	cmp	r3, #11
 800ea9e:	d903      	bls.n	800eaa8 <_malloc_r+0x68>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	441c      	add	r4, r3
 800eaa4:	6025      	str	r5, [r4, #0]
 800eaa6:	e004      	b.n	800eab2 <_malloc_r+0x72>
 800eaa8:	6863      	ldr	r3, [r4, #4]
 800eaaa:	42a2      	cmp	r2, r4
 800eaac:	bf0c      	ite	eq
 800eaae:	600b      	streq	r3, [r1, #0]
 800eab0:	6053      	strne	r3, [r2, #4]
 800eab2:	4630      	mov	r0, r6
 800eab4:	f001 fb3a 	bl	801012c <__malloc_unlock>
 800eab8:	f104 000b 	add.w	r0, r4, #11
 800eabc:	1d23      	adds	r3, r4, #4
 800eabe:	f020 0007 	bic.w	r0, r0, #7
 800eac2:	1ac2      	subs	r2, r0, r3
 800eac4:	d0cc      	beq.n	800ea60 <_malloc_r+0x20>
 800eac6:	1a1b      	subs	r3, r3, r0
 800eac8:	50a3      	str	r3, [r4, r2]
 800eaca:	e7c9      	b.n	800ea60 <_malloc_r+0x20>
 800eacc:	4622      	mov	r2, r4
 800eace:	6864      	ldr	r4, [r4, #4]
 800ead0:	e7cc      	b.n	800ea6c <_malloc_r+0x2c>
 800ead2:	1cc4      	adds	r4, r0, #3
 800ead4:	f024 0403 	bic.w	r4, r4, #3
 800ead8:	42a0      	cmp	r0, r4
 800eada:	d0e3      	beq.n	800eaa4 <_malloc_r+0x64>
 800eadc:	1a21      	subs	r1, r4, r0
 800eade:	4630      	mov	r0, r6
 800eae0:	f000 fc72 	bl	800f3c8 <_sbrk_r>
 800eae4:	3001      	adds	r0, #1
 800eae6:	d1dd      	bne.n	800eaa4 <_malloc_r+0x64>
 800eae8:	e7cf      	b.n	800ea8a <_malloc_r+0x4a>
 800eaea:	bf00      	nop
 800eaec:	20000460 	.word	0x20000460
 800eaf0:	20000464 	.word	0x20000464

0800eaf4 <__cvt>:
 800eaf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf8:	ec55 4b10 	vmov	r4, r5, d0
 800eafc:	2d00      	cmp	r5, #0
 800eafe:	460e      	mov	r6, r1
 800eb00:	4619      	mov	r1, r3
 800eb02:	462b      	mov	r3, r5
 800eb04:	bfbb      	ittet	lt
 800eb06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eb0a:	461d      	movlt	r5, r3
 800eb0c:	2300      	movge	r3, #0
 800eb0e:	232d      	movlt	r3, #45	; 0x2d
 800eb10:	700b      	strb	r3, [r1, #0]
 800eb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eb18:	4691      	mov	r9, r2
 800eb1a:	f023 0820 	bic.w	r8, r3, #32
 800eb1e:	bfbc      	itt	lt
 800eb20:	4622      	movlt	r2, r4
 800eb22:	4614      	movlt	r4, r2
 800eb24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eb28:	d005      	beq.n	800eb36 <__cvt+0x42>
 800eb2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eb2e:	d100      	bne.n	800eb32 <__cvt+0x3e>
 800eb30:	3601      	adds	r6, #1
 800eb32:	2102      	movs	r1, #2
 800eb34:	e000      	b.n	800eb38 <__cvt+0x44>
 800eb36:	2103      	movs	r1, #3
 800eb38:	ab03      	add	r3, sp, #12
 800eb3a:	9301      	str	r3, [sp, #4]
 800eb3c:	ab02      	add	r3, sp, #8
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	ec45 4b10 	vmov	d0, r4, r5
 800eb44:	4653      	mov	r3, sl
 800eb46:	4632      	mov	r2, r6
 800eb48:	f000 fcfa 	bl	800f540 <_dtoa_r>
 800eb4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eb50:	4607      	mov	r7, r0
 800eb52:	d102      	bne.n	800eb5a <__cvt+0x66>
 800eb54:	f019 0f01 	tst.w	r9, #1
 800eb58:	d022      	beq.n	800eba0 <__cvt+0xac>
 800eb5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eb5e:	eb07 0906 	add.w	r9, r7, r6
 800eb62:	d110      	bne.n	800eb86 <__cvt+0x92>
 800eb64:	783b      	ldrb	r3, [r7, #0]
 800eb66:	2b30      	cmp	r3, #48	; 0x30
 800eb68:	d10a      	bne.n	800eb80 <__cvt+0x8c>
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	4620      	mov	r0, r4
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f1 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb76:	b918      	cbnz	r0, 800eb80 <__cvt+0x8c>
 800eb78:	f1c6 0601 	rsb	r6, r6, #1
 800eb7c:	f8ca 6000 	str.w	r6, [sl]
 800eb80:	f8da 3000 	ldr.w	r3, [sl]
 800eb84:	4499      	add	r9, r3
 800eb86:	2200      	movs	r2, #0
 800eb88:	2300      	movs	r3, #0
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	4629      	mov	r1, r5
 800eb8e:	f7f1 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb92:	b108      	cbz	r0, 800eb98 <__cvt+0xa4>
 800eb94:	f8cd 900c 	str.w	r9, [sp, #12]
 800eb98:	2230      	movs	r2, #48	; 0x30
 800eb9a:	9b03      	ldr	r3, [sp, #12]
 800eb9c:	454b      	cmp	r3, r9
 800eb9e:	d307      	bcc.n	800ebb0 <__cvt+0xbc>
 800eba0:	9b03      	ldr	r3, [sp, #12]
 800eba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eba4:	1bdb      	subs	r3, r3, r7
 800eba6:	4638      	mov	r0, r7
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	b004      	add	sp, #16
 800ebac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb0:	1c59      	adds	r1, r3, #1
 800ebb2:	9103      	str	r1, [sp, #12]
 800ebb4:	701a      	strb	r2, [r3, #0]
 800ebb6:	e7f0      	b.n	800eb9a <__cvt+0xa6>

0800ebb8 <__exponent>:
 800ebb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebba:	4603      	mov	r3, r0
 800ebbc:	2900      	cmp	r1, #0
 800ebbe:	bfb8      	it	lt
 800ebc0:	4249      	neglt	r1, r1
 800ebc2:	f803 2b02 	strb.w	r2, [r3], #2
 800ebc6:	bfb4      	ite	lt
 800ebc8:	222d      	movlt	r2, #45	; 0x2d
 800ebca:	222b      	movge	r2, #43	; 0x2b
 800ebcc:	2909      	cmp	r1, #9
 800ebce:	7042      	strb	r2, [r0, #1]
 800ebd0:	dd2a      	ble.n	800ec28 <__exponent+0x70>
 800ebd2:	f10d 0407 	add.w	r4, sp, #7
 800ebd6:	46a4      	mov	ip, r4
 800ebd8:	270a      	movs	r7, #10
 800ebda:	46a6      	mov	lr, r4
 800ebdc:	460a      	mov	r2, r1
 800ebde:	fb91 f6f7 	sdiv	r6, r1, r7
 800ebe2:	fb07 1516 	mls	r5, r7, r6, r1
 800ebe6:	3530      	adds	r5, #48	; 0x30
 800ebe8:	2a63      	cmp	r2, #99	; 0x63
 800ebea:	f104 34ff 	add.w	r4, r4, #4294967295
 800ebee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	dcf1      	bgt.n	800ebda <__exponent+0x22>
 800ebf6:	3130      	adds	r1, #48	; 0x30
 800ebf8:	f1ae 0502 	sub.w	r5, lr, #2
 800ebfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ec00:	1c44      	adds	r4, r0, #1
 800ec02:	4629      	mov	r1, r5
 800ec04:	4561      	cmp	r1, ip
 800ec06:	d30a      	bcc.n	800ec1e <__exponent+0x66>
 800ec08:	f10d 0209 	add.w	r2, sp, #9
 800ec0c:	eba2 020e 	sub.w	r2, r2, lr
 800ec10:	4565      	cmp	r5, ip
 800ec12:	bf88      	it	hi
 800ec14:	2200      	movhi	r2, #0
 800ec16:	4413      	add	r3, r2
 800ec18:	1a18      	subs	r0, r3, r0
 800ec1a:	b003      	add	sp, #12
 800ec1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ec26:	e7ed      	b.n	800ec04 <__exponent+0x4c>
 800ec28:	2330      	movs	r3, #48	; 0x30
 800ec2a:	3130      	adds	r1, #48	; 0x30
 800ec2c:	7083      	strb	r3, [r0, #2]
 800ec2e:	70c1      	strb	r1, [r0, #3]
 800ec30:	1d03      	adds	r3, r0, #4
 800ec32:	e7f1      	b.n	800ec18 <__exponent+0x60>

0800ec34 <_printf_float>:
 800ec34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec38:	ed2d 8b02 	vpush	{d8}
 800ec3c:	b08d      	sub	sp, #52	; 0x34
 800ec3e:	460c      	mov	r4, r1
 800ec40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ec44:	4616      	mov	r6, r2
 800ec46:	461f      	mov	r7, r3
 800ec48:	4605      	mov	r5, r0
 800ec4a:	f001 fa65 	bl	8010118 <_localeconv_r>
 800ec4e:	f8d0 a000 	ldr.w	sl, [r0]
 800ec52:	4650      	mov	r0, sl
 800ec54:	f7f1 fabc 	bl	80001d0 <strlen>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	9305      	str	r3, [sp, #20]
 800ec60:	f8d8 3000 	ldr.w	r3, [r8]
 800ec64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ec68:	3307      	adds	r3, #7
 800ec6a:	f023 0307 	bic.w	r3, r3, #7
 800ec6e:	f103 0208 	add.w	r2, r3, #8
 800ec72:	f8c8 2000 	str.w	r2, [r8]
 800ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ec7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ec82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ec86:	9307      	str	r3, [sp, #28]
 800ec88:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec8c:	ee08 0a10 	vmov	s16, r0
 800ec90:	4b9f      	ldr	r3, [pc, #636]	; (800ef10 <_printf_float+0x2dc>)
 800ec92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec96:	f04f 32ff 	mov.w	r2, #4294967295
 800ec9a:	f7f1 ff47 	bl	8000b2c <__aeabi_dcmpun>
 800ec9e:	bb88      	cbnz	r0, 800ed04 <_printf_float+0xd0>
 800eca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eca4:	4b9a      	ldr	r3, [pc, #616]	; (800ef10 <_printf_float+0x2dc>)
 800eca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecaa:	f7f1 ff21 	bl	8000af0 <__aeabi_dcmple>
 800ecae:	bb48      	cbnz	r0, 800ed04 <_printf_float+0xd0>
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	4640      	mov	r0, r8
 800ecb6:	4649      	mov	r1, r9
 800ecb8:	f7f1 ff10 	bl	8000adc <__aeabi_dcmplt>
 800ecbc:	b110      	cbz	r0, 800ecc4 <_printf_float+0x90>
 800ecbe:	232d      	movs	r3, #45	; 0x2d
 800ecc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecc4:	4b93      	ldr	r3, [pc, #588]	; (800ef14 <_printf_float+0x2e0>)
 800ecc6:	4894      	ldr	r0, [pc, #592]	; (800ef18 <_printf_float+0x2e4>)
 800ecc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eccc:	bf94      	ite	ls
 800ecce:	4698      	movls	r8, r3
 800ecd0:	4680      	movhi	r8, r0
 800ecd2:	2303      	movs	r3, #3
 800ecd4:	6123      	str	r3, [r4, #16]
 800ecd6:	9b05      	ldr	r3, [sp, #20]
 800ecd8:	f023 0204 	bic.w	r2, r3, #4
 800ecdc:	6022      	str	r2, [r4, #0]
 800ecde:	f04f 0900 	mov.w	r9, #0
 800ece2:	9700      	str	r7, [sp, #0]
 800ece4:	4633      	mov	r3, r6
 800ece6:	aa0b      	add	r2, sp, #44	; 0x2c
 800ece8:	4621      	mov	r1, r4
 800ecea:	4628      	mov	r0, r5
 800ecec:	f000 f9d8 	bl	800f0a0 <_printf_common>
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	f040 8090 	bne.w	800ee16 <_printf_float+0x1e2>
 800ecf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfa:	b00d      	add	sp, #52	; 0x34
 800ecfc:	ecbd 8b02 	vpop	{d8}
 800ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed04:	4642      	mov	r2, r8
 800ed06:	464b      	mov	r3, r9
 800ed08:	4640      	mov	r0, r8
 800ed0a:	4649      	mov	r1, r9
 800ed0c:	f7f1 ff0e 	bl	8000b2c <__aeabi_dcmpun>
 800ed10:	b140      	cbz	r0, 800ed24 <_printf_float+0xf0>
 800ed12:	464b      	mov	r3, r9
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	bfbc      	itt	lt
 800ed18:	232d      	movlt	r3, #45	; 0x2d
 800ed1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ed1e:	487f      	ldr	r0, [pc, #508]	; (800ef1c <_printf_float+0x2e8>)
 800ed20:	4b7f      	ldr	r3, [pc, #508]	; (800ef20 <_printf_float+0x2ec>)
 800ed22:	e7d1      	b.n	800ecc8 <_printf_float+0x94>
 800ed24:	6863      	ldr	r3, [r4, #4]
 800ed26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ed2a:	9206      	str	r2, [sp, #24]
 800ed2c:	1c5a      	adds	r2, r3, #1
 800ed2e:	d13f      	bne.n	800edb0 <_printf_float+0x17c>
 800ed30:	2306      	movs	r3, #6
 800ed32:	6063      	str	r3, [r4, #4]
 800ed34:	9b05      	ldr	r3, [sp, #20]
 800ed36:	6861      	ldr	r1, [r4, #4]
 800ed38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	9303      	str	r3, [sp, #12]
 800ed40:	ab0a      	add	r3, sp, #40	; 0x28
 800ed42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ed46:	ab09      	add	r3, sp, #36	; 0x24
 800ed48:	ec49 8b10 	vmov	d0, r8, r9
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	6022      	str	r2, [r4, #0]
 800ed50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ed54:	4628      	mov	r0, r5
 800ed56:	f7ff fecd 	bl	800eaf4 <__cvt>
 800ed5a:	9b06      	ldr	r3, [sp, #24]
 800ed5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed5e:	2b47      	cmp	r3, #71	; 0x47
 800ed60:	4680      	mov	r8, r0
 800ed62:	d108      	bne.n	800ed76 <_printf_float+0x142>
 800ed64:	1cc8      	adds	r0, r1, #3
 800ed66:	db02      	blt.n	800ed6e <_printf_float+0x13a>
 800ed68:	6863      	ldr	r3, [r4, #4]
 800ed6a:	4299      	cmp	r1, r3
 800ed6c:	dd41      	ble.n	800edf2 <_printf_float+0x1be>
 800ed6e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ed72:	fa5f fb8b 	uxtb.w	fp, fp
 800ed76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ed7a:	d820      	bhi.n	800edbe <_printf_float+0x18a>
 800ed7c:	3901      	subs	r1, #1
 800ed7e:	465a      	mov	r2, fp
 800ed80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ed84:	9109      	str	r1, [sp, #36]	; 0x24
 800ed86:	f7ff ff17 	bl	800ebb8 <__exponent>
 800ed8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed8c:	1813      	adds	r3, r2, r0
 800ed8e:	2a01      	cmp	r2, #1
 800ed90:	4681      	mov	r9, r0
 800ed92:	6123      	str	r3, [r4, #16]
 800ed94:	dc02      	bgt.n	800ed9c <_printf_float+0x168>
 800ed96:	6822      	ldr	r2, [r4, #0]
 800ed98:	07d2      	lsls	r2, r2, #31
 800ed9a:	d501      	bpl.n	800eda0 <_printf_float+0x16c>
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	6123      	str	r3, [r4, #16]
 800eda0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d09c      	beq.n	800ece2 <_printf_float+0xae>
 800eda8:	232d      	movs	r3, #45	; 0x2d
 800edaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edae:	e798      	b.n	800ece2 <_printf_float+0xae>
 800edb0:	9a06      	ldr	r2, [sp, #24]
 800edb2:	2a47      	cmp	r2, #71	; 0x47
 800edb4:	d1be      	bne.n	800ed34 <_printf_float+0x100>
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1bc      	bne.n	800ed34 <_printf_float+0x100>
 800edba:	2301      	movs	r3, #1
 800edbc:	e7b9      	b.n	800ed32 <_printf_float+0xfe>
 800edbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800edc2:	d118      	bne.n	800edf6 <_printf_float+0x1c2>
 800edc4:	2900      	cmp	r1, #0
 800edc6:	6863      	ldr	r3, [r4, #4]
 800edc8:	dd0b      	ble.n	800ede2 <_printf_float+0x1ae>
 800edca:	6121      	str	r1, [r4, #16]
 800edcc:	b913      	cbnz	r3, 800edd4 <_printf_float+0x1a0>
 800edce:	6822      	ldr	r2, [r4, #0]
 800edd0:	07d0      	lsls	r0, r2, #31
 800edd2:	d502      	bpl.n	800edda <_printf_float+0x1a6>
 800edd4:	3301      	adds	r3, #1
 800edd6:	440b      	add	r3, r1
 800edd8:	6123      	str	r3, [r4, #16]
 800edda:	65a1      	str	r1, [r4, #88]	; 0x58
 800eddc:	f04f 0900 	mov.w	r9, #0
 800ede0:	e7de      	b.n	800eda0 <_printf_float+0x16c>
 800ede2:	b913      	cbnz	r3, 800edea <_printf_float+0x1b6>
 800ede4:	6822      	ldr	r2, [r4, #0]
 800ede6:	07d2      	lsls	r2, r2, #31
 800ede8:	d501      	bpl.n	800edee <_printf_float+0x1ba>
 800edea:	3302      	adds	r3, #2
 800edec:	e7f4      	b.n	800edd8 <_printf_float+0x1a4>
 800edee:	2301      	movs	r3, #1
 800edf0:	e7f2      	b.n	800edd8 <_printf_float+0x1a4>
 800edf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800edf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edf8:	4299      	cmp	r1, r3
 800edfa:	db05      	blt.n	800ee08 <_printf_float+0x1d4>
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	6121      	str	r1, [r4, #16]
 800ee00:	07d8      	lsls	r0, r3, #31
 800ee02:	d5ea      	bpl.n	800edda <_printf_float+0x1a6>
 800ee04:	1c4b      	adds	r3, r1, #1
 800ee06:	e7e7      	b.n	800edd8 <_printf_float+0x1a4>
 800ee08:	2900      	cmp	r1, #0
 800ee0a:	bfd4      	ite	le
 800ee0c:	f1c1 0202 	rsble	r2, r1, #2
 800ee10:	2201      	movgt	r2, #1
 800ee12:	4413      	add	r3, r2
 800ee14:	e7e0      	b.n	800edd8 <_printf_float+0x1a4>
 800ee16:	6823      	ldr	r3, [r4, #0]
 800ee18:	055a      	lsls	r2, r3, #21
 800ee1a:	d407      	bmi.n	800ee2c <_printf_float+0x1f8>
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	4642      	mov	r2, r8
 800ee20:	4631      	mov	r1, r6
 800ee22:	4628      	mov	r0, r5
 800ee24:	47b8      	blx	r7
 800ee26:	3001      	adds	r0, #1
 800ee28:	d12c      	bne.n	800ee84 <_printf_float+0x250>
 800ee2a:	e764      	b.n	800ecf6 <_printf_float+0xc2>
 800ee2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ee30:	f240 80e0 	bls.w	800eff4 <_printf_float+0x3c0>
 800ee34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee38:	2200      	movs	r2, #0
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f7f1 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d034      	beq.n	800eeae <_printf_float+0x27a>
 800ee44:	4a37      	ldr	r2, [pc, #220]	; (800ef24 <_printf_float+0x2f0>)
 800ee46:	2301      	movs	r3, #1
 800ee48:	4631      	mov	r1, r6
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	47b8      	blx	r7
 800ee4e:	3001      	adds	r0, #1
 800ee50:	f43f af51 	beq.w	800ecf6 <_printf_float+0xc2>
 800ee54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	db02      	blt.n	800ee62 <_printf_float+0x22e>
 800ee5c:	6823      	ldr	r3, [r4, #0]
 800ee5e:	07d8      	lsls	r0, r3, #31
 800ee60:	d510      	bpl.n	800ee84 <_printf_float+0x250>
 800ee62:	ee18 3a10 	vmov	r3, s16
 800ee66:	4652      	mov	r2, sl
 800ee68:	4631      	mov	r1, r6
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	47b8      	blx	r7
 800ee6e:	3001      	adds	r0, #1
 800ee70:	f43f af41 	beq.w	800ecf6 <_printf_float+0xc2>
 800ee74:	f04f 0800 	mov.w	r8, #0
 800ee78:	f104 091a 	add.w	r9, r4, #26
 800ee7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	4543      	cmp	r3, r8
 800ee82:	dc09      	bgt.n	800ee98 <_printf_float+0x264>
 800ee84:	6823      	ldr	r3, [r4, #0]
 800ee86:	079b      	lsls	r3, r3, #30
 800ee88:	f100 8105 	bmi.w	800f096 <_printf_float+0x462>
 800ee8c:	68e0      	ldr	r0, [r4, #12]
 800ee8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee90:	4298      	cmp	r0, r3
 800ee92:	bfb8      	it	lt
 800ee94:	4618      	movlt	r0, r3
 800ee96:	e730      	b.n	800ecfa <_printf_float+0xc6>
 800ee98:	2301      	movs	r3, #1
 800ee9a:	464a      	mov	r2, r9
 800ee9c:	4631      	mov	r1, r6
 800ee9e:	4628      	mov	r0, r5
 800eea0:	47b8      	blx	r7
 800eea2:	3001      	adds	r0, #1
 800eea4:	f43f af27 	beq.w	800ecf6 <_printf_float+0xc2>
 800eea8:	f108 0801 	add.w	r8, r8, #1
 800eeac:	e7e6      	b.n	800ee7c <_printf_float+0x248>
 800eeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	dc39      	bgt.n	800ef28 <_printf_float+0x2f4>
 800eeb4:	4a1b      	ldr	r2, [pc, #108]	; (800ef24 <_printf_float+0x2f0>)
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	4631      	mov	r1, r6
 800eeba:	4628      	mov	r0, r5
 800eebc:	47b8      	blx	r7
 800eebe:	3001      	adds	r0, #1
 800eec0:	f43f af19 	beq.w	800ecf6 <_printf_float+0xc2>
 800eec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eec8:	4313      	orrs	r3, r2
 800eeca:	d102      	bne.n	800eed2 <_printf_float+0x29e>
 800eecc:	6823      	ldr	r3, [r4, #0]
 800eece:	07d9      	lsls	r1, r3, #31
 800eed0:	d5d8      	bpl.n	800ee84 <_printf_float+0x250>
 800eed2:	ee18 3a10 	vmov	r3, s16
 800eed6:	4652      	mov	r2, sl
 800eed8:	4631      	mov	r1, r6
 800eeda:	4628      	mov	r0, r5
 800eedc:	47b8      	blx	r7
 800eede:	3001      	adds	r0, #1
 800eee0:	f43f af09 	beq.w	800ecf6 <_printf_float+0xc2>
 800eee4:	f04f 0900 	mov.w	r9, #0
 800eee8:	f104 0a1a 	add.w	sl, r4, #26
 800eeec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeee:	425b      	negs	r3, r3
 800eef0:	454b      	cmp	r3, r9
 800eef2:	dc01      	bgt.n	800eef8 <_printf_float+0x2c4>
 800eef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eef6:	e792      	b.n	800ee1e <_printf_float+0x1ea>
 800eef8:	2301      	movs	r3, #1
 800eefa:	4652      	mov	r2, sl
 800eefc:	4631      	mov	r1, r6
 800eefe:	4628      	mov	r0, r5
 800ef00:	47b8      	blx	r7
 800ef02:	3001      	adds	r0, #1
 800ef04:	f43f aef7 	beq.w	800ecf6 <_printf_float+0xc2>
 800ef08:	f109 0901 	add.w	r9, r9, #1
 800ef0c:	e7ee      	b.n	800eeec <_printf_float+0x2b8>
 800ef0e:	bf00      	nop
 800ef10:	7fefffff 	.word	0x7fefffff
 800ef14:	08012acc 	.word	0x08012acc
 800ef18:	08012ad0 	.word	0x08012ad0
 800ef1c:	08012ad8 	.word	0x08012ad8
 800ef20:	08012ad4 	.word	0x08012ad4
 800ef24:	08012adc 	.word	0x08012adc
 800ef28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	bfa8      	it	ge
 800ef30:	461a      	movge	r2, r3
 800ef32:	2a00      	cmp	r2, #0
 800ef34:	4691      	mov	r9, r2
 800ef36:	dc37      	bgt.n	800efa8 <_printf_float+0x374>
 800ef38:	f04f 0b00 	mov.w	fp, #0
 800ef3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef40:	f104 021a 	add.w	r2, r4, #26
 800ef44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef46:	9305      	str	r3, [sp, #20]
 800ef48:	eba3 0309 	sub.w	r3, r3, r9
 800ef4c:	455b      	cmp	r3, fp
 800ef4e:	dc33      	bgt.n	800efb8 <_printf_float+0x384>
 800ef50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef54:	429a      	cmp	r2, r3
 800ef56:	db3b      	blt.n	800efd0 <_printf_float+0x39c>
 800ef58:	6823      	ldr	r3, [r4, #0]
 800ef5a:	07da      	lsls	r2, r3, #31
 800ef5c:	d438      	bmi.n	800efd0 <_printf_float+0x39c>
 800ef5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef60:	9b05      	ldr	r3, [sp, #20]
 800ef62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef64:	1ad3      	subs	r3, r2, r3
 800ef66:	eba2 0901 	sub.w	r9, r2, r1
 800ef6a:	4599      	cmp	r9, r3
 800ef6c:	bfa8      	it	ge
 800ef6e:	4699      	movge	r9, r3
 800ef70:	f1b9 0f00 	cmp.w	r9, #0
 800ef74:	dc35      	bgt.n	800efe2 <_printf_float+0x3ae>
 800ef76:	f04f 0800 	mov.w	r8, #0
 800ef7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef7e:	f104 0a1a 	add.w	sl, r4, #26
 800ef82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef86:	1a9b      	subs	r3, r3, r2
 800ef88:	eba3 0309 	sub.w	r3, r3, r9
 800ef8c:	4543      	cmp	r3, r8
 800ef8e:	f77f af79 	ble.w	800ee84 <_printf_float+0x250>
 800ef92:	2301      	movs	r3, #1
 800ef94:	4652      	mov	r2, sl
 800ef96:	4631      	mov	r1, r6
 800ef98:	4628      	mov	r0, r5
 800ef9a:	47b8      	blx	r7
 800ef9c:	3001      	adds	r0, #1
 800ef9e:	f43f aeaa 	beq.w	800ecf6 <_printf_float+0xc2>
 800efa2:	f108 0801 	add.w	r8, r8, #1
 800efa6:	e7ec      	b.n	800ef82 <_printf_float+0x34e>
 800efa8:	4613      	mov	r3, r2
 800efaa:	4631      	mov	r1, r6
 800efac:	4642      	mov	r2, r8
 800efae:	4628      	mov	r0, r5
 800efb0:	47b8      	blx	r7
 800efb2:	3001      	adds	r0, #1
 800efb4:	d1c0      	bne.n	800ef38 <_printf_float+0x304>
 800efb6:	e69e      	b.n	800ecf6 <_printf_float+0xc2>
 800efb8:	2301      	movs	r3, #1
 800efba:	4631      	mov	r1, r6
 800efbc:	4628      	mov	r0, r5
 800efbe:	9205      	str	r2, [sp, #20]
 800efc0:	47b8      	blx	r7
 800efc2:	3001      	adds	r0, #1
 800efc4:	f43f ae97 	beq.w	800ecf6 <_printf_float+0xc2>
 800efc8:	9a05      	ldr	r2, [sp, #20]
 800efca:	f10b 0b01 	add.w	fp, fp, #1
 800efce:	e7b9      	b.n	800ef44 <_printf_float+0x310>
 800efd0:	ee18 3a10 	vmov	r3, s16
 800efd4:	4652      	mov	r2, sl
 800efd6:	4631      	mov	r1, r6
 800efd8:	4628      	mov	r0, r5
 800efda:	47b8      	blx	r7
 800efdc:	3001      	adds	r0, #1
 800efde:	d1be      	bne.n	800ef5e <_printf_float+0x32a>
 800efe0:	e689      	b.n	800ecf6 <_printf_float+0xc2>
 800efe2:	9a05      	ldr	r2, [sp, #20]
 800efe4:	464b      	mov	r3, r9
 800efe6:	4442      	add	r2, r8
 800efe8:	4631      	mov	r1, r6
 800efea:	4628      	mov	r0, r5
 800efec:	47b8      	blx	r7
 800efee:	3001      	adds	r0, #1
 800eff0:	d1c1      	bne.n	800ef76 <_printf_float+0x342>
 800eff2:	e680      	b.n	800ecf6 <_printf_float+0xc2>
 800eff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eff6:	2a01      	cmp	r2, #1
 800eff8:	dc01      	bgt.n	800effe <_printf_float+0x3ca>
 800effa:	07db      	lsls	r3, r3, #31
 800effc:	d538      	bpl.n	800f070 <_printf_float+0x43c>
 800effe:	2301      	movs	r3, #1
 800f000:	4642      	mov	r2, r8
 800f002:	4631      	mov	r1, r6
 800f004:	4628      	mov	r0, r5
 800f006:	47b8      	blx	r7
 800f008:	3001      	adds	r0, #1
 800f00a:	f43f ae74 	beq.w	800ecf6 <_printf_float+0xc2>
 800f00e:	ee18 3a10 	vmov	r3, s16
 800f012:	4652      	mov	r2, sl
 800f014:	4631      	mov	r1, r6
 800f016:	4628      	mov	r0, r5
 800f018:	47b8      	blx	r7
 800f01a:	3001      	adds	r0, #1
 800f01c:	f43f ae6b 	beq.w	800ecf6 <_printf_float+0xc2>
 800f020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f024:	2200      	movs	r2, #0
 800f026:	2300      	movs	r3, #0
 800f028:	f7f1 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f02c:	b9d8      	cbnz	r0, 800f066 <_printf_float+0x432>
 800f02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f030:	f108 0201 	add.w	r2, r8, #1
 800f034:	3b01      	subs	r3, #1
 800f036:	4631      	mov	r1, r6
 800f038:	4628      	mov	r0, r5
 800f03a:	47b8      	blx	r7
 800f03c:	3001      	adds	r0, #1
 800f03e:	d10e      	bne.n	800f05e <_printf_float+0x42a>
 800f040:	e659      	b.n	800ecf6 <_printf_float+0xc2>
 800f042:	2301      	movs	r3, #1
 800f044:	4652      	mov	r2, sl
 800f046:	4631      	mov	r1, r6
 800f048:	4628      	mov	r0, r5
 800f04a:	47b8      	blx	r7
 800f04c:	3001      	adds	r0, #1
 800f04e:	f43f ae52 	beq.w	800ecf6 <_printf_float+0xc2>
 800f052:	f108 0801 	add.w	r8, r8, #1
 800f056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f058:	3b01      	subs	r3, #1
 800f05a:	4543      	cmp	r3, r8
 800f05c:	dcf1      	bgt.n	800f042 <_printf_float+0x40e>
 800f05e:	464b      	mov	r3, r9
 800f060:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f064:	e6dc      	b.n	800ee20 <_printf_float+0x1ec>
 800f066:	f04f 0800 	mov.w	r8, #0
 800f06a:	f104 0a1a 	add.w	sl, r4, #26
 800f06e:	e7f2      	b.n	800f056 <_printf_float+0x422>
 800f070:	2301      	movs	r3, #1
 800f072:	4642      	mov	r2, r8
 800f074:	e7df      	b.n	800f036 <_printf_float+0x402>
 800f076:	2301      	movs	r3, #1
 800f078:	464a      	mov	r2, r9
 800f07a:	4631      	mov	r1, r6
 800f07c:	4628      	mov	r0, r5
 800f07e:	47b8      	blx	r7
 800f080:	3001      	adds	r0, #1
 800f082:	f43f ae38 	beq.w	800ecf6 <_printf_float+0xc2>
 800f086:	f108 0801 	add.w	r8, r8, #1
 800f08a:	68e3      	ldr	r3, [r4, #12]
 800f08c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f08e:	1a5b      	subs	r3, r3, r1
 800f090:	4543      	cmp	r3, r8
 800f092:	dcf0      	bgt.n	800f076 <_printf_float+0x442>
 800f094:	e6fa      	b.n	800ee8c <_printf_float+0x258>
 800f096:	f04f 0800 	mov.w	r8, #0
 800f09a:	f104 0919 	add.w	r9, r4, #25
 800f09e:	e7f4      	b.n	800f08a <_printf_float+0x456>

0800f0a0 <_printf_common>:
 800f0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a4:	4616      	mov	r6, r2
 800f0a6:	4699      	mov	r9, r3
 800f0a8:	688a      	ldr	r2, [r1, #8]
 800f0aa:	690b      	ldr	r3, [r1, #16]
 800f0ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	bfb8      	it	lt
 800f0b4:	4613      	movlt	r3, r2
 800f0b6:	6033      	str	r3, [r6, #0]
 800f0b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0bc:	4607      	mov	r7, r0
 800f0be:	460c      	mov	r4, r1
 800f0c0:	b10a      	cbz	r2, 800f0c6 <_printf_common+0x26>
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	6033      	str	r3, [r6, #0]
 800f0c6:	6823      	ldr	r3, [r4, #0]
 800f0c8:	0699      	lsls	r1, r3, #26
 800f0ca:	bf42      	ittt	mi
 800f0cc:	6833      	ldrmi	r3, [r6, #0]
 800f0ce:	3302      	addmi	r3, #2
 800f0d0:	6033      	strmi	r3, [r6, #0]
 800f0d2:	6825      	ldr	r5, [r4, #0]
 800f0d4:	f015 0506 	ands.w	r5, r5, #6
 800f0d8:	d106      	bne.n	800f0e8 <_printf_common+0x48>
 800f0da:	f104 0a19 	add.w	sl, r4, #25
 800f0de:	68e3      	ldr	r3, [r4, #12]
 800f0e0:	6832      	ldr	r2, [r6, #0]
 800f0e2:	1a9b      	subs	r3, r3, r2
 800f0e4:	42ab      	cmp	r3, r5
 800f0e6:	dc26      	bgt.n	800f136 <_printf_common+0x96>
 800f0e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f0ec:	1e13      	subs	r3, r2, #0
 800f0ee:	6822      	ldr	r2, [r4, #0]
 800f0f0:	bf18      	it	ne
 800f0f2:	2301      	movne	r3, #1
 800f0f4:	0692      	lsls	r2, r2, #26
 800f0f6:	d42b      	bmi.n	800f150 <_printf_common+0xb0>
 800f0f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0fc:	4649      	mov	r1, r9
 800f0fe:	4638      	mov	r0, r7
 800f100:	47c0      	blx	r8
 800f102:	3001      	adds	r0, #1
 800f104:	d01e      	beq.n	800f144 <_printf_common+0xa4>
 800f106:	6823      	ldr	r3, [r4, #0]
 800f108:	68e5      	ldr	r5, [r4, #12]
 800f10a:	6832      	ldr	r2, [r6, #0]
 800f10c:	f003 0306 	and.w	r3, r3, #6
 800f110:	2b04      	cmp	r3, #4
 800f112:	bf08      	it	eq
 800f114:	1aad      	subeq	r5, r5, r2
 800f116:	68a3      	ldr	r3, [r4, #8]
 800f118:	6922      	ldr	r2, [r4, #16]
 800f11a:	bf0c      	ite	eq
 800f11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f120:	2500      	movne	r5, #0
 800f122:	4293      	cmp	r3, r2
 800f124:	bfc4      	itt	gt
 800f126:	1a9b      	subgt	r3, r3, r2
 800f128:	18ed      	addgt	r5, r5, r3
 800f12a:	2600      	movs	r6, #0
 800f12c:	341a      	adds	r4, #26
 800f12e:	42b5      	cmp	r5, r6
 800f130:	d11a      	bne.n	800f168 <_printf_common+0xc8>
 800f132:	2000      	movs	r0, #0
 800f134:	e008      	b.n	800f148 <_printf_common+0xa8>
 800f136:	2301      	movs	r3, #1
 800f138:	4652      	mov	r2, sl
 800f13a:	4649      	mov	r1, r9
 800f13c:	4638      	mov	r0, r7
 800f13e:	47c0      	blx	r8
 800f140:	3001      	adds	r0, #1
 800f142:	d103      	bne.n	800f14c <_printf_common+0xac>
 800f144:	f04f 30ff 	mov.w	r0, #4294967295
 800f148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f14c:	3501      	adds	r5, #1
 800f14e:	e7c6      	b.n	800f0de <_printf_common+0x3e>
 800f150:	18e1      	adds	r1, r4, r3
 800f152:	1c5a      	adds	r2, r3, #1
 800f154:	2030      	movs	r0, #48	; 0x30
 800f156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f15a:	4422      	add	r2, r4
 800f15c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f164:	3302      	adds	r3, #2
 800f166:	e7c7      	b.n	800f0f8 <_printf_common+0x58>
 800f168:	2301      	movs	r3, #1
 800f16a:	4622      	mov	r2, r4
 800f16c:	4649      	mov	r1, r9
 800f16e:	4638      	mov	r0, r7
 800f170:	47c0      	blx	r8
 800f172:	3001      	adds	r0, #1
 800f174:	d0e6      	beq.n	800f144 <_printf_common+0xa4>
 800f176:	3601      	adds	r6, #1
 800f178:	e7d9      	b.n	800f12e <_printf_common+0x8e>
	...

0800f17c <_printf_i>:
 800f17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f180:	460c      	mov	r4, r1
 800f182:	4691      	mov	r9, r2
 800f184:	7e27      	ldrb	r7, [r4, #24]
 800f186:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f188:	2f78      	cmp	r7, #120	; 0x78
 800f18a:	4680      	mov	r8, r0
 800f18c:	469a      	mov	sl, r3
 800f18e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f192:	d807      	bhi.n	800f1a4 <_printf_i+0x28>
 800f194:	2f62      	cmp	r7, #98	; 0x62
 800f196:	d80a      	bhi.n	800f1ae <_printf_i+0x32>
 800f198:	2f00      	cmp	r7, #0
 800f19a:	f000 80d8 	beq.w	800f34e <_printf_i+0x1d2>
 800f19e:	2f58      	cmp	r7, #88	; 0x58
 800f1a0:	f000 80a3 	beq.w	800f2ea <_printf_i+0x16e>
 800f1a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f1a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1ac:	e03a      	b.n	800f224 <_printf_i+0xa8>
 800f1ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1b2:	2b15      	cmp	r3, #21
 800f1b4:	d8f6      	bhi.n	800f1a4 <_printf_i+0x28>
 800f1b6:	a001      	add	r0, pc, #4	; (adr r0, 800f1bc <_printf_i+0x40>)
 800f1b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f1bc:	0800f215 	.word	0x0800f215
 800f1c0:	0800f229 	.word	0x0800f229
 800f1c4:	0800f1a5 	.word	0x0800f1a5
 800f1c8:	0800f1a5 	.word	0x0800f1a5
 800f1cc:	0800f1a5 	.word	0x0800f1a5
 800f1d0:	0800f1a5 	.word	0x0800f1a5
 800f1d4:	0800f229 	.word	0x0800f229
 800f1d8:	0800f1a5 	.word	0x0800f1a5
 800f1dc:	0800f1a5 	.word	0x0800f1a5
 800f1e0:	0800f1a5 	.word	0x0800f1a5
 800f1e4:	0800f1a5 	.word	0x0800f1a5
 800f1e8:	0800f335 	.word	0x0800f335
 800f1ec:	0800f259 	.word	0x0800f259
 800f1f0:	0800f317 	.word	0x0800f317
 800f1f4:	0800f1a5 	.word	0x0800f1a5
 800f1f8:	0800f1a5 	.word	0x0800f1a5
 800f1fc:	0800f357 	.word	0x0800f357
 800f200:	0800f1a5 	.word	0x0800f1a5
 800f204:	0800f259 	.word	0x0800f259
 800f208:	0800f1a5 	.word	0x0800f1a5
 800f20c:	0800f1a5 	.word	0x0800f1a5
 800f210:	0800f31f 	.word	0x0800f31f
 800f214:	680b      	ldr	r3, [r1, #0]
 800f216:	1d1a      	adds	r2, r3, #4
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	600a      	str	r2, [r1, #0]
 800f21c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f224:	2301      	movs	r3, #1
 800f226:	e0a3      	b.n	800f370 <_printf_i+0x1f4>
 800f228:	6825      	ldr	r5, [r4, #0]
 800f22a:	6808      	ldr	r0, [r1, #0]
 800f22c:	062e      	lsls	r6, r5, #24
 800f22e:	f100 0304 	add.w	r3, r0, #4
 800f232:	d50a      	bpl.n	800f24a <_printf_i+0xce>
 800f234:	6805      	ldr	r5, [r0, #0]
 800f236:	600b      	str	r3, [r1, #0]
 800f238:	2d00      	cmp	r5, #0
 800f23a:	da03      	bge.n	800f244 <_printf_i+0xc8>
 800f23c:	232d      	movs	r3, #45	; 0x2d
 800f23e:	426d      	negs	r5, r5
 800f240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f244:	485e      	ldr	r0, [pc, #376]	; (800f3c0 <_printf_i+0x244>)
 800f246:	230a      	movs	r3, #10
 800f248:	e019      	b.n	800f27e <_printf_i+0x102>
 800f24a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f24e:	6805      	ldr	r5, [r0, #0]
 800f250:	600b      	str	r3, [r1, #0]
 800f252:	bf18      	it	ne
 800f254:	b22d      	sxthne	r5, r5
 800f256:	e7ef      	b.n	800f238 <_printf_i+0xbc>
 800f258:	680b      	ldr	r3, [r1, #0]
 800f25a:	6825      	ldr	r5, [r4, #0]
 800f25c:	1d18      	adds	r0, r3, #4
 800f25e:	6008      	str	r0, [r1, #0]
 800f260:	0628      	lsls	r0, r5, #24
 800f262:	d501      	bpl.n	800f268 <_printf_i+0xec>
 800f264:	681d      	ldr	r5, [r3, #0]
 800f266:	e002      	b.n	800f26e <_printf_i+0xf2>
 800f268:	0669      	lsls	r1, r5, #25
 800f26a:	d5fb      	bpl.n	800f264 <_printf_i+0xe8>
 800f26c:	881d      	ldrh	r5, [r3, #0]
 800f26e:	4854      	ldr	r0, [pc, #336]	; (800f3c0 <_printf_i+0x244>)
 800f270:	2f6f      	cmp	r7, #111	; 0x6f
 800f272:	bf0c      	ite	eq
 800f274:	2308      	moveq	r3, #8
 800f276:	230a      	movne	r3, #10
 800f278:	2100      	movs	r1, #0
 800f27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f27e:	6866      	ldr	r6, [r4, #4]
 800f280:	60a6      	str	r6, [r4, #8]
 800f282:	2e00      	cmp	r6, #0
 800f284:	bfa2      	ittt	ge
 800f286:	6821      	ldrge	r1, [r4, #0]
 800f288:	f021 0104 	bicge.w	r1, r1, #4
 800f28c:	6021      	strge	r1, [r4, #0]
 800f28e:	b90d      	cbnz	r5, 800f294 <_printf_i+0x118>
 800f290:	2e00      	cmp	r6, #0
 800f292:	d04d      	beq.n	800f330 <_printf_i+0x1b4>
 800f294:	4616      	mov	r6, r2
 800f296:	fbb5 f1f3 	udiv	r1, r5, r3
 800f29a:	fb03 5711 	mls	r7, r3, r1, r5
 800f29e:	5dc7      	ldrb	r7, [r0, r7]
 800f2a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f2a4:	462f      	mov	r7, r5
 800f2a6:	42bb      	cmp	r3, r7
 800f2a8:	460d      	mov	r5, r1
 800f2aa:	d9f4      	bls.n	800f296 <_printf_i+0x11a>
 800f2ac:	2b08      	cmp	r3, #8
 800f2ae:	d10b      	bne.n	800f2c8 <_printf_i+0x14c>
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	07df      	lsls	r7, r3, #31
 800f2b4:	d508      	bpl.n	800f2c8 <_printf_i+0x14c>
 800f2b6:	6923      	ldr	r3, [r4, #16]
 800f2b8:	6861      	ldr	r1, [r4, #4]
 800f2ba:	4299      	cmp	r1, r3
 800f2bc:	bfde      	ittt	le
 800f2be:	2330      	movle	r3, #48	; 0x30
 800f2c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f2c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f2c8:	1b92      	subs	r2, r2, r6
 800f2ca:	6122      	str	r2, [r4, #16]
 800f2cc:	f8cd a000 	str.w	sl, [sp]
 800f2d0:	464b      	mov	r3, r9
 800f2d2:	aa03      	add	r2, sp, #12
 800f2d4:	4621      	mov	r1, r4
 800f2d6:	4640      	mov	r0, r8
 800f2d8:	f7ff fee2 	bl	800f0a0 <_printf_common>
 800f2dc:	3001      	adds	r0, #1
 800f2de:	d14c      	bne.n	800f37a <_printf_i+0x1fe>
 800f2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e4:	b004      	add	sp, #16
 800f2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ea:	4835      	ldr	r0, [pc, #212]	; (800f3c0 <_printf_i+0x244>)
 800f2ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f2f0:	6823      	ldr	r3, [r4, #0]
 800f2f2:	680e      	ldr	r6, [r1, #0]
 800f2f4:	061f      	lsls	r7, r3, #24
 800f2f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f2fa:	600e      	str	r6, [r1, #0]
 800f2fc:	d514      	bpl.n	800f328 <_printf_i+0x1ac>
 800f2fe:	07d9      	lsls	r1, r3, #31
 800f300:	bf44      	itt	mi
 800f302:	f043 0320 	orrmi.w	r3, r3, #32
 800f306:	6023      	strmi	r3, [r4, #0]
 800f308:	b91d      	cbnz	r5, 800f312 <_printf_i+0x196>
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	f023 0320 	bic.w	r3, r3, #32
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	2310      	movs	r3, #16
 800f314:	e7b0      	b.n	800f278 <_printf_i+0xfc>
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	f043 0320 	orr.w	r3, r3, #32
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	2378      	movs	r3, #120	; 0x78
 800f320:	4828      	ldr	r0, [pc, #160]	; (800f3c4 <_printf_i+0x248>)
 800f322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f326:	e7e3      	b.n	800f2f0 <_printf_i+0x174>
 800f328:	065e      	lsls	r6, r3, #25
 800f32a:	bf48      	it	mi
 800f32c:	b2ad      	uxthmi	r5, r5
 800f32e:	e7e6      	b.n	800f2fe <_printf_i+0x182>
 800f330:	4616      	mov	r6, r2
 800f332:	e7bb      	b.n	800f2ac <_printf_i+0x130>
 800f334:	680b      	ldr	r3, [r1, #0]
 800f336:	6826      	ldr	r6, [r4, #0]
 800f338:	6960      	ldr	r0, [r4, #20]
 800f33a:	1d1d      	adds	r5, r3, #4
 800f33c:	600d      	str	r5, [r1, #0]
 800f33e:	0635      	lsls	r5, r6, #24
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	d501      	bpl.n	800f348 <_printf_i+0x1cc>
 800f344:	6018      	str	r0, [r3, #0]
 800f346:	e002      	b.n	800f34e <_printf_i+0x1d2>
 800f348:	0671      	lsls	r1, r6, #25
 800f34a:	d5fb      	bpl.n	800f344 <_printf_i+0x1c8>
 800f34c:	8018      	strh	r0, [r3, #0]
 800f34e:	2300      	movs	r3, #0
 800f350:	6123      	str	r3, [r4, #16]
 800f352:	4616      	mov	r6, r2
 800f354:	e7ba      	b.n	800f2cc <_printf_i+0x150>
 800f356:	680b      	ldr	r3, [r1, #0]
 800f358:	1d1a      	adds	r2, r3, #4
 800f35a:	600a      	str	r2, [r1, #0]
 800f35c:	681e      	ldr	r6, [r3, #0]
 800f35e:	6862      	ldr	r2, [r4, #4]
 800f360:	2100      	movs	r1, #0
 800f362:	4630      	mov	r0, r6
 800f364:	f7f0 ff3c 	bl	80001e0 <memchr>
 800f368:	b108      	cbz	r0, 800f36e <_printf_i+0x1f2>
 800f36a:	1b80      	subs	r0, r0, r6
 800f36c:	6060      	str	r0, [r4, #4]
 800f36e:	6863      	ldr	r3, [r4, #4]
 800f370:	6123      	str	r3, [r4, #16]
 800f372:	2300      	movs	r3, #0
 800f374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f378:	e7a8      	b.n	800f2cc <_printf_i+0x150>
 800f37a:	6923      	ldr	r3, [r4, #16]
 800f37c:	4632      	mov	r2, r6
 800f37e:	4649      	mov	r1, r9
 800f380:	4640      	mov	r0, r8
 800f382:	47d0      	blx	sl
 800f384:	3001      	adds	r0, #1
 800f386:	d0ab      	beq.n	800f2e0 <_printf_i+0x164>
 800f388:	6823      	ldr	r3, [r4, #0]
 800f38a:	079b      	lsls	r3, r3, #30
 800f38c:	d413      	bmi.n	800f3b6 <_printf_i+0x23a>
 800f38e:	68e0      	ldr	r0, [r4, #12]
 800f390:	9b03      	ldr	r3, [sp, #12]
 800f392:	4298      	cmp	r0, r3
 800f394:	bfb8      	it	lt
 800f396:	4618      	movlt	r0, r3
 800f398:	e7a4      	b.n	800f2e4 <_printf_i+0x168>
 800f39a:	2301      	movs	r3, #1
 800f39c:	4632      	mov	r2, r6
 800f39e:	4649      	mov	r1, r9
 800f3a0:	4640      	mov	r0, r8
 800f3a2:	47d0      	blx	sl
 800f3a4:	3001      	adds	r0, #1
 800f3a6:	d09b      	beq.n	800f2e0 <_printf_i+0x164>
 800f3a8:	3501      	adds	r5, #1
 800f3aa:	68e3      	ldr	r3, [r4, #12]
 800f3ac:	9903      	ldr	r1, [sp, #12]
 800f3ae:	1a5b      	subs	r3, r3, r1
 800f3b0:	42ab      	cmp	r3, r5
 800f3b2:	dcf2      	bgt.n	800f39a <_printf_i+0x21e>
 800f3b4:	e7eb      	b.n	800f38e <_printf_i+0x212>
 800f3b6:	2500      	movs	r5, #0
 800f3b8:	f104 0619 	add.w	r6, r4, #25
 800f3bc:	e7f5      	b.n	800f3aa <_printf_i+0x22e>
 800f3be:	bf00      	nop
 800f3c0:	08012ade 	.word	0x08012ade
 800f3c4:	08012aef 	.word	0x08012aef

0800f3c8 <_sbrk_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4d06      	ldr	r5, [pc, #24]	; (800f3e4 <_sbrk_r+0x1c>)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4608      	mov	r0, r1
 800f3d2:	602b      	str	r3, [r5, #0]
 800f3d4:	f7f5 fb4c 	bl	8004a70 <_sbrk>
 800f3d8:	1c43      	adds	r3, r0, #1
 800f3da:	d102      	bne.n	800f3e2 <_sbrk_r+0x1a>
 800f3dc:	682b      	ldr	r3, [r5, #0]
 800f3de:	b103      	cbz	r3, 800f3e2 <_sbrk_r+0x1a>
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	bd38      	pop	{r3, r4, r5, pc}
 800f3e4:	20004e78 	.word	0x20004e78

0800f3e8 <siprintf>:
 800f3e8:	b40e      	push	{r1, r2, r3}
 800f3ea:	b500      	push	{lr}
 800f3ec:	b09c      	sub	sp, #112	; 0x70
 800f3ee:	ab1d      	add	r3, sp, #116	; 0x74
 800f3f0:	9002      	str	r0, [sp, #8]
 800f3f2:	9006      	str	r0, [sp, #24]
 800f3f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3f8:	4809      	ldr	r0, [pc, #36]	; (800f420 <siprintf+0x38>)
 800f3fa:	9107      	str	r1, [sp, #28]
 800f3fc:	9104      	str	r1, [sp, #16]
 800f3fe:	4909      	ldr	r1, [pc, #36]	; (800f424 <siprintf+0x3c>)
 800f400:	f853 2b04 	ldr.w	r2, [r3], #4
 800f404:	9105      	str	r1, [sp, #20]
 800f406:	6800      	ldr	r0, [r0, #0]
 800f408:	9301      	str	r3, [sp, #4]
 800f40a:	a902      	add	r1, sp, #8
 800f40c:	f001 fa7c 	bl	8010908 <_svfiprintf_r>
 800f410:	9b02      	ldr	r3, [sp, #8]
 800f412:	2200      	movs	r2, #0
 800f414:	701a      	strb	r2, [r3, #0]
 800f416:	b01c      	add	sp, #112	; 0x70
 800f418:	f85d eb04 	ldr.w	lr, [sp], #4
 800f41c:	b003      	add	sp, #12
 800f41e:	4770      	bx	lr
 800f420:	20000028 	.word	0x20000028
 800f424:	ffff0208 	.word	0xffff0208

0800f428 <quorem>:
 800f428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	6903      	ldr	r3, [r0, #16]
 800f42e:	690c      	ldr	r4, [r1, #16]
 800f430:	42a3      	cmp	r3, r4
 800f432:	4607      	mov	r7, r0
 800f434:	f2c0 8081 	blt.w	800f53a <quorem+0x112>
 800f438:	3c01      	subs	r4, #1
 800f43a:	f101 0814 	add.w	r8, r1, #20
 800f43e:	f100 0514 	add.w	r5, r0, #20
 800f442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f446:	9301      	str	r3, [sp, #4]
 800f448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f44c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f450:	3301      	adds	r3, #1
 800f452:	429a      	cmp	r2, r3
 800f454:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f458:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f45c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f460:	d331      	bcc.n	800f4c6 <quorem+0x9e>
 800f462:	f04f 0e00 	mov.w	lr, #0
 800f466:	4640      	mov	r0, r8
 800f468:	46ac      	mov	ip, r5
 800f46a:	46f2      	mov	sl, lr
 800f46c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f470:	b293      	uxth	r3, r2
 800f472:	fb06 e303 	mla	r3, r6, r3, lr
 800f476:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	ebaa 0303 	sub.w	r3, sl, r3
 800f480:	0c12      	lsrs	r2, r2, #16
 800f482:	f8dc a000 	ldr.w	sl, [ip]
 800f486:	fb06 e202 	mla	r2, r6, r2, lr
 800f48a:	fa13 f38a 	uxtah	r3, r3, sl
 800f48e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f492:	fa1f fa82 	uxth.w	sl, r2
 800f496:	f8dc 2000 	ldr.w	r2, [ip]
 800f49a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f49e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4a8:	4581      	cmp	r9, r0
 800f4aa:	f84c 3b04 	str.w	r3, [ip], #4
 800f4ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f4b2:	d2db      	bcs.n	800f46c <quorem+0x44>
 800f4b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800f4b8:	b92b      	cbnz	r3, 800f4c6 <quorem+0x9e>
 800f4ba:	9b01      	ldr	r3, [sp, #4]
 800f4bc:	3b04      	subs	r3, #4
 800f4be:	429d      	cmp	r5, r3
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	d32e      	bcc.n	800f522 <quorem+0xfa>
 800f4c4:	613c      	str	r4, [r7, #16]
 800f4c6:	4638      	mov	r0, r7
 800f4c8:	f001 f8b4 	bl	8010634 <__mcmp>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	db24      	blt.n	800f51a <quorem+0xf2>
 800f4d0:	3601      	adds	r6, #1
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	f04f 0c00 	mov.w	ip, #0
 800f4d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f4dc:	f8d0 e000 	ldr.w	lr, [r0]
 800f4e0:	b293      	uxth	r3, r2
 800f4e2:	ebac 0303 	sub.w	r3, ip, r3
 800f4e6:	0c12      	lsrs	r2, r2, #16
 800f4e8:	fa13 f38e 	uxtah	r3, r3, lr
 800f4ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f4f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4fa:	45c1      	cmp	r9, r8
 800f4fc:	f840 3b04 	str.w	r3, [r0], #4
 800f500:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f504:	d2e8      	bcs.n	800f4d8 <quorem+0xb0>
 800f506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f50a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f50e:	b922      	cbnz	r2, 800f51a <quorem+0xf2>
 800f510:	3b04      	subs	r3, #4
 800f512:	429d      	cmp	r5, r3
 800f514:	461a      	mov	r2, r3
 800f516:	d30a      	bcc.n	800f52e <quorem+0x106>
 800f518:	613c      	str	r4, [r7, #16]
 800f51a:	4630      	mov	r0, r6
 800f51c:	b003      	add	sp, #12
 800f51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f522:	6812      	ldr	r2, [r2, #0]
 800f524:	3b04      	subs	r3, #4
 800f526:	2a00      	cmp	r2, #0
 800f528:	d1cc      	bne.n	800f4c4 <quorem+0x9c>
 800f52a:	3c01      	subs	r4, #1
 800f52c:	e7c7      	b.n	800f4be <quorem+0x96>
 800f52e:	6812      	ldr	r2, [r2, #0]
 800f530:	3b04      	subs	r3, #4
 800f532:	2a00      	cmp	r2, #0
 800f534:	d1f0      	bne.n	800f518 <quorem+0xf0>
 800f536:	3c01      	subs	r4, #1
 800f538:	e7eb      	b.n	800f512 <quorem+0xea>
 800f53a:	2000      	movs	r0, #0
 800f53c:	e7ee      	b.n	800f51c <quorem+0xf4>
	...

0800f540 <_dtoa_r>:
 800f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f544:	ed2d 8b02 	vpush	{d8}
 800f548:	ec57 6b10 	vmov	r6, r7, d0
 800f54c:	b095      	sub	sp, #84	; 0x54
 800f54e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f550:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f554:	9105      	str	r1, [sp, #20]
 800f556:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f55a:	4604      	mov	r4, r0
 800f55c:	9209      	str	r2, [sp, #36]	; 0x24
 800f55e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f560:	b975      	cbnz	r5, 800f580 <_dtoa_r+0x40>
 800f562:	2010      	movs	r0, #16
 800f564:	f7ff f9f6 	bl	800e954 <malloc>
 800f568:	4602      	mov	r2, r0
 800f56a:	6260      	str	r0, [r4, #36]	; 0x24
 800f56c:	b920      	cbnz	r0, 800f578 <_dtoa_r+0x38>
 800f56e:	4bb2      	ldr	r3, [pc, #712]	; (800f838 <_dtoa_r+0x2f8>)
 800f570:	21ea      	movs	r1, #234	; 0xea
 800f572:	48b2      	ldr	r0, [pc, #712]	; (800f83c <_dtoa_r+0x2fc>)
 800f574:	f001 fac8 	bl	8010b08 <__assert_func>
 800f578:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f57c:	6005      	str	r5, [r0, #0]
 800f57e:	60c5      	str	r5, [r0, #12]
 800f580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f582:	6819      	ldr	r1, [r3, #0]
 800f584:	b151      	cbz	r1, 800f59c <_dtoa_r+0x5c>
 800f586:	685a      	ldr	r2, [r3, #4]
 800f588:	604a      	str	r2, [r1, #4]
 800f58a:	2301      	movs	r3, #1
 800f58c:	4093      	lsls	r3, r2
 800f58e:	608b      	str	r3, [r1, #8]
 800f590:	4620      	mov	r0, r4
 800f592:	f000 fe11 	bl	80101b8 <_Bfree>
 800f596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	1e3b      	subs	r3, r7, #0
 800f59e:	bfb9      	ittee	lt
 800f5a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f5a4:	9303      	strlt	r3, [sp, #12]
 800f5a6:	2300      	movge	r3, #0
 800f5a8:	f8c8 3000 	strge.w	r3, [r8]
 800f5ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f5b0:	4ba3      	ldr	r3, [pc, #652]	; (800f840 <_dtoa_r+0x300>)
 800f5b2:	bfbc      	itt	lt
 800f5b4:	2201      	movlt	r2, #1
 800f5b6:	f8c8 2000 	strlt.w	r2, [r8]
 800f5ba:	ea33 0309 	bics.w	r3, r3, r9
 800f5be:	d11b      	bne.n	800f5f8 <_dtoa_r+0xb8>
 800f5c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f5c6:	6013      	str	r3, [r2, #0]
 800f5c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5cc:	4333      	orrs	r3, r6
 800f5ce:	f000 857a 	beq.w	80100c6 <_dtoa_r+0xb86>
 800f5d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5d4:	b963      	cbnz	r3, 800f5f0 <_dtoa_r+0xb0>
 800f5d6:	4b9b      	ldr	r3, [pc, #620]	; (800f844 <_dtoa_r+0x304>)
 800f5d8:	e024      	b.n	800f624 <_dtoa_r+0xe4>
 800f5da:	4b9b      	ldr	r3, [pc, #620]	; (800f848 <_dtoa_r+0x308>)
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	3308      	adds	r3, #8
 800f5e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5e2:	6013      	str	r3, [r2, #0]
 800f5e4:	9800      	ldr	r0, [sp, #0]
 800f5e6:	b015      	add	sp, #84	; 0x54
 800f5e8:	ecbd 8b02 	vpop	{d8}
 800f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f0:	4b94      	ldr	r3, [pc, #592]	; (800f844 <_dtoa_r+0x304>)
 800f5f2:	9300      	str	r3, [sp, #0]
 800f5f4:	3303      	adds	r3, #3
 800f5f6:	e7f3      	b.n	800f5e0 <_dtoa_r+0xa0>
 800f5f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	ec51 0b17 	vmov	r0, r1, d7
 800f602:	2300      	movs	r3, #0
 800f604:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f608:	f7f1 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f60c:	4680      	mov	r8, r0
 800f60e:	b158      	cbz	r0, 800f628 <_dtoa_r+0xe8>
 800f610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f612:	2301      	movs	r3, #1
 800f614:	6013      	str	r3, [r2, #0]
 800f616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f000 8551 	beq.w	80100c0 <_dtoa_r+0xb80>
 800f61e:	488b      	ldr	r0, [pc, #556]	; (800f84c <_dtoa_r+0x30c>)
 800f620:	6018      	str	r0, [r3, #0]
 800f622:	1e43      	subs	r3, r0, #1
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	e7dd      	b.n	800f5e4 <_dtoa_r+0xa4>
 800f628:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f62c:	aa12      	add	r2, sp, #72	; 0x48
 800f62e:	a913      	add	r1, sp, #76	; 0x4c
 800f630:	4620      	mov	r0, r4
 800f632:	f001 f8a3 	bl	801077c <__d2b>
 800f636:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f63a:	4683      	mov	fp, r0
 800f63c:	2d00      	cmp	r5, #0
 800f63e:	d07c      	beq.n	800f73a <_dtoa_r+0x1fa>
 800f640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f642:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f64a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f64e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f652:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f656:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f65a:	4b7d      	ldr	r3, [pc, #500]	; (800f850 <_dtoa_r+0x310>)
 800f65c:	2200      	movs	r2, #0
 800f65e:	4630      	mov	r0, r6
 800f660:	4639      	mov	r1, r7
 800f662:	f7f0 fe11 	bl	8000288 <__aeabi_dsub>
 800f666:	a36e      	add	r3, pc, #440	; (adr r3, 800f820 <_dtoa_r+0x2e0>)
 800f668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66c:	f7f0 ffc4 	bl	80005f8 <__aeabi_dmul>
 800f670:	a36d      	add	r3, pc, #436	; (adr r3, 800f828 <_dtoa_r+0x2e8>)
 800f672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f676:	f7f0 fe09 	bl	800028c <__adddf3>
 800f67a:	4606      	mov	r6, r0
 800f67c:	4628      	mov	r0, r5
 800f67e:	460f      	mov	r7, r1
 800f680:	f7f0 ff50 	bl	8000524 <__aeabi_i2d>
 800f684:	a36a      	add	r3, pc, #424	; (adr r3, 800f830 <_dtoa_r+0x2f0>)
 800f686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68a:	f7f0 ffb5 	bl	80005f8 <__aeabi_dmul>
 800f68e:	4602      	mov	r2, r0
 800f690:	460b      	mov	r3, r1
 800f692:	4630      	mov	r0, r6
 800f694:	4639      	mov	r1, r7
 800f696:	f7f0 fdf9 	bl	800028c <__adddf3>
 800f69a:	4606      	mov	r6, r0
 800f69c:	460f      	mov	r7, r1
 800f69e:	f7f1 fa5b 	bl	8000b58 <__aeabi_d2iz>
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	4682      	mov	sl, r0
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	f7f1 fa16 	bl	8000adc <__aeabi_dcmplt>
 800f6b0:	b148      	cbz	r0, 800f6c6 <_dtoa_r+0x186>
 800f6b2:	4650      	mov	r0, sl
 800f6b4:	f7f0 ff36 	bl	8000524 <__aeabi_i2d>
 800f6b8:	4632      	mov	r2, r6
 800f6ba:	463b      	mov	r3, r7
 800f6bc:	f7f1 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6c0:	b908      	cbnz	r0, 800f6c6 <_dtoa_r+0x186>
 800f6c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6c6:	f1ba 0f16 	cmp.w	sl, #22
 800f6ca:	d854      	bhi.n	800f776 <_dtoa_r+0x236>
 800f6cc:	4b61      	ldr	r3, [pc, #388]	; (800f854 <_dtoa_r+0x314>)
 800f6ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f6da:	f7f1 f9ff 	bl	8000adc <__aeabi_dcmplt>
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d04b      	beq.n	800f77a <_dtoa_r+0x23a>
 800f6e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	930e      	str	r3, [sp, #56]	; 0x38
 800f6ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6ec:	1b5d      	subs	r5, r3, r5
 800f6ee:	1e6b      	subs	r3, r5, #1
 800f6f0:	9304      	str	r3, [sp, #16]
 800f6f2:	bf43      	ittte	mi
 800f6f4:	2300      	movmi	r3, #0
 800f6f6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f6fa:	9304      	strmi	r3, [sp, #16]
 800f6fc:	f04f 0800 	movpl.w	r8, #0
 800f700:	f1ba 0f00 	cmp.w	sl, #0
 800f704:	db3b      	blt.n	800f77e <_dtoa_r+0x23e>
 800f706:	9b04      	ldr	r3, [sp, #16]
 800f708:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f70c:	4453      	add	r3, sl
 800f70e:	9304      	str	r3, [sp, #16]
 800f710:	2300      	movs	r3, #0
 800f712:	9306      	str	r3, [sp, #24]
 800f714:	9b05      	ldr	r3, [sp, #20]
 800f716:	2b09      	cmp	r3, #9
 800f718:	d869      	bhi.n	800f7ee <_dtoa_r+0x2ae>
 800f71a:	2b05      	cmp	r3, #5
 800f71c:	bfc4      	itt	gt
 800f71e:	3b04      	subgt	r3, #4
 800f720:	9305      	strgt	r3, [sp, #20]
 800f722:	9b05      	ldr	r3, [sp, #20]
 800f724:	f1a3 0302 	sub.w	r3, r3, #2
 800f728:	bfcc      	ite	gt
 800f72a:	2500      	movgt	r5, #0
 800f72c:	2501      	movle	r5, #1
 800f72e:	2b03      	cmp	r3, #3
 800f730:	d869      	bhi.n	800f806 <_dtoa_r+0x2c6>
 800f732:	e8df f003 	tbb	[pc, r3]
 800f736:	4e2c      	.short	0x4e2c
 800f738:	5a4c      	.short	0x5a4c
 800f73a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f73e:	441d      	add	r5, r3
 800f740:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f744:	2b20      	cmp	r3, #32
 800f746:	bfc1      	itttt	gt
 800f748:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f74c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f750:	fa09 f303 	lslgt.w	r3, r9, r3
 800f754:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f758:	bfda      	itte	le
 800f75a:	f1c3 0320 	rsble	r3, r3, #32
 800f75e:	fa06 f003 	lslle.w	r0, r6, r3
 800f762:	4318      	orrgt	r0, r3
 800f764:	f7f0 fece 	bl	8000504 <__aeabi_ui2d>
 800f768:	2301      	movs	r3, #1
 800f76a:	4606      	mov	r6, r0
 800f76c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f770:	3d01      	subs	r5, #1
 800f772:	9310      	str	r3, [sp, #64]	; 0x40
 800f774:	e771      	b.n	800f65a <_dtoa_r+0x11a>
 800f776:	2301      	movs	r3, #1
 800f778:	e7b6      	b.n	800f6e8 <_dtoa_r+0x1a8>
 800f77a:	900e      	str	r0, [sp, #56]	; 0x38
 800f77c:	e7b5      	b.n	800f6ea <_dtoa_r+0x1aa>
 800f77e:	f1ca 0300 	rsb	r3, sl, #0
 800f782:	9306      	str	r3, [sp, #24]
 800f784:	2300      	movs	r3, #0
 800f786:	eba8 080a 	sub.w	r8, r8, sl
 800f78a:	930d      	str	r3, [sp, #52]	; 0x34
 800f78c:	e7c2      	b.n	800f714 <_dtoa_r+0x1d4>
 800f78e:	2300      	movs	r3, #0
 800f790:	9308      	str	r3, [sp, #32]
 800f792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f794:	2b00      	cmp	r3, #0
 800f796:	dc39      	bgt.n	800f80c <_dtoa_r+0x2cc>
 800f798:	f04f 0901 	mov.w	r9, #1
 800f79c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f7a0:	464b      	mov	r3, r9
 800f7a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f7a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	6042      	str	r2, [r0, #4]
 800f7ac:	2204      	movs	r2, #4
 800f7ae:	f102 0614 	add.w	r6, r2, #20
 800f7b2:	429e      	cmp	r6, r3
 800f7b4:	6841      	ldr	r1, [r0, #4]
 800f7b6:	d92f      	bls.n	800f818 <_dtoa_r+0x2d8>
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f000 fcbd 	bl	8010138 <_Balloc>
 800f7be:	9000      	str	r0, [sp, #0]
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d14b      	bne.n	800f85c <_dtoa_r+0x31c>
 800f7c4:	4b24      	ldr	r3, [pc, #144]	; (800f858 <_dtoa_r+0x318>)
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7cc:	e6d1      	b.n	800f572 <_dtoa_r+0x32>
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e7de      	b.n	800f790 <_dtoa_r+0x250>
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	9308      	str	r3, [sp, #32]
 800f7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d8:	eb0a 0903 	add.w	r9, sl, r3
 800f7dc:	f109 0301 	add.w	r3, r9, #1
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	bfb8      	it	lt
 800f7e6:	2301      	movlt	r3, #1
 800f7e8:	e7dd      	b.n	800f7a6 <_dtoa_r+0x266>
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e7f2      	b.n	800f7d4 <_dtoa_r+0x294>
 800f7ee:	2501      	movs	r5, #1
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	9305      	str	r3, [sp, #20]
 800f7f4:	9508      	str	r5, [sp, #32]
 800f7f6:	f04f 39ff 	mov.w	r9, #4294967295
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f800:	2312      	movs	r3, #18
 800f802:	9209      	str	r2, [sp, #36]	; 0x24
 800f804:	e7cf      	b.n	800f7a6 <_dtoa_r+0x266>
 800f806:	2301      	movs	r3, #1
 800f808:	9308      	str	r3, [sp, #32]
 800f80a:	e7f4      	b.n	800f7f6 <_dtoa_r+0x2b6>
 800f80c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f810:	f8cd 9004 	str.w	r9, [sp, #4]
 800f814:	464b      	mov	r3, r9
 800f816:	e7c6      	b.n	800f7a6 <_dtoa_r+0x266>
 800f818:	3101      	adds	r1, #1
 800f81a:	6041      	str	r1, [r0, #4]
 800f81c:	0052      	lsls	r2, r2, #1
 800f81e:	e7c6      	b.n	800f7ae <_dtoa_r+0x26e>
 800f820:	636f4361 	.word	0x636f4361
 800f824:	3fd287a7 	.word	0x3fd287a7
 800f828:	8b60c8b3 	.word	0x8b60c8b3
 800f82c:	3fc68a28 	.word	0x3fc68a28
 800f830:	509f79fb 	.word	0x509f79fb
 800f834:	3fd34413 	.word	0x3fd34413
 800f838:	08012b0d 	.word	0x08012b0d
 800f83c:	08012b24 	.word	0x08012b24
 800f840:	7ff00000 	.word	0x7ff00000
 800f844:	08012b09 	.word	0x08012b09
 800f848:	08012b00 	.word	0x08012b00
 800f84c:	08012add 	.word	0x08012add
 800f850:	3ff80000 	.word	0x3ff80000
 800f854:	08012c20 	.word	0x08012c20
 800f858:	08012b83 	.word	0x08012b83
 800f85c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f85e:	9a00      	ldr	r2, [sp, #0]
 800f860:	601a      	str	r2, [r3, #0]
 800f862:	9b01      	ldr	r3, [sp, #4]
 800f864:	2b0e      	cmp	r3, #14
 800f866:	f200 80ad 	bhi.w	800f9c4 <_dtoa_r+0x484>
 800f86a:	2d00      	cmp	r5, #0
 800f86c:	f000 80aa 	beq.w	800f9c4 <_dtoa_r+0x484>
 800f870:	f1ba 0f00 	cmp.w	sl, #0
 800f874:	dd36      	ble.n	800f8e4 <_dtoa_r+0x3a4>
 800f876:	4ac3      	ldr	r2, [pc, #780]	; (800fb84 <_dtoa_r+0x644>)
 800f878:	f00a 030f 	and.w	r3, sl, #15
 800f87c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f880:	ed93 7b00 	vldr	d7, [r3]
 800f884:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f888:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f88c:	eeb0 8a47 	vmov.f32	s16, s14
 800f890:	eef0 8a67 	vmov.f32	s17, s15
 800f894:	d016      	beq.n	800f8c4 <_dtoa_r+0x384>
 800f896:	4bbc      	ldr	r3, [pc, #752]	; (800fb88 <_dtoa_r+0x648>)
 800f898:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f89c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f8a0:	f7f0 ffd4 	bl	800084c <__aeabi_ddiv>
 800f8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8a8:	f007 070f 	and.w	r7, r7, #15
 800f8ac:	2503      	movs	r5, #3
 800f8ae:	4eb6      	ldr	r6, [pc, #728]	; (800fb88 <_dtoa_r+0x648>)
 800f8b0:	b957      	cbnz	r7, 800f8c8 <_dtoa_r+0x388>
 800f8b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8b6:	ec53 2b18 	vmov	r2, r3, d8
 800f8ba:	f7f0 ffc7 	bl	800084c <__aeabi_ddiv>
 800f8be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8c2:	e029      	b.n	800f918 <_dtoa_r+0x3d8>
 800f8c4:	2502      	movs	r5, #2
 800f8c6:	e7f2      	b.n	800f8ae <_dtoa_r+0x36e>
 800f8c8:	07f9      	lsls	r1, r7, #31
 800f8ca:	d508      	bpl.n	800f8de <_dtoa_r+0x39e>
 800f8cc:	ec51 0b18 	vmov	r0, r1, d8
 800f8d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f8d4:	f7f0 fe90 	bl	80005f8 <__aeabi_dmul>
 800f8d8:	ec41 0b18 	vmov	d8, r0, r1
 800f8dc:	3501      	adds	r5, #1
 800f8de:	107f      	asrs	r7, r7, #1
 800f8e0:	3608      	adds	r6, #8
 800f8e2:	e7e5      	b.n	800f8b0 <_dtoa_r+0x370>
 800f8e4:	f000 80a6 	beq.w	800fa34 <_dtoa_r+0x4f4>
 800f8e8:	f1ca 0600 	rsb	r6, sl, #0
 800f8ec:	4ba5      	ldr	r3, [pc, #660]	; (800fb84 <_dtoa_r+0x644>)
 800f8ee:	4fa6      	ldr	r7, [pc, #664]	; (800fb88 <_dtoa_r+0x648>)
 800f8f0:	f006 020f 	and.w	r2, r6, #15
 800f8f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f900:	f7f0 fe7a 	bl	80005f8 <__aeabi_dmul>
 800f904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f908:	1136      	asrs	r6, r6, #4
 800f90a:	2300      	movs	r3, #0
 800f90c:	2502      	movs	r5, #2
 800f90e:	2e00      	cmp	r6, #0
 800f910:	f040 8085 	bne.w	800fa1e <_dtoa_r+0x4de>
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1d2      	bne.n	800f8be <_dtoa_r+0x37e>
 800f918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f000 808c 	beq.w	800fa38 <_dtoa_r+0x4f8>
 800f920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f924:	4b99      	ldr	r3, [pc, #612]	; (800fb8c <_dtoa_r+0x64c>)
 800f926:	2200      	movs	r2, #0
 800f928:	4630      	mov	r0, r6
 800f92a:	4639      	mov	r1, r7
 800f92c:	f7f1 f8d6 	bl	8000adc <__aeabi_dcmplt>
 800f930:	2800      	cmp	r0, #0
 800f932:	f000 8081 	beq.w	800fa38 <_dtoa_r+0x4f8>
 800f936:	9b01      	ldr	r3, [sp, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d07d      	beq.n	800fa38 <_dtoa_r+0x4f8>
 800f93c:	f1b9 0f00 	cmp.w	r9, #0
 800f940:	dd3c      	ble.n	800f9bc <_dtoa_r+0x47c>
 800f942:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f946:	9307      	str	r3, [sp, #28]
 800f948:	2200      	movs	r2, #0
 800f94a:	4b91      	ldr	r3, [pc, #580]	; (800fb90 <_dtoa_r+0x650>)
 800f94c:	4630      	mov	r0, r6
 800f94e:	4639      	mov	r1, r7
 800f950:	f7f0 fe52 	bl	80005f8 <__aeabi_dmul>
 800f954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f958:	3501      	adds	r5, #1
 800f95a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f95e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f962:	4628      	mov	r0, r5
 800f964:	f7f0 fdde 	bl	8000524 <__aeabi_i2d>
 800f968:	4632      	mov	r2, r6
 800f96a:	463b      	mov	r3, r7
 800f96c:	f7f0 fe44 	bl	80005f8 <__aeabi_dmul>
 800f970:	4b88      	ldr	r3, [pc, #544]	; (800fb94 <_dtoa_r+0x654>)
 800f972:	2200      	movs	r2, #0
 800f974:	f7f0 fc8a 	bl	800028c <__adddf3>
 800f978:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f980:	9303      	str	r3, [sp, #12]
 800f982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f984:	2b00      	cmp	r3, #0
 800f986:	d15c      	bne.n	800fa42 <_dtoa_r+0x502>
 800f988:	4b83      	ldr	r3, [pc, #524]	; (800fb98 <_dtoa_r+0x658>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	4630      	mov	r0, r6
 800f98e:	4639      	mov	r1, r7
 800f990:	f7f0 fc7a 	bl	8000288 <__aeabi_dsub>
 800f994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f998:	4606      	mov	r6, r0
 800f99a:	460f      	mov	r7, r1
 800f99c:	f7f1 f8bc 	bl	8000b18 <__aeabi_dcmpgt>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	f040 8296 	bne.w	800fed2 <_dtoa_r+0x992>
 800f9a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9b0:	4639      	mov	r1, r7
 800f9b2:	f7f1 f893 	bl	8000adc <__aeabi_dcmplt>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	f040 8288 	bne.w	800fecc <_dtoa_r+0x98c>
 800f9bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f9c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f2c0 8158 	blt.w	800fc7c <_dtoa_r+0x73c>
 800f9cc:	f1ba 0f0e 	cmp.w	sl, #14
 800f9d0:	f300 8154 	bgt.w	800fc7c <_dtoa_r+0x73c>
 800f9d4:	4b6b      	ldr	r3, [pc, #428]	; (800fb84 <_dtoa_r+0x644>)
 800f9d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9da:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f280 80e3 	bge.w	800fbac <_dtoa_r+0x66c>
 800f9e6:	9b01      	ldr	r3, [sp, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f300 80df 	bgt.w	800fbac <_dtoa_r+0x66c>
 800f9ee:	f040 826d 	bne.w	800fecc <_dtoa_r+0x98c>
 800f9f2:	4b69      	ldr	r3, [pc, #420]	; (800fb98 <_dtoa_r+0x658>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	4649      	mov	r1, r9
 800f9fa:	f7f0 fdfd 	bl	80005f8 <__aeabi_dmul>
 800f9fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa02:	f7f1 f87f 	bl	8000b04 <__aeabi_dcmpge>
 800fa06:	9e01      	ldr	r6, [sp, #4]
 800fa08:	4637      	mov	r7, r6
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	f040 8243 	bne.w	800fe96 <_dtoa_r+0x956>
 800fa10:	9d00      	ldr	r5, [sp, #0]
 800fa12:	2331      	movs	r3, #49	; 0x31
 800fa14:	f805 3b01 	strb.w	r3, [r5], #1
 800fa18:	f10a 0a01 	add.w	sl, sl, #1
 800fa1c:	e23f      	b.n	800fe9e <_dtoa_r+0x95e>
 800fa1e:	07f2      	lsls	r2, r6, #31
 800fa20:	d505      	bpl.n	800fa2e <_dtoa_r+0x4ee>
 800fa22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa26:	f7f0 fde7 	bl	80005f8 <__aeabi_dmul>
 800fa2a:	3501      	adds	r5, #1
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	1076      	asrs	r6, r6, #1
 800fa30:	3708      	adds	r7, #8
 800fa32:	e76c      	b.n	800f90e <_dtoa_r+0x3ce>
 800fa34:	2502      	movs	r5, #2
 800fa36:	e76f      	b.n	800f918 <_dtoa_r+0x3d8>
 800fa38:	9b01      	ldr	r3, [sp, #4]
 800fa3a:	f8cd a01c 	str.w	sl, [sp, #28]
 800fa3e:	930c      	str	r3, [sp, #48]	; 0x30
 800fa40:	e78d      	b.n	800f95e <_dtoa_r+0x41e>
 800fa42:	9900      	ldr	r1, [sp, #0]
 800fa44:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fa46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa48:	4b4e      	ldr	r3, [pc, #312]	; (800fb84 <_dtoa_r+0x644>)
 800fa4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa4e:	4401      	add	r1, r0
 800fa50:	9102      	str	r1, [sp, #8]
 800fa52:	9908      	ldr	r1, [sp, #32]
 800fa54:	eeb0 8a47 	vmov.f32	s16, s14
 800fa58:	eef0 8a67 	vmov.f32	s17, s15
 800fa5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa64:	2900      	cmp	r1, #0
 800fa66:	d045      	beq.n	800faf4 <_dtoa_r+0x5b4>
 800fa68:	494c      	ldr	r1, [pc, #304]	; (800fb9c <_dtoa_r+0x65c>)
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	f7f0 feee 	bl	800084c <__aeabi_ddiv>
 800fa70:	ec53 2b18 	vmov	r2, r3, d8
 800fa74:	f7f0 fc08 	bl	8000288 <__aeabi_dsub>
 800fa78:	9d00      	ldr	r5, [sp, #0]
 800fa7a:	ec41 0b18 	vmov	d8, r0, r1
 800fa7e:	4639      	mov	r1, r7
 800fa80:	4630      	mov	r0, r6
 800fa82:	f7f1 f869 	bl	8000b58 <__aeabi_d2iz>
 800fa86:	900c      	str	r0, [sp, #48]	; 0x30
 800fa88:	f7f0 fd4c 	bl	8000524 <__aeabi_i2d>
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	460b      	mov	r3, r1
 800fa90:	4630      	mov	r0, r6
 800fa92:	4639      	mov	r1, r7
 800fa94:	f7f0 fbf8 	bl	8000288 <__aeabi_dsub>
 800fa98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa9a:	3330      	adds	r3, #48	; 0x30
 800fa9c:	f805 3b01 	strb.w	r3, [r5], #1
 800faa0:	ec53 2b18 	vmov	r2, r3, d8
 800faa4:	4606      	mov	r6, r0
 800faa6:	460f      	mov	r7, r1
 800faa8:	f7f1 f818 	bl	8000adc <__aeabi_dcmplt>
 800faac:	2800      	cmp	r0, #0
 800faae:	d165      	bne.n	800fb7c <_dtoa_r+0x63c>
 800fab0:	4632      	mov	r2, r6
 800fab2:	463b      	mov	r3, r7
 800fab4:	4935      	ldr	r1, [pc, #212]	; (800fb8c <_dtoa_r+0x64c>)
 800fab6:	2000      	movs	r0, #0
 800fab8:	f7f0 fbe6 	bl	8000288 <__aeabi_dsub>
 800fabc:	ec53 2b18 	vmov	r2, r3, d8
 800fac0:	f7f1 f80c 	bl	8000adc <__aeabi_dcmplt>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	f040 80b9 	bne.w	800fc3c <_dtoa_r+0x6fc>
 800faca:	9b02      	ldr	r3, [sp, #8]
 800facc:	429d      	cmp	r5, r3
 800face:	f43f af75 	beq.w	800f9bc <_dtoa_r+0x47c>
 800fad2:	4b2f      	ldr	r3, [pc, #188]	; (800fb90 <_dtoa_r+0x650>)
 800fad4:	ec51 0b18 	vmov	r0, r1, d8
 800fad8:	2200      	movs	r2, #0
 800fada:	f7f0 fd8d 	bl	80005f8 <__aeabi_dmul>
 800fade:	4b2c      	ldr	r3, [pc, #176]	; (800fb90 <_dtoa_r+0x650>)
 800fae0:	ec41 0b18 	vmov	d8, r0, r1
 800fae4:	2200      	movs	r2, #0
 800fae6:	4630      	mov	r0, r6
 800fae8:	4639      	mov	r1, r7
 800faea:	f7f0 fd85 	bl	80005f8 <__aeabi_dmul>
 800faee:	4606      	mov	r6, r0
 800faf0:	460f      	mov	r7, r1
 800faf2:	e7c4      	b.n	800fa7e <_dtoa_r+0x53e>
 800faf4:	ec51 0b17 	vmov	r0, r1, d7
 800faf8:	f7f0 fd7e 	bl	80005f8 <__aeabi_dmul>
 800fafc:	9b02      	ldr	r3, [sp, #8]
 800fafe:	9d00      	ldr	r5, [sp, #0]
 800fb00:	930c      	str	r3, [sp, #48]	; 0x30
 800fb02:	ec41 0b18 	vmov	d8, r0, r1
 800fb06:	4639      	mov	r1, r7
 800fb08:	4630      	mov	r0, r6
 800fb0a:	f7f1 f825 	bl	8000b58 <__aeabi_d2iz>
 800fb0e:	9011      	str	r0, [sp, #68]	; 0x44
 800fb10:	f7f0 fd08 	bl	8000524 <__aeabi_i2d>
 800fb14:	4602      	mov	r2, r0
 800fb16:	460b      	mov	r3, r1
 800fb18:	4630      	mov	r0, r6
 800fb1a:	4639      	mov	r1, r7
 800fb1c:	f7f0 fbb4 	bl	8000288 <__aeabi_dsub>
 800fb20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb22:	3330      	adds	r3, #48	; 0x30
 800fb24:	f805 3b01 	strb.w	r3, [r5], #1
 800fb28:	9b02      	ldr	r3, [sp, #8]
 800fb2a:	429d      	cmp	r5, r3
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	460f      	mov	r7, r1
 800fb30:	f04f 0200 	mov.w	r2, #0
 800fb34:	d134      	bne.n	800fba0 <_dtoa_r+0x660>
 800fb36:	4b19      	ldr	r3, [pc, #100]	; (800fb9c <_dtoa_r+0x65c>)
 800fb38:	ec51 0b18 	vmov	r0, r1, d8
 800fb3c:	f7f0 fba6 	bl	800028c <__adddf3>
 800fb40:	4602      	mov	r2, r0
 800fb42:	460b      	mov	r3, r1
 800fb44:	4630      	mov	r0, r6
 800fb46:	4639      	mov	r1, r7
 800fb48:	f7f0 ffe6 	bl	8000b18 <__aeabi_dcmpgt>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d175      	bne.n	800fc3c <_dtoa_r+0x6fc>
 800fb50:	ec53 2b18 	vmov	r2, r3, d8
 800fb54:	4911      	ldr	r1, [pc, #68]	; (800fb9c <_dtoa_r+0x65c>)
 800fb56:	2000      	movs	r0, #0
 800fb58:	f7f0 fb96 	bl	8000288 <__aeabi_dsub>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	460b      	mov	r3, r1
 800fb60:	4630      	mov	r0, r6
 800fb62:	4639      	mov	r1, r7
 800fb64:	f7f0 ffba 	bl	8000adc <__aeabi_dcmplt>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	f43f af27 	beq.w	800f9bc <_dtoa_r+0x47c>
 800fb6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb70:	1e6b      	subs	r3, r5, #1
 800fb72:	930c      	str	r3, [sp, #48]	; 0x30
 800fb74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb78:	2b30      	cmp	r3, #48	; 0x30
 800fb7a:	d0f8      	beq.n	800fb6e <_dtoa_r+0x62e>
 800fb7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fb80:	e04a      	b.n	800fc18 <_dtoa_r+0x6d8>
 800fb82:	bf00      	nop
 800fb84:	08012c20 	.word	0x08012c20
 800fb88:	08012bf8 	.word	0x08012bf8
 800fb8c:	3ff00000 	.word	0x3ff00000
 800fb90:	40240000 	.word	0x40240000
 800fb94:	401c0000 	.word	0x401c0000
 800fb98:	40140000 	.word	0x40140000
 800fb9c:	3fe00000 	.word	0x3fe00000
 800fba0:	4baf      	ldr	r3, [pc, #700]	; (800fe60 <_dtoa_r+0x920>)
 800fba2:	f7f0 fd29 	bl	80005f8 <__aeabi_dmul>
 800fba6:	4606      	mov	r6, r0
 800fba8:	460f      	mov	r7, r1
 800fbaa:	e7ac      	b.n	800fb06 <_dtoa_r+0x5c6>
 800fbac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fbb0:	9d00      	ldr	r5, [sp, #0]
 800fbb2:	4642      	mov	r2, r8
 800fbb4:	464b      	mov	r3, r9
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	4639      	mov	r1, r7
 800fbba:	f7f0 fe47 	bl	800084c <__aeabi_ddiv>
 800fbbe:	f7f0 ffcb 	bl	8000b58 <__aeabi_d2iz>
 800fbc2:	9002      	str	r0, [sp, #8]
 800fbc4:	f7f0 fcae 	bl	8000524 <__aeabi_i2d>
 800fbc8:	4642      	mov	r2, r8
 800fbca:	464b      	mov	r3, r9
 800fbcc:	f7f0 fd14 	bl	80005f8 <__aeabi_dmul>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	4639      	mov	r1, r7
 800fbd8:	f7f0 fb56 	bl	8000288 <__aeabi_dsub>
 800fbdc:	9e02      	ldr	r6, [sp, #8]
 800fbde:	9f01      	ldr	r7, [sp, #4]
 800fbe0:	3630      	adds	r6, #48	; 0x30
 800fbe2:	f805 6b01 	strb.w	r6, [r5], #1
 800fbe6:	9e00      	ldr	r6, [sp, #0]
 800fbe8:	1bae      	subs	r6, r5, r6
 800fbea:	42b7      	cmp	r7, r6
 800fbec:	4602      	mov	r2, r0
 800fbee:	460b      	mov	r3, r1
 800fbf0:	d137      	bne.n	800fc62 <_dtoa_r+0x722>
 800fbf2:	f7f0 fb4b 	bl	800028c <__adddf3>
 800fbf6:	4642      	mov	r2, r8
 800fbf8:	464b      	mov	r3, r9
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	460f      	mov	r7, r1
 800fbfe:	f7f0 ff8b 	bl	8000b18 <__aeabi_dcmpgt>
 800fc02:	b9c8      	cbnz	r0, 800fc38 <_dtoa_r+0x6f8>
 800fc04:	4642      	mov	r2, r8
 800fc06:	464b      	mov	r3, r9
 800fc08:	4630      	mov	r0, r6
 800fc0a:	4639      	mov	r1, r7
 800fc0c:	f7f0 ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc10:	b110      	cbz	r0, 800fc18 <_dtoa_r+0x6d8>
 800fc12:	9b02      	ldr	r3, [sp, #8]
 800fc14:	07d9      	lsls	r1, r3, #31
 800fc16:	d40f      	bmi.n	800fc38 <_dtoa_r+0x6f8>
 800fc18:	4620      	mov	r0, r4
 800fc1a:	4659      	mov	r1, fp
 800fc1c:	f000 facc 	bl	80101b8 <_Bfree>
 800fc20:	2300      	movs	r3, #0
 800fc22:	702b      	strb	r3, [r5, #0]
 800fc24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc26:	f10a 0001 	add.w	r0, sl, #1
 800fc2a:	6018      	str	r0, [r3, #0]
 800fc2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f43f acd8 	beq.w	800f5e4 <_dtoa_r+0xa4>
 800fc34:	601d      	str	r5, [r3, #0]
 800fc36:	e4d5      	b.n	800f5e4 <_dtoa_r+0xa4>
 800fc38:	f8cd a01c 	str.w	sl, [sp, #28]
 800fc3c:	462b      	mov	r3, r5
 800fc3e:	461d      	mov	r5, r3
 800fc40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc44:	2a39      	cmp	r2, #57	; 0x39
 800fc46:	d108      	bne.n	800fc5a <_dtoa_r+0x71a>
 800fc48:	9a00      	ldr	r2, [sp, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d1f7      	bne.n	800fc3e <_dtoa_r+0x6fe>
 800fc4e:	9a07      	ldr	r2, [sp, #28]
 800fc50:	9900      	ldr	r1, [sp, #0]
 800fc52:	3201      	adds	r2, #1
 800fc54:	9207      	str	r2, [sp, #28]
 800fc56:	2230      	movs	r2, #48	; 0x30
 800fc58:	700a      	strb	r2, [r1, #0]
 800fc5a:	781a      	ldrb	r2, [r3, #0]
 800fc5c:	3201      	adds	r2, #1
 800fc5e:	701a      	strb	r2, [r3, #0]
 800fc60:	e78c      	b.n	800fb7c <_dtoa_r+0x63c>
 800fc62:	4b7f      	ldr	r3, [pc, #508]	; (800fe60 <_dtoa_r+0x920>)
 800fc64:	2200      	movs	r2, #0
 800fc66:	f7f0 fcc7 	bl	80005f8 <__aeabi_dmul>
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	4606      	mov	r6, r0
 800fc70:	460f      	mov	r7, r1
 800fc72:	f7f0 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d09b      	beq.n	800fbb2 <_dtoa_r+0x672>
 800fc7a:	e7cd      	b.n	800fc18 <_dtoa_r+0x6d8>
 800fc7c:	9a08      	ldr	r2, [sp, #32]
 800fc7e:	2a00      	cmp	r2, #0
 800fc80:	f000 80c4 	beq.w	800fe0c <_dtoa_r+0x8cc>
 800fc84:	9a05      	ldr	r2, [sp, #20]
 800fc86:	2a01      	cmp	r2, #1
 800fc88:	f300 80a8 	bgt.w	800fddc <_dtoa_r+0x89c>
 800fc8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fc8e:	2a00      	cmp	r2, #0
 800fc90:	f000 80a0 	beq.w	800fdd4 <_dtoa_r+0x894>
 800fc94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc98:	9e06      	ldr	r6, [sp, #24]
 800fc9a:	4645      	mov	r5, r8
 800fc9c:	9a04      	ldr	r2, [sp, #16]
 800fc9e:	2101      	movs	r1, #1
 800fca0:	441a      	add	r2, r3
 800fca2:	4620      	mov	r0, r4
 800fca4:	4498      	add	r8, r3
 800fca6:	9204      	str	r2, [sp, #16]
 800fca8:	f000 fb42 	bl	8010330 <__i2b>
 800fcac:	4607      	mov	r7, r0
 800fcae:	2d00      	cmp	r5, #0
 800fcb0:	dd0b      	ble.n	800fcca <_dtoa_r+0x78a>
 800fcb2:	9b04      	ldr	r3, [sp, #16]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	dd08      	ble.n	800fcca <_dtoa_r+0x78a>
 800fcb8:	42ab      	cmp	r3, r5
 800fcba:	9a04      	ldr	r2, [sp, #16]
 800fcbc:	bfa8      	it	ge
 800fcbe:	462b      	movge	r3, r5
 800fcc0:	eba8 0803 	sub.w	r8, r8, r3
 800fcc4:	1aed      	subs	r5, r5, r3
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	9304      	str	r3, [sp, #16]
 800fcca:	9b06      	ldr	r3, [sp, #24]
 800fccc:	b1fb      	cbz	r3, 800fd0e <_dtoa_r+0x7ce>
 800fcce:	9b08      	ldr	r3, [sp, #32]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f000 809f 	beq.w	800fe14 <_dtoa_r+0x8d4>
 800fcd6:	2e00      	cmp	r6, #0
 800fcd8:	dd11      	ble.n	800fcfe <_dtoa_r+0x7be>
 800fcda:	4639      	mov	r1, r7
 800fcdc:	4632      	mov	r2, r6
 800fcde:	4620      	mov	r0, r4
 800fce0:	f000 fbe2 	bl	80104a8 <__pow5mult>
 800fce4:	465a      	mov	r2, fp
 800fce6:	4601      	mov	r1, r0
 800fce8:	4607      	mov	r7, r0
 800fcea:	4620      	mov	r0, r4
 800fcec:	f000 fb36 	bl	801035c <__multiply>
 800fcf0:	4659      	mov	r1, fp
 800fcf2:	9007      	str	r0, [sp, #28]
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f000 fa5f 	bl	80101b8 <_Bfree>
 800fcfa:	9b07      	ldr	r3, [sp, #28]
 800fcfc:	469b      	mov	fp, r3
 800fcfe:	9b06      	ldr	r3, [sp, #24]
 800fd00:	1b9a      	subs	r2, r3, r6
 800fd02:	d004      	beq.n	800fd0e <_dtoa_r+0x7ce>
 800fd04:	4659      	mov	r1, fp
 800fd06:	4620      	mov	r0, r4
 800fd08:	f000 fbce 	bl	80104a8 <__pow5mult>
 800fd0c:	4683      	mov	fp, r0
 800fd0e:	2101      	movs	r1, #1
 800fd10:	4620      	mov	r0, r4
 800fd12:	f000 fb0d 	bl	8010330 <__i2b>
 800fd16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	dd7c      	ble.n	800fe18 <_dtoa_r+0x8d8>
 800fd1e:	461a      	mov	r2, r3
 800fd20:	4601      	mov	r1, r0
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 fbc0 	bl	80104a8 <__pow5mult>
 800fd28:	9b05      	ldr	r3, [sp, #20]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	4606      	mov	r6, r0
 800fd2e:	dd76      	ble.n	800fe1e <_dtoa_r+0x8de>
 800fd30:	2300      	movs	r3, #0
 800fd32:	9306      	str	r3, [sp, #24]
 800fd34:	6933      	ldr	r3, [r6, #16]
 800fd36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fd3a:	6918      	ldr	r0, [r3, #16]
 800fd3c:	f000 faa8 	bl	8010290 <__hi0bits>
 800fd40:	f1c0 0020 	rsb	r0, r0, #32
 800fd44:	9b04      	ldr	r3, [sp, #16]
 800fd46:	4418      	add	r0, r3
 800fd48:	f010 001f 	ands.w	r0, r0, #31
 800fd4c:	f000 8086 	beq.w	800fe5c <_dtoa_r+0x91c>
 800fd50:	f1c0 0320 	rsb	r3, r0, #32
 800fd54:	2b04      	cmp	r3, #4
 800fd56:	dd7f      	ble.n	800fe58 <_dtoa_r+0x918>
 800fd58:	f1c0 001c 	rsb	r0, r0, #28
 800fd5c:	9b04      	ldr	r3, [sp, #16]
 800fd5e:	4403      	add	r3, r0
 800fd60:	4480      	add	r8, r0
 800fd62:	4405      	add	r5, r0
 800fd64:	9304      	str	r3, [sp, #16]
 800fd66:	f1b8 0f00 	cmp.w	r8, #0
 800fd6a:	dd05      	ble.n	800fd78 <_dtoa_r+0x838>
 800fd6c:	4659      	mov	r1, fp
 800fd6e:	4642      	mov	r2, r8
 800fd70:	4620      	mov	r0, r4
 800fd72:	f000 fbf3 	bl	801055c <__lshift>
 800fd76:	4683      	mov	fp, r0
 800fd78:	9b04      	ldr	r3, [sp, #16]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	dd05      	ble.n	800fd8a <_dtoa_r+0x84a>
 800fd7e:	4631      	mov	r1, r6
 800fd80:	461a      	mov	r2, r3
 800fd82:	4620      	mov	r0, r4
 800fd84:	f000 fbea 	bl	801055c <__lshift>
 800fd88:	4606      	mov	r6, r0
 800fd8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d069      	beq.n	800fe64 <_dtoa_r+0x924>
 800fd90:	4631      	mov	r1, r6
 800fd92:	4658      	mov	r0, fp
 800fd94:	f000 fc4e 	bl	8010634 <__mcmp>
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	da63      	bge.n	800fe64 <_dtoa_r+0x924>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	4659      	mov	r1, fp
 800fda0:	220a      	movs	r2, #10
 800fda2:	4620      	mov	r0, r4
 800fda4:	f000 fa2a 	bl	80101fc <__multadd>
 800fda8:	9b08      	ldr	r3, [sp, #32]
 800fdaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdae:	4683      	mov	fp, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f000 818f 	beq.w	80100d4 <_dtoa_r+0xb94>
 800fdb6:	4639      	mov	r1, r7
 800fdb8:	2300      	movs	r3, #0
 800fdba:	220a      	movs	r2, #10
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f000 fa1d 	bl	80101fc <__multadd>
 800fdc2:	f1b9 0f00 	cmp.w	r9, #0
 800fdc6:	4607      	mov	r7, r0
 800fdc8:	f300 808e 	bgt.w	800fee8 <_dtoa_r+0x9a8>
 800fdcc:	9b05      	ldr	r3, [sp, #20]
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	dc50      	bgt.n	800fe74 <_dtoa_r+0x934>
 800fdd2:	e089      	b.n	800fee8 <_dtoa_r+0x9a8>
 800fdd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fdd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fdda:	e75d      	b.n	800fc98 <_dtoa_r+0x758>
 800fddc:	9b01      	ldr	r3, [sp, #4]
 800fdde:	1e5e      	subs	r6, r3, #1
 800fde0:	9b06      	ldr	r3, [sp, #24]
 800fde2:	42b3      	cmp	r3, r6
 800fde4:	bfbf      	itttt	lt
 800fde6:	9b06      	ldrlt	r3, [sp, #24]
 800fde8:	9606      	strlt	r6, [sp, #24]
 800fdea:	1af2      	sublt	r2, r6, r3
 800fdec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fdee:	bfb6      	itet	lt
 800fdf0:	189b      	addlt	r3, r3, r2
 800fdf2:	1b9e      	subge	r6, r3, r6
 800fdf4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fdf6:	9b01      	ldr	r3, [sp, #4]
 800fdf8:	bfb8      	it	lt
 800fdfa:	2600      	movlt	r6, #0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	bfb5      	itete	lt
 800fe00:	eba8 0503 	sublt.w	r5, r8, r3
 800fe04:	9b01      	ldrge	r3, [sp, #4]
 800fe06:	2300      	movlt	r3, #0
 800fe08:	4645      	movge	r5, r8
 800fe0a:	e747      	b.n	800fc9c <_dtoa_r+0x75c>
 800fe0c:	9e06      	ldr	r6, [sp, #24]
 800fe0e:	9f08      	ldr	r7, [sp, #32]
 800fe10:	4645      	mov	r5, r8
 800fe12:	e74c      	b.n	800fcae <_dtoa_r+0x76e>
 800fe14:	9a06      	ldr	r2, [sp, #24]
 800fe16:	e775      	b.n	800fd04 <_dtoa_r+0x7c4>
 800fe18:	9b05      	ldr	r3, [sp, #20]
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	dc18      	bgt.n	800fe50 <_dtoa_r+0x910>
 800fe1e:	9b02      	ldr	r3, [sp, #8]
 800fe20:	b9b3      	cbnz	r3, 800fe50 <_dtoa_r+0x910>
 800fe22:	9b03      	ldr	r3, [sp, #12]
 800fe24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe28:	b9a3      	cbnz	r3, 800fe54 <_dtoa_r+0x914>
 800fe2a:	9b03      	ldr	r3, [sp, #12]
 800fe2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe30:	0d1b      	lsrs	r3, r3, #20
 800fe32:	051b      	lsls	r3, r3, #20
 800fe34:	b12b      	cbz	r3, 800fe42 <_dtoa_r+0x902>
 800fe36:	9b04      	ldr	r3, [sp, #16]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	9304      	str	r3, [sp, #16]
 800fe3c:	f108 0801 	add.w	r8, r8, #1
 800fe40:	2301      	movs	r3, #1
 800fe42:	9306      	str	r3, [sp, #24]
 800fe44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	f47f af74 	bne.w	800fd34 <_dtoa_r+0x7f4>
 800fe4c:	2001      	movs	r0, #1
 800fe4e:	e779      	b.n	800fd44 <_dtoa_r+0x804>
 800fe50:	2300      	movs	r3, #0
 800fe52:	e7f6      	b.n	800fe42 <_dtoa_r+0x902>
 800fe54:	9b02      	ldr	r3, [sp, #8]
 800fe56:	e7f4      	b.n	800fe42 <_dtoa_r+0x902>
 800fe58:	d085      	beq.n	800fd66 <_dtoa_r+0x826>
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	301c      	adds	r0, #28
 800fe5e:	e77d      	b.n	800fd5c <_dtoa_r+0x81c>
 800fe60:	40240000 	.word	0x40240000
 800fe64:	9b01      	ldr	r3, [sp, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	dc38      	bgt.n	800fedc <_dtoa_r+0x99c>
 800fe6a:	9b05      	ldr	r3, [sp, #20]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	dd35      	ble.n	800fedc <_dtoa_r+0x99c>
 800fe70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fe74:	f1b9 0f00 	cmp.w	r9, #0
 800fe78:	d10d      	bne.n	800fe96 <_dtoa_r+0x956>
 800fe7a:	4631      	mov	r1, r6
 800fe7c:	464b      	mov	r3, r9
 800fe7e:	2205      	movs	r2, #5
 800fe80:	4620      	mov	r0, r4
 800fe82:	f000 f9bb 	bl	80101fc <__multadd>
 800fe86:	4601      	mov	r1, r0
 800fe88:	4606      	mov	r6, r0
 800fe8a:	4658      	mov	r0, fp
 800fe8c:	f000 fbd2 	bl	8010634 <__mcmp>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	f73f adbd 	bgt.w	800fa10 <_dtoa_r+0x4d0>
 800fe96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe98:	9d00      	ldr	r5, [sp, #0]
 800fe9a:	ea6f 0a03 	mvn.w	sl, r3
 800fe9e:	f04f 0800 	mov.w	r8, #0
 800fea2:	4631      	mov	r1, r6
 800fea4:	4620      	mov	r0, r4
 800fea6:	f000 f987 	bl	80101b8 <_Bfree>
 800feaa:	2f00      	cmp	r7, #0
 800feac:	f43f aeb4 	beq.w	800fc18 <_dtoa_r+0x6d8>
 800feb0:	f1b8 0f00 	cmp.w	r8, #0
 800feb4:	d005      	beq.n	800fec2 <_dtoa_r+0x982>
 800feb6:	45b8      	cmp	r8, r7
 800feb8:	d003      	beq.n	800fec2 <_dtoa_r+0x982>
 800feba:	4641      	mov	r1, r8
 800febc:	4620      	mov	r0, r4
 800febe:	f000 f97b 	bl	80101b8 <_Bfree>
 800fec2:	4639      	mov	r1, r7
 800fec4:	4620      	mov	r0, r4
 800fec6:	f000 f977 	bl	80101b8 <_Bfree>
 800feca:	e6a5      	b.n	800fc18 <_dtoa_r+0x6d8>
 800fecc:	2600      	movs	r6, #0
 800fece:	4637      	mov	r7, r6
 800fed0:	e7e1      	b.n	800fe96 <_dtoa_r+0x956>
 800fed2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fed4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fed8:	4637      	mov	r7, r6
 800feda:	e599      	b.n	800fa10 <_dtoa_r+0x4d0>
 800fedc:	9b08      	ldr	r3, [sp, #32]
 800fede:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f000 80fd 	beq.w	80100e2 <_dtoa_r+0xba2>
 800fee8:	2d00      	cmp	r5, #0
 800feea:	dd05      	ble.n	800fef8 <_dtoa_r+0x9b8>
 800feec:	4639      	mov	r1, r7
 800feee:	462a      	mov	r2, r5
 800fef0:	4620      	mov	r0, r4
 800fef2:	f000 fb33 	bl	801055c <__lshift>
 800fef6:	4607      	mov	r7, r0
 800fef8:	9b06      	ldr	r3, [sp, #24]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d05c      	beq.n	800ffb8 <_dtoa_r+0xa78>
 800fefe:	6879      	ldr	r1, [r7, #4]
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 f919 	bl	8010138 <_Balloc>
 800ff06:	4605      	mov	r5, r0
 800ff08:	b928      	cbnz	r0, 800ff16 <_dtoa_r+0x9d6>
 800ff0a:	4b80      	ldr	r3, [pc, #512]	; (801010c <_dtoa_r+0xbcc>)
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ff12:	f7ff bb2e 	b.w	800f572 <_dtoa_r+0x32>
 800ff16:	693a      	ldr	r2, [r7, #16]
 800ff18:	3202      	adds	r2, #2
 800ff1a:	0092      	lsls	r2, r2, #2
 800ff1c:	f107 010c 	add.w	r1, r7, #12
 800ff20:	300c      	adds	r0, #12
 800ff22:	f7fe fd27 	bl	800e974 <memcpy>
 800ff26:	2201      	movs	r2, #1
 800ff28:	4629      	mov	r1, r5
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f000 fb16 	bl	801055c <__lshift>
 800ff30:	9b00      	ldr	r3, [sp, #0]
 800ff32:	3301      	adds	r3, #1
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	9b00      	ldr	r3, [sp, #0]
 800ff38:	444b      	add	r3, r9
 800ff3a:	9307      	str	r3, [sp, #28]
 800ff3c:	9b02      	ldr	r3, [sp, #8]
 800ff3e:	f003 0301 	and.w	r3, r3, #1
 800ff42:	46b8      	mov	r8, r7
 800ff44:	9306      	str	r3, [sp, #24]
 800ff46:	4607      	mov	r7, r0
 800ff48:	9b01      	ldr	r3, [sp, #4]
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	4658      	mov	r0, fp
 800ff50:	9302      	str	r3, [sp, #8]
 800ff52:	f7ff fa69 	bl	800f428 <quorem>
 800ff56:	4603      	mov	r3, r0
 800ff58:	3330      	adds	r3, #48	; 0x30
 800ff5a:	9004      	str	r0, [sp, #16]
 800ff5c:	4641      	mov	r1, r8
 800ff5e:	4658      	mov	r0, fp
 800ff60:	9308      	str	r3, [sp, #32]
 800ff62:	f000 fb67 	bl	8010634 <__mcmp>
 800ff66:	463a      	mov	r2, r7
 800ff68:	4681      	mov	r9, r0
 800ff6a:	4631      	mov	r1, r6
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f000 fb7d 	bl	801066c <__mdiff>
 800ff72:	68c2      	ldr	r2, [r0, #12]
 800ff74:	9b08      	ldr	r3, [sp, #32]
 800ff76:	4605      	mov	r5, r0
 800ff78:	bb02      	cbnz	r2, 800ffbc <_dtoa_r+0xa7c>
 800ff7a:	4601      	mov	r1, r0
 800ff7c:	4658      	mov	r0, fp
 800ff7e:	f000 fb59 	bl	8010634 <__mcmp>
 800ff82:	9b08      	ldr	r3, [sp, #32]
 800ff84:	4602      	mov	r2, r0
 800ff86:	4629      	mov	r1, r5
 800ff88:	4620      	mov	r0, r4
 800ff8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ff8e:	f000 f913 	bl	80101b8 <_Bfree>
 800ff92:	9b05      	ldr	r3, [sp, #20]
 800ff94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff96:	9d01      	ldr	r5, [sp, #4]
 800ff98:	ea43 0102 	orr.w	r1, r3, r2
 800ff9c:	9b06      	ldr	r3, [sp, #24]
 800ff9e:	430b      	orrs	r3, r1
 800ffa0:	9b08      	ldr	r3, [sp, #32]
 800ffa2:	d10d      	bne.n	800ffc0 <_dtoa_r+0xa80>
 800ffa4:	2b39      	cmp	r3, #57	; 0x39
 800ffa6:	d029      	beq.n	800fffc <_dtoa_r+0xabc>
 800ffa8:	f1b9 0f00 	cmp.w	r9, #0
 800ffac:	dd01      	ble.n	800ffb2 <_dtoa_r+0xa72>
 800ffae:	9b04      	ldr	r3, [sp, #16]
 800ffb0:	3331      	adds	r3, #49	; 0x31
 800ffb2:	9a02      	ldr	r2, [sp, #8]
 800ffb4:	7013      	strb	r3, [r2, #0]
 800ffb6:	e774      	b.n	800fea2 <_dtoa_r+0x962>
 800ffb8:	4638      	mov	r0, r7
 800ffba:	e7b9      	b.n	800ff30 <_dtoa_r+0x9f0>
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	e7e2      	b.n	800ff86 <_dtoa_r+0xa46>
 800ffc0:	f1b9 0f00 	cmp.w	r9, #0
 800ffc4:	db06      	blt.n	800ffd4 <_dtoa_r+0xa94>
 800ffc6:	9905      	ldr	r1, [sp, #20]
 800ffc8:	ea41 0909 	orr.w	r9, r1, r9
 800ffcc:	9906      	ldr	r1, [sp, #24]
 800ffce:	ea59 0101 	orrs.w	r1, r9, r1
 800ffd2:	d120      	bne.n	8010016 <_dtoa_r+0xad6>
 800ffd4:	2a00      	cmp	r2, #0
 800ffd6:	ddec      	ble.n	800ffb2 <_dtoa_r+0xa72>
 800ffd8:	4659      	mov	r1, fp
 800ffda:	2201      	movs	r2, #1
 800ffdc:	4620      	mov	r0, r4
 800ffde:	9301      	str	r3, [sp, #4]
 800ffe0:	f000 fabc 	bl	801055c <__lshift>
 800ffe4:	4631      	mov	r1, r6
 800ffe6:	4683      	mov	fp, r0
 800ffe8:	f000 fb24 	bl	8010634 <__mcmp>
 800ffec:	2800      	cmp	r0, #0
 800ffee:	9b01      	ldr	r3, [sp, #4]
 800fff0:	dc02      	bgt.n	800fff8 <_dtoa_r+0xab8>
 800fff2:	d1de      	bne.n	800ffb2 <_dtoa_r+0xa72>
 800fff4:	07da      	lsls	r2, r3, #31
 800fff6:	d5dc      	bpl.n	800ffb2 <_dtoa_r+0xa72>
 800fff8:	2b39      	cmp	r3, #57	; 0x39
 800fffa:	d1d8      	bne.n	800ffae <_dtoa_r+0xa6e>
 800fffc:	9a02      	ldr	r2, [sp, #8]
 800fffe:	2339      	movs	r3, #57	; 0x39
 8010000:	7013      	strb	r3, [r2, #0]
 8010002:	462b      	mov	r3, r5
 8010004:	461d      	mov	r5, r3
 8010006:	3b01      	subs	r3, #1
 8010008:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801000c:	2a39      	cmp	r2, #57	; 0x39
 801000e:	d050      	beq.n	80100b2 <_dtoa_r+0xb72>
 8010010:	3201      	adds	r2, #1
 8010012:	701a      	strb	r2, [r3, #0]
 8010014:	e745      	b.n	800fea2 <_dtoa_r+0x962>
 8010016:	2a00      	cmp	r2, #0
 8010018:	dd03      	ble.n	8010022 <_dtoa_r+0xae2>
 801001a:	2b39      	cmp	r3, #57	; 0x39
 801001c:	d0ee      	beq.n	800fffc <_dtoa_r+0xabc>
 801001e:	3301      	adds	r3, #1
 8010020:	e7c7      	b.n	800ffb2 <_dtoa_r+0xa72>
 8010022:	9a01      	ldr	r2, [sp, #4]
 8010024:	9907      	ldr	r1, [sp, #28]
 8010026:	f802 3c01 	strb.w	r3, [r2, #-1]
 801002a:	428a      	cmp	r2, r1
 801002c:	d02a      	beq.n	8010084 <_dtoa_r+0xb44>
 801002e:	4659      	mov	r1, fp
 8010030:	2300      	movs	r3, #0
 8010032:	220a      	movs	r2, #10
 8010034:	4620      	mov	r0, r4
 8010036:	f000 f8e1 	bl	80101fc <__multadd>
 801003a:	45b8      	cmp	r8, r7
 801003c:	4683      	mov	fp, r0
 801003e:	f04f 0300 	mov.w	r3, #0
 8010042:	f04f 020a 	mov.w	r2, #10
 8010046:	4641      	mov	r1, r8
 8010048:	4620      	mov	r0, r4
 801004a:	d107      	bne.n	801005c <_dtoa_r+0xb1c>
 801004c:	f000 f8d6 	bl	80101fc <__multadd>
 8010050:	4680      	mov	r8, r0
 8010052:	4607      	mov	r7, r0
 8010054:	9b01      	ldr	r3, [sp, #4]
 8010056:	3301      	adds	r3, #1
 8010058:	9301      	str	r3, [sp, #4]
 801005a:	e775      	b.n	800ff48 <_dtoa_r+0xa08>
 801005c:	f000 f8ce 	bl	80101fc <__multadd>
 8010060:	4639      	mov	r1, r7
 8010062:	4680      	mov	r8, r0
 8010064:	2300      	movs	r3, #0
 8010066:	220a      	movs	r2, #10
 8010068:	4620      	mov	r0, r4
 801006a:	f000 f8c7 	bl	80101fc <__multadd>
 801006e:	4607      	mov	r7, r0
 8010070:	e7f0      	b.n	8010054 <_dtoa_r+0xb14>
 8010072:	f1b9 0f00 	cmp.w	r9, #0
 8010076:	9a00      	ldr	r2, [sp, #0]
 8010078:	bfcc      	ite	gt
 801007a:	464d      	movgt	r5, r9
 801007c:	2501      	movle	r5, #1
 801007e:	4415      	add	r5, r2
 8010080:	f04f 0800 	mov.w	r8, #0
 8010084:	4659      	mov	r1, fp
 8010086:	2201      	movs	r2, #1
 8010088:	4620      	mov	r0, r4
 801008a:	9301      	str	r3, [sp, #4]
 801008c:	f000 fa66 	bl	801055c <__lshift>
 8010090:	4631      	mov	r1, r6
 8010092:	4683      	mov	fp, r0
 8010094:	f000 face 	bl	8010634 <__mcmp>
 8010098:	2800      	cmp	r0, #0
 801009a:	dcb2      	bgt.n	8010002 <_dtoa_r+0xac2>
 801009c:	d102      	bne.n	80100a4 <_dtoa_r+0xb64>
 801009e:	9b01      	ldr	r3, [sp, #4]
 80100a0:	07db      	lsls	r3, r3, #31
 80100a2:	d4ae      	bmi.n	8010002 <_dtoa_r+0xac2>
 80100a4:	462b      	mov	r3, r5
 80100a6:	461d      	mov	r5, r3
 80100a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100ac:	2a30      	cmp	r2, #48	; 0x30
 80100ae:	d0fa      	beq.n	80100a6 <_dtoa_r+0xb66>
 80100b0:	e6f7      	b.n	800fea2 <_dtoa_r+0x962>
 80100b2:	9a00      	ldr	r2, [sp, #0]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d1a5      	bne.n	8010004 <_dtoa_r+0xac4>
 80100b8:	f10a 0a01 	add.w	sl, sl, #1
 80100bc:	2331      	movs	r3, #49	; 0x31
 80100be:	e779      	b.n	800ffb4 <_dtoa_r+0xa74>
 80100c0:	4b13      	ldr	r3, [pc, #76]	; (8010110 <_dtoa_r+0xbd0>)
 80100c2:	f7ff baaf 	b.w	800f624 <_dtoa_r+0xe4>
 80100c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f47f aa86 	bne.w	800f5da <_dtoa_r+0x9a>
 80100ce:	4b11      	ldr	r3, [pc, #68]	; (8010114 <_dtoa_r+0xbd4>)
 80100d0:	f7ff baa8 	b.w	800f624 <_dtoa_r+0xe4>
 80100d4:	f1b9 0f00 	cmp.w	r9, #0
 80100d8:	dc03      	bgt.n	80100e2 <_dtoa_r+0xba2>
 80100da:	9b05      	ldr	r3, [sp, #20]
 80100dc:	2b02      	cmp	r3, #2
 80100de:	f73f aec9 	bgt.w	800fe74 <_dtoa_r+0x934>
 80100e2:	9d00      	ldr	r5, [sp, #0]
 80100e4:	4631      	mov	r1, r6
 80100e6:	4658      	mov	r0, fp
 80100e8:	f7ff f99e 	bl	800f428 <quorem>
 80100ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80100f0:	f805 3b01 	strb.w	r3, [r5], #1
 80100f4:	9a00      	ldr	r2, [sp, #0]
 80100f6:	1aaa      	subs	r2, r5, r2
 80100f8:	4591      	cmp	r9, r2
 80100fa:	ddba      	ble.n	8010072 <_dtoa_r+0xb32>
 80100fc:	4659      	mov	r1, fp
 80100fe:	2300      	movs	r3, #0
 8010100:	220a      	movs	r2, #10
 8010102:	4620      	mov	r0, r4
 8010104:	f000 f87a 	bl	80101fc <__multadd>
 8010108:	4683      	mov	fp, r0
 801010a:	e7eb      	b.n	80100e4 <_dtoa_r+0xba4>
 801010c:	08012b83 	.word	0x08012b83
 8010110:	08012adc 	.word	0x08012adc
 8010114:	08012b00 	.word	0x08012b00

08010118 <_localeconv_r>:
 8010118:	4800      	ldr	r0, [pc, #0]	; (801011c <_localeconv_r+0x4>)
 801011a:	4770      	bx	lr
 801011c:	2000017c 	.word	0x2000017c

08010120 <__malloc_lock>:
 8010120:	4801      	ldr	r0, [pc, #4]	; (8010128 <__malloc_lock+0x8>)
 8010122:	f000 bd22 	b.w	8010b6a <__retarget_lock_acquire_recursive>
 8010126:	bf00      	nop
 8010128:	20004e80 	.word	0x20004e80

0801012c <__malloc_unlock>:
 801012c:	4801      	ldr	r0, [pc, #4]	; (8010134 <__malloc_unlock+0x8>)
 801012e:	f000 bd1d 	b.w	8010b6c <__retarget_lock_release_recursive>
 8010132:	bf00      	nop
 8010134:	20004e80 	.word	0x20004e80

08010138 <_Balloc>:
 8010138:	b570      	push	{r4, r5, r6, lr}
 801013a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801013c:	4604      	mov	r4, r0
 801013e:	460d      	mov	r5, r1
 8010140:	b976      	cbnz	r6, 8010160 <_Balloc+0x28>
 8010142:	2010      	movs	r0, #16
 8010144:	f7fe fc06 	bl	800e954 <malloc>
 8010148:	4602      	mov	r2, r0
 801014a:	6260      	str	r0, [r4, #36]	; 0x24
 801014c:	b920      	cbnz	r0, 8010158 <_Balloc+0x20>
 801014e:	4b18      	ldr	r3, [pc, #96]	; (80101b0 <_Balloc+0x78>)
 8010150:	4818      	ldr	r0, [pc, #96]	; (80101b4 <_Balloc+0x7c>)
 8010152:	2166      	movs	r1, #102	; 0x66
 8010154:	f000 fcd8 	bl	8010b08 <__assert_func>
 8010158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801015c:	6006      	str	r6, [r0, #0]
 801015e:	60c6      	str	r6, [r0, #12]
 8010160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010162:	68f3      	ldr	r3, [r6, #12]
 8010164:	b183      	cbz	r3, 8010188 <_Balloc+0x50>
 8010166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801016e:	b9b8      	cbnz	r0, 80101a0 <_Balloc+0x68>
 8010170:	2101      	movs	r1, #1
 8010172:	fa01 f605 	lsl.w	r6, r1, r5
 8010176:	1d72      	adds	r2, r6, #5
 8010178:	0092      	lsls	r2, r2, #2
 801017a:	4620      	mov	r0, r4
 801017c:	f000 fb5a 	bl	8010834 <_calloc_r>
 8010180:	b160      	cbz	r0, 801019c <_Balloc+0x64>
 8010182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010186:	e00e      	b.n	80101a6 <_Balloc+0x6e>
 8010188:	2221      	movs	r2, #33	; 0x21
 801018a:	2104      	movs	r1, #4
 801018c:	4620      	mov	r0, r4
 801018e:	f000 fb51 	bl	8010834 <_calloc_r>
 8010192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010194:	60f0      	str	r0, [r6, #12]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d1e4      	bne.n	8010166 <_Balloc+0x2e>
 801019c:	2000      	movs	r0, #0
 801019e:	bd70      	pop	{r4, r5, r6, pc}
 80101a0:	6802      	ldr	r2, [r0, #0]
 80101a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80101a6:	2300      	movs	r3, #0
 80101a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101ac:	e7f7      	b.n	801019e <_Balloc+0x66>
 80101ae:	bf00      	nop
 80101b0:	08012b0d 	.word	0x08012b0d
 80101b4:	08012b94 	.word	0x08012b94

080101b8 <_Bfree>:
 80101b8:	b570      	push	{r4, r5, r6, lr}
 80101ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101bc:	4605      	mov	r5, r0
 80101be:	460c      	mov	r4, r1
 80101c0:	b976      	cbnz	r6, 80101e0 <_Bfree+0x28>
 80101c2:	2010      	movs	r0, #16
 80101c4:	f7fe fbc6 	bl	800e954 <malloc>
 80101c8:	4602      	mov	r2, r0
 80101ca:	6268      	str	r0, [r5, #36]	; 0x24
 80101cc:	b920      	cbnz	r0, 80101d8 <_Bfree+0x20>
 80101ce:	4b09      	ldr	r3, [pc, #36]	; (80101f4 <_Bfree+0x3c>)
 80101d0:	4809      	ldr	r0, [pc, #36]	; (80101f8 <_Bfree+0x40>)
 80101d2:	218a      	movs	r1, #138	; 0x8a
 80101d4:	f000 fc98 	bl	8010b08 <__assert_func>
 80101d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101dc:	6006      	str	r6, [r0, #0]
 80101de:	60c6      	str	r6, [r0, #12]
 80101e0:	b13c      	cbz	r4, 80101f2 <_Bfree+0x3a>
 80101e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80101e4:	6862      	ldr	r2, [r4, #4]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101ec:	6021      	str	r1, [r4, #0]
 80101ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101f2:	bd70      	pop	{r4, r5, r6, pc}
 80101f4:	08012b0d 	.word	0x08012b0d
 80101f8:	08012b94 	.word	0x08012b94

080101fc <__multadd>:
 80101fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010200:	690e      	ldr	r6, [r1, #16]
 8010202:	4607      	mov	r7, r0
 8010204:	4698      	mov	r8, r3
 8010206:	460c      	mov	r4, r1
 8010208:	f101 0014 	add.w	r0, r1, #20
 801020c:	2300      	movs	r3, #0
 801020e:	6805      	ldr	r5, [r0, #0]
 8010210:	b2a9      	uxth	r1, r5
 8010212:	fb02 8101 	mla	r1, r2, r1, r8
 8010216:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801021a:	0c2d      	lsrs	r5, r5, #16
 801021c:	fb02 c505 	mla	r5, r2, r5, ip
 8010220:	b289      	uxth	r1, r1
 8010222:	3301      	adds	r3, #1
 8010224:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010228:	429e      	cmp	r6, r3
 801022a:	f840 1b04 	str.w	r1, [r0], #4
 801022e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010232:	dcec      	bgt.n	801020e <__multadd+0x12>
 8010234:	f1b8 0f00 	cmp.w	r8, #0
 8010238:	d022      	beq.n	8010280 <__multadd+0x84>
 801023a:	68a3      	ldr	r3, [r4, #8]
 801023c:	42b3      	cmp	r3, r6
 801023e:	dc19      	bgt.n	8010274 <__multadd+0x78>
 8010240:	6861      	ldr	r1, [r4, #4]
 8010242:	4638      	mov	r0, r7
 8010244:	3101      	adds	r1, #1
 8010246:	f7ff ff77 	bl	8010138 <_Balloc>
 801024a:	4605      	mov	r5, r0
 801024c:	b928      	cbnz	r0, 801025a <__multadd+0x5e>
 801024e:	4602      	mov	r2, r0
 8010250:	4b0d      	ldr	r3, [pc, #52]	; (8010288 <__multadd+0x8c>)
 8010252:	480e      	ldr	r0, [pc, #56]	; (801028c <__multadd+0x90>)
 8010254:	21b5      	movs	r1, #181	; 0xb5
 8010256:	f000 fc57 	bl	8010b08 <__assert_func>
 801025a:	6922      	ldr	r2, [r4, #16]
 801025c:	3202      	adds	r2, #2
 801025e:	f104 010c 	add.w	r1, r4, #12
 8010262:	0092      	lsls	r2, r2, #2
 8010264:	300c      	adds	r0, #12
 8010266:	f7fe fb85 	bl	800e974 <memcpy>
 801026a:	4621      	mov	r1, r4
 801026c:	4638      	mov	r0, r7
 801026e:	f7ff ffa3 	bl	80101b8 <_Bfree>
 8010272:	462c      	mov	r4, r5
 8010274:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010278:	3601      	adds	r6, #1
 801027a:	f8c3 8014 	str.w	r8, [r3, #20]
 801027e:	6126      	str	r6, [r4, #16]
 8010280:	4620      	mov	r0, r4
 8010282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010286:	bf00      	nop
 8010288:	08012b83 	.word	0x08012b83
 801028c:	08012b94 	.word	0x08012b94

08010290 <__hi0bits>:
 8010290:	0c03      	lsrs	r3, r0, #16
 8010292:	041b      	lsls	r3, r3, #16
 8010294:	b9d3      	cbnz	r3, 80102cc <__hi0bits+0x3c>
 8010296:	0400      	lsls	r0, r0, #16
 8010298:	2310      	movs	r3, #16
 801029a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801029e:	bf04      	itt	eq
 80102a0:	0200      	lsleq	r0, r0, #8
 80102a2:	3308      	addeq	r3, #8
 80102a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80102a8:	bf04      	itt	eq
 80102aa:	0100      	lsleq	r0, r0, #4
 80102ac:	3304      	addeq	r3, #4
 80102ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80102b2:	bf04      	itt	eq
 80102b4:	0080      	lsleq	r0, r0, #2
 80102b6:	3302      	addeq	r3, #2
 80102b8:	2800      	cmp	r0, #0
 80102ba:	db05      	blt.n	80102c8 <__hi0bits+0x38>
 80102bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80102c0:	f103 0301 	add.w	r3, r3, #1
 80102c4:	bf08      	it	eq
 80102c6:	2320      	moveq	r3, #32
 80102c8:	4618      	mov	r0, r3
 80102ca:	4770      	bx	lr
 80102cc:	2300      	movs	r3, #0
 80102ce:	e7e4      	b.n	801029a <__hi0bits+0xa>

080102d0 <__lo0bits>:
 80102d0:	6803      	ldr	r3, [r0, #0]
 80102d2:	f013 0207 	ands.w	r2, r3, #7
 80102d6:	4601      	mov	r1, r0
 80102d8:	d00b      	beq.n	80102f2 <__lo0bits+0x22>
 80102da:	07da      	lsls	r2, r3, #31
 80102dc:	d424      	bmi.n	8010328 <__lo0bits+0x58>
 80102de:	0798      	lsls	r0, r3, #30
 80102e0:	bf49      	itett	mi
 80102e2:	085b      	lsrmi	r3, r3, #1
 80102e4:	089b      	lsrpl	r3, r3, #2
 80102e6:	2001      	movmi	r0, #1
 80102e8:	600b      	strmi	r3, [r1, #0]
 80102ea:	bf5c      	itt	pl
 80102ec:	600b      	strpl	r3, [r1, #0]
 80102ee:	2002      	movpl	r0, #2
 80102f0:	4770      	bx	lr
 80102f2:	b298      	uxth	r0, r3
 80102f4:	b9b0      	cbnz	r0, 8010324 <__lo0bits+0x54>
 80102f6:	0c1b      	lsrs	r3, r3, #16
 80102f8:	2010      	movs	r0, #16
 80102fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80102fe:	bf04      	itt	eq
 8010300:	0a1b      	lsreq	r3, r3, #8
 8010302:	3008      	addeq	r0, #8
 8010304:	071a      	lsls	r2, r3, #28
 8010306:	bf04      	itt	eq
 8010308:	091b      	lsreq	r3, r3, #4
 801030a:	3004      	addeq	r0, #4
 801030c:	079a      	lsls	r2, r3, #30
 801030e:	bf04      	itt	eq
 8010310:	089b      	lsreq	r3, r3, #2
 8010312:	3002      	addeq	r0, #2
 8010314:	07da      	lsls	r2, r3, #31
 8010316:	d403      	bmi.n	8010320 <__lo0bits+0x50>
 8010318:	085b      	lsrs	r3, r3, #1
 801031a:	f100 0001 	add.w	r0, r0, #1
 801031e:	d005      	beq.n	801032c <__lo0bits+0x5c>
 8010320:	600b      	str	r3, [r1, #0]
 8010322:	4770      	bx	lr
 8010324:	4610      	mov	r0, r2
 8010326:	e7e8      	b.n	80102fa <__lo0bits+0x2a>
 8010328:	2000      	movs	r0, #0
 801032a:	4770      	bx	lr
 801032c:	2020      	movs	r0, #32
 801032e:	4770      	bx	lr

08010330 <__i2b>:
 8010330:	b510      	push	{r4, lr}
 8010332:	460c      	mov	r4, r1
 8010334:	2101      	movs	r1, #1
 8010336:	f7ff feff 	bl	8010138 <_Balloc>
 801033a:	4602      	mov	r2, r0
 801033c:	b928      	cbnz	r0, 801034a <__i2b+0x1a>
 801033e:	4b05      	ldr	r3, [pc, #20]	; (8010354 <__i2b+0x24>)
 8010340:	4805      	ldr	r0, [pc, #20]	; (8010358 <__i2b+0x28>)
 8010342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010346:	f000 fbdf 	bl	8010b08 <__assert_func>
 801034a:	2301      	movs	r3, #1
 801034c:	6144      	str	r4, [r0, #20]
 801034e:	6103      	str	r3, [r0, #16]
 8010350:	bd10      	pop	{r4, pc}
 8010352:	bf00      	nop
 8010354:	08012b83 	.word	0x08012b83
 8010358:	08012b94 	.word	0x08012b94

0801035c <__multiply>:
 801035c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010360:	4614      	mov	r4, r2
 8010362:	690a      	ldr	r2, [r1, #16]
 8010364:	6923      	ldr	r3, [r4, #16]
 8010366:	429a      	cmp	r2, r3
 8010368:	bfb8      	it	lt
 801036a:	460b      	movlt	r3, r1
 801036c:	460d      	mov	r5, r1
 801036e:	bfbc      	itt	lt
 8010370:	4625      	movlt	r5, r4
 8010372:	461c      	movlt	r4, r3
 8010374:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010378:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801037c:	68ab      	ldr	r3, [r5, #8]
 801037e:	6869      	ldr	r1, [r5, #4]
 8010380:	eb0a 0709 	add.w	r7, sl, r9
 8010384:	42bb      	cmp	r3, r7
 8010386:	b085      	sub	sp, #20
 8010388:	bfb8      	it	lt
 801038a:	3101      	addlt	r1, #1
 801038c:	f7ff fed4 	bl	8010138 <_Balloc>
 8010390:	b930      	cbnz	r0, 80103a0 <__multiply+0x44>
 8010392:	4602      	mov	r2, r0
 8010394:	4b42      	ldr	r3, [pc, #264]	; (80104a0 <__multiply+0x144>)
 8010396:	4843      	ldr	r0, [pc, #268]	; (80104a4 <__multiply+0x148>)
 8010398:	f240 115d 	movw	r1, #349	; 0x15d
 801039c:	f000 fbb4 	bl	8010b08 <__assert_func>
 80103a0:	f100 0614 	add.w	r6, r0, #20
 80103a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80103a8:	4633      	mov	r3, r6
 80103aa:	2200      	movs	r2, #0
 80103ac:	4543      	cmp	r3, r8
 80103ae:	d31e      	bcc.n	80103ee <__multiply+0x92>
 80103b0:	f105 0c14 	add.w	ip, r5, #20
 80103b4:	f104 0314 	add.w	r3, r4, #20
 80103b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80103bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80103c0:	9202      	str	r2, [sp, #8]
 80103c2:	ebac 0205 	sub.w	r2, ip, r5
 80103c6:	3a15      	subs	r2, #21
 80103c8:	f022 0203 	bic.w	r2, r2, #3
 80103cc:	3204      	adds	r2, #4
 80103ce:	f105 0115 	add.w	r1, r5, #21
 80103d2:	458c      	cmp	ip, r1
 80103d4:	bf38      	it	cc
 80103d6:	2204      	movcc	r2, #4
 80103d8:	9201      	str	r2, [sp, #4]
 80103da:	9a02      	ldr	r2, [sp, #8]
 80103dc:	9303      	str	r3, [sp, #12]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d808      	bhi.n	80103f4 <__multiply+0x98>
 80103e2:	2f00      	cmp	r7, #0
 80103e4:	dc55      	bgt.n	8010492 <__multiply+0x136>
 80103e6:	6107      	str	r7, [r0, #16]
 80103e8:	b005      	add	sp, #20
 80103ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ee:	f843 2b04 	str.w	r2, [r3], #4
 80103f2:	e7db      	b.n	80103ac <__multiply+0x50>
 80103f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80103f8:	f1ba 0f00 	cmp.w	sl, #0
 80103fc:	d020      	beq.n	8010440 <__multiply+0xe4>
 80103fe:	f105 0e14 	add.w	lr, r5, #20
 8010402:	46b1      	mov	r9, r6
 8010404:	2200      	movs	r2, #0
 8010406:	f85e 4b04 	ldr.w	r4, [lr], #4
 801040a:	f8d9 b000 	ldr.w	fp, [r9]
 801040e:	b2a1      	uxth	r1, r4
 8010410:	fa1f fb8b 	uxth.w	fp, fp
 8010414:	fb0a b101 	mla	r1, sl, r1, fp
 8010418:	4411      	add	r1, r2
 801041a:	f8d9 2000 	ldr.w	r2, [r9]
 801041e:	0c24      	lsrs	r4, r4, #16
 8010420:	0c12      	lsrs	r2, r2, #16
 8010422:	fb0a 2404 	mla	r4, sl, r4, r2
 8010426:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801042a:	b289      	uxth	r1, r1
 801042c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010430:	45f4      	cmp	ip, lr
 8010432:	f849 1b04 	str.w	r1, [r9], #4
 8010436:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801043a:	d8e4      	bhi.n	8010406 <__multiply+0xaa>
 801043c:	9901      	ldr	r1, [sp, #4]
 801043e:	5072      	str	r2, [r6, r1]
 8010440:	9a03      	ldr	r2, [sp, #12]
 8010442:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010446:	3304      	adds	r3, #4
 8010448:	f1b9 0f00 	cmp.w	r9, #0
 801044c:	d01f      	beq.n	801048e <__multiply+0x132>
 801044e:	6834      	ldr	r4, [r6, #0]
 8010450:	f105 0114 	add.w	r1, r5, #20
 8010454:	46b6      	mov	lr, r6
 8010456:	f04f 0a00 	mov.w	sl, #0
 801045a:	880a      	ldrh	r2, [r1, #0]
 801045c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010460:	fb09 b202 	mla	r2, r9, r2, fp
 8010464:	4492      	add	sl, r2
 8010466:	b2a4      	uxth	r4, r4
 8010468:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801046c:	f84e 4b04 	str.w	r4, [lr], #4
 8010470:	f851 4b04 	ldr.w	r4, [r1], #4
 8010474:	f8be 2000 	ldrh.w	r2, [lr]
 8010478:	0c24      	lsrs	r4, r4, #16
 801047a:	fb09 2404 	mla	r4, r9, r4, r2
 801047e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010482:	458c      	cmp	ip, r1
 8010484:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010488:	d8e7      	bhi.n	801045a <__multiply+0xfe>
 801048a:	9a01      	ldr	r2, [sp, #4]
 801048c:	50b4      	str	r4, [r6, r2]
 801048e:	3604      	adds	r6, #4
 8010490:	e7a3      	b.n	80103da <__multiply+0x7e>
 8010492:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010496:	2b00      	cmp	r3, #0
 8010498:	d1a5      	bne.n	80103e6 <__multiply+0x8a>
 801049a:	3f01      	subs	r7, #1
 801049c:	e7a1      	b.n	80103e2 <__multiply+0x86>
 801049e:	bf00      	nop
 80104a0:	08012b83 	.word	0x08012b83
 80104a4:	08012b94 	.word	0x08012b94

080104a8 <__pow5mult>:
 80104a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104ac:	4615      	mov	r5, r2
 80104ae:	f012 0203 	ands.w	r2, r2, #3
 80104b2:	4606      	mov	r6, r0
 80104b4:	460f      	mov	r7, r1
 80104b6:	d007      	beq.n	80104c8 <__pow5mult+0x20>
 80104b8:	4c25      	ldr	r4, [pc, #148]	; (8010550 <__pow5mult+0xa8>)
 80104ba:	3a01      	subs	r2, #1
 80104bc:	2300      	movs	r3, #0
 80104be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80104c2:	f7ff fe9b 	bl	80101fc <__multadd>
 80104c6:	4607      	mov	r7, r0
 80104c8:	10ad      	asrs	r5, r5, #2
 80104ca:	d03d      	beq.n	8010548 <__pow5mult+0xa0>
 80104cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80104ce:	b97c      	cbnz	r4, 80104f0 <__pow5mult+0x48>
 80104d0:	2010      	movs	r0, #16
 80104d2:	f7fe fa3f 	bl	800e954 <malloc>
 80104d6:	4602      	mov	r2, r0
 80104d8:	6270      	str	r0, [r6, #36]	; 0x24
 80104da:	b928      	cbnz	r0, 80104e8 <__pow5mult+0x40>
 80104dc:	4b1d      	ldr	r3, [pc, #116]	; (8010554 <__pow5mult+0xac>)
 80104de:	481e      	ldr	r0, [pc, #120]	; (8010558 <__pow5mult+0xb0>)
 80104e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80104e4:	f000 fb10 	bl	8010b08 <__assert_func>
 80104e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104ec:	6004      	str	r4, [r0, #0]
 80104ee:	60c4      	str	r4, [r0, #12]
 80104f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104f8:	b94c      	cbnz	r4, 801050e <__pow5mult+0x66>
 80104fa:	f240 2171 	movw	r1, #625	; 0x271
 80104fe:	4630      	mov	r0, r6
 8010500:	f7ff ff16 	bl	8010330 <__i2b>
 8010504:	2300      	movs	r3, #0
 8010506:	f8c8 0008 	str.w	r0, [r8, #8]
 801050a:	4604      	mov	r4, r0
 801050c:	6003      	str	r3, [r0, #0]
 801050e:	f04f 0900 	mov.w	r9, #0
 8010512:	07eb      	lsls	r3, r5, #31
 8010514:	d50a      	bpl.n	801052c <__pow5mult+0x84>
 8010516:	4639      	mov	r1, r7
 8010518:	4622      	mov	r2, r4
 801051a:	4630      	mov	r0, r6
 801051c:	f7ff ff1e 	bl	801035c <__multiply>
 8010520:	4639      	mov	r1, r7
 8010522:	4680      	mov	r8, r0
 8010524:	4630      	mov	r0, r6
 8010526:	f7ff fe47 	bl	80101b8 <_Bfree>
 801052a:	4647      	mov	r7, r8
 801052c:	106d      	asrs	r5, r5, #1
 801052e:	d00b      	beq.n	8010548 <__pow5mult+0xa0>
 8010530:	6820      	ldr	r0, [r4, #0]
 8010532:	b938      	cbnz	r0, 8010544 <__pow5mult+0x9c>
 8010534:	4622      	mov	r2, r4
 8010536:	4621      	mov	r1, r4
 8010538:	4630      	mov	r0, r6
 801053a:	f7ff ff0f 	bl	801035c <__multiply>
 801053e:	6020      	str	r0, [r4, #0]
 8010540:	f8c0 9000 	str.w	r9, [r0]
 8010544:	4604      	mov	r4, r0
 8010546:	e7e4      	b.n	8010512 <__pow5mult+0x6a>
 8010548:	4638      	mov	r0, r7
 801054a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801054e:	bf00      	nop
 8010550:	08012ce8 	.word	0x08012ce8
 8010554:	08012b0d 	.word	0x08012b0d
 8010558:	08012b94 	.word	0x08012b94

0801055c <__lshift>:
 801055c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010560:	460c      	mov	r4, r1
 8010562:	6849      	ldr	r1, [r1, #4]
 8010564:	6923      	ldr	r3, [r4, #16]
 8010566:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801056a:	68a3      	ldr	r3, [r4, #8]
 801056c:	4607      	mov	r7, r0
 801056e:	4691      	mov	r9, r2
 8010570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010574:	f108 0601 	add.w	r6, r8, #1
 8010578:	42b3      	cmp	r3, r6
 801057a:	db0b      	blt.n	8010594 <__lshift+0x38>
 801057c:	4638      	mov	r0, r7
 801057e:	f7ff fddb 	bl	8010138 <_Balloc>
 8010582:	4605      	mov	r5, r0
 8010584:	b948      	cbnz	r0, 801059a <__lshift+0x3e>
 8010586:	4602      	mov	r2, r0
 8010588:	4b28      	ldr	r3, [pc, #160]	; (801062c <__lshift+0xd0>)
 801058a:	4829      	ldr	r0, [pc, #164]	; (8010630 <__lshift+0xd4>)
 801058c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010590:	f000 faba 	bl	8010b08 <__assert_func>
 8010594:	3101      	adds	r1, #1
 8010596:	005b      	lsls	r3, r3, #1
 8010598:	e7ee      	b.n	8010578 <__lshift+0x1c>
 801059a:	2300      	movs	r3, #0
 801059c:	f100 0114 	add.w	r1, r0, #20
 80105a0:	f100 0210 	add.w	r2, r0, #16
 80105a4:	4618      	mov	r0, r3
 80105a6:	4553      	cmp	r3, sl
 80105a8:	db33      	blt.n	8010612 <__lshift+0xb6>
 80105aa:	6920      	ldr	r0, [r4, #16]
 80105ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80105b0:	f104 0314 	add.w	r3, r4, #20
 80105b4:	f019 091f 	ands.w	r9, r9, #31
 80105b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80105c0:	d02b      	beq.n	801061a <__lshift+0xbe>
 80105c2:	f1c9 0e20 	rsb	lr, r9, #32
 80105c6:	468a      	mov	sl, r1
 80105c8:	2200      	movs	r2, #0
 80105ca:	6818      	ldr	r0, [r3, #0]
 80105cc:	fa00 f009 	lsl.w	r0, r0, r9
 80105d0:	4302      	orrs	r2, r0
 80105d2:	f84a 2b04 	str.w	r2, [sl], #4
 80105d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80105da:	459c      	cmp	ip, r3
 80105dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80105e0:	d8f3      	bhi.n	80105ca <__lshift+0x6e>
 80105e2:	ebac 0304 	sub.w	r3, ip, r4
 80105e6:	3b15      	subs	r3, #21
 80105e8:	f023 0303 	bic.w	r3, r3, #3
 80105ec:	3304      	adds	r3, #4
 80105ee:	f104 0015 	add.w	r0, r4, #21
 80105f2:	4584      	cmp	ip, r0
 80105f4:	bf38      	it	cc
 80105f6:	2304      	movcc	r3, #4
 80105f8:	50ca      	str	r2, [r1, r3]
 80105fa:	b10a      	cbz	r2, 8010600 <__lshift+0xa4>
 80105fc:	f108 0602 	add.w	r6, r8, #2
 8010600:	3e01      	subs	r6, #1
 8010602:	4638      	mov	r0, r7
 8010604:	612e      	str	r6, [r5, #16]
 8010606:	4621      	mov	r1, r4
 8010608:	f7ff fdd6 	bl	80101b8 <_Bfree>
 801060c:	4628      	mov	r0, r5
 801060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010612:	f842 0f04 	str.w	r0, [r2, #4]!
 8010616:	3301      	adds	r3, #1
 8010618:	e7c5      	b.n	80105a6 <__lshift+0x4a>
 801061a:	3904      	subs	r1, #4
 801061c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010620:	f841 2f04 	str.w	r2, [r1, #4]!
 8010624:	459c      	cmp	ip, r3
 8010626:	d8f9      	bhi.n	801061c <__lshift+0xc0>
 8010628:	e7ea      	b.n	8010600 <__lshift+0xa4>
 801062a:	bf00      	nop
 801062c:	08012b83 	.word	0x08012b83
 8010630:	08012b94 	.word	0x08012b94

08010634 <__mcmp>:
 8010634:	b530      	push	{r4, r5, lr}
 8010636:	6902      	ldr	r2, [r0, #16]
 8010638:	690c      	ldr	r4, [r1, #16]
 801063a:	1b12      	subs	r2, r2, r4
 801063c:	d10e      	bne.n	801065c <__mcmp+0x28>
 801063e:	f100 0314 	add.w	r3, r0, #20
 8010642:	3114      	adds	r1, #20
 8010644:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010648:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801064c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010650:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010654:	42a5      	cmp	r5, r4
 8010656:	d003      	beq.n	8010660 <__mcmp+0x2c>
 8010658:	d305      	bcc.n	8010666 <__mcmp+0x32>
 801065a:	2201      	movs	r2, #1
 801065c:	4610      	mov	r0, r2
 801065e:	bd30      	pop	{r4, r5, pc}
 8010660:	4283      	cmp	r3, r0
 8010662:	d3f3      	bcc.n	801064c <__mcmp+0x18>
 8010664:	e7fa      	b.n	801065c <__mcmp+0x28>
 8010666:	f04f 32ff 	mov.w	r2, #4294967295
 801066a:	e7f7      	b.n	801065c <__mcmp+0x28>

0801066c <__mdiff>:
 801066c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010670:	460c      	mov	r4, r1
 8010672:	4606      	mov	r6, r0
 8010674:	4611      	mov	r1, r2
 8010676:	4620      	mov	r0, r4
 8010678:	4617      	mov	r7, r2
 801067a:	f7ff ffdb 	bl	8010634 <__mcmp>
 801067e:	1e05      	subs	r5, r0, #0
 8010680:	d110      	bne.n	80106a4 <__mdiff+0x38>
 8010682:	4629      	mov	r1, r5
 8010684:	4630      	mov	r0, r6
 8010686:	f7ff fd57 	bl	8010138 <_Balloc>
 801068a:	b930      	cbnz	r0, 801069a <__mdiff+0x2e>
 801068c:	4b39      	ldr	r3, [pc, #228]	; (8010774 <__mdiff+0x108>)
 801068e:	4602      	mov	r2, r0
 8010690:	f240 2132 	movw	r1, #562	; 0x232
 8010694:	4838      	ldr	r0, [pc, #224]	; (8010778 <__mdiff+0x10c>)
 8010696:	f000 fa37 	bl	8010b08 <__assert_func>
 801069a:	2301      	movs	r3, #1
 801069c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80106a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a4:	bfa4      	itt	ge
 80106a6:	463b      	movge	r3, r7
 80106a8:	4627      	movge	r7, r4
 80106aa:	4630      	mov	r0, r6
 80106ac:	6879      	ldr	r1, [r7, #4]
 80106ae:	bfa6      	itte	ge
 80106b0:	461c      	movge	r4, r3
 80106b2:	2500      	movge	r5, #0
 80106b4:	2501      	movlt	r5, #1
 80106b6:	f7ff fd3f 	bl	8010138 <_Balloc>
 80106ba:	b920      	cbnz	r0, 80106c6 <__mdiff+0x5a>
 80106bc:	4b2d      	ldr	r3, [pc, #180]	; (8010774 <__mdiff+0x108>)
 80106be:	4602      	mov	r2, r0
 80106c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80106c4:	e7e6      	b.n	8010694 <__mdiff+0x28>
 80106c6:	693e      	ldr	r6, [r7, #16]
 80106c8:	60c5      	str	r5, [r0, #12]
 80106ca:	6925      	ldr	r5, [r4, #16]
 80106cc:	f107 0114 	add.w	r1, r7, #20
 80106d0:	f104 0914 	add.w	r9, r4, #20
 80106d4:	f100 0e14 	add.w	lr, r0, #20
 80106d8:	f107 0210 	add.w	r2, r7, #16
 80106dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80106e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80106e4:	46f2      	mov	sl, lr
 80106e6:	2700      	movs	r7, #0
 80106e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80106ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80106f0:	fa1f f883 	uxth.w	r8, r3
 80106f4:	fa17 f78b 	uxtah	r7, r7, fp
 80106f8:	0c1b      	lsrs	r3, r3, #16
 80106fa:	eba7 0808 	sub.w	r8, r7, r8
 80106fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010706:	fa1f f888 	uxth.w	r8, r8
 801070a:	141f      	asrs	r7, r3, #16
 801070c:	454d      	cmp	r5, r9
 801070e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010712:	f84a 3b04 	str.w	r3, [sl], #4
 8010716:	d8e7      	bhi.n	80106e8 <__mdiff+0x7c>
 8010718:	1b2b      	subs	r3, r5, r4
 801071a:	3b15      	subs	r3, #21
 801071c:	f023 0303 	bic.w	r3, r3, #3
 8010720:	3304      	adds	r3, #4
 8010722:	3415      	adds	r4, #21
 8010724:	42a5      	cmp	r5, r4
 8010726:	bf38      	it	cc
 8010728:	2304      	movcc	r3, #4
 801072a:	4419      	add	r1, r3
 801072c:	4473      	add	r3, lr
 801072e:	469e      	mov	lr, r3
 8010730:	460d      	mov	r5, r1
 8010732:	4565      	cmp	r5, ip
 8010734:	d30e      	bcc.n	8010754 <__mdiff+0xe8>
 8010736:	f10c 0203 	add.w	r2, ip, #3
 801073a:	1a52      	subs	r2, r2, r1
 801073c:	f022 0203 	bic.w	r2, r2, #3
 8010740:	3903      	subs	r1, #3
 8010742:	458c      	cmp	ip, r1
 8010744:	bf38      	it	cc
 8010746:	2200      	movcc	r2, #0
 8010748:	441a      	add	r2, r3
 801074a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801074e:	b17b      	cbz	r3, 8010770 <__mdiff+0x104>
 8010750:	6106      	str	r6, [r0, #16]
 8010752:	e7a5      	b.n	80106a0 <__mdiff+0x34>
 8010754:	f855 8b04 	ldr.w	r8, [r5], #4
 8010758:	fa17 f488 	uxtah	r4, r7, r8
 801075c:	1422      	asrs	r2, r4, #16
 801075e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010762:	b2a4      	uxth	r4, r4
 8010764:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010768:	f84e 4b04 	str.w	r4, [lr], #4
 801076c:	1417      	asrs	r7, r2, #16
 801076e:	e7e0      	b.n	8010732 <__mdiff+0xc6>
 8010770:	3e01      	subs	r6, #1
 8010772:	e7ea      	b.n	801074a <__mdiff+0xde>
 8010774:	08012b83 	.word	0x08012b83
 8010778:	08012b94 	.word	0x08012b94

0801077c <__d2b>:
 801077c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010780:	4689      	mov	r9, r1
 8010782:	2101      	movs	r1, #1
 8010784:	ec57 6b10 	vmov	r6, r7, d0
 8010788:	4690      	mov	r8, r2
 801078a:	f7ff fcd5 	bl	8010138 <_Balloc>
 801078e:	4604      	mov	r4, r0
 8010790:	b930      	cbnz	r0, 80107a0 <__d2b+0x24>
 8010792:	4602      	mov	r2, r0
 8010794:	4b25      	ldr	r3, [pc, #148]	; (801082c <__d2b+0xb0>)
 8010796:	4826      	ldr	r0, [pc, #152]	; (8010830 <__d2b+0xb4>)
 8010798:	f240 310a 	movw	r1, #778	; 0x30a
 801079c:	f000 f9b4 	bl	8010b08 <__assert_func>
 80107a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80107a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107a8:	bb35      	cbnz	r5, 80107f8 <__d2b+0x7c>
 80107aa:	2e00      	cmp	r6, #0
 80107ac:	9301      	str	r3, [sp, #4]
 80107ae:	d028      	beq.n	8010802 <__d2b+0x86>
 80107b0:	4668      	mov	r0, sp
 80107b2:	9600      	str	r6, [sp, #0]
 80107b4:	f7ff fd8c 	bl	80102d0 <__lo0bits>
 80107b8:	9900      	ldr	r1, [sp, #0]
 80107ba:	b300      	cbz	r0, 80107fe <__d2b+0x82>
 80107bc:	9a01      	ldr	r2, [sp, #4]
 80107be:	f1c0 0320 	rsb	r3, r0, #32
 80107c2:	fa02 f303 	lsl.w	r3, r2, r3
 80107c6:	430b      	orrs	r3, r1
 80107c8:	40c2      	lsrs	r2, r0
 80107ca:	6163      	str	r3, [r4, #20]
 80107cc:	9201      	str	r2, [sp, #4]
 80107ce:	9b01      	ldr	r3, [sp, #4]
 80107d0:	61a3      	str	r3, [r4, #24]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	bf14      	ite	ne
 80107d6:	2202      	movne	r2, #2
 80107d8:	2201      	moveq	r2, #1
 80107da:	6122      	str	r2, [r4, #16]
 80107dc:	b1d5      	cbz	r5, 8010814 <__d2b+0x98>
 80107de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80107e2:	4405      	add	r5, r0
 80107e4:	f8c9 5000 	str.w	r5, [r9]
 80107e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80107ec:	f8c8 0000 	str.w	r0, [r8]
 80107f0:	4620      	mov	r0, r4
 80107f2:	b003      	add	sp, #12
 80107f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107fc:	e7d5      	b.n	80107aa <__d2b+0x2e>
 80107fe:	6161      	str	r1, [r4, #20]
 8010800:	e7e5      	b.n	80107ce <__d2b+0x52>
 8010802:	a801      	add	r0, sp, #4
 8010804:	f7ff fd64 	bl	80102d0 <__lo0bits>
 8010808:	9b01      	ldr	r3, [sp, #4]
 801080a:	6163      	str	r3, [r4, #20]
 801080c:	2201      	movs	r2, #1
 801080e:	6122      	str	r2, [r4, #16]
 8010810:	3020      	adds	r0, #32
 8010812:	e7e3      	b.n	80107dc <__d2b+0x60>
 8010814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801081c:	f8c9 0000 	str.w	r0, [r9]
 8010820:	6918      	ldr	r0, [r3, #16]
 8010822:	f7ff fd35 	bl	8010290 <__hi0bits>
 8010826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801082a:	e7df      	b.n	80107ec <__d2b+0x70>
 801082c:	08012b83 	.word	0x08012b83
 8010830:	08012b94 	.word	0x08012b94

08010834 <_calloc_r>:
 8010834:	b513      	push	{r0, r1, r4, lr}
 8010836:	434a      	muls	r2, r1
 8010838:	4611      	mov	r1, r2
 801083a:	9201      	str	r2, [sp, #4]
 801083c:	f7fe f900 	bl	800ea40 <_malloc_r>
 8010840:	4604      	mov	r4, r0
 8010842:	b118      	cbz	r0, 801084c <_calloc_r+0x18>
 8010844:	9a01      	ldr	r2, [sp, #4]
 8010846:	2100      	movs	r1, #0
 8010848:	f7fe f8a2 	bl	800e990 <memset>
 801084c:	4620      	mov	r0, r4
 801084e:	b002      	add	sp, #8
 8010850:	bd10      	pop	{r4, pc}

08010852 <__ssputs_r>:
 8010852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010856:	688e      	ldr	r6, [r1, #8]
 8010858:	429e      	cmp	r6, r3
 801085a:	4682      	mov	sl, r0
 801085c:	460c      	mov	r4, r1
 801085e:	4690      	mov	r8, r2
 8010860:	461f      	mov	r7, r3
 8010862:	d838      	bhi.n	80108d6 <__ssputs_r+0x84>
 8010864:	898a      	ldrh	r2, [r1, #12]
 8010866:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801086a:	d032      	beq.n	80108d2 <__ssputs_r+0x80>
 801086c:	6825      	ldr	r5, [r4, #0]
 801086e:	6909      	ldr	r1, [r1, #16]
 8010870:	eba5 0901 	sub.w	r9, r5, r1
 8010874:	6965      	ldr	r5, [r4, #20]
 8010876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801087a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801087e:	3301      	adds	r3, #1
 8010880:	444b      	add	r3, r9
 8010882:	106d      	asrs	r5, r5, #1
 8010884:	429d      	cmp	r5, r3
 8010886:	bf38      	it	cc
 8010888:	461d      	movcc	r5, r3
 801088a:	0553      	lsls	r3, r2, #21
 801088c:	d531      	bpl.n	80108f2 <__ssputs_r+0xa0>
 801088e:	4629      	mov	r1, r5
 8010890:	f7fe f8d6 	bl	800ea40 <_malloc_r>
 8010894:	4606      	mov	r6, r0
 8010896:	b950      	cbnz	r0, 80108ae <__ssputs_r+0x5c>
 8010898:	230c      	movs	r3, #12
 801089a:	f8ca 3000 	str.w	r3, [sl]
 801089e:	89a3      	ldrh	r3, [r4, #12]
 80108a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108a4:	81a3      	strh	r3, [r4, #12]
 80108a6:	f04f 30ff 	mov.w	r0, #4294967295
 80108aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ae:	6921      	ldr	r1, [r4, #16]
 80108b0:	464a      	mov	r2, r9
 80108b2:	f7fe f85f 	bl	800e974 <memcpy>
 80108b6:	89a3      	ldrh	r3, [r4, #12]
 80108b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80108bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108c0:	81a3      	strh	r3, [r4, #12]
 80108c2:	6126      	str	r6, [r4, #16]
 80108c4:	6165      	str	r5, [r4, #20]
 80108c6:	444e      	add	r6, r9
 80108c8:	eba5 0509 	sub.w	r5, r5, r9
 80108cc:	6026      	str	r6, [r4, #0]
 80108ce:	60a5      	str	r5, [r4, #8]
 80108d0:	463e      	mov	r6, r7
 80108d2:	42be      	cmp	r6, r7
 80108d4:	d900      	bls.n	80108d8 <__ssputs_r+0x86>
 80108d6:	463e      	mov	r6, r7
 80108d8:	4632      	mov	r2, r6
 80108da:	6820      	ldr	r0, [r4, #0]
 80108dc:	4641      	mov	r1, r8
 80108de:	f000 f958 	bl	8010b92 <memmove>
 80108e2:	68a3      	ldr	r3, [r4, #8]
 80108e4:	6822      	ldr	r2, [r4, #0]
 80108e6:	1b9b      	subs	r3, r3, r6
 80108e8:	4432      	add	r2, r6
 80108ea:	60a3      	str	r3, [r4, #8]
 80108ec:	6022      	str	r2, [r4, #0]
 80108ee:	2000      	movs	r0, #0
 80108f0:	e7db      	b.n	80108aa <__ssputs_r+0x58>
 80108f2:	462a      	mov	r2, r5
 80108f4:	f000 f967 	bl	8010bc6 <_realloc_r>
 80108f8:	4606      	mov	r6, r0
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d1e1      	bne.n	80108c2 <__ssputs_r+0x70>
 80108fe:	6921      	ldr	r1, [r4, #16]
 8010900:	4650      	mov	r0, sl
 8010902:	f7fe f84d 	bl	800e9a0 <_free_r>
 8010906:	e7c7      	b.n	8010898 <__ssputs_r+0x46>

08010908 <_svfiprintf_r>:
 8010908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090c:	4698      	mov	r8, r3
 801090e:	898b      	ldrh	r3, [r1, #12]
 8010910:	061b      	lsls	r3, r3, #24
 8010912:	b09d      	sub	sp, #116	; 0x74
 8010914:	4607      	mov	r7, r0
 8010916:	460d      	mov	r5, r1
 8010918:	4614      	mov	r4, r2
 801091a:	d50e      	bpl.n	801093a <_svfiprintf_r+0x32>
 801091c:	690b      	ldr	r3, [r1, #16]
 801091e:	b963      	cbnz	r3, 801093a <_svfiprintf_r+0x32>
 8010920:	2140      	movs	r1, #64	; 0x40
 8010922:	f7fe f88d 	bl	800ea40 <_malloc_r>
 8010926:	6028      	str	r0, [r5, #0]
 8010928:	6128      	str	r0, [r5, #16]
 801092a:	b920      	cbnz	r0, 8010936 <_svfiprintf_r+0x2e>
 801092c:	230c      	movs	r3, #12
 801092e:	603b      	str	r3, [r7, #0]
 8010930:	f04f 30ff 	mov.w	r0, #4294967295
 8010934:	e0d1      	b.n	8010ada <_svfiprintf_r+0x1d2>
 8010936:	2340      	movs	r3, #64	; 0x40
 8010938:	616b      	str	r3, [r5, #20]
 801093a:	2300      	movs	r3, #0
 801093c:	9309      	str	r3, [sp, #36]	; 0x24
 801093e:	2320      	movs	r3, #32
 8010940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010944:	f8cd 800c 	str.w	r8, [sp, #12]
 8010948:	2330      	movs	r3, #48	; 0x30
 801094a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010af4 <_svfiprintf_r+0x1ec>
 801094e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010952:	f04f 0901 	mov.w	r9, #1
 8010956:	4623      	mov	r3, r4
 8010958:	469a      	mov	sl, r3
 801095a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801095e:	b10a      	cbz	r2, 8010964 <_svfiprintf_r+0x5c>
 8010960:	2a25      	cmp	r2, #37	; 0x25
 8010962:	d1f9      	bne.n	8010958 <_svfiprintf_r+0x50>
 8010964:	ebba 0b04 	subs.w	fp, sl, r4
 8010968:	d00b      	beq.n	8010982 <_svfiprintf_r+0x7a>
 801096a:	465b      	mov	r3, fp
 801096c:	4622      	mov	r2, r4
 801096e:	4629      	mov	r1, r5
 8010970:	4638      	mov	r0, r7
 8010972:	f7ff ff6e 	bl	8010852 <__ssputs_r>
 8010976:	3001      	adds	r0, #1
 8010978:	f000 80aa 	beq.w	8010ad0 <_svfiprintf_r+0x1c8>
 801097c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801097e:	445a      	add	r2, fp
 8010980:	9209      	str	r2, [sp, #36]	; 0x24
 8010982:	f89a 3000 	ldrb.w	r3, [sl]
 8010986:	2b00      	cmp	r3, #0
 8010988:	f000 80a2 	beq.w	8010ad0 <_svfiprintf_r+0x1c8>
 801098c:	2300      	movs	r3, #0
 801098e:	f04f 32ff 	mov.w	r2, #4294967295
 8010992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010996:	f10a 0a01 	add.w	sl, sl, #1
 801099a:	9304      	str	r3, [sp, #16]
 801099c:	9307      	str	r3, [sp, #28]
 801099e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109a2:	931a      	str	r3, [sp, #104]	; 0x68
 80109a4:	4654      	mov	r4, sl
 80109a6:	2205      	movs	r2, #5
 80109a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ac:	4851      	ldr	r0, [pc, #324]	; (8010af4 <_svfiprintf_r+0x1ec>)
 80109ae:	f7ef fc17 	bl	80001e0 <memchr>
 80109b2:	9a04      	ldr	r2, [sp, #16]
 80109b4:	b9d8      	cbnz	r0, 80109ee <_svfiprintf_r+0xe6>
 80109b6:	06d0      	lsls	r0, r2, #27
 80109b8:	bf44      	itt	mi
 80109ba:	2320      	movmi	r3, #32
 80109bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109c0:	0711      	lsls	r1, r2, #28
 80109c2:	bf44      	itt	mi
 80109c4:	232b      	movmi	r3, #43	; 0x2b
 80109c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109ca:	f89a 3000 	ldrb.w	r3, [sl]
 80109ce:	2b2a      	cmp	r3, #42	; 0x2a
 80109d0:	d015      	beq.n	80109fe <_svfiprintf_r+0xf6>
 80109d2:	9a07      	ldr	r2, [sp, #28]
 80109d4:	4654      	mov	r4, sl
 80109d6:	2000      	movs	r0, #0
 80109d8:	f04f 0c0a 	mov.w	ip, #10
 80109dc:	4621      	mov	r1, r4
 80109de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109e2:	3b30      	subs	r3, #48	; 0x30
 80109e4:	2b09      	cmp	r3, #9
 80109e6:	d94e      	bls.n	8010a86 <_svfiprintf_r+0x17e>
 80109e8:	b1b0      	cbz	r0, 8010a18 <_svfiprintf_r+0x110>
 80109ea:	9207      	str	r2, [sp, #28]
 80109ec:	e014      	b.n	8010a18 <_svfiprintf_r+0x110>
 80109ee:	eba0 0308 	sub.w	r3, r0, r8
 80109f2:	fa09 f303 	lsl.w	r3, r9, r3
 80109f6:	4313      	orrs	r3, r2
 80109f8:	9304      	str	r3, [sp, #16]
 80109fa:	46a2      	mov	sl, r4
 80109fc:	e7d2      	b.n	80109a4 <_svfiprintf_r+0x9c>
 80109fe:	9b03      	ldr	r3, [sp, #12]
 8010a00:	1d19      	adds	r1, r3, #4
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	9103      	str	r1, [sp, #12]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	bfbb      	ittet	lt
 8010a0a:	425b      	neglt	r3, r3
 8010a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8010a10:	9307      	strge	r3, [sp, #28]
 8010a12:	9307      	strlt	r3, [sp, #28]
 8010a14:	bfb8      	it	lt
 8010a16:	9204      	strlt	r2, [sp, #16]
 8010a18:	7823      	ldrb	r3, [r4, #0]
 8010a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a1c:	d10c      	bne.n	8010a38 <_svfiprintf_r+0x130>
 8010a1e:	7863      	ldrb	r3, [r4, #1]
 8010a20:	2b2a      	cmp	r3, #42	; 0x2a
 8010a22:	d135      	bne.n	8010a90 <_svfiprintf_r+0x188>
 8010a24:	9b03      	ldr	r3, [sp, #12]
 8010a26:	1d1a      	adds	r2, r3, #4
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	9203      	str	r2, [sp, #12]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	bfb8      	it	lt
 8010a30:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a34:	3402      	adds	r4, #2
 8010a36:	9305      	str	r3, [sp, #20]
 8010a38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010b04 <_svfiprintf_r+0x1fc>
 8010a3c:	7821      	ldrb	r1, [r4, #0]
 8010a3e:	2203      	movs	r2, #3
 8010a40:	4650      	mov	r0, sl
 8010a42:	f7ef fbcd 	bl	80001e0 <memchr>
 8010a46:	b140      	cbz	r0, 8010a5a <_svfiprintf_r+0x152>
 8010a48:	2340      	movs	r3, #64	; 0x40
 8010a4a:	eba0 000a 	sub.w	r0, r0, sl
 8010a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8010a52:	9b04      	ldr	r3, [sp, #16]
 8010a54:	4303      	orrs	r3, r0
 8010a56:	3401      	adds	r4, #1
 8010a58:	9304      	str	r3, [sp, #16]
 8010a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a5e:	4826      	ldr	r0, [pc, #152]	; (8010af8 <_svfiprintf_r+0x1f0>)
 8010a60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a64:	2206      	movs	r2, #6
 8010a66:	f7ef fbbb 	bl	80001e0 <memchr>
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	d038      	beq.n	8010ae0 <_svfiprintf_r+0x1d8>
 8010a6e:	4b23      	ldr	r3, [pc, #140]	; (8010afc <_svfiprintf_r+0x1f4>)
 8010a70:	bb1b      	cbnz	r3, 8010aba <_svfiprintf_r+0x1b2>
 8010a72:	9b03      	ldr	r3, [sp, #12]
 8010a74:	3307      	adds	r3, #7
 8010a76:	f023 0307 	bic.w	r3, r3, #7
 8010a7a:	3308      	adds	r3, #8
 8010a7c:	9303      	str	r3, [sp, #12]
 8010a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a80:	4433      	add	r3, r6
 8010a82:	9309      	str	r3, [sp, #36]	; 0x24
 8010a84:	e767      	b.n	8010956 <_svfiprintf_r+0x4e>
 8010a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	2001      	movs	r0, #1
 8010a8e:	e7a5      	b.n	80109dc <_svfiprintf_r+0xd4>
 8010a90:	2300      	movs	r3, #0
 8010a92:	3401      	adds	r4, #1
 8010a94:	9305      	str	r3, [sp, #20]
 8010a96:	4619      	mov	r1, r3
 8010a98:	f04f 0c0a 	mov.w	ip, #10
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010aa2:	3a30      	subs	r2, #48	; 0x30
 8010aa4:	2a09      	cmp	r2, #9
 8010aa6:	d903      	bls.n	8010ab0 <_svfiprintf_r+0x1a8>
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d0c5      	beq.n	8010a38 <_svfiprintf_r+0x130>
 8010aac:	9105      	str	r1, [sp, #20]
 8010aae:	e7c3      	b.n	8010a38 <_svfiprintf_r+0x130>
 8010ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e7f0      	b.n	8010a9c <_svfiprintf_r+0x194>
 8010aba:	ab03      	add	r3, sp, #12
 8010abc:	9300      	str	r3, [sp, #0]
 8010abe:	462a      	mov	r2, r5
 8010ac0:	4b0f      	ldr	r3, [pc, #60]	; (8010b00 <_svfiprintf_r+0x1f8>)
 8010ac2:	a904      	add	r1, sp, #16
 8010ac4:	4638      	mov	r0, r7
 8010ac6:	f7fe f8b5 	bl	800ec34 <_printf_float>
 8010aca:	1c42      	adds	r2, r0, #1
 8010acc:	4606      	mov	r6, r0
 8010ace:	d1d6      	bne.n	8010a7e <_svfiprintf_r+0x176>
 8010ad0:	89ab      	ldrh	r3, [r5, #12]
 8010ad2:	065b      	lsls	r3, r3, #25
 8010ad4:	f53f af2c 	bmi.w	8010930 <_svfiprintf_r+0x28>
 8010ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ada:	b01d      	add	sp, #116	; 0x74
 8010adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae0:	ab03      	add	r3, sp, #12
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	462a      	mov	r2, r5
 8010ae6:	4b06      	ldr	r3, [pc, #24]	; (8010b00 <_svfiprintf_r+0x1f8>)
 8010ae8:	a904      	add	r1, sp, #16
 8010aea:	4638      	mov	r0, r7
 8010aec:	f7fe fb46 	bl	800f17c <_printf_i>
 8010af0:	e7eb      	b.n	8010aca <_svfiprintf_r+0x1c2>
 8010af2:	bf00      	nop
 8010af4:	08012cf4 	.word	0x08012cf4
 8010af8:	08012cfe 	.word	0x08012cfe
 8010afc:	0800ec35 	.word	0x0800ec35
 8010b00:	08010853 	.word	0x08010853
 8010b04:	08012cfa 	.word	0x08012cfa

08010b08 <__assert_func>:
 8010b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b0a:	4614      	mov	r4, r2
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	4b09      	ldr	r3, [pc, #36]	; (8010b34 <__assert_func+0x2c>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4605      	mov	r5, r0
 8010b14:	68d8      	ldr	r0, [r3, #12]
 8010b16:	b14c      	cbz	r4, 8010b2c <__assert_func+0x24>
 8010b18:	4b07      	ldr	r3, [pc, #28]	; (8010b38 <__assert_func+0x30>)
 8010b1a:	9100      	str	r1, [sp, #0]
 8010b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b20:	4906      	ldr	r1, [pc, #24]	; (8010b3c <__assert_func+0x34>)
 8010b22:	462b      	mov	r3, r5
 8010b24:	f000 f80e 	bl	8010b44 <fiprintf>
 8010b28:	f000 fa9a 	bl	8011060 <abort>
 8010b2c:	4b04      	ldr	r3, [pc, #16]	; (8010b40 <__assert_func+0x38>)
 8010b2e:	461c      	mov	r4, r3
 8010b30:	e7f3      	b.n	8010b1a <__assert_func+0x12>
 8010b32:	bf00      	nop
 8010b34:	20000028 	.word	0x20000028
 8010b38:	08012d05 	.word	0x08012d05
 8010b3c:	08012d12 	.word	0x08012d12
 8010b40:	08012d40 	.word	0x08012d40

08010b44 <fiprintf>:
 8010b44:	b40e      	push	{r1, r2, r3}
 8010b46:	b503      	push	{r0, r1, lr}
 8010b48:	4601      	mov	r1, r0
 8010b4a:	ab03      	add	r3, sp, #12
 8010b4c:	4805      	ldr	r0, [pc, #20]	; (8010b64 <fiprintf+0x20>)
 8010b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b52:	6800      	ldr	r0, [r0, #0]
 8010b54:	9301      	str	r3, [sp, #4]
 8010b56:	f000 f885 	bl	8010c64 <_vfiprintf_r>
 8010b5a:	b002      	add	sp, #8
 8010b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b60:	b003      	add	sp, #12
 8010b62:	4770      	bx	lr
 8010b64:	20000028 	.word	0x20000028

08010b68 <__retarget_lock_init_recursive>:
 8010b68:	4770      	bx	lr

08010b6a <__retarget_lock_acquire_recursive>:
 8010b6a:	4770      	bx	lr

08010b6c <__retarget_lock_release_recursive>:
 8010b6c:	4770      	bx	lr

08010b6e <__ascii_mbtowc>:
 8010b6e:	b082      	sub	sp, #8
 8010b70:	b901      	cbnz	r1, 8010b74 <__ascii_mbtowc+0x6>
 8010b72:	a901      	add	r1, sp, #4
 8010b74:	b142      	cbz	r2, 8010b88 <__ascii_mbtowc+0x1a>
 8010b76:	b14b      	cbz	r3, 8010b8c <__ascii_mbtowc+0x1e>
 8010b78:	7813      	ldrb	r3, [r2, #0]
 8010b7a:	600b      	str	r3, [r1, #0]
 8010b7c:	7812      	ldrb	r2, [r2, #0]
 8010b7e:	1e10      	subs	r0, r2, #0
 8010b80:	bf18      	it	ne
 8010b82:	2001      	movne	r0, #1
 8010b84:	b002      	add	sp, #8
 8010b86:	4770      	bx	lr
 8010b88:	4610      	mov	r0, r2
 8010b8a:	e7fb      	b.n	8010b84 <__ascii_mbtowc+0x16>
 8010b8c:	f06f 0001 	mvn.w	r0, #1
 8010b90:	e7f8      	b.n	8010b84 <__ascii_mbtowc+0x16>

08010b92 <memmove>:
 8010b92:	4288      	cmp	r0, r1
 8010b94:	b510      	push	{r4, lr}
 8010b96:	eb01 0402 	add.w	r4, r1, r2
 8010b9a:	d902      	bls.n	8010ba2 <memmove+0x10>
 8010b9c:	4284      	cmp	r4, r0
 8010b9e:	4623      	mov	r3, r4
 8010ba0:	d807      	bhi.n	8010bb2 <memmove+0x20>
 8010ba2:	1e43      	subs	r3, r0, #1
 8010ba4:	42a1      	cmp	r1, r4
 8010ba6:	d008      	beq.n	8010bba <memmove+0x28>
 8010ba8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010bb0:	e7f8      	b.n	8010ba4 <memmove+0x12>
 8010bb2:	4402      	add	r2, r0
 8010bb4:	4601      	mov	r1, r0
 8010bb6:	428a      	cmp	r2, r1
 8010bb8:	d100      	bne.n	8010bbc <memmove+0x2a>
 8010bba:	bd10      	pop	{r4, pc}
 8010bbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010bc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bc4:	e7f7      	b.n	8010bb6 <memmove+0x24>

08010bc6 <_realloc_r>:
 8010bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc8:	4607      	mov	r7, r0
 8010bca:	4614      	mov	r4, r2
 8010bcc:	460e      	mov	r6, r1
 8010bce:	b921      	cbnz	r1, 8010bda <_realloc_r+0x14>
 8010bd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	f7fd bf33 	b.w	800ea40 <_malloc_r>
 8010bda:	b922      	cbnz	r2, 8010be6 <_realloc_r+0x20>
 8010bdc:	f7fd fee0 	bl	800e9a0 <_free_r>
 8010be0:	4625      	mov	r5, r4
 8010be2:	4628      	mov	r0, r5
 8010be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010be6:	f000 fc5f 	bl	80114a8 <_malloc_usable_size_r>
 8010bea:	42a0      	cmp	r0, r4
 8010bec:	d20f      	bcs.n	8010c0e <_realloc_r+0x48>
 8010bee:	4621      	mov	r1, r4
 8010bf0:	4638      	mov	r0, r7
 8010bf2:	f7fd ff25 	bl	800ea40 <_malloc_r>
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d0f2      	beq.n	8010be2 <_realloc_r+0x1c>
 8010bfc:	4631      	mov	r1, r6
 8010bfe:	4622      	mov	r2, r4
 8010c00:	f7fd feb8 	bl	800e974 <memcpy>
 8010c04:	4631      	mov	r1, r6
 8010c06:	4638      	mov	r0, r7
 8010c08:	f7fd feca 	bl	800e9a0 <_free_r>
 8010c0c:	e7e9      	b.n	8010be2 <_realloc_r+0x1c>
 8010c0e:	4635      	mov	r5, r6
 8010c10:	e7e7      	b.n	8010be2 <_realloc_r+0x1c>

08010c12 <__sfputc_r>:
 8010c12:	6893      	ldr	r3, [r2, #8]
 8010c14:	3b01      	subs	r3, #1
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	b410      	push	{r4}
 8010c1a:	6093      	str	r3, [r2, #8]
 8010c1c:	da08      	bge.n	8010c30 <__sfputc_r+0x1e>
 8010c1e:	6994      	ldr	r4, [r2, #24]
 8010c20:	42a3      	cmp	r3, r4
 8010c22:	db01      	blt.n	8010c28 <__sfputc_r+0x16>
 8010c24:	290a      	cmp	r1, #10
 8010c26:	d103      	bne.n	8010c30 <__sfputc_r+0x1e>
 8010c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c2c:	f000 b94a 	b.w	8010ec4 <__swbuf_r>
 8010c30:	6813      	ldr	r3, [r2, #0]
 8010c32:	1c58      	adds	r0, r3, #1
 8010c34:	6010      	str	r0, [r2, #0]
 8010c36:	7019      	strb	r1, [r3, #0]
 8010c38:	4608      	mov	r0, r1
 8010c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <__sfputs_r>:
 8010c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c42:	4606      	mov	r6, r0
 8010c44:	460f      	mov	r7, r1
 8010c46:	4614      	mov	r4, r2
 8010c48:	18d5      	adds	r5, r2, r3
 8010c4a:	42ac      	cmp	r4, r5
 8010c4c:	d101      	bne.n	8010c52 <__sfputs_r+0x12>
 8010c4e:	2000      	movs	r0, #0
 8010c50:	e007      	b.n	8010c62 <__sfputs_r+0x22>
 8010c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c56:	463a      	mov	r2, r7
 8010c58:	4630      	mov	r0, r6
 8010c5a:	f7ff ffda 	bl	8010c12 <__sfputc_r>
 8010c5e:	1c43      	adds	r3, r0, #1
 8010c60:	d1f3      	bne.n	8010c4a <__sfputs_r+0xa>
 8010c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c64 <_vfiprintf_r>:
 8010c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c68:	460d      	mov	r5, r1
 8010c6a:	b09d      	sub	sp, #116	; 0x74
 8010c6c:	4614      	mov	r4, r2
 8010c6e:	4698      	mov	r8, r3
 8010c70:	4606      	mov	r6, r0
 8010c72:	b118      	cbz	r0, 8010c7c <_vfiprintf_r+0x18>
 8010c74:	6983      	ldr	r3, [r0, #24]
 8010c76:	b90b      	cbnz	r3, 8010c7c <_vfiprintf_r+0x18>
 8010c78:	f000 fb14 	bl	80112a4 <__sinit>
 8010c7c:	4b89      	ldr	r3, [pc, #548]	; (8010ea4 <_vfiprintf_r+0x240>)
 8010c7e:	429d      	cmp	r5, r3
 8010c80:	d11b      	bne.n	8010cba <_vfiprintf_r+0x56>
 8010c82:	6875      	ldr	r5, [r6, #4]
 8010c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c86:	07d9      	lsls	r1, r3, #31
 8010c88:	d405      	bmi.n	8010c96 <_vfiprintf_r+0x32>
 8010c8a:	89ab      	ldrh	r3, [r5, #12]
 8010c8c:	059a      	lsls	r2, r3, #22
 8010c8e:	d402      	bmi.n	8010c96 <_vfiprintf_r+0x32>
 8010c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c92:	f7ff ff6a 	bl	8010b6a <__retarget_lock_acquire_recursive>
 8010c96:	89ab      	ldrh	r3, [r5, #12]
 8010c98:	071b      	lsls	r3, r3, #28
 8010c9a:	d501      	bpl.n	8010ca0 <_vfiprintf_r+0x3c>
 8010c9c:	692b      	ldr	r3, [r5, #16]
 8010c9e:	b9eb      	cbnz	r3, 8010cdc <_vfiprintf_r+0x78>
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	f000 f96e 	bl	8010f84 <__swsetup_r>
 8010ca8:	b1c0      	cbz	r0, 8010cdc <_vfiprintf_r+0x78>
 8010caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cac:	07dc      	lsls	r4, r3, #31
 8010cae:	d50e      	bpl.n	8010cce <_vfiprintf_r+0x6a>
 8010cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb4:	b01d      	add	sp, #116	; 0x74
 8010cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cba:	4b7b      	ldr	r3, [pc, #492]	; (8010ea8 <_vfiprintf_r+0x244>)
 8010cbc:	429d      	cmp	r5, r3
 8010cbe:	d101      	bne.n	8010cc4 <_vfiprintf_r+0x60>
 8010cc0:	68b5      	ldr	r5, [r6, #8]
 8010cc2:	e7df      	b.n	8010c84 <_vfiprintf_r+0x20>
 8010cc4:	4b79      	ldr	r3, [pc, #484]	; (8010eac <_vfiprintf_r+0x248>)
 8010cc6:	429d      	cmp	r5, r3
 8010cc8:	bf08      	it	eq
 8010cca:	68f5      	ldreq	r5, [r6, #12]
 8010ccc:	e7da      	b.n	8010c84 <_vfiprintf_r+0x20>
 8010cce:	89ab      	ldrh	r3, [r5, #12]
 8010cd0:	0598      	lsls	r0, r3, #22
 8010cd2:	d4ed      	bmi.n	8010cb0 <_vfiprintf_r+0x4c>
 8010cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cd6:	f7ff ff49 	bl	8010b6c <__retarget_lock_release_recursive>
 8010cda:	e7e9      	b.n	8010cb0 <_vfiprintf_r+0x4c>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	9309      	str	r3, [sp, #36]	; 0x24
 8010ce0:	2320      	movs	r3, #32
 8010ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cea:	2330      	movs	r3, #48	; 0x30
 8010cec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010eb0 <_vfiprintf_r+0x24c>
 8010cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cf4:	f04f 0901 	mov.w	r9, #1
 8010cf8:	4623      	mov	r3, r4
 8010cfa:	469a      	mov	sl, r3
 8010cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d00:	b10a      	cbz	r2, 8010d06 <_vfiprintf_r+0xa2>
 8010d02:	2a25      	cmp	r2, #37	; 0x25
 8010d04:	d1f9      	bne.n	8010cfa <_vfiprintf_r+0x96>
 8010d06:	ebba 0b04 	subs.w	fp, sl, r4
 8010d0a:	d00b      	beq.n	8010d24 <_vfiprintf_r+0xc0>
 8010d0c:	465b      	mov	r3, fp
 8010d0e:	4622      	mov	r2, r4
 8010d10:	4629      	mov	r1, r5
 8010d12:	4630      	mov	r0, r6
 8010d14:	f7ff ff94 	bl	8010c40 <__sfputs_r>
 8010d18:	3001      	adds	r0, #1
 8010d1a:	f000 80aa 	beq.w	8010e72 <_vfiprintf_r+0x20e>
 8010d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d20:	445a      	add	r2, fp
 8010d22:	9209      	str	r2, [sp, #36]	; 0x24
 8010d24:	f89a 3000 	ldrb.w	r3, [sl]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 80a2 	beq.w	8010e72 <_vfiprintf_r+0x20e>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	f04f 32ff 	mov.w	r2, #4294967295
 8010d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d38:	f10a 0a01 	add.w	sl, sl, #1
 8010d3c:	9304      	str	r3, [sp, #16]
 8010d3e:	9307      	str	r3, [sp, #28]
 8010d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d44:	931a      	str	r3, [sp, #104]	; 0x68
 8010d46:	4654      	mov	r4, sl
 8010d48:	2205      	movs	r2, #5
 8010d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d4e:	4858      	ldr	r0, [pc, #352]	; (8010eb0 <_vfiprintf_r+0x24c>)
 8010d50:	f7ef fa46 	bl	80001e0 <memchr>
 8010d54:	9a04      	ldr	r2, [sp, #16]
 8010d56:	b9d8      	cbnz	r0, 8010d90 <_vfiprintf_r+0x12c>
 8010d58:	06d1      	lsls	r1, r2, #27
 8010d5a:	bf44      	itt	mi
 8010d5c:	2320      	movmi	r3, #32
 8010d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d62:	0713      	lsls	r3, r2, #28
 8010d64:	bf44      	itt	mi
 8010d66:	232b      	movmi	r3, #43	; 0x2b
 8010d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d70:	2b2a      	cmp	r3, #42	; 0x2a
 8010d72:	d015      	beq.n	8010da0 <_vfiprintf_r+0x13c>
 8010d74:	9a07      	ldr	r2, [sp, #28]
 8010d76:	4654      	mov	r4, sl
 8010d78:	2000      	movs	r0, #0
 8010d7a:	f04f 0c0a 	mov.w	ip, #10
 8010d7e:	4621      	mov	r1, r4
 8010d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d84:	3b30      	subs	r3, #48	; 0x30
 8010d86:	2b09      	cmp	r3, #9
 8010d88:	d94e      	bls.n	8010e28 <_vfiprintf_r+0x1c4>
 8010d8a:	b1b0      	cbz	r0, 8010dba <_vfiprintf_r+0x156>
 8010d8c:	9207      	str	r2, [sp, #28]
 8010d8e:	e014      	b.n	8010dba <_vfiprintf_r+0x156>
 8010d90:	eba0 0308 	sub.w	r3, r0, r8
 8010d94:	fa09 f303 	lsl.w	r3, r9, r3
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	9304      	str	r3, [sp, #16]
 8010d9c:	46a2      	mov	sl, r4
 8010d9e:	e7d2      	b.n	8010d46 <_vfiprintf_r+0xe2>
 8010da0:	9b03      	ldr	r3, [sp, #12]
 8010da2:	1d19      	adds	r1, r3, #4
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	9103      	str	r1, [sp, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	bfbb      	ittet	lt
 8010dac:	425b      	neglt	r3, r3
 8010dae:	f042 0202 	orrlt.w	r2, r2, #2
 8010db2:	9307      	strge	r3, [sp, #28]
 8010db4:	9307      	strlt	r3, [sp, #28]
 8010db6:	bfb8      	it	lt
 8010db8:	9204      	strlt	r2, [sp, #16]
 8010dba:	7823      	ldrb	r3, [r4, #0]
 8010dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8010dbe:	d10c      	bne.n	8010dda <_vfiprintf_r+0x176>
 8010dc0:	7863      	ldrb	r3, [r4, #1]
 8010dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8010dc4:	d135      	bne.n	8010e32 <_vfiprintf_r+0x1ce>
 8010dc6:	9b03      	ldr	r3, [sp, #12]
 8010dc8:	1d1a      	adds	r2, r3, #4
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	9203      	str	r2, [sp, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	bfb8      	it	lt
 8010dd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dd6:	3402      	adds	r4, #2
 8010dd8:	9305      	str	r3, [sp, #20]
 8010dda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010ec0 <_vfiprintf_r+0x25c>
 8010dde:	7821      	ldrb	r1, [r4, #0]
 8010de0:	2203      	movs	r2, #3
 8010de2:	4650      	mov	r0, sl
 8010de4:	f7ef f9fc 	bl	80001e0 <memchr>
 8010de8:	b140      	cbz	r0, 8010dfc <_vfiprintf_r+0x198>
 8010dea:	2340      	movs	r3, #64	; 0x40
 8010dec:	eba0 000a 	sub.w	r0, r0, sl
 8010df0:	fa03 f000 	lsl.w	r0, r3, r0
 8010df4:	9b04      	ldr	r3, [sp, #16]
 8010df6:	4303      	orrs	r3, r0
 8010df8:	3401      	adds	r4, #1
 8010dfa:	9304      	str	r3, [sp, #16]
 8010dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e00:	482c      	ldr	r0, [pc, #176]	; (8010eb4 <_vfiprintf_r+0x250>)
 8010e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e06:	2206      	movs	r2, #6
 8010e08:	f7ef f9ea 	bl	80001e0 <memchr>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d03f      	beq.n	8010e90 <_vfiprintf_r+0x22c>
 8010e10:	4b29      	ldr	r3, [pc, #164]	; (8010eb8 <_vfiprintf_r+0x254>)
 8010e12:	bb1b      	cbnz	r3, 8010e5c <_vfiprintf_r+0x1f8>
 8010e14:	9b03      	ldr	r3, [sp, #12]
 8010e16:	3307      	adds	r3, #7
 8010e18:	f023 0307 	bic.w	r3, r3, #7
 8010e1c:	3308      	adds	r3, #8
 8010e1e:	9303      	str	r3, [sp, #12]
 8010e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e22:	443b      	add	r3, r7
 8010e24:	9309      	str	r3, [sp, #36]	; 0x24
 8010e26:	e767      	b.n	8010cf8 <_vfiprintf_r+0x94>
 8010e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e2c:	460c      	mov	r4, r1
 8010e2e:	2001      	movs	r0, #1
 8010e30:	e7a5      	b.n	8010d7e <_vfiprintf_r+0x11a>
 8010e32:	2300      	movs	r3, #0
 8010e34:	3401      	adds	r4, #1
 8010e36:	9305      	str	r3, [sp, #20]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	f04f 0c0a 	mov.w	ip, #10
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e44:	3a30      	subs	r2, #48	; 0x30
 8010e46:	2a09      	cmp	r2, #9
 8010e48:	d903      	bls.n	8010e52 <_vfiprintf_r+0x1ee>
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d0c5      	beq.n	8010dda <_vfiprintf_r+0x176>
 8010e4e:	9105      	str	r1, [sp, #20]
 8010e50:	e7c3      	b.n	8010dda <_vfiprintf_r+0x176>
 8010e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e56:	4604      	mov	r4, r0
 8010e58:	2301      	movs	r3, #1
 8010e5a:	e7f0      	b.n	8010e3e <_vfiprintf_r+0x1da>
 8010e5c:	ab03      	add	r3, sp, #12
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	462a      	mov	r2, r5
 8010e62:	4b16      	ldr	r3, [pc, #88]	; (8010ebc <_vfiprintf_r+0x258>)
 8010e64:	a904      	add	r1, sp, #16
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7fd fee4 	bl	800ec34 <_printf_float>
 8010e6c:	4607      	mov	r7, r0
 8010e6e:	1c78      	adds	r0, r7, #1
 8010e70:	d1d6      	bne.n	8010e20 <_vfiprintf_r+0x1bc>
 8010e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e74:	07d9      	lsls	r1, r3, #31
 8010e76:	d405      	bmi.n	8010e84 <_vfiprintf_r+0x220>
 8010e78:	89ab      	ldrh	r3, [r5, #12]
 8010e7a:	059a      	lsls	r2, r3, #22
 8010e7c:	d402      	bmi.n	8010e84 <_vfiprintf_r+0x220>
 8010e7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e80:	f7ff fe74 	bl	8010b6c <__retarget_lock_release_recursive>
 8010e84:	89ab      	ldrh	r3, [r5, #12]
 8010e86:	065b      	lsls	r3, r3, #25
 8010e88:	f53f af12 	bmi.w	8010cb0 <_vfiprintf_r+0x4c>
 8010e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e8e:	e711      	b.n	8010cb4 <_vfiprintf_r+0x50>
 8010e90:	ab03      	add	r3, sp, #12
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	462a      	mov	r2, r5
 8010e96:	4b09      	ldr	r3, [pc, #36]	; (8010ebc <_vfiprintf_r+0x258>)
 8010e98:	a904      	add	r1, sp, #16
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7fe f96e 	bl	800f17c <_printf_i>
 8010ea0:	e7e4      	b.n	8010e6c <_vfiprintf_r+0x208>
 8010ea2:	bf00      	nop
 8010ea4:	08012e6c 	.word	0x08012e6c
 8010ea8:	08012e8c 	.word	0x08012e8c
 8010eac:	08012e4c 	.word	0x08012e4c
 8010eb0:	08012cf4 	.word	0x08012cf4
 8010eb4:	08012cfe 	.word	0x08012cfe
 8010eb8:	0800ec35 	.word	0x0800ec35
 8010ebc:	08010c41 	.word	0x08010c41
 8010ec0:	08012cfa 	.word	0x08012cfa

08010ec4 <__swbuf_r>:
 8010ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ec6:	460e      	mov	r6, r1
 8010ec8:	4614      	mov	r4, r2
 8010eca:	4605      	mov	r5, r0
 8010ecc:	b118      	cbz	r0, 8010ed6 <__swbuf_r+0x12>
 8010ece:	6983      	ldr	r3, [r0, #24]
 8010ed0:	b90b      	cbnz	r3, 8010ed6 <__swbuf_r+0x12>
 8010ed2:	f000 f9e7 	bl	80112a4 <__sinit>
 8010ed6:	4b21      	ldr	r3, [pc, #132]	; (8010f5c <__swbuf_r+0x98>)
 8010ed8:	429c      	cmp	r4, r3
 8010eda:	d12b      	bne.n	8010f34 <__swbuf_r+0x70>
 8010edc:	686c      	ldr	r4, [r5, #4]
 8010ede:	69a3      	ldr	r3, [r4, #24]
 8010ee0:	60a3      	str	r3, [r4, #8]
 8010ee2:	89a3      	ldrh	r3, [r4, #12]
 8010ee4:	071a      	lsls	r2, r3, #28
 8010ee6:	d52f      	bpl.n	8010f48 <__swbuf_r+0x84>
 8010ee8:	6923      	ldr	r3, [r4, #16]
 8010eea:	b36b      	cbz	r3, 8010f48 <__swbuf_r+0x84>
 8010eec:	6923      	ldr	r3, [r4, #16]
 8010eee:	6820      	ldr	r0, [r4, #0]
 8010ef0:	1ac0      	subs	r0, r0, r3
 8010ef2:	6963      	ldr	r3, [r4, #20]
 8010ef4:	b2f6      	uxtb	r6, r6
 8010ef6:	4283      	cmp	r3, r0
 8010ef8:	4637      	mov	r7, r6
 8010efa:	dc04      	bgt.n	8010f06 <__swbuf_r+0x42>
 8010efc:	4621      	mov	r1, r4
 8010efe:	4628      	mov	r0, r5
 8010f00:	f000 f93c 	bl	801117c <_fflush_r>
 8010f04:	bb30      	cbnz	r0, 8010f54 <__swbuf_r+0x90>
 8010f06:	68a3      	ldr	r3, [r4, #8]
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	60a3      	str	r3, [r4, #8]
 8010f0c:	6823      	ldr	r3, [r4, #0]
 8010f0e:	1c5a      	adds	r2, r3, #1
 8010f10:	6022      	str	r2, [r4, #0]
 8010f12:	701e      	strb	r6, [r3, #0]
 8010f14:	6963      	ldr	r3, [r4, #20]
 8010f16:	3001      	adds	r0, #1
 8010f18:	4283      	cmp	r3, r0
 8010f1a:	d004      	beq.n	8010f26 <__swbuf_r+0x62>
 8010f1c:	89a3      	ldrh	r3, [r4, #12]
 8010f1e:	07db      	lsls	r3, r3, #31
 8010f20:	d506      	bpl.n	8010f30 <__swbuf_r+0x6c>
 8010f22:	2e0a      	cmp	r6, #10
 8010f24:	d104      	bne.n	8010f30 <__swbuf_r+0x6c>
 8010f26:	4621      	mov	r1, r4
 8010f28:	4628      	mov	r0, r5
 8010f2a:	f000 f927 	bl	801117c <_fflush_r>
 8010f2e:	b988      	cbnz	r0, 8010f54 <__swbuf_r+0x90>
 8010f30:	4638      	mov	r0, r7
 8010f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f34:	4b0a      	ldr	r3, [pc, #40]	; (8010f60 <__swbuf_r+0x9c>)
 8010f36:	429c      	cmp	r4, r3
 8010f38:	d101      	bne.n	8010f3e <__swbuf_r+0x7a>
 8010f3a:	68ac      	ldr	r4, [r5, #8]
 8010f3c:	e7cf      	b.n	8010ede <__swbuf_r+0x1a>
 8010f3e:	4b09      	ldr	r3, [pc, #36]	; (8010f64 <__swbuf_r+0xa0>)
 8010f40:	429c      	cmp	r4, r3
 8010f42:	bf08      	it	eq
 8010f44:	68ec      	ldreq	r4, [r5, #12]
 8010f46:	e7ca      	b.n	8010ede <__swbuf_r+0x1a>
 8010f48:	4621      	mov	r1, r4
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	f000 f81a 	bl	8010f84 <__swsetup_r>
 8010f50:	2800      	cmp	r0, #0
 8010f52:	d0cb      	beq.n	8010eec <__swbuf_r+0x28>
 8010f54:	f04f 37ff 	mov.w	r7, #4294967295
 8010f58:	e7ea      	b.n	8010f30 <__swbuf_r+0x6c>
 8010f5a:	bf00      	nop
 8010f5c:	08012e6c 	.word	0x08012e6c
 8010f60:	08012e8c 	.word	0x08012e8c
 8010f64:	08012e4c 	.word	0x08012e4c

08010f68 <__ascii_wctomb>:
 8010f68:	b149      	cbz	r1, 8010f7e <__ascii_wctomb+0x16>
 8010f6a:	2aff      	cmp	r2, #255	; 0xff
 8010f6c:	bf85      	ittet	hi
 8010f6e:	238a      	movhi	r3, #138	; 0x8a
 8010f70:	6003      	strhi	r3, [r0, #0]
 8010f72:	700a      	strbls	r2, [r1, #0]
 8010f74:	f04f 30ff 	movhi.w	r0, #4294967295
 8010f78:	bf98      	it	ls
 8010f7a:	2001      	movls	r0, #1
 8010f7c:	4770      	bx	lr
 8010f7e:	4608      	mov	r0, r1
 8010f80:	4770      	bx	lr
	...

08010f84 <__swsetup_r>:
 8010f84:	4b32      	ldr	r3, [pc, #200]	; (8011050 <__swsetup_r+0xcc>)
 8010f86:	b570      	push	{r4, r5, r6, lr}
 8010f88:	681d      	ldr	r5, [r3, #0]
 8010f8a:	4606      	mov	r6, r0
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	b125      	cbz	r5, 8010f9a <__swsetup_r+0x16>
 8010f90:	69ab      	ldr	r3, [r5, #24]
 8010f92:	b913      	cbnz	r3, 8010f9a <__swsetup_r+0x16>
 8010f94:	4628      	mov	r0, r5
 8010f96:	f000 f985 	bl	80112a4 <__sinit>
 8010f9a:	4b2e      	ldr	r3, [pc, #184]	; (8011054 <__swsetup_r+0xd0>)
 8010f9c:	429c      	cmp	r4, r3
 8010f9e:	d10f      	bne.n	8010fc0 <__swsetup_r+0x3c>
 8010fa0:	686c      	ldr	r4, [r5, #4]
 8010fa2:	89a3      	ldrh	r3, [r4, #12]
 8010fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fa8:	0719      	lsls	r1, r3, #28
 8010faa:	d42c      	bmi.n	8011006 <__swsetup_r+0x82>
 8010fac:	06dd      	lsls	r5, r3, #27
 8010fae:	d411      	bmi.n	8010fd4 <__swsetup_r+0x50>
 8010fb0:	2309      	movs	r3, #9
 8010fb2:	6033      	str	r3, [r6, #0]
 8010fb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010fb8:	81a3      	strh	r3, [r4, #12]
 8010fba:	f04f 30ff 	mov.w	r0, #4294967295
 8010fbe:	e03e      	b.n	801103e <__swsetup_r+0xba>
 8010fc0:	4b25      	ldr	r3, [pc, #148]	; (8011058 <__swsetup_r+0xd4>)
 8010fc2:	429c      	cmp	r4, r3
 8010fc4:	d101      	bne.n	8010fca <__swsetup_r+0x46>
 8010fc6:	68ac      	ldr	r4, [r5, #8]
 8010fc8:	e7eb      	b.n	8010fa2 <__swsetup_r+0x1e>
 8010fca:	4b24      	ldr	r3, [pc, #144]	; (801105c <__swsetup_r+0xd8>)
 8010fcc:	429c      	cmp	r4, r3
 8010fce:	bf08      	it	eq
 8010fd0:	68ec      	ldreq	r4, [r5, #12]
 8010fd2:	e7e6      	b.n	8010fa2 <__swsetup_r+0x1e>
 8010fd4:	0758      	lsls	r0, r3, #29
 8010fd6:	d512      	bpl.n	8010ffe <__swsetup_r+0x7a>
 8010fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fda:	b141      	cbz	r1, 8010fee <__swsetup_r+0x6a>
 8010fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fe0:	4299      	cmp	r1, r3
 8010fe2:	d002      	beq.n	8010fea <__swsetup_r+0x66>
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	f7fd fcdb 	bl	800e9a0 <_free_r>
 8010fea:	2300      	movs	r3, #0
 8010fec:	6363      	str	r3, [r4, #52]	; 0x34
 8010fee:	89a3      	ldrh	r3, [r4, #12]
 8010ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010ff4:	81a3      	strh	r3, [r4, #12]
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	6063      	str	r3, [r4, #4]
 8010ffa:	6923      	ldr	r3, [r4, #16]
 8010ffc:	6023      	str	r3, [r4, #0]
 8010ffe:	89a3      	ldrh	r3, [r4, #12]
 8011000:	f043 0308 	orr.w	r3, r3, #8
 8011004:	81a3      	strh	r3, [r4, #12]
 8011006:	6923      	ldr	r3, [r4, #16]
 8011008:	b94b      	cbnz	r3, 801101e <__swsetup_r+0x9a>
 801100a:	89a3      	ldrh	r3, [r4, #12]
 801100c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011014:	d003      	beq.n	801101e <__swsetup_r+0x9a>
 8011016:	4621      	mov	r1, r4
 8011018:	4630      	mov	r0, r6
 801101a:	f000 fa05 	bl	8011428 <__smakebuf_r>
 801101e:	89a0      	ldrh	r0, [r4, #12]
 8011020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011024:	f010 0301 	ands.w	r3, r0, #1
 8011028:	d00a      	beq.n	8011040 <__swsetup_r+0xbc>
 801102a:	2300      	movs	r3, #0
 801102c:	60a3      	str	r3, [r4, #8]
 801102e:	6963      	ldr	r3, [r4, #20]
 8011030:	425b      	negs	r3, r3
 8011032:	61a3      	str	r3, [r4, #24]
 8011034:	6923      	ldr	r3, [r4, #16]
 8011036:	b943      	cbnz	r3, 801104a <__swsetup_r+0xc6>
 8011038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801103c:	d1ba      	bne.n	8010fb4 <__swsetup_r+0x30>
 801103e:	bd70      	pop	{r4, r5, r6, pc}
 8011040:	0781      	lsls	r1, r0, #30
 8011042:	bf58      	it	pl
 8011044:	6963      	ldrpl	r3, [r4, #20]
 8011046:	60a3      	str	r3, [r4, #8]
 8011048:	e7f4      	b.n	8011034 <__swsetup_r+0xb0>
 801104a:	2000      	movs	r0, #0
 801104c:	e7f7      	b.n	801103e <__swsetup_r+0xba>
 801104e:	bf00      	nop
 8011050:	20000028 	.word	0x20000028
 8011054:	08012e6c 	.word	0x08012e6c
 8011058:	08012e8c 	.word	0x08012e8c
 801105c:	08012e4c 	.word	0x08012e4c

08011060 <abort>:
 8011060:	b508      	push	{r3, lr}
 8011062:	2006      	movs	r0, #6
 8011064:	f000 fa50 	bl	8011508 <raise>
 8011068:	2001      	movs	r0, #1
 801106a:	f7f3 fc89 	bl	8004980 <_exit>
	...

08011070 <__sflush_r>:
 8011070:	898a      	ldrh	r2, [r1, #12]
 8011072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011076:	4605      	mov	r5, r0
 8011078:	0710      	lsls	r0, r2, #28
 801107a:	460c      	mov	r4, r1
 801107c:	d458      	bmi.n	8011130 <__sflush_r+0xc0>
 801107e:	684b      	ldr	r3, [r1, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	dc05      	bgt.n	8011090 <__sflush_r+0x20>
 8011084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011086:	2b00      	cmp	r3, #0
 8011088:	dc02      	bgt.n	8011090 <__sflush_r+0x20>
 801108a:	2000      	movs	r0, #0
 801108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011092:	2e00      	cmp	r6, #0
 8011094:	d0f9      	beq.n	801108a <__sflush_r+0x1a>
 8011096:	2300      	movs	r3, #0
 8011098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801109c:	682f      	ldr	r7, [r5, #0]
 801109e:	602b      	str	r3, [r5, #0]
 80110a0:	d032      	beq.n	8011108 <__sflush_r+0x98>
 80110a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80110a4:	89a3      	ldrh	r3, [r4, #12]
 80110a6:	075a      	lsls	r2, r3, #29
 80110a8:	d505      	bpl.n	80110b6 <__sflush_r+0x46>
 80110aa:	6863      	ldr	r3, [r4, #4]
 80110ac:	1ac0      	subs	r0, r0, r3
 80110ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110b0:	b10b      	cbz	r3, 80110b6 <__sflush_r+0x46>
 80110b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110b4:	1ac0      	subs	r0, r0, r3
 80110b6:	2300      	movs	r3, #0
 80110b8:	4602      	mov	r2, r0
 80110ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110bc:	6a21      	ldr	r1, [r4, #32]
 80110be:	4628      	mov	r0, r5
 80110c0:	47b0      	blx	r6
 80110c2:	1c43      	adds	r3, r0, #1
 80110c4:	89a3      	ldrh	r3, [r4, #12]
 80110c6:	d106      	bne.n	80110d6 <__sflush_r+0x66>
 80110c8:	6829      	ldr	r1, [r5, #0]
 80110ca:	291d      	cmp	r1, #29
 80110cc:	d82c      	bhi.n	8011128 <__sflush_r+0xb8>
 80110ce:	4a2a      	ldr	r2, [pc, #168]	; (8011178 <__sflush_r+0x108>)
 80110d0:	40ca      	lsrs	r2, r1
 80110d2:	07d6      	lsls	r6, r2, #31
 80110d4:	d528      	bpl.n	8011128 <__sflush_r+0xb8>
 80110d6:	2200      	movs	r2, #0
 80110d8:	6062      	str	r2, [r4, #4]
 80110da:	04d9      	lsls	r1, r3, #19
 80110dc:	6922      	ldr	r2, [r4, #16]
 80110de:	6022      	str	r2, [r4, #0]
 80110e0:	d504      	bpl.n	80110ec <__sflush_r+0x7c>
 80110e2:	1c42      	adds	r2, r0, #1
 80110e4:	d101      	bne.n	80110ea <__sflush_r+0x7a>
 80110e6:	682b      	ldr	r3, [r5, #0]
 80110e8:	b903      	cbnz	r3, 80110ec <__sflush_r+0x7c>
 80110ea:	6560      	str	r0, [r4, #84]	; 0x54
 80110ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110ee:	602f      	str	r7, [r5, #0]
 80110f0:	2900      	cmp	r1, #0
 80110f2:	d0ca      	beq.n	801108a <__sflush_r+0x1a>
 80110f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110f8:	4299      	cmp	r1, r3
 80110fa:	d002      	beq.n	8011102 <__sflush_r+0x92>
 80110fc:	4628      	mov	r0, r5
 80110fe:	f7fd fc4f 	bl	800e9a0 <_free_r>
 8011102:	2000      	movs	r0, #0
 8011104:	6360      	str	r0, [r4, #52]	; 0x34
 8011106:	e7c1      	b.n	801108c <__sflush_r+0x1c>
 8011108:	6a21      	ldr	r1, [r4, #32]
 801110a:	2301      	movs	r3, #1
 801110c:	4628      	mov	r0, r5
 801110e:	47b0      	blx	r6
 8011110:	1c41      	adds	r1, r0, #1
 8011112:	d1c7      	bne.n	80110a4 <__sflush_r+0x34>
 8011114:	682b      	ldr	r3, [r5, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d0c4      	beq.n	80110a4 <__sflush_r+0x34>
 801111a:	2b1d      	cmp	r3, #29
 801111c:	d001      	beq.n	8011122 <__sflush_r+0xb2>
 801111e:	2b16      	cmp	r3, #22
 8011120:	d101      	bne.n	8011126 <__sflush_r+0xb6>
 8011122:	602f      	str	r7, [r5, #0]
 8011124:	e7b1      	b.n	801108a <__sflush_r+0x1a>
 8011126:	89a3      	ldrh	r3, [r4, #12]
 8011128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801112c:	81a3      	strh	r3, [r4, #12]
 801112e:	e7ad      	b.n	801108c <__sflush_r+0x1c>
 8011130:	690f      	ldr	r7, [r1, #16]
 8011132:	2f00      	cmp	r7, #0
 8011134:	d0a9      	beq.n	801108a <__sflush_r+0x1a>
 8011136:	0793      	lsls	r3, r2, #30
 8011138:	680e      	ldr	r6, [r1, #0]
 801113a:	bf08      	it	eq
 801113c:	694b      	ldreq	r3, [r1, #20]
 801113e:	600f      	str	r7, [r1, #0]
 8011140:	bf18      	it	ne
 8011142:	2300      	movne	r3, #0
 8011144:	eba6 0807 	sub.w	r8, r6, r7
 8011148:	608b      	str	r3, [r1, #8]
 801114a:	f1b8 0f00 	cmp.w	r8, #0
 801114e:	dd9c      	ble.n	801108a <__sflush_r+0x1a>
 8011150:	6a21      	ldr	r1, [r4, #32]
 8011152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011154:	4643      	mov	r3, r8
 8011156:	463a      	mov	r2, r7
 8011158:	4628      	mov	r0, r5
 801115a:	47b0      	blx	r6
 801115c:	2800      	cmp	r0, #0
 801115e:	dc06      	bgt.n	801116e <__sflush_r+0xfe>
 8011160:	89a3      	ldrh	r3, [r4, #12]
 8011162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011166:	81a3      	strh	r3, [r4, #12]
 8011168:	f04f 30ff 	mov.w	r0, #4294967295
 801116c:	e78e      	b.n	801108c <__sflush_r+0x1c>
 801116e:	4407      	add	r7, r0
 8011170:	eba8 0800 	sub.w	r8, r8, r0
 8011174:	e7e9      	b.n	801114a <__sflush_r+0xda>
 8011176:	bf00      	nop
 8011178:	20400001 	.word	0x20400001

0801117c <_fflush_r>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	690b      	ldr	r3, [r1, #16]
 8011180:	4605      	mov	r5, r0
 8011182:	460c      	mov	r4, r1
 8011184:	b913      	cbnz	r3, 801118c <_fflush_r+0x10>
 8011186:	2500      	movs	r5, #0
 8011188:	4628      	mov	r0, r5
 801118a:	bd38      	pop	{r3, r4, r5, pc}
 801118c:	b118      	cbz	r0, 8011196 <_fflush_r+0x1a>
 801118e:	6983      	ldr	r3, [r0, #24]
 8011190:	b90b      	cbnz	r3, 8011196 <_fflush_r+0x1a>
 8011192:	f000 f887 	bl	80112a4 <__sinit>
 8011196:	4b14      	ldr	r3, [pc, #80]	; (80111e8 <_fflush_r+0x6c>)
 8011198:	429c      	cmp	r4, r3
 801119a:	d11b      	bne.n	80111d4 <_fflush_r+0x58>
 801119c:	686c      	ldr	r4, [r5, #4]
 801119e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0ef      	beq.n	8011186 <_fflush_r+0xa>
 80111a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80111a8:	07d0      	lsls	r0, r2, #31
 80111aa:	d404      	bmi.n	80111b6 <_fflush_r+0x3a>
 80111ac:	0599      	lsls	r1, r3, #22
 80111ae:	d402      	bmi.n	80111b6 <_fflush_r+0x3a>
 80111b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111b2:	f7ff fcda 	bl	8010b6a <__retarget_lock_acquire_recursive>
 80111b6:	4628      	mov	r0, r5
 80111b8:	4621      	mov	r1, r4
 80111ba:	f7ff ff59 	bl	8011070 <__sflush_r>
 80111be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111c0:	07da      	lsls	r2, r3, #31
 80111c2:	4605      	mov	r5, r0
 80111c4:	d4e0      	bmi.n	8011188 <_fflush_r+0xc>
 80111c6:	89a3      	ldrh	r3, [r4, #12]
 80111c8:	059b      	lsls	r3, r3, #22
 80111ca:	d4dd      	bmi.n	8011188 <_fflush_r+0xc>
 80111cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111ce:	f7ff fccd 	bl	8010b6c <__retarget_lock_release_recursive>
 80111d2:	e7d9      	b.n	8011188 <_fflush_r+0xc>
 80111d4:	4b05      	ldr	r3, [pc, #20]	; (80111ec <_fflush_r+0x70>)
 80111d6:	429c      	cmp	r4, r3
 80111d8:	d101      	bne.n	80111de <_fflush_r+0x62>
 80111da:	68ac      	ldr	r4, [r5, #8]
 80111dc:	e7df      	b.n	801119e <_fflush_r+0x22>
 80111de:	4b04      	ldr	r3, [pc, #16]	; (80111f0 <_fflush_r+0x74>)
 80111e0:	429c      	cmp	r4, r3
 80111e2:	bf08      	it	eq
 80111e4:	68ec      	ldreq	r4, [r5, #12]
 80111e6:	e7da      	b.n	801119e <_fflush_r+0x22>
 80111e8:	08012e6c 	.word	0x08012e6c
 80111ec:	08012e8c 	.word	0x08012e8c
 80111f0:	08012e4c 	.word	0x08012e4c

080111f4 <std>:
 80111f4:	2300      	movs	r3, #0
 80111f6:	b510      	push	{r4, lr}
 80111f8:	4604      	mov	r4, r0
 80111fa:	e9c0 3300 	strd	r3, r3, [r0]
 80111fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011202:	6083      	str	r3, [r0, #8]
 8011204:	8181      	strh	r1, [r0, #12]
 8011206:	6643      	str	r3, [r0, #100]	; 0x64
 8011208:	81c2      	strh	r2, [r0, #14]
 801120a:	6183      	str	r3, [r0, #24]
 801120c:	4619      	mov	r1, r3
 801120e:	2208      	movs	r2, #8
 8011210:	305c      	adds	r0, #92	; 0x5c
 8011212:	f7fd fbbd 	bl	800e990 <memset>
 8011216:	4b05      	ldr	r3, [pc, #20]	; (801122c <std+0x38>)
 8011218:	6263      	str	r3, [r4, #36]	; 0x24
 801121a:	4b05      	ldr	r3, [pc, #20]	; (8011230 <std+0x3c>)
 801121c:	62a3      	str	r3, [r4, #40]	; 0x28
 801121e:	4b05      	ldr	r3, [pc, #20]	; (8011234 <std+0x40>)
 8011220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011222:	4b05      	ldr	r3, [pc, #20]	; (8011238 <std+0x44>)
 8011224:	6224      	str	r4, [r4, #32]
 8011226:	6323      	str	r3, [r4, #48]	; 0x30
 8011228:	bd10      	pop	{r4, pc}
 801122a:	bf00      	nop
 801122c:	08011541 	.word	0x08011541
 8011230:	08011563 	.word	0x08011563
 8011234:	0801159b 	.word	0x0801159b
 8011238:	080115bf 	.word	0x080115bf

0801123c <_cleanup_r>:
 801123c:	4901      	ldr	r1, [pc, #4]	; (8011244 <_cleanup_r+0x8>)
 801123e:	f000 b8af 	b.w	80113a0 <_fwalk_reent>
 8011242:	bf00      	nop
 8011244:	0801117d 	.word	0x0801117d

08011248 <__sfmoreglue>:
 8011248:	b570      	push	{r4, r5, r6, lr}
 801124a:	1e4a      	subs	r2, r1, #1
 801124c:	2568      	movs	r5, #104	; 0x68
 801124e:	4355      	muls	r5, r2
 8011250:	460e      	mov	r6, r1
 8011252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011256:	f7fd fbf3 	bl	800ea40 <_malloc_r>
 801125a:	4604      	mov	r4, r0
 801125c:	b140      	cbz	r0, 8011270 <__sfmoreglue+0x28>
 801125e:	2100      	movs	r1, #0
 8011260:	e9c0 1600 	strd	r1, r6, [r0]
 8011264:	300c      	adds	r0, #12
 8011266:	60a0      	str	r0, [r4, #8]
 8011268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801126c:	f7fd fb90 	bl	800e990 <memset>
 8011270:	4620      	mov	r0, r4
 8011272:	bd70      	pop	{r4, r5, r6, pc}

08011274 <__sfp_lock_acquire>:
 8011274:	4801      	ldr	r0, [pc, #4]	; (801127c <__sfp_lock_acquire+0x8>)
 8011276:	f7ff bc78 	b.w	8010b6a <__retarget_lock_acquire_recursive>
 801127a:	bf00      	nop
 801127c:	20004e84 	.word	0x20004e84

08011280 <__sfp_lock_release>:
 8011280:	4801      	ldr	r0, [pc, #4]	; (8011288 <__sfp_lock_release+0x8>)
 8011282:	f7ff bc73 	b.w	8010b6c <__retarget_lock_release_recursive>
 8011286:	bf00      	nop
 8011288:	20004e84 	.word	0x20004e84

0801128c <__sinit_lock_acquire>:
 801128c:	4801      	ldr	r0, [pc, #4]	; (8011294 <__sinit_lock_acquire+0x8>)
 801128e:	f7ff bc6c 	b.w	8010b6a <__retarget_lock_acquire_recursive>
 8011292:	bf00      	nop
 8011294:	20004e7f 	.word	0x20004e7f

08011298 <__sinit_lock_release>:
 8011298:	4801      	ldr	r0, [pc, #4]	; (80112a0 <__sinit_lock_release+0x8>)
 801129a:	f7ff bc67 	b.w	8010b6c <__retarget_lock_release_recursive>
 801129e:	bf00      	nop
 80112a0:	20004e7f 	.word	0x20004e7f

080112a4 <__sinit>:
 80112a4:	b510      	push	{r4, lr}
 80112a6:	4604      	mov	r4, r0
 80112a8:	f7ff fff0 	bl	801128c <__sinit_lock_acquire>
 80112ac:	69a3      	ldr	r3, [r4, #24]
 80112ae:	b11b      	cbz	r3, 80112b8 <__sinit+0x14>
 80112b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112b4:	f7ff bff0 	b.w	8011298 <__sinit_lock_release>
 80112b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80112bc:	6523      	str	r3, [r4, #80]	; 0x50
 80112be:	4b13      	ldr	r3, [pc, #76]	; (801130c <__sinit+0x68>)
 80112c0:	4a13      	ldr	r2, [pc, #76]	; (8011310 <__sinit+0x6c>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80112c6:	42a3      	cmp	r3, r4
 80112c8:	bf04      	itt	eq
 80112ca:	2301      	moveq	r3, #1
 80112cc:	61a3      	streq	r3, [r4, #24]
 80112ce:	4620      	mov	r0, r4
 80112d0:	f000 f820 	bl	8011314 <__sfp>
 80112d4:	6060      	str	r0, [r4, #4]
 80112d6:	4620      	mov	r0, r4
 80112d8:	f000 f81c 	bl	8011314 <__sfp>
 80112dc:	60a0      	str	r0, [r4, #8]
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 f818 	bl	8011314 <__sfp>
 80112e4:	2200      	movs	r2, #0
 80112e6:	60e0      	str	r0, [r4, #12]
 80112e8:	2104      	movs	r1, #4
 80112ea:	6860      	ldr	r0, [r4, #4]
 80112ec:	f7ff ff82 	bl	80111f4 <std>
 80112f0:	68a0      	ldr	r0, [r4, #8]
 80112f2:	2201      	movs	r2, #1
 80112f4:	2109      	movs	r1, #9
 80112f6:	f7ff ff7d 	bl	80111f4 <std>
 80112fa:	68e0      	ldr	r0, [r4, #12]
 80112fc:	2202      	movs	r2, #2
 80112fe:	2112      	movs	r1, #18
 8011300:	f7ff ff78 	bl	80111f4 <std>
 8011304:	2301      	movs	r3, #1
 8011306:	61a3      	str	r3, [r4, #24]
 8011308:	e7d2      	b.n	80112b0 <__sinit+0xc>
 801130a:	bf00      	nop
 801130c:	08012ac8 	.word	0x08012ac8
 8011310:	0801123d 	.word	0x0801123d

08011314 <__sfp>:
 8011314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011316:	4607      	mov	r7, r0
 8011318:	f7ff ffac 	bl	8011274 <__sfp_lock_acquire>
 801131c:	4b1e      	ldr	r3, [pc, #120]	; (8011398 <__sfp+0x84>)
 801131e:	681e      	ldr	r6, [r3, #0]
 8011320:	69b3      	ldr	r3, [r6, #24]
 8011322:	b913      	cbnz	r3, 801132a <__sfp+0x16>
 8011324:	4630      	mov	r0, r6
 8011326:	f7ff ffbd 	bl	80112a4 <__sinit>
 801132a:	3648      	adds	r6, #72	; 0x48
 801132c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011330:	3b01      	subs	r3, #1
 8011332:	d503      	bpl.n	801133c <__sfp+0x28>
 8011334:	6833      	ldr	r3, [r6, #0]
 8011336:	b30b      	cbz	r3, 801137c <__sfp+0x68>
 8011338:	6836      	ldr	r6, [r6, #0]
 801133a:	e7f7      	b.n	801132c <__sfp+0x18>
 801133c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011340:	b9d5      	cbnz	r5, 8011378 <__sfp+0x64>
 8011342:	4b16      	ldr	r3, [pc, #88]	; (801139c <__sfp+0x88>)
 8011344:	60e3      	str	r3, [r4, #12]
 8011346:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801134a:	6665      	str	r5, [r4, #100]	; 0x64
 801134c:	f7ff fc0c 	bl	8010b68 <__retarget_lock_init_recursive>
 8011350:	f7ff ff96 	bl	8011280 <__sfp_lock_release>
 8011354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801135c:	6025      	str	r5, [r4, #0]
 801135e:	61a5      	str	r5, [r4, #24]
 8011360:	2208      	movs	r2, #8
 8011362:	4629      	mov	r1, r5
 8011364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011368:	f7fd fb12 	bl	800e990 <memset>
 801136c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011374:	4620      	mov	r0, r4
 8011376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011378:	3468      	adds	r4, #104	; 0x68
 801137a:	e7d9      	b.n	8011330 <__sfp+0x1c>
 801137c:	2104      	movs	r1, #4
 801137e:	4638      	mov	r0, r7
 8011380:	f7ff ff62 	bl	8011248 <__sfmoreglue>
 8011384:	4604      	mov	r4, r0
 8011386:	6030      	str	r0, [r6, #0]
 8011388:	2800      	cmp	r0, #0
 801138a:	d1d5      	bne.n	8011338 <__sfp+0x24>
 801138c:	f7ff ff78 	bl	8011280 <__sfp_lock_release>
 8011390:	230c      	movs	r3, #12
 8011392:	603b      	str	r3, [r7, #0]
 8011394:	e7ee      	b.n	8011374 <__sfp+0x60>
 8011396:	bf00      	nop
 8011398:	08012ac8 	.word	0x08012ac8
 801139c:	ffff0001 	.word	0xffff0001

080113a0 <_fwalk_reent>:
 80113a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113a4:	4606      	mov	r6, r0
 80113a6:	4688      	mov	r8, r1
 80113a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80113ac:	2700      	movs	r7, #0
 80113ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113b2:	f1b9 0901 	subs.w	r9, r9, #1
 80113b6:	d505      	bpl.n	80113c4 <_fwalk_reent+0x24>
 80113b8:	6824      	ldr	r4, [r4, #0]
 80113ba:	2c00      	cmp	r4, #0
 80113bc:	d1f7      	bne.n	80113ae <_fwalk_reent+0xe>
 80113be:	4638      	mov	r0, r7
 80113c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113c4:	89ab      	ldrh	r3, [r5, #12]
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d907      	bls.n	80113da <_fwalk_reent+0x3a>
 80113ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113ce:	3301      	adds	r3, #1
 80113d0:	d003      	beq.n	80113da <_fwalk_reent+0x3a>
 80113d2:	4629      	mov	r1, r5
 80113d4:	4630      	mov	r0, r6
 80113d6:	47c0      	blx	r8
 80113d8:	4307      	orrs	r7, r0
 80113da:	3568      	adds	r5, #104	; 0x68
 80113dc:	e7e9      	b.n	80113b2 <_fwalk_reent+0x12>

080113de <__swhatbuf_r>:
 80113de:	b570      	push	{r4, r5, r6, lr}
 80113e0:	460e      	mov	r6, r1
 80113e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113e6:	2900      	cmp	r1, #0
 80113e8:	b096      	sub	sp, #88	; 0x58
 80113ea:	4614      	mov	r4, r2
 80113ec:	461d      	mov	r5, r3
 80113ee:	da07      	bge.n	8011400 <__swhatbuf_r+0x22>
 80113f0:	2300      	movs	r3, #0
 80113f2:	602b      	str	r3, [r5, #0]
 80113f4:	89b3      	ldrh	r3, [r6, #12]
 80113f6:	061a      	lsls	r2, r3, #24
 80113f8:	d410      	bmi.n	801141c <__swhatbuf_r+0x3e>
 80113fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113fe:	e00e      	b.n	801141e <__swhatbuf_r+0x40>
 8011400:	466a      	mov	r2, sp
 8011402:	f000 f903 	bl	801160c <_fstat_r>
 8011406:	2800      	cmp	r0, #0
 8011408:	dbf2      	blt.n	80113f0 <__swhatbuf_r+0x12>
 801140a:	9a01      	ldr	r2, [sp, #4]
 801140c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011410:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011414:	425a      	negs	r2, r3
 8011416:	415a      	adcs	r2, r3
 8011418:	602a      	str	r2, [r5, #0]
 801141a:	e7ee      	b.n	80113fa <__swhatbuf_r+0x1c>
 801141c:	2340      	movs	r3, #64	; 0x40
 801141e:	2000      	movs	r0, #0
 8011420:	6023      	str	r3, [r4, #0]
 8011422:	b016      	add	sp, #88	; 0x58
 8011424:	bd70      	pop	{r4, r5, r6, pc}
	...

08011428 <__smakebuf_r>:
 8011428:	898b      	ldrh	r3, [r1, #12]
 801142a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801142c:	079d      	lsls	r5, r3, #30
 801142e:	4606      	mov	r6, r0
 8011430:	460c      	mov	r4, r1
 8011432:	d507      	bpl.n	8011444 <__smakebuf_r+0x1c>
 8011434:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011438:	6023      	str	r3, [r4, #0]
 801143a:	6123      	str	r3, [r4, #16]
 801143c:	2301      	movs	r3, #1
 801143e:	6163      	str	r3, [r4, #20]
 8011440:	b002      	add	sp, #8
 8011442:	bd70      	pop	{r4, r5, r6, pc}
 8011444:	ab01      	add	r3, sp, #4
 8011446:	466a      	mov	r2, sp
 8011448:	f7ff ffc9 	bl	80113de <__swhatbuf_r>
 801144c:	9900      	ldr	r1, [sp, #0]
 801144e:	4605      	mov	r5, r0
 8011450:	4630      	mov	r0, r6
 8011452:	f7fd faf5 	bl	800ea40 <_malloc_r>
 8011456:	b948      	cbnz	r0, 801146c <__smakebuf_r+0x44>
 8011458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801145c:	059a      	lsls	r2, r3, #22
 801145e:	d4ef      	bmi.n	8011440 <__smakebuf_r+0x18>
 8011460:	f023 0303 	bic.w	r3, r3, #3
 8011464:	f043 0302 	orr.w	r3, r3, #2
 8011468:	81a3      	strh	r3, [r4, #12]
 801146a:	e7e3      	b.n	8011434 <__smakebuf_r+0xc>
 801146c:	4b0d      	ldr	r3, [pc, #52]	; (80114a4 <__smakebuf_r+0x7c>)
 801146e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011470:	89a3      	ldrh	r3, [r4, #12]
 8011472:	6020      	str	r0, [r4, #0]
 8011474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011478:	81a3      	strh	r3, [r4, #12]
 801147a:	9b00      	ldr	r3, [sp, #0]
 801147c:	6163      	str	r3, [r4, #20]
 801147e:	9b01      	ldr	r3, [sp, #4]
 8011480:	6120      	str	r0, [r4, #16]
 8011482:	b15b      	cbz	r3, 801149c <__smakebuf_r+0x74>
 8011484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011488:	4630      	mov	r0, r6
 801148a:	f000 f8d1 	bl	8011630 <_isatty_r>
 801148e:	b128      	cbz	r0, 801149c <__smakebuf_r+0x74>
 8011490:	89a3      	ldrh	r3, [r4, #12]
 8011492:	f023 0303 	bic.w	r3, r3, #3
 8011496:	f043 0301 	orr.w	r3, r3, #1
 801149a:	81a3      	strh	r3, [r4, #12]
 801149c:	89a0      	ldrh	r0, [r4, #12]
 801149e:	4305      	orrs	r5, r0
 80114a0:	81a5      	strh	r5, [r4, #12]
 80114a2:	e7cd      	b.n	8011440 <__smakebuf_r+0x18>
 80114a4:	0801123d 	.word	0x0801123d

080114a8 <_malloc_usable_size_r>:
 80114a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114ac:	1f18      	subs	r0, r3, #4
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	bfbc      	itt	lt
 80114b2:	580b      	ldrlt	r3, [r1, r0]
 80114b4:	18c0      	addlt	r0, r0, r3
 80114b6:	4770      	bx	lr

080114b8 <_raise_r>:
 80114b8:	291f      	cmp	r1, #31
 80114ba:	b538      	push	{r3, r4, r5, lr}
 80114bc:	4604      	mov	r4, r0
 80114be:	460d      	mov	r5, r1
 80114c0:	d904      	bls.n	80114cc <_raise_r+0x14>
 80114c2:	2316      	movs	r3, #22
 80114c4:	6003      	str	r3, [r0, #0]
 80114c6:	f04f 30ff 	mov.w	r0, #4294967295
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
 80114cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114ce:	b112      	cbz	r2, 80114d6 <_raise_r+0x1e>
 80114d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114d4:	b94b      	cbnz	r3, 80114ea <_raise_r+0x32>
 80114d6:	4620      	mov	r0, r4
 80114d8:	f000 f830 	bl	801153c <_getpid_r>
 80114dc:	462a      	mov	r2, r5
 80114de:	4601      	mov	r1, r0
 80114e0:	4620      	mov	r0, r4
 80114e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114e6:	f000 b817 	b.w	8011518 <_kill_r>
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d00a      	beq.n	8011504 <_raise_r+0x4c>
 80114ee:	1c59      	adds	r1, r3, #1
 80114f0:	d103      	bne.n	80114fa <_raise_r+0x42>
 80114f2:	2316      	movs	r3, #22
 80114f4:	6003      	str	r3, [r0, #0]
 80114f6:	2001      	movs	r0, #1
 80114f8:	e7e7      	b.n	80114ca <_raise_r+0x12>
 80114fa:	2400      	movs	r4, #0
 80114fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011500:	4628      	mov	r0, r5
 8011502:	4798      	blx	r3
 8011504:	2000      	movs	r0, #0
 8011506:	e7e0      	b.n	80114ca <_raise_r+0x12>

08011508 <raise>:
 8011508:	4b02      	ldr	r3, [pc, #8]	; (8011514 <raise+0xc>)
 801150a:	4601      	mov	r1, r0
 801150c:	6818      	ldr	r0, [r3, #0]
 801150e:	f7ff bfd3 	b.w	80114b8 <_raise_r>
 8011512:	bf00      	nop
 8011514:	20000028 	.word	0x20000028

08011518 <_kill_r>:
 8011518:	b538      	push	{r3, r4, r5, lr}
 801151a:	4d07      	ldr	r5, [pc, #28]	; (8011538 <_kill_r+0x20>)
 801151c:	2300      	movs	r3, #0
 801151e:	4604      	mov	r4, r0
 8011520:	4608      	mov	r0, r1
 8011522:	4611      	mov	r1, r2
 8011524:	602b      	str	r3, [r5, #0]
 8011526:	f7f3 fa1b 	bl	8004960 <_kill>
 801152a:	1c43      	adds	r3, r0, #1
 801152c:	d102      	bne.n	8011534 <_kill_r+0x1c>
 801152e:	682b      	ldr	r3, [r5, #0]
 8011530:	b103      	cbz	r3, 8011534 <_kill_r+0x1c>
 8011532:	6023      	str	r3, [r4, #0]
 8011534:	bd38      	pop	{r3, r4, r5, pc}
 8011536:	bf00      	nop
 8011538:	20004e78 	.word	0x20004e78

0801153c <_getpid_r>:
 801153c:	f7f3 ba08 	b.w	8004950 <_getpid>

08011540 <__sread>:
 8011540:	b510      	push	{r4, lr}
 8011542:	460c      	mov	r4, r1
 8011544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011548:	f000 f894 	bl	8011674 <_read_r>
 801154c:	2800      	cmp	r0, #0
 801154e:	bfab      	itete	ge
 8011550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011552:	89a3      	ldrhlt	r3, [r4, #12]
 8011554:	181b      	addge	r3, r3, r0
 8011556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801155a:	bfac      	ite	ge
 801155c:	6563      	strge	r3, [r4, #84]	; 0x54
 801155e:	81a3      	strhlt	r3, [r4, #12]
 8011560:	bd10      	pop	{r4, pc}

08011562 <__swrite>:
 8011562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011566:	461f      	mov	r7, r3
 8011568:	898b      	ldrh	r3, [r1, #12]
 801156a:	05db      	lsls	r3, r3, #23
 801156c:	4605      	mov	r5, r0
 801156e:	460c      	mov	r4, r1
 8011570:	4616      	mov	r6, r2
 8011572:	d505      	bpl.n	8011580 <__swrite+0x1e>
 8011574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011578:	2302      	movs	r3, #2
 801157a:	2200      	movs	r2, #0
 801157c:	f000 f868 	bl	8011650 <_lseek_r>
 8011580:	89a3      	ldrh	r3, [r4, #12]
 8011582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801158a:	81a3      	strh	r3, [r4, #12]
 801158c:	4632      	mov	r2, r6
 801158e:	463b      	mov	r3, r7
 8011590:	4628      	mov	r0, r5
 8011592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011596:	f000 b817 	b.w	80115c8 <_write_r>

0801159a <__sseek>:
 801159a:	b510      	push	{r4, lr}
 801159c:	460c      	mov	r4, r1
 801159e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115a2:	f000 f855 	bl	8011650 <_lseek_r>
 80115a6:	1c43      	adds	r3, r0, #1
 80115a8:	89a3      	ldrh	r3, [r4, #12]
 80115aa:	bf15      	itete	ne
 80115ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80115ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115b6:	81a3      	strheq	r3, [r4, #12]
 80115b8:	bf18      	it	ne
 80115ba:	81a3      	strhne	r3, [r4, #12]
 80115bc:	bd10      	pop	{r4, pc}

080115be <__sclose>:
 80115be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115c2:	f000 b813 	b.w	80115ec <_close_r>
	...

080115c8 <_write_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	4d07      	ldr	r5, [pc, #28]	; (80115e8 <_write_r+0x20>)
 80115cc:	4604      	mov	r4, r0
 80115ce:	4608      	mov	r0, r1
 80115d0:	4611      	mov	r1, r2
 80115d2:	2200      	movs	r2, #0
 80115d4:	602a      	str	r2, [r5, #0]
 80115d6:	461a      	mov	r2, r3
 80115d8:	f7f3 f9f9 	bl	80049ce <_write>
 80115dc:	1c43      	adds	r3, r0, #1
 80115de:	d102      	bne.n	80115e6 <_write_r+0x1e>
 80115e0:	682b      	ldr	r3, [r5, #0]
 80115e2:	b103      	cbz	r3, 80115e6 <_write_r+0x1e>
 80115e4:	6023      	str	r3, [r4, #0]
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	20004e78 	.word	0x20004e78

080115ec <_close_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4d06      	ldr	r5, [pc, #24]	; (8011608 <_close_r+0x1c>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	602b      	str	r3, [r5, #0]
 80115f8:	f7f3 fa05 	bl	8004a06 <_close>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_close_r+0x1a>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	b103      	cbz	r3, 8011606 <_close_r+0x1a>
 8011604:	6023      	str	r3, [r4, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	20004e78 	.word	0x20004e78

0801160c <_fstat_r>:
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	4d07      	ldr	r5, [pc, #28]	; (801162c <_fstat_r+0x20>)
 8011610:	2300      	movs	r3, #0
 8011612:	4604      	mov	r4, r0
 8011614:	4608      	mov	r0, r1
 8011616:	4611      	mov	r1, r2
 8011618:	602b      	str	r3, [r5, #0]
 801161a:	f7f3 fa00 	bl	8004a1e <_fstat>
 801161e:	1c43      	adds	r3, r0, #1
 8011620:	d102      	bne.n	8011628 <_fstat_r+0x1c>
 8011622:	682b      	ldr	r3, [r5, #0]
 8011624:	b103      	cbz	r3, 8011628 <_fstat_r+0x1c>
 8011626:	6023      	str	r3, [r4, #0]
 8011628:	bd38      	pop	{r3, r4, r5, pc}
 801162a:	bf00      	nop
 801162c:	20004e78 	.word	0x20004e78

08011630 <_isatty_r>:
 8011630:	b538      	push	{r3, r4, r5, lr}
 8011632:	4d06      	ldr	r5, [pc, #24]	; (801164c <_isatty_r+0x1c>)
 8011634:	2300      	movs	r3, #0
 8011636:	4604      	mov	r4, r0
 8011638:	4608      	mov	r0, r1
 801163a:	602b      	str	r3, [r5, #0]
 801163c:	f7f3 f9ff 	bl	8004a3e <_isatty>
 8011640:	1c43      	adds	r3, r0, #1
 8011642:	d102      	bne.n	801164a <_isatty_r+0x1a>
 8011644:	682b      	ldr	r3, [r5, #0]
 8011646:	b103      	cbz	r3, 801164a <_isatty_r+0x1a>
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	bd38      	pop	{r3, r4, r5, pc}
 801164c:	20004e78 	.word	0x20004e78

08011650 <_lseek_r>:
 8011650:	b538      	push	{r3, r4, r5, lr}
 8011652:	4d07      	ldr	r5, [pc, #28]	; (8011670 <_lseek_r+0x20>)
 8011654:	4604      	mov	r4, r0
 8011656:	4608      	mov	r0, r1
 8011658:	4611      	mov	r1, r2
 801165a:	2200      	movs	r2, #0
 801165c:	602a      	str	r2, [r5, #0]
 801165e:	461a      	mov	r2, r3
 8011660:	f7f3 f9f8 	bl	8004a54 <_lseek>
 8011664:	1c43      	adds	r3, r0, #1
 8011666:	d102      	bne.n	801166e <_lseek_r+0x1e>
 8011668:	682b      	ldr	r3, [r5, #0]
 801166a:	b103      	cbz	r3, 801166e <_lseek_r+0x1e>
 801166c:	6023      	str	r3, [r4, #0]
 801166e:	bd38      	pop	{r3, r4, r5, pc}
 8011670:	20004e78 	.word	0x20004e78

08011674 <_read_r>:
 8011674:	b538      	push	{r3, r4, r5, lr}
 8011676:	4d07      	ldr	r5, [pc, #28]	; (8011694 <_read_r+0x20>)
 8011678:	4604      	mov	r4, r0
 801167a:	4608      	mov	r0, r1
 801167c:	4611      	mov	r1, r2
 801167e:	2200      	movs	r2, #0
 8011680:	602a      	str	r2, [r5, #0]
 8011682:	461a      	mov	r2, r3
 8011684:	f7f3 f986 	bl	8004994 <_read>
 8011688:	1c43      	adds	r3, r0, #1
 801168a:	d102      	bne.n	8011692 <_read_r+0x1e>
 801168c:	682b      	ldr	r3, [r5, #0]
 801168e:	b103      	cbz	r3, 8011692 <_read_r+0x1e>
 8011690:	6023      	str	r3, [r4, #0]
 8011692:	bd38      	pop	{r3, r4, r5, pc}
 8011694:	20004e78 	.word	0x20004e78

08011698 <_init>:
 8011698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169a:	bf00      	nop
 801169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801169e:	bc08      	pop	{r3}
 80116a0:	469e      	mov	lr, r3
 80116a2:	4770      	bx	lr

080116a4 <_fini>:
 80116a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a6:	bf00      	nop
 80116a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116aa:	bc08      	pop	{r3}
 80116ac:	469e      	mov	lr, r3
 80116ae:	4770      	bx	lr
