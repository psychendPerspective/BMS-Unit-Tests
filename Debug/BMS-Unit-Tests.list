
BMS-Unit-Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001307c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017bc  08013210  08013210  00023210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149cc  080149cc  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  080149cc  080149cc  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080149cc  080149cc  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149cc  080149cc  000249cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080149d0  080149d0  000249d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080149d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          00002bb8  200001f4  200001f4  000301f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002dac  20002dac  000301f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b105  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c26  00000000  00000000  0004b329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0004ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001338  00000000  00000000  00050418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cb4  00000000  00000000  00051750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d728  00000000  00000000  00073404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bcfff  00000000  00000000  00090b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014db2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006918  00000000  00000000  0014db7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080131f4 	.word	0x080131f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080131f4 	.word	0x080131f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <driverHWSPI1Init>:

#include "driverHWSPI1.h"

SPI_HandleTypeDef driverHWSPI1Handle;

void driverHWSPI1Init(GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  driverHWSPI1Handle.Instance = SPI1;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <driverHWSPI1Init+0x8c>)
 8000c98:	601a      	str	r2, [r3, #0]
  driverHWSPI1Handle.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  driverHWSPI1Handle.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  driverHWSPI1Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000caa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cae:	60da      	str	r2, [r3, #12]
  driverHWSPI1Handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	611a      	str	r2, [r3, #16]
  driverHWSPI1Handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	615a      	str	r2, [r3, #20]
  driverHWSPI1Handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cc2:	619a      	str	r2, [r3, #24]
  driverHWSPI1Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cc6:	2238      	movs	r2, #56	; 0x38
 8000cc8:	61da      	str	r2, [r3, #28]
  driverHWSPI1Handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  driverHWSPI1Handle.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  driverHWSPI1Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  driverHWSPI1Handle.Init.CRCPolynomial = 7;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  driverHWSPI1Handle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  driverHWSPI1Handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&driverHWSPI1Handle) != HAL_OK)
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cf0:	f008 fed2 	bl	8009a98 <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d000      	beq.n	8000cfc <driverHWSPI1Init+0x74>
  {
    while(true);
 8000cfa:	e7fe      	b.n	8000cfa <driverHWSPI1Init+0x72>
  }

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f006 fee6 	bl	8007ad4 <HAL_GPIO_WritePin>
};
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000210 	.word	0x20000210
 8000d14:	40013000 	.word	0x40013000

08000d18 <driverHWSPI1Write>:

bool driverHWSPI1Write(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	461a      	mov	r2, r3
 8000d24:	460b      	mov	r3, r1
 8000d26:	72fb      	strb	r3, [r7, #11]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	813b      	strh	r3, [r7, #8]
	uint8_t *readBuffer;																																					// Make fake buffer holder
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state
	readBuffer = malloc(noOfBytesToWrite);																												// Make fake buffer for
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00f fb6c 	bl	801040c <malloc>
 8000d34:	4603      	mov	r3, r0
 8000d36:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);																      // Make CS low
 8000d38:	893b      	ldrh	r3, [r7, #8]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f006 fec8 	bl	8007ad4 <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeBuffer,readBuffer,noOfBytesToWrite,driverHWSPI1DefaultTimeout);	// Write desired data to slave and store the received data in readBuffer
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2264      	movs	r2, #100	; 0x64
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	480f      	ldr	r0, [pc, #60]	; (8000d90 <driverHWSPI1Write+0x78>)
 8000d52:	f009 f8ba 	bl	8009eca <HAL_SPI_TransmitReceive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	74fb      	strb	r3, [r7, #19]
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  																		// Wait until transmission is complete
 8000d5a:	bf00      	nop
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <driverHWSPI1Write+0x78>)
 8000d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d0f9      	beq.n	8000d5c <driverHWSPI1Write+0x44>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);																	      // Make CS High
 8000d68:	893b      	ldrh	r3, [r7, #8]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f006 feb0 	bl	8007ad4 <HAL_GPIO_WritePin>

	free(readBuffer);																																							// Dump de fake buffer
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f00f fb51 	bl	801041c <free>

	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
 8000d7a:	7cfb      	ldrb	r3, [r7, #19]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
};
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000210 	.word	0x20000210

08000d94 <driverHWSPI1WriteRead>:

bool driverHWSPI1WriteRead(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, uint8_t *readBuffer, uint8_t noOfBytesToRead, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	460b      	mov	r3, r1
 8000da2:	72fb      	strb	r3, [r7, #11]
 8000da4:	4613      	mov	r3, r2
 8000da6:	72bb      	strb	r3, [r7, #10]
	uint8_t *writeArray, *readArray;
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state

	writeArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 8000da8:	7afa      	ldrb	r2, [r7, #11]
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	4413      	add	r3, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00f fb2c 	bl	801040c <malloc>
 8000db4:	4603      	mov	r3, r0
 8000db6:	61fb      	str	r3, [r7, #28]
	readArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 8000db8:	7afa      	ldrb	r2, [r7, #11]
 8000dba:	7abb      	ldrb	r3, [r7, #10]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f00f fb24 	bl	801040c <malloc>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	61bb      	str	r3, [r7, #24]

	memset(writeArray,0xFF,noOfBytesToWrite+noOfBytesToRead);
 8000dc8:	7afa      	ldrb	r2, [r7, #11]
 8000dca:	7abb      	ldrb	r3, [r7, #10]
 8000dcc:	4413      	add	r3, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	21ff      	movs	r1, #255	; 0xff
 8000dd2:	69f8      	ldr	r0, [r7, #28]
 8000dd4:	f00f fb38 	bl	8010448 <memset>
	memcpy(writeArray,writeBuffer,noOfBytesToWrite);
 8000dd8:	7afb      	ldrb	r3, [r7, #11]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68f9      	ldr	r1, [r7, #12]
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f00f fb24 	bl	801042c <memcpy>

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);
 8000de4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dec:	f006 fe72 	bl	8007ad4 <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeArray,readArray,noOfBytesToWrite+noOfBytesToRead,driverHWSPI1DefaultTimeout);
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	7abb      	ldrb	r3, [r7, #10]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2264      	movs	r2, #100	; 0x64
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	69f9      	ldr	r1, [r7, #28]
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <driverHWSPI1WriteRead+0xc4>)
 8000e06:	f009 f860 	bl	8009eca <HAL_SPI_TransmitReceive>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	75fb      	strb	r3, [r7, #23]
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 8000e0e:	bf00      	nop
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <driverHWSPI1WriteRead+0xc4>)
 8000e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d0f9      	beq.n	8000e10 <driverHWSPI1WriteRead+0x7c>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 8000e1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4619      	mov	r1, r3
 8000e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e24:	f006 fe56 	bl	8007ad4 <HAL_GPIO_WritePin>

	memcpy(readBuffer,readArray+noOfBytesToWrite,noOfBytesToRead);
 8000e28:	7afb      	ldrb	r3, [r7, #11]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	7aba      	ldrb	r2, [r7, #10]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f00f fafa 	bl	801042c <memcpy>

	free(writeArray);
 8000e38:	69f8      	ldr	r0, [r7, #28]
 8000e3a:	f00f faef 	bl	801041c <free>
	free(readArray);
 8000e3e:	69b8      	ldr	r0, [r7, #24]
 8000e40:	f00f faec 	bl	801041c <free>

	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
};
 8000e50:	4618      	mov	r0, r3
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000210 	.word	0x20000210

08000e5c <driverSWLTC6804DelayMS>:
uint8_t driverSWLTC6804MaxNoOfCellPerModule = 0;
uint8_t driverSWLTC6804MaxNoOfTempSensorPerModule = 0;

driverLTC6804ConfigStructTypedef driverSWLTC6804ConfigStruct;

void driverSWLTC6804DelayMS(uint32_t delayMS) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = HAL_GetTick();
 8000e64:	f005 fca0 	bl	80067a8 <HAL_GetTick>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60fb      	str	r3, [r7, #12]
	while(!modDelayTick1ms(&currentTick,delayMS)){};
 8000e6c:	bf00      	nop
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f005 f94c 	bl	8006112 <modDelayTick1ms>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f6      	beq.n	8000e6e <driverSWLTC6804DelayMS+0x12>
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <driverSWLTC6804Init>:

void driverSWLTC6804Init(driverLTC6804ConfigStructTypedef configStruct, uint8_t totalNumberOfLTCs, uint8_t noOfCellPerModule, uint8_t noOfTempSensorPerModule, uint8_t cellMonitorType) {
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e9e:	466b      	mov	r3, sp
 8000ea0:	461e      	mov	r6, r3
	driverSWLTC6804ConfigStruct = configStruct;
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <driverSWLTC6804Init+0x11c>)
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	driverSWLTC6804TotalNumberOfICs = totalNumberOfLTCs;
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <driverSWLTC6804Init+0x120>)
 8000eb8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000ebc:	7013      	strb	r3, [r2, #0]
	driverSWLTC6804MaxNoOfCellPerModule = noOfCellPerModule;
 8000ebe:	4a3c      	ldr	r2, [pc, #240]	; (8000fb0 <driverSWLTC6804Init+0x124>)
 8000ec0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000ec4:	7013      	strb	r3, [r2, #0]
	driverSWLTC6804MaxNoOfTempSensorPerModule = noOfTempSensorPerModule;
 8000ec6:	4a3b      	ldr	r2, [pc, #236]	; (8000fb4 <driverSWLTC6804Init+0x128>)
 8000ec8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000ecc:	7013      	strb	r3, [r2, #0]

	uint8_t rxConfig [driverSWLTC6804TotalNumberOfICs][8];
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <driverSWLTC6804Init+0x120>)
 8000ed0:	7819      	ldrb	r1, [r3, #0]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	b2cb      	uxtb	r3, r1
 8000eda:	2200      	movs	r2, #0
 8000edc:	469a      	mov	sl, r3
 8000ede:	4693      	mov	fp, r2
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000eec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000ef0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000ef4:	b2cb      	uxtb	r3, r1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4698      	mov	r8, r3
 8000efa:	4691      	mov	r9, r2
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000f08:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000f0c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000f10:	460b      	mov	r3, r1
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	3307      	adds	r3, #7
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f1e:	466b      	mov	r3, sp
 8000f20:	3300      	adds	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
	uint8_t LTCScanCount = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73bb      	strb	r3, [r7, #14]
	int8_t returnPEC = -1;
 8000f28:	23ff      	movs	r3, #255	; 0xff
 8000f2a:	73fb      	strb	r3, [r7, #15]

	driverHWSPI1Init(GPIOA,GPIO_PIN_4);
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f32:	f7ff fea9 	bl	8000c88 <driverHWSPI1Init>
	driverSWLTC6804WakeIC();
 8000f36:	f001 fa0c 	bl	8002352 <driverSWLTC6804WakeIC>

	while((LTCScanCount < 5) && (returnPEC == -1)){
 8000f3a:	e024      	b.n	8000f86 <driverSWLTC6804Init+0xfa>
	  returnPEC =	driverSWLTC6804ReadConfigRegister(driverSWLTC6804TotalNumberOfICs,rxConfig);
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <driverSWLTC6804Init+0x120>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 f96a 	bl	800221c <driverSWLTC6804ReadConfigRegister>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
		driverSWLTC6804WakeIC();
 8000f4c:	f001 fa01 	bl	8002352 <driverSWLTC6804WakeIC>
		driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,0,false);
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <driverSWLTC6804Init+0x120>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fe29 	bl	8001bb0 <driverSWLTC6804WriteConfigRegister>
		if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8000f5e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d003      	beq.n	8000f6e <driverSWLTC6804Init+0xe2>
 8000f66:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d106      	bne.n	8000f7c <driverSWLTC6804Init+0xf0>
			driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,0,false);
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <driverSWLTC6804Init+0x120>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 ffbc 	bl	8001ef4 <driverSWLTC6804WriteConfigRegisterB>
	}
		driverSWLTC6804WakeIC();
 8000f7c:	f001 f9e9 	bl	8002352 <driverSWLTC6804WakeIC>
		LTCScanCount++;
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	3301      	adds	r3, #1
 8000f84:	73bb      	strb	r3, [r7, #14]
	while((LTCScanCount < 5) && (returnPEC == -1)){
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d804      	bhi.n	8000f96 <driverSWLTC6804Init+0x10a>
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d0d2      	beq.n	8000f3c <driverSWLTC6804Init+0xb0>
 8000f96:	46b5      	mov	sp, r6
	}
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa2:	b004      	add	sp, #16
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000278 	.word	0x20000278
 8000fac:	20000274 	.word	0x20000274
 8000fb0:	20000275 	.word	0x20000275
 8000fb4:	20000276 	.word	0x20000276

08000fb8 <driverSWLTC6804ResetCellVoltageRegisters>:

void driverSWLTC6804ResetCellVoltageRegisters(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = 0x07;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	703b      	strb	r3, [r7, #0]
  cmd[1] = 0x11;
 8000fc2:	2311      	movs	r3, #17
 8000fc4:	707b      	strb	r3, [r7, #1]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f001 f8f2 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	80fb      	strh	r3, [r7, #6]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec );
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	70fb      	strb	r3, [r7, #3]

	driverSWLTC6804WakeIC();
 8000fe4:	f001 f9b5 	bl	8002352 <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2104      	movs	r1, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 f986 	bl	80022fe <driverSWLTC6804Write>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <driverSWLTC6804ResetAuxRegisters>:

void driverSWLTC6804ResetAuxRegisters(void) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = 0x07;
 8001000:	2307      	movs	r3, #7
 8001002:	703b      	strb	r3, [r7, #0]
  cmd[1] = 0x12;
 8001004:	2312      	movs	r3, #18
 8001006:	707b      	strb	r3, [r7, #1]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	2002      	movs	r0, #2
 800100e:	f001 f8d1 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec );
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	70fb      	strb	r3, [r7, #3]

	driverSWLTC6804WakeIC();
 8001026:	f001 f994 	bl	8002352 <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 800102a:	463b      	mov	r3, r7
 800102c:	2104      	movs	r1, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f001 f965 	bl	80022fe <driverSWLTC6804Write>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <driverSWLTC6804StartCellVoltageConversion>:

  driverSWLTC6804WakeIC();
  driverSWLTC6804Write(cmd,4);
}

void driverSWLTC6804StartCellVoltageConversion(uint8_t MD,uint8_t DCP, uint8_t CH) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	460b      	mov	r3, r1
 8001048:	71bb      	strb	r3, [r7, #6]
 800104a:	4613      	mov	r3, r2
 800104c:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[4];
  uint16_t cmd_pec;
	uint8_t ADCV[2]; //!< Cell Voltage conversion command.

  ADCV[0] = ((MD & 0x02) >> 1) + 0x02;
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	105b      	asrs	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	3302      	adds	r3, #2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	733b      	strb	r3, [r7, #12]
  ADCV[1] = ((MD & 0x01) << 7) + 0x60 + (DCP<<4) + CH;
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	01db      	lsls	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	b2da      	uxtb	r2, r3
 8001070:	797b      	ldrb	r3, [r7, #5]
 8001072:	4413      	add	r3, r2
 8001074:	b2db      	uxtb	r3, r3
 8001076:	3360      	adds	r3, #96	; 0x60
 8001078:	b2db      	uxtb	r3, r3
 800107a:	737b      	strb	r3, [r7, #13]

  cmd[0] = ADCV[0];
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	743b      	strb	r3, [r7, #16]
  cmd[1] = ADCV[1];
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	747b      	strb	r3, [r7, #17]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADCV);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	2002      	movs	r0, #2
 800108c:	f001 f892 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8001090:	4603      	mov	r3, r0
 8001092:	82fb      	strh	r3, [r7, #22]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001094:	8afb      	ldrh	r3, [r7, #22]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (uint8_t)(cmd_pec);
 800109e:	8afb      	ldrh	r3, [r7, #22]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	74fb      	strb	r3, [r7, #19]

	driverSWLTC6804WakeIC();
 80010a4:	f001 f955 	bl	8002352 <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2104      	movs	r1, #4
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 f925 	bl	80022fe <driverSWLTC6804Write>
}
 80010b4:	bf00      	nop
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <driverSWLTC6804StartAuxVoltageConversion>:

	driverSWLTC6804WakeIC();
  driverSWLTC6804Write(cmd,4);
}

void driverSWLTC6804StartAuxVoltageConversion(uint8_t MD, uint8_t CHG) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint16_t cmd_pec;
	uint8_t ADAX[2]; //!< GPIO conversion command.

  ADAX[0] = ((MD & 0x02) >> 1) + 0x04;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	105b      	asrs	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	3304      	adds	r3, #4
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	733b      	strb	r3, [r7, #12]
  ADAX[1] = ((MD & 0x01) << 7) + 0x60 + CHG ;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	01db      	lsls	r3, r3, #7
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	4413      	add	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3360      	adds	r3, #96	; 0x60
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	737b      	strb	r3, [r7, #13]

  cmd[0] = ADAX[0];
 80010f0:	7b3b      	ldrb	r3, [r7, #12]
 80010f2:	743b      	strb	r3, [r7, #16]
  cmd[1] = ADAX[1];
 80010f4:	7b7b      	ldrb	r3, [r7, #13]
 80010f6:	747b      	strb	r3, [r7, #17]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADAX);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	2002      	movs	r0, #2
 8001100:	f001 f858 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8001104:	4603      	mov	r3, r0
 8001106:	82fb      	strh	r3, [r7, #22]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001108:	8afb      	ldrh	r3, [r7, #22]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	b29b      	uxth	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (uint8_t)(cmd_pec);
 8001112:	8afb      	ldrh	r3, [r7, #22]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	74fb      	strb	r3, [r7, #19]

	driverSWLTC6804WakeIC();
 8001118:	f001 f91b 	bl	8002352 <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f8eb 	bl	80022fe <driverSWLTC6804Write>
}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <driverSWLTC6804ReadCellVoltagesArray>:


bool driverSWLTC6804ReadCellVoltagesArray(float cellVoltagesArray[][driverSWLTC6804MaxNoOfCellPerModule]) {
 8001130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001134:	b093      	sub	sp, #76	; 0x4c
 8001136:	af00      	add	r7, sp, #0
 8001138:	62f8      	str	r0, [r7, #44]	; 0x2c
 800113a:	4b79      	ldr	r3, [pc, #484]	; (8001320 <driverSWLTC6804ReadCellVoltagesArray+0x1f0>)
 800113c:	781e      	ldrb	r6, [r3, #0]
 800113e:	4633      	mov	r3, r6
 8001140:	3b01      	subs	r3, #1
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
 8001144:	b2f3      	uxtb	r3, r6
 8001146:	2200      	movs	r2, #0
 8001148:	461c      	mov	r4, r3
 800114a:	4615      	mov	r5, r2
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	016b      	lsls	r3, r5, #5
 8001156:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800115a:	0162      	lsls	r2, r4, #5
 800115c:	466b      	mov	r3, sp
 800115e:	461d      	mov	r5, r3
	bool dataValid = true;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule];
 8001166:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <driverSWLTC6804ReadCellVoltagesArray+0x1f0>)
 8001168:	7819      	ldrb	r1, [r3, #0]
 800116a:	4b6e      	ldr	r3, [pc, #440]	; (8001324 <driverSWLTC6804ReadCellVoltagesArray+0x1f4>)
 800116c:	7818      	ldrb	r0, [r3, #0]
 800116e:	460b      	mov	r3, r1
 8001170:	3b01      	subs	r3, #1
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001174:	b2cb      	uxtb	r3, r1
 8001176:	2200      	movs	r2, #0
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	627a      	str	r2, [r7, #36]	; 0x24
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001186:	0123      	lsls	r3, r4, #4
 8001188:	6a3c      	ldr	r4, [r7, #32]
 800118a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800118e:	6a3c      	ldr	r4, [r7, #32]
 8001190:	0122      	lsls	r2, r4, #4
 8001192:	460b      	mov	r3, r1
 8001194:	005c      	lsls	r4, r3, #1
 8001196:	4603      	mov	r3, r0
 8001198:	3b01      	subs	r3, #1
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
 800119c:	b2cb      	uxtb	r3, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	61fa      	str	r2, [r7, #28]
 80011a4:	b2c3      	uxtb	r3, r0
 80011a6:	2200      	movs	r2, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	617a      	str	r2, [r7, #20]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	fb02 fc03 	mul.w	ip, r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	449c      	add	ip, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	fba2 8903 	umull	r8, r9, r2, r3
 80011c6:	eb0c 0309 	add.w	r3, ip, r9
 80011ca:	4699      	mov	r9, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80011d8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80011dc:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80011e0:	b2cb      	uxtb	r3, r1
 80011e2:	2200      	movs	r2, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	b2c3      	uxtb	r3, r0
 80011ea:	2200      	movs	r2, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	60fa      	str	r2, [r7, #12]
 80011f0:	e9d7 8900 	ldrd	r8, r9, [r7]
 80011f4:	464b      	mov	r3, r9
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	fb02 fc03 	mul.w	ip, r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4642      	mov	r2, r8
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	449c      	add	ip, r3
 8001206:	4642      	mov	r2, r8
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	fba2 ab03 	umull	sl, fp, r2, r3
 800120e:	eb0c 030b 	add.w	r3, ip, fp
 8001212:	469b      	mov	fp, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001220:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001224:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001228:	460b      	mov	r3, r1
 800122a:	4602      	mov	r2, r0
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	3307      	adds	r3, #7
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	ebad 0d03 	sub.w	sp, sp, r3
 800123c:	466b      	mov	r3, sp
 800123e:	3301      	adds	r3, #1
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	637b      	str	r3, [r7, #52]	; 0x34

	driverSWLTC6804ReadCellVoltageRegisters(CELL_CH_ALL,driverSWLTC6804TotalNumberOfICs,cellVoltageArrayCodes);
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <driverSWLTC6804ReadCellVoltagesArray+0x1f4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800124c:	4619      	mov	r1, r3
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f86c 	bl	800132c <driverSWLTC6804ReadCellVoltageRegisters>

  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800125a:	e052      	b.n	8001302 <driverSWLTC6804ReadCellVoltagesArray+0x1d2>
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001262:	e043      	b.n	80012ec <driverSWLTC6804ReadCellVoltagesArray+0x1bc>
			if(cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f < 10.0f)
 8001264:	0861      	lsrs	r1, r4, #1
 8001266:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
 800126a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800126e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001270:	fb00 f101 	mul.w	r1, r0, r1
 8001274:	440a      	add	r2, r1
 8001276:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001328 <driverSWLTC6804ReadCellVoltagesArray+0x1f8>
 8001286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800128e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	d521      	bpl.n	80012dc <driverSWLTC6804ReadCellVoltagesArray+0x1ac>
			  cellVoltagesArray[modulePointer][cellPointer] = cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f;
 8001298:	0861      	lsrs	r1, r4, #1
 800129a:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
 800129e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80012a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a4:	fb00 f101 	mul.w	r1, r0, r1
 80012a8:	440a      	add	r2, r1
 80012aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80012ba:	4632      	mov	r2, r6
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012c4:	441a      	add	r2, r3
 80012c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80012ca:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001328 <driverSWLTC6804ReadCellVoltagesArray+0x1f8>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	edc3 7a00 	vstr	s15, [r3]
 80012da:	e002      	b.n	80012e2 <driverSWLTC6804ReadCellVoltagesArray+0x1b2>
			else
				dataValid = false;
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 80012e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80012e6:	3301      	adds	r3, #1
 80012e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <driverSWLTC6804ReadCellVoltagesArray+0x1f0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d3b5      	bcc.n	8001264 <driverSWLTC6804ReadCellVoltagesArray+0x134>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 80012f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80012fc:	3301      	adds	r3, #1
 80012fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <driverSWLTC6804ReadCellVoltagesArray+0x1f4>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800130a:	429a      	cmp	r2, r3
 800130c:	d3a6      	bcc.n	800125c <driverSWLTC6804ReadCellVoltagesArray+0x12c>
		}
  }

	return dataValid;
 800130e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001312:	46ad      	mov	sp, r5
}
 8001314:	4618      	mov	r0, r3
 8001316:	374c      	adds	r7, #76	; 0x4c
 8001318:	46bd      	mov	sp, r7
 800131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800131e:	bf00      	nop
 8001320:	20000275 	.word	0x20000275
 8001324:	20000274 	.word	0x20000274
 8001328:	38d1b717 	.word	0x38d1b717

0800132c <driverSWLTC6804ReadCellVoltageRegisters>:

uint8_t driverSWLTC6804ReadCellVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t cell_codes[][driverSWLTC6804MaxNoOfCellPerModule]) {
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	b08b      	sub	sp, #44	; 0x2c
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	603a      	str	r2, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	460b      	mov	r3, r1
 800133a:	71bb      	strb	r3, [r7, #6]
 800133c:	4b9d      	ldr	r3, [pc, #628]	; (80015b4 <driverSWLTC6804ReadCellVoltageRegisters+0x288>)
 800133e:	781e      	ldrb	r6, [r3, #0]
 8001340:	4633      	mov	r3, r6
 8001342:	3b01      	subs	r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	b2f3      	uxtb	r3, r6
 8001348:	2200      	movs	r2, #0
 800134a:	461c      	mov	r4, r3
 800134c:	4615      	mov	r5, r2
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	012b      	lsls	r3, r5, #4
 8001358:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800135c:	0122      	lsls	r2, r4, #4
  const uint8_t NUM_RX_BYT = 8;
 800135e:	2308      	movs	r3, #8
 8001360:	76fb      	strb	r3, [r7, #27]
  const uint8_t BYT_IN_REG = 6;
 8001362:	2306      	movs	r3, #6
 8001364:	76bb      	strb	r3, [r7, #26]
  const uint8_t CELL_IN_REG = 3;
 8001366:	2303      	movs	r3, #3
 8001368:	767b      	strb	r3, [r7, #25]

  uint8_t  *cell_data;
  int8_t  pec_error = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t parsed_cell;
  uint16_t received_pec;
  uint16_t data_pec;
  uint8_t data_counter=0; //data counter
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001376:	7efb      	ldrb	r3, [r7, #27]
 8001378:	79ba      	ldrb	r2, [r7, #6]
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f00f f844 	bl	801040c <malloc>
 8001384:	4603      	mov	r3, r0
 8001386:	617b      	str	r3, [r7, #20]

  if (reg == 0) {
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 8092 	bne.w	80014b4 <driverSWLTC6804ReadCellVoltageRegisters+0x188>
    for(uint8_t cell_reg = 1; cell_reg<((driverSWLTC6804MaxNoOfCellPerModule/3)+1); cell_reg++) {        			 			                 //executes once for each of the LTC6804 cell voltage registers
 8001390:	2301      	movs	r3, #1
 8001392:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001396:	e080      	b.n	800149a <driverSWLTC6804ReadCellVoltageRegisters+0x16e>
      data_counter = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      driverSWLTC6804ReadCellVoltageGroups(cell_reg, total_ic,cell_data );								                     //Reads a single Cell voltage register
 800139e:	79b9      	ldrb	r1, [r7, #6]
 80013a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f908 	bl	80015bc <driverSWLTC6804ReadCellVoltageGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80013b2:	e068      	b.n	8001486 <driverSWLTC6804ReadCellVoltageRegisters+0x15a>
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80013ba:	e02e      	b.n	800141a <driverSWLTC6804ReadCellVoltageRegisters+0xee>
          parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);      //Each cell code is received as two bytes and is combined to create the parsed cell voltage code
 80013bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013cc:	3301      	adds	r3, #1
 80013ce:	6979      	ldr	r1, [r7, #20]
 80013d0:	440b      	add	r3, r1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4413      	add	r3, r2
 80013dc:	81fb      	strh	r3, [r7, #14]
          cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80013de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013e2:	4632      	mov	r2, r6
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80013f2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80013f6:	3a01      	subs	r2, #1
 80013f8:	7e78      	ldrb	r0, [r7, #25]
 80013fa:	fb00 f202 	mul.w	r2, r0, r2
 80013fe:	440a      	add	r2, r1
 8001400:	89f9      	ldrh	r1, [r7, #14]
 8001402:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          data_counter = data_counter + 2;											                           //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 8001406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140a:	3302      	adds	r3, #2
 800140c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 8001410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001414:	3301      	adds	r3, #1
 8001416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800141a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800141e:	7e7b      	ldrb	r3, [r7, #25]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3cb      	bcc.n	80013bc <driverSWLTC6804ReadCellVoltageRegisters+0x90>
        }
        received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 8001424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29a      	uxth	r2, r3
 8001434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001438:	3301      	adds	r3, #1
 800143a:	6979      	ldr	r1, [r7, #20]
 800143c:	440b      	add	r3, r1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4413      	add	r3, r2
 8001444:	827b      	strh	r3, [r7, #18]
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001446:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800144a:	7efa      	ldrb	r2, [r7, #27]
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	461a      	mov	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	441a      	add	r2, r3
 8001456:	7ebb      	ldrb	r3, [r7, #26]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f000 feaa 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8001460:	4603      	mov	r3, r0
 8001462:	823b      	strh	r3, [r7, #16]
        if(received_pec != data_pec) {
 8001464:	8a7a      	ldrh	r2, [r7, #18]
 8001466:	8a3b      	ldrh	r3, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d002      	beq.n	8001472 <driverSWLTC6804ReadCellVoltageRegisters+0x146>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 800146c:	23ff      	movs	r3, #255	; 0xff
 800146e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
        data_counter=data_counter+2;												                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs cell voltage data
 8001472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001476:	3302      	adds	r3, #2
 8001478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 800147c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001486:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	429a      	cmp	r2, r3
 800148e:	d391      	bcc.n	80013b4 <driverSWLTC6804ReadCellVoltageRegisters+0x88>
    for(uint8_t cell_reg = 1; cell_reg<((driverSWLTC6804MaxNoOfCellPerModule/3)+1); cell_reg++) {        			 			                 //executes once for each of the LTC6804 cell voltage registers
 8001490:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001494:	3301      	adds	r3, #1
 8001496:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <driverSWLTC6804ReadCellVoltageRegisters+0x288>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4a46      	ldr	r2, [pc, #280]	; (80015b8 <driverSWLTC6804ReadCellVoltageRegisters+0x28c>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014ac:	429a      	cmp	r2, r3
 80014ae:	f67f af73 	bls.w	8001398 <driverSWLTC6804ReadCellVoltageRegisters+0x6c>
 80014b2:	e076      	b.n	80015a2 <driverSWLTC6804ReadCellVoltageRegisters+0x276>
      }
    }
  }else{
    driverSWLTC6804ReadCellVoltageGroups(reg, total_ic,cell_data);
 80014b4:	79b9      	ldrb	r1, [r7, #6]
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f87e 	bl	80015bc <driverSWLTC6804ReadCellVoltageGroups>
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80014c6:	e067      	b.n	8001598 <driverSWLTC6804ReadCellVoltageRegisters+0x26c>
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80014ce:	e02d      	b.n	800152c <driverSWLTC6804ReadCellVoltageRegisters+0x200>
			  parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);            //Each cell code is received as two bytes and is combined to create the parsed cell voltage code
 80014d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014e0:	3301      	adds	r3, #1
 80014e2:	6979      	ldr	r1, [r7, #20]
 80014e4:	440b      	add	r3, r1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	81fb      	strh	r3, [r7, #14]
			  cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 80014f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014f6:	4632      	mov	r2, r6
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	3a01      	subs	r2, #1
 800150a:	7e78      	ldrb	r0, [r7, #25]
 800150c:	fb00 f202 	mul.w	r2, r0, r2
 8001510:	440a      	add	r2, r1
 8001512:	89f9      	ldrh	r1, [r7, #14]
 8001514:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  data_counter= data_counter + 2;     									                             //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 8001518:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800151c:	3302      	adds	r3, #2
 800151e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 8001522:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001526:	3301      	adds	r3, #1
 8001528:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800152c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001530:	7e7b      	ldrb	r3, [r7, #25]
 8001532:	429a      	cmp	r2, r3
 8001534:	d3cc      	bcc.n	80014d0 <driverSWLTC6804ReadCellVoltageRegisters+0x1a4>
		  }
	    received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 8001536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4413      	add	r3, r2
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b29a      	uxth	r2, r3
 8001546:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800154a:	3301      	adds	r3, #1
 800154c:	6979      	ldr	r1, [r7, #20]
 800154e:	440b      	add	r3, r1
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	827b      	strh	r3, [r7, #18]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001558:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800155c:	7efa      	ldrb	r2, [r7, #27]
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	461a      	mov	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	441a      	add	r2, r3
 8001568:	7ebb      	ldrb	r3, [r7, #26]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fe21 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8001572:	4603      	mov	r3, r0
 8001574:	823b      	strh	r3, [r7, #16]

			if(received_pec != data_pec) {
 8001576:	8a7a      	ldrh	r2, [r7, #18]
 8001578:	8a3b      	ldrh	r3, [r7, #16]
 800157a:	429a      	cmp	r2, r3
 800157c:	d002      	beq.n	8001584 <driverSWLTC6804ReadCellVoltageRegisters+0x258>
			  pec_error = -1;															                                       //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 800157e:	23ff      	movs	r3, #255	; 0xff
 8001580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  }
		  data_counter= data_counter + 2; 											                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs cell voltage data
 8001584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001588:	3302      	adds	r3, #2
 800158a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 800158e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001592:	3301      	adds	r3, #1
 8001594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001598:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d392      	bcc.n	80014c8 <driverSWLTC6804ReadCellVoltageRegisters+0x19c>
	  }
  }

  free(cell_data);
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f00e ff3a 	bl	801041c <free>
  return(pec_error);
 80015a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	372c      	adds	r7, #44	; 0x2c
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b4:	20000275 	.word	0x20000275
 80015b8:	aaaaaaab 	.word	0xaaaaaaab

080015bc <driverSWLTC6804ReadCellVoltageGroups>:

void driverSWLTC6804ReadCellVoltageGroups(uint8_t reg, uint8_t total_ic, uint8_t *data ) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	603a      	str	r2, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	460b      	mov	r3, r1
 80015ca:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80015cc:	2308      	movs	r3, #8
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1) {      //1: RDCVA
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d104      	bne.n	80015e0 <driverSWLTC6804ReadCellVoltageGroups+0x24>
    cmd[1] = 0x04;
 80015d6:	2304      	movs	r3, #4
 80015d8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	723b      	strb	r3, [r7, #8]
 80015de:	e026      	b.n	800162e <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 2) { //2: RDCVB
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d104      	bne.n	80015f0 <driverSWLTC6804ReadCellVoltageGroups+0x34>
    cmd[1] = 0x06;
 80015e6:	2306      	movs	r3, #6
 80015e8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	723b      	strb	r3, [r7, #8]
 80015ee:	e01e      	b.n	800162e <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 3) { //3: RDCVC
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d104      	bne.n	8001600 <driverSWLTC6804ReadCellVoltageGroups+0x44>
    cmd[1] = 0x08;
 80015f6:	2308      	movs	r3, #8
 80015f8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	723b      	strb	r3, [r7, #8]
 80015fe:	e016      	b.n	800162e <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 4) { //4: RDCVD
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b04      	cmp	r3, #4
 8001604:	d104      	bne.n	8001610 <driverSWLTC6804ReadCellVoltageGroups+0x54>
    cmd[1] = 0x0A;
 8001606:	230a      	movs	r3, #10
 8001608:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800160a:	2300      	movs	r3, #0
 800160c:	723b      	strb	r3, [r7, #8]
 800160e:	e00e      	b.n	800162e <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 5) { //5: RDCVE - LTC6812 & LTC6813 only
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d104      	bne.n	8001620 <driverSWLTC6804ReadCellVoltageGroups+0x64>
    cmd[1] = 0x09;
 8001616:	2309      	movs	r3, #9
 8001618:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	723b      	strb	r3, [r7, #8]
 800161e:	e006      	b.n	800162e <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 6) { //6: RDCVF -  LTC6813 only
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2b06      	cmp	r3, #6
 8001624:	d103      	bne.n	800162e <driverSWLTC6804ReadCellVoltageGroups+0x72>
    cmd[1] = 0x0B;
 8001626:	230b      	movs	r3, #11
 8001628:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4619      	mov	r1, r3
 8001634:	2002      	movs	r0, #2
 8001636:	f000 fdbd 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 800163a:	4603      	mov	r3, r0
 800163c:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800163e:	89bb      	ldrh	r3, [r7, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001648:	89bb      	ldrh	r3, [r7, #12]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	72fb      	strb	r3, [r7, #11]

  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 800164e:	f000 fe80 	bl	8002352 <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	fb12 f303 	smulbb	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f107 0008 	add.w	r0, r7, #8
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	2104      	movs	r1, #4
 8001664:	f000 fe5c 	bl	8002320 <driverSWLTC6804WriteRead>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <driverSWLTC6804ReadAuxVoltagesArray>:
  cmd[3] = (uint8_t)(cmd_pec);

	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
}

bool driverSWLTC6804ReadAuxVoltagesArray(float auxVoltagesArray[][driverSWLTC6804MaxNoOfTempSensorPerModule],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor,float ntcNominalTemp) {
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	b099      	sub	sp, #100	; 0x64
 8001676:	af00      	add	r7, sp, #0
 8001678:	6478      	str	r0, [r7, #68]	; 0x44
 800167a:	6439      	str	r1, [r7, #64]	; 0x40
 800167c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800167e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
 8001682:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001684:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <driverSWLTC6804ReadAuxVoltagesArray+0x214>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	633a      	str	r2, [r7, #48]	; 0x30
 800168c:	4613      	mov	r3, r2
 800168e:	3b01      	subs	r3, #1
 8001690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001692:	b2d3      	uxtb	r3, r2
 8001694:	2200      	movs	r2, #0
 8001696:	461c      	mov	r4, r3
 8001698:	4615      	mov	r5, r2
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	016b      	lsls	r3, r5, #5
 80016a4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80016a8:	0162      	lsls	r2, r4, #5
 80016aa:	466b      	mov	r3, sp
 80016ac:	607b      	str	r3, [r7, #4]
	bool dataValid = true;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	uint16_t auxVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfTempSensorPerModule];
 80016b4:	4b73      	ldr	r3, [pc, #460]	; (8001884 <driverSWLTC6804ReadAuxVoltagesArray+0x214>)
 80016b6:	7819      	ldrb	r1, [r3, #0]
 80016b8:	4b73      	ldr	r3, [pc, #460]	; (8001888 <driverSWLTC6804ReadAuxVoltagesArray+0x218>)
 80016ba:	7818      	ldrb	r0, [r3, #0]
 80016bc:	460b      	mov	r3, r1
 80016be:	3b01      	subs	r3, #1
 80016c0:	657b      	str	r3, [r7, #84]	; 0x54
 80016c2:	b2cb      	uxtb	r3, r1
 80016c4:	2200      	movs	r2, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	617a      	str	r2, [r7, #20]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80016d6:	4634      	mov	r4, r6
 80016d8:	0123      	lsls	r3, r4, #4
 80016da:	462c      	mov	r4, r5
 80016dc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80016e0:	462c      	mov	r4, r5
 80016e2:	0122      	lsls	r2, r4, #4
 80016e4:	460b      	mov	r3, r1
 80016e6:	005e      	lsls	r6, r3, #1
 80016e8:	4603      	mov	r3, r0
 80016ea:	3b01      	subs	r3, #1
 80016ec:	653b      	str	r3, [r7, #80]	; 0x50
 80016ee:	b2cb      	uxtb	r3, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016f6:	b2c3      	uxtb	r3, r0
 80016f8:	2200      	movs	r2, #0
 80016fa:	623b      	str	r3, [r7, #32]
 80016fc:	627a      	str	r2, [r7, #36]	; 0x24
 80016fe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001702:	462b      	mov	r3, r5
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	fb02 f203 	mul.w	r2, r2, r3
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8001710:	fb04 f303 	mul.w	r3, r4, r3
 8001714:	4413      	add	r3, r2
 8001716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001718:	6a3c      	ldr	r4, [r7, #32]
 800171a:	fba2 8904 	umull	r8, r9, r2, r4
 800171e:	444b      	add	r3, r9
 8001720:	4699      	mov	r9, r3
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800172e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001732:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001736:	b2cb      	uxtb	r3, r1
 8001738:	2200      	movs	r2, #0
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	60fa      	str	r2, [r7, #12]
 800173e:	b2c3      	uxtb	r3, r0
 8001740:	2200      	movs	r2, #0
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	61fa      	str	r2, [r7, #28]
 8001746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800174a:	462b      	mov	r3, r5
 800174c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001750:	4642      	mov	r2, r8
 8001752:	fb02 f203 	mul.w	r2, r2, r3
 8001756:	e9c7 8906 	strd	r8, r9, [r7, #24]
 800175a:	464b      	mov	r3, r9
 800175c:	46a0      	mov	r8, r4
 800175e:	46a9      	mov	r9, r5
 8001760:	4644      	mov	r4, r8
 8001762:	fb04 f303 	mul.w	r3, r4, r3
 8001766:	4413      	add	r3, r2
 8001768:	4642      	mov	r2, r8
 800176a:	69bc      	ldr	r4, [r7, #24]
 800176c:	fba2 ab04 	umull	sl, fp, r2, r4
 8001770:	445b      	add	r3, fp
 8001772:	469b      	mov	fp, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001780:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001784:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001788:	460b      	mov	r3, r1
 800178a:	4602      	mov	r2, r0
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	3307      	adds	r3, #7
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	ebad 0d03 	sub.w	sp, sp, r3
 800179c:	466b      	mov	r3, sp
 800179e:	3301      	adds	r3, #1
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	64fb      	str	r3, [r7, #76]	; 0x4c

	driverSWLTC6804ReadAuxVoltageRegisters(AUX_CH_ALL,driverSWLTC6804TotalNumberOfICs,auxVoltageArrayCodes);
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <driverSWLTC6804ReadAuxVoltagesArray+0x218>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017ac:	4619      	mov	r1, r3
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f86e 	bl	8001890 <driverSWLTC6804ReadAuxVoltageRegisters>

  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80017ba:	e053      	b.n	8001864 <driverSWLTC6804ReadAuxVoltagesArray+0x1f4>
		for(uint8_t auxPointer = 0; auxPointer < driverSWLTC6804MaxNoOfTempSensorPerModule; auxPointer++){
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80017c2:	e044      	b.n	800184e <driverSWLTC6804ReadAuxVoltagesArray+0x1de>
			if(auxVoltageArrayCodes[modulePointer][auxPointer]*0.0001f < 10.0f)
 80017c4:	0871      	lsrs	r1, r6, #1
 80017c6:	f897 005a 	ldrb.w	r0, [r7, #90]	; 0x5a
 80017ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80017ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d0:	fb00 f101 	mul.w	r1, r0, r1
 80017d4:	440a      	add	r2, r1
 80017d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800188c <driverSWLTC6804ReadAuxVoltagesArray+0x21c>
 80017e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	d522      	bpl.n	800183e <driverSWLTC6804ReadAuxVoltagesArray+0x1ce>
			  auxVoltagesArray[modulePointer][auxPointer] = driverSWLTC6804ConvertTemperatureExt(auxVoltageArrayCodes[modulePointer][auxPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 80017f8:	0871      	lsrs	r1, r6, #1
 80017fa:	f897 005a 	ldrb.w	r0, [r7, #90]	; 0x5a
 80017fe:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001804:	fb00 f101 	mul.w	r1, r0, r1
 8001808:	440a      	add	r2, r1
 800180a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800180e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800181c:	18d4      	adds	r4, r2, r3
 800181e:	f897 505b 	ldrb.w	r5, [r7, #91]	; 0x5b
 8001822:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001824:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800182a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800182c:	f000 fdaa 	bl	8002384 <driverSWLTC6804ConvertTemperatureExt>
 8001830:	eef0 7a40 	vmov.f32	s15, s0
 8001834:	00ab      	lsls	r3, r5, #2
 8001836:	4423      	add	r3, r4
 8001838:	edc3 7a00 	vstr	s15, [r3]
 800183c:	e002      	b.n	8001844 <driverSWLTC6804ReadAuxVoltagesArray+0x1d4>
			else
				dataValid = false;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		for(uint8_t auxPointer = 0; auxPointer < driverSWLTC6804MaxNoOfTempSensorPerModule; auxPointer++){
 8001844:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001848:	3301      	adds	r3, #1
 800184a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <driverSWLTC6804ReadAuxVoltagesArray+0x214>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001856:	429a      	cmp	r2, r3
 8001858:	d3b4      	bcc.n	80017c4 <driverSWLTC6804ReadAuxVoltagesArray+0x154>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 800185a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800185e:	3301      	adds	r3, #1
 8001860:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <driverSWLTC6804ReadAuxVoltagesArray+0x218>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 800186c:	429a      	cmp	r2, r3
 800186e:	d3a5      	bcc.n	80017bc <driverSWLTC6804ReadAuxVoltagesArray+0x14c>
		}
  }

	return dataValid;
 8001870:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001874:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3764      	adds	r7, #100	; 0x64
 800187c:	46bd      	mov	sp, r7
 800187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001882:	bf00      	nop
 8001884:	20000276 	.word	0x20000276
 8001888:	20000274 	.word	0x20000274
 800188c:	38d1b717 	.word	0x38d1b717

08001890 <driverSWLTC6804ReadAuxVoltageRegisters>:

int8_t driverSWLTC6804ReadAuxVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t aux_codes[][driverSWLTC6804MaxNoOfTempSensorPerModule]) {
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b08d      	sub	sp, #52	; 0x34
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	603a      	str	r2, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	460b      	mov	r3, r1
 800189e:	71bb      	strb	r3, [r7, #6]
 80018a0:	4b98      	ldr	r3, [pc, #608]	; (8001b04 <driverSWLTC6804ReadAuxVoltageRegisters+0x274>)
 80018a2:	781e      	ldrb	r6, [r3, #0]
 80018a4:	4633      	mov	r3, r6
 80018a6:	3b01      	subs	r3, #1
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	b2f3      	uxtb	r3, r6
 80018ac:	2200      	movs	r2, #0
 80018ae:	461c      	mov	r4, r3
 80018b0:	4615      	mov	r5, r2
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	012b      	lsls	r3, r5, #4
 80018bc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018c0:	0122      	lsls	r2, r4, #4
  const uint8_t NUM_RX_BYT = 8;
 80018c2:	2308      	movs	r3, #8
 80018c4:	76fb      	strb	r3, [r7, #27]
  const uint8_t BYT_IN_REG = 6;
 80018c6:	2306      	movs	r3, #6
 80018c8:	76bb      	strb	r3, [r7, #26]
  const uint8_t GPIO_IN_REG = 3;
 80018ca:	2303      	movs	r3, #3
 80018cc:	767b      	strb	r3, [r7, #25]

  uint8_t *data;
  uint8_t data_counter = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  int8_t pec_error = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint16_t parsed_aux;
  uint16_t received_pec;
  uint16_t data_pec;
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80018da:	7efb      	ldrb	r3, [r7, #27]
 80018dc:	79ba      	ldrb	r2, [r7, #6]
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00e fd92 	bl	801040c <malloc>
 80018e8:	4603      	mov	r3, r0
 80018ea:	617b      	str	r3, [r7, #20]
  //1.a
  if (reg == 0) {
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8092 	bne.w	8001a18 <driverSWLTC6804ReadAuxVoltageRegisters+0x188>
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 80018f4:	2301      	movs	r3, #1
 80018f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80018fa:	e080      	b.n	80019fe <driverSWLTC6804ReadAuxVoltageRegisters+0x16e>
      data_counter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      driverSWLTC6804ReadAuxGroups(gpio_reg, total_ic,data);									             //Reads the raw auxiliary register data into the data[] array
 8001902:	79b9      	ldrb	r1, [r7, #6]
 8001904:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f8fe 	bl	8001b0c <driverSWLTC6804ReadAuxGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001910:	2300      	movs	r3, #0
 8001912:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001916:	e068      	b.n	80019ea <driverSWLTC6804ReadAuxVoltageRegisters+0x15a>
		    for(uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) {	       // This loop parses the read back data into GPIO voltages, it loops once for each of the 3 gpio voltage codes in the register
 8001918:	2300      	movs	r3, #0
 800191a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800191e:	e02e      	b.n	800197e <driverSWLTC6804ReadAuxVoltageRegisters+0xee>
		      parsed_aux = data[data_counter] + (data[data_counter+1]<<8);                     //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 8001920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b29a      	uxth	r2, r3
 800192c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001930:	3301      	adds	r3, #1
 8001932:	6979      	ldr	r1, [r7, #20]
 8001934:	440b      	add	r3, r1
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b29b      	uxth	r3, r3
 800193e:	4413      	add	r3, r2
 8001940:	81fb      	strh	r3, [r7, #14]
          aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
 8001942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001946:	4632      	mov	r2, r6
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001956:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800195a:	3a01      	subs	r2, #1
 800195c:	7e78      	ldrb	r0, [r7, #25]
 800195e:	fb00 f202 	mul.w	r2, r0, r2
 8001962:	440a      	add	r2, r1
 8001964:	89f9      	ldrh	r1, [r7, #14]
 8001966:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          data_counter=data_counter+2;												                             //Because gpio voltage codes are two bytes the data counter must increment by two for each parsed gpio voltage code
 800196a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800196e:	3302      	adds	r3, #2
 8001970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		    for(uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) {	       // This loop parses the read back data into GPIO voltages, it loops once for each of the 3 gpio voltage codes in the register
 8001974:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001978:	3301      	adds	r3, #1
 800197a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800197e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001982:	7e7b      	ldrb	r3, [r7, #25]
 8001984:	429a      	cmp	r2, r3
 8001986:	d3cb      	bcc.n	8001920 <driverSWLTC6804ReadAuxVoltageRegisters+0x90>
        }

        received_pec = (data[data_counter]<<8)+ data[data_counter+1]; 				             //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 8001988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b29a      	uxth	r2, r3
 8001998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800199c:	3301      	adds	r3, #1
 800199e:	6979      	ldr	r1, [r7, #20]
 80019a0:	440b      	add	r3, r1
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	827b      	strh	r3, [r7, #18]
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 80019aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ae:	7efa      	ldrb	r2, [r7, #27]
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	441a      	add	r2, r3
 80019ba:	7ebb      	ldrb	r3, [r7, #26]
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fbf8 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 80019c4:	4603      	mov	r3, r0
 80019c6:	823b      	strh	r3, [r7, #16]
        if(received_pec != data_pec) {
 80019c8:	8a7a      	ldrh	r2, [r7, #18]
 80019ca:	8a3b      	ldrh	r3, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d002      	beq.n	80019d6 <driverSWLTC6804ReadAuxVoltageRegisters+0x146>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the received serial data
 80019d0:	23ff      	movs	r3, #255	; 0xff
 80019d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        data_counter=data_counter+2;												                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs gpio voltage data
 80019d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019da:	3302      	adds	r3, #2
 80019dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 80019e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e4:	3301      	adds	r3, #1
 80019e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80019ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d391      	bcc.n	8001918 <driverSWLTC6804ReadAuxVoltageRegisters+0x88>
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 80019f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019f8:	3301      	adds	r3, #1
 80019fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <driverSWLTC6804ReadAuxVoltageRegisters+0x274>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4a41      	ldr	r2, [pc, #260]	; (8001b08 <driverSWLTC6804ReadAuxVoltageRegisters+0x278>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f67f af73 	bls.w	80018fc <driverSWLTC6804ReadAuxVoltageRegisters+0x6c>
 8001a16:	e06b      	b.n	8001af0 <driverSWLTC6804ReadAuxVoltageRegisters+0x260>
      }
    }
  }else{
    driverSWLTC6804ReadAuxGroups(reg, total_ic, data);
 8001a18:	79b9      	ldrb	r1, [r7, #6]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f874 	bl	8001b0c <driverSWLTC6804ReadAuxGroups>
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	e05e      	b.n	8001ae8 <driverSWLTC6804ReadAuxVoltageRegisters+0x258>

		  for(int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++) {  	 	           // This loop parses the read back data. Loops once for each aux voltage in the register
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
 8001a2e:	e029      	b.n	8001a84 <driverSWLTC6804ReadAuxVoltageRegisters+0x1f4>
			  parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));    		             //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 8001a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4413      	add	r3, r2
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a40:	3301      	adds	r3, #1
 8001a42:	6979      	ldr	r1, [r7, #20]
 8001a44:	440b      	add	r3, r1
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	81fb      	strh	r3, [r7, #14]
			  aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
 8001a52:	4632      	mov	r2, r6
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	79fa      	ldrb	r2, [r7, #7]
 8001a62:	3a01      	subs	r2, #1
 8001a64:	7e79      	ldrb	r1, [r7, #25]
 8001a66:	fb02 f101 	mul.w	r1, r2, r1
 8001a6a:	6a3a      	ldr	r2, [r7, #32]
 8001a6c:	440a      	add	r2, r1
 8001a6e:	89f9      	ldrh	r1, [r7, #14]
 8001a70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  data_counter=data_counter+2;									 		                                 //Because gpio voltage codes are two bytes the data counter must increment by two for each parsed gpio voltage code
 8001a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++) {  	 	           // This loop parses the read back data. Loops once for each aux voltage in the register
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	3301      	adds	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	7e7b      	ldrb	r3, [r7, #25]
 8001a86:	6a3a      	ldr	r2, [r7, #32]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbd1      	blt.n	8001a30 <driverSWLTC6804ReadAuxVoltageRegisters+0x1a0>
		  }
		  received_pec = (data[data_counter]<<8) + data[data_counter+1]; 				               //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 8001a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	6979      	ldr	r1, [r7, #20]
 8001aa4:	440b      	add	r3, r1
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	827b      	strh	r3, [r7, #18]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001aae:	7efb      	ldrb	r3, [r7, #27]
 8001ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	441a      	add	r2, r3
 8001abc:	7ebb      	ldrb	r3, [r7, #26]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fb77 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	823b      	strh	r3, [r7, #16]

			if(received_pec != data_pec) {
 8001aca:	8a7a      	ldrh	r2, [r7, #18]
 8001acc:	8a3b      	ldrh	r3, [r7, #16]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d002      	beq.n	8001ad8 <driverSWLTC6804ReadAuxVoltageRegisters+0x248>
        pec_error = -1;													   		                                     //The pec_error variable is simply set negative if any PEC errors  are detected in the received serial data
 8001ad2:	23ff      	movs	r3, #255	; 0xff
 8001ad4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

			data_counter=data_counter+2;												                                 //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs gpio voltage data
 8001ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001adc:	3302      	adds	r3, #2
 8001ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	429a      	cmp	r2, r3
 8001aee:	db9c      	blt.n	8001a2a <driverSWLTC6804ReadAuxVoltageRegisters+0x19a>
	  }
  }
  free(data);
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f00e fc93 	bl	801041c <free>
  return (pec_error);
 8001af6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3734      	adds	r7, #52	; 0x34
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000276 	.word	0x20000276
 8001b08:	aaaaaaab 	.word	0xaaaaaaab

08001b0c <driverSWLTC6804ReadAuxGroups>:

void driverSWLTC6804ReadAuxGroups(uint8_t reg, uint8_t total_ic, uint8_t *data) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	603a      	str	r2, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  //1
  if (reg == 1) {			//Read back auxiliary group A
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d104      	bne.n	8001b30 <driverSWLTC6804ReadAuxGroups+0x24>
    cmd[1] = 0x0C;
 8001b26:	230c      	movs	r3, #12
 8001b28:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	723b      	strb	r3, [r7, #8]
 8001b2e:	e01b      	b.n	8001b68 <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 2) {		//Read back auxiliary group B
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d104      	bne.n	8001b40 <driverSWLTC6804ReadAuxGroups+0x34>
    cmd[1] = 0x0E;
 8001b36:	230e      	movs	r3, #14
 8001b38:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	723b      	strb	r3, [r7, #8]
 8001b3e:	e013      	b.n	8001b68 <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 3) {		//Read auxiliary group C LTC6812 & LTC6813 only
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d104      	bne.n	8001b50 <driverSWLTC6804ReadAuxGroups+0x44>
    cmd[1] = 0x0D;
 8001b46:	230d      	movs	r3, #13
 8001b48:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	723b      	strb	r3, [r7, #8]
 8001b4e:	e00b      	b.n	8001b68 <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 4) {		//Read auxiliary group D LTC6812 & LTC6813 only
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d104      	bne.n	8001b60 <driverSWLTC6804ReadAuxGroups+0x54>
    cmd[1] = 0x0F;
 8001b56:	230f      	movs	r3, #15
 8001b58:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	723b      	strb	r3, [r7, #8]
 8001b5e:	e003      	b.n	8001b68 <driverSWLTC6804ReadAuxGroups+0x5c>
  }else{					     //Read back auxiliary group A
     cmd[1] = 0x0C;
 8001b60:	230c      	movs	r3, #12
 8001b62:	727b      	strb	r3, [r7, #9]
     cmd[0] = 0x00;
 8001b64:	2300      	movs	r3, #0
 8001b66:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f000 fb20 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8001b74:	4603      	mov	r3, r0
 8001b76:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b78:	89bb      	ldrh	r3, [r7, #12]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001b82:	89bb      	ldrh	r3, [r7, #12]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	72fb      	strb	r3, [r7, #11]

  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake, this command can be removed.
 8001b88:	f000 fbe3 	bl	8002352 <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	fb12 f303 	smulbb	r3, r2, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f107 0008 	add.w	r0, r7, #8
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	f000 fbbf 	bl	8002320 <driverSWLTC6804WriteRead>
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	0000      	movs	r0, r0
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <driverSWLTC6804WriteConfigRegister>:

void driverSWLTC6804WriteConfigRegister(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	b093      	sub	sp, #76	; 0x4c
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	61b9      	str	r1, [r7, #24]
 8001bbc:	77fb      	strb	r3, [r7, #31]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	77bb      	strb	r3, [r7, #30]
 8001bc2:	466b      	mov	r3, sp
 8001bc4:	461e      	mov	r6, r3
  const uint8_t BYTES_IN_REG = 6;
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  uint8_t *cmd;
  uint16_t cfg_pec;
  uint8_t cmd_index; //command counter
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8001bd8:	7ff9      	ldrb	r1, [r7, #31]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
 8001be0:	b2cb      	uxtb	r3, r1
 8001be2:	2200      	movs	r2, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	617a      	str	r2, [r7, #20]
 8001be8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bec:	1890      	adds	r0, r2, r2
 8001bee:	60b8      	str	r0, [r7, #8]
 8001bf0:	415b      	adcs	r3, r3
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bf8:	6938      	ldr	r0, [r7, #16]
 8001bfa:	eb12 0800 	adds.w	r8, r2, r0
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	eb43 0900 	adc.w	r9, r3, r0
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001c10:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001c14:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001c18:	b2cb      	uxtb	r3, r1
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	469a      	mov	sl, r3
 8001c1e:	4693      	mov	fp, r2
 8001c20:	4652      	mov	r2, sl
 8001c22:	465b      	mov	r3, fp
 8001c24:	1890      	adds	r0, r2, r2
 8001c26:	6038      	str	r0, [r7, #0]
 8001c28:	415b      	adcs	r3, r3
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c30:	eb12 040a 	adds.w	r4, r2, sl
 8001c34:	eb43 050b 	adc.w	r5, r3, fp
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	012b      	lsls	r3, r5, #4
 8001c42:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001c46:	0122      	lsls	r2, r4, #4
 8001c48:	460a      	mov	r2, r1
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	3307      	adds	r3, #7
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	ebad 0d03 	sub.w	sp, sp, r3
 8001c5c:	466b      	mov	r3, sp
 8001c5e:	3300      	adds	r3, #0
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 8001c62:	4ba3      	ldr	r3, [pc, #652]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc6e 	bl	8000548 <__aeabi_f2d>
 8001c6c:	a39e      	add	r3, pc, #632	; (adr r3, 8001ee8 <driverSWLTC6804WriteConfigRegister+0x338>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fdeb 	bl	800084c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff93 	bl	8000ba8 <__aeabi_d2uiz>
 8001c82:	4603      	mov	r3, r0
 8001c84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t VoV = driverSWLTC6804ConfigStruct.CellOverVoltageLimit/(16*0.0001);
 8001c86:	4b9a      	ldr	r3, [pc, #616]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc5c 	bl	8000548 <__aeabi_f2d>
 8001c90:	a395      	add	r3, pc, #596	; (adr r3, 8001ee8 <driverSWLTC6804WriteConfigRegister+0x338>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fdd9 	bl	800084c <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ff81 	bl	8000ba8 <__aeabi_d2uiz>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint32_t activeBalanceMask=0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	63fb      	str	r3, [r7, #60]	; 0x3c

  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8001cb2:	e08d      	b.n	8001dd0 <driverSWLTC6804WriteConfigRegister+0x220>
		if(useArray)
 8001cb4:	7fbb      	ldrb	r3, [r7, #30]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <driverSWLTC6804WriteConfigRegister+0x118>
			activeBalanceMask = balanceEnableMaskArray[i];
 8001cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cc6:	e002      	b.n	8001cce <driverSWLTC6804WriteConfigRegister+0x11e>
		else
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 8001cc8:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	63fb      	str	r3, [r7, #60]	; 0x3c

    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 8001cce:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001cd0:	791b      	ldrb	r3, [r3, #4]
 8001cd2:	01db      	lsls	r3, r3, #7
 8001cd4:	b25a      	sxtb	r2, r3
 8001cd6:	4b86      	ldr	r3, [pc, #536]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001cd8:	78db      	ldrb	r3, [r3, #3]
 8001cda:	019b      	lsls	r3, r3, #6
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b25a      	sxtb	r2, r3
 8001ce2:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001ce4:	789b      	ldrb	r3, [r3, #2]
 8001ce6:	015b      	lsls	r3, r3, #5
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b25a      	sxtb	r2, r3
 8001cee:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b25a      	sxtb	r2, r3
 8001cfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b25a      	sxtb	r2, r3
 8001d06:	4b7a      	ldr	r3, [pc, #488]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001d08:	7a5b      	ldrb	r3, [r3, #9]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b25a      	sxtb	r2, r3
 8001d12:	4b77      	ldr	r3, [pc, #476]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001d14:	7adb      	ldrb	r3, [r3, #11]
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	b2d8      	uxtb	r0, r3
 8001d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	440b      	add	r3, r1
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][1] = (VuV & 0xFF) ;
 8001d30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d32:	b2d8      	uxtb	r0, r3
 8001d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	440b      	add	r3, r1
 8001d42:	3301      	adds	r3, #1
 8001d44:	4602      	mov	r2, r0
 8001d46:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][2] = ((VoV & 0x0F) << 4) | (VuV >> 8) ;
 8001d48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	b25a      	sxtb	r2, r3
 8001d4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	b2d8      	uxtb	r0, r3
 8001d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	440b      	add	r3, r1
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][3] = (VoV >> 4) ;
 8001d70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b2d8      	uxtb	r0, r3
 8001d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	440b      	add	r3, r1
 8001d86:	3303      	adds	r3, #3
 8001d88:	4602      	mov	r2, r0
 8001d8a:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][4] = (activeBalanceMask & 0xFF) ;
 8001d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8e:	b2d8      	uxtb	r0, r3
 8001d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4602      	mov	r2, r0
 8001da2:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ;
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001da6:	7d1b      	ldrb	r3, [r3, #20]
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b2d8      	uxtb	r0, r3
 8001db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001db8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3305      	adds	r3, #5
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dcc:	3301      	adds	r3, #1
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40
 8001dd0:	7ffb      	ldrb	r3, [r7, #31]
 8001dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f6ff af6d 	blt.w	8001cb4 <driverSWLTC6804WriteConfigRegister+0x104>
  }

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001dda:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001dde:	4618      	mov	r0, r3
 8001de0:	f00e fb14 	bl	801040c <malloc>
 8001de4:	4603      	mov	r3, r0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  cmd[0] = 0x00; // config register command
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x01; // config register command
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	3301      	adds	r3, #1
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
  cmd[2] = 0x3d; // PEC
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	3302      	adds	r3, #2
 8001dfa:	223d      	movs	r2, #61	; 0x3d
 8001dfc:	701a      	strb	r2, [r3, #0]
  cmd[3] = 0x6e; // PEC
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	3303      	adds	r3, #3
 8001e02:	226e      	movs	r2, #110	; 0x6e
 8001e04:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 8001e06:	2304      	movs	r3, #4
 8001e08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001e12:	e051      	b.n	8001eb8 <driverSWLTC6804WriteConfigRegister+0x308>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8001e14:	2300      	movs	r3, #0
 8001e16:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001e1a:	e01b      	b.n	8001e54 <driverSWLTC6804WriteConfigRegister+0x2a4>
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent
 8001e1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	f897 003a 	ldrb.w	r0, [r7, #58]	; 0x3a
 8001e26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e2c:	4419      	add	r1, r3
 8001e2e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4423      	add	r3, r4
 8001e3a:	4403      	add	r3, r0
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	700b      	strb	r3, [r1, #0]
      cmd_index = cmd_index + 1;
 8001e40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e44:	3301      	adds	r3, #1
 8001e46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8001e4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001e54:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8001e58:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3dd      	bcc.n	8001e1c <driverSWLTC6804WriteConfigRegister+0x26c>
    }
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 8001e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e70:	441a      	add	r2, r3
 8001e72:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 f99b 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	84fb      	strh	r3, [r7, #38]	; 0x26
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001e82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b299      	uxth	r1, r3
 8001e88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2ca      	uxtb	r2, r1
 8001e92:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001e94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e98:	3301      	adds	r3, #1
 8001e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e9c:	4413      	add	r3, r2
 8001e9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8001ea4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001eae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001eb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1a9      	bne.n	8001e14 <driverSWLTC6804WriteConfigRegister+0x264>
  }

	driverSWLTC6804WakeIC();
 8001ec0:	f000 fa47 	bl	8002352 <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 8001ec4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ecc:	f000 fa17 	bl	80022fe <driverSWLTC6804Write>
  free(cmd);
 8001ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ed2:	f00e faa3 	bl	801041c <free>
 8001ed6:	46b5      	mov	sp, r6
}
 8001ed8:	bf00      	nop
 8001eda:	374c      	adds	r7, #76	; 0x4c
 8001edc:	46bd      	mov	sp, r7
 8001ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	eb1c432d 	.word	0xeb1c432d
 8001eec:	3f5a36e2 	.word	0x3f5a36e2
 8001ef0:	20000278 	.word	0x20000278

08001ef4 <driverSWLTC6804WriteConfigRegisterB>:

void driverSWLTC6804WriteConfigRegisterB(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8001ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef8:	b091      	sub	sp, #68	; 0x44
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	61b9      	str	r1, [r7, #24]
 8001f00:	77fb      	strb	r3, [r7, #31]
 8001f02:	4613      	mov	r3, r2
 8001f04:	77bb      	strb	r3, [r7, #30]
 8001f06:	466b      	mov	r3, sp
 8001f08:	461e      	mov	r6, r3
  const uint8_t BYTES_IN_REG = 6;
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3304      	adds	r3, #4
 8001f18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  uint8_t *cmd;
  uint16_t cfg_pec;
  uint8_t cmd_index; //command counter
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8001f1c:	7ff9      	ldrb	r1, [r7, #31]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	3b01      	subs	r3, #1
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f24:	b2cb      	uxtb	r3, r1
 8001f26:	2200      	movs	r2, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	617a      	str	r2, [r7, #20]
 8001f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f30:	1890      	adds	r0, r2, r2
 8001f32:	60b8      	str	r0, [r7, #8]
 8001f34:	415b      	adcs	r3, r3
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f3c:	6938      	ldr	r0, [r7, #16]
 8001f3e:	eb12 0800 	adds.w	r8, r2, r0
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	eb43 0900 	adc.w	r9, r3, r0
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001f54:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001f58:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001f5c:	b2cb      	uxtb	r3, r1
 8001f5e:	2200      	movs	r2, #0
 8001f60:	469a      	mov	sl, r3
 8001f62:	4693      	mov	fp, r2
 8001f64:	4652      	mov	r2, sl
 8001f66:	465b      	mov	r3, fp
 8001f68:	1890      	adds	r0, r2, r2
 8001f6a:	6038      	str	r0, [r7, #0]
 8001f6c:	415b      	adcs	r3, r3
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f74:	eb12 040a 	adds.w	r4, r2, sl
 8001f78:	eb43 050b 	adc.w	r5, r3, fp
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	012b      	lsls	r3, r5, #4
 8001f86:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f8a:	0122      	lsls	r2, r4, #4
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	3307      	adds	r3, #7
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	ebad 0d03 	sub.w	sp, sp, r3
 8001fa0:	466b      	mov	r3, sp
 8001fa2:	3300      	adds	r3, #0
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t activeBalanceMask=0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t cmd_pec;

  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001faa:	2300      	movs	r3, #0
 8001fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fae:	e06c      	b.n	800208a <driverSWLTC6804WriteConfigRegisterB+0x196>
		if(useArray)
 8001fb0:	7fbb      	ldrb	r3, [r7, #30]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <driverSWLTC6804WriteConfigRegisterB+0xd0>
			activeBalanceMask = balanceEnableMaskArray[i];
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc2:	e002      	b.n	8001fca <driverSWLTC6804WriteConfigRegisterB+0xd6>
		else
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 8001fc4:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <driverSWLTC6804WriteConfigRegisterB+0x2bc>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34


    tx_cfg[i][0] = ((activeBalanceMask >> 8 ) & 0x000000F0) | (driverSWLTC6804ConfigStruct.GPIO9 << 3) | (driverSWLTC6804ConfigStruct.GPIO8 << 2) | (driverSWLTC6804ConfigStruct.GPIO7 << 1) | (driverSWLTC6804ConfigStruct.GPIO6) ;
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f023 030f 	bic.w	r3, r3, #15
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <driverSWLTC6804WriteConfigRegisterB+0x2bc>)
 8001fd8:	7a1b      	ldrb	r3, [r3, #8]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b73      	ldr	r3, [pc, #460]	; (80021b0 <driverSWLTC6804WriteConfigRegisterB+0x2bc>)
 8001fe4:	79db      	ldrb	r3, [r3, #7]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b70      	ldr	r3, [pc, #448]	; (80021b0 <driverSWLTC6804WriteConfigRegisterB+0x2bc>)
 8001ff0:	799b      	ldrb	r3, [r3, #6]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4a6d      	ldr	r2, [pc, #436]	; (80021b0 <driverSWLTC6804WriteConfigRegisterB+0x2bc>)
 8001ffc:	7952      	ldrb	r2, [r2, #5]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b2d8      	uxtb	r0, r3
 8002002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	440b      	add	r3, r1
 8002010:	4602      	mov	r2, r0
 8002012:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][1] = ((activeBalanceMask >> 16 ) & 0x00000003) ;
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	b2d8      	uxtb	r0, r3
 8002020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	3301      	adds	r3, #1
 8002030:	4602      	mov	r2, r0
 8002032:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][2] = 0;
 8002034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	440b      	add	r3, r1
 8002042:	3302      	adds	r3, #2
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][3] = 0;
 8002048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800204a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	440b      	add	r3, r1
 8002056:	3303      	adds	r3, #3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][4] = 0;
 800205c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800205e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	440b      	add	r3, r1
 800206a:	3304      	adds	r3, #4
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][5] = 0;
 8002070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	440b      	add	r3, r1
 800207e:	3305      	adds	r3, #5
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8002084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002086:	3301      	adds	r3, #1
 8002088:	63bb      	str	r3, [r7, #56]	; 0x38
 800208a:	7ffb      	ldrb	r3, [r7, #31]
 800208c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800208e:	429a      	cmp	r2, r3
 8002090:	db8e      	blt.n	8001fb0 <driverSWLTC6804WriteConfigRegisterB+0xbc>
  }

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8002092:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002096:	4618      	mov	r0, r3
 8002098:	f00e f9b8 	bl	801040c <malloc>
 800209c:	4603      	mov	r3, r0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  cmd[0] = 0x00; // config register B command
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x24; // config register B command
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	3301      	adds	r3, #1
 80020aa:	2224      	movs	r2, #36	; 0x24
 80020ac:	701a      	strb	r2, [r3, #0]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 80020ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b0:	2002      	movs	r0, #2
 80020b2:	f000 f87f 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 80020b6:	4603      	mov	r3, r0
 80020b8:	847b      	strh	r3, [r7, #34]	; 0x22
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80020ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	b29a      	uxth	r2, r3
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3302      	adds	r3, #2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	3303      	adds	r3, #3
 80020cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 80020d2:	2304      	movs	r3, #4
 80020d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 80020d8:	7ffb      	ldrb	r3, [r7, #31]
 80020da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80020de:	e051      	b.n	8002184 <driverSWLTC6804WriteConfigRegisterB+0x290>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80020e6:	e01b      	b.n	8002120 <driverSWLTC6804WriteConfigRegisterB+0x22c>
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent
 80020e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	f897 0032 	ldrb.w	r0, [r7, #50]	; 0x32
 80020f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f8:	4419      	add	r1, r3
 80020fa:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4423      	add	r3, r4
 8002106:	4403      	add	r3, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	700b      	strb	r3, [r1, #0]
      cmd_index = cmd_index + 1;
 800210c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002110:	3301      	adds	r3, #1
 8002112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8002116:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800211a:	3301      	adds	r3, #1
 800211c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002120:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002124:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002128:	429a      	cmp	r2, r3
 800212a:	d3dd      	bcc.n	80020e8 <driverSWLTC6804WriteConfigRegisterB+0x1f4>
    }
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 800212c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800213c:	441a      	add	r2, r3
 800213e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f835 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 800214a:	4603      	mov	r3, r0
 800214c:	843b      	strh	r3, [r7, #32]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 800214e:	8c3b      	ldrh	r3, [r7, #32]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b299      	uxth	r1, r3
 8002154:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	4413      	add	r3, r2
 800215c:	b2ca      	uxtb	r2, r1
 800215e:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8002160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002164:	3301      	adds	r3, #1
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	4413      	add	r3, r2
 800216a:	8c3a      	ldrh	r2, [r7, #32]
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8002170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002174:	3302      	adds	r3, #2
 8002176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 800217a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800217e:	3b01      	subs	r3, #1
 8002180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002184:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1a9      	bne.n	80020e0 <driverSWLTC6804WriteConfigRegisterB+0x1ec>
  }

	driverSWLTC6804WakeIC();
 800218c:	f000 f8e1 	bl	8002352 <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 8002190:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002194:	4619      	mov	r1, r3
 8002196:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002198:	f000 f8b1 	bl	80022fe <driverSWLTC6804Write>
  free(cmd);
 800219c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800219e:	f00e f93d 	bl	801041c <free>
 80021a2:	46b5      	mov	sp, r6
}
 80021a4:	bf00      	nop
 80021a6:	3744      	adds	r7, #68	; 0x44
 80021a8:	46bd      	mov	sp, r7
 80021aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ae:	bf00      	nop
 80021b0:	20000278 	.word	0x20000278

080021b4 <driverSWLTC6804CalcPEC15>:
	if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
		driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,enableMask,true);
	}
}

uint16_t driverSWLTC6804CalcPEC15(uint8_t len, uint8_t *data) {
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;

	remainder = 16;//initialize the PEC
 80021c0:	2310      	movs	r3, #16
 80021c2:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 80021c4:	2300      	movs	r3, #0
 80021c6:	737b      	strb	r3, [r7, #13]
 80021c8:	e018      	b.n	80021fc <driverSWLTC6804CalcPEC15+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	09db      	lsrs	r3, r3, #7
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	7b7b      	ldrb	r3, [r7, #13]
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	440b      	add	r3, r1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	4053      	eors	r3, r2
 80021dc:	b29b      	uxth	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 80021e2:	89fb      	ldrh	r3, [r7, #14]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	897b      	ldrh	r3, [r7, #10]
 80021ea:	490b      	ldr	r1, [pc, #44]	; (8002218 <driverSWLTC6804CalcPEC15+0x64>)
 80021ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4053      	eors	r3, r2
 80021f4:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 80021f6:	7b7b      	ldrb	r3, [r7, #13]
 80021f8:	3301      	adds	r3, #1
 80021fa:	737b      	strb	r3, [r7, #13]
 80021fc:	7b7a      	ldrb	r2, [r7, #13]
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	429a      	cmp	r2, r3
 8002202:	d3e2      	bcc.n	80021ca <driverSWLTC6804CalcPEC15+0x16>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	b29b      	uxth	r3, r3
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	08013c68 	.word	0x08013c68

0800221c <driverSWLTC6804ReadConfigRegister>:

int8_t driverSWLTC6804ReadConfigRegister(uint8_t total_ic, uint8_t r_config[][8]) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  const uint8_t BYTES_IN_REG = 8;
 8002228:	2308      	movs	r3, #8
 800222a:	753b      	strb	r3, [r7, #20]

  uint8_t cmd[4];
  uint8_t *rx_data;
  int8_t pec_error = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	75fb      	strb	r3, [r7, #23]
  uint16_t data_pec;
  uint16_t received_pec;

  rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4618      	mov	r0, r3
 8002236:	f00e f8e9 	bl	801040c <malloc>
 800223a:	4603      	mov	r3, r0
 800223c:	613b      	str	r3, [r7, #16]

  cmd[0] = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	723b      	strb	r3, [r7, #8]
  cmd[1] = 0x02;
 8002242:	2302      	movs	r3, #2
 8002244:	727b      	strb	r3, [r7, #9]
  cmd[2] = 0x2b;
 8002246:	232b      	movs	r3, #43	; 0x2b
 8002248:	72bb      	strb	r3, [r7, #10]
  cmd[3] = 0x0A;
 800224a:	230a      	movs	r3, #10
 800224c:	72fb      	strb	r3, [r7, #11]

	driverSWLTC6804WriteRead(cmd, 4, rx_data, (BYTES_IN_REG*total_ic));
 800224e:	7d3a      	ldrb	r2, [r7, #20]
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	fb12 f303 	smulbb	r3, r2, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f107 0008 	add.w	r0, r7, #8
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	2104      	movs	r1, #4
 8002260:	f000 f85e 	bl	8002320 <driverSWLTC6804WriteRead>

  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors
 8002264:	2300      	movs	r3, #0
 8002266:	75bb      	strb	r3, [r7, #22]
 8002268:	e03c      	b.n	80022e4 <driverSWLTC6804ReadConfigRegister+0xc8>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 800226a:	2300      	movs	r3, #0
 800226c:	757b      	strb	r3, [r7, #21]
 800226e:	e012      	b.n	8002296 <driverSWLTC6804ReadConfigRegister+0x7a>
      r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 8002270:	7d7a      	ldrb	r2, [r7, #21]
 8002272:	7dbb      	ldrb	r3, [r7, #22]
 8002274:	7d39      	ldrb	r1, [r7, #20]
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1899      	adds	r1, r3, r2
 8002282:	7dbb      	ldrb	r3, [r7, #22]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	441a      	add	r2, r3
 800228a:	7d7b      	ldrb	r3, [r7, #21]
 800228c:	7809      	ldrb	r1, [r1, #0]
 800228e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 8002290:	7d7b      	ldrb	r3, [r7, #21]
 8002292:	3301      	adds	r3, #1
 8002294:	757b      	strb	r3, [r7, #21]
 8002296:	7d7a      	ldrb	r2, [r7, #21]
 8002298:	7d3b      	ldrb	r3, [r7, #20]
 800229a:	429a      	cmp	r2, r3
 800229c:	d3e8      	bcc.n	8002270 <driverSWLTC6804ReadConfigRegister+0x54>
    }
    received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 800229e:	7dbb      	ldrb	r3, [r7, #22]
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	799b      	ldrb	r3, [r3, #6]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	7dbb      	ldrb	r3, [r7, #22]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	440b      	add	r3, r1
 80022b6:	79db      	ldrb	r3, [r3, #7]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	81fb      	strh	r3, [r7, #14]
    data_pec = driverSWLTC6804CalcPEC15(6, &r_config[current_ic][0]);
 80022be:	7dbb      	ldrb	r3, [r7, #22]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	2006      	movs	r0, #6
 80022ca:	f7ff ff73 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 80022ce:	4603      	mov	r3, r0
 80022d0:	81bb      	strh	r3, [r7, #12]
    if(received_pec != data_pec) {
 80022d2:	89fa      	ldrh	r2, [r7, #14]
 80022d4:	89bb      	ldrh	r3, [r7, #12]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <driverSWLTC6804ReadConfigRegister+0xc2>
      pec_error = -1;
 80022da:	23ff      	movs	r3, #255	; 0xff
 80022dc:	75fb      	strb	r3, [r7, #23]
  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors
 80022de:	7dbb      	ldrb	r3, [r7, #22]
 80022e0:	3301      	adds	r3, #1
 80022e2:	75bb      	strb	r3, [r7, #22]
 80022e4:	7dba      	ldrb	r2, [r7, #22]
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d3be      	bcc.n	800226a <driverSWLTC6804ReadConfigRegister+0x4e>
    }
  }
  free(rx_data);
 80022ec:	6938      	ldr	r0, [r7, #16]
 80022ee:	f00e f895 	bl	801041c <free>
  return(pec_error);
 80022f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <driverSWLTC6804Write>:

// Coupling of drivers
void driverSWLTC6804Write(uint8_t *writeBytes, uint8_t writeLength) {
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	70fb      	strb	r3, [r7, #3]
	driverHWSPI1Write(writeBytes,writeLength,GPIOA,GPIO_PIN_4);
 800230a:	78f9      	ldrb	r1, [r7, #3]
 800230c:	2310      	movs	r3, #16
 800230e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fd00 	bl	8000d18 <driverHWSPI1Write>
};
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <driverSWLTC6804WriteRead>:

// Coupling of drivers
void driverSWLTC6804WriteRead(uint8_t *writeBytes, uint8_t writeLength, uint8_t *readBytes, uint8_t readLength) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	461a      	mov	r2, r3
 800232c:	460b      	mov	r3, r1
 800232e:	72fb      	strb	r3, [r7, #11]
 8002330:	4613      	mov	r3, r2
 8002332:	72bb      	strb	r3, [r7, #10]
	driverHWSPI1WriteRead(writeBytes,writeLength,readBytes,readLength,GPIOA,GPIO_PIN_4);
 8002334:	7abb      	ldrb	r3, [r7, #10]
 8002336:	7af9      	ldrb	r1, [r7, #11]
 8002338:	2210      	movs	r2, #16
 800233a:	9201      	str	r2, [sp, #4]
 800233c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002340:	9200      	str	r2, [sp, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7fe fd25 	bl	8000d94 <driverHWSPI1WriteRead>
};
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <driverSWLTC6804WakeIC>:

void driverSWLTC6804WakeIC(void){
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
	driverSWLTC6804DelayMS(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f7fe fd80 	bl	8000e5c <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	2110      	movs	r1, #16
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f005 fbb6 	bl	8007ad4 <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 8002368:	2001      	movs	r0, #1
 800236a:	f7fe fd77 	bl	8000e5c <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	2110      	movs	r1, #16
 8002372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002376:	f005 fbad 	bl	8007ad4 <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe fd6e 	bl	8000e5c <driverSWLTC6804DelayMS>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <driverSWLTC6804ConvertTemperatureExt>:

float driverSWLTC6804ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	ed87 0a00 	vstr	s0, [r7]
 8002394:	4603      	mov	r3, r0
 8002396:	81fb      	strh	r3, [r7, #14]
 8002398:	4613      	mov	r3, r2
 800239a:	81bb      	strh	r3, [r7, #12]
	static float scalar;
	static float steinhart;

  scalar = 30000.0f / (float)inputValue - 1.0f;
 800239c:	89fb      	ldrh	r3, [r7, #14]
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80024b4 <driverSWLTC6804ConvertTemperatureExt+0x130>
 80023aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023b6:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <driverSWLTC6804ConvertTemperatureExt+0x134>)
 80023b8:	edc3 7a00 	vstr	s15, [r3]
  scalar = (float)ntcSeriesResistance / scalar;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c6:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <driverSWLTC6804ConvertTemperatureExt+0x134>)
 80023c8:	ed93 7a00 	vldr	s14, [r3]
 80023cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d0:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <driverSWLTC6804ConvertTemperatureExt+0x134>)
 80023d2:	edc3 7a00 	vstr	s15, [r3]
  steinhart = scalar / (float)ntcNominal;               // (R/Ro)
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <driverSWLTC6804ConvertTemperatureExt+0x134>)
 80023d8:	edd3 6a00 	vldr	s13, [r3]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023ec:	edc3 7a00 	vstr	s15, [r3]
  steinhart = log(steinhart);                           // ln(R/Ro)
 80023f0:	4b32      	ldr	r3, [pc, #200]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f8a7 	bl	8000548 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	ec43 2b10 	vmov	d0, r2, r3
 8002402:	f00d fdd5 	bl	800ffb0 <log>
 8002406:	ec53 2b10 	vmov	r2, r3, d0
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fbeb 	bl	8000be8 <__aeabi_d2f>
 8002412:	4603      	mov	r3, r0
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002416:	6013      	str	r3, [r2, #0]
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800241a:	edd3 6a00 	vldr	s13, [r3]
 800241e:	89bb      	ldrh	r3, [r7, #12]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800242e:	edc3 7a00 	vstr	s15, [r3]
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8002432:	edd7 7a00 	vldr	s15, [r7]
 8002436:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80024c0 <driverSWLTC6804ConvertTemperatureExt+0x13c>
 800243a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800243e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002452:	edc3 7a00 	vstr	s15, [r3]
  steinhart = 1.0f / steinhart;                         // Invert
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002458:	ed93 7a00 	vldr	s14, [r3]
 800245c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002466:	edc3 7a00 	vstr	s15, [r3]
  steinhart -= 273.15f;                                 // convert to degree
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80024c0 <driverSWLTC6804ConvertTemperatureExt+0x13c>
 8002474:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800247a:	edc3 7a00 	vstr	s15, [r3]

	if(steinhart < -50.0f || (float)inputValue >= 30000.0f)
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80024c4 <driverSWLTC6804ConvertTemperatureExt+0x140>
 8002488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	d404      	bmi.n	800249c <driverSWLTC6804ConvertTemperatureExt+0x118>
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	f247 522f 	movw	r2, #29999	; 0x752f
 8002498:	4293      	cmp	r3, r2
 800249a:	d902      	bls.n	80024a2 <driverSWLTC6804ConvertTemperatureExt+0x11e>
		steinhart = 100.0f;
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <driverSWLTC6804ConvertTemperatureExt+0x144>)
 80024a0:	601a      	str	r2, [r3, #0]

  return steinhart;
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	ee07 3a90 	vmov	s15, r3
}
 80024aa:	eeb0 0a67 	vmov.f32	s0, s15
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	46ea6000 	.word	0x46ea6000
 80024b8:	20000298 	.word	0x20000298
 80024bc:	2000029c 	.word	0x2000029c
 80024c0:	43889333 	.word	0x43889333
 80024c4:	c2480000 	.word	0xc2480000
 80024c8:	42c80000 	.word	0x42c80000

080024cc <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 80024da:	2306      	movs	r3, #6
 80024dc:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3304      	adds	r3, #4
 80024e6:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80024e8:	7efb      	ldrb	r3, [r7, #27]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00d ff8e 	bl	801040c <malloc>
 80024f0:	4603      	mov	r3, r0
 80024f2:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	7852      	ldrb	r2, [r2, #1]
 8002504:	701a      	strb	r2, [r3, #0]
	cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8002506:	6979      	ldr	r1, [r7, #20]
 8002508:	2002      	movs	r0, #2
 800250a:	f7ff fe53 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 800250e:	4603      	mov	r3, r0
 8002510:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002512:	8a7b      	ldrh	r3, [r7, #18]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	b29a      	uxth	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3302      	adds	r3, #2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3303      	adds	r3, #3
 8002524:	8a7a      	ldrh	r2, [r7, #18]
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 800252a:	2304      	movs	r3, #4
 800252c:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	77bb      	strb	r3, [r7, #30]
 8002532:	e042      	b.n	80025ba <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002534:	2300      	movs	r3, #0
 8002536:	777b      	strb	r3, [r7, #29]
 8002538:	e016      	b.n	8002568 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 800253a:	7fbb      	ldrb	r3, [r7, #30]
 800253c:	1e5a      	subs	r2, r3, #1
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	461a      	mov	r2, r3
 8002548:	7f7b      	ldrb	r3, [r7, #29]
 800254a:	4413      	add	r3, r2
 800254c:	461a      	mov	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	441a      	add	r2, r3
 8002552:	7ffb      	ldrb	r3, [r7, #31]
 8002554:	6979      	ldr	r1, [r7, #20]
 8002556:	440b      	add	r3, r1
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 800255c:	7ffb      	ldrb	r3, [r7, #31]
 800255e:	3301      	adds	r3, #1
 8002560:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002562:	7f7b      	ldrb	r3, [r7, #29]
 8002564:	3301      	adds	r3, #1
 8002566:	777b      	strb	r3, [r7, #29]
 8002568:	7f7a      	ldrb	r2, [r7, #29]
 800256a:	7f3b      	ldrb	r3, [r7, #28]
 800256c:	429a      	cmp	r2, r3
 800256e:	d3e4      	bcc.n	800253a <write_68+0x6e>
		}

		data_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8002570:	7fbb      	ldrb	r3, [r7, #30]
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	461a      	mov	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	441a      	add	r2, r3
 8002582:	7f3b      	ldrb	r3, [r7, #28]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fe14 	bl	80021b4 <driverSWLTC6804CalcPEC15>
 800258c:	4603      	mov	r3, r0
 800258e:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8002590:	8a3b      	ldrh	r3, [r7, #16]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	b299      	uxth	r1, r3
 8002596:	7ffb      	ldrb	r3, [r7, #31]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4413      	add	r3, r2
 800259c:	b2ca      	uxtb	r2, r1
 800259e:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80025a0:	7ffb      	ldrb	r3, [r7, #31]
 80025a2:	3301      	adds	r3, #1
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4413      	add	r3, r2
 80025a8:	8a3a      	ldrh	r2, [r7, #16]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
 80025b0:	3302      	adds	r3, #2
 80025b2:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80025b4:	7fbb      	ldrb	r3, [r7, #30]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	77bb      	strb	r3, [r7, #30]
 80025ba:	7fbb      	ldrb	r3, [r7, #30]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1b9      	bne.n	8002534 <write_68+0x68>
	}


	driverSWLTC6804WakeIC();
 80025c0:	f7ff fec7 	bl	8002352 <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 80025c4:	7efb      	ldrb	r3, [r7, #27]
 80025c6:	4619      	mov	r1, r3
 80025c8:	6978      	ldr	r0, [r7, #20]
 80025ca:	f7ff fe98 	bl	80022fe <driverSWLTC6804Write>
	free(cmd);
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f00d ff24 	bl	801041c <free>
}
 80025d4:	bf00      	nop
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <LTC6813_set_discharge>:
/* Helper function to set discharge bit in CFG register */
void LTC6813_set_discharge(int Cell, // Cell to be discharged
						   uint8_t total_ic, // Number of ICs in the system
						   cell_asic *ic // A two dimensional array that will store the data
						   )
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	460b      	mov	r3, r1
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	72fb      	strb	r3, [r7, #11]
	for (int i=0; i<total_ic; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e086      	b.n	80026fe <LTC6813_set_discharge+0x122>
	{
		if (Cell==0)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d111      	bne.n	800261a <LTC6813_set_discharge+0x3e>
		{
		  ic[i].configb.tx_data[1] = ic[i].configb.tx_data[1] |(0x04);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	22e8      	movs	r2, #232	; 0xe8
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	7c1a      	ldrb	r2, [r3, #16]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	21e8      	movs	r1, #232	; 0xe8
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	440b      	add	r3, r1
 8002610:	f042 0204 	orr.w	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	741a      	strb	r2, [r3, #16]
 8002618:	e06e      	b.n	80026f8 <LTC6813_set_discharge+0x11c>
		}
		else if (Cell<9)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b08      	cmp	r3, #8
 800261e:	dc18      	bgt.n	8002652 <LTC6813_set_discharge+0x76>
		{
		  ic[i].config.tx_data[4] = ic[i].config.tx_data[4] | (1<<(Cell-1));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	22e8      	movs	r2, #232	; 0xe8
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	791b      	ldrb	r3, [r3, #4]
 800262e:	b25a      	sxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3b01      	subs	r3, #1
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	b25b      	sxtb	r3, r3
 800263c:	4313      	orrs	r3, r2
 800263e:	b259      	sxtb	r1, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	22e8      	movs	r2, #232	; 0xe8
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	711a      	strb	r2, [r3, #4]
 8002650:	e052      	b.n	80026f8 <LTC6813_set_discharge+0x11c>
		}
		else if (Cell < 13)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	dc18      	bgt.n	800268a <LTC6813_set_discharge+0xae>
		{
		  ic[i].config.tx_data[5] = ic[i].config.tx_data[5] | (1<<(Cell-9));
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	22e8      	movs	r2, #232	; 0xe8
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	795b      	ldrb	r3, [r3, #5]
 8002666:	b25a      	sxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3b09      	subs	r3, #9
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	b25b      	sxtb	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	b259      	sxtb	r1, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	22e8      	movs	r2, #232	; 0xe8
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	b2ca      	uxtb	r2, r1
 8002686:	715a      	strb	r2, [r3, #5]
 8002688:	e036      	b.n	80026f8 <LTC6813_set_discharge+0x11c>
		}
		else if (Cell<17)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b10      	cmp	r3, #16
 800268e:	dc18      	bgt.n	80026c2 <LTC6813_set_discharge+0xe6>
		{
		  ic[i].configb.tx_data[0] = ic[i].configb.tx_data[0] | (1<<(Cell-9));
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	22e8      	movs	r2, #232	; 0xe8
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	7bdb      	ldrb	r3, [r3, #15]
 800269e:	b25a      	sxtb	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3b09      	subs	r3, #9
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b259      	sxtb	r1, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	22e8      	movs	r2, #232	; 0xe8
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	b2ca      	uxtb	r2, r1
 80026be:	73da      	strb	r2, [r3, #15]
 80026c0:	e01a      	b.n	80026f8 <LTC6813_set_discharge+0x11c>
		}
		else if (Cell<19)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	dc20      	bgt.n	800270a <LTC6813_set_discharge+0x12e>
		{
		  ic[i].configb.tx_data[1] = ic[i].configb.tx_data[1] | (1<<(Cell-17));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	22e8      	movs	r2, #232	; 0xe8
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	7c1b      	ldrb	r3, [r3, #16]
 80026d6:	b25a      	sxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3b11      	subs	r3, #17
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b259      	sxtb	r1, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	22e8      	movs	r2, #232	; 0xe8
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	741a      	strb	r2, [r3, #16]
	for (int i=0; i<total_ic; i++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	429a      	cmp	r2, r3
 8002704:	f6ff af74 	blt.w	80025f0 <LTC6813_set_discharge+0x14>
		else
		{
			break;
		}
	}
}
 8002708:	e000      	b.n	800270c <LTC6813_set_discharge+0x130>
			break;
 800270a:	bf00      	nop
}
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LTC681x_clear_discharge>:

/* Clears all of the DCC bits in the configuration registers */
void LTC681x_clear_discharge(uint8_t total_ic, // Number of ICs in the daisy chain
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<total_ic; i++)
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e03d      	b.n	80027a6 <LTC681x_clear_discharge+0x8e>
	{
	   ic[i].config.tx_data[4] = 0;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22e8      	movs	r2, #232	; 0xe8
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4413      	add	r3, r2
 8002736:	2200      	movs	r2, #0
 8002738:	711a      	strb	r2, [r3, #4]
	   ic[i].config.tx_data[5] =ic[i].config.tx_data[5]&(0xF0);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	22e8      	movs	r2, #232	; 0xe8
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	4413      	add	r3, r2
 8002746:	795a      	ldrb	r2, [r3, #5]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	21e8      	movs	r1, #232	; 0xe8
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	6839      	ldr	r1, [r7, #0]
 8002752:	440b      	add	r3, r1
 8002754:	f022 020f 	bic.w	r2, r2, #15
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	715a      	strb	r2, [r3, #5]
	   ic[i].configb.tx_data[0]=ic[i].configb.tx_data[0]&(0x0F);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	22e8      	movs	r2, #232	; 0xe8
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	4413      	add	r3, r2
 8002768:	7bda      	ldrb	r2, [r3, #15]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	21e8      	movs	r1, #232	; 0xe8
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	440b      	add	r3, r1
 8002776:	f002 020f 	and.w	r2, r2, #15
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	73da      	strb	r2, [r3, #15]
	   ic[i].configb.tx_data[1]=ic[i].configb.tx_data[1]&(0xF0);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	22e8      	movs	r2, #232	; 0xe8
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	4413      	add	r3, r2
 800278a:	7c1a      	ldrb	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	21e8      	movs	r1, #232	; 0xe8
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	440b      	add	r3, r1
 8002798:	f022 020f 	bic.w	r2, r2, #15
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	741a      	strb	r2, [r3, #16]
	for (int i=0; i<total_ic; i++)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	dbbd      	blt.n	800272a <LTC681x_clear_discharge+0x12>
	}
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LTC6813_set_cfgr>:
	}
	return(pec_error);
}

void LTC6813_set_cfgr(uint8_t nIC, cell_asic *ic, bool refon, bool adcopt, bool gpio[5],bool dcc[12],bool dcto[4], uint16_t uv, uint16_t  ov)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6039      	str	r1, [r7, #0]
 80027c4:	4611      	mov	r1, r2
 80027c6:	461a      	mov	r2, r3
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	460b      	mov	r3, r1
 80027ce:	71bb      	strb	r3, [r7, #6]
 80027d0:	4613      	mov	r3, r2
 80027d2:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC,ic,refon);
 80027d4:	79ba      	ldrb	r2, [r7, #6]
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f828 	bl	8002830 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 80027e0:	797a      	ldrb	r2, [r7, #5]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f856 	bl	8002898 <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	6839      	ldr	r1, [r7, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f884 	bl	8002900 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC,ic,dcc);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f8ce 	bl	80029a0 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	6839      	ldr	r1, [r7, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f957 	bl	8002abe <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8002810:	8bba      	ldrh	r2, [r7, #28]
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f9a1 	bl	8002b5e <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 800281c:	8c3a      	ldrh	r2, [r7, #32]
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f9e1 	bl	8002bea <LTC681x_set_cfgr_ov>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <LTC681x_set_cfgr_refon>:

void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	4613      	mov	r3, r2
 800283e:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8002840:	79bb      	ldrb	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d011      	beq.n	800286a <LTC681x_set_cfgr_refon+0x3a>
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	22e8      	movs	r2, #232	; 0xe8
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	21e8      	movs	r1, #232	; 0xe8
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	440b      	add	r3, r1
 8002860:	f042 0204 	orr.w	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8002868:	e010      	b.n	800288c <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	22e8      	movs	r2, #232	; 0xe8
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	21e8      	movs	r1, #232	; 0xe8
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	440b      	add	r3, r1
 8002884:	f022 0204 	bic.w	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
 80028a4:	4613      	mov	r3, r2
 80028a6:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 80028a8:	79bb      	ldrb	r3, [r7, #6]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d011      	beq.n	80028d2 <LTC681x_set_cfgr_adcopt+0x3a>
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	22e8      	movs	r2, #232	; 0xe8
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	21e8      	movs	r1, #232	; 0xe8
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	440b      	add	r3, r1
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 80028d0:	e010      	b.n	80028f4 <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	22e8      	movs	r2, #232	; 0xe8
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	21e8      	movs	r1, #232	; 0xe8
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	440b      	add	r3, r1
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e03b      	b.n	800298c <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d018      	beq.n	8002952 <LTC681x_set_cfgr_gpio+0x52>
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	22e8      	movs	r2, #232	; 0xe8
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b25a      	sxtb	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3303      	adds	r3, #3
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	b25b      	sxtb	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	b259      	sxtb	r1, r3
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	22e8      	movs	r2, #232	; 0xe8
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	4413      	add	r3, r2
 800294c:	b2ca      	uxtb	r2, r1
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e019      	b.n	8002986 <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	22e8      	movs	r2, #232	; 0xe8
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4413      	add	r3, r2
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25a      	sxtb	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3303      	adds	r3, #3
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	b25b      	sxtb	r3, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	b25b      	sxtb	r3, r3
 8002972:	4013      	ands	r3, r2
 8002974:	b259      	sxtb	r1, r3
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	22e8      	movs	r2, #232	; 0xe8
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	b2ca      	uxtb	r2, r1
 8002984:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b04      	cmp	r3, #4
 8002990:	ddc0      	ble.n	8002914 <LTC681x_set_cfgr_gpio+0x14>
	}
}
 8002992:	bf00      	nop
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e039      	b.n	8002a28 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d017      	beq.n	80029f0 <LTC681x_set_cfgr_dis+0x50>
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	22e8      	movs	r2, #232	; 0xe8
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	4413      	add	r3, r2
 80029cc:	791b      	ldrb	r3, [r3, #4]
 80029ce:	b25a      	sxtb	r2, r3
 80029d0:	2101      	movs	r1, #1
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	4313      	orrs	r3, r2
 80029dc:	b259      	sxtb	r1, r3
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	22e8      	movs	r2, #232	; 0xe8
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4413      	add	r3, r2
 80029ea:	b2ca      	uxtb	r2, r1
 80029ec:	711a      	strb	r2, [r3, #4]
 80029ee:	e018      	b.n	8002a22 <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	22e8      	movs	r2, #232	; 0xe8
 80029f4:	fb02 f303 	mul.w	r3, r2, r3
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4413      	add	r3, r2
 80029fc:	791b      	ldrb	r3, [r3, #4]
 80029fe:	b25a      	sxtb	r2, r3
 8002a00:	2101      	movs	r1, #1
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	4013      	ands	r3, r2
 8002a10:	b259      	sxtb	r1, r3
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	22e8      	movs	r2, #232	; 0xe8
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	b2ca      	uxtb	r2, r1
 8002a20:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b07      	cmp	r3, #7
 8002a2c:	ddc2      	ble.n	80029b4 <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	e03a      	b.n	8002aaa <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	3308      	adds	r3, #8
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d017      	beq.n	8002a72 <LTC681x_set_cfgr_dis+0xd2>
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	22e8      	movs	r2, #232	; 0xe8
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	795b      	ldrb	r3, [r3, #5]
 8002a50:	b25a      	sxtb	r2, r3
 8002a52:	2101      	movs	r1, #1
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	b25b      	sxtb	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b259      	sxtb	r1, r3
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	22e8      	movs	r2, #232	; 0xe8
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	715a      	strb	r2, [r3, #5]
 8002a70:	e018      	b.n	8002aa4 <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	22e8      	movs	r2, #232	; 0xe8
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	795b      	ldrb	r3, [r3, #5]
 8002a80:	b25a      	sxtb	r2, r3
 8002a82:	2101      	movs	r1, #1
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	4013      	ands	r3, r2
 8002a92:	b259      	sxtb	r1, r3
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	22e8      	movs	r2, #232	; 0xe8
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b2ca      	uxtb	r2, r1
 8002aa2:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	ddc1      	ble.n	8002a34 <LTC681x_set_cfgr_dis+0x94>
	}
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b087      	sub	sp, #28
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e03b      	b.n	8002b4a <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d018      	beq.n	8002b10 <LTC681x_set_cfgr_dcto+0x52>
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	22e8      	movs	r2, #232	; 0xe8
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4413      	add	r3, r2
 8002aea:	795b      	ldrb	r3, [r3, #5]
 8002aec:	b25a      	sxtb	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	b259      	sxtb	r1, r3
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	22e8      	movs	r2, #232	; 0xe8
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	4413      	add	r3, r2
 8002b0a:	b2ca      	uxtb	r2, r1
 8002b0c:	715a      	strb	r2, [r3, #5]
 8002b0e:	e019      	b.n	8002b44 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	22e8      	movs	r2, #232	; 0xe8
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	795b      	ldrb	r3, [r3, #5]
 8002b1e:	b25a      	sxtb	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3304      	adds	r3, #4
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	4013      	ands	r3, r2
 8002b32:	b259      	sxtb	r1, r3
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	22e8      	movs	r2, #232	; 0xe8
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4413      	add	r3, r2
 8002b40:	b2ca      	uxtb	r2, r1
 8002b42:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	ddc0      	ble.n	8002ad2 <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	6039      	str	r1, [r7, #0]
 8002b68:	71fb      	strb	r3, [r7, #7]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8002b6e:	88bb      	ldrh	r3, [r7, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	22e8      	movs	r2, #232	; 0xe8
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	89fa      	ldrh	r2, [r7, #14]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	22e8      	movs	r2, #232	; 0xe8
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	789a      	ldrb	r2, [r3, #2]
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	21e8      	movs	r1, #232	; 0xe8
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f022 020f 	bic.w	r2, r2, #15
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	22e8      	movs	r2, #232	; 0xe8
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	789b      	ldrb	r3, [r3, #2]
 8002bba:	b25a      	sxtb	r2, r3
 8002bbc:	89fb      	ldrh	r3, [r7, #14]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b259      	sxtb	r1, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	22e8      	movs	r2, #232	; 0xe8
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	b2ca      	uxtb	r2, r1
 8002bdc:	709a      	strb	r2, [r3, #2]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	6039      	str	r1, [r7, #0]
 8002bf4:	71fb      	strb	r3, [r7, #7]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8002bfa:	88bb      	ldrh	r3, [r7, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8002c00:	89fb      	ldrh	r3, [r7, #14]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	b299      	uxth	r1, r3
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	22e8      	movs	r2, #232	; 0xe8
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	b2ca      	uxtb	r2, r1
 8002c14:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	22e8      	movs	r2, #232	; 0xe8
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	789a      	ldrb	r2, [r3, #2]
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	21e8      	movs	r1, #232	; 0xe8
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	440b      	add	r3, r1
 8002c30:	f002 020f 	and.w	r2, r2, #15
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	22e8      	movs	r2, #232	; 0xe8
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	789b      	ldrb	r3, [r3, #2]
 8002c46:	b25a      	sxtb	r2, r3
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b259      	sxtb	r1, r3
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	22e8      	movs	r2, #232	; 0xe8
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	b2ca      	uxtb	r2, r1
 8002c60:	709a      	strb	r2, [r3, #2]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LTC6813_set_cfgrb>:


/********************* Functions to set configuration register B for LTC6813 ************************/

void LTC6813_set_cfgrb(uint8_t nIC, cell_asic *ic,bool fdrf,bool dtmen,bool ps[2],bool gpiobits[4],bool dccbits[7])
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	4611      	mov	r1, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	71bb      	strb	r3, [r7, #6]
 8002c82:	4613      	mov	r3, r2
 8002c84:	717b      	strb	r3, [r7, #5]
    LTC6813_set_cfgrb_fdrf(nIC,ic,fdrf);
 8002c86:	79ba      	ldrb	r2, [r7, #6]
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 f81c 	bl	8002cca <LTC6813_set_cfgrb_fdrf>
    LTC6813_set_cfgrb_dtmen(nIC,ic,dtmen);
 8002c92:	797a      	ldrb	r2, [r7, #5]
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	6839      	ldr	r1, [r7, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f84a 	bl	8002d32 <LTC6813_set_cfgrb_dtmen>
    LTC6813_set_cfgrb_ps(nIC,ic,ps);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	6839      	ldr	r1, [r7, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f878 	bl	8002d9a <LTC6813_set_cfgrb_ps>
    LTC6813_set_cfgrb_gpio_b(nIC,ic,gpiobits);
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	6839      	ldr	r1, [r7, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f8c2 	bl	8002e3a <LTC6813_set_cfgrb_gpio_b>
	LTC6813_set_cfgrb_dcc_b(nIC,ic,dccbits);
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	6839      	ldr	r1, [r7, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f90a 	bl	8002ed6 <LTC6813_set_cfgrb_dcc_b>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <LTC6813_set_cfgrb_fdrf>:

/* Helper function to set the FDRF bit */
void LTC6813_set_cfgrb_fdrf(uint8_t nIC, cell_asic *ic, bool fdrf)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	6039      	str	r1, [r7, #0]
 8002cd4:	71fb      	strb	r3, [r7, #7]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	71bb      	strb	r3, [r7, #6]
	if(fdrf) ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x40;
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d011      	beq.n	8002d04 <LTC6813_set_cfgrb_fdrf+0x3a>
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	22e8      	movs	r2, #232	; 0xe8
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	7c1a      	ldrb	r2, [r3, #16]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	21e8      	movs	r1, #232	; 0xe8
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	741a      	strb	r2, [r3, #16]
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xBF;
}
 8002d02:	e010      	b.n	8002d26 <LTC6813_set_cfgrb_fdrf+0x5c>
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xBF;
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	22e8      	movs	r2, #232	; 0xe8
 8002d08:	fb02 f303 	mul.w	r3, r2, r3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	7c1a      	ldrb	r2, [r3, #16]
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	21e8      	movs	r1, #232	; 0xe8
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	6839      	ldr	r1, [r7, #0]
 8002d1c:	440b      	add	r3, r1
 8002d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	741a      	strb	r2, [r3, #16]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LTC6813_set_cfgrb_dtmen>:

/* Helper function to set the DTMEN bit */
void LTC6813_set_cfgrb_dtmen(uint8_t nIC, cell_asic *ic, bool dtmen)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	6039      	str	r1, [r7, #0]
 8002d3c:	71fb      	strb	r3, [r7, #7]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	71bb      	strb	r3, [r7, #6]
	if(dtmen) ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x08;
 8002d42:	79bb      	ldrb	r3, [r7, #6]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d011      	beq.n	8002d6c <LTC6813_set_cfgrb_dtmen+0x3a>
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	22e8      	movs	r2, #232	; 0xe8
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	7c1a      	ldrb	r2, [r3, #16]
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	21e8      	movs	r1, #232	; 0xe8
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	440b      	add	r3, r1
 8002d62:	f042 0208 	orr.w	r2, r2, #8
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	741a      	strb	r2, [r3, #16]
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xF7;
}
 8002d6a:	e010      	b.n	8002d8e <LTC6813_set_cfgrb_dtmen+0x5c>
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xF7;
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	22e8      	movs	r2, #232	; 0xe8
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	7c1a      	ldrb	r2, [r3, #16]
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	21e8      	movs	r1, #232	; 0xe8
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	6839      	ldr	r1, [r7, #0]
 8002d84:	440b      	add	r3, r1
 8002d86:	f022 0208 	bic.w	r2, r2, #8
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	741a      	strb	r2, [r3, #16]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LTC6813_set_cfgrb_ps>:

/* Helper function to set the PATH SELECT bit */
void LTC6813_set_cfgrb_ps(uint8_t nIC, cell_asic *ic, bool ps[])
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b087      	sub	sp, #28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<2;i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e03b      	b.n	8002e26 <LTC6813_set_cfgrb_ps+0x8c>
	{
	  if(ps[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|(0x01<<(i+4));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d018      	beq.n	8002dec <LTC6813_set_cfgrb_ps+0x52>
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	22e8      	movs	r2, #232	; 0xe8
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	7c1b      	ldrb	r3, [r3, #16]
 8002dc8:	b25a      	sxtb	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2101      	movs	r1, #1
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	b25b      	sxtb	r3, r3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	b259      	sxtb	r1, r3
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	22e8      	movs	r2, #232	; 0xe8
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	4413      	add	r3, r2
 8002de6:	b2ca      	uxtb	r2, r1
 8002de8:	741a      	strb	r2, [r3, #16]
 8002dea:	e019      	b.n	8002e20 <LTC6813_set_cfgrb_ps+0x86>
	  else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&(~(0x01<<(i+4)));
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	22e8      	movs	r2, #232	; 0xe8
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	4413      	add	r3, r2
 8002df8:	7c1b      	ldrb	r3, [r3, #16]
 8002dfa:	b25a      	sxtb	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	b25b      	sxtb	r3, r3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b259      	sxtb	r1, r3
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	22e8      	movs	r2, #232	; 0xe8
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b2ca      	uxtb	r2, r1
 8002e1e:	741a      	strb	r2, [r3, #16]
	for(int i =0;i<2;i++)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3301      	adds	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	ddc0      	ble.n	8002dae <LTC6813_set_cfgrb_ps+0x14>
	}
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LTC6813_set_cfgrb_gpio_b>:

/*  Helper function to set the gpio bits in configb b register  */
void LTC6813_set_cfgrb_gpio_b(uint8_t nIC, cell_asic *ic, bool gpiobits[])
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e039      	b.n	8002ec2 <LTC6813_set_cfgrb_gpio_b+0x88>
	{
	  if(gpiobits[i])ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]|(0x01<<i);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d017      	beq.n	8002e8a <LTC6813_set_cfgrb_gpio_b+0x50>
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	22e8      	movs	r2, #232	; 0xe8
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	4413      	add	r3, r2
 8002e66:	7bdb      	ldrb	r3, [r3, #15]
 8002e68:	b25a      	sxtb	r2, r3
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	b25b      	sxtb	r3, r3
 8002e74:	4313      	orrs	r3, r2
 8002e76:	b259      	sxtb	r1, r3
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	22e8      	movs	r2, #232	; 0xe8
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	4413      	add	r3, r2
 8002e84:	b2ca      	uxtb	r2, r1
 8002e86:	73da      	strb	r2, [r3, #15]
 8002e88:	e018      	b.n	8002ebc <LTC6813_set_cfgrb_gpio_b+0x82>
	  else ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]&(~(0x01<<i));
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	22e8      	movs	r2, #232	; 0xe8
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4413      	add	r3, r2
 8002e96:	7bdb      	ldrb	r3, [r3, #15]
 8002e98:	b25a      	sxtb	r2, r3
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	b25b      	sxtb	r3, r3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b259      	sxtb	r1, r3
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	22e8      	movs	r2, #232	; 0xe8
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b2ca      	uxtb	r2, r1
 8002eba:	73da      	strb	r2, [r3, #15]
	for(int i =0;i<4;i++)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	ddc2      	ble.n	8002e4e <LTC6813_set_cfgrb_gpio_b+0x14>
	}
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LTC6813_set_cfgrb_dcc_b>:

/*  Helper function to set the dcc bits in configb b register */
void LTC6813_set_cfgrb_dcc_b(uint8_t nIC, cell_asic *ic, bool dccbits[])
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b087      	sub	sp, #28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<7;i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e0ac      	b.n	8003044 <LTC6813_set_cfgrb_dcc_b+0x16e>
	{
		if(i==0)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d128      	bne.n	8002f42 <LTC6813_set_cfgrb_dcc_b+0x6c>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x04;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d011      	beq.n	8002f20 <LTC6813_set_cfgrb_dcc_b+0x4a>
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	22e8      	movs	r2, #232	; 0xe8
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	4413      	add	r3, r2
 8002f08:	7c1a      	ldrb	r2, [r3, #16]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	21e8      	movs	r1, #232	; 0xe8
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	440b      	add	r3, r1
 8002f16:	f042 0204 	orr.w	r2, r2, #4
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	741a      	strb	r2, [r3, #16]
 8002f1e:	e010      	b.n	8002f42 <LTC6813_set_cfgrb_dcc_b+0x6c>
			else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xFB;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	22e8      	movs	r2, #232	; 0xe8
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	7c1a      	ldrb	r2, [r3, #16]
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	21e8      	movs	r1, #232	; 0xe8
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	440b      	add	r3, r1
 8002f3a:	f022 0204 	bic.w	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	741a      	strb	r2, [r3, #16]
		}
		if(i>0 && i<5)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dd3b      	ble.n	8002fc0 <LTC6813_set_cfgrb_dcc_b+0xea>
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	dc38      	bgt.n	8002fc0 <LTC6813_set_cfgrb_dcc_b+0xea>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]|(0x01<<(i+3));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d018      	beq.n	8002f8c <LTC6813_set_cfgrb_dcc_b+0xb6>
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	22e8      	movs	r2, #232	; 0xe8
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4413      	add	r3, r2
 8002f66:	7bdb      	ldrb	r3, [r3, #15]
 8002f68:	b25a      	sxtb	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3303      	adds	r3, #3
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b259      	sxtb	r1, r3
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	22e8      	movs	r2, #232	; 0xe8
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4413      	add	r3, r2
 8002f86:	b2ca      	uxtb	r2, r1
 8002f88:	73da      	strb	r2, [r3, #15]
 8002f8a:	e019      	b.n	8002fc0 <LTC6813_set_cfgrb_dcc_b+0xea>
			else ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]&(~(0x01<<(i+3)));
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	22e8      	movs	r2, #232	; 0xe8
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	4413      	add	r3, r2
 8002f98:	7bdb      	ldrb	r3, [r3, #15]
 8002f9a:	b25a      	sxtb	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3303      	adds	r3, #3
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	b25b      	sxtb	r3, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	b259      	sxtb	r1, r3
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	22e8      	movs	r2, #232	; 0xe8
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4413      	add	r3, r2
 8002fbc:	b2ca      	uxtb	r2, r1
 8002fbe:	73da      	strb	r2, [r3, #15]
		}
		if(i>4 && i<7)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	dd3b      	ble.n	800303e <LTC6813_set_cfgrb_dcc_b+0x168>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	dc38      	bgt.n	800303e <LTC6813_set_cfgrb_dcc_b+0x168>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|(0x01<<(i-5));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d018      	beq.n	800300a <LTC6813_set_cfgrb_dcc_b+0x134>
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	22e8      	movs	r2, #232	; 0xe8
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	7c1b      	ldrb	r3, [r3, #16]
 8002fe6:	b25a      	sxtb	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3b05      	subs	r3, #5
 8002fec:	2101      	movs	r1, #1
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b259      	sxtb	r1, r3
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	22e8      	movs	r2, #232	; 0xe8
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	4413      	add	r3, r2
 8003004:	b2ca      	uxtb	r2, r1
 8003006:	741a      	strb	r2, [r3, #16]
 8003008:	e019      	b.n	800303e <LTC6813_set_cfgrb_dcc_b+0x168>
			else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&(~(0x01<<(i-5)));
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	22e8      	movs	r2, #232	; 0xe8
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4413      	add	r3, r2
 8003016:	7c1b      	ldrb	r3, [r3, #16]
 8003018:	b25a      	sxtb	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3b05      	subs	r3, #5
 800301e:	2101      	movs	r1, #1
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	b25b      	sxtb	r3, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	b25b      	sxtb	r3, r3
 800302a:	4013      	ands	r3, r2
 800302c:	b259      	sxtb	r1, r3
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	22e8      	movs	r2, #232	; 0xe8
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4413      	add	r3, r2
 800303a:	b2ca      	uxtb	r2, r1
 800303c:	741a      	strb	r2, [r3, #16]
	for(int i =0;i<7;i++)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3301      	adds	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b06      	cmp	r3, #6
 8003048:	f77f af4f 	ble.w	8002eea <LTC6813_set_cfgrb_dcc_b+0x14>
		}
	}
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b0c4      	sub	sp, #272	; 0x110
 800305e:	af00      	add	r7, sp, #0
 8003060:	4602      	mov	r2, r0
 8003062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003066:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800306a:	6019      	str	r1, [r3, #0]
 800306c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003070:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003074:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8003076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800308a:	2300      	movs	r3, #0
 800308c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003090:	e048      	b.n	8003124 <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8003092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003096:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80030a0:	f083 0301 	eor.w	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 80030aa:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80030ae:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80030b2:	e00b      	b.n	80030cc <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80030b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030b8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80030d2:	e01e      	b.n	8003112 <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80030d4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80030d8:	22e8      	movs	r2, #232	; 0xe8
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80030e2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	18d1      	adds	r1, r2, r3
 80030ea:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80030ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80030f2:	5c89      	ldrb	r1, [r1, r2]
 80030f4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80030f8:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80030fc:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80030fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003102:	3301      	adds	r3, #1
 8003104:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8003108:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800310c:	3301      	adds	r3, #1
 800310e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8003112:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8003116:	2b05      	cmp	r3, #5
 8003118:	d9dc      	bls.n	80030d4 <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800311a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800311e:	3301      	adds	r3, #1
 8003120:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003124:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003128:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800312c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d3ad      	bcc.n	8003092 <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8003136:	f107 0208 	add.w	r2, r7, #8
 800313a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800313e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003142:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff f9bf 	bl	80024cc <write_68>
}
 800314e:	bf00      	nop
 8003150:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <LTC681x_wrcfgb>:

/* Write the LTC681x CFGRB */
void LTC681x_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b0c4      	sub	sp, #272	; 0x110
 800315c:	af00      	add	r7, sp, #0
 800315e:	4602      	mov	r2, r0
 8003160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003164:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800316e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003172:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x24} ;
 8003174:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003178:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003188:	2300      	movs	r3, #0
 800318a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800318e:	e049      	b.n	8003224 <LTC681x_wrcfgb+0xcc>
	{
		if (ic->isospi_reverse == false)
 8003190:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003194:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800319e:	f083 0301 	eor.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <LTC681x_wrcfgb+0x5a>
		{
			c_ic = current_ic;
 80031a8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80031ac:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80031b0:	e00b      	b.n	80031ca <LTC681x_wrcfgb+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80031b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031b6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80031d0:	e01f      	b.n	8003212 <LTC681x_wrcfgb+0xba>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 80031d2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80031d6:	22e8      	movs	r2, #232	; 0xe8
 80031d8:	fb02 f303 	mul.w	r3, r2, r3
 80031dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80031e0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	18d1      	adds	r1, r2, r3
 80031e8:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80031ec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80031f0:	440a      	add	r2, r1
 80031f2:	7bd1      	ldrb	r1, [r2, #15]
 80031f4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80031f8:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80031fc:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80031fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003202:	3301      	adds	r3, #1
 8003204:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8003208:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800320c:	3301      	adds	r3, #1
 800320e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8003212:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8003216:	2b05      	cmp	r3, #5
 8003218:	d9db      	bls.n	80031d2 <LTC681x_wrcfgb+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800321a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800321e:	3301      	adds	r3, #1
 8003220:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003224:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003228:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800322c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d3ac      	bcc.n	8003190 <LTC681x_wrcfgb+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8003236:	f107 0208 	add.w	r2, r7, #8
 800323a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800323e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003242:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f93f 	bl	80024cc <write_68>
}
 800324e:	bf00      	nop
 8003250:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003262:	4804      	ldr	r0, [pc, #16]	; (8003274 <SELECT+0x1c>)
 8003264:	f004 fc36 	bl	8007ad4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003268:	2001      	movs	r0, #1
 800326a:	f003 faa9 	bl	80067c0 <HAL_Delay>
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	48000400 	.word	0x48000400

08003278 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800327c:	2201      	movs	r2, #1
 800327e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003282:	4804      	ldr	r0, [pc, #16]	; (8003294 <DESELECT+0x1c>)
 8003284:	f004 fc26 	bl	8007ad4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003288:	2001      	movs	r0, #1
 800328a:	f003 fa99 	bl	80067c0 <HAL_Delay>
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	48000400 	.word	0x48000400

08003298 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80032a2:	bf00      	nop
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <SPI_TxByte+0x30>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d1f8      	bne.n	80032a4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80032b2:	1df9      	adds	r1, r7, #7
 80032b4:	2364      	movs	r3, #100	; 0x64
 80032b6:	2201      	movs	r2, #1
 80032b8:	4803      	ldr	r0, [pc, #12]	; (80032c8 <SPI_TxByte+0x30>)
 80032ba:	f006 fc98 	bl	8009bee <HAL_SPI_Transmit>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000350 	.word	0x20000350

080032cc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80032d8:	bf00      	nop
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <SPI_TxBuffer+0x30>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d1f8      	bne.n	80032da <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80032e8:	887a      	ldrh	r2, [r7, #2]
 80032ea:	2364      	movs	r3, #100	; 0x64
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <SPI_TxBuffer+0x30>)
 80032f0:	f006 fc7d 	bl	8009bee <HAL_SPI_Transmit>
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000350 	.word	0x20000350

08003300 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003306:	23ff      	movs	r3, #255	; 0xff
 8003308:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800330a:	bf00      	nop
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <SPI_RxByte+0x34>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d1f8      	bne.n	800330c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800331a:	1dba      	adds	r2, r7, #6
 800331c:	1df9      	adds	r1, r7, #7
 800331e:	2364      	movs	r3, #100	; 0x64
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2301      	movs	r3, #1
 8003324:	4803      	ldr	r0, [pc, #12]	; (8003334 <SPI_RxByte+0x34>)
 8003326:	f006 fdd0 	bl	8009eca <HAL_SPI_TransmitReceive>

	return data;
 800332a:	79bb      	ldrb	r3, [r7, #6]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000350 	.word	0x20000350

08003338 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003340:	f7ff ffde 	bl	8003300 <SPI_RxByte>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	701a      	strb	r2, [r3, #0]
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <SD_ReadyWait+0x30>)
 800335c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003360:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003362:	f7ff ffcd 	bl	8003300 <SPI_RxByte>
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	2bff      	cmp	r3, #255	; 0xff
 800336e:	d004      	beq.n	800337a <SD_ReadyWait+0x26>
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <SD_ReadyWait+0x30>)
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f3      	bne.n	8003362 <SD_ReadyWait+0xe>

	return res;
 800337a:	79fb      	ldrb	r3, [r7, #7]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20002b5c 	.word	0x20002b5c

08003388 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800338e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003392:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003394:	f7ff ff70 	bl	8003278 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	e005      	b.n	80033aa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800339e:	20ff      	movs	r0, #255	; 0xff
 80033a0:	f7ff ff7a 	bl	8003298 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	ddf6      	ble.n	800339e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80033b0:	f7ff ff52 	bl	8003258 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80033b4:	2340      	movs	r3, #64	; 0x40
 80033b6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80033c8:	2395      	movs	r3, #149	; 0x95
 80033ca:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80033cc:	463b      	mov	r3, r7
 80033ce:	2106      	movs	r1, #6
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff7b 	bl	80032cc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80033d6:	e002      	b.n	80033de <SD_PowerOn+0x56>
	{
		cnt--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3b01      	subs	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80033de:	f7ff ff8f 	bl	8003300 <SPI_RxByte>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d002      	beq.n	80033ee <SD_PowerOn+0x66>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f4      	bne.n	80033d8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80033ee:	f7ff ff43 	bl	8003278 <DESELECT>
	SPI_TxByte(0XFF);
 80033f2:	20ff      	movs	r0, #255	; 0xff
 80033f4:	f7ff ff50 	bl	8003298 <SPI_TxByte>

	PowerFlag = 1;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <SD_PowerOn+0x80>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200002a1 	.word	0x200002a1

0800340c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <SD_PowerOff+0x14>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	200002a1 	.word	0x200002a1

08003424 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <SD_CheckPower+0x14>)
 800342a:	781b      	ldrb	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	200002a1 	.word	0x200002a1

0800343c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <SD_RxDataBlock+0x5c>)
 8003448:	22c8      	movs	r2, #200	; 0xc8
 800344a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800344c:	f7ff ff58 	bl	8003300 <SPI_RxByte>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2bff      	cmp	r3, #255	; 0xff
 8003458:	d104      	bne.n	8003464 <SD_RxDataBlock+0x28>
 800345a:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <SD_RxDataBlock+0x5c>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f3      	bne.n	800344c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2bfe      	cmp	r3, #254	; 0xfe
 8003468:	d001      	beq.n	800346e <SD_RxDataBlock+0x32>
 800346a:	2300      	movs	r3, #0
 800346c:	e00f      	b.n	800348e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5f 	bl	8003338 <SPI_RxBytePtr>
	} while(len--);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	603a      	str	r2, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f4      	bne.n	800346e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8003484:	f7ff ff3c 	bl	8003300 <SPI_RxByte>
	SPI_RxByte();
 8003488:	f7ff ff3a 	bl	8003300 <SPI_RxByte>

	return TRUE;
 800348c:	2301      	movs	r3, #1
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20002b5a 	.word	0x20002b5a

0800349c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80034ac:	f7ff ff52 	bl	8003354 <SD_ReadyWait>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2bff      	cmp	r3, #255	; 0xff
 80034b4:	d001      	beq.n	80034ba <SD_TxDataBlock+0x1e>
 80034b6:	2300      	movs	r3, #0
 80034b8:	e02f      	b.n	800351a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff feeb 	bl	8003298 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	2bfd      	cmp	r3, #253	; 0xfd
 80034c6:	d020      	beq.n	800350a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80034c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fefd 	bl	80032cc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80034d2:	f7ff ff15 	bl	8003300 <SPI_RxByte>
		SPI_RxByte();
 80034d6:	f7ff ff13 	bl	8003300 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80034da:	e00b      	b.n	80034f4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80034dc:	f7ff ff10 	bl	8003300 <SPI_RxByte>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d006      	beq.n	80034fc <SD_TxDataBlock+0x60>
			i++;
 80034ee:	7bbb      	ldrb	r3, [r7, #14]
 80034f0:	3301      	adds	r3, #1
 80034f2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80034f4:	7bbb      	ldrb	r3, [r7, #14]
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d9f0      	bls.n	80034dc <SD_TxDataBlock+0x40>
 80034fa:	e000      	b.n	80034fe <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80034fc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80034fe:	bf00      	nop
 8003500:	f7ff fefe 	bl	8003300 <SPI_RxByte>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0fa      	beq.n	8003500 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2b05      	cmp	r3, #5
 8003512:	d101      	bne.n	8003518 <SD_TxDataBlock+0x7c>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <SD_TxDataBlock+0x7e>

	return FALSE;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	6039      	str	r1, [r7, #0]
 800352c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800352e:	f7ff ff11 	bl	8003354 <SD_ReadyWait>
 8003532:	4603      	mov	r3, r0
 8003534:	2bff      	cmp	r3, #255	; 0xff
 8003536:	d001      	beq.n	800353c <SD_SendCmd+0x1a>
 8003538:	23ff      	movs	r3, #255	; 0xff
 800353a:	e042      	b.n	80035c2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff feaa 	bl	8003298 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	0e1b      	lsrs	r3, r3, #24
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fea4 	bl	8003298 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe9e 	bl	8003298 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fe98 	bl	8003298 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fe93 	bl	8003298 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d102      	bne.n	800357e <SD_SendCmd+0x5c>
 8003578:	2395      	movs	r3, #149	; 0x95
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e007      	b.n	800358e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	2b48      	cmp	r3, #72	; 0x48
 8003582:	d102      	bne.n	800358a <SD_SendCmd+0x68>
 8003584:	2387      	movs	r3, #135	; 0x87
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	e001      	b.n	800358e <SD_SendCmd+0x6c>
	else crc = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fe81 	bl	8003298 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	2b4c      	cmp	r3, #76	; 0x4c
 800359a:	d101      	bne.n	80035a0 <SD_SendCmd+0x7e>
 800359c:	f7ff feb0 	bl	8003300 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80035a0:	230a      	movs	r3, #10
 80035a2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80035a4:	f7ff feac 	bl	8003300 <SPI_RxByte>
 80035a8:	4603      	mov	r3, r0
 80035aa:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80035ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da05      	bge.n	80035c0 <SD_SendCmd+0x9e>
 80035b4:	7bbb      	ldrb	r3, [r7, #14]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	73bb      	strb	r3, [r7, #14]
 80035ba:	7bbb      	ldrb	r3, [r7, #14]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f1      	bne.n	80035a4 <SD_SendCmd+0x82>

	return res;
 80035c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <SD_disk_initialize+0x14>
 80035dc:	2301      	movs	r3, #1
 80035de:	e0d6      	b.n	800378e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80035e0:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <SD_disk_initialize+0x1cc>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <SD_disk_initialize+0x2a>
 80035ee:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <SD_disk_initialize+0x1cc>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e0cb      	b.n	800378e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80035f6:	f7ff fec7 	bl	8003388 <SD_PowerOn>

	/* slave select */
	SELECT();
 80035fa:	f7ff fe2d 	bl	8003258 <SELECT>

	/* check disk type */
	type = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003602:	2100      	movs	r1, #0
 8003604:	2040      	movs	r0, #64	; 0x40
 8003606:	f7ff ff8c 	bl	8003522 <SD_SendCmd>
 800360a:	4603      	mov	r3, r0
 800360c:	2b01      	cmp	r3, #1
 800360e:	f040 80a6 	bne.w	800375e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003612:	4b62      	ldr	r3, [pc, #392]	; (800379c <SD_disk_initialize+0x1d0>)
 8003614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003618:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800361a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800361e:	2048      	movs	r0, #72	; 0x48
 8003620:	f7ff ff7f 	bl	8003522 <SD_SendCmd>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d158      	bne.n	80036dc <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
 800362e:	e00c      	b.n	800364a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003630:	7bfc      	ldrb	r4, [r7, #15]
 8003632:	f7ff fe65 	bl	8003300 <SPI_RxByte>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	f104 0310 	add.w	r3, r4, #16
 800363e:	443b      	add	r3, r7
 8003640:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	3301      	adds	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d9ef      	bls.n	8003630 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003650:	7abb      	ldrb	r3, [r7, #10]
 8003652:	2b01      	cmp	r3, #1
 8003654:	f040 8083 	bne.w	800375e <SD_disk_initialize+0x192>
 8003658:	7afb      	ldrb	r3, [r7, #11]
 800365a:	2baa      	cmp	r3, #170	; 0xaa
 800365c:	d17f      	bne.n	800375e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800365e:	2100      	movs	r1, #0
 8003660:	2077      	movs	r0, #119	; 0x77
 8003662:	f7ff ff5e 	bl	8003522 <SD_SendCmd>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d807      	bhi.n	800367c <SD_disk_initialize+0xb0>
 800366c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003670:	2069      	movs	r0, #105	; 0x69
 8003672:	f7ff ff56 	bl	8003522 <SD_SendCmd>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800367c:	4b47      	ldr	r3, [pc, #284]	; (800379c <SD_disk_initialize+0x1d0>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1eb      	bne.n	800365e <SD_disk_initialize+0x92>
 8003686:	e000      	b.n	800368a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003688:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <SD_disk_initialize+0x1d0>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d064      	beq.n	800375e <SD_disk_initialize+0x192>
 8003694:	2100      	movs	r1, #0
 8003696:	207a      	movs	r0, #122	; 0x7a
 8003698:	f7ff ff43 	bl	8003522 <SD_SendCmd>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d15d      	bne.n	800375e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
 80036a6:	e00c      	b.n	80036c2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80036a8:	7bfc      	ldrb	r4, [r7, #15]
 80036aa:	f7ff fe29 	bl	8003300 <SPI_RxByte>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	f104 0310 	add.w	r3, r4, #16
 80036b6:	443b      	add	r3, r7
 80036b8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	3301      	adds	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d9ef      	bls.n	80036a8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80036c8:	7a3b      	ldrb	r3, [r7, #8]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <SD_disk_initialize+0x10a>
 80036d2:	230c      	movs	r3, #12
 80036d4:	e000      	b.n	80036d8 <SD_disk_initialize+0x10c>
 80036d6:	2304      	movs	r3, #4
 80036d8:	73bb      	strb	r3, [r7, #14]
 80036da:	e040      	b.n	800375e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80036dc:	2100      	movs	r1, #0
 80036de:	2077      	movs	r0, #119	; 0x77
 80036e0:	f7ff ff1f 	bl	8003522 <SD_SendCmd>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d808      	bhi.n	80036fc <SD_disk_initialize+0x130>
 80036ea:	2100      	movs	r1, #0
 80036ec:	2069      	movs	r0, #105	; 0x69
 80036ee:	f7ff ff18 	bl	8003522 <SD_SendCmd>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d801      	bhi.n	80036fc <SD_disk_initialize+0x130>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e000      	b.n	80036fe <SD_disk_initialize+0x132>
 80036fc:	2301      	movs	r3, #1
 80036fe:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003700:	7bbb      	ldrb	r3, [r7, #14]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d10e      	bne.n	8003724 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003706:	2100      	movs	r1, #0
 8003708:	2077      	movs	r0, #119	; 0x77
 800370a:	f7ff ff0a 	bl	8003522 <SD_SendCmd>
 800370e:	4603      	mov	r3, r0
 8003710:	2b01      	cmp	r3, #1
 8003712:	d80e      	bhi.n	8003732 <SD_disk_initialize+0x166>
 8003714:	2100      	movs	r1, #0
 8003716:	2069      	movs	r0, #105	; 0x69
 8003718:	f7ff ff03 	bl	8003522 <SD_SendCmd>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <SD_disk_initialize+0x166>
 8003722:	e00d      	b.n	8003740 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003724:	2100      	movs	r1, #0
 8003726:	2041      	movs	r0, #65	; 0x41
 8003728:	f7ff fefb 	bl	8003522 <SD_SendCmd>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <SD_disk_initialize+0x1d0>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e1      	bne.n	8003700 <SD_disk_initialize+0x134>
 800373c:	e000      	b.n	8003740 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800373e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003740:	4b16      	ldr	r3, [pc, #88]	; (800379c <SD_disk_initialize+0x1d0>)
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <SD_disk_initialize+0x18e>
 800374a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800374e:	2050      	movs	r0, #80	; 0x50
 8003750:	f7ff fee7 	bl	8003522 <SD_SendCmd>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <SD_disk_initialize+0x192>
 800375a:	2300      	movs	r3, #0
 800375c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800375e:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <SD_disk_initialize+0x1d4>)
 8003760:	7bbb      	ldrb	r3, [r7, #14]
 8003762:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003764:	f7ff fd88 	bl	8003278 <DESELECT>
	SPI_RxByte();
 8003768:	f7ff fdca 	bl	8003300 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800376c:	7bbb      	ldrb	r3, [r7, #14]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <SD_disk_initialize+0x1cc>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <SD_disk_initialize+0x1cc>)
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e001      	b.n	8003788 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003784:	f7ff fe42 	bl	800340c <SD_PowerOff>
	}

	return Stat;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <SD_disk_initialize+0x1cc>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	bf00      	nop
 8003798:	20000000 	.word	0x20000000
 800379c:	20002b5a 	.word	0x20002b5a
 80037a0:	200002a0 	.word	0x200002a0

080037a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <SD_disk_status+0x14>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e002      	b.n	80037be <SD_disk_status+0x1a>
	return Stat;
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <SD_disk_status+0x28>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000000 	.word	0x20000000

080037d0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <SD_disk_read+0x1c>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <SD_disk_read+0x20>
 80037ec:	2304      	movs	r3, #4
 80037ee:	e051      	b.n	8003894 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80037f0:	4b2a      	ldr	r3, [pc, #168]	; (800389c <SD_disk_read+0xcc>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <SD_disk_read+0x32>
 80037fe:	2303      	movs	r3, #3
 8003800:	e048      	b.n	8003894 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003802:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <SD_disk_read+0xd0>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <SD_disk_read+0x44>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	025b      	lsls	r3, r3, #9
 8003812:	607b      	str	r3, [r7, #4]

	SELECT();
 8003814:	f7ff fd20 	bl	8003258 <SELECT>

	if (count == 1)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d111      	bne.n	8003842 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	2051      	movs	r0, #81	; 0x51
 8003822:	f7ff fe7e 	bl	8003522 <SD_SendCmd>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d129      	bne.n	8003880 <SD_disk_read+0xb0>
 800382c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003830:	68b8      	ldr	r0, [r7, #8]
 8003832:	f7ff fe03 	bl	800343c <SD_RxDataBlock>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d021      	beq.n	8003880 <SD_disk_read+0xb0>
 800383c:	2300      	movs	r3, #0
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	e01e      	b.n	8003880 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	2052      	movs	r0, #82	; 0x52
 8003846:	f7ff fe6c 	bl	8003522 <SD_SendCmd>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d117      	bne.n	8003880 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003854:	68b8      	ldr	r0, [r7, #8]
 8003856:	f7ff fdf1 	bl	800343c <SD_RxDataBlock>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <SD_disk_read+0xa6>
				buff += 512;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003866:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	3b01      	subs	r3, #1
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ed      	bne.n	8003850 <SD_disk_read+0x80>
 8003874:	e000      	b.n	8003878 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003876:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003878:	2100      	movs	r1, #0
 800387a:	204c      	movs	r0, #76	; 0x4c
 800387c:	f7ff fe51 	bl	8003522 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003880:	f7ff fcfa 	bl	8003278 <DESELECT>
	SPI_RxByte();
 8003884:	f7ff fd3c 	bl	8003300 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000000 	.word	0x20000000
 80038a0:	200002a0 	.word	0x200002a0

080038a4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4603      	mov	r3, r0
 80038b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <SD_disk_write+0x1c>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <SD_disk_write+0x20>
 80038c0:	2304      	movs	r3, #4
 80038c2:	e06b      	b.n	800399c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80038c4:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <SD_disk_write+0x100>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <SD_disk_write+0x32>
 80038d2:	2303      	movs	r3, #3
 80038d4:	e062      	b.n	800399c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80038d6:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <SD_disk_write+0x100>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <SD_disk_write+0x44>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e059      	b.n	800399c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80038e8:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <SD_disk_write+0x104>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <SD_disk_write+0x56>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	025b      	lsls	r3, r3, #9
 80038f8:	607b      	str	r3, [r7, #4]

	SELECT();
 80038fa:	f7ff fcad 	bl	8003258 <SELECT>

	if (count == 1)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d110      	bne.n	8003926 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	2058      	movs	r0, #88	; 0x58
 8003908:	f7ff fe0b 	bl	8003522 <SD_SendCmd>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13a      	bne.n	8003988 <SD_disk_write+0xe4>
 8003912:	21fe      	movs	r1, #254	; 0xfe
 8003914:	68b8      	ldr	r0, [r7, #8]
 8003916:	f7ff fdc1 	bl	800349c <SD_TxDataBlock>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d033      	beq.n	8003988 <SD_disk_write+0xe4>
			count = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	e030      	b.n	8003988 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <SD_disk_write+0x104>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8003932:	2100      	movs	r1, #0
 8003934:	2077      	movs	r0, #119	; 0x77
 8003936:	f7ff fdf4 	bl	8003522 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800393a:	6839      	ldr	r1, [r7, #0]
 800393c:	2057      	movs	r0, #87	; 0x57
 800393e:	f7ff fdf0 	bl	8003522 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	2059      	movs	r0, #89	; 0x59
 8003946:	f7ff fdec 	bl	8003522 <SD_SendCmd>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11b      	bne.n	8003988 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003950:	21fc      	movs	r1, #252	; 0xfc
 8003952:	68b8      	ldr	r0, [r7, #8]
 8003954:	f7ff fda2 	bl	800349c <SD_TxDataBlock>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <SD_disk_write+0xd0>
				buff += 512;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003964:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	3b01      	subs	r3, #1
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1ee      	bne.n	8003950 <SD_disk_write+0xac>
 8003972:	e000      	b.n	8003976 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003974:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003976:	21fd      	movs	r1, #253	; 0xfd
 8003978:	2000      	movs	r0, #0
 800397a:	f7ff fd8f 	bl	800349c <SD_TxDataBlock>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <SD_disk_write+0xe4>
			{
				count = 1;
 8003984:	2301      	movs	r3, #1
 8003986:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003988:	f7ff fc76 	bl	8003278 <DESELECT>
	SPI_RxByte();
 800398c:	f7ff fcb8 	bl	8003300 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000000 	.word	0x20000000
 80039a8:	200002a0 	.word	0x200002a0

080039ac <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b08b      	sub	sp, #44	; 0x2c
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	603a      	str	r2, [r7, #0]
 80039b6:	71fb      	strb	r3, [r7, #7]
 80039b8:	460b      	mov	r3, r1
 80039ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <SD_disk_ioctl+0x1e>
 80039c6:	2304      	movs	r3, #4
 80039c8:	e115      	b.n	8003bf6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80039d0:	79bb      	ldrb	r3, [r7, #6]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d124      	bne.n	8003a20 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d012      	beq.n	8003a04 <SD_disk_ioctl+0x58>
 80039de:	2b02      	cmp	r3, #2
 80039e0:	dc1a      	bgt.n	8003a18 <SD_disk_ioctl+0x6c>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <SD_disk_ioctl+0x40>
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d006      	beq.n	80039f8 <SD_disk_ioctl+0x4c>
 80039ea:	e015      	b.n	8003a18 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80039ec:	f7ff fd0e 	bl	800340c <SD_PowerOff>
			res = RES_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80039f6:	e0fc      	b.n	8003bf2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80039f8:	f7ff fcc6 	bl	8003388 <SD_PowerOn>
			res = RES_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003a02:	e0f6      	b.n	8003bf2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	1c5c      	adds	r4, r3, #1
 8003a08:	f7ff fd0c 	bl	8003424 <SD_CheckPower>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003a16:	e0ec      	b.n	8003bf2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003a18:	2304      	movs	r3, #4
 8003a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a1e:	e0e8      	b.n	8003bf2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a20:	4b77      	ldr	r3, [pc, #476]	; (8003c00 <SD_disk_ioctl+0x254>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <SD_disk_ioctl+0x86>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0e1      	b.n	8003bf6 <SD_disk_ioctl+0x24a>

		SELECT();
 8003a32:	f7ff fc11 	bl	8003258 <SELECT>

		switch (ctrl)
 8003a36:	79bb      	ldrb	r3, [r7, #6]
 8003a38:	2b0d      	cmp	r3, #13
 8003a3a:	f200 80cb 	bhi.w	8003bd4 <SD_disk_ioctl+0x228>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <SD_disk_ioctl+0x98>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003b3f 	.word	0x08003b3f
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003b2f 	.word	0x08003b2f
 8003a50:	08003bd5 	.word	0x08003bd5
 8003a54:	08003bd5 	.word	0x08003bd5
 8003a58:	08003bd5 	.word	0x08003bd5
 8003a5c:	08003bd5 	.word	0x08003bd5
 8003a60:	08003bd5 	.word	0x08003bd5
 8003a64:	08003bd5 	.word	0x08003bd5
 8003a68:	08003bd5 	.word	0x08003bd5
 8003a6c:	08003bd5 	.word	0x08003bd5
 8003a70:	08003b51 	.word	0x08003b51
 8003a74:	08003b75 	.word	0x08003b75
 8003a78:	08003b99 	.word	0x08003b99
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	2049      	movs	r0, #73	; 0x49
 8003a80:	f7ff fd4f 	bl	8003522 <SD_SendCmd>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 80a8 	bne.w	8003bdc <SD_disk_ioctl+0x230>
 8003a8c:	f107 030c 	add.w	r3, r7, #12
 8003a90:	2110      	movs	r1, #16
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fcd2 	bl	800343c <SD_RxDataBlock>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 809e 	beq.w	8003bdc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8003aa0:	7b3b      	ldrb	r3, [r7, #12]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d10e      	bne.n	8003ac8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003aaa:	7d7b      	ldrb	r3, [r7, #21]
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	7d3b      	ldrb	r3, [r7, #20]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003abe:	8bfb      	ldrh	r3, [r7, #30]
 8003ac0:	029a      	lsls	r2, r3, #10
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e02e      	b.n	8003b26 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003ac8:	7c7b      	ldrb	r3, [r7, #17]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	7dbb      	ldrb	r3, [r7, #22]
 8003ad2:	09db      	lsrs	r3, r3, #7
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	7d7b      	ldrb	r3, [r7, #21]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 0306 	and.w	r3, r3, #6
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	3302      	adds	r3, #2
 8003aec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003af0:	7d3b      	ldrb	r3, [r7, #20]
 8003af2:	099b      	lsrs	r3, r3, #6
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	7cbb      	ldrb	r3, [r7, #18]
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003b18:	8bfa      	ldrh	r2, [r7, #30]
 8003b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b1e:	3b09      	subs	r3, #9
 8003b20:	409a      	lsls	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003b2c:	e056      	b.n	8003bdc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b34:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003b3c:	e055      	b.n	8003bea <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003b3e:	f7ff fc09 	bl	8003354 <SD_ReadyWait>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2bff      	cmp	r3, #255	; 0xff
 8003b46:	d14b      	bne.n	8003be0 <SD_disk_ioctl+0x234>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003b4e:	e047      	b.n	8003be0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003b50:	2100      	movs	r1, #0
 8003b52:	2049      	movs	r0, #73	; 0x49
 8003b54:	f7ff fce5 	bl	8003522 <SD_SendCmd>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d142      	bne.n	8003be4 <SD_disk_ioctl+0x238>
 8003b5e:	2110      	movs	r1, #16
 8003b60:	6a38      	ldr	r0, [r7, #32]
 8003b62:	f7ff fc6b 	bl	800343c <SD_RxDataBlock>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d03b      	beq.n	8003be4 <SD_disk_ioctl+0x238>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003b72:	e037      	b.n	8003be4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003b74:	2100      	movs	r1, #0
 8003b76:	204a      	movs	r0, #74	; 0x4a
 8003b78:	f7ff fcd3 	bl	8003522 <SD_SendCmd>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d132      	bne.n	8003be8 <SD_disk_ioctl+0x23c>
 8003b82:	2110      	movs	r1, #16
 8003b84:	6a38      	ldr	r0, [r7, #32]
 8003b86:	f7ff fc59 	bl	800343c <SD_RxDataBlock>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02b      	beq.n	8003be8 <SD_disk_ioctl+0x23c>
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003b96:	e027      	b.n	8003be8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003b98:	2100      	movs	r1, #0
 8003b9a:	207a      	movs	r0, #122	; 0x7a
 8003b9c:	f7ff fcc1 	bl	8003522 <SD_SendCmd>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d116      	bne.n	8003bd4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003bac:	e00b      	b.n	8003bc6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8003bae:	6a3c      	ldr	r4, [r7, #32]
 8003bb0:	1c63      	adds	r3, r4, #1
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	f7ff fba4 	bl	8003300 <SPI_RxByte>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003bc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d9ef      	bls.n	8003bae <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bda:	e006      	b.n	8003bea <SD_disk_ioctl+0x23e>
			break;
 8003bdc:	bf00      	nop
 8003bde:	e004      	b.n	8003bea <SD_disk_ioctl+0x23e>
			break;
 8003be0:	bf00      	nop
 8003be2:	e002      	b.n	8003bea <SD_disk_ioctl+0x23e>
			break;
 8003be4:	bf00      	nop
 8003be6:	e000      	b.n	8003bea <SD_disk_ioctl+0x23e>
			break;
 8003be8:	bf00      	nop
		}

		DESELECT();
 8003bea:	f7ff fb45 	bl	8003278 <DESELECT>
		SPI_RxByte();
 8003bee:	f7ff fb87 	bl	8003300 <SPI_RxByte>
	}

	return res;
 8003bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	372c      	adds	r7, #44	; 0x2c
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000000 	.word	0x20000000

08003c04 <bufsize>:
float packVoltage, packCurrent, cellVoltageHigh, cellVoltageLow, maxImbalanceVoltage;


/*******************************************************************************/
int bufsize (char *buf)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	int i=0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8003c10:	e002      	b.n	8003c18 <bufsize+0x14>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f6      	bne.n	8003c12 <bufsize+0xe>
	return i;
 8003c24:	68fb      	ldr	r3, [r7, #12]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <clear_buffer>:

void clear_buffer (void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	e007      	b.n	8003c50 <clear_buffer+0x1c>
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <clear_buffer+0x34>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	2200      	movs	r2, #0
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	dbf3      	blt.n	8003c40 <clear_buffer+0xc>
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	200024b4 	.word	0x200024b4

08003c6c <send_uart>:

void send_uart (char *string)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fc faab 	bl	80001d0 <strlen>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4803      	ldr	r0, [pc, #12]	; (8003c98 <send_uart+0x2c>)
 8003c8a:	f006 fce3 	bl	800a654 <HAL_UART_Transmit>
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200003b4 	.word	0x200003b4
 8003c9c:	00000000 	.word	0x00000000

08003ca0 <write_to_csvfile>:

void write_to_csvfile (void)
{
 8003ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca4:	b0da      	sub	sp, #360	; 0x168
 8003ca6:	af30      	add	r7, sp, #192	; 0xc0

		  //dummy_timer += 1;
		  //dummy_cell_votlages += 1;
		  //dummy_pack_voltage += 11;

		  dummy_pack_current += 0.1;
 8003ca8:	4bad      	ldr	r3, [pc, #692]	; (8003f60 <write_to_csvfile+0x2c0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fc fc4b 	bl	8000548 <__aeabi_f2d>
 8003cb2:	a3a9      	add	r3, pc, #676	; (adr r3, 8003f58 <write_to_csvfile+0x2b8>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fae8 	bl	800028c <__adddf3>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7fc ff90 	bl	8000be8 <__aeabi_d2f>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4aa5      	ldr	r2, [pc, #660]	; (8003f60 <write_to_csvfile+0x2c0>)
 8003ccc:	6013      	str	r3, [r2, #0]
		  //dummy_temperature += 1.0;

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8003cce:	2203      	movs	r2, #3
 8003cd0:	49a4      	ldr	r1, [pc, #656]	; (8003f64 <write_to_csvfile+0x2c4>)
 8003cd2:	48a5      	ldr	r0, [pc, #660]	; (8003f68 <write_to_csvfile+0x2c8>)
 8003cd4:	f00a fbf4 	bl	800e4c0 <f_open>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4ba3      	ldr	r3, [pc, #652]	; (8003f6c <write_to_csvfile+0x2cc>)
 8003cde:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 8003ce0:	4ba1      	ldr	r3, [pc, #644]	; (8003f68 <write_to_csvfile+0x2c8>)
 8003ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	489f      	ldr	r0, [pc, #636]	; (8003f68 <write_to_csvfile+0x2c8>)
 8003cec:	f00b fc1a 	bl	800f524 <f_lseek>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b9d      	ldr	r3, [pc, #628]	; (8003f6c <write_to_csvfile+0x2cc>)
 8003cf6:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003cf8:	f002 fd56 	bl	80067a8 <HAL_GetTick>
 8003cfc:	4603      	mov	r3, r0
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fc00 	bl	8000504 <__aeabi_ui2d>
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	4b99      	ldr	r3, [pc, #612]	; (8003f70 <write_to_csvfile+0x2d0>)
 8003d0a:	f7fc fd9f 	bl	800084c <__aeabi_ddiv>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003d16:	4b97      	ldr	r3, [pc, #604]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc fc14 	bl	8000548 <__aeabi_f2d>
 8003d20:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003d24:	4b93      	ldr	r3, [pc, #588]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fc0d 	bl	8000548 <__aeabi_f2d>
 8003d2e:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003d32:	4b90      	ldr	r3, [pc, #576]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d34:	689b      	ldr	r3, [r3, #8]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fc06 	bl	8000548 <__aeabi_f2d>
 8003d3c:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003d40:	4b8c      	ldr	r3, [pc, #560]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d42:	68db      	ldr	r3, [r3, #12]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fbff 	bl	8000548 <__aeabi_f2d>
 8003d4a:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003d4e:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d50:	691b      	ldr	r3, [r3, #16]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc fbf8 	bl	8000548 <__aeabi_f2d>
 8003d58:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003d5c:	4b85      	ldr	r3, [pc, #532]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d5e:	695b      	ldr	r3, [r3, #20]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fbf1 	bl	8000548 <__aeabi_f2d>
 8003d66:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003d6a:	4b82      	ldr	r3, [pc, #520]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d6c:	699b      	ldr	r3, [r3, #24]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fc fbea 	bl	8000548 <__aeabi_f2d>
 8003d74:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003d78:	4b7e      	ldr	r3, [pc, #504]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fbe3 	bl	8000548 <__aeabi_f2d>
 8003d82:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003d86:	4b7b      	ldr	r3, [pc, #492]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fbdc 	bl	8000548 <__aeabi_f2d>
 8003d90:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003d94:	4b77      	ldr	r3, [pc, #476]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fc fbd5 	bl	8000548 <__aeabi_f2d>
 8003d9e:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003da2:	4b74      	ldr	r3, [pc, #464]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fbce 	bl	8000548 <__aeabi_f2d>
 8003dac:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003db0:	4b70      	ldr	r3, [pc, #448]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fbc7 	bl	8000548 <__aeabi_f2d>
 8003dba:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003dbe:	4b6d      	ldr	r3, [pc, #436]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fbc0 	bl	8000548 <__aeabi_f2d>
 8003dc8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003dcc:	4b69      	ldr	r3, [pc, #420]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fc fbb9 	bl	8000548 <__aeabi_f2d>
 8003dd6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003dda:	4b66      	ldr	r3, [pc, #408]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fbb2 	bl	8000548 <__aeabi_f2d>
 8003de4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003de8:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fbab 	bl	8000548 <__aeabi_f2d>
 8003df2:	e9c7 0108 	strd	r0, r1, [r7, #32]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003df6:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc fba4 	bl	8000548 <__aeabi_f2d>
 8003e00:	e9c7 0106 	strd	r0, r1, [r7, #24]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003e04:	4b5b      	ldr	r3, [pc, #364]	; (8003f74 <write_to_csvfile+0x2d4>)
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc fb9d 	bl	8000548 <__aeabi_f2d>
 8003e0e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003e12:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <write_to_csvfile+0x2d8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc fb96 	bl	8000548 <__aeabi_f2d>
 8003e1c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003e20:	4b4f      	ldr	r3, [pc, #316]	; (8003f60 <write_to_csvfile+0x2c0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc fb8f 	bl	8000548 <__aeabi_f2d>
 8003e2a:	e9c7 0100 	strd	r0, r1, [r7]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003e2e:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <write_to_csvfile+0x2dc>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fb88 	bl	8000548 <__aeabi_f2d>
 8003e38:	4682      	mov	sl, r0
 8003e3a:	468b      	mov	fp, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003e3c:	4b4f      	ldr	r3, [pc, #316]	; (8003f7c <write_to_csvfile+0x2dc>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc fb81 	bl	8000548 <__aeabi_f2d>
 8003e46:	4680      	mov	r8, r0
 8003e48:	4689      	mov	r9, r1
 8003e4a:	4b4d      	ldr	r3, [pc, #308]	; (8003f80 <write_to_csvfile+0x2e0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fc fb7a 	bl	8000548 <__aeabi_f2d>
 8003e54:	4604      	mov	r4, r0
 8003e56:	460d      	mov	r5, r1
 8003e58:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <write_to_csvfile+0x2e4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fb73 	bl	8000548 <__aeabi_f2d>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
 8003e6a:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8003e6e:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 8003e72:	e9cd ab28 	strd	sl, fp, [sp, #160]	; 0xa0
 8003e76:	ed97 7b00 	vldr	d7, [r7]
 8003e7a:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8003e7e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003e82:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8003e86:	ed97 7b04 	vldr	d7, [r7, #16]
 8003e8a:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8003e8e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003e92:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8003e96:	ed97 7b08 	vldr	d7, [r7, #32]
 8003e9a:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8003e9e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003ea2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003ea6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003eaa:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8003eae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003eb2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003eb6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003eba:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003ebe:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003ec2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003ec6:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8003eca:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003ece:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003ed2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003ed6:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8003eda:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003ede:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8003ee2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003ee6:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8003eea:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003eee:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8003ef2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003ef6:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8003efa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003efe:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8003f02:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f06:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8003f0a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f0e:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8003f12:	ed8d 7b00 	vstr	d7, [sp]
 8003f16:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003f1a:	491b      	ldr	r1, [pc, #108]	; (8003f88 <write_to_csvfile+0x2e8>)
 8003f1c:	481b      	ldr	r0, [pc, #108]	; (8003f8c <write_to_csvfile+0x2ec>)
 8003f1e:	f00c fff5 	bl	8010f0c <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8003f22:	481a      	ldr	r0, [pc, #104]	; (8003f8c <write_to_csvfile+0x2ec>)
 8003f24:	f7ff fe6e 	bl	8003c04 <bufsize>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <write_to_csvfile+0x2f0>)
 8003f2e:	4917      	ldr	r1, [pc, #92]	; (8003f8c <write_to_csvfile+0x2ec>)
 8003f30:	480d      	ldr	r0, [pc, #52]	; (8003f68 <write_to_csvfile+0x2c8>)
 8003f32:	f00a ffc5 	bl	800eec0 <f_write>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <write_to_csvfile+0x2cc>)
 8003f3c:	701a      	strb	r2, [r3, #0]
		  //send_uart(buffer);
		  f_close (&fil);
 8003f3e:	480a      	ldr	r0, [pc, #40]	; (8003f68 <write_to_csvfile+0x2c8>)
 8003f40:	f00b fac5 	bl	800f4ce <f_close>

		  clear_buffer();
 8003f44:	f7ff fe76 	bl	8003c34 <clear_buffer>
}
 8003f48:	bf00      	nop
 8003f4a:	37a8      	adds	r7, #168	; 0xa8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	f3af 8000 	nop.w
 8003f58:	9999999a 	.word	0x9999999a
 8003f5c:	3fb99999 	.word	0x3fb99999
 8003f60:	200024a0 	.word	0x200024a0
 8003f64:	08013210 	.word	0x08013210
 8003f68:	20001468 	.word	0x20001468
 8003f6c:	20002494 	.word	0x20002494
 8003f70:	408f4000 	.word	0x408f4000
 8003f74:	20002914 	.word	0x20002914
 8003f78:	20002b48 	.word	0x20002b48
 8003f7c:	20002a18 	.word	0x20002a18
 8003f80:	20002b4c 	.word	0x20002b4c
 8003f84:	20002b50 	.word	0x20002b50
 8003f88:	0801321c 	.word	0x0801321c
 8003f8c:	200024b4 	.word	0x200024b4
 8003f90:	2000249c 	.word	0x2000249c

08003f94 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f002 ff14 	bl	8006dd0 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2 )
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d102      	bne.n	8003fb6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		CAN_data_checkFlag = 1;
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
	}
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20002900 	.word	0x20002900
 8003fc4:	200028dc 	.word	0x200028dc
 8003fc8:	2000290c 	.word	0x2000290c

08003fcc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, uart_rx_data, 4);
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	4905      	ldr	r1, [pc, #20]	; (8003fec <HAL_UART_RxCpltCallback+0x20>)
 8003fd8:	4805      	ldr	r0, [pc, #20]	; (8003ff0 <HAL_UART_RxCpltCallback+0x24>)
 8003fda:	f006 fbcf 	bl	800a77c <HAL_UART_Receive_IT>
  uart_rx_flag = 1;
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_UART_RxCpltCallback+0x28>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200028b4 	.word	0x200028b4
 8003ff0:	200003b4 	.word	0x200003b4
 8003ff4:	200028c0 	.word	0x200028c0

08003ff8 <set_time>:



void set_time(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8003ffe:	1d3b      	adds	r3, r7, #4
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 800400c:	2300      	movs	r3, #0
 800400e:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 8004010:	2300      	movs	r3, #0
 8004012:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x53;
 8004014:	2353      	movs	r3, #83	; 0x53
 8004016:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8004018:	2300      	movs	r3, #0
 800401a:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	2201      	movs	r2, #1
 8004028:	4619      	mov	r1, r3
 800402a:	4812      	ldr	r0, [pc, #72]	; (8004074 <set_time+0x7c>)
 800402c:	f005 fa61 	bl	80094f2 <HAL_RTC_SetTime>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <set_time+0x42>
	  {
	    Error_Handler();
 8004036:	f002 f867 	bl	8006108 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800403a:	2303      	movs	r3, #3
 800403c:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JUNE;
 800403e:	2306      	movs	r3, #6
 8004040:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x22;
 8004042:	2322      	movs	r3, #34	; 0x22
 8004044:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x22;
 8004046:	2322      	movs	r3, #34	; 0x22
 8004048:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800404a:	463b      	mov	r3, r7
 800404c:	2201      	movs	r2, #1
 800404e:	4619      	mov	r1, r3
 8004050:	4808      	ldr	r0, [pc, #32]	; (8004074 <set_time+0x7c>)
 8004052:	f005 fb69 	bl	8009728 <HAL_RTC_SetDate>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <set_time+0x68>
	  {
	    Error_Handler();
 800405c:	f002 f854 	bl	8006108 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 8004060:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004064:	2101      	movs	r1, #1
 8004066:	4803      	ldr	r0, [pc, #12]	; (8004074 <set_time+0x7c>)
 8004068:	f005 fce4 	bl	8009a34 <HAL_RTCEx_BKUPWrite>

	  /* USER CODE END RTC_Init 2 */
}
 800406c:	bf00      	nop
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	200002cc 	.word	0x200002cc

08004078 <get_time>:


void get_time(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800407e:	463b      	mov	r3, r7
 8004080:	2200      	movs	r2, #0
 8004082:	4619      	mov	r1, r3
 8004084:	4817      	ldr	r0, [pc, #92]	; (80040e4 <get_time+0x6c>)
 8004086:	f005 faf1 	bl	800966c <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800408a:	f107 0314 	add.w	r3, r7, #20
 800408e:	2200      	movs	r2, #0
 8004090:	4619      	mov	r1, r3
 8004092:	4814      	ldr	r0, [pc, #80]	; (80040e4 <get_time+0x6c>)
 8004094:	f005 fbef 	bl	8009876 <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf(buffer,"Time is: %02d:%02d:%02d\r\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8004098:	783b      	ldrb	r3, [r7, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	4619      	mov	r1, r3
 80040a0:	78bb      	ldrb	r3, [r7, #2]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	460b      	mov	r3, r1
 80040a6:	4910      	ldr	r1, [pc, #64]	; (80040e8 <get_time+0x70>)
 80040a8:	4810      	ldr	r0, [pc, #64]	; (80040ec <get_time+0x74>)
 80040aa:	f00c ff2f 	bl	8010f0c <siprintf>
 send_uart(buffer);
 80040ae:	480f      	ldr	r0, [pc, #60]	; (80040ec <get_time+0x74>)
 80040b0:	f7ff fddc 	bl	8003c6c <send_uart>
 clear_buffer();
 80040b4:	f7ff fdbe 	bl	8003c34 <clear_buffer>
/* Display date Format: dd-mm-yy */
 sprintf(buffer,"Date is : %02d-%02d-%2d\r\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 80040b8:	7dbb      	ldrb	r3, [r7, #22]
 80040ba:	461a      	mov	r2, r3
 80040bc:	7d7b      	ldrb	r3, [r7, #21]
 80040be:	4619      	mov	r1, r3
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	460b      	mov	r3, r1
 80040ca:	4909      	ldr	r1, [pc, #36]	; (80040f0 <get_time+0x78>)
 80040cc:	4807      	ldr	r0, [pc, #28]	; (80040ec <get_time+0x74>)
 80040ce:	f00c ff1d 	bl	8010f0c <siprintf>
 send_uart(buffer);
 80040d2:	4806      	ldr	r0, [pc, #24]	; (80040ec <get_time+0x74>)
 80040d4:	f7ff fdca 	bl	8003c6c <send_uart>
 clear_buffer();
 80040d8:	f7ff fdac 	bl	8003c34 <clear_buffer>
}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200002cc 	.word	0x200002cc
 80040e8:	0801329c 	.word	0x0801329c
 80040ec:	200024b4 	.word	0x200024b4
 80040f0:	080132b8 	.word	0x080132b8

080040f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //interrupt callback function for Charger detect
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI5 (PB5 Pin)
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	2b20      	cmp	r3, #32
 8004102:	d119      	bne.n	8004138 <HAL_GPIO_EXTI_Callback+0x44>
    {
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8004104:	2120      	movs	r1, #32
 8004106:	480e      	ldr	r0, [pc, #56]	; (8004140 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004108:	f003 fccc 	bl	8007aa4 <HAL_GPIO_ReadPin>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_GPIO_EXTI_Callback+0x32>
    	{
    		sprintf(buffer, "Charger detected\r\n");
 8004112:	490c      	ldr	r1, [pc, #48]	; (8004144 <HAL_GPIO_EXTI_Callback+0x50>)
 8004114:	480c      	ldr	r0, [pc, #48]	; (8004148 <HAL_GPIO_EXTI_Callback+0x54>)
 8004116:	f00c fef9 	bl	8010f0c <siprintf>
    		send_uart(buffer);
 800411a:	480b      	ldr	r0, [pc, #44]	; (8004148 <HAL_GPIO_EXTI_Callback+0x54>)
 800411c:	f7ff fda6 	bl	8003c6c <send_uart>
    		clear_buffer();
 8004120:	f7ff fd88 	bl	8003c34 <clear_buffer>
    		sprintf(buffer, "Charger has been disconnected\r\n");
    		send_uart(buffer);
    		clear_buffer();
    	}
    }
}
 8004124:	e008      	b.n	8004138 <HAL_GPIO_EXTI_Callback+0x44>
    		sprintf(buffer, "Charger has been disconnected\r\n");
 8004126:	4909      	ldr	r1, [pc, #36]	; (800414c <HAL_GPIO_EXTI_Callback+0x58>)
 8004128:	4807      	ldr	r0, [pc, #28]	; (8004148 <HAL_GPIO_EXTI_Callback+0x54>)
 800412a:	f00c feef 	bl	8010f0c <siprintf>
    		send_uart(buffer);
 800412e:	4806      	ldr	r0, [pc, #24]	; (8004148 <HAL_GPIO_EXTI_Callback+0x54>)
 8004130:	f7ff fd9c 	bl	8003c6c <send_uart>
    		clear_buffer();
 8004134:	f7ff fd7e 	bl	8003c34 <clear_buffer>
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	48000400 	.word	0x48000400
 8004144:	080132d4 	.word	0x080132d4
 8004148:	200024b4 	.word	0x200024b4
 800414c:	080132e8 	.word	0x080132e8

08004150 <sd_init>:
		HAL_Delay(0.01);
	}
}

void sd_init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	  //mount SD card and check SD card mounting status
	  fresult = f_mount(&fs, "/", 1);
 8004154:	2201      	movs	r2, #1
 8004156:	49b0      	ldr	r1, [pc, #704]	; (8004418 <sd_init+0x2c8>)
 8004158:	48b0      	ldr	r0, [pc, #704]	; (800441c <sd_init+0x2cc>)
 800415a:	f00a f967 	bl	800e42c <f_mount>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	4baf      	ldr	r3, [pc, #700]	; (8004420 <sd_init+0x2d0>)
 8004164:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK)
 8004166:	4bae      	ldr	r3, [pc, #696]	; (8004420 <sd_init+0x2d0>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <sd_init+0x26>
	  	{
	  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 800416e:	48ad      	ldr	r0, [pc, #692]	; (8004424 <sd_init+0x2d4>)
 8004170:	f7ff fd7c 	bl	8003c6c <send_uart>
 8004174:	e002      	b.n	800417c <sd_init+0x2c>

	  	}
	  	else
	  	{
	  		send_uart("SD CARD mounted successfully...\r\n");
 8004176:	48ac      	ldr	r0, [pc, #688]	; (8004428 <sd_init+0x2d8>)
 8004178:	f7ff fd78 	bl	8003c6c <send_uart>
	  	}

	  	/*************** Card capacity details ********************/

	  	/* Check free space */
	  	f_getfree("", &fre_clust, &pfs);
 800417c:	4aab      	ldr	r2, [pc, #684]	; (800442c <sd_init+0x2dc>)
 800417e:	49ac      	ldr	r1, [pc, #688]	; (8004430 <sd_init+0x2e0>)
 8004180:	48ac      	ldr	r0, [pc, #688]	; (8004434 <sd_init+0x2e4>)
 8004182:	f00b fcc0 	bl	800fb06 <f_getfree>

	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8004186:	4ba9      	ldr	r3, [pc, #676]	; (800442c <sd_init+0x2dc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	3b02      	subs	r3, #2
 8004192:	4aa6      	ldr	r2, [pc, #664]	; (800442c <sd_init+0x2dc>)
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800419a:	7892      	ldrb	r2, [r2, #2]
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc f9af 	bl	8000504 <__aeabi_ui2d>
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	4ba3      	ldr	r3, [pc, #652]	; (8004438 <sd_init+0x2e8>)
 80041ac:	f7fc fa24 	bl	80005f8 <__aeabi_dmul>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7fc fcf6 	bl	8000ba8 <__aeabi_d2uiz>
 80041bc:	4603      	mov	r3, r0
 80041be:	4a9f      	ldr	r2, [pc, #636]	; (800443c <sd_init+0x2ec>)
 80041c0:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 80041c2:	4b9e      	ldr	r3, [pc, #632]	; (800443c <sd_init+0x2ec>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	499d      	ldr	r1, [pc, #628]	; (8004440 <sd_init+0x2f0>)
 80041ca:	489e      	ldr	r0, [pc, #632]	; (8004444 <sd_init+0x2f4>)
 80041cc:	f00c fe9e 	bl	8010f0c <siprintf>
	  	send_uart(buffer);
 80041d0:	489c      	ldr	r0, [pc, #624]	; (8004444 <sd_init+0x2f4>)
 80041d2:	f7ff fd4b 	bl	8003c6c <send_uart>
	  	clear_buffer();
 80041d6:	f7ff fd2d 	bl	8003c34 <clear_buffer>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80041da:	4b94      	ldr	r3, [pc, #592]	; (800442c <sd_init+0x2dc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	789b      	ldrb	r3, [r3, #2]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b92      	ldr	r3, [pc, #584]	; (8004430 <sd_init+0x2e0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fc f988 	bl	8000504 <__aeabi_ui2d>
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	4b8f      	ldr	r3, [pc, #572]	; (8004438 <sd_init+0x2e8>)
 80041fa:	f7fc f9fd 	bl	80005f8 <__aeabi_dmul>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	f7fc fccf 	bl	8000ba8 <__aeabi_d2uiz>
 800420a:	4603      	mov	r3, r0
 800420c:	4a8e      	ldr	r2, [pc, #568]	; (8004448 <sd_init+0x2f8>)
 800420e:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 8004210:	4b8d      	ldr	r3, [pc, #564]	; (8004448 <sd_init+0x2f8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	498d      	ldr	r1, [pc, #564]	; (800444c <sd_init+0x2fc>)
 8004218:	488a      	ldr	r0, [pc, #552]	; (8004444 <sd_init+0x2f4>)
 800421a:	f00c fe77 	bl	8010f0c <siprintf>
	  	send_uart(buffer);
 800421e:	4889      	ldr	r0, [pc, #548]	; (8004444 <sd_init+0x2f4>)
 8004220:	f7ff fd24 	bl	8003c6c <send_uart>
	  	clear_buffer();
 8004224:	f7ff fd06 	bl	8003c34 <clear_buffer>


	  	/************* The following operation is using PUTS and GETS *********************/

	  	/* Open file to write/ create a file if it doesn't exist */
	    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8004228:	2213      	movs	r2, #19
 800422a:	4989      	ldr	r1, [pc, #548]	; (8004450 <sd_init+0x300>)
 800422c:	4889      	ldr	r0, [pc, #548]	; (8004454 <sd_init+0x304>)
 800422e:	f00a f947 	bl	800e4c0 <f_open>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	4b7a      	ldr	r3, [pc, #488]	; (8004420 <sd_init+0x2d0>)
 8004238:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 800423a:	4986      	ldr	r1, [pc, #536]	; (8004454 <sd_init+0x304>)
 800423c:	4886      	ldr	r0, [pc, #536]	; (8004458 <sd_init+0x308>)
 800423e:	f00b fdb6 	bl	800fdae <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 8004242:	4884      	ldr	r0, [pc, #528]	; (8004454 <sd_init+0x304>)
 8004244:	f00b f943 	bl	800f4ce <f_close>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	4b74      	ldr	r3, [pc, #464]	; (8004420 <sd_init+0x2d0>)
 800424e:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 8004250:	4b73      	ldr	r3, [pc, #460]	; (8004420 <sd_init+0x2d0>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <sd_init+0x10e>
	  	{
	  		send_uart ("File1.txt created and the data is written \r\n");
 8004258:	4880      	ldr	r0, [pc, #512]	; (800445c <sd_init+0x30c>)
 800425a:	f7ff fd07 	bl	8003c6c <send_uart>
	  	}

	  	/* Open file to read */
	  	fresult = f_open(&fil, "file1.txt", FA_READ);
 800425e:	2201      	movs	r2, #1
 8004260:	497b      	ldr	r1, [pc, #492]	; (8004450 <sd_init+0x300>)
 8004262:	487c      	ldr	r0, [pc, #496]	; (8004454 <sd_init+0x304>)
 8004264:	f00a f92c 	bl	800e4c0 <f_open>
 8004268:	4603      	mov	r3, r0
 800426a:	461a      	mov	r2, r3
 800426c:	4b6c      	ldr	r3, [pc, #432]	; (8004420 <sd_init+0x2d0>)
 800426e:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	f_gets(buffer, f_size(&fil), &fil);
 8004270:	4b78      	ldr	r3, [pc, #480]	; (8004454 <sd_init+0x304>)
 8004272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a76      	ldr	r2, [pc, #472]	; (8004454 <sd_init+0x304>)
 800427a:	4619      	mov	r1, r3
 800427c:	4871      	ldr	r0, [pc, #452]	; (8004444 <sd_init+0x2f4>)
 800427e:	f00b fd1c 	bl	800fcba <f_gets>

	  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 8004282:	4877      	ldr	r0, [pc, #476]	; (8004460 <sd_init+0x310>)
 8004284:	f7ff fcf2 	bl	8003c6c <send_uart>
	  	send_uart(buffer);
 8004288:	486e      	ldr	r0, [pc, #440]	; (8004444 <sd_init+0x2f4>)
 800428a:	f7ff fcef 	bl	8003c6c <send_uart>
	  	send_uart("\r\n");
 800428e:	4875      	ldr	r0, [pc, #468]	; (8004464 <sd_init+0x314>)
 8004290:	f7ff fcec 	bl	8003c6c <send_uart>
	  	/* Close file */
	  	f_close(&fil);
 8004294:	486f      	ldr	r0, [pc, #444]	; (8004454 <sd_init+0x304>)
 8004296:	f00b f91a 	bl	800f4ce <f_close>
	  	clear_buffer();
 800429a:	f7ff fccb 	bl	8003c34 <clear_buffer>
	  	/**************** The following operation is using f_write and f_read **************************/

	  	/* Create second file with read write access and open it */
	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800429e:	220a      	movs	r2, #10
 80042a0:	4971      	ldr	r1, [pc, #452]	; (8004468 <sd_init+0x318>)
 80042a2:	486c      	ldr	r0, [pc, #432]	; (8004454 <sd_init+0x304>)
 80042a4:	f00a f90c 	bl	800e4c0 <f_open>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b5c      	ldr	r3, [pc, #368]	; (8004420 <sd_init+0x2d0>)
 80042ae:	701a      	strb	r2, [r3, #0]

	  	/* Writing text */
	  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 80042b0:	4a64      	ldr	r2, [pc, #400]	; (8004444 <sd_init+0x2f4>)
 80042b2:	4b6e      	ldr	r3, [pc, #440]	; (800446c <sd_init+0x31c>)
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	2351      	movs	r3, #81	; 0x51
 80042ba:	461a      	mov	r2, r3
 80042bc:	f00c f8b6 	bl	801042c <memcpy>

	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80042c0:	4860      	ldr	r0, [pc, #384]	; (8004444 <sd_init+0x2f4>)
 80042c2:	f7ff fc9f 	bl	8003c04 <bufsize>
 80042c6:	4603      	mov	r3, r0
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b69      	ldr	r3, [pc, #420]	; (8004470 <sd_init+0x320>)
 80042cc:	495d      	ldr	r1, [pc, #372]	; (8004444 <sd_init+0x2f4>)
 80042ce:	4861      	ldr	r0, [pc, #388]	; (8004454 <sd_init+0x304>)
 80042d0:	f00a fdf6 	bl	800eec0 <f_write>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b51      	ldr	r3, [pc, #324]	; (8004420 <sd_init+0x2d0>)
 80042da:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 80042dc:	4b50      	ldr	r3, [pc, #320]	; (8004420 <sd_init+0x2d0>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <sd_init+0x19a>
	  	{
	  		send_uart ("File2.txt created and the data is written \r\n");
 80042e4:	4863      	ldr	r0, [pc, #396]	; (8004474 <sd_init+0x324>)
 80042e6:	f7ff fcc1 	bl	8003c6c <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 80042ea:	485a      	ldr	r0, [pc, #360]	; (8004454 <sd_init+0x304>)
 80042ec:	f00b f8ef 	bl	800f4ce <f_close>
	  	// clearing buffer to show that result obtained is from the file
	  	clear_buffer();
 80042f0:	f7ff fca0 	bl	8003c34 <clear_buffer>
	  	/* Open second file to read */
	  	fresult = f_open(&fil, "file2.txt", FA_READ);
 80042f4:	2201      	movs	r2, #1
 80042f6:	495c      	ldr	r1, [pc, #368]	; (8004468 <sd_init+0x318>)
 80042f8:	4856      	ldr	r0, [pc, #344]	; (8004454 <sd_init+0x304>)
 80042fa:	f00a f8e1 	bl	800e4c0 <f_open>
 80042fe:	4603      	mov	r3, r0
 8004300:	461a      	mov	r2, r3
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <sd_init+0x2d0>)
 8004304:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK){
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <sd_init+0x2d0>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <sd_init+0x1c4>
	  		send_uart ("file2.txt is open and the data is shown below\r\n");
 800430e:	485a      	ldr	r0, [pc, #360]	; (8004478 <sd_init+0x328>)
 8004310:	f7ff fcac 	bl	8003c6c <send_uart>
	  	}

	  	/* Read data from the file
	  	 * Please see the function details for the arguments */
	  	f_read (&fil, buffer, f_size(&fil), &br);
 8004314:	4b4f      	ldr	r3, [pc, #316]	; (8004454 <sd_init+0x304>)
 8004316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	4b57      	ldr	r3, [pc, #348]	; (800447c <sd_init+0x32c>)
 800431e:	4949      	ldr	r1, [pc, #292]	; (8004444 <sd_init+0x2f4>)
 8004320:	484c      	ldr	r0, [pc, #304]	; (8004454 <sd_init+0x304>)
 8004322:	f00a fbe5 	bl	800eaf0 <f_read>
	  	send_uart(buffer);
 8004326:	4847      	ldr	r0, [pc, #284]	; (8004444 <sd_init+0x2f4>)
 8004328:	f7ff fca0 	bl	8003c6c <send_uart>
	  	send_uart("\r\n");
 800432c:	484d      	ldr	r0, [pc, #308]	; (8004464 <sd_init+0x314>)
 800432e:	f7ff fc9d 	bl	8003c6c <send_uart>

	  	/* Close file */
	  	f_close(&fil);
 8004332:	4848      	ldr	r0, [pc, #288]	; (8004454 <sd_init+0x304>)
 8004334:	f00b f8cb 	bl	800f4ce <f_close>

	  	clear_buffer();
 8004338:	f7ff fc7c 	bl	8003c34 <clear_buffer>


	  	/*********************UPDATING an existing file ***************************/

	  	/* Open the file with write access */
	  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800433c:	2203      	movs	r2, #3
 800433e:	494a      	ldr	r1, [pc, #296]	; (8004468 <sd_init+0x318>)
 8004340:	4844      	ldr	r0, [pc, #272]	; (8004454 <sd_init+0x304>)
 8004342:	f00a f8bd 	bl	800e4c0 <f_open>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	4b35      	ldr	r3, [pc, #212]	; (8004420 <sd_init+0x2d0>)
 800434c:	701a      	strb	r2, [r3, #0]

	  	/* Move to offset to the end of the file */
	  	fresult = f_lseek(&fil, f_size(&fil));
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <sd_init+0x304>)
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4619      	mov	r1, r3
 8004358:	483e      	ldr	r0, [pc, #248]	; (8004454 <sd_init+0x304>)
 800435a:	f00b f8e3 	bl	800f524 <f_lseek>
 800435e:	4603      	mov	r3, r0
 8004360:	461a      	mov	r2, r3
 8004362:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <sd_init+0x2d0>)
 8004364:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 8004366:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <sd_init+0x2d0>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <sd_init+0x224>
	  	{
	  		send_uart ("About to update the file2.txt\r\n");
 800436e:	4844      	ldr	r0, [pc, #272]	; (8004480 <sd_init+0x330>)
 8004370:	f7ff fc7c 	bl	8003c6c <send_uart>
	  	}

	  	/* write the string to the file */
	  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8004374:	4937      	ldr	r1, [pc, #220]	; (8004454 <sd_init+0x304>)
 8004376:	4843      	ldr	r0, [pc, #268]	; (8004484 <sd_init+0x334>)
 8004378:	f00b fd19 	bl	800fdae <f_puts>
 800437c:	4603      	mov	r3, r0
 800437e:	b2da      	uxtb	r2, r3
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <sd_init+0x2d0>)
 8004382:	701a      	strb	r2, [r3, #0]
	  	f_close (&fil);
 8004384:	4833      	ldr	r0, [pc, #204]	; (8004454 <sd_init+0x304>)
 8004386:	f00b f8a2 	bl	800f4ce <f_close>
	  	clear_buffer();
 800438a:	f7ff fc53 	bl	8003c34 <clear_buffer>

	  	/* Open to read the file */
	  	fresult = f_open (&fil, "file2.txt", FA_READ);
 800438e:	2201      	movs	r2, #1
 8004390:	4935      	ldr	r1, [pc, #212]	; (8004468 <sd_init+0x318>)
 8004392:	4830      	ldr	r0, [pc, #192]	; (8004454 <sd_init+0x304>)
 8004394:	f00a f894 	bl	800e4c0 <f_open>
 8004398:	4603      	mov	r3, r0
 800439a:	461a      	mov	r2, r3
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <sd_init+0x2d0>)
 800439e:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80043a0:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <sd_init+0x304>)
 80043a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	4b34      	ldr	r3, [pc, #208]	; (800447c <sd_init+0x32c>)
 80043aa:	4926      	ldr	r1, [pc, #152]	; (8004444 <sd_init+0x2f4>)
 80043ac:	4829      	ldr	r0, [pc, #164]	; (8004454 <sd_init+0x304>)
 80043ae:	f00a fb9f 	bl	800eaf0 <f_read>
 80043b2:	4603      	mov	r3, r0
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <sd_init+0x2d0>)
 80043b8:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 80043ba:	4b19      	ldr	r3, [pc, #100]	; (8004420 <sd_init+0x2d0>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d108      	bne.n	80043d4 <sd_init+0x284>
	  	{
	  		send_uart ("Below is the data from updated file2.txt\r\n");
 80043c2:	4831      	ldr	r0, [pc, #196]	; (8004488 <sd_init+0x338>)
 80043c4:	f7ff fc52 	bl	8003c6c <send_uart>
	  		send_uart(buffer);
 80043c8:	481e      	ldr	r0, [pc, #120]	; (8004444 <sd_init+0x2f4>)
 80043ca:	f7ff fc4f 	bl	8003c6c <send_uart>
	  		send_uart("\r\n");
 80043ce:	4825      	ldr	r0, [pc, #148]	; (8004464 <sd_init+0x314>)
 80043d0:	f7ff fc4c 	bl	8003c6c <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 80043d4:	481f      	ldr	r0, [pc, #124]	; (8004454 <sd_init+0x304>)
 80043d6:	f00b f87a 	bl	800f4ce <f_close>

	  	clear_buffer();
 80043da:	f7ff fc2b 	bl	8003c34 <clear_buffer>


	  	/*Create csv file to log random data*/
	  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80043de:	2213      	movs	r2, #19
 80043e0:	492a      	ldr	r1, [pc, #168]	; (800448c <sd_init+0x33c>)
 80043e2:	481c      	ldr	r0, [pc, #112]	; (8004454 <sd_init+0x304>)
 80043e4:	f00a f86c 	bl	800e4c0 <f_open>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <sd_init+0x2d0>)
 80043ee:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("Timer(s), Cell_Voltage_1,Cell_Voltage_2,Cell_Voltage_3,Cell_Voltage_4,Cell_Voltage_5,Cell_Voltage_6,Cell_Voltage_7,Cell_Voltage_8,Cell_Voltage_9,Cell_Voltage_10,Cell_Voltage_11,Cell_Voltage_12,Cell_Voltage_13,Cell_Voltage_14,Cell_Voltage_15,Cell_Voltage_16,Cell_Voltage_17,Cell_Voltage_18, Pack_Voltage, Pack_Current, Temperature_3, Temperature_4, Max_cell_voltage, Min_cell_voltage \r\n ", &fil);
 80043f0:	4918      	ldr	r1, [pc, #96]	; (8004454 <sd_init+0x304>)
 80043f2:	4827      	ldr	r0, [pc, #156]	; (8004490 <sd_init+0x340>)
 80043f4:	f00b fcdb 	bl	800fdae <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 80043f8:	4816      	ldr	r0, [pc, #88]	; (8004454 <sd_init+0x304>)
 80043fa:	f00b f868 	bl	800f4ce <f_close>
 80043fe:	4603      	mov	r3, r0
 8004400:	461a      	mov	r2, r3
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <sd_init+0x2d0>)
 8004404:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <sd_init+0x2d0>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <sd_init+0x2c4>
	  	{
	  		send_uart ("File3.csv created and header is written \r\n");
 800440e:	4821      	ldr	r0, [pc, #132]	; (8004494 <sd_init+0x344>)
 8004410:	f7ff fc2c 	bl	8003c6c <send_uart>
	//  	if (fresult == FR_OK)
	//  	{
	//  		send_uart ("SD CARD UNMOUNTED successfully...\r\n");
	//  	}

}
 8004414:	bf00      	nop
 8004416:	bd80      	pop	{r7, pc}
 8004418:	08013308 	.word	0x08013308
 800441c:	20000438 	.word	0x20000438
 8004420:	20002494 	.word	0x20002494
 8004424:	0801330c 	.word	0x0801330c
 8004428:	08013330 	.word	0x08013330
 800442c:	200024a4 	.word	0x200024a4
 8004430:	200024a8 	.word	0x200024a8
 8004434:	08013354 	.word	0x08013354
 8004438:	3fe00000 	.word	0x3fe00000
 800443c:	200024ac 	.word	0x200024ac
 8004440:	08013358 	.word	0x08013358
 8004444:	200024b4 	.word	0x200024b4
 8004448:	200024b0 	.word	0x200024b0
 800444c:	08013374 	.word	0x08013374
 8004450:	08013390 	.word	0x08013390
 8004454:	20001468 	.word	0x20001468
 8004458:	0801339c 	.word	0x0801339c
 800445c:	080133e0 	.word	0x080133e0
 8004460:	08013410 	.word	0x08013410
 8004464:	08013450 	.word	0x08013450
 8004468:	08013454 	.word	0x08013454
 800446c:	08013460 	.word	0x08013460
 8004470:	2000249c 	.word	0x2000249c
 8004474:	080134b4 	.word	0x080134b4
 8004478:	080134e4 	.word	0x080134e4
 800447c:	20002498 	.word	0x20002498
 8004480:	08013514 	.word	0x08013514
 8004484:	08013534 	.word	0x08013534
 8004488:	08013568 	.word	0x08013568
 800448c:	08013210 	.word	0x08013210
 8004490:	08013594 	.word	0x08013594
 8004494:	08013718 	.word	0x08013718

08004498 <CellMonitorsArrayTranslate>:

void CellMonitorsArrayTranslate(void)
{
 8004498:	b490      	push	{r4, r7}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
	uint8_t individualCellPointer = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	71fb      	strb	r3, [r7, #7]

  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 80044a2:	2300      	movs	r3, #0
 80044a4:	71bb      	strb	r3, [r7, #6]
 80044a6:	e048      	b.n	800453a <CellMonitorsArrayTranslate+0xa2>
		if((modulePointer+1) % (cellMonitorICCount/1)==0 && modulePointer != 0)
 80044a8:	79bb      	ldrb	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d021      	beq.n	80044f2 <CellMonitorsArrayTranslate+0x5a>
		{ // If end of series string, use lastICNoOfCells instead of noOfCellsPerModule
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	717b      	strb	r3, [r7, #5]
 80044b2:	e01a      	b.n	80044ea <CellMonitorsArrayTranslate+0x52>
			{
				cellVoltagesIndividual[individualCellPointer].cellVoltage = cellModuleVoltages[modulePointer][modulePointerCell];
 80044b4:	79ba      	ldrb	r2, [r7, #6]
 80044b6:	7978      	ldrb	r0, [r7, #5]
 80044b8:	79f9      	ldrb	r1, [r7, #7]
 80044ba:	4c24      	ldr	r4, [pc, #144]	; (800454c <CellMonitorsArrayTranslate+0xb4>)
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4413      	add	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4403      	add	r3, r0
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4423      	add	r3, r4
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4820      	ldr	r0, [pc, #128]	; (8004550 <CellMonitorsArrayTranslate+0xb8>)
 80044ce:	00cb      	lsls	r3, r1, #3
 80044d0:	4403      	add	r3, r0
 80044d2:	601a      	str	r2, [r3, #0]
				cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 80044d4:	79fa      	ldrb	r2, [r7, #7]
 80044d6:	1c53      	adds	r3, r2, #1
 80044d8:	71fb      	strb	r3, [r7, #7]
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	491c      	ldr	r1, [pc, #112]	; (8004550 <CellMonitorsArrayTranslate+0xb8>)
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	711a      	strb	r2, [r3, #4]
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++)
 80044e4:	797b      	ldrb	r3, [r7, #5]
 80044e6:	3301      	adds	r3, #1
 80044e8:	717b      	strb	r3, [r7, #5]
 80044ea:	797b      	ldrb	r3, [r7, #5]
 80044ec:	2b11      	cmp	r3, #17
 80044ee:	d9e1      	bls.n	80044b4 <CellMonitorsArrayTranslate+0x1c>
 80044f0:	e020      	b.n	8004534 <CellMonitorsArrayTranslate+0x9c>
			}
		}
		else
		{ // use noOfCellsPerModule as usually
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++) {
 80044f2:	2300      	movs	r3, #0
 80044f4:	713b      	strb	r3, [r7, #4]
 80044f6:	e01a      	b.n	800452e <CellMonitorsArrayTranslate+0x96>
				cellVoltagesIndividual[individualCellPointer].cellVoltage = cellModuleVoltages[modulePointer][modulePointerCell];
 80044f8:	79ba      	ldrb	r2, [r7, #6]
 80044fa:	7938      	ldrb	r0, [r7, #4]
 80044fc:	79f9      	ldrb	r1, [r7, #7]
 80044fe:	4c13      	ldr	r4, [pc, #76]	; (800454c <CellMonitorsArrayTranslate+0xb4>)
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4403      	add	r3, r0
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4423      	add	r3, r4
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	480f      	ldr	r0, [pc, #60]	; (8004550 <CellMonitorsArrayTranslate+0xb8>)
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4403      	add	r3, r0
 8004516:	601a      	str	r2, [r3, #0]
				cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 8004518:	79fa      	ldrb	r2, [r7, #7]
 800451a:	1c53      	adds	r3, r2, #1
 800451c:	71fb      	strb	r3, [r7, #7]
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	490b      	ldr	r1, [pc, #44]	; (8004550 <CellMonitorsArrayTranslate+0xb8>)
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	711a      	strb	r2, [r3, #4]
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++) {
 8004528:	793b      	ldrb	r3, [r7, #4]
 800452a:	3301      	adds	r3, #1
 800452c:	713b      	strb	r3, [r7, #4]
 800452e:	793b      	ldrb	r3, [r7, #4]
 8004530:	2b11      	cmp	r3, #17
 8004532:	d9e1      	bls.n	80044f8 <CellMonitorsArrayTranslate+0x60>
  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 8004534:	79bb      	ldrb	r3, [r7, #6]
 8004536:	3301      	adds	r3, #1
 8004538:	71bb      	strb	r3, [r7, #6]
 800453a:	79bb      	ldrb	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0b3      	beq.n	80044a8 <CellMonitorsArrayTranslate+0x10>
			}
		};
	}
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bc90      	pop	{r4, r7}
 800454a:	4770      	bx	lr
 800454c:	20002914 	.word	0x20002914
 8004550:	20002988 	.word	0x20002988

08004554 <AuxMonitorsArrayTranslate>:

void AuxMonitorsArrayTranslate(void) {
 8004554:	b490      	push	{r4, r7}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
	uint8_t individualAuxPointer = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	71fb      	strb	r3, [r7, #7]

  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 800455e:	2300      	movs	r3, #0
 8004560:	71bb      	strb	r3, [r7, #6]
 8004562:	e03e      	b.n	80045e2 <AuxMonitorsArrayTranslate+0x8e>
	  for(uint8_t modulePointerAux = 0;modulePointerAux < noOfTempSensorPerModule; modulePointerAux++) {
 8004564:	2300      	movs	r3, #0
 8004566:	717b      	strb	r3, [r7, #5]
 8004568:	e035      	b.n	80045d6 <AuxMonitorsArrayTranslate+0x82>
			if(modulePointerAux < 5)
 800456a:	797b      	ldrb	r3, [r7, #5]
 800456c:	2b04      	cmp	r3, #4
 800456e:	d817      	bhi.n	80045a0 <AuxMonitorsArrayTranslate+0x4c>
			{
				auxVoltagesIndividual[individualAuxPointer].auxVoltage = auxModuleVoltages[modulePointer][modulePointerAux];
 8004570:	79ba      	ldrb	r2, [r7, #6]
 8004572:	7978      	ldrb	r0, [r7, #5]
 8004574:	79f9      	ldrb	r1, [r7, #7]
 8004576:	4c1f      	ldr	r4, [pc, #124]	; (80045f4 <AuxMonitorsArrayTranslate+0xa0>)
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	4403      	add	r3, r0
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4423      	add	r3, r4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	481c      	ldr	r0, [pc, #112]	; (80045f8 <AuxMonitorsArrayTranslate+0xa4>)
 8004588:	00cb      	lsls	r3, r1, #3
 800458a:	4403      	add	r3, r0
 800458c:	601a      	str	r2, [r3, #0]
				auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 800458e:	79fa      	ldrb	r2, [r7, #7]
 8004590:	1c53      	adds	r3, r2, #1
 8004592:	71fb      	strb	r3, [r7, #7]
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	4918      	ldr	r1, [pc, #96]	; (80045f8 <AuxMonitorsArrayTranslate+0xa4>)
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	440b      	add	r3, r1
 800459c:	711a      	strb	r2, [r3, #4]
 800459e:	e017      	b.n	80045d0 <AuxMonitorsArrayTranslate+0x7c>
			}
			else
			{ // when above 5, remove reference voltage measurement from Aux register group B : AVBR4 & AVBR5 for LTC6812 & LTC6813
				auxVoltagesIndividual[individualAuxPointer].auxVoltage = auxModuleVoltages[modulePointer][modulePointerAux+1];
 80045a0:	79ba      	ldrb	r2, [r7, #6]
 80045a2:	797b      	ldrb	r3, [r7, #5]
 80045a4:	1c58      	adds	r0, r3, #1
 80045a6:	79f9      	ldrb	r1, [r7, #7]
 80045a8:	4c12      	ldr	r4, [pc, #72]	; (80045f4 <AuxMonitorsArrayTranslate+0xa0>)
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4413      	add	r3, r2
 80045b0:	4403      	add	r3, r0
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4423      	add	r3, r4
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	480f      	ldr	r0, [pc, #60]	; (80045f8 <AuxMonitorsArrayTranslate+0xa4>)
 80045ba:	00cb      	lsls	r3, r1, #3
 80045bc:	4403      	add	r3, r0
 80045be:	601a      	str	r2, [r3, #0]
				auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 80045c0:	79fa      	ldrb	r2, [r7, #7]
 80045c2:	1c53      	adds	r3, r2, #1
 80045c4:	71fb      	strb	r3, [r7, #7]
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	490b      	ldr	r1, [pc, #44]	; (80045f8 <AuxMonitorsArrayTranslate+0xa4>)
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	440b      	add	r3, r1
 80045ce:	711a      	strb	r2, [r3, #4]
	  for(uint8_t modulePointerAux = 0;modulePointerAux < noOfTempSensorPerModule; modulePointerAux++) {
 80045d0:	797b      	ldrb	r3, [r7, #5]
 80045d2:	3301      	adds	r3, #1
 80045d4:	717b      	strb	r3, [r7, #5]
 80045d6:	797b      	ldrb	r3, [r7, #5]
 80045d8:	2b09      	cmp	r3, #9
 80045da:	d9c6      	bls.n	800456a <AuxMonitorsArrayTranslate+0x16>
  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 80045dc:	79bb      	ldrb	r3, [r7, #6]
 80045de:	3301      	adds	r3, #1
 80045e0:	71bb      	strb	r3, [r7, #6]
 80045e2:	79bb      	ldrb	r3, [r7, #6]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0bd      	beq.n	8004564 <AuxMonitorsArrayTranslate+0x10>
			}
		}
	}
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc90      	pop	{r4, r7}
 80045f2:	4770      	bx	lr
 80045f4:	2000295c 	.word	0x2000295c
 80045f8:	20002a18 	.word	0x20002a18

080045fc <calculateMaxandMinCellVoltages>:

void calculateMaxandMinCellVoltages(void)
{
 80045fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af04      	add	r7, sp, #16
	cellVoltageHigh = 0.0f;
 8004604:	4b3d      	ldr	r3, [pc, #244]	; (80046fc <calculateMaxandMinCellVoltages+0x100>)
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
	cellVoltageLow = 10.0f;
 800460c:	4b3c      	ldr	r3, [pc, #240]	; (8004700 <calculateMaxandMinCellVoltages+0x104>)
 800460e:	4a3d      	ldr	r2, [pc, #244]	; (8004704 <calculateMaxandMinCellVoltages+0x108>)
 8004610:	601a      	str	r2, [r3, #0]
	for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 8004612:	2300      	movs	r3, #0
 8004614:	71fb      	strb	r3, [r7, #7]
 8004616:	e039      	b.n	800468c <calculateMaxandMinCellVoltages+0x90>
	{
		if(cellVoltagesIndividual[cellPointer].cellVoltage > cellVoltageHigh)
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	4a3b      	ldr	r2, [pc, #236]	; (8004708 <calculateMaxandMinCellVoltages+0x10c>)
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4413      	add	r3, r2
 8004620:	ed93 7a00 	vldr	s14, [r3]
 8004624:	4b35      	ldr	r3, [pc, #212]	; (80046fc <calculateMaxandMinCellVoltages+0x100>)
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	dd06      	ble.n	8004642 <calculateMaxandMinCellVoltages+0x46>
		{
			cellVoltageHigh = cellVoltagesIndividual[cellPointer].cellVoltage;
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	4a34      	ldr	r2, [pc, #208]	; (8004708 <calculateMaxandMinCellVoltages+0x10c>)
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4413      	add	r3, r2
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2f      	ldr	r2, [pc, #188]	; (80046fc <calculateMaxandMinCellVoltages+0x100>)
 8004640:	6013      	str	r3, [r2, #0]
		}
		if(cellVoltagesIndividual[cellPointer].cellVoltage < cellVoltageLow && cellVoltagesIndividual[cellPointer].cellVoltage > 0.5f)
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	4a30      	ldr	r2, [pc, #192]	; (8004708 <calculateMaxandMinCellVoltages+0x10c>)
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	ed93 7a00 	vldr	s14, [r3]
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <calculateMaxandMinCellVoltages+0x104>)
 8004650:	edd3 7a00 	vldr	s15, [r3]
 8004654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	d513      	bpl.n	8004686 <calculateMaxandMinCellVoltages+0x8a>
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	4a29      	ldr	r2, [pc, #164]	; (8004708 <calculateMaxandMinCellVoltages+0x10c>)
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	edd3 7a00 	vldr	s15, [r3]
 800466a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800466e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	dd06      	ble.n	8004686 <calculateMaxandMinCellVoltages+0x8a>
		{
			cellVoltageLow = cellVoltagesIndividual[cellPointer].cellVoltage;
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	4a23      	ldr	r2, [pc, #140]	; (8004708 <calculateMaxandMinCellVoltages+0x10c>)
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1f      	ldr	r2, [pc, #124]	; (8004700 <calculateMaxandMinCellVoltages+0x104>)
 8004684:	6013      	str	r3, [r2, #0]
	for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	3301      	adds	r3, #1
 800468a:	71fb      	strb	r3, [r7, #7]
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2b11      	cmp	r3, #17
 8004690:	d9c2      	bls.n	8004618 <calculateMaxandMinCellVoltages+0x1c>
		}
	}
	maxImbalanceVoltage = cellVoltageHigh - cellVoltageLow;
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <calculateMaxandMinCellVoltages+0x100>)
 8004694:	ed93 7a00 	vldr	s14, [r3]
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <calculateMaxandMinCellVoltages+0x104>)
 800469a:	edd3 7a00 	vldr	s15, [r3]
 800469e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <calculateMaxandMinCellVoltages+0x110>)
 80046a4:	edc3 7a00 	vstr	s15, [r3]
	sprintf(buffer, "Max Cell Voltage = %.3f, Min Cell Voltage = %.3f , Max Imbalance Voltage = %.3f\r\n",cellVoltageHigh, cellVoltageLow, maxImbalanceVoltage);
 80046a8:	4b14      	ldr	r3, [pc, #80]	; (80046fc <calculateMaxandMinCellVoltages+0x100>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fb ff4b 	bl	8000548 <__aeabi_f2d>
 80046b2:	4680      	mov	r8, r0
 80046b4:	4689      	mov	r9, r1
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <calculateMaxandMinCellVoltages+0x104>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fb ff44 	bl	8000548 <__aeabi_f2d>
 80046c0:	4604      	mov	r4, r0
 80046c2:	460d      	mov	r5, r1
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <calculateMaxandMinCellVoltages+0x110>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fb ff3d 	bl	8000548 <__aeabi_f2d>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046d6:	e9cd 4500 	strd	r4, r5, [sp]
 80046da:	4642      	mov	r2, r8
 80046dc:	464b      	mov	r3, r9
 80046de:	490c      	ldr	r1, [pc, #48]	; (8004710 <calculateMaxandMinCellVoltages+0x114>)
 80046e0:	480c      	ldr	r0, [pc, #48]	; (8004714 <calculateMaxandMinCellVoltages+0x118>)
 80046e2:	f00c fc13 	bl	8010f0c <siprintf>
	send_uart(buffer);
 80046e6:	480b      	ldr	r0, [pc, #44]	; (8004714 <calculateMaxandMinCellVoltages+0x118>)
 80046e8:	f7ff fac0 	bl	8003c6c <send_uart>
	clear_buffer();
 80046ec:	f7ff faa2 	bl	8003c34 <clear_buffer>

}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046fa:	bf00      	nop
 80046fc:	20002b4c 	.word	0x20002b4c
 8004700:	20002b50 	.word	0x20002b50
 8004704:	41200000 	.word	0x41200000
 8004708:	20002988 	.word	0x20002988
 800470c:	20002b54 	.word	0x20002b54
 8004710:	08013744 	.word	0x08013744
 8004714:	200024b4 	.word	0x200024b4

08004718 <init_cell_asic_structure>:
}



void init_cell_asic_structure(uint8_t total_ic, cell_asic *ic)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b09a      	sub	sp, #104	; 0x68
 800471c:	af06      	add	r7, sp, #24
 800471e:	4603      	mov	r3, r0
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	71fb      	strb	r3, [r7, #7]
	/*************************************************************************
	 Set configuration register. Refer to the data sheet
	**************************************************************************/
	bool REFON = true; //!< Reference Powered Up Bit
 8004724:	2301      	movs	r3, #1
 8004726:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	bool ADCOPT = false; //!< ADC Mode option bit
 800472a:	2300      	movs	r3, #0
 800472c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	bool GPIOBITS_A[5] = {false,false,true,true,true}; //!< GPIO Pin Control // Gpio 1,2,3,4,5
 8004730:	4a8b      	ldr	r2, [pc, #556]	; (8004960 <init_cell_asic_structure+0x248>)
 8004732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800473a:	6018      	str	r0, [r3, #0]
 800473c:	3304      	adds	r3, #4
 800473e:	7019      	strb	r1, [r3, #0]
	bool GPIOBITS_B[4] = {false,false,false,false}; //!< GPIO Pin Control // Gpio 6,7,8,9
 8004740:	2300      	movs	r3, #0
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t UV= 42000; //!< Under voltage Comparison Voltage
 8004744:	f24a 4310 	movw	r3, #42000	; 0xa410
 8004748:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t OV= 28000; //!< Over voltage Comparison Voltage
 800474a:	f646 5360 	movw	r3, #28000	; 0x6d60
 800474e:	86fb      	strh	r3, [r7, #54]	; 0x36
	bool DCCBITS_A[12] = {false,false,false,false,false,false,false,false,false,false,false,false}; //!< Discharge cell switch //Dcc 1,2,3,4,5,6,7,8,9,10,11,12
 8004750:	f107 031c 	add.w	r3, r7, #28
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	609a      	str	r2, [r3, #8]
	bool DCCBITS_B[7]= {false,false,false,false,false,false,false}; //!< Discharge cell switch //Dcc 0,13,14,15
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f8c3 2003 	str.w	r2, [r3, #3]
	bool DCTOBITS[4] = {true,false,true,false}; //!< Discharge time value //Dcto 0,1,2,3  // Programed for 4 min
 8004768:	4b7e      	ldr	r3, [pc, #504]	; (8004964 <init_cell_asic_structure+0x24c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	613b      	str	r3, [r7, #16]
	/*Ensure that Dcto bits are set according to the required discharge time. Refer to the data sheet */
	bool FDRF = false; //!< Force Digital Redundancy Failure Bit
 800476e:	2300      	movs	r3, #0
 8004770:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	bool DTMEN = true; //!< Enable Discharge Timer Monitor
 8004774:	2301      	movs	r3, #1
 8004776:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	bool PSBITS[2]= {false,false}; //!< Digital Redundancy Path Selection//ps-0,1
 800477a:	2300      	movs	r3, #0
 800477c:	733b      	strb	r3, [r7, #12]
 800477e:	2300      	movs	r3, #0
 8004780:	737b      	strb	r3, [r7, #13]

	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8004782:	2300      	movs	r3, #0
 8004784:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004788:	e0de      	b.n	8004948 <init_cell_asic_structure+0x230>
	{
		for (int j =0; j<6; j++)
 800478a:	2300      	movs	r3, #0
 800478c:	64bb      	str	r3, [r7, #72]	; 0x48
 800478e:	e019      	b.n	80047c4 <init_cell_asic_structure+0xac>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8004790:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004794:	22e8      	movs	r2, #232	; 0xe8
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	441a      	add	r2, r3
 800479e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a0:	4413      	add	r3, r2
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
		  ic[current_ic].configb.tx_data[j] = 0;
 80047a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047aa:	22e8      	movs	r2, #232	; 0xe8
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	441a      	add	r2, r3
 80047b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b6:	4413      	add	r3, r2
 80047b8:	330f      	adds	r3, #15
 80047ba:	2200      	movs	r2, #0
 80047bc:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 80047be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c0:	3301      	adds	r3, #1
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	dde2      	ble.n	8004790 <init_cell_asic_structure+0x78>
		}

		LTC6813_set_cfgr(current_ic,BMS_IC,REFON,ADCOPT,GPIOBITS_A,DCCBITS_A, DCTOBITS, UV, OV);
 80047ca:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 80047ce:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80047d2:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 80047d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047d8:	9304      	str	r3, [sp, #16]
 80047da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047dc:	9303      	str	r3, [sp, #12]
 80047de:	f107 0310 	add.w	r3, r7, #16
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	f107 031c 	add.w	r3, r7, #28
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	460b      	mov	r3, r1
 80047f2:	495d      	ldr	r1, [pc, #372]	; (8004968 <init_cell_asic_structure+0x250>)
 80047f4:	f7fd ffe2 	bl	80027bc <LTC6813_set_cfgr>
		LTC6813_set_cfgrb(current_ic,BMS_IC,FDRF,DTMEN,PSBITS,GPIOBITS_B,DCCBITS_B);
 80047f8:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80047fc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004800:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 8004804:	f107 0314 	add.w	r3, r7, #20
 8004808:	9302      	str	r3, [sp, #8]
 800480a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	460b      	mov	r3, r1
 8004818:	4953      	ldr	r1, [pc, #332]	; (8004968 <init_cell_asic_structure+0x250>)
 800481a:	f7fe fa28 	bl	8002c6e <LTC6813_set_cfgrb>


		ic[current_ic].crc_count.pec_count = 0;
 800481e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004822:	22e8      	movs	r2, #232	; 0xe8
 8004824:	fb02 f303 	mul.w	r3, r2, r3
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	4413      	add	r3, r2
 800482c:	2200      	movs	r2, #0
 800482e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 8004832:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004836:	22e8      	movs	r2, #232	; 0xe8
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	4413      	add	r3, r2
 8004840:	2200      	movs	r2, #0
 8004842:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 8004846:	2300      	movs	r3, #0
 8004848:	647b      	str	r3, [r7, #68]	; 0x44
 800484a:	e00f      	b.n	800486c <init_cell_asic_structure+0x154>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 800484c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004850:	22e8      	movs	r2, #232	; 0xe8
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	441a      	add	r2, r3
 800485a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485c:	3360      	adds	r3, #96	; 0x60
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	2200      	movs	r2, #0
 8004864:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8004866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004868:	3301      	adds	r3, #1
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
 800486c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486e:	2b05      	cmp	r3, #5
 8004870:	ddec      	ble.n	800484c <init_cell_asic_structure+0x134>

		}
		for (int i=0; i<4; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	643b      	str	r3, [r7, #64]	; 0x40
 8004876:	e00e      	b.n	8004896 <init_cell_asic_structure+0x17e>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8004878:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800487c:	22e8      	movs	r2, #232	; 0xe8
 800487e:	fb02 f303 	mul.w	r3, r2, r3
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	4413      	add	r3, r2
 8004886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004888:	3268      	adds	r2, #104	; 0x68
 800488a:	2100      	movs	r1, #0
 800488c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 8004890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004892:	3301      	adds	r3, #1
 8004894:	643b      	str	r3, [r7, #64]	; 0x40
 8004896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004898:	2b03      	cmp	r3, #3
 800489a:	dded      	ble.n	8004878 <init_cell_asic_structure+0x160>
		}
		for (int i=0; i<2; i++)
 800489c:	2300      	movs	r3, #0
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a0:	e00e      	b.n	80048c0 <init_cell_asic_structure+0x1a8>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 80048a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80048a6:	22e8      	movs	r2, #232	; 0xe8
 80048a8:	fb02 f303 	mul.w	r3, r2, r3
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	4413      	add	r3, r2
 80048b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b2:	326c      	adds	r2, #108	; 0x6c
 80048b4:	2100      	movs	r1, #0
 80048b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 80048ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048bc:	3301      	adds	r3, #1
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	dded      	ble.n	80048a2 <init_cell_asic_structure+0x18a>
		}

        ic[current_ic].ic_reg.cell_channels=18;
 80048c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80048ca:	22e8      	movs	r2, #232	; 0xe8
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	4413      	add	r3, r2
 80048d4:	2212      	movs	r2, #18
 80048d6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ic[current_ic].ic_reg.stat_channels=4;
 80048da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80048de:	22e8      	movs	r2, #232	; 0xe8
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	4413      	add	r3, r2
 80048e8:	2204      	movs	r2, #4
 80048ea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        ic[current_ic].ic_reg.aux_channels=9;
 80048ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80048f2:	22e8      	movs	r2, #232	; 0xe8
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	2209      	movs	r2, #9
 80048fe:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
        ic[current_ic].ic_reg.num_cv_reg=6;
 8004902:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004906:	22e8      	movs	r2, #232	; 0xe8
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	4413      	add	r3, r2
 8004910:	2206      	movs	r2, #6
 8004912:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
        ic[current_ic].ic_reg.num_gpio_reg=4;
 8004916:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800491a:	22e8      	movs	r2, #232	; 0xe8
 800491c:	fb02 f303 	mul.w	r3, r2, r3
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	4413      	add	r3, r2
 8004924:	2204      	movs	r2, #4
 8004926:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
        ic[current_ic].ic_reg.num_stat_reg=2;
 800492a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800492e:	22e8      	movs	r2, #232	; 0xe8
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	4413      	add	r3, r2
 8004938:	2202      	movs	r2, #2
 800493a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 800493e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004942:	3301      	adds	r3, #1
 8004944:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004948:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	429a      	cmp	r2, r3
 8004950:	f4ff af1b 	bcc.w	800478a <init_cell_asic_structure+0x72>
	}

}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3750      	adds	r7, #80	; 0x50
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	08013798 	.word	0x08013798
 8004964:	080137a0 	.word	0x080137a0
 8004968:	20002a60 	.word	0x20002a60

0800496c <cellBalancingUnitTest>:


void cellBalancingUnitTest(void)
{
 800496c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004970:	b0c0      	sub	sp, #256	; 0x100
 8004972:	af22      	add	r7, sp, #136	; 0x88
	if(cellBalancingEnable)
 8004974:	4b89      	ldr	r3, [pc, #548]	; (8004b9c <cellBalancingUnitTest+0x230>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 862b 	beq.w	80055d4 <cellBalancingUnitTest+0xc68>
	{
		driverSWLTC6804WakeIC();
 800497e:	f7fd fce8 	bl	8002352 <driverSWLTC6804WakeIC>
	    LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
 8004982:	4987      	ldr	r1, [pc, #540]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 8004984:	2001      	movs	r0, #1
 8004986:	f7fd fec7 	bl	8002718 <LTC681x_clear_discharge>
	    LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 800498a:	4985      	ldr	r1, [pc, #532]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 800498c:	2001      	movs	r0, #1
 800498e:	f7fe fb64 	bl	800305a <LTC681x_wrcfg>
	    LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 8004992:	4983      	ldr	r1, [pc, #524]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 8004994:	2001      	movs	r0, #1
 8004996:	f7fe fbdf 	bl	8003158 <LTC681x_wrcfgb>

	    //Enable S1, S7 and S13 and measure C1, C7 and C13 with DCP enabled
		for(uint8_t S_pin = 1 ; S_pin < noOfTotalCells+1; S_pin += 6)
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80049a0:	e00b      	b.n	80049ba <cellBalancingUnitTest+0x4e>
		{
			LTC6813_set_discharge(S_pin,cellMonitorICCount,BMS_IC);
 80049a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80049a6:	4a7e      	ldr	r2, [pc, #504]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 80049a8:	2101      	movs	r1, #1
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd fe16 	bl	80025dc <LTC6813_set_discharge>
		for(uint8_t S_pin = 1 ; S_pin < noOfTotalCells+1; S_pin += 6)
 80049b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80049b4:	3306      	adds	r3, #6
 80049b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80049ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80049be:	2b12      	cmp	r3, #18
 80049c0:	d9ef      	bls.n	80049a2 <cellBalancingUnitTest+0x36>
		}
		LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 80049c2:	4977      	ldr	r1, [pc, #476]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 80049c4:	2001      	movs	r0, #1
 80049c6:	f7fe fb48 	bl	800305a <LTC681x_wrcfg>
		LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 80049ca:	4975      	ldr	r1, [pc, #468]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7fe fbc3 	bl	8003158 <LTC681x_wrcfgb>
		driverSWLTC6804ResetCellVoltageRegisters();
 80049d2:	f7fc faf1 	bl	8000fb8 <driverSWLTC6804ResetCellVoltageRegisters>
		driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2101      	movs	r1, #1
 80049da:	2003      	movs	r0, #3
 80049dc:	f7fc fb2e 	bl	800103c <driverSWLTC6804StartCellVoltageConversion>
		if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 80049e0:	4870      	ldr	r0, [pc, #448]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 80049e2:	f7fc fba5 	bl	8001130 <driverSWLTC6804ReadCellVoltagesArray>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80c7 	beq.w	8004b7c <cellBalancingUnitTest+0x210>
		{
			CellMonitorsArrayTranslate();
 80049ee:	f7ff fd53 	bl	8004498 <CellMonitorsArrayTranslate>
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80049f2:	4b6c      	ldr	r3, [pc, #432]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 80049f4:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fb fda6 	bl	8000548 <__aeabi_f2d>
 80049fc:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004a00:	4b68      	ldr	r3, [pc, #416]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a02:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fd9f 	bl	8000548 <__aeabi_f2d>
 8004a0a:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004a0e:	4b65      	ldr	r3, [pc, #404]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a10:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fb fd98 	bl	8000548 <__aeabi_f2d>
 8004a18:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004a1c:	4b61      	ldr	r3, [pc, #388]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fb fd91 	bl	8000548 <__aeabi_f2d>
 8004a26:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004a2a:	4b5e      	ldr	r3, [pc, #376]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a2c:	691b      	ldr	r3, [r3, #16]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fb fd8a 	bl	8000548 <__aeabi_f2d>
 8004a34:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004a38:	4b5a      	ldr	r3, [pc, #360]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a3a:	695b      	ldr	r3, [r3, #20]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb fd83 	bl	8000548 <__aeabi_f2d>
 8004a42:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004a46:	4b57      	ldr	r3, [pc, #348]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a48:	699b      	ldr	r3, [r3, #24]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fd7c 	bl	8000548 <__aeabi_f2d>
 8004a50:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004a54:	4b53      	ldr	r3, [pc, #332]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a56:	69db      	ldr	r3, [r3, #28]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fb fd75 	bl	8000548 <__aeabi_f2d>
 8004a5e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004a62:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fb fd6e 	bl	8000548 <__aeabi_f2d>
 8004a6c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004a70:	4b4c      	ldr	r3, [pc, #304]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fb fd67 	bl	8000548 <__aeabi_f2d>
 8004a7a:	e9c7 0108 	strd	r0, r1, [r7, #32]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004a7e:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fd60 	bl	8000548 <__aeabi_f2d>
 8004a88:	e9c7 0106 	strd	r0, r1, [r7, #24]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004a8c:	4b45      	ldr	r3, [pc, #276]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fd59 	bl	8000548 <__aeabi_f2d>
 8004a96:	e9c7 0104 	strd	r0, r1, [r7, #16]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004a9a:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fb fd52 	bl	8000548 <__aeabi_f2d>
 8004aa4:	e9c7 0102 	strd	r0, r1, [r7, #8]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fb fd4b 	bl	8000548 <__aeabi_f2d>
 8004ab2:	e9c7 0100 	strd	r0, r1, [r7]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004ab6:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fb fd44 	bl	8000548 <__aeabi_f2d>
 8004ac0:	4682      	mov	sl, r0
 8004ac2:	468b      	mov	fp, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004ac4:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fb fd3d 	bl	8000548 <__aeabi_f2d>
 8004ace:	4680      	mov	r8, r0
 8004ad0:	4689      	mov	r9, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004ad2:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fb fd36 	bl	8000548 <__aeabi_f2d>
 8004adc:	4604      	mov	r4, r0
 8004ade:	460d      	mov	r5, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004ae0:	4b30      	ldr	r3, [pc, #192]	; (8004ba4 <cellBalancingUnitTest+0x238>)
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
			sprintf(buffer,"Enabled S1, S7 and S13; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fb fd2f 	bl	8000548 <__aeabi_f2d>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8004af2:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8004af6:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8004afa:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8004afe:	ed97 7b00 	vldr	d7, [r7]
 8004b02:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8004b06:	ed97 7b02 	vldr	d7, [r7, #8]
 8004b0a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8004b0e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004b12:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004b16:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b1a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8004b1e:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b22:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004b26:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004b2a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004b2e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004b32:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004b36:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004b3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004b3e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004b42:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004b46:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8004b4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004b4e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8004b52:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004b56:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004b5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b5e:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8004b62:	ed8d 7b00 	vstr	d7, [sp]
 8004b66:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004b6a:	490f      	ldr	r1, [pc, #60]	; (8004ba8 <cellBalancingUnitTest+0x23c>)
 8004b6c:	480f      	ldr	r0, [pc, #60]	; (8004bac <cellBalancingUnitTest+0x240>)
 8004b6e:	f00c f9cd 	bl	8010f0c <siprintf>
			send_uart(buffer);
 8004b72:	480e      	ldr	r0, [pc, #56]	; (8004bac <cellBalancingUnitTest+0x240>)
 8004b74:	f7ff f87a 	bl	8003c6c <send_uart>
			clear_buffer();
 8004b78:	f7ff f85c 	bl	8003c34 <clear_buffer>
		}
		LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
 8004b7c:	4908      	ldr	r1, [pc, #32]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 8004b7e:	2001      	movs	r0, #1
 8004b80:	f7fd fdca 	bl	8002718 <LTC681x_clear_discharge>
	    LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 8004b84:	4906      	ldr	r1, [pc, #24]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 8004b86:	2001      	movs	r0, #1
 8004b88:	f7fe fa67 	bl	800305a <LTC681x_wrcfg>
	    LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 8004b8c:	4904      	ldr	r1, [pc, #16]	; (8004ba0 <cellBalancingUnitTest+0x234>)
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7fe fae2 	bl	8003158 <LTC681x_wrcfgb>

	    //Enable S2, S8 and S14 and measure C2, C8 and C14 with DCP enabled
		for(uint8_t S_pin = 2 ; S_pin < noOfTotalCells+1; S_pin += 6)
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004b9a:	e015      	b.n	8004bc8 <cellBalancingUnitTest+0x25c>
 8004b9c:	20002910 	.word	0x20002910
 8004ba0:	20002a60 	.word	0x20002a60
 8004ba4:	20002914 	.word	0x20002914
 8004ba8:	080137a4 	.word	0x080137a4
 8004bac:	200024b4 	.word	0x200024b4
		{
			LTC6813_set_discharge(S_pin,cellMonitorICCount,BMS_IC);
 8004bb0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004bb4:	4a7d      	ldr	r2, [pc, #500]	; (8004dac <cellBalancingUnitTest+0x440>)
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd fd0f 	bl	80025dc <LTC6813_set_discharge>
		for(uint8_t S_pin = 2 ; S_pin < noOfTotalCells+1; S_pin += 6)
 8004bbe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004bc2:	3306      	adds	r3, #6
 8004bc4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004bc8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004bcc:	2b12      	cmp	r3, #18
 8004bce:	d9ef      	bls.n	8004bb0 <cellBalancingUnitTest+0x244>
		}
		LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 8004bd0:	4976      	ldr	r1, [pc, #472]	; (8004dac <cellBalancingUnitTest+0x440>)
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f7fe fa41 	bl	800305a <LTC681x_wrcfg>
		LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 8004bd8:	4974      	ldr	r1, [pc, #464]	; (8004dac <cellBalancingUnitTest+0x440>)
 8004bda:	2001      	movs	r0, #1
 8004bdc:	f7fe fabc 	bl	8003158 <LTC681x_wrcfgb>
		driverSWLTC6804ResetCellVoltageRegisters();
 8004be0:	f7fc f9ea 	bl	8000fb8 <driverSWLTC6804ResetCellVoltageRegisters>
		driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
 8004be4:	2200      	movs	r2, #0
 8004be6:	2101      	movs	r1, #1
 8004be8:	2003      	movs	r0, #3
 8004bea:	f7fc fa27 	bl	800103c <driverSWLTC6804StartCellVoltageConversion>
		if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 8004bee:	4870      	ldr	r0, [pc, #448]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004bf0:	f7fc fa9e 	bl	8001130 <driverSWLTC6804ReadCellVoltagesArray>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80c7 	beq.w	8004d8a <cellBalancingUnitTest+0x41e>
		{
			CellMonitorsArrayTranslate();
 8004bfc:	f7ff fc4c 	bl	8004498 <CellMonitorsArrayTranslate>
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004c00:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c02:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fc9f 	bl	8000548 <__aeabi_f2d>
 8004c0a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004c0e:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c10:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fb fc98 	bl	8000548 <__aeabi_f2d>
 8004c18:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004c1c:	4b64      	ldr	r3, [pc, #400]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fb fc91 	bl	8000548 <__aeabi_f2d>
 8004c26:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004c2a:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fc8a 	bl	8000548 <__aeabi_f2d>
 8004c34:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004c38:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c3a:	691b      	ldr	r3, [r3, #16]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fb fc83 	bl	8000548 <__aeabi_f2d>
 8004c42:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004c46:	4b5a      	ldr	r3, [pc, #360]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c48:	695b      	ldr	r3, [r3, #20]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fc7c 	bl	8000548 <__aeabi_f2d>
 8004c50:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004c54:	4b56      	ldr	r3, [pc, #344]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c56:	699b      	ldr	r3, [r3, #24]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fc75 	bl	8000548 <__aeabi_f2d>
 8004c5e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004c62:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c64:	69db      	ldr	r3, [r3, #28]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fb fc6e 	bl	8000548 <__aeabi_f2d>
 8004c6c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004c70:	4b4f      	ldr	r3, [pc, #316]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c72:	6a1b      	ldr	r3, [r3, #32]
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fb fc67 	bl	8000548 <__aeabi_f2d>
 8004c7a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004c7e:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb fc60 	bl	8000548 <__aeabi_f2d>
 8004c88:	e9c7 0108 	strd	r0, r1, [r7, #32]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004c8c:	4b48      	ldr	r3, [pc, #288]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fb fc59 	bl	8000548 <__aeabi_f2d>
 8004c96:	e9c7 0106 	strd	r0, r1, [r7, #24]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004c9a:	4b45      	ldr	r3, [pc, #276]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fb fc52 	bl	8000548 <__aeabi_f2d>
 8004ca4:	e9c7 0104 	strd	r0, r1, [r7, #16]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004ca8:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fb fc4b 	bl	8000548 <__aeabi_f2d>
 8004cb2:	e9c7 0102 	strd	r0, r1, [r7, #8]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb fc44 	bl	8000548 <__aeabi_f2d>
 8004cc0:	e9c7 0100 	strd	r0, r1, [r7]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004cc4:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb fc3d 	bl	8000548 <__aeabi_f2d>
 8004cce:	4682      	mov	sl, r0
 8004cd0:	468b      	mov	fp, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004cd2:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fb fc36 	bl	8000548 <__aeabi_f2d>
 8004cdc:	4680      	mov	r8, r0
 8004cde:	4689      	mov	r9, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004ce0:	4b33      	ldr	r3, [pc, #204]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fb fc2f 	bl	8000548 <__aeabi_f2d>
 8004cea:	4604      	mov	r4, r0
 8004cec:	460d      	mov	r5, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004cee:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <cellBalancingUnitTest+0x444>)
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
			sprintf(buffer,"Enabled S2, S8 and S14; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fb fc28 	bl	8000548 <__aeabi_f2d>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8004d00:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8004d04:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8004d08:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8004d0c:	ed97 7b00 	vldr	d7, [r7]
 8004d10:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8004d14:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d18:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8004d1c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d20:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004d24:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d28:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8004d2c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d30:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004d34:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004d38:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004d3c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004d40:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004d44:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004d48:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d4c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004d50:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004d54:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8004d58:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d5c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8004d60:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004d64:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004d68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d6c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8004d70:	ed8d 7b00 	vstr	d7, [sp]
 8004d74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004d78:	490e      	ldr	r1, [pc, #56]	; (8004db4 <cellBalancingUnitTest+0x448>)
 8004d7a:	480f      	ldr	r0, [pc, #60]	; (8004db8 <cellBalancingUnitTest+0x44c>)
 8004d7c:	f00c f8c6 	bl	8010f0c <siprintf>
			send_uart(buffer);
 8004d80:	480d      	ldr	r0, [pc, #52]	; (8004db8 <cellBalancingUnitTest+0x44c>)
 8004d82:	f7fe ff73 	bl	8003c6c <send_uart>
			clear_buffer();
 8004d86:	f7fe ff55 	bl	8003c34 <clear_buffer>
		}
		LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
 8004d8a:	4908      	ldr	r1, [pc, #32]	; (8004dac <cellBalancingUnitTest+0x440>)
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f7fd fcc3 	bl	8002718 <LTC681x_clear_discharge>
	    LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 8004d92:	4906      	ldr	r1, [pc, #24]	; (8004dac <cellBalancingUnitTest+0x440>)
 8004d94:	2001      	movs	r0, #1
 8004d96:	f7fe f960 	bl	800305a <LTC681x_wrcfg>
	    LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 8004d9a:	4904      	ldr	r1, [pc, #16]	; (8004dac <cellBalancingUnitTest+0x440>)
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f7fe f9db 	bl	8003158 <LTC681x_wrcfgb>

	    //Enable S3, S9 and S15 and measure C3, C9 and C15 with DCP enabled
		for(uint8_t S_pin = 3 ; S_pin < noOfTotalCells+1; S_pin += 6)
 8004da2:	2303      	movs	r3, #3
 8004da4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8004da8:	e014      	b.n	8004dd4 <cellBalancingUnitTest+0x468>
 8004daa:	bf00      	nop
 8004dac:	20002a60 	.word	0x20002a60
 8004db0:	20002914 	.word	0x20002914
 8004db4:	08013834 	.word	0x08013834
 8004db8:	200024b4 	.word	0x200024b4
		{
			LTC6813_set_discharge(S_pin,cellMonitorICCount,BMS_IC);
 8004dbc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8004dc0:	4a7d      	ldr	r2, [pc, #500]	; (8004fb8 <cellBalancingUnitTest+0x64c>)
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fd fc09 	bl	80025dc <LTC6813_set_discharge>
		for(uint8_t S_pin = 3 ; S_pin < noOfTotalCells+1; S_pin += 6)
 8004dca:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8004dce:	3306      	adds	r3, #6
 8004dd0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8004dd4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8004dd8:	2b12      	cmp	r3, #18
 8004dda:	d9ef      	bls.n	8004dbc <cellBalancingUnitTest+0x450>
		}
		LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 8004ddc:	4976      	ldr	r1, [pc, #472]	; (8004fb8 <cellBalancingUnitTest+0x64c>)
 8004dde:	2001      	movs	r0, #1
 8004de0:	f7fe f93b 	bl	800305a <LTC681x_wrcfg>
		LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 8004de4:	4974      	ldr	r1, [pc, #464]	; (8004fb8 <cellBalancingUnitTest+0x64c>)
 8004de6:	2001      	movs	r0, #1
 8004de8:	f7fe f9b6 	bl	8003158 <LTC681x_wrcfgb>
		driverSWLTC6804ResetCellVoltageRegisters();
 8004dec:	f7fc f8e4 	bl	8000fb8 <driverSWLTC6804ResetCellVoltageRegisters>
		driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
 8004df0:	2200      	movs	r2, #0
 8004df2:	2101      	movs	r1, #1
 8004df4:	2003      	movs	r0, #3
 8004df6:	f7fc f921 	bl	800103c <driverSWLTC6804StartCellVoltageConversion>
		if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 8004dfa:	4870      	ldr	r0, [pc, #448]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004dfc:	f7fc f998 	bl	8001130 <driverSWLTC6804ReadCellVoltagesArray>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80c7 	beq.w	8004f96 <cellBalancingUnitTest+0x62a>
		{
			CellMonitorsArrayTranslate();
 8004e08:	f7ff fb46 	bl	8004498 <CellMonitorsArrayTranslate>
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004e0c:	4b6b      	ldr	r3, [pc, #428]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fb fb99 	bl	8000548 <__aeabi_f2d>
 8004e16:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004e1a:	4b68      	ldr	r3, [pc, #416]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fb fb92 	bl	8000548 <__aeabi_f2d>
 8004e24:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004e28:	4b64      	ldr	r3, [pc, #400]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fb fb8b 	bl	8000548 <__aeabi_f2d>
 8004e32:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004e36:	4b61      	ldr	r3, [pc, #388]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e38:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb fb84 	bl	8000548 <__aeabi_f2d>
 8004e40:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004e44:	4b5d      	ldr	r3, [pc, #372]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e46:	691b      	ldr	r3, [r3, #16]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fb fb7d 	bl	8000548 <__aeabi_f2d>
 8004e4e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004e52:	4b5a      	ldr	r3, [pc, #360]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e54:	695b      	ldr	r3, [r3, #20]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fb fb76 	bl	8000548 <__aeabi_f2d>
 8004e5c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8004e60:	4b56      	ldr	r3, [pc, #344]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e62:	699b      	ldr	r3, [r3, #24]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fb fb6f 	bl	8000548 <__aeabi_f2d>
 8004e6a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004e6e:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e70:	69db      	ldr	r3, [r3, #28]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fb fb68 	bl	8000548 <__aeabi_f2d>
 8004e78:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004e7c:	4b4f      	ldr	r3, [pc, #316]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fb fb61 	bl	8000548 <__aeabi_f2d>
 8004e86:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004e8a:	4b4c      	ldr	r3, [pc, #304]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fb fb5a 	bl	8000548 <__aeabi_f2d>
 8004e94:	e9c7 0108 	strd	r0, r1, [r7, #32]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004e98:	4b48      	ldr	r3, [pc, #288]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb fb53 	bl	8000548 <__aeabi_f2d>
 8004ea2:	e9c7 0106 	strd	r0, r1, [r7, #24]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004ea6:	4b45      	ldr	r3, [pc, #276]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fb fb4c 	bl	8000548 <__aeabi_f2d>
 8004eb0:	e9c7 0104 	strd	r0, r1, [r7, #16]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8004eb4:	4b41      	ldr	r3, [pc, #260]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fb fb45 	bl	8000548 <__aeabi_f2d>
 8004ebe:	e9c7 0102 	strd	r0, r1, [r7, #8]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004ec2:	4b3e      	ldr	r3, [pc, #248]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fb fb3e 	bl	8000548 <__aeabi_f2d>
 8004ecc:	e9c7 0100 	strd	r0, r1, [r7]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004ed0:	4b3a      	ldr	r3, [pc, #232]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fb fb37 	bl	8000548 <__aeabi_f2d>
 8004eda:	4682      	mov	sl, r0
 8004edc:	468b      	mov	fp, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004ede:	4b37      	ldr	r3, [pc, #220]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fb30 	bl	8000548 <__aeabi_f2d>
 8004ee8:	4680      	mov	r8, r0
 8004eea:	4689      	mov	r9, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fb fb29 	bl	8000548 <__aeabi_f2d>
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	460d      	mov	r5, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8004efa:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <cellBalancingUnitTest+0x650>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
			sprintf(buffer,"Enabled S3, S9 and S15; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fb fb22 	bl	8000548 <__aeabi_f2d>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8004f0c:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8004f10:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8004f14:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8004f18:	ed97 7b00 	vldr	d7, [r7]
 8004f1c:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8004f20:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f24:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8004f28:	ed97 7b04 	vldr	d7, [r7, #16]
 8004f2c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004f30:	ed97 7b06 	vldr	d7, [r7, #24]
 8004f34:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8004f38:	ed97 7b08 	vldr	d7, [r7, #32]
 8004f3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f40:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004f44:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004f48:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004f4c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004f50:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004f54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004f58:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004f5c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004f60:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8004f64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004f68:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8004f6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004f70:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004f74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f78:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8004f7c:	ed8d 7b00 	vstr	d7, [sp]
 8004f80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004f84:	490e      	ldr	r1, [pc, #56]	; (8004fc0 <cellBalancingUnitTest+0x654>)
 8004f86:	480f      	ldr	r0, [pc, #60]	; (8004fc4 <cellBalancingUnitTest+0x658>)
 8004f88:	f00b ffc0 	bl	8010f0c <siprintf>
			send_uart(buffer);
 8004f8c:	480d      	ldr	r0, [pc, #52]	; (8004fc4 <cellBalancingUnitTest+0x658>)
 8004f8e:	f7fe fe6d 	bl	8003c6c <send_uart>
			clear_buffer();
 8004f92:	f7fe fe4f 	bl	8003c34 <clear_buffer>
		}
		LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
 8004f96:	4908      	ldr	r1, [pc, #32]	; (8004fb8 <cellBalancingUnitTest+0x64c>)
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f7fd fbbd 	bl	8002718 <LTC681x_clear_discharge>
	    LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 8004f9e:	4906      	ldr	r1, [pc, #24]	; (8004fb8 <cellBalancingUnitTest+0x64c>)
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	f7fe f85a 	bl	800305a <LTC681x_wrcfg>
	    LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 8004fa6:	4904      	ldr	r1, [pc, #16]	; (8004fb8 <cellBalancingUnitTest+0x64c>)
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f7fe f8d5 	bl	8003158 <LTC681x_wrcfgb>


	    //Enable S4, S10 and S16 and measure C4, C10 and C16 with DCP enabled
		for(uint8_t S_pin = 4 ; S_pin < noOfTotalCells+1; S_pin += 6)
 8004fae:	2304      	movs	r3, #4
 8004fb0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8004fb4:	e014      	b.n	8004fe0 <cellBalancingUnitTest+0x674>
 8004fb6:	bf00      	nop
 8004fb8:	20002a60 	.word	0x20002a60
 8004fbc:	20002914 	.word	0x20002914
 8004fc0:	080138c4 	.word	0x080138c4
 8004fc4:	200024b4 	.word	0x200024b4
		{
			LTC6813_set_discharge(S_pin,cellMonitorICCount,BMS_IC);
 8004fc8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004fcc:	4a7d      	ldr	r2, [pc, #500]	; (80051c4 <cellBalancingUnitTest+0x858>)
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fd fb03 	bl	80025dc <LTC6813_set_discharge>
		for(uint8_t S_pin = 4 ; S_pin < noOfTotalCells+1; S_pin += 6)
 8004fd6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004fda:	3306      	adds	r3, #6
 8004fdc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8004fe0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004fe4:	2b12      	cmp	r3, #18
 8004fe6:	d9ef      	bls.n	8004fc8 <cellBalancingUnitTest+0x65c>
		}
		LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 8004fe8:	4976      	ldr	r1, [pc, #472]	; (80051c4 <cellBalancingUnitTest+0x858>)
 8004fea:	2001      	movs	r0, #1
 8004fec:	f7fe f835 	bl	800305a <LTC681x_wrcfg>
		LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 8004ff0:	4974      	ldr	r1, [pc, #464]	; (80051c4 <cellBalancingUnitTest+0x858>)
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	f7fe f8b0 	bl	8003158 <LTC681x_wrcfgb>
		driverSWLTC6804ResetCellVoltageRegisters();
 8004ff8:	f7fb ffde 	bl	8000fb8 <driverSWLTC6804ResetCellVoltageRegisters>
		driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2101      	movs	r1, #1
 8005000:	2003      	movs	r0, #3
 8005002:	f7fc f81b 	bl	800103c <driverSWLTC6804StartCellVoltageConversion>
		if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 8005006:	4870      	ldr	r0, [pc, #448]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 8005008:	f7fc f892 	bl	8001130 <driverSWLTC6804ReadCellVoltagesArray>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80c7 	beq.w	80051a2 <cellBalancingUnitTest+0x836>
		{
			CellMonitorsArrayTranslate();
 8005014:	f7ff fa40 	bl	8004498 <CellMonitorsArrayTranslate>
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005018:	4b6b      	ldr	r3, [pc, #428]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 800501a:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800501c:	4618      	mov	r0, r3
 800501e:	f7fb fa93 	bl	8000548 <__aeabi_f2d>
 8005022:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005026:	4b68      	ldr	r3, [pc, #416]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 8005028:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fa8c 	bl	8000548 <__aeabi_f2d>
 8005030:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005034:	4b64      	ldr	r3, [pc, #400]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 8005036:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005038:	4618      	mov	r0, r3
 800503a:	f7fb fa85 	bl	8000548 <__aeabi_f2d>
 800503e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005042:	4b61      	ldr	r3, [pc, #388]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 8005044:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005046:	4618      	mov	r0, r3
 8005048:	f7fb fa7e 	bl	8000548 <__aeabi_f2d>
 800504c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005050:	4b5d      	ldr	r3, [pc, #372]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 8005052:	691b      	ldr	r3, [r3, #16]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005054:	4618      	mov	r0, r3
 8005056:	f7fb fa77 	bl	8000548 <__aeabi_f2d>
 800505a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800505e:	4b5a      	ldr	r3, [pc, #360]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 8005060:	695b      	ldr	r3, [r3, #20]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005062:	4618      	mov	r0, r3
 8005064:	f7fb fa70 	bl	8000548 <__aeabi_f2d>
 8005068:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800506c:	4b56      	ldr	r3, [pc, #344]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 800506e:	699b      	ldr	r3, [r3, #24]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005070:	4618      	mov	r0, r3
 8005072:	f7fb fa69 	bl	8000548 <__aeabi_f2d>
 8005076:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800507a:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 800507c:	69db      	ldr	r3, [r3, #28]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb fa62 	bl	8000548 <__aeabi_f2d>
 8005084:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8005088:	4b4f      	ldr	r3, [pc, #316]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800508c:	4618      	mov	r0, r3
 800508e:	f7fb fa5b 	bl	8000548 <__aeabi_f2d>
 8005092:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8005096:	4b4c      	ldr	r3, [pc, #304]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800509a:	4618      	mov	r0, r3
 800509c:	f7fb fa54 	bl	8000548 <__aeabi_f2d>
 80050a0:	e9c7 0108 	strd	r0, r1, [r7, #32]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80050a4:	4b48      	ldr	r3, [pc, #288]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fb fa4d 	bl	8000548 <__aeabi_f2d>
 80050ae:	e9c7 0106 	strd	r0, r1, [r7, #24]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80050b2:	4b45      	ldr	r3, [pc, #276]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fb fa46 	bl	8000548 <__aeabi_f2d>
 80050bc:	e9c7 0104 	strd	r0, r1, [r7, #16]
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80050c0:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb fa3f 	bl	8000548 <__aeabi_f2d>
 80050ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80050ce:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fb fa38 	bl	8000548 <__aeabi_f2d>
 80050d8:	e9c7 0100 	strd	r0, r1, [r7]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80050dc:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fb fa31 	bl	8000548 <__aeabi_f2d>
 80050e6:	4682      	mov	sl, r0
 80050e8:	468b      	mov	fp, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80050ea:	4b37      	ldr	r3, [pc, #220]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fb fa2a 	bl	8000548 <__aeabi_f2d>
 80050f4:	4680      	mov	r8, r0
 80050f6:	4689      	mov	r9, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80050f8:	4b33      	ldr	r3, [pc, #204]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fb fa23 	bl	8000548 <__aeabi_f2d>
 8005102:	4604      	mov	r4, r0
 8005104:	460d      	mov	r5, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005106:	4b30      	ldr	r3, [pc, #192]	; (80051c8 <cellBalancingUnitTest+0x85c>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
			sprintf(buffer,"Enabled S4, S10 and S16; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb fa1c 	bl	8000548 <__aeabi_f2d>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8005118:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 800511c:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8005120:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8005124:	ed97 7b00 	vldr	d7, [r7]
 8005128:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800512c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005130:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8005134:	ed97 7b04 	vldr	d7, [r7, #16]
 8005138:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800513c:	ed97 7b06 	vldr	d7, [r7, #24]
 8005140:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8005144:	ed97 7b08 	vldr	d7, [r7, #32]
 8005148:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800514c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005150:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005154:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005158:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800515c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8005160:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005164:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8005168:	ed8d 7b08 	vstr	d7, [sp, #32]
 800516c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8005170:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005174:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005178:	ed8d 7b04 	vstr	d7, [sp, #16]
 800517c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005180:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005184:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005188:	ed8d 7b00 	vstr	d7, [sp]
 800518c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005190:	490e      	ldr	r1, [pc, #56]	; (80051cc <cellBalancingUnitTest+0x860>)
 8005192:	480f      	ldr	r0, [pc, #60]	; (80051d0 <cellBalancingUnitTest+0x864>)
 8005194:	f00b feba 	bl	8010f0c <siprintf>
			send_uart(buffer);
 8005198:	480d      	ldr	r0, [pc, #52]	; (80051d0 <cellBalancingUnitTest+0x864>)
 800519a:	f7fe fd67 	bl	8003c6c <send_uart>
			clear_buffer();
 800519e:	f7fe fd49 	bl	8003c34 <clear_buffer>
		}
		LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
 80051a2:	4908      	ldr	r1, [pc, #32]	; (80051c4 <cellBalancingUnitTest+0x858>)
 80051a4:	2001      	movs	r0, #1
 80051a6:	f7fd fab7 	bl	8002718 <LTC681x_clear_discharge>
	    LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 80051aa:	4906      	ldr	r1, [pc, #24]	; (80051c4 <cellBalancingUnitTest+0x858>)
 80051ac:	2001      	movs	r0, #1
 80051ae:	f7fd ff54 	bl	800305a <LTC681x_wrcfg>
	    LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <cellBalancingUnitTest+0x858>)
 80051b4:	2001      	movs	r0, #1
 80051b6:	f7fd ffcf 	bl	8003158 <LTC681x_wrcfgb>


	    //Enable S5, S11 and S17 and measure C5, C11 and C17 with DCP enabled
		for(uint8_t S_pin = 5 ; S_pin < noOfTotalCells+1; S_pin += 6)
 80051ba:	2305      	movs	r3, #5
 80051bc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80051c0:	e014      	b.n	80051ec <cellBalancingUnitTest+0x880>
 80051c2:	bf00      	nop
 80051c4:	20002a60 	.word	0x20002a60
 80051c8:	20002914 	.word	0x20002914
 80051cc:	08013954 	.word	0x08013954
 80051d0:	200024b4 	.word	0x200024b4
		{
			LTC6813_set_discharge(S_pin,cellMonitorICCount,BMS_IC);
 80051d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80051d8:	4a7d      	ldr	r2, [pc, #500]	; (80053d0 <cellBalancingUnitTest+0xa64>)
 80051da:	2101      	movs	r1, #1
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fd f9fd 	bl	80025dc <LTC6813_set_discharge>
		for(uint8_t S_pin = 5 ; S_pin < noOfTotalCells+1; S_pin += 6)
 80051e2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80051e6:	3306      	adds	r3, #6
 80051e8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80051ec:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80051f0:	2b12      	cmp	r3, #18
 80051f2:	d9ef      	bls.n	80051d4 <cellBalancingUnitTest+0x868>
		}
		LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 80051f4:	4976      	ldr	r1, [pc, #472]	; (80053d0 <cellBalancingUnitTest+0xa64>)
 80051f6:	2001      	movs	r0, #1
 80051f8:	f7fd ff2f 	bl	800305a <LTC681x_wrcfg>
		LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 80051fc:	4974      	ldr	r1, [pc, #464]	; (80053d0 <cellBalancingUnitTest+0xa64>)
 80051fe:	2001      	movs	r0, #1
 8005200:	f7fd ffaa 	bl	8003158 <LTC681x_wrcfgb>
		driverSWLTC6804ResetCellVoltageRegisters();
 8005204:	f7fb fed8 	bl	8000fb8 <driverSWLTC6804ResetCellVoltageRegisters>
		driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
 8005208:	2200      	movs	r2, #0
 800520a:	2101      	movs	r1, #1
 800520c:	2003      	movs	r0, #3
 800520e:	f7fb ff15 	bl	800103c <driverSWLTC6804StartCellVoltageConversion>
		if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 8005212:	4870      	ldr	r0, [pc, #448]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005214:	f7fb ff8c 	bl	8001130 <driverSWLTC6804ReadCellVoltagesArray>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80c7 	beq.w	80053ae <cellBalancingUnitTest+0xa42>
		{
			CellMonitorsArrayTranslate();
 8005220:	f7ff f93a 	bl	8004498 <CellMonitorsArrayTranslate>
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005224:	4b6b      	ldr	r3, [pc, #428]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005226:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb f98d 	bl	8000548 <__aeabi_f2d>
 800522e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005232:	4b68      	ldr	r3, [pc, #416]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005234:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005236:	4618      	mov	r0, r3
 8005238:	f7fb f986 	bl	8000548 <__aeabi_f2d>
 800523c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005240:	4b64      	ldr	r3, [pc, #400]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005242:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb f97f 	bl	8000548 <__aeabi_f2d>
 800524a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800524e:	4b61      	ldr	r3, [pc, #388]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005250:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005252:	4618      	mov	r0, r3
 8005254:	f7fb f978 	bl	8000548 <__aeabi_f2d>
 8005258:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800525c:	4b5d      	ldr	r3, [pc, #372]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 800525e:	691b      	ldr	r3, [r3, #16]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005260:	4618      	mov	r0, r3
 8005262:	f7fb f971 	bl	8000548 <__aeabi_f2d>
 8005266:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800526a:	4b5a      	ldr	r3, [pc, #360]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 800526c:	695b      	ldr	r3, [r3, #20]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800526e:	4618      	mov	r0, r3
 8005270:	f7fb f96a 	bl	8000548 <__aeabi_f2d>
 8005274:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005278:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 800527a:	699b      	ldr	r3, [r3, #24]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800527c:	4618      	mov	r0, r3
 800527e:	f7fb f963 	bl	8000548 <__aeabi_f2d>
 8005282:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8005286:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005288:	69db      	ldr	r3, [r3, #28]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800528a:	4618      	mov	r0, r3
 800528c:	f7fb f95c 	bl	8000548 <__aeabi_f2d>
 8005290:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8005294:	4b4f      	ldr	r3, [pc, #316]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005298:	4618      	mov	r0, r3
 800529a:	f7fb f955 	bl	8000548 <__aeabi_f2d>
 800529e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80052a2:	4b4c      	ldr	r3, [pc, #304]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fb f94e 	bl	8000548 <__aeabi_f2d>
 80052ac:	e9c7 0108 	strd	r0, r1, [r7, #32]
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80052b0:	4b48      	ldr	r3, [pc, #288]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fb f947 	bl	8000548 <__aeabi_f2d>
 80052ba:	e9c7 0106 	strd	r0, r1, [r7, #24]
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80052be:	4b45      	ldr	r3, [pc, #276]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fb f940 	bl	8000548 <__aeabi_f2d>
 80052c8:	e9c7 0104 	strd	r0, r1, [r7, #16]
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80052cc:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb f939 	bl	8000548 <__aeabi_f2d>
 80052d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80052da:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fb f932 	bl	8000548 <__aeabi_f2d>
 80052e4:	e9c7 0100 	strd	r0, r1, [r7]
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fb f92b 	bl	8000548 <__aeabi_f2d>
 80052f2:	4682      	mov	sl, r0
 80052f4:	468b      	mov	fp, r1
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80052f6:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fb f924 	bl	8000548 <__aeabi_f2d>
 8005300:	4680      	mov	r8, r0
 8005302:	4689      	mov	r9, r1
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005304:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005308:	4618      	mov	r0, r3
 800530a:	f7fb f91d 	bl	8000548 <__aeabi_f2d>
 800530e:	4604      	mov	r4, r0
 8005310:	460d      	mov	r5, r1
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005312:	4b30      	ldr	r3, [pc, #192]	; (80053d4 <cellBalancingUnitTest+0xa68>)
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
			sprintf(buffer,"Enabled S5, S11 and S17; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb f916 	bl	8000548 <__aeabi_f2d>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8005324:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8005328:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 800532c:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8005330:	ed97 7b00 	vldr	d7, [r7]
 8005334:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8005338:	ed97 7b02 	vldr	d7, [r7, #8]
 800533c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8005340:	ed97 7b04 	vldr	d7, [r7, #16]
 8005344:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005348:	ed97 7b06 	vldr	d7, [r7, #24]
 800534c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8005350:	ed97 7b08 	vldr	d7, [r7, #32]
 8005354:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005358:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800535c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005360:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005364:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005368:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800536c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005370:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8005374:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005378:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800537c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005380:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005384:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005388:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800538c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005390:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005394:	ed8d 7b00 	vstr	d7, [sp]
 8005398:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800539c:	490e      	ldr	r1, [pc, #56]	; (80053d8 <cellBalancingUnitTest+0xa6c>)
 800539e:	480f      	ldr	r0, [pc, #60]	; (80053dc <cellBalancingUnitTest+0xa70>)
 80053a0:	f00b fdb4 	bl	8010f0c <siprintf>
			send_uart(buffer);
 80053a4:	480d      	ldr	r0, [pc, #52]	; (80053dc <cellBalancingUnitTest+0xa70>)
 80053a6:	f7fe fc61 	bl	8003c6c <send_uart>
			clear_buffer();
 80053aa:	f7fe fc43 	bl	8003c34 <clear_buffer>
		}
		LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
 80053ae:	4908      	ldr	r1, [pc, #32]	; (80053d0 <cellBalancingUnitTest+0xa64>)
 80053b0:	2001      	movs	r0, #1
 80053b2:	f7fd f9b1 	bl	8002718 <LTC681x_clear_discharge>
	    LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 80053b6:	4906      	ldr	r1, [pc, #24]	; (80053d0 <cellBalancingUnitTest+0xa64>)
 80053b8:	2001      	movs	r0, #1
 80053ba:	f7fd fe4e 	bl	800305a <LTC681x_wrcfg>
	    LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 80053be:	4904      	ldr	r1, [pc, #16]	; (80053d0 <cellBalancingUnitTest+0xa64>)
 80053c0:	2001      	movs	r0, #1
 80053c2:	f7fd fec9 	bl	8003158 <LTC681x_wrcfgb>

	    //Enable S6, S12 and S18 and measure C6, C12 and C18 with DCP enabled
		for(uint8_t S_pin = 6 ; S_pin < noOfTotalCells+1; S_pin += 6)
 80053c6:	2306      	movs	r3, #6
 80053c8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80053cc:	e014      	b.n	80053f8 <cellBalancingUnitTest+0xa8c>
 80053ce:	bf00      	nop
 80053d0:	20002a60 	.word	0x20002a60
 80053d4:	20002914 	.word	0x20002914
 80053d8:	080139e8 	.word	0x080139e8
 80053dc:	200024b4 	.word	0x200024b4
		{
			LTC6813_set_discharge(S_pin,cellMonitorICCount,BMS_IC);
 80053e0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80053e4:	4a84      	ldr	r2, [pc, #528]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 80053e6:	2101      	movs	r1, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fd f8f7 	bl	80025dc <LTC6813_set_discharge>
		for(uint8_t S_pin = 6 ; S_pin < noOfTotalCells+1; S_pin += 6)
 80053ee:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80053f2:	3306      	adds	r3, #6
 80053f4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80053f8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80053fc:	2b12      	cmp	r3, #18
 80053fe:	d9ef      	bls.n	80053e0 <cellBalancingUnitTest+0xa74>
		}
		LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 8005400:	497d      	ldr	r1, [pc, #500]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 8005402:	2001      	movs	r0, #1
 8005404:	f7fd fe29 	bl	800305a <LTC681x_wrcfg>
		LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 8005408:	497b      	ldr	r1, [pc, #492]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 800540a:	2001      	movs	r0, #1
 800540c:	f7fd fea4 	bl	8003158 <LTC681x_wrcfgb>
		driverSWLTC6804ResetCellVoltageRegisters();
 8005410:	f7fb fdd2 	bl	8000fb8 <driverSWLTC6804ResetCellVoltageRegisters>
		driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
 8005414:	2200      	movs	r2, #0
 8005416:	2101      	movs	r1, #1
 8005418:	2003      	movs	r0, #3
 800541a:	f7fb fe0f 	bl	800103c <driverSWLTC6804StartCellVoltageConversion>
		if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 800541e:	4877      	ldr	r0, [pc, #476]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005420:	f7fb fe86 	bl	8001130 <driverSWLTC6804ReadCellVoltagesArray>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80c7 	beq.w	80055ba <cellBalancingUnitTest+0xc4e>
		{
			CellMonitorsArrayTranslate();
 800542c:	f7ff f834 	bl	8004498 <CellMonitorsArrayTranslate>
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005430:	4b72      	ldr	r3, [pc, #456]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005432:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005434:	4618      	mov	r0, r3
 8005436:	f7fb f887 	bl	8000548 <__aeabi_f2d>
 800543a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800543e:	4b6f      	ldr	r3, [pc, #444]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005440:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005442:	4618      	mov	r0, r3
 8005444:	f7fb f880 	bl	8000548 <__aeabi_f2d>
 8005448:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800544c:	4b6b      	ldr	r3, [pc, #428]	; (80055fc <cellBalancingUnitTest+0xc90>)
 800544e:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005450:	4618      	mov	r0, r3
 8005452:	f7fb f879 	bl	8000548 <__aeabi_f2d>
 8005456:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800545a:	4b68      	ldr	r3, [pc, #416]	; (80055fc <cellBalancingUnitTest+0xc90>)
 800545c:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800545e:	4618      	mov	r0, r3
 8005460:	f7fb f872 	bl	8000548 <__aeabi_f2d>
 8005464:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005468:	4b64      	ldr	r3, [pc, #400]	; (80055fc <cellBalancingUnitTest+0xc90>)
 800546a:	691b      	ldr	r3, [r3, #16]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800546c:	4618      	mov	r0, r3
 800546e:	f7fb f86b 	bl	8000548 <__aeabi_f2d>
 8005472:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005476:	4b61      	ldr	r3, [pc, #388]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005478:	695b      	ldr	r3, [r3, #20]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800547a:	4618      	mov	r0, r3
 800547c:	f7fb f864 	bl	8000548 <__aeabi_f2d>
 8005480:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
						cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005484:	4b5d      	ldr	r3, [pc, #372]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005486:	699b      	ldr	r3, [r3, #24]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005488:	4618      	mov	r0, r3
 800548a:	f7fb f85d 	bl	8000548 <__aeabi_f2d>
 800548e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8005492:	4b5a      	ldr	r3, [pc, #360]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005494:	69db      	ldr	r3, [r3, #28]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005496:	4618      	mov	r0, r3
 8005498:	f7fb f856 	bl	8000548 <__aeabi_f2d>
 800549c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80054a0:	4b56      	ldr	r3, [pc, #344]	; (80055fc <cellBalancingUnitTest+0xc90>)
 80054a2:	6a1b      	ldr	r3, [r3, #32]
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb f84f 	bl	8000548 <__aeabi_f2d>
 80054aa:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80054ae:	4b53      	ldr	r3, [pc, #332]	; (80055fc <cellBalancingUnitTest+0xc90>)
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fb f848 	bl	8000548 <__aeabi_f2d>
 80054b8:	e9c7 0108 	strd	r0, r1, [r7, #32]
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80054bc:	4b4f      	ldr	r3, [pc, #316]	; (80055fc <cellBalancingUnitTest+0xc90>)
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb f841 	bl	8000548 <__aeabi_f2d>
 80054c6:	e9c7 0106 	strd	r0, r1, [r7, #24]
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80054ca:	4b4c      	ldr	r3, [pc, #304]	; (80055fc <cellBalancingUnitTest+0xc90>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fb f83a 	bl	8000548 <__aeabi_f2d>
 80054d4:	e9c7 0104 	strd	r0, r1, [r7, #16]
						cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80054d8:	4b48      	ldr	r3, [pc, #288]	; (80055fc <cellBalancingUnitTest+0xc90>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb f833 	bl	8000548 <__aeabi_f2d>
 80054e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80054e6:	4b45      	ldr	r3, [pc, #276]	; (80055fc <cellBalancingUnitTest+0xc90>)
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fb f82c 	bl	8000548 <__aeabi_f2d>
 80054f0:	e9c7 0100 	strd	r0, r1, [r7]
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 80054f4:	4b41      	ldr	r3, [pc, #260]	; (80055fc <cellBalancingUnitTest+0xc90>)
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fb f825 	bl	8000548 <__aeabi_f2d>
 80054fe:	4682      	mov	sl, r0
 8005500:	468b      	mov	fp, r1
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005502:	4b3e      	ldr	r3, [pc, #248]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005506:	4618      	mov	r0, r3
 8005508:	f7fb f81e 	bl	8000548 <__aeabi_f2d>
 800550c:	4680      	mov	r8, r0
 800550e:	4689      	mov	r9, r1
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005510:	4b3a      	ldr	r3, [pc, #232]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005514:	4618      	mov	r0, r3
 8005516:	f7fb f817 	bl	8000548 <__aeabi_f2d>
 800551a:	4604      	mov	r4, r0
 800551c:	460d      	mov	r5, r1
						cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 800551e:	4b37      	ldr	r3, [pc, #220]	; (80055fc <cellBalancingUnitTest+0xc90>)
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
			sprintf(buffer,"Enabled S6, S12 and S18; C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005522:	4618      	mov	r0, r3
 8005524:	f7fb f810 	bl	8000548 <__aeabi_f2d>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8005530:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8005534:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8005538:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 800553c:	ed97 7b00 	vldr	d7, [r7]
 8005540:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8005544:	ed97 7b02 	vldr	d7, [r7, #8]
 8005548:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800554c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005550:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005554:	ed97 7b06 	vldr	d7, [r7, #24]
 8005558:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800555c:	ed97 7b08 	vldr	d7, [r7, #32]
 8005560:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005564:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005568:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800556c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005570:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005574:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8005578:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800557c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8005580:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005584:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8005588:	ed8d 7b06 	vstr	d7, [sp, #24]
 800558c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005590:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005594:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005598:	ed8d 7b02 	vstr	d7, [sp, #8]
 800559c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80055a0:	ed8d 7b00 	vstr	d7, [sp]
 80055a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80055a8:	4915      	ldr	r1, [pc, #84]	; (8005600 <cellBalancingUnitTest+0xc94>)
 80055aa:	4816      	ldr	r0, [pc, #88]	; (8005604 <cellBalancingUnitTest+0xc98>)
 80055ac:	f00b fcae 	bl	8010f0c <siprintf>
			send_uart(buffer);
 80055b0:	4814      	ldr	r0, [pc, #80]	; (8005604 <cellBalancingUnitTest+0xc98>)
 80055b2:	f7fe fb5b 	bl	8003c6c <send_uart>
			clear_buffer();
 80055b6:	f7fe fb3d 	bl	8003c34 <clear_buffer>
		}
		LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
 80055ba:	490f      	ldr	r1, [pc, #60]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 80055bc:	2001      	movs	r0, #1
 80055be:	f7fd f8ab 	bl	8002718 <LTC681x_clear_discharge>
	    LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 80055c2:	490d      	ldr	r1, [pc, #52]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7fd fd48 	bl	800305a <LTC681x_wrcfg>
	    LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 80055ca:	490b      	ldr	r1, [pc, #44]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 80055cc:	2001      	movs	r0, #1
 80055ce:	f7fd fdc3 	bl	8003158 <LTC681x_wrcfgb>
	{
	      LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
	      LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
	      LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
	}
}
 80055d2:	e00b      	b.n	80055ec <cellBalancingUnitTest+0xc80>
	      LTC681x_clear_discharge(cellMonitorICCount,BMS_IC);
 80055d4:	4908      	ldr	r1, [pc, #32]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 80055d6:	2001      	movs	r0, #1
 80055d8:	f7fd f89e 	bl	8002718 <LTC681x_clear_discharge>
	      LTC681x_wrcfg(cellMonitorICCount,BMS_IC);
 80055dc:	4906      	ldr	r1, [pc, #24]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 80055de:	2001      	movs	r0, #1
 80055e0:	f7fd fd3b 	bl	800305a <LTC681x_wrcfg>
	      LTC681x_wrcfgb(cellMonitorICCount,BMS_IC);
 80055e4:	4904      	ldr	r1, [pc, #16]	; (80055f8 <cellBalancingUnitTest+0xc8c>)
 80055e6:	2001      	movs	r0, #1
 80055e8:	f7fd fdb6 	bl	8003158 <LTC681x_wrcfgb>
}
 80055ec:	bf00      	nop
 80055ee:	3778      	adds	r7, #120	; 0x78
 80055f0:	46bd      	mov	sp, r7
 80055f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f6:	bf00      	nop
 80055f8:	20002a60 	.word	0x20002a60
 80055fc:	20002914 	.word	0x20002914
 8005600:	08013a7c 	.word	0x08013a7c
 8005604:	200024b4 	.word	0x200024b4

08005608 <init_LTC6813>:
void init_LTC6813(void)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b093      	sub	sp, #76	; 0x4c
 800560c:	af08      	add	r7, sp, #32
	driverLTC6804ConfigStructTypedef configStruct;
	configStruct.GPIO1                    = true;																														// Do not pull down this pin (false = pull down)
 800560e:	2301      	movs	r3, #1
 8005610:	713b      	strb	r3, [r7, #4]
	configStruct.GPIO2                    = true;																														//
 8005612:	2301      	movs	r3, #1
 8005614:	717b      	strb	r3, [r7, #5]
	configStruct.GPIO3                    = true;																														//
 8005616:	2301      	movs	r3, #1
 8005618:	71bb      	strb	r3, [r7, #6]
	configStruct.GPIO4                    = true;																														//
 800561a:	2301      	movs	r3, #1
 800561c:	71fb      	strb	r3, [r7, #7]
	configStruct.GPIO5                    = true;																														//
 800561e:	2301      	movs	r3, #1
 8005620:	723b      	strb	r3, [r7, #8]
	configStruct.GPIO6                    = true;																														//
 8005622:	2301      	movs	r3, #1
 8005624:	727b      	strb	r3, [r7, #9]
	configStruct.GPIO7                    = true;																														//
 8005626:	2301      	movs	r3, #1
 8005628:	72bb      	strb	r3, [r7, #10]
	configStruct.GPIO8                    = true;																														//
 800562a:	2301      	movs	r3, #1
 800562c:	72fb      	strb	r3, [r7, #11]
	configStruct.GPIO9                    = true;																														//
 800562e:	2301      	movs	r3, #1
 8005630:	733b      	strb	r3, [r7, #12]
	configStruct.ReferenceON              = true;																														// Reference ON
 8005632:	2301      	movs	r3, #1
 8005634:	737b      	strb	r3, [r7, #13]
	configStruct.ADCOption                = true;																											  		// ADC Option register for configuration of over sampling ratio
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
	configStruct.noOfCells                = 18;			// Number of cells to monitor (that can cause interrupt)
 800563a:	2312      	movs	r3, #18
 800563c:	743b      	strb	r3, [r7, #16]
	configStruct.DisChargeEnableMask      = 0x00000000;	// Set enable state of discharge, 1=EnableDischarge, 0=DisableDischarge
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
	configStruct.DischargeTimout          = 0;		// Discharge timout value / limit
 8005642:	2300      	movs	r3, #0
 8005644:	763b      	strb	r3, [r7, #24]
	configStruct.CellUnderVoltageLimit    = 2.80f; // Undervoltage level, cell voltages under this limit will cause interrupt
 8005646:	4b42      	ldr	r3, [pc, #264]	; (8005750 <init_LTC6813+0x148>)
 8005648:	61fb      	str	r3, [r7, #28]
	configStruct.CellOverVoltageLimit     = 4.20f;
 800564a:	4b42      	ldr	r3, [pc, #264]	; (8005754 <init_LTC6813+0x14c>)
 800564c:	623b      	str	r3, [r7, #32]

	driverSWLTC6804Init(configStruct, NoOfCellMonitorsPossibleOnBMS, noOfTotalCells, noOfTempSensorPerModule,CELL_MON_LTC6811_1);
 800564e:	2301      	movs	r3, #1
 8005650:	9307      	str	r3, [sp, #28]
 8005652:	230a      	movs	r3, #10
 8005654:	9306      	str	r3, [sp, #24]
 8005656:	2312      	movs	r3, #18
 8005658:	9305      	str	r3, [sp, #20]
 800565a:	2301      	movs	r3, #1
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	466c      	mov	r4, sp
 8005660:	f107 0314 	add.w	r3, r7, #20
 8005664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800566e:	f7fb fc0d 	bl	8000e8c <driverSWLTC6804Init>

	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8005672:	2300      	movs	r3, #0
 8005674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005678:	e02c      	b.n	80056d4 <init_LTC6813+0xcc>
	{
		for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 800567a:	2300      	movs	r3, #0
 800567c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005680:	e013      	b.n	80056aa <init_LTC6813+0xa2>
			cellModuleVoltages[modulePointer][cellPointer] = 0.0f;
 8005682:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005686:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800568a:	4833      	ldr	r0, [pc, #204]	; (8005758 <init_LTC6813+0x150>)
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	440b      	add	r3, r1
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4403      	add	r3, r0
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
		for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 80056a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056a4:	3301      	adds	r3, #1
 80056a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80056aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056ae:	2b11      	cmp	r3, #17
 80056b0:	d9e7      	bls.n	8005682 <init_LTC6813+0x7a>

		cellModuleBalanceResistorEnableMask[modulePointer] = 0;
 80056b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056b6:	4a29      	ldr	r2, [pc, #164]	; (800575c <init_LTC6813+0x154>)
 80056b8:	2100      	movs	r1, #0
 80056ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		cellModuleBalanceResistorEnableMaskTest[modulePointer] = 0;
 80056be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056c2:	4a27      	ldr	r2, [pc, #156]	; (8005760 <init_LTC6813+0x158>)
 80056c4:	2100      	movs	r1, #0
 80056c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 80056ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ce:	3301      	adds	r3, #1
 80056d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ce      	beq.n	800567a <init_LTC6813+0x72>
	}
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80056e2:	e01f      	b.n	8005724 <init_LTC6813+0x11c>
	{
		for(uint8_t auxPointer = 0; auxPointer < noOfTempSensorPerModule; auxPointer++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80056ea:	e012      	b.n	8005712 <init_LTC6813+0x10a>
			auxModuleVoltages[modulePointer][auxPointer] = 0.0f;
 80056ec:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80056f0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80056f4:	481b      	ldr	r0, [pc, #108]	; (8005764 <init_LTC6813+0x15c>)
 80056f6:	4613      	mov	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4413      	add	r3, r2
 80056fc:	440b      	add	r3, r1
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4403      	add	r3, r0
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
		for(uint8_t auxPointer = 0; auxPointer < noOfTempSensorPerModule; auxPointer++)
 8005708:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800570c:	3301      	adds	r3, #1
 800570e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005712:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005716:	2b09      	cmp	r3, #9
 8005718:	d9e8      	bls.n	80056ec <init_LTC6813+0xe4>
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 800571a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800571e:	3301      	adds	r3, #1
 8005720:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005724:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0db      	beq.n	80056e4 <init_LTC6813+0xdc>
	}

	driverSWLTC6804ResetCellVoltageRegisters();
 800572c:	f7fb fc44 	bl	8000fb8 <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
 8005730:	2200      	movs	r2, #0
 8005732:	2100      	movs	r1, #0
 8005734:	2003      	movs	r0, #3
 8005736:	f7fb fc81 	bl	800103c <driverSWLTC6804StartCellVoltageConversion>
	//driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
	driverSWLTC6804ResetAuxRegisters();
 800573a:	f7fb fc5e 	bl	8000ffa <driverSWLTC6804ResetAuxRegisters>
	driverSWLTC6804StartAuxVoltageConversion(MD_FILTERED, AUX_CH_ALL);
 800573e:	2100      	movs	r1, #0
 8005740:	2003      	movs	r0, #3
 8005742:	f7fb fcbb 	bl	80010bc <driverSWLTC6804StartAuxVoltageConversion>
	//driverSWLTC6804StartLoadedCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL,true);
	//driverSWLTC6804ResetAuxRegisters();
	//driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);

}
 8005746:	bf00      	nop
 8005748:	372c      	adds	r7, #44	; 0x2c
 800574a:	46bd      	mov	sp, r7
 800574c:	bd90      	pop	{r4, r7, pc}
 800574e:	bf00      	nop
 8005750:	40333333 	.word	0x40333333
 8005754:	40866666 	.word	0x40866666
 8005758:	20002914 	.word	0x20002914
 800575c:	20002980 	.word	0x20002980
 8005760:	20002984 	.word	0x20002984
 8005764:	2000295c 	.word	0x2000295c

08005768 <unit_test_LTC6813>:
void unit_test_LTC6813(void)
{
 8005768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800576c:	b0be      	sub	sp, #248	; 0xf8
 800576e:	af22      	add	r7, sp, #136	; 0x88

	//driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);
	//HAL_Delay(300);
	if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 8005770:	48b5      	ldr	r0, [pc, #724]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005772:	f7fb fcdd 	bl	8001130 <driverSWLTC6804ReadCellVoltagesArray>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8122 	beq.w	80059c2 <unit_test_LTC6813+0x25a>
	{
		CellMonitorsArrayTranslate();
 800577e:	f7fe fe8b 	bl	8004498 <CellMonitorsArrayTranslate>
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005782:	4bb1      	ldr	r3, [pc, #708]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005784:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005786:	4618      	mov	r0, r3
 8005788:	f7fa fede 	bl	8000548 <__aeabi_f2d>
 800578c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8005790:	4bad      	ldr	r3, [pc, #692]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005792:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005794:	4618      	mov	r0, r3
 8005796:	f7fa fed7 	bl	8000548 <__aeabi_f2d>
 800579a:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 800579e:	4baa      	ldr	r3, [pc, #680]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80057a0:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fa fed0 	bl	8000548 <__aeabi_f2d>
 80057a8:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80057ac:	4ba6      	ldr	r3, [pc, #664]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80057ae:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fa fec9 	bl	8000548 <__aeabi_f2d>
 80057b6:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80057ba:	4ba3      	ldr	r3, [pc, #652]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80057bc:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fa fec2 	bl	8000548 <__aeabi_f2d>
 80057c4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80057c8:	4b9f      	ldr	r3, [pc, #636]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80057ca:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fa febb 	bl	8000548 <__aeabi_f2d>
 80057d2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 80057d6:	4b9c      	ldr	r3, [pc, #624]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80057d8:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fa feb4 	bl	8000548 <__aeabi_f2d>
 80057e0:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80057e4:	4b98      	ldr	r3, [pc, #608]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80057e6:	69db      	ldr	r3, [r3, #28]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fa fead 	bl	8000548 <__aeabi_f2d>
 80057ee:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 80057f2:	4b95      	ldr	r3, [pc, #596]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fa fea6 	bl	8000548 <__aeabi_f2d>
 80057fc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8005800:	4b91      	ldr	r3, [pc, #580]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005804:	4618      	mov	r0, r3
 8005806:	f7fa fe9f 	bl	8000548 <__aeabi_f2d>
 800580a:	e9c7 0108 	strd	r0, r1, [r7, #32]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800580e:	4b8e      	ldr	r3, [pc, #568]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005812:	4618      	mov	r0, r3
 8005814:	f7fa fe98 	bl	8000548 <__aeabi_f2d>
 8005818:	e9c7 0106 	strd	r0, r1, [r7, #24]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800581c:	4b8a      	ldr	r3, [pc, #552]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005820:	4618      	mov	r0, r3
 8005822:	f7fa fe91 	bl	8000548 <__aeabi_f2d>
 8005826:	e9c7 0104 	strd	r0, r1, [r7, #16]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 800582a:	4b87      	ldr	r3, [pc, #540]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800582e:	4618      	mov	r0, r3
 8005830:	f7fa fe8a 	bl	8000548 <__aeabi_f2d>
 8005834:	e9c7 0102 	strd	r0, r1, [r7, #8]
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005838:	4b83      	ldr	r3, [pc, #524]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800583c:	4618      	mov	r0, r3
 800583e:	f7fa fe83 	bl	8000548 <__aeabi_f2d>
 8005842:	e9c7 0100 	strd	r0, r1, [r7]
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005846:	4b80      	ldr	r3, [pc, #512]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 800584a:	4618      	mov	r0, r3
 800584c:	f7fa fe7c 	bl	8000548 <__aeabi_f2d>
 8005850:	4682      	mov	sl, r0
 8005852:	468b      	mov	fp, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005854:	4b7c      	ldr	r3, [pc, #496]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005858:	4618      	mov	r0, r3
 800585a:	f7fa fe75 	bl	8000548 <__aeabi_f2d>
 800585e:	4680      	mov	r8, r0
 8005860:	4689      	mov	r9, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005862:	4b79      	ldr	r3, [pc, #484]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005866:	4618      	mov	r0, r3
 8005868:	f7fa fe6e 	bl	8000548 <__aeabi_f2d>
 800586c:	4604      	mov	r4, r0
 800586e:	460d      	mov	r5, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8005870:	4b75      	ldr	r3, [pc, #468]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8005874:	4618      	mov	r0, r3
 8005876:	f7fa fe67 	bl	8000548 <__aeabi_f2d>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8005882:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8005886:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 800588a:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 800588e:	ed97 7b00 	vldr	d7, [r7]
 8005892:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8005896:	ed97 7b02 	vldr	d7, [r7, #8]
 800589a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800589e:	ed97 7b04 	vldr	d7, [r7, #16]
 80058a2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80058a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80058aa:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80058ae:	ed97 7b08 	vldr	d7, [r7, #32]
 80058b2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80058b6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80058ba:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80058be:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80058c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80058c6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80058ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80058ce:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80058d2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80058d6:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80058da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058de:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80058e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80058e6:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80058ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058ee:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80058f2:	ed8d 7b00 	vstr	d7, [sp]
 80058f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80058fa:	4954      	ldr	r1, [pc, #336]	; (8005a4c <unit_test_LTC6813+0x2e4>)
 80058fc:	4854      	ldr	r0, [pc, #336]	; (8005a50 <unit_test_LTC6813+0x2e8>)
 80058fe:	f00b fb05 	bl	8010f0c <siprintf>
		send_uart(buffer);
 8005902:	4853      	ldr	r0, [pc, #332]	; (8005a50 <unit_test_LTC6813+0x2e8>)
 8005904:	f7fe f9b2 	bl	8003c6c <send_uart>
		clear_buffer();
 8005908:	f7fe f994 	bl	8003c34 <clear_buffer>
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 800590c:	4b4e      	ldr	r3, [pc, #312]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800590e:	ed93 7a00 	vldr	s14, [r3]
 8005912:	4b4d      	ldr	r3, [pc, #308]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005914:	edd3 7a01 	vldr	s15, [r3, #4]
 8005918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800591c:	4b4a      	ldr	r3, [pc, #296]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800591e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005926:	4b48      	ldr	r3, [pc, #288]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005928:	edd3 7a03 	vldr	s15, [r3, #12]
 800592c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005930:	4b45      	ldr	r3, [pc, #276]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005932:	edd3 7a04 	vldr	s15, [r3, #16]
 8005936:	ee37 7a27 	vadd.f32	s14, s14, s15
 800593a:	4b43      	ldr	r3, [pc, #268]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800593c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005944:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005946:	edd3 7a06 	vldr	s15, [r3, #24]
 800594a:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 800594e:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005950:	edd3 7a07 	vldr	s15, [r3, #28]
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8005954:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 8005958:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800595a:	edd3 7a08 	vldr	s15, [r3, #32]
 800595e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005962:	4b39      	ldr	r3, [pc, #228]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005964:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800596c:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800596e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005972:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005976:	4b34      	ldr	r3, [pc, #208]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005978:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800597c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005980:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005982:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005986:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][13] + cellModuleVoltages[0][14] + cellModuleVoltages[0][15] + cellModuleVoltages[0][16] + cellModuleVoltages[0][17] ;
 800598a:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 800598c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 8005990:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][13] + cellModuleVoltages[0][14] + cellModuleVoltages[0][15] + cellModuleVoltages[0][16] + cellModuleVoltages[0][17] ;
 8005994:	4b2c      	ldr	r3, [pc, #176]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 8005996:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800599a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800599e:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80059a0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80059a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059a8:	4b27      	ldr	r3, [pc, #156]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80059aa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80059ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059b2:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <unit_test_LTC6813+0x2e0>)
 80059b4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80059b8:	ee77 7a27 	vadd.f32	s15, s14, s15
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <unit_test_LTC6813+0x2ec>)
 80059be:	edc3 7a00 	vstr	s15, [r3]
	}

	if(driverSWLTC6804ReadAuxVoltagesArray(auxModuleVoltages,NTCnominalResistance, NTCseriesResistor, NTCbetaFactor, 25.0f))
 80059c2:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 80059c6:	f640 536b 	movw	r3, #3435	; 0xd6b
 80059ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80059ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80059d2:	4821      	ldr	r0, [pc, #132]	; (8005a58 <unit_test_LTC6813+0x2f0>)
 80059d4:	f7fb fe4c 	bl	8001670 <driverSWLTC6804ReadAuxVoltagesArray>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d05b      	beq.n	8005a96 <unit_test_LTC6813+0x32e>
	{
		AuxMonitorsArrayTranslate();
 80059de:	f7fe fdb9 	bl	8004554 <AuxMonitorsArrayTranslate>
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 80059e2:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <unit_test_LTC6813+0x2f4>)
 80059e4:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fa fdae 	bl	8000548 <__aeabi_f2d>
 80059ec:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <unit_test_LTC6813+0x2f4>)
 80059f2:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fa fda7 	bl	8000548 <__aeabi_f2d>
 80059fa:	4680      	mov	r8, r0
 80059fc:	4689      	mov	r9, r1
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 80059fe:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <unit_test_LTC6813+0x2f4>)
 8005a00:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fa fda0 	bl	8000548 <__aeabi_f2d>
 8005a08:	4682      	mov	sl, r0
 8005a0a:	468b      	mov	fp, r1
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <unit_test_LTC6813+0x2f4>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fa fd99 	bl	8000548 <__aeabi_f2d>
 8005a16:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <unit_test_LTC6813+0x2f4>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fa fd92 	bl	8000548 <__aeabi_f2d>
 8005a24:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <unit_test_LTC6813+0x2f4>)
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fa fd8b 	bl	8000548 <__aeabi_f2d>
 8005a32:	4604      	mov	r4, r0
 8005a34:	460d      	mov	r5, r1
				auxVoltagesIndividual[8].auxVoltage);
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <unit_test_LTC6813+0x2f4>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fa fd84 	bl	8000548 <__aeabi_f2d>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	e00c      	b.n	8005a60 <unit_test_LTC6813+0x2f8>
 8005a46:	bf00      	nop
 8005a48:	20002914 	.word	0x20002914
 8005a4c:	08013b10 	.word	0x08013b10
 8005a50:	200024b4 	.word	0x200024b4
 8005a54:	20002b48 	.word	0x20002b48
 8005a58:	2000295c 	.word	0x2000295c
 8005a5c:	20002a18 	.word	0x20002a18
 8005a60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a64:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005a68:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005a6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005a70:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005a74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a78:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8005a7c:	e9cd 8900 	strd	r8, r9, [sp]
 8005a80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005a84:	490d      	ldr	r1, [pc, #52]	; (8005abc <unit_test_LTC6813+0x354>)
 8005a86:	480e      	ldr	r0, [pc, #56]	; (8005ac0 <unit_test_LTC6813+0x358>)
 8005a88:	f00b fa40 	bl	8010f0c <siprintf>
				send_uart(buffer);
 8005a8c:	480c      	ldr	r0, [pc, #48]	; (8005ac0 <unit_test_LTC6813+0x358>)
 8005a8e:	f7fe f8ed 	bl	8003c6c <send_uart>
				clear_buffer();
 8005a92:	f7fe f8cf 	bl	8003c34 <clear_buffer>
	}

	driverSWLTC6804ResetCellVoltageRegisters();
 8005a96:	f7fb fa8f 	bl	8000fb8 <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	2003      	movs	r0, #3
 8005aa0:	f7fb facc 	bl	800103c <driverSWLTC6804StartCellVoltageConversion>
	//driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
	driverSWLTC6804ResetAuxRegisters();
 8005aa4:	f7fb faa9 	bl	8000ffa <driverSWLTC6804ResetAuxRegisters>
	driverSWLTC6804StartAuxVoltageConversion(MD_FILTERED, AUX_CH_ALL);
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	2003      	movs	r0, #3
 8005aac:	f7fb fb06 	bl	80010bc <driverSWLTC6804StartAuxVoltageConversion>
}
 8005ab0:	bf00      	nop
 8005ab2:	3770      	adds	r7, #112	; 0x70
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aba:	bf00      	nop
 8005abc:	08013b88 	.word	0x08013b88
 8005ac0:	200024b4 	.word	0x200024b4

08005ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005aca:	f000 fe13 	bl	80066f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ace:	f000 f8cd 	bl	8005c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ad2:	f000 fa97 	bl	8006004 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005ad6:	f000 fa65 	bl	8005fa4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8005ada:	f000 fa25 	bl	8005f28 <MX_SPI2_Init>
  MX_FATFS_Init();
 8005ade:	f005 ffc1 	bl	800ba64 <MX_FATFS_Init>
  MX_CAN_Init();
 8005ae2:	f000 f92f 	bl	8005d44 <MX_CAN_Init>
  MX_RTC_Init();
 8005ae6:	f000 f981 	bl	8005dec <MX_RTC_Init>
  MX_SPI1_Init();
 8005aea:	f000 f9df 	bl	8005eac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  //HAL_Delay(250);

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 8005aee:	494f      	ldr	r1, [pc, #316]	; (8005c2c <main+0x168>)
 8005af0:	484f      	ldr	r0, [pc, #316]	; (8005c30 <main+0x16c>)
 8005af2:	f00b fa0b 	bl	8010f0c <siprintf>
  send_uart(buffer);
 8005af6:	484e      	ldr	r0, [pc, #312]	; (8005c30 <main+0x16c>)
 8005af8:	f7fe f8b8 	bl	8003c6c <send_uart>
  clear_buffer();
 8005afc:	f7fe f89a 	bl	8003c34 <clear_buffer>

  if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0x32F2)
 8005b00:	2101      	movs	r1, #1
 8005b02:	484c      	ldr	r0, [pc, #304]	; (8005c34 <main+0x170>)
 8005b04:	f003 ffb0 	bl	8009a68 <HAL_RTCEx_BKUPRead>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d001      	beq.n	8005b16 <main+0x52>
  	  {
	  	  set_time(); //set RTC init value
 8005b12:	f7fe fa71 	bl	8003ff8 <set_time>
  	  }

  sd_init();
 8005b16:	f7fe fb1b 	bl	8004150 <sd_init>

  /*CAN Initializations*/
  HAL_CAN_Start(&hcan);
 8005b1a:	4847      	ldr	r0, [pc, #284]	; (8005c38 <main+0x174>)
 8005b1c:	f001 f839 	bl	8006b92 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //using FIFO0 for RX callback reception
 8005b20:	2102      	movs	r1, #2
 8005b22:	4845      	ldr	r0, [pc, #276]	; (8005c38 <main+0x174>)
 8005b24:	f001 fa66 	bl	8006ff4 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; //data
 8005b28:	4b44      	ldr	r3, [pc, #272]	; (8005c3c <main+0x178>)
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8005b2e:	4b43      	ldr	r3, [pc, #268]	; (8005c3c <main+0x178>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8005b34:	4b41      	ldr	r3, [pc, #260]	; (8005c3c <main+0x178>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  //id
 8005b3a:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <main+0x178>)
 8005b3c:	f240 4246 	movw	r2, #1094	; 0x446
 8005b40:	601a      	str	r2, [r3, #0]
  //populate data to Txdata bytes
  TxData[0] = 11;
 8005b42:	4b3f      	ldr	r3, [pc, #252]	; (8005c40 <main+0x17c>)
 8005b44:	220b      	movs	r2, #11
 8005b46:	701a      	strb	r2, [r3, #0]
  TxData[1] = 100;
 8005b48:	4b3d      	ldr	r3, [pc, #244]	; (8005c40 <main+0x17c>)
 8005b4a:	2264      	movs	r2, #100	; 0x64
 8005b4c:	705a      	strb	r2, [r3, #1]
  //send CAN message // TO DO:check CAN message reception on BluePill
  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);

  /*UART2 Interrupt*/
  HAL_UART_Receive_IT (&huart2, uart_rx_data, 4); //set interrupt for uart rx
 8005b4e:	2204      	movs	r2, #4
 8005b50:	493c      	ldr	r1, [pc, #240]	; (8005c44 <main+0x180>)
 8005b52:	483d      	ldr	r0, [pc, #244]	; (8005c48 <main+0x184>)
 8005b54:	f004 fe12 	bl	800a77c <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b5e:	483b      	ldr	r0, [pc, #236]	; (8005c4c <main+0x188>)
 8005b60:	f001 ffb8 	bl	8007ad4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8005b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b68:	f000 fe2a 	bl	80067c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); //turn OFF precharge relay
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b72:	4836      	ldr	r0, [pc, #216]	; (8005c4c <main+0x188>)
 8005b74:	f001 ffae 	bl	8007ad4 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005b78:	20fa      	movs	r0, #250	; 0xfa
 8005b7a:	f000 fe21 	bl	80067c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET); //turn ON HV+ contactor
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b84:	4831      	ldr	r0, [pc, #196]	; (8005c4c <main+0x188>)
 8005b86:	f001 ffa5 	bl	8007ad4 <HAL_GPIO_WritePin>

  //wakeup_sleep(1);
  //wakeup_idle(1);
#ifdef ext_LTC681x_lib
  init_cell_asic_structure(cellMonitorICCount, BMS_IC);
 8005b8a:	4931      	ldr	r1, [pc, #196]	; (8005c50 <main+0x18c>)
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7fe fdc3 	bl	8004718 <init_cell_asic_structure>
#endif
  init_LTC6813();
 8005b92:	f7ff fd39 	bl	8005608 <init_LTC6813>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8005b96:	2108      	movs	r1, #8
 8005b98:	482c      	ldr	r0, [pc, #176]	; (8005c4c <main+0x188>)
 8005b9a:	f001 ffb3 	bl	8007b04 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8005b9e:	20fa      	movs	r0, #250	; 0xfa
 8005ba0:	f000 fe0e 	bl	80067c0 <HAL_Delay>
	  //send CAN message // TO DO:check CAN message reception on BluePill
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <main+0x190>)
 8005ba6:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <main+0x17c>)
 8005ba8:	4924      	ldr	r1, [pc, #144]	; (8005c3c <main+0x178>)
 8005baa:	4823      	ldr	r0, [pc, #140]	; (8005c38 <main+0x174>)
 8005bac:	f001 f835 	bl	8006c1a <HAL_CAN_AddTxMessage>

	  //wakeup_idle(1);
	  unit_test_LTC6813();
 8005bb0:	f7ff fdda 	bl	8005768 <unit_test_LTC6813>
	  calculateMaxandMinCellVoltages();
 8005bb4:	f7fe fd22 	bl	80045fc <calculateMaxandMinCellVoltages>

	  //cellBalancingTask();
#ifdef ext_LTC681x_lib
	  cellBalancingUnitTest();
 8005bb8:	f7fe fed8 	bl	800496c <cellBalancingUnitTest>
#endif

	  if(CAN_data_checkFlag) //check if CAN RX flag is set in HAL_CAN_RxFifo0MsgPendingCallback
 8005bbc:	4b26      	ldr	r3, [pc, #152]	; (8005c58 <main+0x194>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d010      	beq.n	8005be6 <main+0x122>
	  {
		  sprintf(buffer, "CAN Message values received is:%d, %d\r\n", RxData[0], RxData[1]);
 8005bc4:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <main+0x198>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <main+0x198>)
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	4924      	ldr	r1, [pc, #144]	; (8005c60 <main+0x19c>)
 8005bd0:	4817      	ldr	r0, [pc, #92]	; (8005c30 <main+0x16c>)
 8005bd2:	f00b f99b 	bl	8010f0c <siprintf>
		  send_uart(buffer);
 8005bd6:	4816      	ldr	r0, [pc, #88]	; (8005c30 <main+0x16c>)
 8005bd8:	f7fe f848 	bl	8003c6c <send_uart>
		  clear_buffer();
 8005bdc:	f7fe f82a 	bl	8003c34 <clear_buffer>
		  CAN_data_checkFlag = 0;
 8005be0:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <main+0x194>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
		  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	  }

	  if(uart_rx_flag)
 8005be6:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <main+0x1a0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d015      	beq.n	8005c1a <main+0x156>
	  {
		  sprintf(buffer, "RX Message is: %c, %c, %c\r\n", uart_rx_data[0], uart_rx_data[1], uart_rx_data[2]);
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <main+0x180>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <main+0x180>)
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <main+0x180>)
 8005bfc:	789b      	ldrb	r3, [r3, #2]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	460b      	mov	r3, r1
 8005c02:	4919      	ldr	r1, [pc, #100]	; (8005c68 <main+0x1a4>)
 8005c04:	480a      	ldr	r0, [pc, #40]	; (8005c30 <main+0x16c>)
 8005c06:	f00b f981 	bl	8010f0c <siprintf>
		  send_uart(buffer);
 8005c0a:	4809      	ldr	r0, [pc, #36]	; (8005c30 <main+0x16c>)
 8005c0c:	f7fe f82e 	bl	8003c6c <send_uart>
		  clear_buffer();
 8005c10:	f7fe f810 	bl	8003c34 <clear_buffer>
		  uart_rx_flag = 0;
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <main+0x1a0>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]

	  }

	  get_time();  //print RTC
 8005c1a:	f7fe fa2d 	bl	8004078 <get_time>
	  write_to_csvfile();
 8005c1e:	f7fe f83f 	bl	8003ca0 <write_to_csvfile>
	  HAL_Delay(250);
 8005c22:	20fa      	movs	r0, #250	; 0xfa
 8005c24:	f000 fdcc 	bl	80067c0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8005c28:	e7b5      	b.n	8005b96 <main+0xd2>
 8005c2a:	bf00      	nop
 8005c2c:	08013bb4 	.word	0x08013bb4
 8005c30:	200024b4 	.word	0x200024b4
 8005c34:	200002cc 	.word	0x200002cc
 8005c38:	200002a4 	.word	0x200002a4
 8005c3c:	200028c4 	.word	0x200028c4
 8005c40:	200028f8 	.word	0x200028f8
 8005c44:	200028b4 	.word	0x200028b4
 8005c48:	200003b4 	.word	0x200003b4
 8005c4c:	48000400 	.word	0x48000400
 8005c50:	20002a60 	.word	0x20002a60
 8005c54:	20002908 	.word	0x20002908
 8005c58:	2000290c 	.word	0x2000290c
 8005c5c:	20002900 	.word	0x20002900
 8005c60:	08013bdc 	.word	0x08013bdc
 8005c64:	200028c0 	.word	0x200028c0
 8005c68:	08013c04 	.word	0x08013c04

08005c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b09e      	sub	sp, #120	; 0x78
 8005c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005c76:	2228      	movs	r2, #40	; 0x28
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f00a fbe4 	bl	8010448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c90:	463b      	mov	r3, r7
 8005c92:	223c      	movs	r2, #60	; 0x3c
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f00a fbd6 	bl	8010448 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005c9c:	f001 ff64 	bl	8007b68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005ca0:	4b26      	ldr	r3, [pc, #152]	; (8005d3c <SystemClock_Config+0xd0>)
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <SystemClock_Config+0xd0>)
 8005ca6:	f023 0318 	bic.w	r3, r3, #24
 8005caa:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005cac:	2305      	movs	r3, #5
 8005cae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cb4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005ccc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005cd0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 ff56 	bl	8007b88 <HAL_RCC_OscConfig>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005ce2:	f000 fa11 	bl	8006108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ce6:	230f      	movs	r3, #15
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005cea:	2302      	movs	r3, #2
 8005cec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005cfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d00:	2102      	movs	r1, #2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f002 ff7e 	bl	8008c04 <HAL_RCC_ClockConfig>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005d0e:	f000 f9fb 	bl	8006108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <SystemClock_Config+0xd4>)
 8005d14:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d1e:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d20:	463b      	mov	r3, r7
 8005d22:	4618      	mov	r0, r3
 8005d24:	f003 f9a4 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005d2e:	f000 f9eb 	bl	8006108 <Error_Handler>
  }
}
 8005d32:	bf00      	nop
 8005d34:	3778      	adds	r7, #120	; 0x78
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	00010002 	.word	0x00010002

08005d44 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	; 0x28
 8005d48:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8005d4a:	4b26      	ldr	r3, [pc, #152]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d4c:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <MX_CAN_Init+0xa4>)
 8005d4e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8005d50:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d52:	2212      	movs	r2, #18
 8005d54:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005d56:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005d5c:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d68:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005d70:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8005d76:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005d7c:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8005d82:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005d88:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005d94:	4813      	ldr	r0, [pc, #76]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005d96:	f000 fd37 	bl	8006808 <HAL_CAN_Init>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8005da0:	f000 f9b2 	bl	8006108 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //CAN filter settings
  CAN_FilterTypeDef canfilterConfig;

  canfilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	623b      	str	r3, [r7, #32]
  canfilterConfig.FilterBank = 11;
 8005da8:	230b      	movs	r3, #11
 8005daa:	617b      	str	r3, [r7, #20]
  canfilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
  canfilterConfig.FilterIdHigh = 0x103<<5;
 8005db0:	f242 0360 	movw	r3, #8288	; 0x2060
 8005db4:	603b      	str	r3, [r7, #0]
  canfilterConfig.FilterIdLow = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	607b      	str	r3, [r7, #4]
  canfilterConfig.FilterMaskIdHigh = 0x103<<5;
 8005dba:	f242 0360 	movw	r3, #8288	; 0x2060
 8005dbe:	60bb      	str	r3, [r7, #8]
  canfilterConfig.FilterMaskIdLow = 0x0000;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]
  canfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61bb      	str	r3, [r7, #24]
  canfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	61fb      	str	r3, [r7, #28]
  canfilterConfig.SlaveStartFilterBank = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterConfig);
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4803      	ldr	r0, [pc, #12]	; (8005de4 <MX_CAN_Init+0xa0>)
 8005dd6:	f000 fe12 	bl	80069fe <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8005dda:	bf00      	nop
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	200002a4 	.word	0x200002a4
 8005de8:	40006400 	.word	0x40006400

08005dec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005e00:	2300      	movs	r3, #0
 8005e02:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005e04:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e06:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <MX_RTC_Init+0xbc>)
 8005e08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005e10:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e12:	227f      	movs	r2, #127	; 0x7f
 8005e14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005e16:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e18:	22ff      	movs	r2, #255	; 0xff
 8005e1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005e1c:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005e22:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005e28:	4b1e      	ldr	r3, [pc, #120]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005e2e:	481d      	ldr	r0, [pc, #116]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e30:	f003 face 	bl	80093d0 <HAL_RTC_Init>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8005e3a:	f000 f965 	bl	8006108 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x02;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x03;
 8005e42:	2303      	movs	r3, #3
 8005e44:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005e52:	1d3b      	adds	r3, r7, #4
 8005e54:	2201      	movs	r2, #1
 8005e56:	4619      	mov	r1, r3
 8005e58:	4812      	ldr	r0, [pc, #72]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e5a:	f003 fb4a 	bl	80094f2 <HAL_RTC_SetTime>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8005e64:	f000 f950 	bl	8006108 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8005e68:	2307      	movs	r3, #7
 8005e6a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8005e6c:	2307      	movs	r3, #7
 8005e6e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8005e70:	2310      	movs	r3, #16
 8005e72:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8005e74:	2322      	movs	r3, #34	; 0x22
 8005e76:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005e78:	463b      	mov	r3, r7
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4809      	ldr	r0, [pc, #36]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e80:	f003 fc52 	bl	8009728 <HAL_RTC_SetDate>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8005e8a:	f000 f93d 	bl	8006108 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 8005e8e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005e92:	2101      	movs	r1, #1
 8005e94:	4803      	ldr	r0, [pc, #12]	; (8005ea4 <MX_RTC_Init+0xb8>)
 8005e96:	f003 fdcd 	bl	8009a34 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 2 */

}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200002cc 	.word	0x200002cc
 8005ea8:	40002800 	.word	0x40002800

08005eac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <MX_SPI1_Init+0x78>)
 8005eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005eb6:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005ebe:	4b18      	ldr	r3, [pc, #96]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ec4:	4b16      	ldr	r3, [pc, #88]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005ec6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005eca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005ecc:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005ece:	2202      	movs	r2, #2
 8005ed0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005ed2:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005ed8:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ede:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005ee2:	2238      	movs	r2, #56	; 0x38
 8005ee4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005efa:	2207      	movs	r2, #7
 8005efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005f0a:	4805      	ldr	r0, [pc, #20]	; (8005f20 <MX_SPI1_Init+0x74>)
 8005f0c:	f003 fdc4 	bl	8009a98 <HAL_SPI_Init>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005f16:	f000 f8f7 	bl	8006108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005f1a:	bf00      	nop
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	200002ec 	.word	0x200002ec
 8005f24:	40013000 	.word	0x40013000

08005f28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005f2c:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f2e:	4a1c      	ldr	r2, [pc, #112]	; (8005fa0 <MX_SPI2_Init+0x78>)
 8005f30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005f32:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005f3a:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005f40:	4b16      	ldr	r3, [pc, #88]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005f46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f48:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005f4e:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005f54:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f5e:	2208      	movs	r2, #8
 8005f60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f62:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005f74:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f76:	2207      	movs	r2, #7
 8005f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005f7a:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f82:	2208      	movs	r2, #8
 8005f84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005f86:	4805      	ldr	r0, [pc, #20]	; (8005f9c <MX_SPI2_Init+0x74>)
 8005f88:	f003 fd86 	bl	8009a98 <HAL_SPI_Init>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005f92:	f000 f8b9 	bl	8006108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005f96:	bf00      	nop
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000350 	.word	0x20000350
 8005fa0:	40003800 	.word	0x40003800

08005fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005fa8:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005faa:	4a15      	ldr	r2, [pc, #84]	; (8006000 <MX_USART2_UART_Init+0x5c>)
 8005fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005fc2:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fca:	220c      	movs	r2, #12
 8005fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fd4:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fe0:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fe6:	4805      	ldr	r0, [pc, #20]	; (8005ffc <MX_USART2_UART_Init+0x58>)
 8005fe8:	f004 fae6 	bl	800a5b8 <HAL_UART_Init>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005ff2:	f000 f889 	bl	8006108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ff6:	bf00      	nop
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200003b4 	.word	0x200003b4
 8006000:	40004400 	.word	0x40004400

08006004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	; 0x28
 8006008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800600a:	f107 0314 	add.w	r3, r7, #20
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	605a      	str	r2, [r3, #4]
 8006014:	609a      	str	r2, [r3, #8]
 8006016:	60da      	str	r2, [r3, #12]
 8006018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800601a:	4b39      	ldr	r3, [pc, #228]	; (8006100 <MX_GPIO_Init+0xfc>)
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	4a38      	ldr	r2, [pc, #224]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006024:	6153      	str	r3, [r2, #20]
 8006026:	4b36      	ldr	r3, [pc, #216]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006032:	4b33      	ldr	r3, [pc, #204]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	4a32      	ldr	r2, [pc, #200]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800603c:	6153      	str	r3, [r2, #20]
 800603e:	4b30      	ldr	r3, [pc, #192]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800604a:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <MX_GPIO_Init+0xfc>)
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	4a2c      	ldr	r2, [pc, #176]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006054:	6153      	str	r3, [r2, #20]
 8006056:	4b2a      	ldr	r3, [pc, #168]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006062:	4b27      	ldr	r3, [pc, #156]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	4a26      	ldr	r2, [pc, #152]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800606c:	6153      	str	r3, [r2, #20]
 800606e:	4b24      	ldr	r3, [pc, #144]	; (8006100 <MX_GPIO_Init+0xfc>)
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800607a:	2200      	movs	r2, #0
 800607c:	2110      	movs	r1, #16
 800607e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006082:	f001 fd27 	bl	8007ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8006086:	2200      	movs	r2, #0
 8006088:	f641 4108 	movw	r1, #7176	; 0x1c08
 800608c:	481d      	ldr	r0, [pc, #116]	; (8006104 <MX_GPIO_Init+0x100>)
 800608e:	f001 fd21 	bl	8007ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006092:	2310      	movs	r3, #16
 8006094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006096:	2301      	movs	r3, #1
 8006098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800609e:	2300      	movs	r3, #0
 80060a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060a2:	f107 0314 	add.w	r3, r7, #20
 80060a6:	4619      	mov	r1, r3
 80060a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060ac:	f001 fb80 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 80060b0:	f641 4308 	movw	r3, #7176	; 0x1c08
 80060b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060b6:	2301      	movs	r3, #1
 80060b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060be:	2300      	movs	r3, #0
 80060c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c2:	f107 0314 	add.w	r3, r7, #20
 80060c6:	4619      	mov	r1, r3
 80060c8:	480e      	ldr	r0, [pc, #56]	; (8006104 <MX_GPIO_Init+0x100>)
 80060ca:	f001 fb71 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80060ce:	2320      	movs	r3, #32
 80060d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80060d2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80060d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4619      	mov	r1, r3
 80060e2:	4808      	ldr	r0, [pc, #32]	; (8006104 <MX_GPIO_Init+0x100>)
 80060e4:	f001 fb64 	bl	80077b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80060e8:	2200      	movs	r2, #0
 80060ea:	2100      	movs	r1, #0
 80060ec:	2017      	movs	r0, #23
 80060ee:	f001 fab2 	bl	8007656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80060f2:	2017      	movs	r0, #23
 80060f4:	f001 facb 	bl	800768e <HAL_NVIC_EnableIRQ>

}
 80060f8:	bf00      	nop
 80060fa:	3728      	adds	r7, #40	; 0x28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40021000 	.word	0x40021000
 8006104:	48000400 	.word	0x48000400

08006108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800610c:	b672      	cpsid	i
}
 800610e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006110:	e7fe      	b.n	8006110 <Error_Handler+0x8>

08006112 <modDelayTick1ms>:
	if(SysTick_Config(72000)){
		while(1); //Error setting SysTick.
	}
}

uint8_t modDelayTick1ms(uint32_t *last, uint32_t ticks) {
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
	if((uint32_t)(HAL_GetTick() - *last) >= ticks)
 800611c:	f000 fb44 	bl	80067a8 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d806      	bhi.n	800613c <modDelayTick1ms+0x2a>
	{
		*last = HAL_GetTick();
 800612e:	f000 fb3b 	bl	80067a8 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	601a      	str	r2, [r3, #0]
		return true;
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <modDelayTick1ms+0x2c>
	}

	return false;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <HAL_MspInit+0x44>)
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	4a0e      	ldr	r2, [pc, #56]	; (800618c <HAL_MspInit+0x44>)
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	6193      	str	r3, [r2, #24]
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <HAL_MspInit+0x44>)
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	607b      	str	r3, [r7, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <HAL_MspInit+0x44>)
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	4a08      	ldr	r2, [pc, #32]	; (800618c <HAL_MspInit+0x44>)
 800616c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006170:	61d3      	str	r3, [r2, #28]
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_MspInit+0x44>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40021000 	.word	0x40021000

08006190 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	60da      	str	r2, [r3, #12]
 80061a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <HAL_CAN_MspInit+0x90>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d131      	bne.n	8006216 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80061b2:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <HAL_CAN_MspInit+0x94>)
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <HAL_CAN_MspInit+0x94>)
 80061b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061bc:	61d3      	str	r3, [r2, #28]
 80061be:	4b19      	ldr	r3, [pc, #100]	; (8006224 <HAL_CAN_MspInit+0x94>)
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ca:	4b16      	ldr	r3, [pc, #88]	; (8006224 <HAL_CAN_MspInit+0x94>)
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	4a15      	ldr	r2, [pc, #84]	; (8006224 <HAL_CAN_MspInit+0x94>)
 80061d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d4:	6153      	str	r3, [r2, #20]
 80061d6:	4b13      	ldr	r3, [pc, #76]	; (8006224 <HAL_CAN_MspInit+0x94>)
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80061e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80061e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e8:	2302      	movs	r3, #2
 80061ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061f0:	2303      	movs	r3, #3
 80061f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80061f4:	2309      	movs	r3, #9
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061f8:	f107 0314 	add.w	r3, r7, #20
 80061fc:	4619      	mov	r1, r3
 80061fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006202:	f001 fad5 	bl	80077b0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8006206:	2200      	movs	r2, #0
 8006208:	2100      	movs	r1, #0
 800620a:	2014      	movs	r0, #20
 800620c:	f001 fa23 	bl	8007656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8006210:	2014      	movs	r0, #20
 8006212:	f001 fa3c 	bl	800768e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8006216:	bf00      	nop
 8006218:	3728      	adds	r7, #40	; 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40006400 	.word	0x40006400
 8006224:	40021000 	.word	0x40021000

08006228 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a0d      	ldr	r2, [pc, #52]	; (800626c <HAL_RTC_MspInit+0x44>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d111      	bne.n	800625e <HAL_RTC_MspInit+0x36>
 800623a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	fa93 f3a3 	rbit	r3, r3
 8006246:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006248:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800624a:	fab3 f383 	clz	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	4b07      	ldr	r3, [pc, #28]	; (8006270 <HAL_RTC_MspInit+0x48>)
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	461a      	mov	r2, r3
 800625a:	2301      	movs	r3, #1
 800625c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40002800 	.word	0x40002800
 8006270:	10908100 	.word	0x10908100

08006274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	; 0x30
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800627c:	f107 031c 	add.w	r3, r7, #28
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	605a      	str	r2, [r3, #4]
 8006286:	609a      	str	r2, [r3, #8]
 8006288:	60da      	str	r2, [r3, #12]
 800628a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <HAL_SPI_MspInit+0xdc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d129      	bne.n	80062ea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006296:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	4a2e      	ldr	r2, [pc, #184]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 800629c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062a0:	6193      	str	r3, [r2, #24]
 80062a2:	4b2c      	ldr	r3, [pc, #176]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ae:	4b29      	ldr	r3, [pc, #164]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	4a28      	ldr	r2, [pc, #160]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 80062b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b8:	6153      	str	r3, [r2, #20]
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80062c6:	23e0      	movs	r3, #224	; 0xe0
 80062c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ca:	2302      	movs	r3, #2
 80062cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062d2:	2303      	movs	r3, #3
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80062d6:	2305      	movs	r3, #5
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062da:	f107 031c 	add.w	r3, r7, #28
 80062de:	4619      	mov	r1, r3
 80062e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062e4:	f001 fa64 	bl	80077b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80062e8:	e02d      	b.n	8006346 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1a      	ldr	r2, [pc, #104]	; (8006358 <HAL_SPI_MspInit+0xe4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d128      	bne.n	8006346 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80062f4:	4b17      	ldr	r3, [pc, #92]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	4a16      	ldr	r2, [pc, #88]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 80062fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062fe:	61d3      	str	r3, [r2, #28]
 8006300:	4b14      	ldr	r3, [pc, #80]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800630c:	4b11      	ldr	r3, [pc, #68]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	4a10      	ldr	r2, [pc, #64]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 8006312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006316:	6153      	str	r3, [r2, #20]
 8006318:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <HAL_SPI_MspInit+0xe0>)
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006324:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800632a:	2302      	movs	r3, #2
 800632c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632e:	2300      	movs	r3, #0
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006332:	2303      	movs	r3, #3
 8006334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006336:	2305      	movs	r3, #5
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800633a:	f107 031c 	add.w	r3, r7, #28
 800633e:	4619      	mov	r1, r3
 8006340:	4806      	ldr	r0, [pc, #24]	; (800635c <HAL_SPI_MspInit+0xe8>)
 8006342:	f001 fa35 	bl	80077b0 <HAL_GPIO_Init>
}
 8006346:	bf00      	nop
 8006348:	3730      	adds	r7, #48	; 0x30
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40013000 	.word	0x40013000
 8006354:	40021000 	.word	0x40021000
 8006358:	40003800 	.word	0x40003800
 800635c:	48000400 	.word	0x48000400

08006360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <HAL_UART_MspInit+0x8c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d130      	bne.n	80063e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006382:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <HAL_UART_MspInit+0x90>)
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <HAL_UART_MspInit+0x90>)
 8006388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800638c:	61d3      	str	r3, [r2, #28]
 800638e:	4b18      	ldr	r3, [pc, #96]	; (80063f0 <HAL_UART_MspInit+0x90>)
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800639a:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <HAL_UART_MspInit+0x90>)
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	4a14      	ldr	r2, [pc, #80]	; (80063f0 <HAL_UART_MspInit+0x90>)
 80063a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a4:	6153      	str	r3, [r2, #20]
 80063a6:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <HAL_UART_MspInit+0x90>)
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80063b2:	230c      	movs	r3, #12
 80063b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b6:	2302      	movs	r3, #2
 80063b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063be:	2303      	movs	r3, #3
 80063c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063c2:	2307      	movs	r3, #7
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c6:	f107 0314 	add.w	r3, r7, #20
 80063ca:	4619      	mov	r1, r3
 80063cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063d0:	f001 f9ee 	bl	80077b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80063d4:	2200      	movs	r2, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	2026      	movs	r0, #38	; 0x26
 80063da:	f001 f93c 	bl	8007656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063de:	2026      	movs	r0, #38	; 0x26
 80063e0:	f001 f955 	bl	800768e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80063e4:	bf00      	nop
 80063e6:	3728      	adds	r7, #40	; 0x28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40004400 	.word	0x40004400
 80063f0:	40021000 	.word	0x40021000

080063f4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80063f8:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <SDTimer_Handler+0x40>)
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d006      	beq.n	8006410 <SDTimer_Handler+0x1c>
    Timer1--;
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <SDTimer_Handler+0x40>)
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <SDTimer_Handler+0x40>)
 800640e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8006410:	4b09      	ldr	r3, [pc, #36]	; (8006438 <SDTimer_Handler+0x44>)
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d006      	beq.n	8006428 <SDTimer_Handler+0x34>
    Timer2--;
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <SDTimer_Handler+0x44>)
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	4b04      	ldr	r3, [pc, #16]	; (8006438 <SDTimer_Handler+0x44>)
 8006426:	801a      	strh	r2, [r3, #0]
}
 8006428:	bf00      	nop
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20002b5a 	.word	0x20002b5a
 8006438:	20002b5c 	.word	0x20002b5c

0800643c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006440:	e7fe      	b.n	8006440 <NMI_Handler+0x4>

08006442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006442:	b480      	push	{r7}
 8006444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006446:	e7fe      	b.n	8006446 <HardFault_Handler+0x4>

08006448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800644c:	e7fe      	b.n	800644c <MemManage_Handler+0x4>

0800644e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800644e:	b480      	push	{r7}
 8006450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006452:	e7fe      	b.n	8006452 <BusFault_Handler+0x4>

08006454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006458:	e7fe      	b.n	8006458 <UsageFault_Handler+0x4>

0800645a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800645a:	b480      	push	{r7}
 800645c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800646c:	bf00      	nop
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006476:	b480      	push	{r7}
 8006478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800647a:	bf00      	nop
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <SysTick_Handler+0x30>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	3301      	adds	r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <SysTick_Handler+0x30>)
 8006494:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <SysTick_Handler+0x30>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b09      	cmp	r3, #9
 800649e:	d904      	bls.n	80064aa <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <SysTick_Handler+0x30>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80064a6:	f7ff ffa5 	bl	80063f4 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064aa:	f000 f969 	bl	8006780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064ae:	bf00      	nop
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20002b58 	.word	0x20002b58

080064b8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80064bc:	4802      	ldr	r0, [pc, #8]	; (80064c8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80064be:	f000 fdbf 	bl	8007040 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80064c2:	bf00      	nop
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200002a4 	.word	0x200002a4

080064cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80064d0:	2020      	movs	r0, #32
 80064d2:	f001 fb31 	bl	8007b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80064e0:	4802      	ldr	r0, [pc, #8]	; (80064ec <USART2_IRQHandler+0x10>)
 80064e2:	f004 f999 	bl	800a818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80064e6:	bf00      	nop
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200003b4 	.word	0x200003b4

080064f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
	return 1;
 80064f4:	2301      	movs	r3, #1
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <_kill>:

int _kill(int pid, int sig)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800650a:	f009 ff55 	bl	80103b8 <__errno>
 800650e:	4603      	mov	r3, r0
 8006510:	2216      	movs	r2, #22
 8006512:	601a      	str	r2, [r3, #0]
	return -1;
 8006514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <_exit>:

void _exit (int status)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006528:	f04f 31ff 	mov.w	r1, #4294967295
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ffe7 	bl	8006500 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006532:	e7fe      	b.n	8006532 <_exit+0x12>

08006534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e00a      	b.n	800655c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006546:	f3af 8000 	nop.w
 800654a:	4601      	mov	r1, r0
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	60ba      	str	r2, [r7, #8]
 8006552:	b2ca      	uxtb	r2, r1
 8006554:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	3301      	adds	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	dbf0      	blt.n	8006546 <_read+0x12>
	}

return len;
 8006564:	687b      	ldr	r3, [r7, #4]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e009      	b.n	8006594 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	60ba      	str	r2, [r7, #8]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	3301      	adds	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	dbf1      	blt.n	8006580 <_write+0x12>
	}
	return len;
 800659c:	687b      	ldr	r3, [r7, #4]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <_close>:

int _close(int file)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
	return -1;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065ce:	605a      	str	r2, [r3, #4]
	return 0;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <_isatty>:

int _isatty(int file)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
	return 1;
 80065e6:	2301      	movs	r3, #1
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	return 0;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006618:	4a14      	ldr	r2, [pc, #80]	; (800666c <_sbrk+0x5c>)
 800661a:	4b15      	ldr	r3, [pc, #84]	; (8006670 <_sbrk+0x60>)
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006624:	4b13      	ldr	r3, [pc, #76]	; (8006674 <_sbrk+0x64>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800662c:	4b11      	ldr	r3, [pc, #68]	; (8006674 <_sbrk+0x64>)
 800662e:	4a12      	ldr	r2, [pc, #72]	; (8006678 <_sbrk+0x68>)
 8006630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006632:	4b10      	ldr	r3, [pc, #64]	; (8006674 <_sbrk+0x64>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4413      	add	r3, r2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	429a      	cmp	r2, r3
 800663e:	d207      	bcs.n	8006650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006640:	f009 feba 	bl	80103b8 <__errno>
 8006644:	4603      	mov	r3, r0
 8006646:	220c      	movs	r2, #12
 8006648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	e009      	b.n	8006664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006650:	4b08      	ldr	r3, [pc, #32]	; (8006674 <_sbrk+0x64>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <_sbrk+0x64>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	4a05      	ldr	r2, [pc, #20]	; (8006674 <_sbrk+0x64>)
 8006660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	2000a000 	.word	0x2000a000
 8006670:	00000400 	.word	0x00000400
 8006674:	20002b60 	.word	0x20002b60
 8006678:	20002db0 	.word	0x20002db0

0800667c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <SystemInit+0x20>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	4a05      	ldr	r2, [pc, #20]	; (800669c <SystemInit+0x20>)
 8006688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800668c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006690:	bf00      	nop
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	e000ed00 	.word	0xe000ed00

080066a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80066a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80066a4:	480d      	ldr	r0, [pc, #52]	; (80066dc <LoopForever+0x6>)
  ldr r1, =_edata
 80066a6:	490e      	ldr	r1, [pc, #56]	; (80066e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80066a8:	4a0e      	ldr	r2, [pc, #56]	; (80066e4 <LoopForever+0xe>)
  movs r3, #0
 80066aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066ac:	e002      	b.n	80066b4 <LoopCopyDataInit>

080066ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066b2:	3304      	adds	r3, #4

080066b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066b8:	d3f9      	bcc.n	80066ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066ba:	4a0b      	ldr	r2, [pc, #44]	; (80066e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80066bc:	4c0b      	ldr	r4, [pc, #44]	; (80066ec <LoopForever+0x16>)
  movs r3, #0
 80066be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066c0:	e001      	b.n	80066c6 <LoopFillZerobss>

080066c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066c4:	3204      	adds	r2, #4

080066c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066c8:	d3fb      	bcc.n	80066c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80066ca:	f7ff ffd7 	bl	800667c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066ce:	f009 fe79 	bl	80103c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80066d2:	f7ff f9f7 	bl	8005ac4 <main>

080066d6 <LoopForever>:

LoopForever:
    b LoopForever
 80066d6:	e7fe      	b.n	80066d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80066d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80066dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066e0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80066e4:	080149d4 	.word	0x080149d4
  ldr r2, =_sbss
 80066e8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80066ec:	20002dac 	.word	0x20002dac

080066f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80066f0:	e7fe      	b.n	80066f0 <ADC1_2_IRQHandler>
	...

080066f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066f8:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_Init+0x28>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a07      	ldr	r2, [pc, #28]	; (800671c <HAL_Init+0x28>)
 80066fe:	f043 0310 	orr.w	r3, r3, #16
 8006702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006704:	2003      	movs	r0, #3
 8006706:	f000 ff9b 	bl	8007640 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800670a:	200f      	movs	r0, #15
 800670c:	f000 f808 	bl	8006720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006710:	f7ff fd1a 	bl	8006148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40022000 	.word	0x40022000

08006720 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_InitTick+0x54>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4b12      	ldr	r3, [pc, #72]	; (8006778 <HAL_InitTick+0x58>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	4619      	mov	r1, r3
 8006732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006736:	fbb3 f3f1 	udiv	r3, r3, r1
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	4618      	mov	r0, r3
 8006740:	f000 ffb3 	bl	80076aa <HAL_SYSTICK_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e00e      	b.n	800676c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b0f      	cmp	r3, #15
 8006752:	d80a      	bhi.n	800676a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006754:	2200      	movs	r2, #0
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	f000 ff7b 	bl	8007656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006760:	4a06      	ldr	r2, [pc, #24]	; (800677c <HAL_InitTick+0x5c>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e000      	b.n	800676c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000004 	.word	0x20000004
 8006778:	2000000c 	.word	0x2000000c
 800677c:	20000008 	.word	0x20000008

08006780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_IncTick+0x20>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_IncTick+0x24>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4413      	add	r3, r2
 8006790:	4a04      	ldr	r2, [pc, #16]	; (80067a4 <HAL_IncTick+0x24>)
 8006792:	6013      	str	r3, [r2, #0]
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	2000000c 	.word	0x2000000c
 80067a4:	20002b64 	.word	0x20002b64

080067a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <HAL_GetTick+0x14>)
 80067ae:	681b      	ldr	r3, [r3, #0]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20002b64 	.word	0x20002b64

080067c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067c8:	f7ff ffee 	bl	80067a8 <HAL_GetTick>
 80067cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d005      	beq.n	80067e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067da:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <HAL_Delay+0x44>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80067e6:	bf00      	nop
 80067e8:	f7ff ffde 	bl	80067a8 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d8f7      	bhi.n	80067e8 <HAL_Delay+0x28>
  {
  }
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	2000000c 	.word	0x2000000c

08006808 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e0ed      	b.n	80069f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff fcb2 	bl	8006190 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800683c:	f7ff ffb4 	bl	80067a8 <HAL_GetTick>
 8006840:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006842:	e012      	b.n	800686a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006844:	f7ff ffb0 	bl	80067a8 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b0a      	cmp	r3, #10
 8006850:	d90b      	bls.n	800686a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2205      	movs	r2, #5
 8006862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e0c5      	b.n	80069f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0e5      	beq.n	8006844 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0202 	bic.w	r2, r2, #2
 8006886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006888:	f7ff ff8e 	bl	80067a8 <HAL_GetTick>
 800688c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800688e:	e012      	b.n	80068b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006890:	f7ff ff8a 	bl	80067a8 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b0a      	cmp	r3, #10
 800689c:	d90b      	bls.n	80068b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2205      	movs	r2, #5
 80068ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e09f      	b.n	80069f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e5      	bne.n	8006890 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7e1b      	ldrb	r3, [r3, #24]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d108      	bne.n	80068de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e007      	b.n	80068ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7e5b      	ldrb	r3, [r3, #25]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d108      	bne.n	8006908 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e007      	b.n	8006918 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006916:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7e9b      	ldrb	r3, [r3, #26]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d108      	bne.n	8006932 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0220 	orr.w	r2, r2, #32
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e007      	b.n	8006942 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0220 	bic.w	r2, r2, #32
 8006940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7edb      	ldrb	r3, [r3, #27]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d108      	bne.n	800695c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0210 	bic.w	r2, r2, #16
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e007      	b.n	800696c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0210 	orr.w	r2, r2, #16
 800696a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	7f1b      	ldrb	r3, [r3, #28]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d108      	bne.n	8006986 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0208 	orr.w	r2, r2, #8
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	e007      	b.n	8006996 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0208 	bic.w	r2, r2, #8
 8006994:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7f5b      	ldrb	r3, [r3, #29]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d108      	bne.n	80069b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0204 	orr.w	r2, r2, #4
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e007      	b.n	80069c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0204 	bic.w	r2, r2, #4
 80069be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	ea42 0103 	orr.w	r1, r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	1e5a      	subs	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006a16:	7cfb      	ldrb	r3, [r7, #19]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d003      	beq.n	8006a24 <HAL_CAN_ConfigFilter+0x26>
 8006a1c:	7cfb      	ldrb	r3, [r7, #19]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	f040 80aa 	bne.w	8006b78 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a2a:	f043 0201 	orr.w	r2, r3, #1
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f003 031f 	and.w	r3, r3, #31
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	401a      	ands	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d123      	bne.n	8006aa6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	43db      	mvns	r3, r3
 8006a68:	401a      	ands	r2, r3
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006a80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	3248      	adds	r2, #72	; 0x48
 8006a86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006a9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006a9c:	6979      	ldr	r1, [r7, #20]
 8006a9e:	3348      	adds	r3, #72	; 0x48
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	440b      	add	r3, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d122      	bne.n	8006af4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006ace:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	3248      	adds	r2, #72	; 0x48
 8006ad4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006ae8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006aea:	6979      	ldr	r1, [r7, #20]
 8006aec:	3348      	adds	r3, #72	; 0x48
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	440b      	add	r3, r1
 8006af2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006b0e:	e007      	b.n	8006b20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	401a      	ands	r2, r3
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006b3a:	e007      	b.n	8006b4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d107      	bne.n	8006b64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b6a:	f023 0201 	bic.w	r2, r3, #1
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e006      	b.n	8006b86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
  }
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d12e      	bne.n	8006c04 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0201 	bic.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bbe:	f7ff fdf3 	bl	80067a8 <HAL_GetTick>
 8006bc2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006bc4:	e012      	b.n	8006bec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006bc6:	f7ff fdef 	bl	80067a8 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b0a      	cmp	r3, #10
 8006bd2:	d90b      	bls.n	8006bec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2205      	movs	r2, #5
 8006be4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e012      	b.n	8006c12 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e006      	b.n	8006c12 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b089      	sub	sp, #36	; 0x24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006c38:	7ffb      	ldrb	r3, [r7, #31]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d003      	beq.n	8006c46 <HAL_CAN_AddTxMessage+0x2c>
 8006c3e:	7ffb      	ldrb	r3, [r7, #31]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	f040 80b8 	bne.w	8006db6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80a0 	beq.w	8006da6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	0e1b      	lsrs	r3, r3, #24
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d907      	bls.n	8006c86 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e09e      	b.n	8006dc4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006c86:	2201      	movs	r2, #1
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	409a      	lsls	r2, r3
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10d      	bne.n	8006cb4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006ca2:	68f9      	ldr	r1, [r7, #12]
 8006ca4:	6809      	ldr	r1, [r1, #0]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3318      	adds	r3, #24
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	440b      	add	r3, r1
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	e00f      	b.n	8006cd4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006cbe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006cc4:	68f9      	ldr	r1, [r7, #12]
 8006cc6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006cc8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	3318      	adds	r3, #24
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	440b      	add	r3, r1
 8006cd2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6819      	ldr	r1, [r3, #0]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	3318      	adds	r3, #24
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	7d1b      	ldrb	r3, [r3, #20]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d111      	bne.n	8006d14 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	3318      	adds	r3, #24
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	6811      	ldr	r1, [r2, #0]
 8006d04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	440b      	add	r3, r1
 8006d10:	3304      	adds	r3, #4
 8006d12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3307      	adds	r3, #7
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	061a      	lsls	r2, r3, #24
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3306      	adds	r3, #6
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	041b      	lsls	r3, r3, #16
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3305      	adds	r3, #5
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	3204      	adds	r2, #4
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	4610      	mov	r0, r2
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	6811      	ldr	r1, [r2, #0]
 8006d3c:	ea43 0200 	orr.w	r2, r3, r0
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	440b      	add	r3, r1
 8006d46:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006d4a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3303      	adds	r3, #3
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	061a      	lsls	r2, r3, #24
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3302      	adds	r3, #2
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	041b      	lsls	r3, r3, #16
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3301      	adds	r3, #1
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	4313      	orrs	r3, r2
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	6811      	ldr	r1, [r2, #0]
 8006d72:	ea43 0200 	orr.w	r2, r3, r0
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	440b      	add	r3, r1
 8006d7c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006d80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	3318      	adds	r3, #24
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	4413      	add	r3, r2
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	6811      	ldr	r1, [r2, #0]
 8006d94:	f043 0201 	orr.w	r2, r3, #1
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	3318      	adds	r3, #24
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	440b      	add	r3, r1
 8006da0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e00e      	b.n	8006dc4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e006      	b.n	8006dc4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
  }
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3724      	adds	r7, #36	; 0x24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006de4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d003      	beq.n	8006df4 <HAL_CAN_GetRxMessage+0x24>
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	f040 80f3 	bne.w	8006fda <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10e      	bne.n	8006e18 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d116      	bne.n	8006e36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0e7      	b.n	8006fe8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d107      	bne.n	8006e36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e0d8      	b.n	8006fe8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	331b      	adds	r3, #27
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	4413      	add	r3, r2
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0204 	and.w	r2, r3, #4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10c      	bne.n	8006e6e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	331b      	adds	r3, #27
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	4413      	add	r3, r2
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	0d5b      	lsrs	r3, r3, #21
 8006e64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	e00b      	b.n	8006e86 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	331b      	adds	r3, #27
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	4413      	add	r3, r2
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	08db      	lsrs	r3, r3, #3
 8006e7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	331b      	adds	r3, #27
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	4413      	add	r3, r2
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0202 	and.w	r2, r3, #2
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	331b      	adds	r3, #27
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 020f 	and.w	r2, r3, #15
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	331b      	adds	r3, #27
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	0a1b      	lsrs	r3, r3, #8
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	331b      	adds	r3, #27
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3304      	adds	r3, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	0a1a      	lsrs	r2, r3, #8
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	0c1a      	lsrs	r2, r3, #16
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	3302      	adds	r3, #2
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	0e1a      	lsrs	r2, r3, #24
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	3303      	adds	r3, #3
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	0a1a      	lsrs	r2, r3, #8
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	3305      	adds	r3, #5
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	0c1a      	lsrs	r2, r3, #16
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	3306      	adds	r3, #6
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	0e1a      	lsrs	r2, r3, #24
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	3307      	adds	r3, #7
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d108      	bne.n	8006fc6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0220 	orr.w	r2, r2, #32
 8006fc2:	60da      	str	r2, [r3, #12]
 8006fc4:	e007      	b.n	8006fd6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0220 	orr.w	r2, r2, #32
 8006fd4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e006      	b.n	8006fe8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
  }
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007004:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d002      	beq.n	8007012 <HAL_CAN_ActivateNotification+0x1e>
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d109      	bne.n	8007026 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6959      	ldr	r1, [r3, #20]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e006      	b.n	8007034 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
  }
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007048:	2300      	movs	r3, #0
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d07c      	beq.n	8007180 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d023      	beq.n	80070d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2201      	movs	r2, #1
 8007096:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f983 	bl	80073ae <HAL_CAN_TxMailbox0CompleteCallback>
 80070a8:	e016      	b.n	80070d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
 80070bc:	e00c      	b.n	80070d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
 80070d0:	e002      	b.n	80070d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f989 	bl	80073ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d024      	beq.n	800712c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f963 	bl	80073c2 <HAL_CAN_TxMailbox1CompleteCallback>
 80070fc:	e016      	b.n	800712c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
 8007110:	e00c      	b.n	800712c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
 8007124:	e002      	b.n	800712c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f969 	bl	80073fe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d024      	beq.n	8007180 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800713e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f943 	bl	80073d6 <HAL_CAN_TxMailbox2CompleteCallback>
 8007150:	e016      	b.n	8007180 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
 8007164:	e00c      	b.n	8007180 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
 8007178:	e002      	b.n	8007180 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f949 	bl	8007412 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00c      	beq.n	80071a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	d007      	beq.n	80071a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800719a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2210      	movs	r2, #16
 80071a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f003 0308 	and.w	r3, r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2208      	movs	r2, #8
 80071be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f930 	bl	8007426 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fc fed8 	bl	8003f94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2210      	movs	r2, #16
 8007206:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2208      	movs	r2, #8
 8007222:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f912 	bl	800744e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	d009      	beq.n	8007248 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f8f9 	bl	800743a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2210      	movs	r2, #16
 8007262:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f8fc 	bl	8007462 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d006      	beq.n	800728c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2208      	movs	r2, #8
 8007284:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f8f5 	bl	8007476 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d07b      	beq.n	800738e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d072      	beq.n	8007386 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d008      	beq.n	80072bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	f043 0302 	orr.w	r3, r3, #2
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d008      	beq.n	80072f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	f043 0304 	orr.w	r3, r3, #4
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d043      	beq.n	8007386 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007304:	2b00      	cmp	r3, #0
 8007306:	d03e      	beq.n	8007386 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800730e:	2b60      	cmp	r3, #96	; 0x60
 8007310:	d02b      	beq.n	800736a <HAL_CAN_IRQHandler+0x32a>
 8007312:	2b60      	cmp	r3, #96	; 0x60
 8007314:	d82e      	bhi.n	8007374 <HAL_CAN_IRQHandler+0x334>
 8007316:	2b50      	cmp	r3, #80	; 0x50
 8007318:	d022      	beq.n	8007360 <HAL_CAN_IRQHandler+0x320>
 800731a:	2b50      	cmp	r3, #80	; 0x50
 800731c:	d82a      	bhi.n	8007374 <HAL_CAN_IRQHandler+0x334>
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d019      	beq.n	8007356 <HAL_CAN_IRQHandler+0x316>
 8007322:	2b40      	cmp	r3, #64	; 0x40
 8007324:	d826      	bhi.n	8007374 <HAL_CAN_IRQHandler+0x334>
 8007326:	2b30      	cmp	r3, #48	; 0x30
 8007328:	d010      	beq.n	800734c <HAL_CAN_IRQHandler+0x30c>
 800732a:	2b30      	cmp	r3, #48	; 0x30
 800732c:	d822      	bhi.n	8007374 <HAL_CAN_IRQHandler+0x334>
 800732e:	2b10      	cmp	r3, #16
 8007330:	d002      	beq.n	8007338 <HAL_CAN_IRQHandler+0x2f8>
 8007332:	2b20      	cmp	r3, #32
 8007334:	d005      	beq.n	8007342 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007336:	e01d      	b.n	8007374 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	f043 0308 	orr.w	r3, r3, #8
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007340:	e019      	b.n	8007376 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	f043 0310 	orr.w	r3, r3, #16
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800734a:	e014      	b.n	8007376 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	f043 0320 	orr.w	r3, r3, #32
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007354:	e00f      	b.n	8007376 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800735e:	e00a      	b.n	8007376 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007368:	e005      	b.n	8007376 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007372:	e000      	b.n	8007376 <HAL_CAN_IRQHandler+0x336>
            break;
 8007374:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007384:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2204      	movs	r2, #4
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f872 	bl	800748a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80073a6:	bf00      	nop
 80073a8:	3728      	adds	r7, #40	; 0x28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074b0:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <__NVIC_SetPriorityGrouping+0x44>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80074bc:	4013      	ands	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80074cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074d2:	4a04      	ldr	r2, [pc, #16]	; (80074e4 <__NVIC_SetPriorityGrouping+0x44>)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	60d3      	str	r3, [r2, #12]
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	e000ed00 	.word	0xe000ed00

080074e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074ec:	4b04      	ldr	r3, [pc, #16]	; (8007500 <__NVIC_GetPriorityGrouping+0x18>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	f003 0307 	and.w	r3, r3, #7
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	e000ed00 	.word	0xe000ed00

08007504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800750e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007512:	2b00      	cmp	r3, #0
 8007514:	db0b      	blt.n	800752e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	f003 021f 	and.w	r2, r3, #31
 800751c:	4907      	ldr	r1, [pc, #28]	; (800753c <__NVIC_EnableIRQ+0x38>)
 800751e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	2001      	movs	r0, #1
 8007526:	fa00 f202 	lsl.w	r2, r0, r2
 800752a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	e000e100 	.word	0xe000e100

08007540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800754c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007550:	2b00      	cmp	r3, #0
 8007552:	db0a      	blt.n	800756a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	b2da      	uxtb	r2, r3
 8007558:	490c      	ldr	r1, [pc, #48]	; (800758c <__NVIC_SetPriority+0x4c>)
 800755a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800755e:	0112      	lsls	r2, r2, #4
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	440b      	add	r3, r1
 8007564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007568:	e00a      	b.n	8007580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	b2da      	uxtb	r2, r3
 800756e:	4908      	ldr	r1, [pc, #32]	; (8007590 <__NVIC_SetPriority+0x50>)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	3b04      	subs	r3, #4
 8007578:	0112      	lsls	r2, r2, #4
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	440b      	add	r3, r1
 800757e:	761a      	strb	r2, [r3, #24]
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	e000e100 	.word	0xe000e100
 8007590:	e000ed00 	.word	0xe000ed00

08007594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007594:	b480      	push	{r7}
 8007596:	b089      	sub	sp, #36	; 0x24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f1c3 0307 	rsb	r3, r3, #7
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	bf28      	it	cs
 80075b2:	2304      	movcs	r3, #4
 80075b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	3304      	adds	r3, #4
 80075ba:	2b06      	cmp	r3, #6
 80075bc:	d902      	bls.n	80075c4 <NVIC_EncodePriority+0x30>
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	3b03      	subs	r3, #3
 80075c2:	e000      	b.n	80075c6 <NVIC_EncodePriority+0x32>
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075c8:	f04f 32ff 	mov.w	r2, #4294967295
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	43da      	mvns	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	401a      	ands	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075dc:	f04f 31ff 	mov.w	r1, #4294967295
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	fa01 f303 	lsl.w	r3, r1, r3
 80075e6:	43d9      	mvns	r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075ec:	4313      	orrs	r3, r2
         );
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3724      	adds	r7, #36	; 0x24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3b01      	subs	r3, #1
 8007608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800760c:	d301      	bcc.n	8007612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800760e:	2301      	movs	r3, #1
 8007610:	e00f      	b.n	8007632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007612:	4a0a      	ldr	r2, [pc, #40]	; (800763c <SysTick_Config+0x40>)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3b01      	subs	r3, #1
 8007618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800761a:	210f      	movs	r1, #15
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	f7ff ff8e 	bl	8007540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007624:	4b05      	ldr	r3, [pc, #20]	; (800763c <SysTick_Config+0x40>)
 8007626:	2200      	movs	r2, #0
 8007628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800762a:	4b04      	ldr	r3, [pc, #16]	; (800763c <SysTick_Config+0x40>)
 800762c:	2207      	movs	r2, #7
 800762e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	e000e010 	.word	0xe000e010

08007640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff ff29 	bl	80074a0 <__NVIC_SetPriorityGrouping>
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b086      	sub	sp, #24
 800765a:	af00      	add	r7, sp, #0
 800765c:	4603      	mov	r3, r0
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607a      	str	r2, [r7, #4]
 8007662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007668:	f7ff ff3e 	bl	80074e8 <__NVIC_GetPriorityGrouping>
 800766c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	6978      	ldr	r0, [r7, #20]
 8007674:	f7ff ff8e 	bl	8007594 <NVIC_EncodePriority>
 8007678:	4602      	mov	r2, r0
 800767a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff ff5d 	bl	8007540 <__NVIC_SetPriority>
}
 8007686:	bf00      	nop
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	4603      	mov	r3, r0
 8007696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff ff31 	bl	8007504 <__NVIC_EnableIRQ>
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff ffa2 	bl	80075fc <SysTick_Config>
 80076b8:	4603      	mov	r3, r0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d008      	beq.n	80076e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2204      	movs	r2, #4
 80076d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e020      	b.n	8007728 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 020e 	bic.w	r2, r2, #14
 80076f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 0201 	bic.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770e:	2101      	movs	r1, #1
 8007710:	fa01 f202 	lsl.w	r2, r1, r2
 8007714:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007746:	2b02      	cmp	r3, #2
 8007748:	d005      	beq.n	8007756 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2204      	movs	r2, #4
 800774e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	e027      	b.n	80077a6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 020e 	bic.w	r2, r2, #14
 8007764:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	2101      	movs	r1, #1
 8007780:	fa01 f202 	lsl.w	r2, r1, r2
 8007784:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
    } 
  }
  return status;
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077be:	e154      	b.n	8007a6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	2101      	movs	r1, #1
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	fa01 f303 	lsl.w	r3, r1, r3
 80077cc:	4013      	ands	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 8146 	beq.w	8007a64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d005      	beq.n	80077f0 <HAL_GPIO_Init+0x40>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d130      	bne.n	8007852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	2203      	movs	r2, #3
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	43db      	mvns	r3, r3
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4013      	ands	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007826:	2201      	movs	r2, #1
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	fa02 f303 	lsl.w	r3, r2, r3
 800782e:	43db      	mvns	r3, r3
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4013      	ands	r3, r2
 8007834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 0201 	and.w	r2, r3, #1
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	2b03      	cmp	r3, #3
 800785c:	d017      	beq.n	800788e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	2203      	movs	r2, #3
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	43db      	mvns	r3, r3
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	4013      	ands	r3, r2
 8007874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	4313      	orrs	r3, r2
 8007886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d123      	bne.n	80078e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	08da      	lsrs	r2, r3, #3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3208      	adds	r2, #8
 80078a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	220f      	movs	r2, #15
 80078b2:	fa02 f303 	lsl.w	r3, r2, r3
 80078b6:	43db      	mvns	r3, r3
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4013      	ands	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f003 0307 	and.w	r3, r3, #7
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	08da      	lsrs	r2, r3, #3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3208      	adds	r2, #8
 80078dc:	6939      	ldr	r1, [r7, #16]
 80078de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	2203      	movs	r2, #3
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	43db      	mvns	r3, r3
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4013      	ands	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f003 0203 	and.w	r2, r3, #3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80a0 	beq.w	8007a64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007924:	4b58      	ldr	r3, [pc, #352]	; (8007a88 <HAL_GPIO_Init+0x2d8>)
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	4a57      	ldr	r2, [pc, #348]	; (8007a88 <HAL_GPIO_Init+0x2d8>)
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	6193      	str	r3, [r2, #24]
 8007930:	4b55      	ldr	r3, [pc, #340]	; (8007a88 <HAL_GPIO_Init+0x2d8>)
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800793c:	4a53      	ldr	r2, [pc, #332]	; (8007a8c <HAL_GPIO_Init+0x2dc>)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	089b      	lsrs	r3, r3, #2
 8007942:	3302      	adds	r3, #2
 8007944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f003 0303 	and.w	r3, r3, #3
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	220f      	movs	r2, #15
 8007954:	fa02 f303 	lsl.w	r3, r2, r3
 8007958:	43db      	mvns	r3, r3
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4013      	ands	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007966:	d019      	beq.n	800799c <HAL_GPIO_Init+0x1ec>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a49      	ldr	r2, [pc, #292]	; (8007a90 <HAL_GPIO_Init+0x2e0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d013      	beq.n	8007998 <HAL_GPIO_Init+0x1e8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a48      	ldr	r2, [pc, #288]	; (8007a94 <HAL_GPIO_Init+0x2e4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00d      	beq.n	8007994 <HAL_GPIO_Init+0x1e4>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a47      	ldr	r2, [pc, #284]	; (8007a98 <HAL_GPIO_Init+0x2e8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d007      	beq.n	8007990 <HAL_GPIO_Init+0x1e0>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a46      	ldr	r2, [pc, #280]	; (8007a9c <HAL_GPIO_Init+0x2ec>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d101      	bne.n	800798c <HAL_GPIO_Init+0x1dc>
 8007988:	2304      	movs	r3, #4
 800798a:	e008      	b.n	800799e <HAL_GPIO_Init+0x1ee>
 800798c:	2305      	movs	r3, #5
 800798e:	e006      	b.n	800799e <HAL_GPIO_Init+0x1ee>
 8007990:	2303      	movs	r3, #3
 8007992:	e004      	b.n	800799e <HAL_GPIO_Init+0x1ee>
 8007994:	2302      	movs	r3, #2
 8007996:	e002      	b.n	800799e <HAL_GPIO_Init+0x1ee>
 8007998:	2301      	movs	r3, #1
 800799a:	e000      	b.n	800799e <HAL_GPIO_Init+0x1ee>
 800799c:	2300      	movs	r3, #0
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	f002 0203 	and.w	r2, r2, #3
 80079a4:	0092      	lsls	r2, r2, #2
 80079a6:	4093      	lsls	r3, r2
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80079ae:	4937      	ldr	r1, [pc, #220]	; (8007a8c <HAL_GPIO_Init+0x2dc>)
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	089b      	lsrs	r3, r3, #2
 80079b4:	3302      	adds	r3, #2
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079bc:	4b38      	ldr	r3, [pc, #224]	; (8007aa0 <HAL_GPIO_Init+0x2f0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	43db      	mvns	r3, r3
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4013      	ands	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80079e0:	4a2f      	ldr	r2, [pc, #188]	; (8007aa0 <HAL_GPIO_Init+0x2f0>)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80079e6:	4b2e      	ldr	r3, [pc, #184]	; (8007aa0 <HAL_GPIO_Init+0x2f0>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	43db      	mvns	r3, r3
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4013      	ands	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007a0a:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <HAL_GPIO_Init+0x2f0>)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a10:	4b23      	ldr	r3, [pc, #140]	; (8007aa0 <HAL_GPIO_Init+0x2f0>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007a34:	4a1a      	ldr	r2, [pc, #104]	; (8007aa0 <HAL_GPIO_Init+0x2f0>)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a3a:	4b19      	ldr	r3, [pc, #100]	; (8007aa0 <HAL_GPIO_Init+0x2f0>)
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	43db      	mvns	r3, r3
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4013      	ands	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007a5e:	4a10      	ldr	r2, [pc, #64]	; (8007aa0 <HAL_GPIO_Init+0x2f0>)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	3301      	adds	r3, #1
 8007a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	fa22 f303 	lsr.w	r3, r2, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f47f aea3 	bne.w	80077c0 <HAL_GPIO_Init+0x10>
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	48000400 	.word	0x48000400
 8007a94:	48000800 	.word	0x48000800
 8007a98:	48000c00 	.word	0x48000c00
 8007a9c:	48001000 	.word	0x48001000
 8007aa0:	40010400 	.word	0x40010400

08007aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	887b      	ldrh	r3, [r7, #2]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007abc:	2301      	movs	r3, #1
 8007abe:	73fb      	strb	r3, [r7, #15]
 8007ac0:	e001      	b.n	8007ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	807b      	strh	r3, [r7, #2]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ae4:	787b      	ldrb	r3, [r7, #1]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007aea:	887a      	ldrh	r2, [r7, #2]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007af0:	e002      	b.n	8007af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007af2:	887a      	ldrh	r2, [r7, #2]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b16:	887a      	ldrh	r2, [r7, #2]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	041a      	lsls	r2, r3, #16
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	43d9      	mvns	r1, r3
 8007b22:	887b      	ldrh	r3, [r7, #2]
 8007b24:	400b      	ands	r3, r1
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	619a      	str	r2, [r3, #24]
}
 8007b2c:	bf00      	nop
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007b42:	4b08      	ldr	r3, [pc, #32]	; (8007b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b44:	695a      	ldr	r2, [r3, #20]
 8007b46:	88fb      	ldrh	r3, [r7, #6]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d006      	beq.n	8007b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b4e:	4a05      	ldr	r2, [pc, #20]	; (8007b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fc facc 	bl	80040f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	40010400 	.word	0x40010400

08007b68 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a04      	ldr	r2, [pc, #16]	; (8007b84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b76:	6013      	str	r3, [r2, #0]
}
 8007b78:	bf00      	nop
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	40007000 	.word	0x40007000

08007b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	f001 b823 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 817d 	beq.w	8007ebe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007bc4:	4bbc      	ldr	r3, [pc, #752]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f003 030c 	and.w	r3, r3, #12
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d00c      	beq.n	8007bea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007bd0:	4bb9      	ldr	r3, [pc, #740]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f003 030c 	and.w	r3, r3, #12
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d15c      	bne.n	8007c96 <HAL_RCC_OscConfig+0x10e>
 8007bdc:	4bb6      	ldr	r3, [pc, #728]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be8:	d155      	bne.n	8007c96 <HAL_RCC_OscConfig+0x10e>
 8007bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007bf6:	fa93 f3a3 	rbit	r3, r3
 8007bfa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8007bfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c02:	fab3 f383 	clz	r3, r3
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	095b      	lsrs	r3, r3, #5
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	f043 0301 	orr.w	r3, r3, #1
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d102      	bne.n	8007c1c <HAL_RCC_OscConfig+0x94>
 8007c16:	4ba8      	ldr	r3, [pc, #672]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	e015      	b.n	8007c48 <HAL_RCC_OscConfig+0xc0>
 8007c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007c28:	fa93 f3a3 	rbit	r3, r3
 8007c2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007c38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007c3c:	fa93 f3a3 	rbit	r3, r3
 8007c40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007c44:	4b9c      	ldr	r3, [pc, #624]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007c50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007c54:	fa92 f2a2 	rbit	r2, r2
 8007c58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007c5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007c60:	fab2 f282 	clz	r2, r2
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	f042 0220 	orr.w	r2, r2, #32
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	f002 021f 	and.w	r2, r2, #31
 8007c70:	2101      	movs	r1, #1
 8007c72:	fa01 f202 	lsl.w	r2, r1, r2
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 811f 	beq.w	8007ebc <HAL_RCC_OscConfig+0x334>
 8007c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f040 8116 	bne.w	8007ebc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f000 bfaf 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca6:	d106      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x12e>
 8007ca8:	4b83      	ldr	r3, [pc, #524]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a82      	ldr	r2, [pc, #520]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e036      	b.n	8007d24 <HAL_RCC_OscConfig+0x19c>
 8007cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10c      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x158>
 8007cc6:	4b7c      	ldr	r3, [pc, #496]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a7b      	ldr	r2, [pc, #492]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	4b79      	ldr	r3, [pc, #484]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a78      	ldr	r2, [pc, #480]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	e021      	b.n	8007d24 <HAL_RCC_OscConfig+0x19c>
 8007ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cf0:	d10c      	bne.n	8007d0c <HAL_RCC_OscConfig+0x184>
 8007cf2:	4b71      	ldr	r3, [pc, #452]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a70      	ldr	r2, [pc, #448]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	4b6e      	ldr	r3, [pc, #440]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a6d      	ldr	r2, [pc, #436]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	e00b      	b.n	8007d24 <HAL_RCC_OscConfig+0x19c>
 8007d0c:	4b6a      	ldr	r3, [pc, #424]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a69      	ldr	r2, [pc, #420]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	4b67      	ldr	r3, [pc, #412]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a66      	ldr	r2, [pc, #408]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007d24:	4b64      	ldr	r3, [pc, #400]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	f023 020f 	bic.w	r2, r3, #15
 8007d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	495f      	ldr	r1, [pc, #380]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d059      	beq.n	8007e02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4e:	f7fe fd2b 	bl	80067a8 <HAL_GetTick>
 8007d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d56:	e00a      	b.n	8007d6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d58:	f7fe fd26 	bl	80067a8 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b64      	cmp	r3, #100	; 0x64
 8007d66:	d902      	bls.n	8007d6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	f000 bf43 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>
 8007d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007d7a:	fa93 f3a3 	rbit	r3, r3
 8007d7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007d82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d86:	fab3 f383 	clz	r3, r3
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f043 0301 	orr.w	r3, r3, #1
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d102      	bne.n	8007da0 <HAL_RCC_OscConfig+0x218>
 8007d9a:	4b47      	ldr	r3, [pc, #284]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	e015      	b.n	8007dcc <HAL_RCC_OscConfig+0x244>
 8007da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007da4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007da8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007dac:	fa93 f3a3 	rbit	r3, r3
 8007db0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007db8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007dbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007dc0:	fa93 f3a3 	rbit	r3, r3
 8007dc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007dc8:	4b3b      	ldr	r3, [pc, #236]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007dd0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007dd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007dd8:	fa92 f2a2 	rbit	r2, r2
 8007ddc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007de0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007de4:	fab2 f282 	clz	r2, r2
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	f042 0220 	orr.w	r2, r2, #32
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	f002 021f 	and.w	r2, r2, #31
 8007df4:	2101      	movs	r1, #1
 8007df6:	fa01 f202 	lsl.w	r2, r1, r2
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0ab      	beq.n	8007d58 <HAL_RCC_OscConfig+0x1d0>
 8007e00:	e05d      	b.n	8007ebe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e02:	f7fe fcd1 	bl	80067a8 <HAL_GetTick>
 8007e06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e0a:	e00a      	b.n	8007e22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e0c:	f7fe fccc 	bl	80067a8 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b64      	cmp	r3, #100	; 0x64
 8007e1a:	d902      	bls.n	8007e22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	f000 bee9 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>
 8007e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e26:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007e2e:	fa93 f3a3 	rbit	r3, r3
 8007e32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007e36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e3a:	fab3 f383 	clz	r3, r3
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d102      	bne.n	8007e54 <HAL_RCC_OscConfig+0x2cc>
 8007e4e:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	e015      	b.n	8007e80 <HAL_RCC_OscConfig+0x2f8>
 8007e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007e60:	fa93 f3a3 	rbit	r3, r3
 8007e64:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007e70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007e74:	fa93 f3a3 	rbit	r3, r3
 8007e78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <HAL_RCC_OscConfig+0x330>)
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e84:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007e88:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007e8c:	fa92 f2a2 	rbit	r2, r2
 8007e90:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007e94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007e98:	fab2 f282 	clz	r2, r2
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	f042 0220 	orr.w	r2, r2, #32
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	f002 021f 	and.w	r2, r2, #31
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1ab      	bne.n	8007e0c <HAL_RCC_OscConfig+0x284>
 8007eb4:	e003      	b.n	8007ebe <HAL_RCC_OscConfig+0x336>
 8007eb6:	bf00      	nop
 8007eb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 817d 	beq.w	80081ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007ed4:	4ba6      	ldr	r3, [pc, #664]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f003 030c 	and.w	r3, r3, #12
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007ee0:	4ba3      	ldr	r3, [pc, #652]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f003 030c 	and.w	r3, r3, #12
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d172      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x44a>
 8007eec:	4ba0      	ldr	r3, [pc, #640]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d16c      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x44a>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007efe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007f02:	fa93 f3a3 	rbit	r3, r3
 8007f06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007f0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f0e:	fab3 f383 	clz	r3, r3
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f043 0301 	orr.w	r3, r3, #1
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d102      	bne.n	8007f28 <HAL_RCC_OscConfig+0x3a0>
 8007f22:	4b93      	ldr	r3, [pc, #588]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	e013      	b.n	8007f50 <HAL_RCC_OscConfig+0x3c8>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007f32:	fa93 f3a3 	rbit	r3, r3
 8007f36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007f40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007f44:	fa93 f3a3 	rbit	r3, r3
 8007f48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007f4c:	4b88      	ldr	r3, [pc, #544]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	2202      	movs	r2, #2
 8007f52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007f56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007f5a:	fa92 f2a2 	rbit	r2, r2
 8007f5e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007f62:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007f66:	fab2 f282 	clz	r2, r2
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	f042 0220 	orr.w	r2, r2, #32
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	f002 021f 	and.w	r2, r2, #31
 8007f76:	2101      	movs	r1, #1
 8007f78:	fa01 f202 	lsl.w	r2, r1, r2
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <HAL_RCC_OscConfig+0x410>
 8007f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d002      	beq.n	8007f98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f000 be2e 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f98:	4b75      	ldr	r3, [pc, #468]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	21f8      	movs	r1, #248	; 0xf8
 8007fae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fb2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007fb6:	fa91 f1a1 	rbit	r1, r1
 8007fba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007fbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007fc2:	fab1 f181 	clz	r1, r1
 8007fc6:	b2c9      	uxtb	r1, r1
 8007fc8:	408b      	lsls	r3, r1
 8007fca:	4969      	ldr	r1, [pc, #420]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fd0:	e0fd      	b.n	80081ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 8088 	beq.w	80080f4 <HAL_RCC_OscConfig+0x56c>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007fee:	fa93 f3a3 	rbit	r3, r3
 8007ff2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007ff6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ffa:	fab3 f383 	clz	r3, r3
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	461a      	mov	r2, r3
 800800c:	2301      	movs	r3, #1
 800800e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008010:	f7fe fbca 	bl	80067a8 <HAL_GetTick>
 8008014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008018:	e00a      	b.n	8008030 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800801a:	f7fe fbc5 	bl	80067a8 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d902      	bls.n	8008030 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	f000 bde2 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>
 8008030:	2302      	movs	r3, #2
 8008032:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008036:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800803a:	fa93 f3a3 	rbit	r3, r3
 800803e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8008042:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008046:	fab3 f383 	clz	r3, r3
 800804a:	b2db      	uxtb	r3, r3
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	b2db      	uxtb	r3, r3
 8008050:	f043 0301 	orr.w	r3, r3, #1
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b01      	cmp	r3, #1
 8008058:	d102      	bne.n	8008060 <HAL_RCC_OscConfig+0x4d8>
 800805a:	4b45      	ldr	r3, [pc, #276]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	e013      	b.n	8008088 <HAL_RCC_OscConfig+0x500>
 8008060:	2302      	movs	r3, #2
 8008062:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008066:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800806a:	fa93 f3a3 	rbit	r3, r3
 800806e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008072:	2302      	movs	r3, #2
 8008074:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008078:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800807c:	fa93 f3a3 	rbit	r3, r3
 8008080:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8008084:	4b3a      	ldr	r3, [pc, #232]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2202      	movs	r2, #2
 800808a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800808e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008092:	fa92 f2a2 	rbit	r2, r2
 8008096:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800809a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800809e:	fab2 f282 	clz	r2, r2
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	f042 0220 	orr.w	r2, r2, #32
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	f002 021f 	and.w	r2, r2, #31
 80080ae:	2101      	movs	r1, #1
 80080b0:	fa01 f202 	lsl.w	r2, r1, r2
 80080b4:	4013      	ands	r3, r2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0af      	beq.n	800801a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ba:	4b2d      	ldr	r3, [pc, #180]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	21f8      	movs	r1, #248	; 0xf8
 80080d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80080d8:	fa91 f1a1 	rbit	r1, r1
 80080dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80080e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80080e4:	fab1 f181 	clz	r1, r1
 80080e8:	b2c9      	uxtb	r1, r1
 80080ea:	408b      	lsls	r3, r1
 80080ec:	4920      	ldr	r1, [pc, #128]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	600b      	str	r3, [r1, #0]
 80080f2:	e06c      	b.n	80081ce <HAL_RCC_OscConfig+0x646>
 80080f4:	2301      	movs	r3, #1
 80080f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80080fe:	fa93 f3a3 	rbit	r3, r3
 8008102:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8008106:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800810a:	fab3 f383 	clz	r3, r3
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008114:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	461a      	mov	r2, r3
 800811c:	2300      	movs	r3, #0
 800811e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008120:	f7fe fb42 	bl	80067a8 <HAL_GetTick>
 8008124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008128:	e00a      	b.n	8008140 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800812a:	f7fe fb3d 	bl	80067a8 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d902      	bls.n	8008140 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	f000 bd5a 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>
 8008140:	2302      	movs	r3, #2
 8008142:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008146:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800814a:	fa93 f3a3 	rbit	r3, r3
 800814e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8008152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008156:	fab3 f383 	clz	r3, r3
 800815a:	b2db      	uxtb	r3, r3
 800815c:	095b      	lsrs	r3, r3, #5
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	d104      	bne.n	8008174 <HAL_RCC_OscConfig+0x5ec>
 800816a:	4b01      	ldr	r3, [pc, #4]	; (8008170 <HAL_RCC_OscConfig+0x5e8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	e015      	b.n	800819c <HAL_RCC_OscConfig+0x614>
 8008170:	40021000 	.word	0x40021000
 8008174:	2302      	movs	r3, #2
 8008176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800817a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800817e:	fa93 f3a3 	rbit	r3, r3
 8008182:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008186:	2302      	movs	r3, #2
 8008188:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800818c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008190:	fa93 f3a3 	rbit	r3, r3
 8008194:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008198:	4bc8      	ldr	r3, [pc, #800]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2202      	movs	r2, #2
 800819e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80081a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80081a6:	fa92 f2a2 	rbit	r2, r2
 80081aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80081ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80081b2:	fab2 f282 	clz	r2, r2
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	f042 0220 	orr.w	r2, r2, #32
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	f002 021f 	and.w	r2, r2, #31
 80081c2:	2101      	movs	r1, #1
 80081c4:	fa01 f202 	lsl.w	r2, r1, r2
 80081c8:	4013      	ands	r3, r2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1ad      	bne.n	800812a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8110 	beq.w	8008404 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d079      	beq.n	80082e8 <HAL_RCC_OscConfig+0x760>
 80081f4:	2301      	movs	r3, #1
 80081f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80081fe:	fa93 f3a3 	rbit	r3, r3
 8008202:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8008206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800820a:	fab3 f383 	clz	r3, r3
 800820e:	b2db      	uxtb	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	4bab      	ldr	r3, [pc, #684]	; (80084c0 <HAL_RCC_OscConfig+0x938>)
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	461a      	mov	r2, r3
 800821a:	2301      	movs	r3, #1
 800821c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800821e:	f7fe fac3 	bl	80067a8 <HAL_GetTick>
 8008222:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008226:	e00a      	b.n	800823e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008228:	f7fe fabe 	bl	80067a8 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	d902      	bls.n	800823e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	f000 bcdb 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>
 800823e:	2302      	movs	r3, #2
 8008240:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008244:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008248:	fa93 f3a3 	rbit	r3, r3
 800824c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008254:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008258:	2202      	movs	r2, #2
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008260:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	fa93 f2a3 	rbit	r2, r3
 800826a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800826e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827c:	2202      	movs	r2, #2
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	fa93 f2a3 	rbit	r2, r3
 800828e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008292:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008296:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008298:	4b88      	ldr	r3, [pc, #544]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 800829a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800829c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80082a4:	2102      	movs	r1, #2
 80082a6:	6019      	str	r1, [r3, #0]
 80082a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	fa93 f1a3 	rbit	r1, r3
 80082b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80082be:	6019      	str	r1, [r3, #0]
  return result;
 80082c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	fab3 f383 	clz	r3, r3
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	2101      	movs	r1, #1
 80082dc:	fa01 f303 	lsl.w	r3, r1, r3
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0a0      	beq.n	8008228 <HAL_RCC_OscConfig+0x6a0>
 80082e6:	e08d      	b.n	8008404 <HAL_RCC_OscConfig+0x87c>
 80082e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80082f0:	2201      	movs	r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	fa93 f2a3 	rbit	r2, r3
 8008302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008306:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800830a:	601a      	str	r2, [r3, #0]
  return result;
 800830c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008310:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008314:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008316:	fab3 f383 	clz	r3, r3
 800831a:	b2db      	uxtb	r3, r3
 800831c:	461a      	mov	r2, r3
 800831e:	4b68      	ldr	r3, [pc, #416]	; (80084c0 <HAL_RCC_OscConfig+0x938>)
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	461a      	mov	r2, r3
 8008326:	2300      	movs	r3, #0
 8008328:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800832a:	f7fe fa3d 	bl	80067a8 <HAL_GetTick>
 800832e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008332:	e00a      	b.n	800834a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008334:	f7fe fa38 	bl	80067a8 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d902      	bls.n	800834a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	f000 bc55 	b.w	8008bf4 <HAL_RCC_OscConfig+0x106c>
 800834a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800834e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008352:	2202      	movs	r2, #2
 8008354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800835a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	fa93 f2a3 	rbit	r2, r3
 8008364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008368:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008372:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008376:	2202      	movs	r2, #2
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800837e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	fa93 f2a3 	rbit	r2, r3
 8008388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800838c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839a:	2202      	movs	r2, #2
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	fa93 f2a3 	rbit	r2, r3
 80083ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80083b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083b6:	4b41      	ldr	r3, [pc, #260]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 80083b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80083c2:	2102      	movs	r1, #2
 80083c4:	6019      	str	r1, [r3, #0]
 80083c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	fa93 f1a3 	rbit	r1, r3
 80083d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80083dc:	6019      	str	r1, [r3, #0]
  return result;
 80083de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	fab3 f383 	clz	r3, r3
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 031f 	and.w	r3, r3, #31
 80083f8:	2101      	movs	r1, #1
 80083fa:	fa01 f303 	lsl.w	r3, r1, r3
 80083fe:	4013      	ands	r3, r2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d197      	bne.n	8008334 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 81a1 	beq.w	800875c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800841a:	2300      	movs	r3, #0
 800841c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008420:	4b26      	ldr	r3, [pc, #152]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d116      	bne.n	800845a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800842c:	4b23      	ldr	r3, [pc, #140]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	4a22      	ldr	r2, [pc, #136]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 8008432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008436:	61d3      	str	r3, [r2, #28]
 8008438:	4b20      	ldr	r3, [pc, #128]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008444:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800844e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008452:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800845a:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <HAL_RCC_OscConfig+0x93c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008462:	2b00      	cmp	r3, #0
 8008464:	d11a      	bne.n	800849c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008466:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <HAL_RCC_OscConfig+0x93c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a16      	ldr	r2, [pc, #88]	; (80084c4 <HAL_RCC_OscConfig+0x93c>)
 800846c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008470:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008472:	f7fe f999 	bl	80067a8 <HAL_GetTick>
 8008476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800847a:	e009      	b.n	8008490 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800847c:	f7fe f994 	bl	80067a8 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b64      	cmp	r3, #100	; 0x64
 800848a:	d901      	bls.n	8008490 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e3b1      	b.n	8008bf4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <HAL_RCC_OscConfig+0x93c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0ef      	beq.n	800847c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800849c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d10d      	bne.n	80084c8 <HAL_RCC_OscConfig+0x940>
 80084ac:	4b03      	ldr	r3, [pc, #12]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	4a02      	ldr	r2, [pc, #8]	; (80084bc <HAL_RCC_OscConfig+0x934>)
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	6213      	str	r3, [r2, #32]
 80084b8:	e03c      	b.n	8008534 <HAL_RCC_OscConfig+0x9ac>
 80084ba:	bf00      	nop
 80084bc:	40021000 	.word	0x40021000
 80084c0:	10908120 	.word	0x10908120
 80084c4:	40007000 	.word	0x40007000
 80084c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10c      	bne.n	80084f2 <HAL_RCC_OscConfig+0x96a>
 80084d8:	4bc1      	ldr	r3, [pc, #772]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	4ac0      	ldr	r2, [pc, #768]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 80084de:	f023 0301 	bic.w	r3, r3, #1
 80084e2:	6213      	str	r3, [r2, #32]
 80084e4:	4bbe      	ldr	r3, [pc, #760]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	4abd      	ldr	r2, [pc, #756]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 80084ea:	f023 0304 	bic.w	r3, r3, #4
 80084ee:	6213      	str	r3, [r2, #32]
 80084f0:	e020      	b.n	8008534 <HAL_RCC_OscConfig+0x9ac>
 80084f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d10c      	bne.n	800851c <HAL_RCC_OscConfig+0x994>
 8008502:	4bb7      	ldr	r3, [pc, #732]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	4ab6      	ldr	r2, [pc, #728]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 8008508:	f043 0304 	orr.w	r3, r3, #4
 800850c:	6213      	str	r3, [r2, #32]
 800850e:	4bb4      	ldr	r3, [pc, #720]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	4ab3      	ldr	r2, [pc, #716]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	6213      	str	r3, [r2, #32]
 800851a:	e00b      	b.n	8008534 <HAL_RCC_OscConfig+0x9ac>
 800851c:	4bb0      	ldr	r3, [pc, #704]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	4aaf      	ldr	r2, [pc, #700]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 8008522:	f023 0301 	bic.w	r3, r3, #1
 8008526:	6213      	str	r3, [r2, #32]
 8008528:	4bad      	ldr	r3, [pc, #692]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	4aac      	ldr	r2, [pc, #688]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 800852e:	f023 0304 	bic.w	r3, r3, #4
 8008532:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8081 	beq.w	8008648 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008546:	f7fe f92f 	bl	80067a8 <HAL_GetTick>
 800854a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800854e:	e00b      	b.n	8008568 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008550:	f7fe f92a 	bl	80067a8 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008560:	4293      	cmp	r3, r2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e345      	b.n	8008bf4 <HAL_RCC_OscConfig+0x106c>
 8008568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800856c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008570:	2202      	movs	r2, #2
 8008572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008578:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	fa93 f2a3 	rbit	r2, r3
 8008582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008586:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008590:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008594:	2202      	movs	r2, #2
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800859c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	fa93 f2a3 	rbit	r2, r3
 80085a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80085ae:	601a      	str	r2, [r3, #0]
  return result;
 80085b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80085b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085ba:	fab3 f383 	clz	r3, r3
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	095b      	lsrs	r3, r3, #5
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f043 0302 	orr.w	r3, r3, #2
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d102      	bne.n	80085d4 <HAL_RCC_OscConfig+0xa4c>
 80085ce:	4b84      	ldr	r3, [pc, #528]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	e013      	b.n	80085fc <HAL_RCC_OscConfig+0xa74>
 80085d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80085dc:	2202      	movs	r2, #2
 80085de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	fa93 f2a3 	rbit	r2, r3
 80085ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	4b79      	ldr	r3, [pc, #484]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008600:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008604:	2102      	movs	r1, #2
 8008606:	6011      	str	r1, [r2, #0]
 8008608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800860c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008610:	6812      	ldr	r2, [r2, #0]
 8008612:	fa92 f1a2 	rbit	r1, r2
 8008616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800861a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800861e:	6011      	str	r1, [r2, #0]
  return result;
 8008620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008624:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008628:	6812      	ldr	r2, [r2, #0]
 800862a:	fab2 f282 	clz	r2, r2
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008634:	b2d2      	uxtb	r2, r2
 8008636:	f002 021f 	and.w	r2, r2, #31
 800863a:	2101      	movs	r1, #1
 800863c:	fa01 f202 	lsl.w	r2, r1, r2
 8008640:	4013      	ands	r3, r2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d084      	beq.n	8008550 <HAL_RCC_OscConfig+0x9c8>
 8008646:	e07f      	b.n	8008748 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008648:	f7fe f8ae 	bl	80067a8 <HAL_GetTick>
 800864c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008650:	e00b      	b.n	800866a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008652:	f7fe f8a9 	bl	80067a8 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008662:	4293      	cmp	r3, r2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e2c4      	b.n	8008bf4 <HAL_RCC_OscConfig+0x106c>
 800866a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800866e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008672:	2202      	movs	r2, #2
 8008674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800867a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	fa93 f2a3 	rbit	r2, r3
 8008684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008688:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008692:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008696:	2202      	movs	r2, #2
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800869e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	fa93 f2a3 	rbit	r2, r3
 80086a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80086b0:	601a      	str	r2, [r3, #0]
  return result;
 80086b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80086ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086bc:	fab3 f383 	clz	r3, r3
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	095b      	lsrs	r3, r3, #5
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f043 0302 	orr.w	r3, r3, #2
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d102      	bne.n	80086d6 <HAL_RCC_OscConfig+0xb4e>
 80086d0:	4b43      	ldr	r3, [pc, #268]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	e013      	b.n	80086fe <HAL_RCC_OscConfig+0xb76>
 80086d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80086de:	2202      	movs	r2, #2
 80086e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	fa93 f2a3 	rbit	r2, r3
 80086f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	4b39      	ldr	r3, [pc, #228]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008702:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008706:	2102      	movs	r1, #2
 8008708:	6011      	str	r1, [r2, #0]
 800870a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800870e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	fa92 f1a2 	rbit	r1, r2
 8008718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800871c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008720:	6011      	str	r1, [r2, #0]
  return result;
 8008722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008726:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	fab2 f282 	clz	r2, r2
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	f002 021f 	and.w	r2, r2, #31
 800873c:	2101      	movs	r1, #1
 800873e:	fa01 f202 	lsl.w	r2, r1, r2
 8008742:	4013      	ands	r3, r2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d184      	bne.n	8008652 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008748:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800874c:	2b01      	cmp	r3, #1
 800874e:	d105      	bne.n	800875c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008750:	4b23      	ldr	r3, [pc, #140]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	4a22      	ldr	r2, [pc, #136]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 8008756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800875a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800875c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8242 	beq.w	8008bf2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800876e:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <HAL_RCC_OscConfig+0xc58>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f003 030c 	and.w	r3, r3, #12
 8008776:	2b08      	cmp	r3, #8
 8008778:	f000 8213 	beq.w	8008ba2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800877c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	2b02      	cmp	r3, #2
 800878a:	f040 8162 	bne.w	8008a52 <HAL_RCC_OscConfig+0xeca>
 800878e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008792:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008796:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800879a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800879c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	fa93 f2a3 	rbit	r2, r3
 80087aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80087b2:	601a      	str	r2, [r3, #0]
  return result;
 80087b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80087bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087be:	fab3 f383 	clz	r3, r3
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80087c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	461a      	mov	r2, r3
 80087d0:	2300      	movs	r3, #0
 80087d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087d4:	f7fd ffe8 	bl	80067a8 <HAL_GetTick>
 80087d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087dc:	e00c      	b.n	80087f8 <HAL_RCC_OscConfig+0xc70>
 80087de:	bf00      	nop
 80087e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087e4:	f7fd ffe0 	bl	80067a8 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e1fd      	b.n	8008bf4 <HAL_RCC_OscConfig+0x106c>
 80087f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800880a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	fa93 f2a3 	rbit	r2, r3
 8008814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008818:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800881c:	601a      	str	r2, [r3, #0]
  return result;
 800881e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008822:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008826:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008828:	fab3 f383 	clz	r3, r3
 800882c:	b2db      	uxtb	r3, r3
 800882e:	095b      	lsrs	r3, r3, #5
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f043 0301 	orr.w	r3, r3, #1
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	d102      	bne.n	8008842 <HAL_RCC_OscConfig+0xcba>
 800883c:	4bb0      	ldr	r3, [pc, #704]	; (8008b00 <HAL_RCC_OscConfig+0xf78>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	e027      	b.n	8008892 <HAL_RCC_OscConfig+0xd0a>
 8008842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008846:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800884a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800884e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008854:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	fa93 f2a3 	rbit	r2, r3
 800885e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008862:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800886c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800887a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	fa93 f2a3 	rbit	r2, r3
 8008884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008888:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	4b9c      	ldr	r3, [pc, #624]	; (8008b00 <HAL_RCC_OscConfig+0xf78>)
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008896:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800889a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800889e:	6011      	str	r1, [r2, #0]
 80088a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088a4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	fa92 f1a2 	rbit	r1, r2
 80088ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80088b6:	6011      	str	r1, [r2, #0]
  return result;
 80088b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80088c0:	6812      	ldr	r2, [r2, #0]
 80088c2:	fab2 f282 	clz	r2, r2
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	f042 0220 	orr.w	r2, r2, #32
 80088cc:	b2d2      	uxtb	r2, r2
 80088ce:	f002 021f 	and.w	r2, r2, #31
 80088d2:	2101      	movs	r1, #1
 80088d4:	fa01 f202 	lsl.w	r2, r1, r2
 80088d8:	4013      	ands	r3, r2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d182      	bne.n	80087e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088de:	4b88      	ldr	r3, [pc, #544]	; (8008b00 <HAL_RCC_OscConfig+0xf78>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80088e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80088f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	430b      	orrs	r3, r1
 8008900:	497f      	ldr	r1, [pc, #508]	; (8008b00 <HAL_RCC_OscConfig+0xf78>)
 8008902:	4313      	orrs	r3, r2
 8008904:	604b      	str	r3, [r1, #4]
 8008906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800890a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800890e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008918:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	fa93 f2a3 	rbit	r2, r3
 8008922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008926:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800892a:	601a      	str	r2, [r3, #0]
  return result;
 800892c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008930:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008934:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008936:	fab3 f383 	clz	r3, r3
 800893a:	b2db      	uxtb	r3, r3
 800893c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	461a      	mov	r2, r3
 8008948:	2301      	movs	r3, #1
 800894a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800894c:	f7fd ff2c 	bl	80067a8 <HAL_GetTick>
 8008950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008954:	e009      	b.n	800896a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008956:	f7fd ff27 	bl	80067a8 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e144      	b.n	8008bf4 <HAL_RCC_OscConfig+0x106c>
 800896a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800896e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800897c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	fa93 f2a3 	rbit	r2, r3
 8008986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800898a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800898e:	601a      	str	r2, [r3, #0]
  return result;
 8008990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008994:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008998:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800899a:	fab3 f383 	clz	r3, r3
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f043 0301 	orr.w	r3, r3, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d102      	bne.n	80089b4 <HAL_RCC_OscConfig+0xe2c>
 80089ae:	4b54      	ldr	r3, [pc, #336]	; (8008b00 <HAL_RCC_OscConfig+0xf78>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	e027      	b.n	8008a04 <HAL_RCC_OscConfig+0xe7c>
 80089b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80089bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	fa93 f2a3 	rbit	r2, r3
 80089d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80089e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	fa93 f2a3 	rbit	r2, r3
 80089f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	4b3f      	ldr	r3, [pc, #252]	; (8008b00 <HAL_RCC_OscConfig+0xf78>)
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a08:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008a10:	6011      	str	r1, [r2, #0]
 8008a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a16:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008a1a:	6812      	ldr	r2, [r2, #0]
 8008a1c:	fa92 f1a2 	rbit	r1, r2
 8008a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a24:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008a28:	6011      	str	r1, [r2, #0]
  return result;
 8008a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008a32:	6812      	ldr	r2, [r2, #0]
 8008a34:	fab2 f282 	clz	r2, r2
 8008a38:	b2d2      	uxtb	r2, r2
 8008a3a:	f042 0220 	orr.w	r2, r2, #32
 8008a3e:	b2d2      	uxtb	r2, r2
 8008a40:	f002 021f 	and.w	r2, r2, #31
 8008a44:	2101      	movs	r1, #1
 8008a46:	fa01 f202 	lsl.w	r2, r1, r2
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d082      	beq.n	8008956 <HAL_RCC_OscConfig+0xdce>
 8008a50:	e0cf      	b.n	8008bf2 <HAL_RCC_OscConfig+0x106a>
 8008a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a56:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008a5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a64:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	fa93 f2a3 	rbit	r2, r3
 8008a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008a76:	601a      	str	r2, [r3, #0]
  return result;
 8008a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008a80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a82:	fab3 f383 	clz	r3, r3
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	461a      	mov	r2, r3
 8008a94:	2300      	movs	r3, #0
 8008a96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a98:	f7fd fe86 	bl	80067a8 <HAL_GetTick>
 8008a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008aa0:	e009      	b.n	8008ab6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa2:	f7fd fe81 	bl	80067a8 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e09e      	b.n	8008bf4 <HAL_RCC_OscConfig+0x106c>
 8008ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008aba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ac8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	fa93 f2a3 	rbit	r2, r3
 8008ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ad6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008ada:	601a      	str	r2, [r3, #0]
  return result;
 8008adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ae0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008ae4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ae6:	fab3 f383 	clz	r3, r3
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f043 0301 	orr.w	r3, r3, #1
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d104      	bne.n	8008b04 <HAL_RCC_OscConfig+0xf7c>
 8008afa:	4b01      	ldr	r3, [pc, #4]	; (8008b00 <HAL_RCC_OscConfig+0xf78>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	e029      	b.n	8008b54 <HAL_RCC_OscConfig+0xfcc>
 8008b00:	40021000 	.word	0x40021000
 8008b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b16:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	fa93 f2a3 	rbit	r2, r3
 8008b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b2e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b3c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	fa93 f2a3 	rbit	r2, r3
 8008b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	4b2b      	ldr	r3, [pc, #172]	; (8008c00 <HAL_RCC_OscConfig+0x1078>)
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b58:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008b5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008b60:	6011      	str	r1, [r2, #0]
 8008b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b66:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	fa92 f1a2 	rbit	r1, r2
 8008b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b74:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008b78:	6011      	str	r1, [r2, #0]
  return result;
 8008b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b7e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	fab2 f282 	clz	r2, r2
 8008b88:	b2d2      	uxtb	r2, r2
 8008b8a:	f042 0220 	orr.w	r2, r2, #32
 8008b8e:	b2d2      	uxtb	r2, r2
 8008b90:	f002 021f 	and.w	r2, r2, #31
 8008b94:	2101      	movs	r1, #1
 8008b96:	fa01 f202 	lsl.w	r2, r1, r2
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d180      	bne.n	8008aa2 <HAL_RCC_OscConfig+0xf1a>
 8008ba0:	e027      	b.n	8008bf2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d101      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e01e      	b.n	8008bf4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008bb6:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <HAL_RCC_OscConfig+0x1078>)
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008bbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008bc2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d10b      	bne.n	8008bee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008bda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d001      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	40021000 	.word	0x40021000

08008c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b09e      	sub	sp, #120	; 0x78
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e162      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c1c:	4b90      	ldr	r3, [pc, #576]	; (8008e60 <HAL_RCC_ClockConfig+0x25c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d910      	bls.n	8008c4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c2a:	4b8d      	ldr	r3, [pc, #564]	; (8008e60 <HAL_RCC_ClockConfig+0x25c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f023 0207 	bic.w	r2, r3, #7
 8008c32:	498b      	ldr	r1, [pc, #556]	; (8008e60 <HAL_RCC_ClockConfig+0x25c>)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c3a:	4b89      	ldr	r3, [pc, #548]	; (8008e60 <HAL_RCC_ClockConfig+0x25c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d001      	beq.n	8008c4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e14a      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c58:	4b82      	ldr	r3, [pc, #520]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	497f      	ldr	r1, [pc, #508]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80dc 	beq.w	8008e30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d13c      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xf6>
 8008c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c88:	fa93 f3a3 	rbit	r3, r3
 8008c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c90:	fab3 f383 	clz	r3, r3
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	095b      	lsrs	r3, r3, #5
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f043 0301 	orr.w	r3, r3, #1
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d102      	bne.n	8008caa <HAL_RCC_ClockConfig+0xa6>
 8008ca4:	4b6f      	ldr	r3, [pc, #444]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	e00f      	b.n	8008cca <HAL_RCC_ClockConfig+0xc6>
 8008caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cb2:	fa93 f3a3 	rbit	r3, r3
 8008cb6:	667b      	str	r3, [r7, #100]	; 0x64
 8008cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8008cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cc0:	fa93 f3a3 	rbit	r3, r3
 8008cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cc6:	4b67      	ldr	r3, [pc, #412]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008cce:	65ba      	str	r2, [r7, #88]	; 0x58
 8008cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cd2:	fa92 f2a2 	rbit	r2, r2
 8008cd6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cda:	fab2 f282 	clz	r2, r2
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	f042 0220 	orr.w	r2, r2, #32
 8008ce4:	b2d2      	uxtb	r2, r2
 8008ce6:	f002 021f 	and.w	r2, r2, #31
 8008cea:	2101      	movs	r1, #1
 8008cec:	fa01 f202 	lsl.w	r2, r1, r2
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d17b      	bne.n	8008dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e0f3      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d13c      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x178>
 8008d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d0a:	fa93 f3a3 	rbit	r3, r3
 8008d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d12:	fab3 f383 	clz	r3, r3
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f043 0301 	orr.w	r3, r3, #1
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d102      	bne.n	8008d2c <HAL_RCC_ClockConfig+0x128>
 8008d26:	4b4f      	ldr	r3, [pc, #316]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	e00f      	b.n	8008d4c <HAL_RCC_ClockConfig+0x148>
 8008d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d34:	fa93 f3a3 	rbit	r3, r3
 8008d38:	647b      	str	r3, [r7, #68]	; 0x44
 8008d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d42:	fa93 f3a3 	rbit	r3, r3
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d48:	4b46      	ldr	r3, [pc, #280]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008d50:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d54:	fa92 f2a2 	rbit	r2, r2
 8008d58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5c:	fab2 f282 	clz	r2, r2
 8008d60:	b2d2      	uxtb	r2, r2
 8008d62:	f042 0220 	orr.w	r2, r2, #32
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	f002 021f 	and.w	r2, r2, #31
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8008d72:	4013      	ands	r3, r2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d13a      	bne.n	8008dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e0b2      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x2de>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	fa93 f3a3 	rbit	r3, r3
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d8a:	fab3 f383 	clz	r3, r3
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	095b      	lsrs	r3, r3, #5
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f043 0301 	orr.w	r3, r3, #1
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d102      	bne.n	8008da4 <HAL_RCC_ClockConfig+0x1a0>
 8008d9e:	4b31      	ldr	r3, [pc, #196]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	e00d      	b.n	8008dc0 <HAL_RCC_ClockConfig+0x1bc>
 8008da4:	2302      	movs	r3, #2
 8008da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	fa93 f3a3 	rbit	r3, r3
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
 8008db0:	2302      	movs	r3, #2
 8008db2:	623b      	str	r3, [r7, #32]
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	fa93 f3a3 	rbit	r3, r3
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	61ba      	str	r2, [r7, #24]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	fa92 f2a2 	rbit	r2, r2
 8008dca:	617a      	str	r2, [r7, #20]
  return result;
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	fab2 f282 	clz	r2, r2
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	f042 0220 	orr.w	r2, r2, #32
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	f002 021f 	and.w	r2, r2, #31
 8008dde:	2101      	movs	r1, #1
 8008de0:	fa01 f202 	lsl.w	r2, r1, r2
 8008de4:	4013      	ands	r3, r2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e079      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dee:	4b1d      	ldr	r3, [pc, #116]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f023 0203 	bic.w	r2, r3, #3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	491a      	ldr	r1, [pc, #104]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e00:	f7fd fcd2 	bl	80067a8 <HAL_GetTick>
 8008e04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e06:	e00a      	b.n	8008e1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e08:	f7fd fcce 	bl	80067a8 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d901      	bls.n	8008e1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e061      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e1e:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <HAL_RCC_ClockConfig+0x260>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f003 020c 	and.w	r2, r3, #12
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d1eb      	bne.n	8008e08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e30:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <HAL_RCC_ClockConfig+0x25c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0307 	and.w	r3, r3, #7
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d214      	bcs.n	8008e68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e3e:	4b08      	ldr	r3, [pc, #32]	; (8008e60 <HAL_RCC_ClockConfig+0x25c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f023 0207 	bic.w	r2, r3, #7
 8008e46:	4906      	ldr	r1, [pc, #24]	; (8008e60 <HAL_RCC_ClockConfig+0x25c>)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e4e:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <HAL_RCC_ClockConfig+0x25c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0307 	and.w	r3, r3, #7
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d005      	beq.n	8008e68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e040      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x2de>
 8008e60:	40022000 	.word	0x40022000
 8008e64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d008      	beq.n	8008e86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e74:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <HAL_RCC_ClockConfig+0x2e8>)
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	491a      	ldr	r1, [pc, #104]	; (8008eec <HAL_RCC_ClockConfig+0x2e8>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0308 	and.w	r3, r3, #8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d009      	beq.n	8008ea6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e92:	4b16      	ldr	r3, [pc, #88]	; (8008eec <HAL_RCC_ClockConfig+0x2e8>)
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	4912      	ldr	r1, [pc, #72]	; (8008eec <HAL_RCC_ClockConfig+0x2e8>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008ea6:	f000 f829 	bl	8008efc <HAL_RCC_GetSysClockFreq>
 8008eaa:	4601      	mov	r1, r0
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <HAL_RCC_ClockConfig+0x2e8>)
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eb4:	22f0      	movs	r2, #240	; 0xf0
 8008eb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	fa92 f2a2 	rbit	r2, r2
 8008ebe:	60fa      	str	r2, [r7, #12]
  return result;
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	fab2 f282 	clz	r2, r2
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	40d3      	lsrs	r3, r2
 8008eca:	4a09      	ldr	r2, [pc, #36]	; (8008ef0 <HAL_RCC_ClockConfig+0x2ec>)
 8008ecc:	5cd3      	ldrb	r3, [r2, r3]
 8008ece:	fa21 f303 	lsr.w	r3, r1, r3
 8008ed2:	4a08      	ldr	r2, [pc, #32]	; (8008ef4 <HAL_RCC_ClockConfig+0x2f0>)
 8008ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008ed6:	4b08      	ldr	r3, [pc, #32]	; (8008ef8 <HAL_RCC_ClockConfig+0x2f4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fd fc20 	bl	8006720 <HAL_InitTick>
  
  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3778      	adds	r7, #120	; 0x78
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	08014068 	.word	0x08014068
 8008ef4:	20000004 	.word	0x20000004
 8008ef8:	20000008 	.word	0x20000008

08008efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b08b      	sub	sp, #44	; 0x2c
 8008f00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	61fb      	str	r3, [r7, #28]
 8008f06:	2300      	movs	r3, #0
 8008f08:	61bb      	str	r3, [r7, #24]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0e:	2300      	movs	r3, #0
 8008f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008f16:	4b29      	ldr	r3, [pc, #164]	; (8008fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f003 030c 	and.w	r3, r3, #12
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	d002      	beq.n	8008f2c <HAL_RCC_GetSysClockFreq+0x30>
 8008f26:	2b08      	cmp	r3, #8
 8008f28:	d003      	beq.n	8008f32 <HAL_RCC_GetSysClockFreq+0x36>
 8008f2a:	e03c      	b.n	8008fa6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008f2c:	4b24      	ldr	r3, [pc, #144]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008f2e:	623b      	str	r3, [r7, #32]
      break;
 8008f30:	e03c      	b.n	8008fac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008f38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008f3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	fa92 f2a2 	rbit	r2, r2
 8008f44:	607a      	str	r2, [r7, #4]
  return result;
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	fab2 f282 	clz	r2, r2
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	40d3      	lsrs	r3, r2
 8008f50:	4a1c      	ldr	r2, [pc, #112]	; (8008fc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008f52:	5cd3      	ldrb	r3, [r2, r3]
 8008f54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008f56:	4b19      	ldr	r3, [pc, #100]	; (8008fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	220f      	movs	r2, #15
 8008f60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	fa92 f2a2 	rbit	r2, r2
 8008f68:	60fa      	str	r2, [r7, #12]
  return result;
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	fab2 f282 	clz	r2, r2
 8008f70:	b2d2      	uxtb	r2, r2
 8008f72:	40d3      	lsrs	r3, r2
 8008f74:	4a14      	ldr	r2, [pc, #80]	; (8008fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008f76:	5cd3      	ldrb	r3, [r2, r3]
 8008f78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d008      	beq.n	8008f96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008f84:	4a0e      	ldr	r2, [pc, #56]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	fb02 f303 	mul.w	r3, r2, r3
 8008f92:	627b      	str	r3, [r7, #36]	; 0x24
 8008f94:	e004      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	4a0c      	ldr	r2, [pc, #48]	; (8008fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f9a:	fb02 f303 	mul.w	r3, r2, r3
 8008f9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	623b      	str	r3, [r7, #32]
      break;
 8008fa4:	e002      	b.n	8008fac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008fa6:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008fa8:	623b      	str	r3, [r7, #32]
      break;
 8008faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fac:	6a3b      	ldr	r3, [r7, #32]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	372c      	adds	r7, #44	; 0x2c
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	007a1200 	.word	0x007a1200
 8008fc4:	08014080 	.word	0x08014080
 8008fc8:	08014090 	.word	0x08014090
 8008fcc:	003d0900 	.word	0x003d0900

08008fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fd4:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000004 	.word	0x20000004

08008fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008fee:	f7ff ffef 	bl	8008fd0 <HAL_RCC_GetHCLKFreq>
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ffc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009000:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	fa92 f2a2 	rbit	r2, r2
 8009008:	603a      	str	r2, [r7, #0]
  return result;
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	fab2 f282 	clz	r2, r2
 8009010:	b2d2      	uxtb	r2, r2
 8009012:	40d3      	lsrs	r3, r2
 8009014:	4a04      	ldr	r2, [pc, #16]	; (8009028 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009016:	5cd3      	ldrb	r3, [r2, r3]
 8009018:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	40021000 	.word	0x40021000
 8009028:	08014078 	.word	0x08014078

0800902c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009032:	f7ff ffcd 	bl	8008fd0 <HAL_RCC_GetHCLKFreq>
 8009036:	4601      	mov	r1, r0
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009040:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009044:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	fa92 f2a2 	rbit	r2, r2
 800904c:	603a      	str	r2, [r7, #0]
  return result;
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	fab2 f282 	clz	r2, r2
 8009054:	b2d2      	uxtb	r2, r2
 8009056:	40d3      	lsrs	r3, r2
 8009058:	4a04      	ldr	r2, [pc, #16]	; (800906c <HAL_RCC_GetPCLK2Freq+0x40>)
 800905a:	5cd3      	ldrb	r3, [r2, r3]
 800905c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	40021000 	.word	0x40021000
 800906c:	08014078 	.word	0x08014078

08009070 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b092      	sub	sp, #72	; 0x48
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009080:	2300      	movs	r3, #0
 8009082:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80d4 	beq.w	800923c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009094:	4b4e      	ldr	r3, [pc, #312]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10e      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090a0:	4b4b      	ldr	r3, [pc, #300]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	4a4a      	ldr	r2, [pc, #296]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090aa:	61d3      	str	r3, [r2, #28]
 80090ac:	4b48      	ldr	r3, [pc, #288]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b4:	60bb      	str	r3, [r7, #8]
 80090b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090be:	4b45      	ldr	r3, [pc, #276]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d118      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090ca:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a41      	ldr	r2, [pc, #260]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090d6:	f7fd fb67 	bl	80067a8 <HAL_GetTick>
 80090da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090dc:	e008      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090de:	f7fd fb63 	bl	80067a8 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b64      	cmp	r3, #100	; 0x64
 80090ea:	d901      	bls.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e169      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090f0:	4b38      	ldr	r3, [pc, #224]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0f0      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80090fc:	4b34      	ldr	r3, [pc, #208]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090fe:	6a1b      	ldr	r3, [r3, #32]
 8009100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 8084 	beq.w	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009118:	429a      	cmp	r2, r3
 800911a:	d07c      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800911c:	4b2c      	ldr	r3, [pc, #176]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800912a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	fa93 f3a3 	rbit	r3, r3
 8009132:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009136:	fab3 f383 	clz	r3, r3
 800913a:	b2db      	uxtb	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	4b26      	ldr	r3, [pc, #152]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	461a      	mov	r2, r3
 8009146:	2301      	movs	r3, #1
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800914e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	fa93 f3a3 	rbit	r3, r3
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800915a:	fab3 f383 	clz	r3, r3
 800915e:	b2db      	uxtb	r3, r3
 8009160:	461a      	mov	r2, r3
 8009162:	4b1d      	ldr	r3, [pc, #116]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	461a      	mov	r2, r3
 800916a:	2300      	movs	r3, #0
 800916c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800916e:	4a18      	ldr	r2, [pc, #96]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009172:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d04b      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800917e:	f7fd fb13 	bl	80067a8 <HAL_GetTick>
 8009182:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009184:	e00a      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009186:	f7fd fb0f 	bl	80067a8 <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	f241 3288 	movw	r2, #5000	; 0x1388
 8009194:	4293      	cmp	r3, r2
 8009196:	d901      	bls.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e113      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800919c:	2302      	movs	r3, #2
 800919e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	fa93 f3a3 	rbit	r3, r3
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
 80091a8:	2302      	movs	r3, #2
 80091aa:	623b      	str	r3, [r7, #32]
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	fa93 f3a3 	rbit	r3, r3
 80091b2:	61fb      	str	r3, [r7, #28]
  return result;
 80091b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091b6:	fab3 f383 	clz	r3, r3
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	095b      	lsrs	r3, r3, #5
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f043 0302 	orr.w	r3, r3, #2
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d108      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80091ca:	4b01      	ldr	r3, [pc, #4]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	e00d      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80091d0:	40021000 	.word	0x40021000
 80091d4:	40007000 	.word	0x40007000
 80091d8:	10908100 	.word	0x10908100
 80091dc:	2302      	movs	r3, #2
 80091de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	fa93 f3a3 	rbit	r3, r3
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	4b78      	ldr	r3, [pc, #480]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	2202      	movs	r2, #2
 80091ee:	613a      	str	r2, [r7, #16]
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	fa92 f2a2 	rbit	r2, r2
 80091f6:	60fa      	str	r2, [r7, #12]
  return result;
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	fab2 f282 	clz	r2, r2
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009204:	b2d2      	uxtb	r2, r2
 8009206:	f002 021f 	and.w	r2, r2, #31
 800920a:	2101      	movs	r1, #1
 800920c:	fa01 f202 	lsl.w	r2, r1, r2
 8009210:	4013      	ands	r3, r2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0b7      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009216:	4b6d      	ldr	r3, [pc, #436]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	496a      	ldr	r1, [pc, #424]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009224:	4313      	orrs	r3, r2
 8009226:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009228:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800922c:	2b01      	cmp	r3, #1
 800922e:	d105      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009230:	4b66      	ldr	r3, [pc, #408]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	4a65      	ldr	r2, [pc, #404]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800923a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d008      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009248:	4b60      	ldr	r3, [pc, #384]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800924a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924c:	f023 0203 	bic.w	r2, r3, #3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	495d      	ldr	r1, [pc, #372]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009256:	4313      	orrs	r3, r2
 8009258:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d008      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009266:	4b59      	ldr	r3, [pc, #356]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	4956      	ldr	r1, [pc, #344]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009274:	4313      	orrs	r3, r2
 8009276:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d008      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009284:	4b51      	ldr	r3, [pc, #324]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	494e      	ldr	r1, [pc, #312]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009292:	4313      	orrs	r3, r2
 8009294:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d008      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092a2:	4b4a      	ldr	r3, [pc, #296]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	f023 0210 	bic.w	r2, r3, #16
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	4947      	ldr	r1, [pc, #284]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092b0:	4313      	orrs	r3, r2
 80092b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d008      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80092c0:	4b42      	ldr	r3, [pc, #264]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	493f      	ldr	r1, [pc, #252]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092de:	4b3b      	ldr	r3, [pc, #236]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e2:	f023 0220 	bic.w	r2, r3, #32
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	4938      	ldr	r1, [pc, #224]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d008      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092fc:	4b33      	ldr	r3, [pc, #204]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	4930      	ldr	r1, [pc, #192]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800930a:	4313      	orrs	r3, r2
 800930c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0310 	and.w	r3, r3, #16
 8009316:	2b00      	cmp	r3, #0
 8009318:	d008      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800931a:	4b2c      	ldr	r3, [pc, #176]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	4929      	ldr	r1, [pc, #164]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009328:	4313      	orrs	r3, r2
 800932a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009334:	2b00      	cmp	r3, #0
 8009336:	d008      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009338:	4b24      	ldr	r3, [pc, #144]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009344:	4921      	ldr	r1, [pc, #132]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009346:	4313      	orrs	r3, r2
 8009348:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009352:	2b00      	cmp	r3, #0
 8009354:	d008      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009356:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	491a      	ldr	r1, [pc, #104]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009364:	4313      	orrs	r3, r2
 8009366:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009374:	4b15      	ldr	r3, [pc, #84]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	4912      	ldr	r1, [pc, #72]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009382:	4313      	orrs	r3, r2
 8009384:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d008      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009392:	4b0e      	ldr	r3, [pc, #56]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	490b      	ldr	r1, [pc, #44]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d008      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80093b0:	4b06      	ldr	r3, [pc, #24]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80093b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093bc:	4903      	ldr	r1, [pc, #12]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3748      	adds	r7, #72	; 0x48
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	40021000 	.word	0x40021000

080093d0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e083      	b.n	80094ea <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	7f5b      	ldrb	r3, [r3, #29]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d105      	bne.n	80093f8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fc ff18 	bl	8006228 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2202      	movs	r2, #2
 80093fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	22ca      	movs	r2, #202	; 0xca
 8009404:	625a      	str	r2, [r3, #36]	; 0x24
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2253      	movs	r2, #83	; 0x53
 800940c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 faa8 	bl	8009964 <RTC_EnterInitMode>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d008      	beq.n	800942c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	22ff      	movs	r2, #255	; 0xff
 8009420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2204      	movs	r2, #4
 8009426:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e05e      	b.n	80094ea <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	6812      	ldr	r2, [r2, #0]
 8009436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800943a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800943e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6899      	ldr	r1, [r3, #8]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	431a      	orrs	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	68d2      	ldr	r2, [r2, #12]
 8009466:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6919      	ldr	r1, [r3, #16]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	041a      	lsls	r2, r3, #16
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68da      	ldr	r2, [r3, #12]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800948a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10e      	bne.n	80094b8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa3a 	bl	8009914 <HAL_RTC_WaitForSynchro>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d008      	beq.n	80094b8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	22ff      	movs	r2, #255	; 0xff
 80094ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2204      	movs	r2, #4
 80094b2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e018      	b.n	80094ea <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094c6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	22ff      	movs	r2, #255	; 0xff
 80094e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80094e8:	2300      	movs	r3, #0
  }
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80094f2:	b590      	push	{r4, r7, lr}
 80094f4:	b087      	sub	sp, #28
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	7f1b      	ldrb	r3, [r3, #28]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <HAL_RTC_SetTime+0x1c>
 800950a:	2302      	movs	r3, #2
 800950c:	e0aa      	b.n	8009664 <HAL_RTC_SetTime+0x172>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2202      	movs	r2, #2
 8009518:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d126      	bne.n	800956e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d102      	bne.n	8009534 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2200      	movs	r2, #0
 8009532:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fa3f 	bl	80099bc <RTC_ByteToBcd2>
 800953e:	4603      	mov	r3, r0
 8009540:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	785b      	ldrb	r3, [r3, #1]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 fa38 	bl	80099bc <RTC_ByteToBcd2>
 800954c:	4603      	mov	r3, r0
 800954e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009550:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	789b      	ldrb	r3, [r3, #2]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fa30 	bl	80099bc <RTC_ByteToBcd2>
 800955c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800955e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	78db      	ldrb	r3, [r3, #3]
 8009566:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009568:	4313      	orrs	r3, r2
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	e018      	b.n	80095a0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2200      	movs	r2, #0
 8009580:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	785b      	ldrb	r3, [r3, #1]
 800958c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800958e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009594:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	78db      	ldrb	r3, [r3, #3]
 800959a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800959c:	4313      	orrs	r3, r2
 800959e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	22ca      	movs	r2, #202	; 0xca
 80095a6:	625a      	str	r2, [r3, #36]	; 0x24
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2253      	movs	r2, #83	; 0x53
 80095ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f9d7 	bl	8009964 <RTC_EnterInitMode>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	22ff      	movs	r2, #255	; 0xff
 80095c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2204      	movs	r2, #4
 80095c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e047      	b.n	8009664 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80095de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80095e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6899      	ldr	r1, [r3, #8]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	431a      	orrs	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800961a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	d111      	bne.n	800964e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 f972 	bl	8009914 <HAL_RTC_WaitForSynchro>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	22ff      	movs	r2, #255	; 0xff
 800963c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2204      	movs	r2, #4
 8009642:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e00a      	b.n	8009664 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	22ff      	movs	r2, #255	; 0xff
 8009654:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009662:	2300      	movs	r3, #0
  }
}
 8009664:	4618      	mov	r0, r3
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	bd90      	pop	{r4, r7, pc}

0800966c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800969e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80096a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	0c1b      	lsrs	r3, r3, #16
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	0a1b      	lsrs	r3, r3, #8
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	0c1b      	lsrs	r3, r3, #16
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d11a      	bne.n	800971e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 f983 	bl	80099f8 <RTC_Bcd2ToByte>
 80096f2:	4603      	mov	r3, r0
 80096f4:	461a      	mov	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 f97a 	bl	80099f8 <RTC_Bcd2ToByte>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	789b      	ldrb	r3, [r3, #2]
 8009710:	4618      	mov	r0, r3
 8009712:	f000 f971 	bl	80099f8 <RTC_Bcd2ToByte>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	7f1b      	ldrb	r3, [r3, #28]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_RTC_SetDate+0x1c>
 8009740:	2302      	movs	r3, #2
 8009742:	e094      	b.n	800986e <HAL_RTC_SetDate+0x146>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2201      	movs	r2, #1
 8009748:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2202      	movs	r2, #2
 800974e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10e      	bne.n	8009774 <HAL_RTC_SetDate+0x4c>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b00      	cmp	r3, #0
 8009760:	d008      	beq.n	8009774 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	f023 0310 	bic.w	r3, r3, #16
 800976a:	b2db      	uxtb	r3, r3
 800976c:	330a      	adds	r3, #10
 800976e:	b2da      	uxtb	r2, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d11c      	bne.n	80097b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	78db      	ldrb	r3, [r3, #3]
 800977e:	4618      	mov	r0, r3
 8009780:	f000 f91c 	bl	80099bc <RTC_ByteToBcd2>
 8009784:	4603      	mov	r3, r0
 8009786:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	785b      	ldrb	r3, [r3, #1]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 f915 	bl	80099bc <RTC_ByteToBcd2>
 8009792:	4603      	mov	r3, r0
 8009794:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009796:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	789b      	ldrb	r3, [r3, #2]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f90d 	bl	80099bc <RTC_ByteToBcd2>
 80097a2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80097a4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]
 80097b2:	e00e      	b.n	80097d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	78db      	ldrb	r3, [r3, #3]
 80097b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	785b      	ldrb	r3, [r3, #1]
 80097be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80097c0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80097c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	22ca      	movs	r2, #202	; 0xca
 80097d8:	625a      	str	r2, [r3, #36]	; 0x24
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2253      	movs	r2, #83	; 0x53
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 f8be 	bl	8009964 <RTC_EnterInitMode>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00b      	beq.n	8009806 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	22ff      	movs	r2, #255	; 0xff
 80097f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2204      	movs	r2, #4
 80097fa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e033      	b.n	800986e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009810:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009814:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009824:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f003 0320 	and.w	r3, r3, #32
 8009830:	2b00      	cmp	r3, #0
 8009832:	d111      	bne.n	8009858 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f86d 	bl	8009914 <HAL_RTC_WaitForSynchro>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	22ff      	movs	r2, #255	; 0xff
 8009846:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2204      	movs	r2, #4
 800984c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e00a      	b.n	800986e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	22ff      	movs	r2, #255	; 0xff
 800985e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800986c:	2300      	movs	r3, #0
  }
}
 800986e:	4618      	mov	r0, r3
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	bd90      	pop	{r4, r7, pc}

08009876 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b086      	sub	sp, #24
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009890:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009894:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	0c1b      	lsrs	r3, r3, #16
 800989a:	b2da      	uxtb	r2, r3
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	0b5b      	lsrs	r3, r3, #13
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d11a      	bne.n	800990a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	78db      	ldrb	r3, [r3, #3]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f88d 	bl	80099f8 <RTC_Bcd2ToByte>
 80098de:	4603      	mov	r3, r0
 80098e0:	461a      	mov	r2, r3
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 f884 	bl	80099f8 <RTC_Bcd2ToByte>
 80098f0:	4603      	mov	r3, r0
 80098f2:	461a      	mov	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	789b      	ldrb	r3, [r3, #2]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f87b 	bl	80099f8 <RTC_Bcd2ToByte>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800991c:	2300      	movs	r3, #0
 800991e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800992e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009930:	f7fc ff3a 	bl	80067a8 <HAL_GetTick>
 8009934:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009936:	e009      	b.n	800994c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009938:	f7fc ff36 	bl	80067a8 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009946:	d901      	bls.n	800994c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e007      	b.n	800995c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0ee      	beq.n	8009938 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	d119      	bne.n	80099b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009988:	f7fc ff0e 	bl	80067a8 <HAL_GetTick>
 800998c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800998e:	e009      	b.n	80099a4 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009990:	f7fc ff0a 	bl	80067a8 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800999e:	d901      	bls.n	80099a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e007      	b.n	80099b4 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0ee      	beq.n	8009990 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80099ca:	e005      	b.n	80099d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3301      	adds	r3, #1
 80099d0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	3b0a      	subs	r3, #10
 80099d6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	2b09      	cmp	r3, #9
 80099dc:	d8f6      	bhi.n	80099cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	011b      	lsls	r3, r3, #4
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	b2db      	uxtb	r3, r3
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	091b      	lsrs	r3, r3, #4
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	f003 030f 	and.w	r3, r3, #15
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	4413      	add	r3, r2
 8009a26:	b2db      	uxtb	r3, r3
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3350      	adds	r3, #80	; 0x50
 8009a4a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	4413      	add	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	601a      	str	r2, [r3, #0]
}
 8009a5c:	bf00      	nop
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3350      	adds	r3, #80	; 0x50
 8009a7c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4413      	add	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e09d      	b.n	8009be6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d108      	bne.n	8009ac4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aba:	d009      	beq.n	8009ad0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	61da      	str	r2, [r3, #28]
 8009ac2:	e005      	b.n	8009ad0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7fc fbc2 	bl	8006274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b10:	d902      	bls.n	8009b18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	e002      	b.n	8009b1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009b26:	d007      	beq.n	8009b38 <HAL_SPI_Init+0xa0>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b30:	d002      	beq.n	8009b38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	431a      	orrs	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b66:	431a      	orrs	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b70:	431a      	orrs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7a:	ea42 0103 	orr.w	r1, r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	0c1b      	lsrs	r3, r3, #16
 8009b94:	f003 0204 	and.w	r2, r3, #4
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	f003 0310 	and.w	r3, r3, #16
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba6:	f003 0308 	and.w	r3, r3, #8
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009bb4:	ea42 0103 	orr.w	r1, r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b088      	sub	sp, #32
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	603b      	str	r3, [r7, #0]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_SPI_Transmit+0x22>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e158      	b.n	8009ec2 <HAL_SPI_Transmit+0x2d4>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c18:	f7fc fdc6 	bl	80067a8 <HAL_GetTick>
 8009c1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009c1e:	88fb      	ldrh	r3, [r7, #6]
 8009c20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d002      	beq.n	8009c34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c32:	e13d      	b.n	8009eb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <HAL_SPI_Transmit+0x52>
 8009c3a:	88fb      	ldrh	r3, [r7, #6]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d102      	bne.n	8009c46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c44:	e134      	b.n	8009eb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2203      	movs	r2, #3
 8009c4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	88fa      	ldrh	r2, [r7, #6]
 8009c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	88fa      	ldrh	r2, [r7, #6]
 8009c64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c90:	d10f      	bne.n	8009cb2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cbc:	2b40      	cmp	r3, #64	; 0x40
 8009cbe:	d007      	beq.n	8009cd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cd8:	d94b      	bls.n	8009d72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <HAL_SPI_Transmit+0xfa>
 8009ce2:	8afb      	ldrh	r3, [r7, #22]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d13e      	bne.n	8009d66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cec:	881a      	ldrh	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf8:	1c9a      	adds	r2, r3, #2
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3b01      	subs	r3, #1
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d0c:	e02b      	b.n	8009d66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f003 0302 	and.w	r3, r3, #2
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d112      	bne.n	8009d42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	881a      	ldrh	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	1c9a      	adds	r2, r3, #2
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d40:	e011      	b.n	8009d66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d42:	f7fc fd31 	bl	80067a8 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d803      	bhi.n	8009d5a <HAL_SPI_Transmit+0x16c>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d102      	bne.n	8009d60 <HAL_SPI_Transmit+0x172>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d64:	e0a4      	b.n	8009eb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1ce      	bne.n	8009d0e <HAL_SPI_Transmit+0x120>
 8009d70:	e07c      	b.n	8009e6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <HAL_SPI_Transmit+0x192>
 8009d7a:	8afb      	ldrh	r3, [r7, #22]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d170      	bne.n	8009e62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d912      	bls.n	8009db0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8e:	881a      	ldrh	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	1c9a      	adds	r2, r3, #2
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	3b02      	subs	r3, #2
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dae:	e058      	b.n	8009e62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	330c      	adds	r3, #12
 8009dba:	7812      	ldrb	r2, [r2, #0]
 8009dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009dd6:	e044      	b.n	8009e62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d12b      	bne.n	8009e3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d912      	bls.n	8009e16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	881a      	ldrh	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e00:	1c9a      	adds	r2, r3, #2
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	3b02      	subs	r3, #2
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e14:	e025      	b.n	8009e62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	330c      	adds	r3, #12
 8009e20:	7812      	ldrb	r2, [r2, #0]
 8009e22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e3c:	e011      	b.n	8009e62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e3e:	f7fc fcb3 	bl	80067a8 <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d803      	bhi.n	8009e56 <HAL_SPI_Transmit+0x268>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e54:	d102      	bne.n	8009e5c <HAL_SPI_Transmit+0x26e>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009e60:	e026      	b.n	8009eb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1b5      	bne.n	8009dd8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e6c:	69ba      	ldr	r2, [r7, #24]
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 fb5b 	bl	800a52c <SPI_EndRxTxTransaction>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10a      	bne.n	8009ea0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	613b      	str	r3, [r7, #16]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	613b      	str	r3, [r7, #16]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	613b      	str	r3, [r7, #16]
 8009e9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	77fb      	strb	r3, [r7, #31]
 8009eac:	e000      	b.n	8009eb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3720      	adds	r7, #32
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b08a      	sub	sp, #40	; 0x28
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
 8009ed6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d101      	bne.n	8009ef0 <HAL_SPI_TransmitReceive+0x26>
 8009eec:	2302      	movs	r3, #2
 8009eee:	e1fb      	b.n	800a2e8 <HAL_SPI_TransmitReceive+0x41e>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ef8:	f7fc fc56 	bl	80067a8 <HAL_GetTick>
 8009efc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f04:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009f0c:	887b      	ldrh	r3, [r7, #2]
 8009f0e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009f10:	887b      	ldrh	r3, [r7, #2]
 8009f12:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f14:	7efb      	ldrb	r3, [r7, #27]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d00e      	beq.n	8009f38 <HAL_SPI_TransmitReceive+0x6e>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f20:	d106      	bne.n	8009f30 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d102      	bne.n	8009f30 <HAL_SPI_TransmitReceive+0x66>
 8009f2a:	7efb      	ldrb	r3, [r7, #27]
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	d003      	beq.n	8009f38 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009f30:	2302      	movs	r3, #2
 8009f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009f36:	e1cd      	b.n	800a2d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <HAL_SPI_TransmitReceive+0x80>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <HAL_SPI_TransmitReceive+0x80>
 8009f44:	887b      	ldrh	r3, [r7, #2]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d103      	bne.n	8009f52 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009f50:	e1c0      	b.n	800a2d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	d003      	beq.n	8009f66 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2205      	movs	r2, #5
 8009f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	887a      	ldrh	r2, [r7, #2]
 8009f76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	887a      	ldrh	r2, [r7, #2]
 8009f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	887a      	ldrh	r2, [r7, #2]
 8009f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	887a      	ldrh	r2, [r7, #2]
 8009f92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fa8:	d802      	bhi.n	8009fb0 <HAL_SPI_TransmitReceive+0xe6>
 8009faa:	8a3b      	ldrh	r3, [r7, #16]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d908      	bls.n	8009fc2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	e007      	b.n	8009fd2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fd0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fdc:	2b40      	cmp	r3, #64	; 0x40
 8009fde:	d007      	beq.n	8009ff0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ff8:	d97c      	bls.n	800a0f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <HAL_SPI_TransmitReceive+0x13e>
 800a002:	8a7b      	ldrh	r3, [r7, #18]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d169      	bne.n	800a0dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00c:	881a      	ldrh	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a018:	1c9a      	adds	r2, r3, #2
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a022:	b29b      	uxth	r3, r3
 800a024:	3b01      	subs	r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a02c:	e056      	b.n	800a0dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d11b      	bne.n	800a074 <HAL_SPI_TransmitReceive+0x1aa>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d016      	beq.n	800a074 <HAL_SPI_TransmitReceive+0x1aa>
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d113      	bne.n	800a074 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	881a      	ldrh	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05c:	1c9a      	adds	r2, r3, #2
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a066:	b29b      	uxth	r3, r3
 800a068:	3b01      	subs	r3, #1
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d11c      	bne.n	800a0bc <HAL_SPI_TransmitReceive+0x1f2>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d016      	beq.n	800a0bc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a098:	b292      	uxth	r2, r2
 800a09a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a0:	1c9a      	adds	r2, r3, #2
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a0bc:	f7fc fb74 	bl	80067a8 <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d807      	bhi.n	800a0dc <HAL_SPI_TransmitReceive+0x212>
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d003      	beq.n	800a0dc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a0da:	e0fb      	b.n	800a2d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1a3      	bne.n	800a02e <HAL_SPI_TransmitReceive+0x164>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d19d      	bne.n	800a02e <HAL_SPI_TransmitReceive+0x164>
 800a0f2:	e0df      	b.n	800a2b4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <HAL_SPI_TransmitReceive+0x23a>
 800a0fc:	8a7b      	ldrh	r3, [r7, #18]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	f040 80cb 	bne.w	800a29a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a108:	b29b      	uxth	r3, r3
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d912      	bls.n	800a134 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a112:	881a      	ldrh	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11e:	1c9a      	adds	r2, r3, #2
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a128:	b29b      	uxth	r3, r3
 800a12a:	3b02      	subs	r3, #2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a132:	e0b2      	b.n	800a29a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	330c      	adds	r3, #12
 800a13e:	7812      	ldrb	r2, [r2, #0]
 800a140:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a150:	b29b      	uxth	r3, r3
 800a152:	3b01      	subs	r3, #1
 800a154:	b29a      	uxth	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a15a:	e09e      	b.n	800a29a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b02      	cmp	r3, #2
 800a168:	d134      	bne.n	800a1d4 <HAL_SPI_TransmitReceive+0x30a>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d02f      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x30a>
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	2b01      	cmp	r3, #1
 800a178:	d12c      	bne.n	800a1d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a17e:	b29b      	uxth	r3, r3
 800a180:	2b01      	cmp	r3, #1
 800a182:	d912      	bls.n	800a1aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a188:	881a      	ldrh	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a194:	1c9a      	adds	r2, r3, #2
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	3b02      	subs	r3, #2
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a1a8:	e012      	b.n	800a1d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	7812      	ldrb	r2, [r2, #0]
 800a1b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1bc:	1c5a      	adds	r2, r3, #1
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d148      	bne.n	800a274 <HAL_SPI_TransmitReceive+0x3aa>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d042      	beq.n	800a274 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d923      	bls.n	800a242 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	b292      	uxth	r2, r2
 800a206:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	1c9a      	adds	r2, r3, #2
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a218:	b29b      	uxth	r3, r3
 800a21a:	3b02      	subs	r3, #2
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d81f      	bhi.n	800a270 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a23e:	605a      	str	r2, [r3, #4]
 800a240:	e016      	b.n	800a270 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f103 020c 	add.w	r2, r3, #12
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24e:	7812      	ldrb	r2, [r2, #0]
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a264:	b29b      	uxth	r3, r3
 800a266:	3b01      	subs	r3, #1
 800a268:	b29a      	uxth	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a270:	2301      	movs	r3, #1
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a274:	f7fc fa98 	bl	80067a8 <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a280:	429a      	cmp	r2, r3
 800a282:	d803      	bhi.n	800a28c <HAL_SPI_TransmitReceive+0x3c2>
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28a:	d102      	bne.n	800a292 <HAL_SPI_TransmitReceive+0x3c8>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d103      	bne.n	800a29a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a298:	e01c      	b.n	800a2d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f47f af5b 	bne.w	800a15c <HAL_SPI_TransmitReceive+0x292>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f47f af54 	bne.w	800a15c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2b4:	69fa      	ldr	r2, [r7, #28]
 800a2b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 f937 	bl	800a52c <SPI_EndRxTxTransaction>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	661a      	str	r2, [r3, #96]	; 0x60
 800a2d0:	e000      	b.n	800a2d4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a2d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a2e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3728      	adds	r7, #40	; 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	603b      	str	r3, [r7, #0]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a300:	f7fc fa52 	bl	80067a8 <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	1a9b      	subs	r3, r3, r2
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	4413      	add	r3, r2
 800a30e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a310:	f7fc fa4a 	bl	80067a8 <HAL_GetTick>
 800a314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a316:	4b39      	ldr	r3, [pc, #228]	; (800a3fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	015b      	lsls	r3, r3, #5
 800a31c:	0d1b      	lsrs	r3, r3, #20
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	fb02 f303 	mul.w	r3, r2, r3
 800a324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a326:	e054      	b.n	800a3d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32e:	d050      	beq.n	800a3d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a330:	f7fc fa3a 	bl	80067a8 <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d902      	bls.n	800a346 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d13d      	bne.n	800a3c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a35e:	d111      	bne.n	800a384 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a368:	d004      	beq.n	800a374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a372:	d107      	bne.n	800a384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a38c:	d10f      	bne.n	800a3ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e017      	b.n	800a3f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	bf0c      	ite	eq
 800a3e2:	2301      	moveq	r3, #1
 800a3e4:	2300      	movne	r3, #0
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d19b      	bne.n	800a328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3720      	adds	r7, #32
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000004 	.word	0x20000004

0800a400 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08a      	sub	sp, #40	; 0x28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a412:	f7fc f9c9 	bl	80067a8 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	1a9b      	subs	r3, r3, r2
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	4413      	add	r3, r2
 800a420:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a422:	f7fc f9c1 	bl	80067a8 <HAL_GetTick>
 800a426:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	330c      	adds	r3, #12
 800a42e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a430:	4b3d      	ldr	r3, [pc, #244]	; (800a528 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	00da      	lsls	r2, r3, #3
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	0d1b      	lsrs	r3, r3, #20
 800a440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a442:	fb02 f303 	mul.w	r3, r2, r3
 800a446:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a448:	e060      	b.n	800a50c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a450:	d107      	bne.n	800a462 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a460:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a468:	d050      	beq.n	800a50c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a46a:	f7fc f99d 	bl	80067a8 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a476:	429a      	cmp	r2, r3
 800a478:	d902      	bls.n	800a480 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d13d      	bne.n	800a4fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a48e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a498:	d111      	bne.n	800a4be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4a2:	d004      	beq.n	800a4ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ac:	d107      	bne.n	800a4be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4c6:	d10f      	bne.n	800a4e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e010      	b.n	800a51e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	3b01      	subs	r3, #1
 800a50a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	689a      	ldr	r2, [r3, #8]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	4013      	ands	r3, r2
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d196      	bne.n	800a44a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3728      	adds	r7, #40	; 0x28
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20000004 	.word	0x20000004

0800a52c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af02      	add	r7, sp, #8
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2200      	movs	r2, #0
 800a540:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff ff5b 	bl	800a400 <SPI_WaitFifoStateUntilTimeout>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d007      	beq.n	800a560 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a554:	f043 0220 	orr.w	r2, r3, #32
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e027      	b.n	800a5b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2200      	movs	r2, #0
 800a568:	2180      	movs	r1, #128	; 0x80
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7ff fec0 	bl	800a2f0 <SPI_WaitFlagStateUntilTimeout>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d007      	beq.n	800a586 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a57a:	f043 0220 	orr.w	r2, r3, #32
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e014      	b.n	800a5b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7ff ff34 	bl	800a400 <SPI_WaitFifoStateUntilTimeout>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d007      	beq.n	800a5ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a2:	f043 0220 	orr.w	r2, r3, #32
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e000      	b.n	800a5b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e040      	b.n	800a64c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7fb fec0 	bl	8006360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2224      	movs	r2, #36	; 0x24
 800a5e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0201 	bic.w	r2, r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fc0c 	bl	800ae14 <UART_SetConfig>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d101      	bne.n	800a606 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e022      	b.n	800a64c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fdd6 	bl	800b1c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689a      	ldr	r2, [r3, #8]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fe5d 	bl	800b304 <UART_CheckIdleState>
 800a64a:	4603      	mov	r3, r0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08a      	sub	sp, #40	; 0x28
 800a658:	af02      	add	r7, sp, #8
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	4613      	mov	r3, r2
 800a662:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a668:	2b20      	cmp	r3, #32
 800a66a:	f040 8082 	bne.w	800a772 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <HAL_UART_Transmit+0x26>
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e07a      	b.n	800a774 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_UART_Transmit+0x38>
 800a688:	2302      	movs	r3, #2
 800a68a:	e073      	b.n	800a774 <HAL_UART_Transmit+0x120>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2221      	movs	r2, #33	; 0x21
 800a6a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6a2:	f7fc f881 	bl	80067a8 <HAL_GetTick>
 800a6a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	88fa      	ldrh	r2, [r7, #6]
 800a6ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	88fa      	ldrh	r2, [r7, #6]
 800a6b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c0:	d108      	bne.n	800a6d4 <HAL_UART_Transmit+0x80>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d104      	bne.n	800a6d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	61bb      	str	r3, [r7, #24]
 800a6d2:	e003      	b.n	800a6dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a6e4:	e02d      	b.n	800a742 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2180      	movs	r1, #128	; 0x80
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 fe50 	bl	800b396 <UART_WaitOnFlagUntilTimeout>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e039      	b.n	800a774 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10b      	bne.n	800a71e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	881a      	ldrh	r2, [r3, #0]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a712:	b292      	uxth	r2, r2
 800a714:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	3302      	adds	r3, #2
 800a71a:	61bb      	str	r3, [r7, #24]
 800a71c:	e008      	b.n	800a730 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	781a      	ldrb	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	b292      	uxth	r2, r2
 800a728:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	3301      	adds	r3, #1
 800a72e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a736:	b29b      	uxth	r3, r3
 800a738:	3b01      	subs	r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a748:	b29b      	uxth	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1cb      	bne.n	800a6e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2200      	movs	r2, #0
 800a756:	2140      	movs	r1, #64	; 0x40
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f000 fe1c 	bl	800b396 <UART_WaitOnFlagUntilTimeout>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e005      	b.n	800a774 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2220      	movs	r2, #32
 800a76c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	e000      	b.n	800a774 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a772:	2302      	movs	r3, #2
  }
}
 800a774:	4618      	mov	r0, r3
 800a776:	3720      	adds	r7, #32
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08a      	sub	sp, #40	; 0x28
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	4613      	mov	r3, r2
 800a788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a78e:	2b20      	cmp	r3, #32
 800a790:	d13d      	bne.n	800a80e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <HAL_UART_Receive_IT+0x22>
 800a798:	88fb      	ldrh	r3, [r7, #6]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e036      	b.n	800a810 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <HAL_UART_Receive_IT+0x34>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e02f      	b.n	800a810 <HAL_UART_Receive_IT+0x94>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d018      	beq.n	800a7fe <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	623b      	str	r3, [r7, #32]
 800a7ec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ee:	69f9      	ldr	r1, [r7, #28]
 800a7f0:	6a3a      	ldr	r2, [r7, #32]
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1e6      	bne.n	800a7cc <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a7fe:	88fb      	ldrh	r3, [r7, #6]
 800a800:	461a      	mov	r2, r3
 800a802:	68b9      	ldr	r1, [r7, #8]
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 fe8b 	bl	800b520 <UART_Start_Receive_IT>
 800a80a:	4603      	mov	r3, r0
 800a80c:	e000      	b.n	800a810 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a80e:	2302      	movs	r3, #2
  }
}
 800a810:	4618      	mov	r0, r3
 800a812:	3728      	adds	r7, #40	; 0x28
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b0ba      	sub	sp, #232	; 0xe8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a83e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a842:	f640 030f 	movw	r3, #2063	; 0x80f
 800a846:	4013      	ands	r3, r2
 800a848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a84c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a850:	2b00      	cmp	r3, #0
 800a852:	d115      	bne.n	800a880 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00f      	beq.n	800a880 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a864:	f003 0320 	and.w	r3, r3, #32
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d009      	beq.n	800a880 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 82a3 	beq.w	800adbc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
      }
      return;
 800a87e:	e29d      	b.n	800adbc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a884:	2b00      	cmp	r3, #0
 800a886:	f000 8117 	beq.w	800aab8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a88a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a896:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a89a:	4b85      	ldr	r3, [pc, #532]	; (800aab0 <HAL_UART_IRQHandler+0x298>)
 800a89c:	4013      	ands	r3, r2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 810a 	beq.w	800aab8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d011      	beq.n	800a8d4 <HAL_UART_IRQHandler+0xbc>
 800a8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00b      	beq.n	800a8d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8ca:	f043 0201 	orr.w	r2, r3, #1
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8d8:	f003 0302 	and.w	r3, r3, #2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d011      	beq.n	800a904 <HAL_UART_IRQHandler+0xec>
 800a8e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00b      	beq.n	800a904 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8fa:	f043 0204 	orr.w	r2, r3, #4
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d011      	beq.n	800a934 <HAL_UART_IRQHandler+0x11c>
 800a910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00b      	beq.n	800a934 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2204      	movs	r2, #4
 800a922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a92a:	f043 0202 	orr.w	r2, r3, #2
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d017      	beq.n	800a970 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a944:	f003 0320 	and.w	r3, r3, #32
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d105      	bne.n	800a958 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a94c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a950:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00b      	beq.n	800a970 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2208      	movs	r2, #8
 800a95e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a966:	f043 0208 	orr.w	r2, r3, #8
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d012      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x18a>
 800a97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00c      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a998:	f043 0220 	orr.w	r2, r3, #32
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 8209 	beq.w	800adc0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9b2:	f003 0320 	and.w	r3, r3, #32
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00d      	beq.n	800a9d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9be:	f003 0320 	and.w	r3, r3, #32
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ea:	2b40      	cmp	r3, #64	; 0x40
 800a9ec:	d005      	beq.n	800a9fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a9ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d04f      	beq.n	800aa9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fe28 	bl	800b650 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0a:	2b40      	cmp	r3, #64	; 0x40
 800aa0c:	d141      	bne.n	800aa92 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3308      	adds	r3, #8
 800aa14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa1c:	e853 3f00 	ldrex	r3, [r3]
 800aa20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aa24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3308      	adds	r3, #8
 800aa36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aa3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aa3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aa46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aa52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1d9      	bne.n	800aa0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d013      	beq.n	800aa8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa66:	4a13      	ldr	r2, [pc, #76]	; (800aab4 <HAL_UART_IRQHandler+0x29c>)
 800aa68:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fc fe60 	bl	8007734 <HAL_DMA_Abort_IT>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d017      	beq.n	800aaaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa88:	e00f      	b.n	800aaaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f9ac 	bl	800ade8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa90:	e00b      	b.n	800aaaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f9a8 	bl	800ade8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa98:	e007      	b.n	800aaaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f9a4 	bl	800ade8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800aaa8:	e18a      	b.n	800adc0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaaa:	bf00      	nop
    return;
 800aaac:	e188      	b.n	800adc0 <HAL_UART_IRQHandler+0x5a8>
 800aaae:	bf00      	nop
 800aab0:	04000120 	.word	0x04000120
 800aab4:	0800b717 	.word	0x0800b717

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	f040 8143 	bne.w	800ad48 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aac6:	f003 0310 	and.w	r3, r3, #16
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 813c 	beq.w	800ad48 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aad4:	f003 0310 	and.w	r3, r3, #16
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 8135 	beq.w	800ad48 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2210      	movs	r2, #16
 800aae4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf0:	2b40      	cmp	r3, #64	; 0x40
 800aaf2:	f040 80b1 	bne.w	800ac58 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 815c 	beq.w	800adc4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab16:	429a      	cmp	r2, r3
 800ab18:	f080 8154 	bcs.w	800adc4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	2b20      	cmp	r3, #32
 800ab2e:	f000 8085 	beq.w	800ac3c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ab46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	461a      	mov	r2, r3
 800ab58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ab68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ab6c:	e841 2300 	strex	r3, r2, [r1]
 800ab70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ab74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1da      	bne.n	800ab32 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3308      	adds	r3, #8
 800ab82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab86:	e853 3f00 	ldrex	r3, [r3]
 800ab8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ab8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab8e:	f023 0301 	bic.w	r3, r3, #1
 800ab92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aba0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aba4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abac:	e841 2300 	strex	r3, r2, [r1]
 800abb0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800abb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1e1      	bne.n	800ab7c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3308      	adds	r3, #8
 800abbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abc2:	e853 3f00 	ldrex	r3, [r3]
 800abc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800abc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3308      	adds	r3, #8
 800abd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800abdc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800abde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800abe2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800abe4:	e841 2300 	strex	r3, r2, [r1]
 800abe8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800abea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e3      	bne.n	800abb8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2220      	movs	r2, #32
 800abf4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac04:	e853 3f00 	ldrex	r3, [r3]
 800ac08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0c:	f023 0310 	bic.w	r3, r3, #16
 800ac10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac1e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e4      	bne.n	800abfc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fc fd43 	bl	80076c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f8d3 	bl	800adfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac56:	e0b5      	b.n	800adc4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 80a7 	beq.w	800adc8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800ac7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 80a2 	beq.w	800adc8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	461a      	mov	r2, r3
 800aca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aca6:	647b      	str	r3, [r7, #68]	; 0x44
 800aca8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acae:	e841 2300 	strex	r3, r2, [r1]
 800acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e4      	bne.n	800ac84 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3308      	adds	r3, #8
 800acc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	e853 3f00 	ldrex	r3, [r3]
 800acc8:	623b      	str	r3, [r7, #32]
   return(result);
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	f023 0301 	bic.w	r3, r3, #1
 800acd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3308      	adds	r3, #8
 800acda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800acde:	633a      	str	r2, [r7, #48]	; 0x30
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ace4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e3      	bne.n	800acba <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f023 0310 	bic.w	r3, r3, #16
 800ad18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	461a      	mov	r2, r3
 800ad22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ad26:	61fb      	str	r3, [r7, #28]
 800ad28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2a:	69b9      	ldr	r1, [r7, #24]
 800ad2c:	69fa      	ldr	r2, [r7, #28]
 800ad2e:	e841 2300 	strex	r3, r2, [r1]
 800ad32:	617b      	str	r3, [r7, #20]
   return(result);
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1e4      	bne.n	800ad04 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f85b 	bl	800adfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad46:	e03f      	b.n	800adc8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00e      	beq.n	800ad72 <HAL_UART_IRQHandler+0x55a>
 800ad54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d008      	beq.n	800ad72 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ad68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fe6f 	bl	800ba4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad70:	e02d      	b.n	800adce <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ad72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00e      	beq.n	800ad9c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ad7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d008      	beq.n	800ad9c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d01c      	beq.n	800adcc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	4798      	blx	r3
    }
    return;
 800ad9a:	e017      	b.n	800adcc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d012      	beq.n	800adce <HAL_UART_IRQHandler+0x5b6>
 800ada8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00c      	beq.n	800adce <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fcc4 	bl	800b742 <UART_EndTransmit_IT>
    return;
 800adba:	e008      	b.n	800adce <HAL_UART_IRQHandler+0x5b6>
      return;
 800adbc:	bf00      	nop
 800adbe:	e006      	b.n	800adce <HAL_UART_IRQHandler+0x5b6>
    return;
 800adc0:	bf00      	nop
 800adc2:	e004      	b.n	800adce <HAL_UART_IRQHandler+0x5b6>
      return;
 800adc4:	bf00      	nop
 800adc6:	e002      	b.n	800adce <HAL_UART_IRQHandler+0x5b6>
      return;
 800adc8:	bf00      	nop
 800adca:	e000      	b.n	800adce <HAL_UART_IRQHandler+0x5b6>
    return;
 800adcc:	bf00      	nop
  }

}
 800adce:	37e8      	adds	r7, #232	; 0xe8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689a      	ldr	r2, [r3, #8]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	431a      	orrs	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ae42:	f023 030c 	bic.w	r3, r3, #12
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	6812      	ldr	r2, [r2, #0]
 800ae4a:	6979      	ldr	r1, [r7, #20]
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	68da      	ldr	r2, [r3, #12]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	430a      	orrs	r2, r1
 800ae64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	430a      	orrs	r2, r1
 800ae88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4aa8      	ldr	r2, [pc, #672]	; (800b130 <UART_SetConfig+0x31c>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d120      	bne.n	800aed6 <UART_SetConfig+0xc2>
 800ae94:	4ba7      	ldr	r3, [pc, #668]	; (800b134 <UART_SetConfig+0x320>)
 800ae96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d817      	bhi.n	800aed0 <UART_SetConfig+0xbc>
 800aea0:	a201      	add	r2, pc, #4	; (adr r2, 800aea8 <UART_SetConfig+0x94>)
 800aea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea6:	bf00      	nop
 800aea8:	0800aeb9 	.word	0x0800aeb9
 800aeac:	0800aec5 	.word	0x0800aec5
 800aeb0:	0800aecb 	.word	0x0800aecb
 800aeb4:	0800aebf 	.word	0x0800aebf
 800aeb8:	2301      	movs	r3, #1
 800aeba:	77fb      	strb	r3, [r7, #31]
 800aebc:	e0b5      	b.n	800b02a <UART_SetConfig+0x216>
 800aebe:	2302      	movs	r3, #2
 800aec0:	77fb      	strb	r3, [r7, #31]
 800aec2:	e0b2      	b.n	800b02a <UART_SetConfig+0x216>
 800aec4:	2304      	movs	r3, #4
 800aec6:	77fb      	strb	r3, [r7, #31]
 800aec8:	e0af      	b.n	800b02a <UART_SetConfig+0x216>
 800aeca:	2308      	movs	r3, #8
 800aecc:	77fb      	strb	r3, [r7, #31]
 800aece:	e0ac      	b.n	800b02a <UART_SetConfig+0x216>
 800aed0:	2310      	movs	r3, #16
 800aed2:	77fb      	strb	r3, [r7, #31]
 800aed4:	e0a9      	b.n	800b02a <UART_SetConfig+0x216>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a97      	ldr	r2, [pc, #604]	; (800b138 <UART_SetConfig+0x324>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d124      	bne.n	800af2a <UART_SetConfig+0x116>
 800aee0:	4b94      	ldr	r3, [pc, #592]	; (800b134 <UART_SetConfig+0x320>)
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aee8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aeec:	d011      	beq.n	800af12 <UART_SetConfig+0xfe>
 800aeee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aef2:	d817      	bhi.n	800af24 <UART_SetConfig+0x110>
 800aef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aef8:	d011      	beq.n	800af1e <UART_SetConfig+0x10a>
 800aefa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aefe:	d811      	bhi.n	800af24 <UART_SetConfig+0x110>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <UART_SetConfig+0xf8>
 800af04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af08:	d006      	beq.n	800af18 <UART_SetConfig+0x104>
 800af0a:	e00b      	b.n	800af24 <UART_SetConfig+0x110>
 800af0c:	2300      	movs	r3, #0
 800af0e:	77fb      	strb	r3, [r7, #31]
 800af10:	e08b      	b.n	800b02a <UART_SetConfig+0x216>
 800af12:	2302      	movs	r3, #2
 800af14:	77fb      	strb	r3, [r7, #31]
 800af16:	e088      	b.n	800b02a <UART_SetConfig+0x216>
 800af18:	2304      	movs	r3, #4
 800af1a:	77fb      	strb	r3, [r7, #31]
 800af1c:	e085      	b.n	800b02a <UART_SetConfig+0x216>
 800af1e:	2308      	movs	r3, #8
 800af20:	77fb      	strb	r3, [r7, #31]
 800af22:	e082      	b.n	800b02a <UART_SetConfig+0x216>
 800af24:	2310      	movs	r3, #16
 800af26:	77fb      	strb	r3, [r7, #31]
 800af28:	e07f      	b.n	800b02a <UART_SetConfig+0x216>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a83      	ldr	r2, [pc, #524]	; (800b13c <UART_SetConfig+0x328>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d124      	bne.n	800af7e <UART_SetConfig+0x16a>
 800af34:	4b7f      	ldr	r3, [pc, #508]	; (800b134 <UART_SetConfig+0x320>)
 800af36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800af3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800af40:	d011      	beq.n	800af66 <UART_SetConfig+0x152>
 800af42:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800af46:	d817      	bhi.n	800af78 <UART_SetConfig+0x164>
 800af48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af4c:	d011      	beq.n	800af72 <UART_SetConfig+0x15e>
 800af4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af52:	d811      	bhi.n	800af78 <UART_SetConfig+0x164>
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <UART_SetConfig+0x14c>
 800af58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af5c:	d006      	beq.n	800af6c <UART_SetConfig+0x158>
 800af5e:	e00b      	b.n	800af78 <UART_SetConfig+0x164>
 800af60:	2300      	movs	r3, #0
 800af62:	77fb      	strb	r3, [r7, #31]
 800af64:	e061      	b.n	800b02a <UART_SetConfig+0x216>
 800af66:	2302      	movs	r3, #2
 800af68:	77fb      	strb	r3, [r7, #31]
 800af6a:	e05e      	b.n	800b02a <UART_SetConfig+0x216>
 800af6c:	2304      	movs	r3, #4
 800af6e:	77fb      	strb	r3, [r7, #31]
 800af70:	e05b      	b.n	800b02a <UART_SetConfig+0x216>
 800af72:	2308      	movs	r3, #8
 800af74:	77fb      	strb	r3, [r7, #31]
 800af76:	e058      	b.n	800b02a <UART_SetConfig+0x216>
 800af78:	2310      	movs	r3, #16
 800af7a:	77fb      	strb	r3, [r7, #31]
 800af7c:	e055      	b.n	800b02a <UART_SetConfig+0x216>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a6f      	ldr	r2, [pc, #444]	; (800b140 <UART_SetConfig+0x32c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d124      	bne.n	800afd2 <UART_SetConfig+0x1be>
 800af88:	4b6a      	ldr	r3, [pc, #424]	; (800b134 <UART_SetConfig+0x320>)
 800af8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800af90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af94:	d011      	beq.n	800afba <UART_SetConfig+0x1a6>
 800af96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af9a:	d817      	bhi.n	800afcc <UART_SetConfig+0x1b8>
 800af9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afa0:	d011      	beq.n	800afc6 <UART_SetConfig+0x1b2>
 800afa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afa6:	d811      	bhi.n	800afcc <UART_SetConfig+0x1b8>
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <UART_SetConfig+0x1a0>
 800afac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb0:	d006      	beq.n	800afc0 <UART_SetConfig+0x1ac>
 800afb2:	e00b      	b.n	800afcc <UART_SetConfig+0x1b8>
 800afb4:	2300      	movs	r3, #0
 800afb6:	77fb      	strb	r3, [r7, #31]
 800afb8:	e037      	b.n	800b02a <UART_SetConfig+0x216>
 800afba:	2302      	movs	r3, #2
 800afbc:	77fb      	strb	r3, [r7, #31]
 800afbe:	e034      	b.n	800b02a <UART_SetConfig+0x216>
 800afc0:	2304      	movs	r3, #4
 800afc2:	77fb      	strb	r3, [r7, #31]
 800afc4:	e031      	b.n	800b02a <UART_SetConfig+0x216>
 800afc6:	2308      	movs	r3, #8
 800afc8:	77fb      	strb	r3, [r7, #31]
 800afca:	e02e      	b.n	800b02a <UART_SetConfig+0x216>
 800afcc:	2310      	movs	r3, #16
 800afce:	77fb      	strb	r3, [r7, #31]
 800afd0:	e02b      	b.n	800b02a <UART_SetConfig+0x216>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a5b      	ldr	r2, [pc, #364]	; (800b144 <UART_SetConfig+0x330>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d124      	bne.n	800b026 <UART_SetConfig+0x212>
 800afdc:	4b55      	ldr	r3, [pc, #340]	; (800b134 <UART_SetConfig+0x320>)
 800afde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800afe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800afe8:	d011      	beq.n	800b00e <UART_SetConfig+0x1fa>
 800afea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800afee:	d817      	bhi.n	800b020 <UART_SetConfig+0x20c>
 800aff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aff4:	d011      	beq.n	800b01a <UART_SetConfig+0x206>
 800aff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800affa:	d811      	bhi.n	800b020 <UART_SetConfig+0x20c>
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <UART_SetConfig+0x1f4>
 800b000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b004:	d006      	beq.n	800b014 <UART_SetConfig+0x200>
 800b006:	e00b      	b.n	800b020 <UART_SetConfig+0x20c>
 800b008:	2300      	movs	r3, #0
 800b00a:	77fb      	strb	r3, [r7, #31]
 800b00c:	e00d      	b.n	800b02a <UART_SetConfig+0x216>
 800b00e:	2302      	movs	r3, #2
 800b010:	77fb      	strb	r3, [r7, #31]
 800b012:	e00a      	b.n	800b02a <UART_SetConfig+0x216>
 800b014:	2304      	movs	r3, #4
 800b016:	77fb      	strb	r3, [r7, #31]
 800b018:	e007      	b.n	800b02a <UART_SetConfig+0x216>
 800b01a:	2308      	movs	r3, #8
 800b01c:	77fb      	strb	r3, [r7, #31]
 800b01e:	e004      	b.n	800b02a <UART_SetConfig+0x216>
 800b020:	2310      	movs	r3, #16
 800b022:	77fb      	strb	r3, [r7, #31]
 800b024:	e001      	b.n	800b02a <UART_SetConfig+0x216>
 800b026:	2310      	movs	r3, #16
 800b028:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b032:	d15c      	bne.n	800b0ee <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800b034:	7ffb      	ldrb	r3, [r7, #31]
 800b036:	2b08      	cmp	r3, #8
 800b038:	d827      	bhi.n	800b08a <UART_SetConfig+0x276>
 800b03a:	a201      	add	r2, pc, #4	; (adr r2, 800b040 <UART_SetConfig+0x22c>)
 800b03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b040:	0800b065 	.word	0x0800b065
 800b044:	0800b06d 	.word	0x0800b06d
 800b048:	0800b075 	.word	0x0800b075
 800b04c:	0800b08b 	.word	0x0800b08b
 800b050:	0800b07b 	.word	0x0800b07b
 800b054:	0800b08b 	.word	0x0800b08b
 800b058:	0800b08b 	.word	0x0800b08b
 800b05c:	0800b08b 	.word	0x0800b08b
 800b060:	0800b083 	.word	0x0800b083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b064:	f7fd ffc0 	bl	8008fe8 <HAL_RCC_GetPCLK1Freq>
 800b068:	61b8      	str	r0, [r7, #24]
        break;
 800b06a:	e013      	b.n	800b094 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b06c:	f7fd ffde 	bl	800902c <HAL_RCC_GetPCLK2Freq>
 800b070:	61b8      	str	r0, [r7, #24]
        break;
 800b072:	e00f      	b.n	800b094 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b074:	4b34      	ldr	r3, [pc, #208]	; (800b148 <UART_SetConfig+0x334>)
 800b076:	61bb      	str	r3, [r7, #24]
        break;
 800b078:	e00c      	b.n	800b094 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b07a:	f7fd ff3f 	bl	8008efc <HAL_RCC_GetSysClockFreq>
 800b07e:	61b8      	str	r0, [r7, #24]
        break;
 800b080:	e008      	b.n	800b094 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b086:	61bb      	str	r3, [r7, #24]
        break;
 800b088:	e004      	b.n	800b094 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800b08a:	2300      	movs	r3, #0
 800b08c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	77bb      	strb	r3, [r7, #30]
        break;
 800b092:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 8084 	beq.w	800b1a4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	005a      	lsls	r2, r3, #1
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	085b      	lsrs	r3, r3, #1
 800b0a6:	441a      	add	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	2b0f      	cmp	r3, #15
 800b0b8:	d916      	bls.n	800b0e8 <UART_SetConfig+0x2d4>
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c0:	d212      	bcs.n	800b0e8 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	f023 030f 	bic.w	r3, r3, #15
 800b0ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	085b      	lsrs	r3, r3, #1
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f003 0307 	and.w	r3, r3, #7
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	89fb      	ldrh	r3, [r7, #14]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	89fa      	ldrh	r2, [r7, #14]
 800b0e4:	60da      	str	r2, [r3, #12]
 800b0e6:	e05d      	b.n	800b1a4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	77bb      	strb	r3, [r7, #30]
 800b0ec:	e05a      	b.n	800b1a4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0ee:	7ffb      	ldrb	r3, [r7, #31]
 800b0f0:	2b08      	cmp	r3, #8
 800b0f2:	d836      	bhi.n	800b162 <UART_SetConfig+0x34e>
 800b0f4:	a201      	add	r2, pc, #4	; (adr r2, 800b0fc <UART_SetConfig+0x2e8>)
 800b0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fa:	bf00      	nop
 800b0fc:	0800b121 	.word	0x0800b121
 800b100:	0800b129 	.word	0x0800b129
 800b104:	0800b14d 	.word	0x0800b14d
 800b108:	0800b163 	.word	0x0800b163
 800b10c:	0800b153 	.word	0x0800b153
 800b110:	0800b163 	.word	0x0800b163
 800b114:	0800b163 	.word	0x0800b163
 800b118:	0800b163 	.word	0x0800b163
 800b11c:	0800b15b 	.word	0x0800b15b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b120:	f7fd ff62 	bl	8008fe8 <HAL_RCC_GetPCLK1Freq>
 800b124:	61b8      	str	r0, [r7, #24]
        break;
 800b126:	e021      	b.n	800b16c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b128:	f7fd ff80 	bl	800902c <HAL_RCC_GetPCLK2Freq>
 800b12c:	61b8      	str	r0, [r7, #24]
        break;
 800b12e:	e01d      	b.n	800b16c <UART_SetConfig+0x358>
 800b130:	40013800 	.word	0x40013800
 800b134:	40021000 	.word	0x40021000
 800b138:	40004400 	.word	0x40004400
 800b13c:	40004800 	.word	0x40004800
 800b140:	40004c00 	.word	0x40004c00
 800b144:	40005000 	.word	0x40005000
 800b148:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b14c:	4b1b      	ldr	r3, [pc, #108]	; (800b1bc <UART_SetConfig+0x3a8>)
 800b14e:	61bb      	str	r3, [r7, #24]
        break;
 800b150:	e00c      	b.n	800b16c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b152:	f7fd fed3 	bl	8008efc <HAL_RCC_GetSysClockFreq>
 800b156:	61b8      	str	r0, [r7, #24]
        break;
 800b158:	e008      	b.n	800b16c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b15a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b15e:	61bb      	str	r3, [r7, #24]
        break;
 800b160:	e004      	b.n	800b16c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	77bb      	strb	r3, [r7, #30]
        break;
 800b16a:	bf00      	nop
    }

    if (pclk != 0U)
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d018      	beq.n	800b1a4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	085a      	lsrs	r2, r3, #1
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	441a      	add	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	fbb2 f3f3 	udiv	r3, r2, r3
 800b184:	b29b      	uxth	r3, r3
 800b186:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2b0f      	cmp	r3, #15
 800b18c:	d908      	bls.n	800b1a0 <UART_SetConfig+0x38c>
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b194:	d204      	bcs.n	800b1a0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	60da      	str	r2, [r3, #12]
 800b19e:	e001      	b.n	800b1a4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b1b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3720      	adds	r7, #32
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	007a1200 	.word	0x007a1200

0800b1c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00a      	beq.n	800b1ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	f003 0302 	and.w	r3, r3, #2
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	f003 0304 	and.w	r3, r3, #4
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00a      	beq.n	800b22e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	430a      	orrs	r2, r1
 800b22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	f003 0308 	and.w	r3, r3, #8
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00a      	beq.n	800b250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	430a      	orrs	r2, r1
 800b24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	f003 0310 	and.w	r3, r3, #16
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00a      	beq.n	800b272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	f003 0320 	and.w	r3, r3, #32
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00a      	beq.n	800b294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	430a      	orrs	r2, r1
 800b292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01a      	beq.n	800b2d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2be:	d10a      	bne.n	800b2d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	605a      	str	r2, [r3, #4]
  }
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af02      	add	r7, sp, #8
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b314:	f7fb fa48 	bl	80067a8 <HAL_GetTick>
 800b318:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0308 	and.w	r3, r3, #8
 800b324:	2b08      	cmp	r3, #8
 800b326:	d10e      	bne.n	800b346 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f82d 	bl	800b396 <UART_WaitOnFlagUntilTimeout>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e023      	b.n	800b38e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0304 	and.w	r3, r3, #4
 800b350:	2b04      	cmp	r3, #4
 800b352:	d10e      	bne.n	800b372 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f817 	bl	800b396 <UART_WaitOnFlagUntilTimeout>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e00d      	b.n	800b38e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2220      	movs	r2, #32
 800b376:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2220      	movs	r2, #32
 800b37c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b09c      	sub	sp, #112	; 0x70
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	603b      	str	r3, [r7, #0]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3a6:	e0a5      	b.n	800b4f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ae:	f000 80a1 	beq.w	800b4f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3b2:	f7fb f9f9 	bl	80067a8 <HAL_GetTick>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d302      	bcc.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800b3c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d13e      	bne.n	800b446 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3dc:	667b      	str	r3, [r7, #100]	; 0x64
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3ee:	e841 2300 	strex	r3, r2, [r1]
 800b3f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b3f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1e6      	bne.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3308      	adds	r3, #8
 800b400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40c:	f023 0301 	bic.w	r3, r3, #1
 800b410:	663b      	str	r3, [r7, #96]	; 0x60
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3308      	adds	r3, #8
 800b418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b41a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b41c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e5      	bne.n	800b3fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2220      	movs	r2, #32
 800b432:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2220      	movs	r2, #32
 800b438:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	e067      	b.n	800b516 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 0304 	and.w	r3, r3, #4
 800b450:	2b00      	cmp	r3, #0
 800b452:	d04f      	beq.n	800b4f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b45e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b462:	d147      	bne.n	800b4f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b46c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	e853 3f00 	ldrex	r3, [r3]
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b482:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b48c:	637b      	str	r3, [r7, #52]	; 0x34
 800b48e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b494:	e841 2300 	strex	r3, r2, [r1]
 800b498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e6      	bne.n	800b46e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	f023 0301 	bic.w	r3, r3, #1
 800b4b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3308      	adds	r3, #8
 800b4be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b4c0:	623a      	str	r2, [r7, #32]
 800b4c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	69f9      	ldr	r1, [r7, #28]
 800b4c6:	6a3a      	ldr	r2, [r7, #32]
 800b4c8:	e841 2300 	strex	r3, r2, [r1]
 800b4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e5      	bne.n	800b4a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2220      	movs	r2, #32
 800b4de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e010      	b.n	800b516 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	69da      	ldr	r2, [r3, #28]
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	429a      	cmp	r2, r3
 800b502:	bf0c      	ite	eq
 800b504:	2301      	moveq	r3, #1
 800b506:	2300      	movne	r3, #0
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	461a      	mov	r2, r3
 800b50c:	79fb      	ldrb	r3, [r7, #7]
 800b50e:	429a      	cmp	r2, r3
 800b510:	f43f af4a 	beq.w	800b3a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3770      	adds	r7, #112	; 0x70
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b520:	b480      	push	{r7}
 800b522:	b091      	sub	sp, #68	; 0x44
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	88fa      	ldrh	r2, [r7, #6]
 800b538:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	88fa      	ldrh	r2, [r7, #6]
 800b540:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b552:	d10e      	bne.n	800b572 <UART_Start_Receive_IT+0x52>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d105      	bne.n	800b568 <UART_Start_Receive_IT+0x48>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b562:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b566:	e01a      	b.n	800b59e <UART_Start_Receive_IT+0x7e>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	22ff      	movs	r2, #255	; 0xff
 800b56c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b570:	e015      	b.n	800b59e <UART_Start_Receive_IT+0x7e>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10d      	bne.n	800b596 <UART_Start_Receive_IT+0x76>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d104      	bne.n	800b58c <UART_Start_Receive_IT+0x6c>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	22ff      	movs	r2, #255	; 0xff
 800b586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b58a:	e008      	b.n	800b59e <UART_Start_Receive_IT+0x7e>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	227f      	movs	r2, #127	; 0x7f
 800b590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b594:	e003      	b.n	800b59e <UART_Start_Receive_IT+0x7e>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2222      	movs	r2, #34	; 0x22
 800b5aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	e853 3f00 	ldrex	r3, [r3]
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	f043 0301 	orr.w	r3, r3, #1
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5cc:	637a      	str	r2, [r7, #52]	; 0x34
 800b5ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e5      	bne.n	800b5ac <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e8:	d107      	bne.n	800b5fa <UART_Start_Receive_IT+0xda>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d103      	bne.n	800b5fa <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4a14      	ldr	r2, [pc, #80]	; (800b648 <UART_Start_Receive_IT+0x128>)
 800b5f6:	665a      	str	r2, [r3, #100]	; 0x64
 800b5f8:	e002      	b.n	800b600 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4a13      	ldr	r2, [pc, #76]	; (800b64c <UART_Start_Receive_IT+0x12c>)
 800b5fe:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	613b      	str	r3, [r7, #16]
   return(result);
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b61c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b626:	623b      	str	r3, [r7, #32]
 800b628:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	69f9      	ldr	r1, [r7, #28]
 800b62c:	6a3a      	ldr	r2, [r7, #32]
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	61bb      	str	r3, [r7, #24]
   return(result);
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e6      	bne.n	800b608 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3744      	adds	r7, #68	; 0x44
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	0800b8f3 	.word	0x0800b8f3
 800b64c:	0800b797 	.word	0x0800b797

0800b650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b650:	b480      	push	{r7}
 800b652:	b095      	sub	sp, #84	; 0x54
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b66c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b676:	643b      	str	r3, [r7, #64]	; 0x40
 800b678:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b67c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e6      	bne.n	800b658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	61fb      	str	r3, [r7, #28]
   return(result);
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	f023 0301 	bic.w	r3, r3, #1
 800b6a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6b2:	e841 2300 	strex	r3, r2, [r1]
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1e5      	bne.n	800b68a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d118      	bne.n	800b6f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	e853 3f00 	ldrex	r3, [r3]
 800b6d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f023 0310 	bic.w	r3, r3, #16
 800b6da:	647b      	str	r3, [r7, #68]	; 0x44
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6e4:	61bb      	str	r3, [r7, #24]
 800b6e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e8:	6979      	ldr	r1, [r7, #20]
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	e841 2300 	strex	r3, r2, [r1]
 800b6f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e6      	bne.n	800b6c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b70a:	bf00      	nop
 800b70c:	3754      	adds	r7, #84	; 0x54
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7ff fb57 	bl	800ade8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b73a:	bf00      	nop
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b088      	sub	sp, #32
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	e853 3f00 	ldrex	r3, [r3]
 800b756:	60bb      	str	r3, [r7, #8]
   return(result);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b75e:	61fb      	str	r3, [r7, #28]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	461a      	mov	r2, r3
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	61bb      	str	r3, [r7, #24]
 800b76a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76c:	6979      	ldr	r1, [r7, #20]
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	e841 2300 	strex	r3, r2, [r1]
 800b774:	613b      	str	r3, [r7, #16]
   return(result);
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1e6      	bne.n	800b74a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2220      	movs	r2, #32
 800b780:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff fb23 	bl	800add4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b78e:	bf00      	nop
 800b790:	3720      	adds	r7, #32
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b096      	sub	sp, #88	; 0x58
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ac:	2b22      	cmp	r3, #34	; 0x22
 800b7ae:	f040 8094 	bne.w	800b8da <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b7b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b7bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b7c0:	b2d9      	uxtb	r1, r3
 800b7c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7cc:	400a      	ands	r2, r1
 800b7ce:	b2d2      	uxtb	r2, r2
 800b7d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d177      	bne.n	800b8ea <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b80e:	653b      	str	r3, [r7, #80]	; 0x50
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b818:	647b      	str	r3, [r7, #68]	; 0x44
 800b81a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e6      	bne.n	800b7fa <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3308      	adds	r3, #8
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	623b      	str	r3, [r7, #32]
   return(result);
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	f023 0301 	bic.w	r3, r3, #1
 800b842:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3308      	adds	r3, #8
 800b84a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b84c:	633a      	str	r2, [r7, #48]	; 0x30
 800b84e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e5      	bne.n	800b82c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2220      	movs	r2, #32
 800b864:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b870:	2b01      	cmp	r3, #1
 800b872:	d12e      	bne.n	800b8d2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	e853 3f00 	ldrex	r3, [r3]
 800b886:	60fb      	str	r3, [r7, #12]
   return(result);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0310 	bic.w	r3, r3, #16
 800b88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	461a      	mov	r2, r3
 800b896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b898:	61fb      	str	r3, [r7, #28]
 800b89a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89c:	69b9      	ldr	r1, [r7, #24]
 800b89e:	69fa      	ldr	r2, [r7, #28]
 800b8a0:	e841 2300 	strex	r3, r2, [r1]
 800b8a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1e6      	bne.n	800b87a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	69db      	ldr	r3, [r3, #28]
 800b8b2:	f003 0310 	and.w	r3, r3, #16
 800b8b6:	2b10      	cmp	r3, #16
 800b8b8:	d103      	bne.n	800b8c2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2210      	movs	r2, #16
 800b8c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff fa96 	bl	800adfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8d0:	e00b      	b.n	800b8ea <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7f8 fb7a 	bl	8003fcc <HAL_UART_RxCpltCallback>
}
 800b8d8:	e007      	b.n	800b8ea <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	699a      	ldr	r2, [r3, #24]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f042 0208 	orr.w	r2, r2, #8
 800b8e8:	619a      	str	r2, [r3, #24]
}
 800b8ea:	bf00      	nop
 800b8ec:	3758      	adds	r7, #88	; 0x58
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b096      	sub	sp, #88	; 0x58
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b900:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b908:	2b22      	cmp	r3, #34	; 0x22
 800b90a:	f040 8094 	bne.w	800ba36 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b914:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b91e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b922:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b926:	4013      	ands	r3, r2
 800b928:	b29a      	uxth	r2, r3
 800b92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b92c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b932:	1c9a      	adds	r2, r3, #2
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b93e:	b29b      	uxth	r3, r3
 800b940:	3b01      	subs	r3, #1
 800b942:	b29a      	uxth	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b950:	b29b      	uxth	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d177      	bne.n	800ba46 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b95e:	e853 3f00 	ldrex	r3, [r3]
 800b962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b96a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	461a      	mov	r2, r3
 800b972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b974:	643b      	str	r3, [r7, #64]	; 0x40
 800b976:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b97a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b97c:	e841 2300 	strex	r3, r2, [r1]
 800b980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1e6      	bne.n	800b956 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3308      	adds	r3, #8
 800b98e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	e853 3f00 	ldrex	r3, [r3]
 800b996:	61fb      	str	r3, [r7, #28]
   return(result);
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	f023 0301 	bic.w	r3, r3, #1
 800b99e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9b0:	e841 2300 	strex	r3, r2, [r1]
 800b9b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e5      	bne.n	800b988 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2220      	movs	r2, #32
 800b9c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d12e      	bne.n	800ba2e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	e853 3f00 	ldrex	r3, [r3]
 800b9e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	f023 0310 	bic.w	r3, r3, #16
 800b9ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f4:	61bb      	str	r3, [r7, #24]
 800b9f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f8:	6979      	ldr	r1, [r7, #20]
 800b9fa:	69ba      	ldr	r2, [r7, #24]
 800b9fc:	e841 2300 	strex	r3, r2, [r1]
 800ba00:	613b      	str	r3, [r7, #16]
   return(result);
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1e6      	bne.n	800b9d6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	f003 0310 	and.w	r3, r3, #16
 800ba12:	2b10      	cmp	r3, #16
 800ba14:	d103      	bne.n	800ba1e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2210      	movs	r2, #16
 800ba1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff f9e8 	bl	800adfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba2c:	e00b      	b.n	800ba46 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7f8 facc 	bl	8003fcc <HAL_UART_RxCpltCallback>
}
 800ba34:	e007      	b.n	800ba46 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	699a      	ldr	r2, [r3, #24]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f042 0208 	orr.w	r2, r2, #8
 800ba44:	619a      	str	r2, [r3, #24]
}
 800ba46:	bf00      	nop
 800ba48:	3758      	adds	r7, #88	; 0x58
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
	...

0800ba64 <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ba68:	4904      	ldr	r1, [pc, #16]	; (800ba7c <MX_FATFS_Init+0x18>)
 800ba6a:	4805      	ldr	r0, [pc, #20]	; (800ba80 <MX_FATFS_Init+0x1c>)
 800ba6c:	f004 fa24 	bl	800feb8 <FATFS_LinkDriver>
 800ba70:	4603      	mov	r3, r0
 800ba72:	461a      	mov	r2, r3
 800ba74:	4b03      	ldr	r3, [pc, #12]	; (800ba84 <MX_FATFS_Init+0x20>)
 800ba76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ba78:	bf00      	nop
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20002b6c 	.word	0x20002b6c
 800ba80:	20000010 	.word	0x20000010
 800ba84:	20002b68 	.word	0x20002b68

0800ba88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ba8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800baa2:	79fb      	ldrb	r3, [r7, #7]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7f7 fd91 	bl	80035cc <SD_disk_initialize>
 800baaa:	4603      	mov	r3, r0
 800baac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	4603      	mov	r3, r0
 800babe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800bac0:	79fb      	ldrb	r3, [r7, #7]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7f7 fe6e 	bl	80037a4 <SD_disk_status>
 800bac8:	4603      	mov	r3, r0
 800baca:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	607a      	str	r2, [r7, #4]
 800bade:	603b      	str	r3, [r7, #0]
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800bae4:	7bf8      	ldrb	r0, [r7, #15]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	68b9      	ldr	r1, [r7, #8]
 800baec:	f7f7 fe70 	bl	80037d0 <SD_disk_read>
 800baf0:	4603      	mov	r3, r0
 800baf2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60b9      	str	r1, [r7, #8]
 800bb04:	607a      	str	r2, [r7, #4]
 800bb06:	603b      	str	r3, [r7, #0]
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800bb0c:	7bf8      	ldrb	r0, [r7, #15]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	68b9      	ldr	r1, [r7, #8]
 800bb14:	f7f7 fec6 	bl	80038a4 <SD_disk_write>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	603a      	str	r2, [r7, #0]
 800bb2e:	71fb      	strb	r3, [r7, #7]
 800bb30:	460b      	mov	r3, r1
 800bb32:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	79b9      	ldrb	r1, [r7, #6]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f7 ff36 	bl	80039ac <SD_disk_ioctl>
 800bb40:	4603      	mov	r3, r0
 800bb42:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	4a08      	ldr	r2, [pc, #32]	; (800bb7c <disk_status+0x30>)
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	79fa      	ldrb	r2, [r7, #7]
 800bb64:	4905      	ldr	r1, [pc, #20]	; (800bb7c <disk_status+0x30>)
 800bb66:	440a      	add	r2, r1
 800bb68:	7a12      	ldrb	r2, [r2, #8]
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	4798      	blx	r3
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	20002d90 	.word	0x20002d90

0800bb80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800bb8e:	79fb      	ldrb	r3, [r7, #7]
 800bb90:	4a0d      	ldr	r2, [pc, #52]	; (800bbc8 <disk_initialize+0x48>)
 800bb92:	5cd3      	ldrb	r3, [r2, r3]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d111      	bne.n	800bbbc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	4a0b      	ldr	r2, [pc, #44]	; (800bbc8 <disk_initialize+0x48>)
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bba0:	79fb      	ldrb	r3, [r7, #7]
 800bba2:	4a09      	ldr	r2, [pc, #36]	; (800bbc8 <disk_initialize+0x48>)
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4413      	add	r3, r2
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	79fa      	ldrb	r2, [r7, #7]
 800bbae:	4906      	ldr	r1, [pc, #24]	; (800bbc8 <disk_initialize+0x48>)
 800bbb0:	440a      	add	r2, r1
 800bbb2:	7a12      	ldrb	r2, [r2, #8]
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4798      	blx	r3
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20002d90 	.word	0x20002d90

0800bbcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bbcc:	b590      	push	{r4, r7, lr}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60b9      	str	r1, [r7, #8]
 800bbd4:	607a      	str	r2, [r7, #4]
 800bbd6:	603b      	str	r3, [r7, #0]
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	4a0a      	ldr	r2, [pc, #40]	; (800bc08 <disk_read+0x3c>)
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	689c      	ldr	r4, [r3, #8]
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	4a07      	ldr	r2, [pc, #28]	; (800bc08 <disk_read+0x3c>)
 800bbec:	4413      	add	r3, r2
 800bbee:	7a18      	ldrb	r0, [r3, #8]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	68b9      	ldr	r1, [r7, #8]
 800bbf6:	47a0      	blx	r4
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	371c      	adds	r7, #28
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd90      	pop	{r4, r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20002d90 	.word	0x20002d90

0800bc0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bc0c:	b590      	push	{r4, r7, lr}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60b9      	str	r1, [r7, #8]
 800bc14:	607a      	str	r2, [r7, #4]
 800bc16:	603b      	str	r3, [r7, #0]
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	4a0a      	ldr	r2, [pc, #40]	; (800bc48 <disk_write+0x3c>)
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	68dc      	ldr	r4, [r3, #12]
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	4a07      	ldr	r2, [pc, #28]	; (800bc48 <disk_write+0x3c>)
 800bc2c:	4413      	add	r3, r2
 800bc2e:	7a18      	ldrb	r0, [r3, #8]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	47a0      	blx	r4
 800bc38:	4603      	mov	r3, r0
 800bc3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	371c      	adds	r7, #28
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd90      	pop	{r4, r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20002d90 	.word	0x20002d90

0800bc4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	603a      	str	r2, [r7, #0]
 800bc56:	71fb      	strb	r3, [r7, #7]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	4a09      	ldr	r2, [pc, #36]	; (800bc84 <disk_ioctl+0x38>)
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	79fa      	ldrb	r2, [r7, #7]
 800bc6a:	4906      	ldr	r1, [pc, #24]	; (800bc84 <disk_ioctl+0x38>)
 800bc6c:	440a      	add	r2, r1
 800bc6e:	7a10      	ldrb	r0, [r2, #8]
 800bc70:	79b9      	ldrb	r1, [r7, #6]
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	4798      	blx	r3
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]
  return res;
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	20002d90 	.word	0x20002d90

0800bc88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bc88:	b480      	push	{r7}
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800bc9c:	e007      	b.n	800bcae <mem_cpy+0x26>
		*d++ = *s++;
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	1c53      	adds	r3, r2, #1
 800bca2:	613b      	str	r3, [r7, #16]
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	1c59      	adds	r1, r3, #1
 800bca8:	6179      	str	r1, [r7, #20]
 800bcaa:	7812      	ldrb	r2, [r2, #0]
 800bcac:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	1e5a      	subs	r2, r3, #1
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1f2      	bne.n	800bc9e <mem_cpy+0x16>
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	371c      	adds	r7, #28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bcc6:	b480      	push	{r7}
 800bcc8:	b087      	sub	sp, #28
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800bcd6:	e005      	b.n	800bce4 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	617a      	str	r2, [r7, #20]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	b2d2      	uxtb	r2, r2
 800bce2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	1e5a      	subs	r2, r3, #1
 800bce8:	607a      	str	r2, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1f4      	bne.n	800bcd8 <mem_set+0x12>
}
 800bcee:	bf00      	nop
 800bcf0:	bf00      	nop
 800bcf2:	371c      	adds	r7, #28
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800bcfc:	b480      	push	{r7}
 800bcfe:	b089      	sub	sp, #36	; 0x24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	61fb      	str	r3, [r7, #28]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800bd14:	bf00      	nop
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	1e5a      	subs	r2, r3, #1
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00d      	beq.n	800bd3c <mem_cmp+0x40>
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	1c5a      	adds	r2, r3, #1
 800bd24:	61fa      	str	r2, [r7, #28]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	61ba      	str	r2, [r7, #24]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	1acb      	subs	r3, r1, r3
 800bd34:	617b      	str	r3, [r7, #20]
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d0ec      	beq.n	800bd16 <mem_cmp+0x1a>
	return r;
 800bd3c:	697b      	ldr	r3, [r7, #20]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3724      	adds	r7, #36	; 0x24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800bd4a:	b480      	push	{r7}
 800bd4c:	b083      	sub	sp, #12
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bd54:	e002      	b.n	800bd5c <chk_chr+0x12>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	607b      	str	r3, [r7, #4]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d005      	beq.n	800bd70 <chk_chr+0x26>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d1f2      	bne.n	800bd56 <chk_chr+0xc>
	return *str;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	781b      	ldrb	r3, [r3, #0]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60bb      	str	r3, [r7, #8]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e03b      	b.n	800be0c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800bd94:	4931      	ldr	r1, [pc, #196]	; (800be5c <chk_lock+0xdc>)
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	4613      	mov	r3, r2
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	4413      	add	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	440b      	add	r3, r1
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d02c      	beq.n	800be02 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800bda8:	492c      	ldr	r1, [pc, #176]	; (800be5c <chk_lock+0xdc>)
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	4613      	mov	r3, r2
 800bdae:	005b      	lsls	r3, r3, #1
 800bdb0:	4413      	add	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	440b      	add	r3, r1
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d120      	bne.n	800be06 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800bdc4:	4925      	ldr	r1, [pc, #148]	; (800be5c <chk_lock+0xdc>)
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	4413      	add	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	440b      	add	r3, r1
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bddc:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d111      	bne.n	800be06 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800bde2:	491e      	ldr	r1, [pc, #120]	; (800be5c <chk_lock+0xdc>)
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	4613      	mov	r3, r2
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	4413      	add	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	440b      	add	r3, r1
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	881a      	ldrh	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdfa:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d102      	bne.n	800be06 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800be00:	e007      	b.n	800be12 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800be02:	2301      	movs	r3, #1
 800be04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d9c0      	bls.n	800bd94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d109      	bne.n	800be2c <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d102      	bne.n	800be24 <chk_lock+0xa4>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b02      	cmp	r3, #2
 800be22:	d101      	bne.n	800be28 <chk_lock+0xa8>
 800be24:	2300      	movs	r3, #0
 800be26:	e013      	b.n	800be50 <chk_lock+0xd0>
 800be28:	2312      	movs	r3, #18
 800be2a:	e011      	b.n	800be50 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10b      	bne.n	800be4a <chk_lock+0xca>
 800be32:	490a      	ldr	r1, [pc, #40]	; (800be5c <chk_lock+0xdc>)
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	4613      	mov	r3, r2
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	4413      	add	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	440b      	add	r3, r1
 800be40:	330a      	adds	r3, #10
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be48:	d101      	bne.n	800be4e <chk_lock+0xce>
 800be4a:	2310      	movs	r3, #16
 800be4c:	e000      	b.n	800be50 <chk_lock+0xd0>
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	20002b78 	.word	0x20002b78

0800be60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be66:	2300      	movs	r3, #0
 800be68:	607b      	str	r3, [r7, #4]
 800be6a:	e002      	b.n	800be72 <enq_lock+0x12>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	3301      	adds	r3, #1
 800be70:	607b      	str	r3, [r7, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d809      	bhi.n	800be8c <enq_lock+0x2c>
 800be78:	490a      	ldr	r1, [pc, #40]	; (800bea4 <enq_lock+0x44>)
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	4613      	mov	r3, r2
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	4413      	add	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	440b      	add	r3, r1
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1ef      	bne.n	800be6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	bf14      	ite	ne
 800be92:	2301      	movne	r3, #1
 800be94:	2300      	moveq	r3, #0
 800be96:	b2db      	uxtb	r3, r3
}
 800be98:	4618      	mov	r0, r3
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	20002b78 	.word	0x20002b78

0800bea8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	e02e      	b.n	800bf16 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800beb8:	4959      	ldr	r1, [pc, #356]	; (800c020 <inc_lock+0x178>)
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	4613      	mov	r3, r2
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	4413      	add	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	440b      	add	r3, r1
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d11d      	bne.n	800bf10 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800bed4:	4952      	ldr	r1, [pc, #328]	; (800c020 <inc_lock+0x178>)
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	4613      	mov	r3, r2
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	440b      	add	r3, r1
 800bee2:	3304      	adds	r3, #4
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800beee:	429a      	cmp	r2, r3
 800bef0:	d10e      	bne.n	800bf10 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800bef2:	494b      	ldr	r1, [pc, #300]	; (800c020 <inc_lock+0x178>)
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	4613      	mov	r3, r2
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	440b      	add	r3, r1
 800bf00:	3308      	adds	r3, #8
 800bf02:	881a      	ldrh	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf0a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d006      	beq.n	800bf1e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3301      	adds	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d9cd      	bls.n	800beb8 <inc_lock+0x10>
 800bf1c:	e000      	b.n	800bf20 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800bf1e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d148      	bne.n	800bfb8 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf26:	2300      	movs	r3, #0
 800bf28:	60fb      	str	r3, [r7, #12]
 800bf2a:	e002      	b.n	800bf32 <inc_lock+0x8a>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d809      	bhi.n	800bf4c <inc_lock+0xa4>
 800bf38:	4939      	ldr	r1, [pc, #228]	; (800c020 <inc_lock+0x178>)
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	440b      	add	r3, r1
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1ef      	bne.n	800bf2c <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d101      	bne.n	800bf56 <inc_lock+0xae>
 800bf52:	2300      	movs	r3, #0
 800bf54:	e05d      	b.n	800c012 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf5c:	6819      	ldr	r1, [r3, #0]
 800bf5e:	4830      	ldr	r0, [pc, #192]	; (800c020 <inc_lock+0x178>)
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	4613      	mov	r3, r2
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4403      	add	r3, r0
 800bf6c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf74:	6899      	ldr	r1, [r3, #8]
 800bf76:	482a      	ldr	r0, [pc, #168]	; (800c020 <inc_lock+0x178>)
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4403      	add	r3, r0
 800bf84:	3304      	adds	r3, #4
 800bf86:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf8e:	88d8      	ldrh	r0, [r3, #6]
 800bf90:	4923      	ldr	r1, [pc, #140]	; (800c020 <inc_lock+0x178>)
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	4613      	mov	r3, r2
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	440b      	add	r3, r1
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800bfa4:	491e      	ldr	r1, [pc, #120]	; (800c020 <inc_lock+0x178>)
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	005b      	lsls	r3, r3, #1
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	330a      	adds	r3, #10
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00c      	beq.n	800bfd8 <inc_lock+0x130>
 800bfbe:	4918      	ldr	r1, [pc, #96]	; (800c020 <inc_lock+0x178>)
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	440b      	add	r3, r1
 800bfcc:	330a      	adds	r3, #10
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <inc_lock+0x130>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e01c      	b.n	800c012 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10b      	bne.n	800bff6 <inc_lock+0x14e>
 800bfde:	4910      	ldr	r1, [pc, #64]	; (800c020 <inc_lock+0x178>)
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	005b      	lsls	r3, r3, #1
 800bfe6:	4413      	add	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	440b      	add	r3, r1
 800bfec:	330a      	adds	r3, #10
 800bfee:	881b      	ldrh	r3, [r3, #0]
 800bff0:	3301      	adds	r3, #1
 800bff2:	b299      	uxth	r1, r3
 800bff4:	e001      	b.n	800bffa <inc_lock+0x152>
 800bff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bffa:	4809      	ldr	r0, [pc, #36]	; (800c020 <inc_lock+0x178>)
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	4613      	mov	r3, r2
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4403      	add	r3, r0
 800c008:	330a      	adds	r3, #10
 800c00a:	460a      	mov	r2, r1
 800c00c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3301      	adds	r3, #1
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	20002b78 	.word	0x20002b78

0800c024 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3b01      	subs	r3, #1
 800c030:	607b      	str	r3, [r7, #4]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d82e      	bhi.n	800c096 <dec_lock+0x72>
		n = Files[i].ctr;
 800c038:	491b      	ldr	r1, [pc, #108]	; (800c0a8 <dec_lock+0x84>)
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	4613      	mov	r3, r2
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	4413      	add	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	440b      	add	r3, r1
 800c046:	330a      	adds	r3, #10
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c04c:	89fb      	ldrh	r3, [r7, #14]
 800c04e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c052:	d101      	bne.n	800c058 <dec_lock+0x34>
 800c054:	2300      	movs	r3, #0
 800c056:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800c058:	89fb      	ldrh	r3, [r7, #14]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d002      	beq.n	800c064 <dec_lock+0x40>
 800c05e:	89fb      	ldrh	r3, [r7, #14]
 800c060:	3b01      	subs	r3, #1
 800c062:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c064:	4910      	ldr	r1, [pc, #64]	; (800c0a8 <dec_lock+0x84>)
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	4613      	mov	r3, r2
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	4413      	add	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	440b      	add	r3, r1
 800c072:	330a      	adds	r3, #10
 800c074:	89fa      	ldrh	r2, [r7, #14]
 800c076:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c078:	89fb      	ldrh	r3, [r7, #14]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d108      	bne.n	800c090 <dec_lock+0x6c>
 800c07e:	490a      	ldr	r1, [pc, #40]	; (800c0a8 <dec_lock+0x84>)
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	440b      	add	r3, r1
 800c08c:	2200      	movs	r2, #0
 800c08e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	737b      	strb	r3, [r7, #13]
 800c094:	e001      	b.n	800c09a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c096:	2302      	movs	r3, #2
 800c098:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c09a:	7b7b      	ldrb	r3, [r7, #13]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	20002b78 	.word	0x20002b78

0800c0ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	e016      	b.n	800c0e8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0ba:	4910      	ldr	r1, [pc, #64]	; (800c0fc <clear_lock+0x50>)
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	440b      	add	r3, r1
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d108      	bne.n	800c0e2 <clear_lock+0x36>
 800c0d0:	490a      	ldr	r1, [pc, #40]	; (800c0fc <clear_lock+0x50>)
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	4413      	add	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	440b      	add	r3, r1
 800c0de:	2200      	movs	r2, #0
 800c0e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d9e5      	bls.n	800c0ba <clear_lock+0xe>
	}
}
 800c0ee:	bf00      	nop
 800c0f0:	bf00      	nop
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	20002b78 	.word	0x20002b78

0800c100 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c112:	791b      	ldrb	r3, [r3, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d040      	beq.n	800c19a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c128:	7858      	ldrb	r0, [r3, #1]
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	2301      	movs	r3, #1
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	f7ff fd6c 	bl	800bc0c <disk_write>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <sync_window+0x40>
			res = FR_DISK_ERR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	73fb      	strb	r3, [r7, #15]
 800c13e:	e02c      	b.n	800c19a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c146:	2200      	movs	r2, #0
 800c148:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	1ad2      	subs	r2, r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d21b      	bcs.n	800c19a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c168:	78db      	ldrb	r3, [r3, #3]
 800c16a:	613b      	str	r3, [r7, #16]
 800c16c:	e012      	b.n	800c194 <sync_window+0x94>
					wsect += fs->fsize;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	4413      	add	r3, r2
 800c17a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c182:	7858      	ldrb	r0, [r3, #1]
 800c184:	6879      	ldr	r1, [r7, #4]
 800c186:	2301      	movs	r3, #1
 800c188:	697a      	ldr	r2, [r7, #20]
 800c18a:	f7ff fd3f 	bl	800bc0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	3b01      	subs	r3, #1
 800c192:	613b      	str	r3, [r7, #16]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d8e9      	bhi.n	800c16e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3718      	adds	r7, #24
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d01e      	beq.n	800c1fe <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7ff ff9d 	bl	800c100 <sync_window>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c1ca:	7bfb      	ldrb	r3, [r7, #15]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d116      	bne.n	800c1fe <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d6:	7858      	ldrb	r0, [r3, #1]
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	2301      	movs	r3, #1
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	f7ff fcf5 	bl	800bbcc <disk_read>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d004      	beq.n	800c1f2 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7ff ff75 	bl	800c100 <sync_window>
 800c216:	4603      	mov	r3, r0
 800c218:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f040 80ad 	bne.w	800c37c <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	f040 8098 	bne.w	800c360 <sync_fs+0x158>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c236:	795b      	ldrb	r3, [r3, #5]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	f040 8091 	bne.w	800c360 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c246:	895b      	ldrh	r3, [r3, #10]
 800c248:	461a      	mov	r2, r3
 800c24a:	2100      	movs	r1, #0
 800c24c:	f7ff fd3b 	bl	800bcc6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2255      	movs	r2, #85	; 0x55
 800c254:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	22aa      	movs	r2, #170	; 0xaa
 800c25c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2252      	movs	r2, #82	; 0x52
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2252      	movs	r2, #82	; 0x52
 800c26a:	705a      	strb	r2, [r3, #1]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2261      	movs	r2, #97	; 0x61
 800c270:	709a      	strb	r2, [r3, #2]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2241      	movs	r2, #65	; 0x41
 800c276:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2272      	movs	r2, #114	; 0x72
 800c27c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2272      	movs	r2, #114	; 0x72
 800c284:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2241      	movs	r2, #65	; 0x41
 800c28c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2261      	movs	r2, #97	; 0x61
 800c294:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	0a1b      	lsrs	r3, r3, #8
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	0c1b      	lsrs	r3, r3, #16
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	0e1b      	lsrs	r3, r3, #24
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	0a1b      	lsrs	r3, r3, #8
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	b2da      	uxtb	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	0c1b      	lsrs	r3, r3, #16
 800c312:	b2da      	uxtb	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	0e1b      	lsrs	r3, r3, #24
 800c324:	b2da      	uxtb	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c332:	69db      	ldr	r3, [r3, #28]
 800c334:	3301      	adds	r3, #1
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c33c:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c344:	7858      	ldrb	r0, [r3, #1]
 800c346:	6879      	ldr	r1, [r7, #4]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c350:	2301      	movs	r3, #1
 800c352:	f7ff fc5b 	bl	800bc0c <disk_write>
			fs->fsi_flag = 0;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c35c:	2200      	movs	r2, #0
 800c35e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c366:	785b      	ldrb	r3, [r3, #1]
 800c368:	2200      	movs	r2, #0
 800c36a:	2100      	movs	r1, #0
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff fc6d 	bl	800bc4c <disk_ioctl>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <sync_fs+0x174>
			res = FR_DISK_ERR;
 800c378:	2301      	movs	r3, #1
 800c37a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c386:	b480      	push	{r7}
 800c388:	b083      	sub	sp, #12
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	3b02      	subs	r3, #2
 800c394:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	3b02      	subs	r3, #2
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d301      	bcc.n	800c3aa <clust2sect+0x24>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e00c      	b.n	800c3c4 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b0:	789b      	ldrb	r3, [r3, #2]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	fb03 f202 	mul.w	r2, r3, r2
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c2:	4413      	add	r3, r2
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d906      	bls.n	800c3ee <get_fat+0x1e>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3e6:	695b      	ldr	r3, [r3, #20]
 800c3e8:	683a      	ldr	r2, [r7, #0]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d302      	bcc.n	800c3f4 <get_fat+0x24>
		val = 1;	/* Internal error */
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	e0e4      	b.n	800c5be <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	2b03      	cmp	r3, #3
 800c404:	f000 8098 	beq.w	800c538 <get_fat+0x168>
 800c408:	2b03      	cmp	r3, #3
 800c40a:	f300 80ce 	bgt.w	800c5aa <get_fat+0x1da>
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d002      	beq.n	800c418 <get_fat+0x48>
 800c412:	2b02      	cmp	r3, #2
 800c414:	d05f      	beq.n	800c4d6 <get_fat+0x106>
 800c416:	e0c8      	b.n	800c5aa <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	085b      	lsrs	r3, r3, #1
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	4413      	add	r3, r2
 800c424:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c42c:	6a1a      	ldr	r2, [r3, #32]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c434:	895b      	ldrh	r3, [r3, #10]
 800c436:	4619      	mov	r1, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c43e:	4413      	add	r3, r2
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff feae 	bl	800c1a4 <move_window>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f040 80b0 	bne.w	800c5b0 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	1c5a      	adds	r2, r3, #1
 800c454:	60fa      	str	r2, [r7, #12]
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c45c:	8952      	ldrh	r2, [r2, #10]
 800c45e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c462:	fb01 f202 	mul.w	r2, r1, r2
 800c466:	1a9b      	subs	r3, r3, r2
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	5cd3      	ldrb	r3, [r2, r3]
 800c46c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c474:	6a1a      	ldr	r2, [r3, #32]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47c:	895b      	ldrh	r3, [r3, #10]
 800c47e:	4619      	mov	r1, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	fbb3 f3f1 	udiv	r3, r3, r1
 800c486:	4413      	add	r3, r2
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7ff fe8a 	bl	800c1a4 <move_window>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	f040 808e 	bne.w	800c5b4 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c49e:	895b      	ldrh	r3, [r3, #10]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4a8:	fb01 f202 	mul.w	r2, r1, r2
 800c4ac:	1a9b      	subs	r3, r3, r2
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	5cd3      	ldrb	r3, [r2, r3]
 800c4b2:	021b      	lsls	r3, r3, #8
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <get_fat+0xfc>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	091b      	lsrs	r3, r3, #4
 800c4ca:	e002      	b.n	800c4d2 <get_fat+0x102>
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4d2:	617b      	str	r3, [r7, #20]
			break;
 800c4d4:	e073      	b.n	800c5be <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4dc:	6a1a      	ldr	r2, [r3, #32]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e4:	895b      	ldrh	r3, [r3, #10]
 800c4e6:	085b      	lsrs	r3, r3, #1
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4f2:	4413      	add	r3, r2
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7ff fe54 	bl	800c1a4 <move_window>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d15a      	bne.n	800c5b8 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c50c:	8952      	ldrh	r2, [r2, #10]
 800c50e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c512:	fb01 f202 	mul.w	r2, r1, r2
 800c516:	1a9b      	subs	r3, r3, r2
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	4413      	add	r3, r2
 800c51c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	3301      	adds	r3, #1
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	021b      	lsls	r3, r3, #8
 800c526:	b21a      	sxth	r2, r3
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	b21b      	sxth	r3, r3
 800c52e:	4313      	orrs	r3, r2
 800c530:	b21b      	sxth	r3, r3
 800c532:	b29b      	uxth	r3, r3
 800c534:	617b      	str	r3, [r7, #20]
			break;
 800c536:	e042      	b.n	800c5be <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c53e:	6a1a      	ldr	r2, [r3, #32]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c546:	895b      	ldrh	r3, [r3, #10]
 800c548:	089b      	lsrs	r3, r3, #2
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	4619      	mov	r1, r3
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	fbb3 f3f1 	udiv	r3, r3, r1
 800c554:	4413      	add	r3, r2
 800c556:	4619      	mov	r1, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff fe23 	bl	800c1a4 <move_window>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d12b      	bne.n	800c5bc <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c56e:	8952      	ldrh	r2, [r2, #10]
 800c570:	fbb3 f1f2 	udiv	r1, r3, r2
 800c574:	fb01 f202 	mul.w	r2, r1, r2
 800c578:	1a9b      	subs	r3, r3, r2
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	4413      	add	r3, r2
 800c57e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	3303      	adds	r3, #3
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	061a      	lsls	r2, r3, #24
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	3302      	adds	r3, #2
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	041b      	lsls	r3, r3, #16
 800c590:	4313      	orrs	r3, r2
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	3201      	adds	r2, #1
 800c596:	7812      	ldrb	r2, [r2, #0]
 800c598:	0212      	lsls	r2, r2, #8
 800c59a:	4313      	orrs	r3, r2
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	7812      	ldrb	r2, [r2, #0]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5a6:	617b      	str	r3, [r7, #20]
			break;
 800c5a8:	e009      	b.n	800c5be <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	617b      	str	r3, [r7, #20]
 800c5ae:	e006      	b.n	800c5be <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5b0:	bf00      	nop
 800c5b2:	e004      	b.n	800c5be <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5b4:	bf00      	nop
 800c5b6:	e002      	b.n	800c5be <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c5b8:	bf00      	nop
 800c5ba:	e000      	b.n	800c5be <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5bc:	bf00      	nop
		}
	}

	return val;
 800c5be:	697b      	ldr	r3, [r7, #20]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3718      	adds	r7, #24
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d906      	bls.n	800c5e8 <put_fat+0x20>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d302      	bcc.n	800c5ee <put_fat+0x26>
		res = FR_INT_ERR;
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	77fb      	strb	r3, [r7, #31]
 800c5ec:	e13a      	b.n	800c864 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	2b03      	cmp	r3, #3
 800c5f8:	f000 80d0 	beq.w	800c79c <put_fat+0x1d4>
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	f300 8127 	bgt.w	800c850 <put_fat+0x288>
 800c602:	2b01      	cmp	r3, #1
 800c604:	d003      	beq.n	800c60e <put_fat+0x46>
 800c606:	2b02      	cmp	r3, #2
 800c608:	f000 808f 	beq.w	800c72a <put_fat+0x162>
 800c60c:	e120      	b.n	800c850 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	617b      	str	r3, [r7, #20]
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	085b      	lsrs	r3, r3, #1
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	4413      	add	r3, r2
 800c61a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c622:	6a1a      	ldr	r2, [r3, #32]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c62a:	895b      	ldrh	r3, [r3, #10]
 800c62c:	4619      	mov	r1, r3
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	fbb3 f3f1 	udiv	r3, r3, r1
 800c634:	4413      	add	r3, r2
 800c636:	4619      	mov	r1, r3
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff fdb3 	bl	800c1a4 <move_window>
 800c63e:	4603      	mov	r3, r0
 800c640:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c642:	7ffb      	ldrb	r3, [r7, #31]
 800c644:	2b00      	cmp	r3, #0
 800c646:	f040 8106 	bne.w	800c856 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	617a      	str	r2, [r7, #20]
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c656:	8952      	ldrh	r2, [r2, #10]
 800c658:	fbb3 f1f2 	udiv	r1, r3, r2
 800c65c:	fb01 f202 	mul.w	r2, r1, r2
 800c660:	1a9b      	subs	r3, r3, r2
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	4413      	add	r3, r2
 800c666:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	f003 0301 	and.w	r3, r3, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00d      	beq.n	800c68e <put_fat+0xc6>
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	b25b      	sxtb	r3, r3
 800c678:	f003 030f 	and.w	r3, r3, #15
 800c67c:	b25a      	sxtb	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	b2db      	uxtb	r3, r3
 800c682:	011b      	lsls	r3, r3, #4
 800c684:	b25b      	sxtb	r3, r3
 800c686:	4313      	orrs	r3, r2
 800c688:	b25b      	sxtb	r3, r3
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	e001      	b.n	800c692 <put_fat+0xca>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	b2db      	uxtb	r3, r3
 800c692:	69ba      	ldr	r2, [r7, #24]
 800c694:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c69c:	2201      	movs	r2, #1
 800c69e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6a6:	6a1a      	ldr	r2, [r3, #32]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ae:	895b      	ldrh	r3, [r3, #10]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6b8:	4413      	add	r3, r2
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f7ff fd71 	bl	800c1a4 <move_window>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6c6:	7ffb      	ldrb	r3, [r7, #31]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f040 80c6 	bne.w	800c85a <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d4:	895b      	ldrh	r3, [r3, #10]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6de:	fb01 f202 	mul.w	r2, r1, r2
 800c6e2:	1a9b      	subs	r3, r3, r2
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	f003 0301 	and.w	r3, r3, #1
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <put_fat+0x134>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	091b      	lsrs	r3, r3, #4
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	e00e      	b.n	800c71a <put_fat+0x152>
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	b25b      	sxtb	r3, r3
 800c702:	f023 030f 	bic.w	r3, r3, #15
 800c706:	b25a      	sxtb	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	0a1b      	lsrs	r3, r3, #8
 800c70c:	b25b      	sxtb	r3, r3
 800c70e:	f003 030f 	and.w	r3, r3, #15
 800c712:	b25b      	sxtb	r3, r3
 800c714:	4313      	orrs	r3, r2
 800c716:	b25b      	sxtb	r3, r3
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	69ba      	ldr	r2, [r7, #24]
 800c71c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c724:	2201      	movs	r2, #1
 800c726:	711a      	strb	r2, [r3, #4]
			break;
 800c728:	e09c      	b.n	800c864 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c730:	6a1a      	ldr	r2, [r3, #32]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c738:	895b      	ldrh	r3, [r3, #10]
 800c73a:	085b      	lsrs	r3, r3, #1
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	4619      	mov	r1, r3
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	fbb3 f3f1 	udiv	r3, r3, r1
 800c746:	4413      	add	r3, r2
 800c748:	4619      	mov	r1, r3
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	f7ff fd2a 	bl	800c1a4 <move_window>
 800c750:	4603      	mov	r3, r0
 800c752:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c754:	7ffb      	ldrb	r3, [r7, #31]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f040 8081 	bne.w	800c85e <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	005b      	lsls	r3, r3, #1
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c766:	8952      	ldrh	r2, [r2, #10]
 800c768:	fbb3 f1f2 	udiv	r1, r3, r2
 800c76c:	fb01 f202 	mul.w	r2, r1, r2
 800c770:	1a9b      	subs	r3, r3, r2
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	4413      	add	r3, r2
 800c776:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	701a      	strb	r2, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	b29b      	uxth	r3, r3
 800c784:	0a1b      	lsrs	r3, r3, #8
 800c786:	b29a      	uxth	r2, r3
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	3301      	adds	r3, #1
 800c78c:	b2d2      	uxtb	r2, r2
 800c78e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c796:	2201      	movs	r2, #1
 800c798:	711a      	strb	r2, [r3, #4]
			break;
 800c79a:	e063      	b.n	800c864 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7a2:	6a1a      	ldr	r2, [r3, #32]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7aa:	895b      	ldrh	r3, [r3, #10]
 800c7ac:	089b      	lsrs	r3, r3, #2
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7b8:	4413      	add	r3, r2
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f7ff fcf1 	bl	800c1a4 <move_window>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7c6:	7ffb      	ldrb	r3, [r7, #31]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d14a      	bne.n	800c862 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c7d6:	8952      	ldrh	r2, [r2, #10]
 800c7d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7dc:	fb01 f202 	mul.w	r2, r1, r2
 800c7e0:	1a9b      	subs	r3, r3, r2
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	3303      	adds	r3, #3
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	061a      	lsls	r2, r3, #24
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	3302      	adds	r3, #2
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	041b      	lsls	r3, r3, #16
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	3201      	adds	r2, #1
 800c7fe:	7812      	ldrb	r2, [r2, #0]
 800c800:	0212      	lsls	r2, r2, #8
 800c802:	4313      	orrs	r3, r2
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	7812      	ldrb	r2, [r2, #0]
 800c808:	4313      	orrs	r3, r2
 800c80a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	4313      	orrs	r3, r2
 800c812:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	b2da      	uxtb	r2, r3
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	701a      	strb	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	0a1b      	lsrs	r3, r3, #8
 800c822:	b29a      	uxth	r2, r3
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	3301      	adds	r3, #1
 800c828:	b2d2      	uxtb	r2, r2
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	0c1a      	lsrs	r2, r3, #16
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	3302      	adds	r3, #2
 800c834:	b2d2      	uxtb	r2, r2
 800c836:	701a      	strb	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	0e1a      	lsrs	r2, r3, #24
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	3303      	adds	r3, #3
 800c840:	b2d2      	uxtb	r2, r2
 800c842:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c84a:	2201      	movs	r2, #1
 800c84c:	711a      	strb	r2, [r3, #4]
			break;
 800c84e:	e009      	b.n	800c864 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800c850:	2302      	movs	r3, #2
 800c852:	77fb      	strb	r3, [r7, #31]
 800c854:	e006      	b.n	800c864 <put_fat+0x29c>
			if (res != FR_OK) break;
 800c856:	bf00      	nop
 800c858:	e004      	b.n	800c864 <put_fat+0x29c>
			if (res != FR_OK) break;
 800c85a:	bf00      	nop
 800c85c:	e002      	b.n	800c864 <put_fat+0x29c>
			if (res != FR_OK) break;
 800c85e:	bf00      	nop
 800c860:	e000      	b.n	800c864 <put_fat+0x29c>
			if (res != FR_OK) break;
 800c862:	bf00      	nop
		}
	}

	return res;
 800c864:	7ffb      	ldrb	r3, [r7, #31]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3720      	adds	r7, #32
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d906      	bls.n	800c88c <remove_chain+0x1e>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d302      	bcc.n	800c892 <remove_chain+0x24>
		res = FR_INT_ERR;
 800c88c:	2302      	movs	r3, #2
 800c88e:	73fb      	strb	r3, [r7, #15]
 800c890:	e049      	b.n	800c926 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800c892:	2300      	movs	r3, #0
 800c894:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800c896:	e03b      	b.n	800c910 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7ff fd98 	bl	800c3d0 <get_fat>
 800c8a0:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d03b      	beq.n	800c920 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d102      	bne.n	800c8b4 <remove_chain+0x46>
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	73fb      	strb	r3, [r7, #15]
 800c8b2:	e038      	b.n	800c926 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ba:	d102      	bne.n	800c8c2 <remove_chain+0x54>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	73fb      	strb	r3, [r7, #15]
 800c8c0:	e031      	b.n	800c926 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff fe7e 	bl	800c5c8 <put_fat>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d126      	bne.n	800c924 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e2:	d013      	beq.n	800c90c <remove_chain+0x9e>
				fs->free_clust++;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c8f4:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8fc:	795b      	ldrb	r3, [r3, #5]
 800c8fe:	f043 0301 	orr.w	r3, r3, #1
 800c902:	b2da      	uxtb	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c90a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c916:	695b      	ldr	r3, [r3, #20]
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d3bc      	bcc.n	800c898 <remove_chain+0x2a>
 800c91e:	e002      	b.n	800c926 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800c920:	bf00      	nop
 800c922:	e000      	b.n	800c926 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800c924:	bf00      	nop
		}
	}

	return res;
 800c926:	7bfb      	ldrb	r3, [r7, #15]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d111      	bne.n	800c964 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d006      	beq.n	800c95e <create_chain+0x2e>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c956:	695b      	ldr	r3, [r3, #20]
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d31d      	bcc.n	800c99a <create_chain+0x6a>
 800c95e:	2301      	movs	r3, #1
 800c960:	613b      	str	r3, [r7, #16]
 800c962:	e01a      	b.n	800c99a <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7ff fd32 	bl	800c3d0 <get_fat>
 800c96c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d801      	bhi.n	800c978 <create_chain+0x48>
 800c974:	2301      	movs	r3, #1
 800c976:	e07f      	b.n	800ca78 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97e:	d101      	bne.n	800c984 <create_chain+0x54>
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	e079      	b.n	800ca78 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d201      	bcs.n	800c996 <create_chain+0x66>
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	e070      	b.n	800ca78 <create_chain+0x148>
		scl = clst;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9aa:	695b      	ldr	r3, [r3, #20]
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d307      	bcc.n	800c9c2 <create_chain+0x92>
			ncl = 2;
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d901      	bls.n	800c9c2 <create_chain+0x92>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e05a      	b.n	800ca78 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800c9c2:	6979      	ldr	r1, [r7, #20]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7ff fd03 	bl	800c3d0 <get_fat>
 800c9ca:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00e      	beq.n	800c9f0 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d8:	d002      	beq.n	800c9e0 <create_chain+0xb0>
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d101      	bne.n	800c9e4 <create_chain+0xb4>
			return cs;
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	e049      	b.n	800ca78 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d1d8      	bne.n	800c99e <create_chain+0x6e>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e043      	b.n	800ca78 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800c9f0:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800c9f2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800c9f6:	6979      	ldr	r1, [r7, #20]
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7ff fde5 	bl	800c5c8 <put_fat>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d109      	bne.n	800ca1c <create_chain+0xec>
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d006      	beq.n	800ca1c <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff fdd8 	bl	800c5c8 <put_fat>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d121      	bne.n	800ca66 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca28:	461a      	mov	r2, r3
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3a:	d01c      	beq.n	800ca76 <create_chain+0x146>
			fs->free_clust--;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ca4c:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca54:	795b      	ldrb	r3, [r3, #5]
 800ca56:	f043 0301 	orr.w	r3, r3, #1
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca62:	715a      	strb	r2, [r3, #5]
 800ca64:	e007      	b.n	800ca76 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d102      	bne.n	800ca72 <create_chain+0x142>
 800ca6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca70:	e000      	b.n	800ca74 <create_chain+0x144>
 800ca72:	2301      	movs	r3, #1
 800ca74:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800ca76:	697b      	ldr	r3, [r7, #20]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3718      	adds	r7, #24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca92:	3304      	adds	r3, #4
 800ca94:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caa2:	895b      	ldrh	r3, [r3, #10]
 800caa4:	461a      	mov	r2, r3
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cab2:	6812      	ldr	r2, [r2, #0]
 800cab4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cab8:	7892      	ldrb	r2, [r2, #2]
 800caba:	fbb3 f3f2 	udiv	r3, r3, r2
 800cabe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	1d1a      	adds	r2, r3, #4
 800cac4:	613a      	str	r2, [r7, #16]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <clmt_clust+0x54>
 800cad0:	2300      	movs	r3, #0
 800cad2:	e010      	b.n	800caf6 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d307      	bcc.n	800caec <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800cadc:	697a      	ldr	r2, [r7, #20]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	617b      	str	r3, [r7, #20]
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	3304      	adds	r3, #4
 800cae8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800caea:	e7e9      	b.n	800cac0 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800caec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	4413      	add	r3, r2
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b086      	sub	sp, #24
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb16:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d009      	beq.n	800cb3c <dir_sdi+0x3a>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d301      	bcc.n	800cb40 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800cb3c:	2302      	movs	r3, #2
 800cb3e:	e0aa      	b.n	800cc96 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d110      	bne.n	800cb68 <dir_sdi+0x66>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b03      	cmp	r3, #3
 800cb56:	d107      	bne.n	800cb68 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb66:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d115      	bne.n	800cb9a <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb7a:	891b      	ldrh	r3, [r3, #8]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d301      	bcc.n	800cb88 <dir_sdi+0x86>
			return FR_INT_ERR;
 800cb84:	2302      	movs	r3, #2
 800cb86:	e086      	b.n	800cc96 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb96:	613b      	str	r3, [r7, #16]
 800cb98:	e043      	b.n	800cc22 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba6:	895b      	ldrh	r3, [r3, #10]
 800cba8:	095b      	lsrs	r3, r3, #5
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	461a      	mov	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbba:	789b      	ldrb	r3, [r3, #2]
 800cbbc:	fb02 f303 	mul.w	r3, r2, r3
 800cbc0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800cbc2:	e021      	b.n	800cc08 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6979      	ldr	r1, [r7, #20]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff fbfe 	bl	800c3d0 <get_fat>
 800cbd4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbdc:	d101      	bne.n	800cbe2 <dir_sdi+0xe0>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e059      	b.n	800cc96 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d909      	bls.n	800cbfc <dir_sdi+0xfa>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbf4:	695b      	ldr	r3, [r3, #20]
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d301      	bcc.n	800cc00 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	e04a      	b.n	800cc96 <dir_sdi+0x194>
			idx -= ic;
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d2d9      	bcs.n	800cbc4 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6979      	ldr	r1, [r7, #20]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7ff fbb3 	bl	800c386 <clust2sect>
 800cc20:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc28:	461a      	mov	r2, r3
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <dir_sdi+0x136>
 800cc34:	2302      	movs	r3, #2
 800cc36:	e02e      	b.n	800cc96 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc44:	895b      	ldrh	r3, [r3, #10]
 800cc46:	095b      	lsrs	r3, r3, #5
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	4413      	add	r3, r2
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc5c:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4618      	mov	r0, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc74:	895b      	ldrh	r3, [r3, #10]
 800cc76:	095b      	lsrs	r3, r3, #5
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc82:	fb01 f202 	mul.w	r2, r1, r2
 800cc86:	1a9b      	subs	r3, r3, r2
 800cc88:	015b      	lsls	r3, r3, #5
 800cc8a:	4403      	add	r3, r0
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc92:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cc9e:	b590      	push	{r4, r7, lr}
 800cca0:	b087      	sub	sp, #28
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccae:	88db      	ldrh	r3, [r3, #6]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d005      	beq.n	800ccc8 <dir_next+0x2a>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <dir_next+0x2e>
		return FR_NO_FILE;
 800ccc8:	2304      	movs	r3, #4
 800ccca:	e12e      	b.n	800cf2a <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccd8:	895b      	ldrh	r3, [r3, #10]
 800ccda:	095b      	lsrs	r3, r3, #5
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	461a      	mov	r2, r3
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cce6:	fb01 f202 	mul.w	r2, r1, r2
 800ccea:	1a9b      	subs	r3, r3, r2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f040 80fa 	bne.w	800cee6 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cd02:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10d      	bne.n	800cd2c <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd1c:	891b      	ldrh	r3, [r3, #8]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	4293      	cmp	r3, r2
 800cd24:	f0c0 80df 	bcc.w	800cee6 <dir_next+0x248>
				return FR_NO_FILE;
 800cd28:	2304      	movs	r3, #4
 800cd2a:	e0fe      	b.n	800cf2a <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd38:	895b      	ldrh	r3, [r3, #10]
 800cd3a:	095b      	lsrs	r3, r3, #5
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	461a      	mov	r2, r3
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cd4c:	6812      	ldr	r2, [r2, #0]
 800cd4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cd52:	7892      	ldrb	r2, [r2, #2]
 800cd54:	3a01      	subs	r2, #1
 800cd56:	4013      	ands	r3, r2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f040 80c4 	bne.w	800cee6 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4610      	mov	r0, r2
 800cd72:	f7ff fb2d 	bl	800c3d0 <get_fat>
 800cd76:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d801      	bhi.n	800cd82 <dir_next+0xe4>
 800cd7e:	2302      	movs	r3, #2
 800cd80:	e0d3      	b.n	800cf2a <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd88:	d101      	bne.n	800cd8e <dir_next+0xf0>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e0cd      	b.n	800cf2a <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd9a:	695b      	ldr	r3, [r3, #20]
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	f0c0 808e 	bcc.w	800cec0 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <dir_next+0x110>
 800cdaa:	2304      	movs	r3, #4
 800cdac:	e0bd      	b.n	800cf2a <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	4610      	mov	r0, r2
 800cdc2:	f7ff fdb5 	bl	800c930 <create_chain>
 800cdc6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d101      	bne.n	800cdd2 <dir_next+0x134>
 800cdce:	2307      	movs	r3, #7
 800cdd0:	e0ab      	b.n	800cf2a <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d101      	bne.n	800cddc <dir_next+0x13e>
 800cdd8:	2302      	movs	r3, #2
 800cdda:	e0a6      	b.n	800cf2a <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde2:	d101      	bne.n	800cde8 <dir_next+0x14a>
 800cde4:	2301      	movs	r3, #1
 800cde6:	e0a0      	b.n	800cf2a <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7ff f985 	bl	800c100 <sync_window>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <dir_next+0x162>
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e094      	b.n	800cf2a <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce16:	895b      	ldrh	r3, [r3, #10]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	f7fe ff53 	bl	800bcc6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce2e:	681c      	ldr	r4, [r3, #0]
 800ce30:	6979      	ldr	r1, [r7, #20]
 800ce32:	4610      	mov	r0, r2
 800ce34:	f7ff faa7 	bl	800c386 <clust2sect>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800ce3e:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ce40:	2300      	movs	r3, #0
 800ce42:	613b      	str	r3, [r7, #16]
 800ce44:	e021      	b.n	800ce8a <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce52:	2201      	movs	r2, #1
 800ce54:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff f94e 	bl	800c100 <sync_window>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <dir_next+0x1d0>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e05d      	b.n	800cf2a <dir_next+0x28c>
						dp->fs->winsect++;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800ce7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ce7c:	3201      	adds	r2, #1
 800ce7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce82:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	3301      	adds	r3, #1
 800ce88:	613b      	str	r3, [r7, #16]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce96:	789b      	ldrb	r3, [r3, #2]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d3d2      	bcc.n	800ce46 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	1acb      	subs	r3, r1, r3
 800ceba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cebe:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec6:	461a      	mov	r2, r3
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6979      	ldr	r1, [r7, #20]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff fa55 	bl	800c386 <clust2sect>
 800cedc:	4602      	mov	r2, r0
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cee4:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef0:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4618      	mov	r0, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf08:	895b      	ldrh	r3, [r3, #10]
 800cf0a:	095b      	lsrs	r3, r3, #5
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	461a      	mov	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf16:	fb01 f202 	mul.w	r2, r1, r2
 800cf1a:	1a9b      	subs	r3, r3, r2
 800cf1c:	015b      	lsls	r3, r3, #5
 800cf1e:	4403      	add	r3, r0
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cf26:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	371c      	adds	r7, #28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd90      	pop	{r4, r7, pc}

0800cf32 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b084      	sub	sp, #16
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fddf 	bl	800cb02 <dir_sdi>
 800cf44:	4603      	mov	r3, r0
 800cf46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d135      	bne.n	800cfba <dir_alloc+0x88>
		n = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	4619      	mov	r1, r3
 800cf64:	4610      	mov	r0, r2
 800cf66:	f7ff f91d 	bl	800c1a4 <move_window>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d121      	bne.n	800cfb8 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	2be5      	cmp	r3, #229	; 0xe5
 800cf80:	d006      	beq.n	800cf90 <dir_alloc+0x5e>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d107      	bne.n	800cfa0 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	3301      	adds	r3, #1
 800cf94:	60bb      	str	r3, [r7, #8]
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d102      	bne.n	800cfa4 <dir_alloc+0x72>
 800cf9e:	e00c      	b.n	800cfba <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800cfa4:	2101      	movs	r1, #1
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f7ff fe79 	bl	800cc9e <dir_next>
 800cfac:	4603      	mov	r3, r0
 800cfae:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0cd      	beq.n	800cf52 <dir_alloc+0x20>
 800cfb6:	e000      	b.n	800cfba <dir_alloc+0x88>
			if (res != FR_OK) break;
 800cfb8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cfba:	7bfb      	ldrb	r3, [r7, #15]
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d101      	bne.n	800cfc4 <dir_alloc+0x92>
 800cfc0:	2307      	movs	r3, #7
 800cfc2:	73fb      	strb	r3, [r7, #15]
	return res;
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b085      	sub	sp, #20
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	331b      	adds	r3, #27
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	021b      	lsls	r3, r3, #8
 800cfe0:	b21a      	sxth	r2, r3
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	331a      	adds	r3, #26
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	b21b      	sxth	r3, r3
 800cfea:	4313      	orrs	r3, r2
 800cfec:	b21b      	sxth	r3, r3
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d10f      	bne.n	800d01e <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	3315      	adds	r3, #21
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	021b      	lsls	r3, r3, #8
 800d006:	b21a      	sxth	r2, r3
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	3314      	adds	r3, #20
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	b21b      	sxth	r3, r3
 800d010:	4313      	orrs	r3, r2
 800d012:	b21b      	sxth	r3, r3
 800d014:	b29b      	uxth	r3, r3
 800d016:	041b      	lsls	r3, r3, #16
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	4313      	orrs	r3, r2
 800d01c:	60fb      	str	r3, [r7, #12]

	return cl;
 800d01e:	68fb      	ldr	r3, [r7, #12]
}
 800d020:	4618      	mov	r0, r3
 800d022:	3714      	adds	r7, #20
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	331a      	adds	r3, #26
 800d03a:	683a      	ldr	r2, [r7, #0]
 800d03c:	b2d2      	uxtb	r2, r2
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	b29b      	uxth	r3, r3
 800d044:	0a1b      	lsrs	r3, r3, #8
 800d046:	b29a      	uxth	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	331b      	adds	r3, #27
 800d04c:	b2d2      	uxtb	r2, r2
 800d04e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	0c1a      	lsrs	r2, r3, #16
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	3314      	adds	r3, #20
 800d058:	b2d2      	uxtb	r2, r2
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	0c1b      	lsrs	r3, r3, #16
 800d060:	b29b      	uxth	r3, r3
 800d062:	0a1b      	lsrs	r3, r3, #8
 800d064:	b29a      	uxth	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	3315      	adds	r3, #21
 800d06a:	b2d2      	uxtb	r2, r2
 800d06c:	701a      	strb	r2, [r3, #0]
}
 800d06e:	bf00      	nop
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
	...

0800d07c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d08e:	1e5a      	subs	r2, r3, #1
 800d090:	4613      	mov	r3, r2
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	4413      	add	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	4413      	add	r3, r2
 800d09a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800d09c:	2300      	movs	r3, #0
 800d09e:	613b      	str	r3, [r7, #16]
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800d0a4:	4a2b      	ldr	r2, [pc, #172]	; (800d154 <cmp_lfn+0xd8>)
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	021b      	lsls	r3, r3, #8
 800d0b6:	b21a      	sxth	r2, r3
 800d0b8:	4926      	ldr	r1, [pc, #152]	; (800d154 <cmp_lfn+0xd8>)
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	440b      	add	r3, r1
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	440b      	add	r3, r1
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	b21b      	sxth	r3, r3
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	b21b      	sxth	r3, r3
 800d0ce:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800d0d0:	89fb      	ldrh	r3, [r7, #14]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d019      	beq.n	800d10a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800d0d6:	89bb      	ldrh	r3, [r7, #12]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f002 ff39 	bl	800ff50 <ff_wtoupper>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	2bfe      	cmp	r3, #254	; 0xfe
 800d0e6:	d80e      	bhi.n	800d106 <cmp_lfn+0x8a>
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	1c5a      	adds	r2, r3, #1
 800d0ec:	617a      	str	r2, [r7, #20]
 800d0ee:	005b      	lsls	r3, r3, #1
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f002 ff2a 	bl	800ff50 <ff_wtoupper>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	461a      	mov	r2, r3
 800d100:	89fb      	ldrh	r3, [r7, #14]
 800d102:	4293      	cmp	r3, r2
 800d104:	d008      	beq.n	800d118 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800d106:	2300      	movs	r3, #0
 800d108:	e01f      	b.n	800d14a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800d10a:	89bb      	ldrh	r3, [r7, #12]
 800d10c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d110:	4293      	cmp	r3, r2
 800d112:	d001      	beq.n	800d118 <cmp_lfn+0x9c>
 800d114:	2300      	movs	r3, #0
 800d116:	e018      	b.n	800d14a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	3301      	adds	r3, #1
 800d11c:	613b      	str	r3, [r7, #16]
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	2b0c      	cmp	r3, #12
 800d122:	d9bf      	bls.n	800d0a4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <cmp_lfn+0xcc>
 800d130:	89fb      	ldrh	r3, [r7, #14]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d008      	beq.n	800d148 <cmp_lfn+0xcc>
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	4413      	add	r3, r2
 800d13e:	881b      	ldrh	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <cmp_lfn+0xcc>
		return 0;
 800d144:	2300      	movs	r3, #0
 800d146:	e000      	b.n	800d14a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800d148:	2301      	movs	r3, #1
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3718      	adds	r7, #24
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	08014120 	.word	0x08014120

0800d158 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800d158:	b480      	push	{r7}
 800d15a:	b089      	sub	sp, #36	; 0x24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	4611      	mov	r1, r2
 800d164:	461a      	mov	r2, r3
 800d166:	460b      	mov	r3, r1
 800d168:	71fb      	strb	r3, [r7, #7]
 800d16a:	4613      	mov	r3, r2
 800d16c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	330d      	adds	r3, #13
 800d172:	79ba      	ldrb	r2, [r7, #6]
 800d174:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	330b      	adds	r3, #11
 800d17a:	220f      	movs	r2, #15
 800d17c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	330c      	adds	r3, #12
 800d182:	2200      	movs	r2, #0
 800d184:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	331a      	adds	r3, #26
 800d18a:	2200      	movs	r2, #0
 800d18c:	701a      	strb	r2, [r3, #0]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	331b      	adds	r3, #27
 800d192:	2200      	movs	r2, #0
 800d194:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	1e5a      	subs	r2, r3, #1
 800d19a:	4613      	mov	r3, r2
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	4413      	add	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	82fb      	strh	r3, [r7, #22]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800d1ae:	8afb      	ldrh	r3, [r7, #22]
 800d1b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d007      	beq.n	800d1c8 <fit_lfn+0x70>
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	1c5a      	adds	r2, r3, #1
 800d1bc:	61fa      	str	r2, [r7, #28]
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800d1c8:	4a1d      	ldr	r2, [pc, #116]	; (800d240 <fit_lfn+0xe8>)
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	8afa      	ldrh	r2, [r7, #22]
 800d1d8:	b2d2      	uxtb	r2, r2
 800d1da:	701a      	strb	r2, [r3, #0]
 800d1dc:	8afb      	ldrh	r3, [r7, #22]
 800d1de:	0a1b      	lsrs	r3, r3, #8
 800d1e0:	b299      	uxth	r1, r3
 800d1e2:	4a17      	ldr	r2, [pc, #92]	; (800d240 <fit_lfn+0xe8>)
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	b2ca      	uxtb	r2, r1
 800d1f2:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800d1f4:	8afb      	ldrh	r3, [r7, #22]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d102      	bne.n	800d200 <fit_lfn+0xa8>
 800d1fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	3301      	adds	r3, #1
 800d204:	61bb      	str	r3, [r7, #24]
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	2b0c      	cmp	r3, #12
 800d20a:	d9d0      	bls.n	800d1ae <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800d20c:	8afb      	ldrh	r3, [r7, #22]
 800d20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d212:	4293      	cmp	r3, r2
 800d214:	d006      	beq.n	800d224 <fit_lfn+0xcc>
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	005b      	lsls	r3, r3, #1
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	4413      	add	r3, r2
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d103      	bne.n	800d22c <fit_lfn+0xd4>
 800d224:	79fb      	ldrb	r3, [r7, #7]
 800d226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d22a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	79fa      	ldrb	r2, [r7, #7]
 800d230:	701a      	strb	r2, [r3, #0]
}
 800d232:	bf00      	nop
 800d234:	3724      	adds	r7, #36	; 0x24
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	08014120 	.word	0x08014120

0800d244 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08c      	sub	sp, #48	; 0x30
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	607a      	str	r2, [r7, #4]
 800d250:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d252:	220b      	movs	r2, #11
 800d254:	68b9      	ldr	r1, [r7, #8]
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f7fe fd16 	bl	800bc88 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	2b05      	cmp	r3, #5
 800d260:	d92b      	bls.n	800d2ba <gen_numname+0x76>
		sr = seq;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d266:	e022      	b.n	800d2ae <gen_numname+0x6a>
			wc = *lfn++;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	1c9a      	adds	r2, r3, #2
 800d26c:	607a      	str	r2, [r7, #4]
 800d26e:	881b      	ldrh	r3, [r3, #0]
 800d270:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d272:	2300      	movs	r3, #0
 800d274:	62bb      	str	r3, [r7, #40]	; 0x28
 800d276:	e017      	b.n	800d2a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	005a      	lsls	r2, r3, #1
 800d27c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	4413      	add	r3, r2
 800d284:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d288:	085b      	lsrs	r3, r3, #1
 800d28a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d005      	beq.n	800d2a2 <gen_numname+0x5e>
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d29c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d2a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	2b0f      	cmp	r3, #15
 800d2ac:	d9e4      	bls.n	800d278 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1d8      	bne.n	800d268 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d2ba:	2307      	movs	r3, #7
 800d2bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	f003 030f 	and.w	r3, r3, #15
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	3330      	adds	r3, #48	; 0x30
 800d2ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d2ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2d2:	2b39      	cmp	r3, #57	; 0x39
 800d2d4:	d904      	bls.n	800d2e0 <gen_numname+0x9c>
 800d2d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2da:	3307      	adds	r3, #7
 800d2dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e2:	1e5a      	subs	r2, r3, #1
 800d2e4:	62ba      	str	r2, [r7, #40]	; 0x28
 800d2e6:	3330      	adds	r3, #48	; 0x30
 800d2e8:	443b      	add	r3, r7
 800d2ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d2ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	091b      	lsrs	r3, r3, #4
 800d2f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1df      	bne.n	800d2be <gen_numname+0x7a>
	ns[i] = '~';
 800d2fe:	f107 0214 	add.w	r2, r7, #20
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	4413      	add	r3, r2
 800d306:	227e      	movs	r2, #126	; 0x7e
 800d308:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d30a:	2300      	movs	r3, #0
 800d30c:	627b      	str	r3, [r7, #36]	; 0x24
 800d30e:	e002      	b.n	800d316 <gen_numname+0xd2>
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	3301      	adds	r3, #1
 800d314:	627b      	str	r3, [r7, #36]	; 0x24
 800d316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d205      	bcs.n	800d32a <gen_numname+0xe6>
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	4413      	add	r3, r2
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	2b20      	cmp	r3, #32
 800d328:	d1f2      	bne.n	800d310 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	2b07      	cmp	r3, #7
 800d32e:	d807      	bhi.n	800d340 <gen_numname+0xfc>
 800d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	62ba      	str	r2, [r7, #40]	; 0x28
 800d336:	3330      	adds	r3, #48	; 0x30
 800d338:	443b      	add	r3, r7
 800d33a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d33e:	e000      	b.n	800d342 <gen_numname+0xfe>
 800d340:	2120      	movs	r1, #32
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	1c5a      	adds	r2, r3, #1
 800d346:	627a      	str	r2, [r7, #36]	; 0x24
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	4413      	add	r3, r2
 800d34c:	460a      	mov	r2, r1
 800d34e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	2b07      	cmp	r3, #7
 800d354:	d9e9      	bls.n	800d32a <gen_numname+0xe6>
}
 800d356:	bf00      	nop
 800d358:	bf00      	nop
 800d35a:	3730      	adds	r7, #48	; 0x30
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d368:	2300      	movs	r3, #0
 800d36a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d36c:	230b      	movs	r3, #11
 800d36e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	b2da      	uxtb	r2, r3
 800d374:	0852      	lsrs	r2, r2, #1
 800d376:	01db      	lsls	r3, r3, #7
 800d378:	4313      	orrs	r3, r2
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	1c59      	adds	r1, r3, #1
 800d380:	6079      	str	r1, [r7, #4]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	4413      	add	r3, r2
 800d386:	73fb      	strb	r3, [r7, #15]
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	3b01      	subs	r3, #1
 800d38c:	60bb      	str	r3, [r7, #8]
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1ed      	bne.n	800d370 <sum_sfn+0x10>
	return sum;
 800d394:	7bfb      	ldrb	r3, [r7, #15]
}
 800d396:	4618      	mov	r0, r3
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b086      	sub	sp, #24
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7ff fba8 	bl	800cb02 <dir_sdi>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d3b6:	7dfb      	ldrb	r3, [r7, #23]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <dir_find+0x1e>
 800d3bc:	7dfb      	ldrb	r3, [r7, #23]
 800d3be:	e0b8      	b.n	800d532 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800d3c0:	23ff      	movs	r3, #255	; 0xff
 800d3c2:	753b      	strb	r3, [r7, #20]
 800d3c4:	7d3b      	ldrb	r3, [r7, #20]
 800d3c6:	757b      	strb	r3, [r7, #21]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3d2:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	f7fe fedc 	bl	800c1a4 <move_window>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f040 8097 	bne.w	800d526 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d408:	7dbb      	ldrb	r3, [r7, #22]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d102      	bne.n	800d414 <dir_find+0x72>
 800d40e:	2304      	movs	r3, #4
 800d410:	75fb      	strb	r3, [r7, #23]
 800d412:	e08d      	b.n	800d530 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	330b      	adds	r3, #11
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d41e:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d420:	7dbb      	ldrb	r3, [r7, #22]
 800d422:	2be5      	cmp	r3, #229	; 0xe5
 800d424:	d007      	beq.n	800d436 <dir_find+0x94>
 800d426:	7bfb      	ldrb	r3, [r7, #15]
 800d428:	f003 0308 	and.w	r3, r3, #8
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00b      	beq.n	800d448 <dir_find+0xa6>
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	2b0f      	cmp	r3, #15
 800d434:	d008      	beq.n	800d448 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800d436:	23ff      	movs	r3, #255	; 0xff
 800d438:	757b      	strb	r3, [r7, #21]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d444:	849a      	strh	r2, [r3, #36]	; 0x24
 800d446:	e063      	b.n	800d510 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b0f      	cmp	r3, #15
 800d44c:	d137      	bne.n	800d4be <dir_find+0x11c>
				if (dp->lfn) {
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d05a      	beq.n	800d510 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d45a:	7dbb      	ldrb	r3, [r7, #22]
 800d45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d460:	2b00      	cmp	r3, #0
 800d462:	d010      	beq.n	800d486 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	7b5b      	ldrb	r3, [r3, #13]
 800d468:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800d46a:	7dbb      	ldrb	r3, [r7, #22]
 800d46c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d470:	75bb      	strb	r3, [r7, #22]
 800d472:	7dbb      	ldrb	r3, [r7, #22]
 800d474:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d47c:	88da      	ldrh	r2, [r3, #6]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d484:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800d486:	7dba      	ldrb	r2, [r7, #22]
 800d488:	7d7b      	ldrb	r3, [r7, #21]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d114      	bne.n	800d4b8 <dir_find+0x116>
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	330d      	adds	r3, #13
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	7d3a      	ldrb	r2, [r7, #20]
 800d496:	429a      	cmp	r2, r3
 800d498:	d10e      	bne.n	800d4b8 <dir_find+0x116>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a0:	6a1b      	ldr	r3, [r3, #32]
 800d4a2:	6939      	ldr	r1, [r7, #16]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7ff fde9 	bl	800d07c <cmp_lfn>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d003      	beq.n	800d4b8 <dir_find+0x116>
 800d4b0:	7d7b      	ldrb	r3, [r7, #21]
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	e000      	b.n	800d4ba <dir_find+0x118>
 800d4b8:	23ff      	movs	r3, #255	; 0xff
 800d4ba:	757b      	strb	r3, [r7, #21]
 800d4bc:	e028      	b.n	800d510 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800d4be:	7d7b      	ldrb	r3, [r7, #21]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d107      	bne.n	800d4d4 <dir_find+0x132>
 800d4c4:	6938      	ldr	r0, [r7, #16]
 800d4c6:	f7ff ff4b 	bl	800d360 <sum_sfn>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	7d3b      	ldrb	r3, [r7, #20]
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d02a      	beq.n	800d52a <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4da:	699b      	ldr	r3, [r3, #24]
 800d4dc:	330b      	adds	r3, #11
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	f003 0301 	and.w	r3, r3, #1
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d10b      	bne.n	800d500 <dir_find+0x15e>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	220b      	movs	r2, #11
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6938      	ldr	r0, [r7, #16]
 800d4f6:	f7fe fc01 	bl	800bcfc <mem_cmp>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d016      	beq.n	800d52e <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800d500:	23ff      	movs	r3, #255	; 0xff
 800d502:	757b      	strb	r3, [r7, #21]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d50a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d50e:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800d510:	2100      	movs	r1, #0
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f7ff fbc3 	bl	800cc9e <dir_next>
 800d518:	4603      	mov	r3, r0
 800d51a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d51c:	7dfb      	ldrb	r3, [r7, #23]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f43f af58 	beq.w	800d3d4 <dir_find+0x32>
 800d524:	e004      	b.n	800d530 <dir_find+0x18e>
		if (res != FR_OK) break;
 800d526:	bf00      	nop
 800d528:	e002      	b.n	800d530 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800d52a:	bf00      	nop
 800d52c:	e000      	b.n	800d530 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800d52e:	bf00      	nop

	return res;
 800d530:	7dfb      	ldrb	r3, [r7, #23]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3718      	adds	r7, #24
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
	...

0800d53c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08c      	sub	sp, #48	; 0x30
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d54a:	699b      	ldr	r3, [r3, #24]
 800d54c:	623b      	str	r3, [r7, #32]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800d558:	f107 030c 	add.w	r3, r7, #12
 800d55c:	220c      	movs	r2, #12
 800d55e:	6a39      	ldr	r1, [r7, #32]
 800d560:	4618      	mov	r0, r3
 800d562:	f7fe fb91 	bl	800bc88 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d03b      	beq.n	800d5e8 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	330b      	adds	r3, #11
 800d574:	2200      	movs	r2, #0
 800d576:	701a      	strb	r2, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d57e:	461a      	mov	r2, r3
 800d580:	2300      	movs	r3, #0
 800d582:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800d584:	2301      	movs	r3, #1
 800d586:	62bb      	str	r3, [r7, #40]	; 0x28
 800d588:	e013      	b.n	800d5b2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800d58a:	f107 010c 	add.w	r1, r7, #12
 800d58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d590:	69fa      	ldr	r2, [r7, #28]
 800d592:	6a38      	ldr	r0, [r7, #32]
 800d594:	f7ff fe56 	bl	800d244 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff ff02 	bl	800d3a2 <dir_find>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d5a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d106      	bne.n	800d5ba <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800d5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b4:	2b63      	cmp	r3, #99	; 0x63
 800d5b6:	d9e8      	bls.n	800d58a <dir_register+0x4e>
 800d5b8:	e000      	b.n	800d5bc <dir_register+0x80>
			if (res != FR_OK) break;
 800d5ba:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	2b64      	cmp	r3, #100	; 0x64
 800d5c0:	d101      	bne.n	800d5c6 <dir_register+0x8a>
 800d5c2:	2307      	movs	r3, #7
 800d5c4:	e0d8      	b.n	800d778 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ca:	2b04      	cmp	r3, #4
 800d5cc:	d002      	beq.n	800d5d4 <dir_register+0x98>
 800d5ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5d2:	e0d1      	b.n	800d778 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800d5d4:	6a3b      	ldr	r3, [r7, #32]
 800d5d6:	330b      	adds	r3, #11
 800d5d8:	7dfa      	ldrb	r2, [r7, #23]
 800d5da:	701a      	strb	r2, [r3, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800d5e8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ea:	f003 0302 	and.w	r3, r3, #2
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d014      	beq.n	800d61c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5f6:	e002      	b.n	800d5fe <dir_register+0xc2>
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	005b      	lsls	r3, r3, #1
 800d602:	69fa      	ldr	r2, [r7, #28]
 800d604:	4413      	add	r3, r2
 800d606:	881b      	ldrh	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1f5      	bne.n	800d5f8 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800d60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60e:	3319      	adds	r3, #25
 800d610:	4a5b      	ldr	r2, [pc, #364]	; (800d780 <dir_register+0x244>)
 800d612:	fba2 2303 	umull	r2, r3, r2, r3
 800d616:	089b      	lsrs	r3, r3, #2
 800d618:	627b      	str	r3, [r7, #36]	; 0x24
 800d61a:	e001      	b.n	800d620 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800d61c:	2301      	movs	r3, #1
 800d61e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7ff fc85 	bl	800cf32 <dir_alloc>
 800d628:	4603      	mov	r3, r0
 800d62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d62e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d632:	2b00      	cmp	r3, #0
 800d634:	d15b      	bne.n	800d6ee <dir_register+0x1b2>
 800d636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d638:	3b01      	subs	r3, #1
 800d63a:	627b      	str	r3, [r7, #36]	; 0x24
 800d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d055      	beq.n	800d6ee <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d648:	88db      	ldrh	r3, [r3, #6]
 800d64a:	461a      	mov	r2, r3
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	4619      	mov	r1, r3
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7ff fa55 	bl	800cb02 <dir_sdi>
 800d658:	4603      	mov	r3, r0
 800d65a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d65e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d662:	2b00      	cmp	r3, #0
 800d664:	d143      	bne.n	800d6ee <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d66c:	699b      	ldr	r3, [r3, #24]
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff fe76 	bl	800d360 <sum_sfn>
 800d674:	4603      	mov	r3, r0
 800d676:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	4619      	mov	r1, r3
 800d68a:	4610      	mov	r0, r2
 800d68c:	f7fe fd8a 	bl	800c1a4 <move_window>
 800d690:	4603      	mov	r3, r0
 800d692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d126      	bne.n	800d6ec <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a4:	6a18      	ldr	r0, [r3, #32]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ac:	6959      	ldr	r1, [r3, #20]
 800d6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	7efb      	ldrb	r3, [r7, #27]
 800d6b4:	f7ff fd50 	bl	800d158 <fit_lfn>
				dp->fs->wflag = 1;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7ff fae7 	bl	800cc9e <dir_next>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d6d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d107      	bne.n	800d6ee <dir_register+0x1b2>
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1c6      	bne.n	800d678 <dir_register+0x13c>
 800d6ea:	e000      	b.n	800d6ee <dir_register+0x1b2>
				if (res != FR_OK) break;
 800d6ec:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800d6ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d13e      	bne.n	800d774 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	4619      	mov	r1, r3
 800d708:	4610      	mov	r0, r2
 800d70a:	f7fe fd4b 	bl	800c1a4 <move_window>
 800d70e:	4603      	mov	r3, r0
 800d710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d12b      	bne.n	800d774 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	2220      	movs	r2, #32
 800d726:	2100      	movs	r1, #0
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fe facc 	bl	800bcc6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d734:	6958      	ldr	r0, [r3, #20]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d73c:	699b      	ldr	r3, [r3, #24]
 800d73e:	220b      	movs	r2, #11
 800d740:	4619      	mov	r1, r3
 800d742:	f7fe faa1 	bl	800bc88 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	330b      	adds	r3, #11
 800d750:	781a      	ldrb	r2, [r3, #0]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d758:	695b      	ldr	r3, [r3, #20]
 800d75a:	330c      	adds	r3, #12
 800d75c:	f002 0218 	and.w	r2, r2, #24
 800d760:	b2d2      	uxtb	r2, r2
 800d762:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d770:	2201      	movs	r2, #1
 800d772:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800d774:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3730      	adds	r7, #48	; 0x30
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	4ec4ec4f 	.word	0x4ec4ec4f

0800d784 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08a      	sub	sp, #40	; 0x28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	613b      	str	r3, [r7, #16]
 800d794:	e002      	b.n	800d79c <create_name+0x18>
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	3301      	adds	r3, #1
 800d79a:	613b      	str	r3, [r7, #16]
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	2b2f      	cmp	r3, #47	; 0x2f
 800d7a2:	d0f8      	beq.n	800d796 <create_name+0x12>
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	2b5c      	cmp	r3, #92	; 0x5c
 800d7aa:	d0f4      	beq.n	800d796 <create_name+0x12>
	lfn = dp->lfn;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7b2:	6a1b      	ldr	r3, [r3, #32]
 800d7b4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	617b      	str	r3, [r7, #20]
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	1c5a      	adds	r2, r3, #1
 800d7c2:	61ba      	str	r2, [r7, #24]
 800d7c4:	693a      	ldr	r2, [r7, #16]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800d7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ce:	2b1f      	cmp	r3, #31
 800d7d0:	d92f      	bls.n	800d832 <create_name+0xae>
 800d7d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7d4:	2b2f      	cmp	r3, #47	; 0x2f
 800d7d6:	d02c      	beq.n	800d832 <create_name+0xae>
 800d7d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7da:	2b5c      	cmp	r3, #92	; 0x5c
 800d7dc:	d029      	beq.n	800d832 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2bfe      	cmp	r3, #254	; 0xfe
 800d7e2:	d901      	bls.n	800d7e8 <create_name+0x64>
			return FR_INVALID_NAME;
 800d7e4:	2306      	movs	r3, #6
 800d7e6:	e186      	b.n	800daf6 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d7ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f002 fb70 	bl	800fed8 <ff_convert>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <create_name+0x82>
 800d802:	2306      	movs	r3, #6
 800d804:	e177      	b.n	800daf6 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800d806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d808:	2b7f      	cmp	r3, #127	; 0x7f
 800d80a:	d809      	bhi.n	800d820 <create_name+0x9c>
 800d80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d80e:	4619      	mov	r1, r3
 800d810:	488e      	ldr	r0, [pc, #568]	; (800da4c <create_name+0x2c8>)
 800d812:	f7fe fa9a 	bl	800bd4a <chk_chr>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <create_name+0x9c>
			return FR_INVALID_NAME;
 800d81c:	2306      	movs	r3, #6
 800d81e:	e16a      	b.n	800daf6 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	617a      	str	r2, [r7, #20]
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	4413      	add	r3, r2
 800d82c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d82e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d830:	e7c5      	b.n	800d7be <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d832:	693a      	ldr	r2, [r7, #16]
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	441a      	add	r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800d83c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d83e:	2b1f      	cmp	r3, #31
 800d840:	d801      	bhi.n	800d846 <create_name+0xc2>
 800d842:	2304      	movs	r3, #4
 800d844:	e000      	b.n	800d848 <create_name+0xc4>
 800d846:	2300      	movs	r3, #0
 800d848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800d84c:	e011      	b.n	800d872 <create_name+0xee>
		w = lfn[di - 1];
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d854:	3b01      	subs	r3, #1
 800d856:	005b      	lsls	r3, r3, #1
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	4413      	add	r3, r2
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d862:	2b20      	cmp	r3, #32
 800d864:	d002      	beq.n	800d86c <create_name+0xe8>
 800d866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d868:	2b2e      	cmp	r3, #46	; 0x2e
 800d86a:	d106      	bne.n	800d87a <create_name+0xf6>
		di--;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	3b01      	subs	r3, #1
 800d870:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1ea      	bne.n	800d84e <create_name+0xca>
 800d878:	e000      	b.n	800d87c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800d87a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d101      	bne.n	800d886 <create_name+0x102>
 800d882:	2306      	movs	r3, #6
 800d884:	e137      	b.n	800daf6 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	4413      	add	r3, r2
 800d88e:	2200      	movs	r2, #0
 800d890:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	220b      	movs	r2, #11
 800d89c:	2120      	movs	r1, #32
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fe fa11 	bl	800bcc6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	61bb      	str	r3, [r7, #24]
 800d8a8:	e002      	b.n	800d8b0 <create_name+0x12c>
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	61bb      	str	r3, [r7, #24]
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	2b20      	cmp	r3, #32
 800d8bc:	d0f5      	beq.n	800d8aa <create_name+0x126>
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	2b2e      	cmp	r3, #46	; 0x2e
 800d8ca:	d0ee      	beq.n	800d8aa <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d009      	beq.n	800d8e6 <create_name+0x162>
 800d8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8d6:	f043 0303 	orr.w	r3, r3, #3
 800d8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d8de:	e002      	b.n	800d8e6 <create_name+0x162>
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	617b      	str	r3, [r7, #20]
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d009      	beq.n	800d900 <create_name+0x17c>
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	005b      	lsls	r3, r3, #1
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	881b      	ldrh	r3, [r3, #0]
 800d8fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d8fe:	d1ef      	bne.n	800d8e0 <create_name+0x15c>

	b = i = 0; ni = 8;
 800d900:	2300      	movs	r3, #0
 800d902:	623b      	str	r3, [r7, #32]
 800d904:	2300      	movs	r3, #0
 800d906:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d90a:	2308      	movs	r3, #8
 800d90c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	61ba      	str	r2, [r7, #24]
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	4413      	add	r3, r2
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d91e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 8091 	beq.w	800da48 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d928:	2b20      	cmp	r3, #32
 800d92a:	d006      	beq.n	800d93a <create_name+0x1b6>
 800d92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d92e:	2b2e      	cmp	r3, #46	; 0x2e
 800d930:	d10a      	bne.n	800d948 <create_name+0x1c4>
 800d932:	69ba      	ldr	r2, [r7, #24]
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	429a      	cmp	r2, r3
 800d938:	d006      	beq.n	800d948 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800d93a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d93e:	f043 0303 	orr.w	r3, r3, #3
 800d942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d946:	e07e      	b.n	800da46 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d948:	6a3a      	ldr	r2, [r7, #32]
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d203      	bcs.n	800d958 <create_name+0x1d4>
 800d950:	69ba      	ldr	r2, [r7, #24]
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	429a      	cmp	r2, r3
 800d956:	d123      	bne.n	800d9a0 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	2b0b      	cmp	r3, #11
 800d95c:	d106      	bne.n	800d96c <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800d95e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d962:	f043 0303 	orr.w	r3, r3, #3
 800d966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d96a:	e076      	b.n	800da5a <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d96c:	69ba      	ldr	r2, [r7, #24]
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	429a      	cmp	r2, r3
 800d972:	d005      	beq.n	800d980 <create_name+0x1fc>
 800d974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d978:	f043 0303 	orr.w	r3, r3, #3
 800d97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d980:	69ba      	ldr	r2, [r7, #24]
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	429a      	cmp	r2, r3
 800d986:	d867      	bhi.n	800da58 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	61bb      	str	r3, [r7, #24]
 800d98c:	2308      	movs	r3, #8
 800d98e:	623b      	str	r3, [r7, #32]
 800d990:	230b      	movs	r3, #11
 800d992:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d994:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d99e:	e052      	b.n	800da46 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d9a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9a2:	2b7f      	cmp	r3, #127	; 0x7f
 800d9a4:	d914      	bls.n	800d9d0 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f002 fa94 	bl	800fed8 <ff_convert>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d004      	beq.n	800d9c4 <create_name+0x240>
 800d9ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9bc:	3b80      	subs	r3, #128	; 0x80
 800d9be:	4a24      	ldr	r2, [pc, #144]	; (800da50 <create_name+0x2cc>)
 800d9c0:	5cd3      	ldrb	r3, [r2, r3]
 800d9c2:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9c8:	f043 0302 	orr.w	r3, r3, #2
 800d9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d9d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d007      	beq.n	800d9e6 <create_name+0x262>
 800d9d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d8:	4619      	mov	r1, r3
 800d9da:	481e      	ldr	r0, [pc, #120]	; (800da54 <create_name+0x2d0>)
 800d9dc:	f7fe f9b5 	bl	800bd4a <chk_chr>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d008      	beq.n	800d9f8 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d9e6:	235f      	movs	r3, #95	; 0x5f
 800d9e8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9ee:	f043 0303 	orr.w	r3, r3, #3
 800d9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9f6:	e01b      	b.n	800da30 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9fa:	2b40      	cmp	r3, #64	; 0x40
 800d9fc:	d909      	bls.n	800da12 <create_name+0x28e>
 800d9fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da00:	2b5a      	cmp	r3, #90	; 0x5a
 800da02:	d806      	bhi.n	800da12 <create_name+0x28e>
					b |= 2;
 800da04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da08:	f043 0302 	orr.w	r3, r3, #2
 800da0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da10:	e00e      	b.n	800da30 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800da12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da14:	2b60      	cmp	r3, #96	; 0x60
 800da16:	d90b      	bls.n	800da30 <create_name+0x2ac>
 800da18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da1a:	2b7a      	cmp	r3, #122	; 0x7a
 800da1c:	d808      	bhi.n	800da30 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800da1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da22:	f043 0301 	orr.w	r3, r3, #1
 800da26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da2c:	3b20      	subs	r3, #32
 800da2e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da36:	699a      	ldr	r2, [r3, #24]
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	1c59      	adds	r1, r3, #1
 800da3c:	6239      	str	r1, [r7, #32]
 800da3e:	4413      	add	r3, r2
 800da40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da42:	b2d2      	uxtb	r2, r2
 800da44:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800da46:	e762      	b.n	800d90e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800da48:	bf00      	nop
 800da4a:	e006      	b.n	800da5a <create_name+0x2d6>
 800da4c:	08013c20 	.word	0x08013c20
 800da50:	080140a0 	.word	0x080140a0
 800da54:	08013c2c 	.word	0x08013c2c
			if (si > di) break;			/* No extension */
 800da58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2be5      	cmp	r3, #229	; 0xe5
 800da66:	d105      	bne.n	800da74 <create_name+0x2f0>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	2205      	movs	r2, #5
 800da72:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	2b08      	cmp	r3, #8
 800da78:	d104      	bne.n	800da84 <create_name+0x300>
 800da7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800da84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da88:	f003 030c 	and.w	r3, r3, #12
 800da8c:	2b0c      	cmp	r3, #12
 800da8e:	d005      	beq.n	800da9c <create_name+0x318>
 800da90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da94:	f003 0303 	and.w	r3, r3, #3
 800da98:	2b03      	cmp	r3, #3
 800da9a:	d105      	bne.n	800daa8 <create_name+0x324>
		cf |= NS_LFN;
 800da9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daa0:	f043 0302 	orr.w	r3, r3, #2
 800daa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800daa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daac:	f003 0302 	and.w	r3, r3, #2
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d117      	bne.n	800dae4 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dab4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dab8:	f003 0303 	and.w	r3, r3, #3
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d105      	bne.n	800dacc <create_name+0x348>
 800dac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dac4:	f043 0310 	orr.w	r3, r3, #16
 800dac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dacc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dad0:	f003 030c 	and.w	r3, r3, #12
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	d105      	bne.n	800dae4 <create_name+0x360>
 800dad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dadc:	f043 0308 	orr.w	r3, r3, #8
 800dae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daea:	699b      	ldr	r3, [r3, #24]
 800daec:	330b      	adds	r3, #11
 800daee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800daf2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800daf4:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3728      	adds	r7, #40	; 0x28
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop

0800db00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b2f      	cmp	r3, #47	; 0x2f
 800db10:	d003      	beq.n	800db1a <follow_path+0x1a>
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	2b5c      	cmp	r3, #92	; 0x5c
 800db18:	d102      	bne.n	800db20 <follow_path+0x20>
		path++;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	3301      	adds	r3, #1
 800db1e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db26:	461a      	mov	r2, r3
 800db28:	2300      	movs	r3, #0
 800db2a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b1f      	cmp	r3, #31
 800db32:	d80c      	bhi.n	800db4e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800db34:	2100      	movs	r1, #0
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7fe ffe3 	bl	800cb02 <dir_sdi>
 800db3c:	4603      	mov	r3, r0
 800db3e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db46:	461a      	mov	r2, r3
 800db48:	2300      	movs	r3, #0
 800db4a:	6153      	str	r3, [r2, #20]
 800db4c:	e049      	b.n	800dbe2 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db4e:	463b      	mov	r3, r7
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff fe16 	bl	800d784 <create_name>
 800db58:	4603      	mov	r3, r0
 800db5a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800db5c:	7bfb      	ldrb	r3, [r7, #15]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d13a      	bne.n	800dbd8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7ff fc1d 	bl	800d3a2 <dir_find>
 800db68:	4603      	mov	r3, r0
 800db6a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db72:	699b      	ldr	r3, [r3, #24]
 800db74:	7adb      	ldrb	r3, [r3, #11]
 800db76:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800db78:	7bfb      	ldrb	r3, [r7, #15]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00a      	beq.n	800db94 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800db7e:	7bfb      	ldrb	r3, [r7, #15]
 800db80:	2b04      	cmp	r3, #4
 800db82:	d12b      	bne.n	800dbdc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800db84:	7bbb      	ldrb	r3, [r7, #14]
 800db86:	f003 0304 	and.w	r3, r3, #4
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d126      	bne.n	800dbdc <follow_path+0xdc>
 800db8e:	2305      	movs	r3, #5
 800db90:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800db92:	e023      	b.n	800dbdc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db94:	7bbb      	ldrb	r3, [r7, #14]
 800db96:	f003 0304 	and.w	r3, r3, #4
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d120      	bne.n	800dbe0 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	330b      	adds	r3, #11
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	f003 0310 	and.w	r3, r3, #16
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d102      	bne.n	800dbbc <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800dbb6:	2305      	movs	r3, #5
 800dbb8:	73fb      	strb	r3, [r7, #15]
 800dbba:	e012      	b.n	800dbe2 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68b9      	ldr	r1, [r7, #8]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7ff fa01 	bl	800cfce <ld_clust>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbd6:	e7ba      	b.n	800db4e <follow_path+0x4e>
			if (res != FR_OK) break;
 800dbd8:	bf00      	nop
 800dbda:	e002      	b.n	800dbe2 <follow_path+0xe2>
				break;
 800dbdc:	bf00      	nop
 800dbde:	e000      	b.n	800dbe2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dbe0:	bf00      	nop
		}
	}

	return res;
 800dbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b087      	sub	sp, #28
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d031      	beq.n	800dc66 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	617b      	str	r3, [r7, #20]
 800dc08:	e002      	b.n	800dc10 <get_ldnumber+0x24>
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	617b      	str	r3, [r7, #20]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	2b1f      	cmp	r3, #31
 800dc16:	d903      	bls.n	800dc20 <get_ldnumber+0x34>
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b3a      	cmp	r3, #58	; 0x3a
 800dc1e:	d1f4      	bne.n	800dc0a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b3a      	cmp	r3, #58	; 0x3a
 800dc26:	d11c      	bne.n	800dc62 <get_ldnumber+0x76>
			tp = *path;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	60fa      	str	r2, [r7, #12]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	3b30      	subs	r3, #48	; 0x30
 800dc38:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2b09      	cmp	r3, #9
 800dc3e:	d80e      	bhi.n	800dc5e <get_ldnumber+0x72>
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d10a      	bne.n	800dc5e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d107      	bne.n	800dc5e <get_ldnumber+0x72>
					vol = (int)i;
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	3301      	adds	r3, #1
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	697a      	ldr	r2, [r7, #20]
 800dc5c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	e002      	b.n	800dc68 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dc62:	2300      	movs	r3, #0
 800dc64:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dc66:	693b      	ldr	r3, [r7, #16]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	371c      	adds	r7, #28
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc84:	2200      	movs	r2, #0
 800dc86:	711a      	strb	r2, [r3, #4]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f04f 33ff 	mov.w	r3, #4294967295
 800dc94:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f7fe fa83 	bl	800c1a4 <move_window>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d001      	beq.n	800dca8 <check_fs+0x34>
		return 3;
 800dca4:	2303      	movs	r3, #3
 800dca6:	e04a      	b.n	800dd3e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcae:	3301      	adds	r3, #1
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	021b      	lsls	r3, r3, #8
 800dcb4:	b21a      	sxth	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800dcbc:	b21b      	sxth	r3, r3
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	b21b      	sxth	r3, r3
 800dcc2:	4a21      	ldr	r2, [pc, #132]	; (800dd48 <check_fs+0xd4>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d001      	beq.n	800dccc <check_fs+0x58>
		return 2;
 800dcc8:	2302      	movs	r3, #2
 800dcca:	e038      	b.n	800dd3e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	3336      	adds	r3, #54	; 0x36
 800dcd0:	3303      	adds	r3, #3
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	061a      	lsls	r2, r3, #24
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3336      	adds	r3, #54	; 0x36
 800dcda:	3302      	adds	r3, #2
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	041b      	lsls	r3, r3, #16
 800dce0:	4313      	orrs	r3, r2
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	3236      	adds	r2, #54	; 0x36
 800dce6:	3201      	adds	r2, #1
 800dce8:	7812      	ldrb	r2, [r2, #0]
 800dcea:	0212      	lsls	r2, r2, #8
 800dcec:	4313      	orrs	r3, r2
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dcfa:	4a14      	ldr	r2, [pc, #80]	; (800dd4c <check_fs+0xd8>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d101      	bne.n	800dd04 <check_fs+0x90>
		return 0;
 800dd00:	2300      	movs	r3, #0
 800dd02:	e01c      	b.n	800dd3e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	3352      	adds	r3, #82	; 0x52
 800dd08:	3303      	adds	r3, #3
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	061a      	lsls	r2, r3, #24
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	3352      	adds	r3, #82	; 0x52
 800dd12:	3302      	adds	r3, #2
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	041b      	lsls	r3, r3, #16
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	3252      	adds	r2, #82	; 0x52
 800dd1e:	3201      	adds	r2, #1
 800dd20:	7812      	ldrb	r2, [r2, #0]
 800dd22:	0212      	lsls	r2, r2, #8
 800dd24:	4313      	orrs	r3, r2
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd32:	4a06      	ldr	r2, [pc, #24]	; (800dd4c <check_fs+0xd8>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d101      	bne.n	800dd3c <check_fs+0xc8>
		return 0;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	e000      	b.n	800dd3e <check_fs+0xca>

	return 1;
 800dd3c:	2301      	movs	r3, #1
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	ffffaa55 	.word	0xffffaa55
 800dd4c:	00544146 	.word	0x00544146

0800dd50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b096      	sub	sp, #88	; 0x58
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dd64:	68b8      	ldr	r0, [r7, #8]
 800dd66:	f7ff ff41 	bl	800dbec <get_ldnumber>
 800dd6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	da01      	bge.n	800dd76 <find_volume+0x26>
 800dd72:	230b      	movs	r3, #11
 800dd74:	e311      	b.n	800e39a <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dd76:	4a98      	ldr	r2, [pc, #608]	; (800dfd8 <find_volume+0x288>)
 800dd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <find_volume+0x3a>
 800dd86:	230c      	movs	r3, #12
 800dd88:	e307      	b.n	800e39a <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd8e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d01c      	beq.n	800ddd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dda2:	785b      	ldrb	r3, [r3, #1]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fd fed1 	bl	800bb4c <disk_status>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ddb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10c      	bne.n	800ddd6 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d007      	beq.n	800ddd2 <find_volume+0x82>
 800ddc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddc6:	f003 0304 	and.w	r3, r3, #4
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d001      	beq.n	800ddd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ddce:	230a      	movs	r3, #10
 800ddd0:	e2e3      	b.n	800e39a <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	e2e1      	b.n	800e39a <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dddc:	2200      	movs	r2, #0
 800ddde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dde0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ddec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddf2:	785b      	ldrb	r3, [r3, #1]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fd fec3 	bl	800bb80 <disk_initialize>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800de00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de04:	f003 0301 	and.w	r3, r3, #1
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de0c:	2303      	movs	r3, #3
 800de0e:	e2c4      	b.n	800e39a <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d007      	beq.n	800de26 <find_volume+0xd6>
 800de16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de1a:	f003 0304 	and.w	r3, r3, #4
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800de22:	230a      	movs	r3, #10
 800de24:	e2b9      	b.n	800e39a <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800de26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de2c:	7858      	ldrb	r0, [r3, #1]
 800de2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de34:	330a      	adds	r3, #10
 800de36:	461a      	mov	r2, r3
 800de38:	2102      	movs	r1, #2
 800de3a:	f7fd ff07 	bl	800bc4c <disk_ioctl>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10d      	bne.n	800de60 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800de44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de4a:	895b      	ldrh	r3, [r3, #10]
 800de4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de50:	d306      	bcc.n	800de60 <find_volume+0x110>
 800de52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de58:	895b      	ldrh	r3, [r3, #10]
 800de5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de5e:	d901      	bls.n	800de64 <find_volume+0x114>
 800de60:	2301      	movs	r3, #1
 800de62:	e29a      	b.n	800e39a <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800de64:	2300      	movs	r3, #0
 800de66:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800de68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de6c:	f7ff ff02 	bl	800dc74 <check_fs>
 800de70:	4603      	mov	r3, r0
 800de72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800de76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d153      	bne.n	800df26 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800de7e:	2300      	movs	r3, #0
 800de80:	643b      	str	r3, [r7, #64]	; 0x40
 800de82:	e028      	b.n	800ded6 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800de84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de88:	011b      	lsls	r3, r3, #4
 800de8a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800de8e:	4413      	add	r3, r2
 800de90:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800de92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de94:	3304      	adds	r3, #4
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d012      	beq.n	800dec2 <find_volume+0x172>
 800de9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9e:	330b      	adds	r3, #11
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	061a      	lsls	r2, r3, #24
 800dea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea6:	330a      	adds	r3, #10
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	041b      	lsls	r3, r3, #16
 800deac:	4313      	orrs	r3, r2
 800deae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deb0:	3209      	adds	r2, #9
 800deb2:	7812      	ldrb	r2, [r2, #0]
 800deb4:	0212      	lsls	r2, r2, #8
 800deb6:	4313      	orrs	r3, r2
 800deb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deba:	3208      	adds	r2, #8
 800debc:	7812      	ldrb	r2, [r2, #0]
 800debe:	431a      	orrs	r2, r3
 800dec0:	e000      	b.n	800dec4 <find_volume+0x174>
 800dec2:	2200      	movs	r2, #0
 800dec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	3358      	adds	r3, #88	; 0x58
 800deca:	443b      	add	r3, r7
 800decc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ded0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded2:	3301      	adds	r3, #1
 800ded4:	643b      	str	r3, [r7, #64]	; 0x40
 800ded6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d9d3      	bls.n	800de84 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800dedc:	2300      	movs	r3, #0
 800dede:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d002      	beq.n	800deec <find_volume+0x19c>
 800dee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dee8:	3b01      	subs	r3, #1
 800deea:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800deec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	3358      	adds	r3, #88	; 0x58
 800def2:	443b      	add	r3, r7
 800def4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800def8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800defa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800defc:	2b00      	cmp	r3, #0
 800defe:	d005      	beq.n	800df0c <find_volume+0x1bc>
 800df00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df04:	f7ff feb6 	bl	800dc74 <check_fs>
 800df08:	4603      	mov	r3, r0
 800df0a:	e000      	b.n	800df0e <find_volume+0x1be>
 800df0c:	2302      	movs	r3, #2
 800df0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800df12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df16:	2b00      	cmp	r3, #0
 800df18:	d005      	beq.n	800df26 <find_volume+0x1d6>
 800df1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df1c:	3301      	adds	r3, #1
 800df1e:	643b      	str	r3, [r7, #64]	; 0x40
 800df20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df22:	2b03      	cmp	r3, #3
 800df24:	d9e2      	bls.n	800deec <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800df26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df2a:	2b03      	cmp	r3, #3
 800df2c:	d101      	bne.n	800df32 <find_volume+0x1e2>
 800df2e:	2301      	movs	r3, #1
 800df30:	e233      	b.n	800e39a <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800df32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <find_volume+0x1ee>
 800df3a:	230d      	movs	r3, #13
 800df3c:	e22d      	b.n	800e39a <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800df3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df40:	7b1b      	ldrb	r3, [r3, #12]
 800df42:	021b      	lsls	r3, r3, #8
 800df44:	b21a      	sxth	r2, r3
 800df46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df48:	7adb      	ldrb	r3, [r3, #11]
 800df4a:	b21b      	sxth	r3, r3
 800df4c:	4313      	orrs	r3, r2
 800df4e:	b21a      	sxth	r2, r3
 800df50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df56:	895b      	ldrh	r3, [r3, #10]
 800df58:	b21b      	sxth	r3, r3
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d001      	beq.n	800df62 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800df5e:	230d      	movs	r3, #13
 800df60:	e21b      	b.n	800e39a <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800df62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df64:	7ddb      	ldrb	r3, [r3, #23]
 800df66:	021b      	lsls	r3, r3, #8
 800df68:	b21a      	sxth	r2, r3
 800df6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6c:	7d9b      	ldrb	r3, [r3, #22]
 800df6e:	b21b      	sxth	r3, r3
 800df70:	4313      	orrs	r3, r2
 800df72:	b21b      	sxth	r3, r3
 800df74:	b29b      	uxth	r3, r3
 800df76:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800df78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d112      	bne.n	800dfa4 <find_volume+0x254>
 800df7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df80:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800df84:	061a      	lsls	r2, r3, #24
 800df86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df88:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800df8c:	041b      	lsls	r3, r3, #16
 800df8e:	4313      	orrs	r3, r2
 800df90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df92:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800df96:	0212      	lsls	r2, r2, #8
 800df98:	4313      	orrs	r3, r2
 800df9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df9c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfaa:	461a      	mov	r2, r3
 800dfac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfae:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	7c1a      	ldrb	r2, [r3, #16]
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfba:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800dfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfc2:	78db      	ldrb	r3, [r3, #3]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d009      	beq.n	800dfdc <find_volume+0x28c>
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfce:	78db      	ldrb	r3, [r3, #3]
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d003      	beq.n	800dfdc <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800dfd4:	230d      	movs	r3, #13
 800dfd6:	e1e0      	b.n	800e39a <find_volume+0x64a>
 800dfd8:	20002b70 	.word	0x20002b70
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800dfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfe2:	78db      	ldrb	r3, [r3, #3]
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe8:	fb02 f303 	mul.w	r3, r2, r3
 800dfec:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800dfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff0:	7b5a      	ldrb	r2, [r3, #13]
 800dff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dff8:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800dffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e000:	789b      	ldrb	r3, [r3, #2]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00c      	beq.n	800e020 <find_volume+0x2d0>
 800e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e00c:	789b      	ldrb	r3, [r3, #2]
 800e00e:	461a      	mov	r2, r3
 800e010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e016:	789b      	ldrb	r3, [r3, #2]
 800e018:	3b01      	subs	r3, #1
 800e01a:	4013      	ands	r3, r2
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800e020:	230d      	movs	r3, #13
 800e022:	e1ba      	b.n	800e39a <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800e024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e026:	7c9b      	ldrb	r3, [r3, #18]
 800e028:	021b      	lsls	r3, r3, #8
 800e02a:	b21a      	sxth	r2, r3
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	7c5b      	ldrb	r3, [r3, #17]
 800e030:	b21b      	sxth	r3, r3
 800e032:	4313      	orrs	r3, r2
 800e034:	b21b      	sxth	r3, r3
 800e036:	b29a      	uxth	r2, r3
 800e038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e03e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800e040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e046:	891b      	ldrh	r3, [r3, #8]
 800e048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e04a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e04e:	8952      	ldrh	r2, [r2, #10]
 800e050:	0952      	lsrs	r2, r2, #5
 800e052:	b292      	uxth	r2, r2
 800e054:	fbb3 f1f2 	udiv	r1, r3, r2
 800e058:	fb01 f202 	mul.w	r2, r1, r2
 800e05c:	1a9b      	subs	r3, r3, r2
 800e05e:	b29b      	uxth	r3, r3
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800e064:	230d      	movs	r3, #13
 800e066:	e198      	b.n	800e39a <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800e068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06a:	7d1b      	ldrb	r3, [r3, #20]
 800e06c:	021b      	lsls	r3, r3, #8
 800e06e:	b21a      	sxth	r2, r3
 800e070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e072:	7cdb      	ldrb	r3, [r3, #19]
 800e074:	b21b      	sxth	r3, r3
 800e076:	4313      	orrs	r3, r2
 800e078:	b21b      	sxth	r3, r3
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800e07e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e080:	2b00      	cmp	r3, #0
 800e082:	d112      	bne.n	800e0aa <find_volume+0x35a>
 800e084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e086:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e08a:	061a      	lsls	r2, r3, #24
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e092:	041b      	lsls	r3, r3, #16
 800e094:	4313      	orrs	r3, r2
 800e096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e098:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800e09c:	0212      	lsls	r2, r2, #8
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800e0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ac:	7bdb      	ldrb	r3, [r3, #15]
 800e0ae:	021b      	lsls	r3, r3, #8
 800e0b0:	b21a      	sxth	r2, r3
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b4:	7b9b      	ldrb	r3, [r3, #14]
 800e0b6:	b21b      	sxth	r3, r3
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	b21b      	sxth	r3, r3
 800e0bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800e0be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <find_volume+0x378>
 800e0c4:	230d      	movs	r3, #13
 800e0c6:	e168      	b.n	800e39a <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800e0c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0cc:	4413      	add	r3, r2
 800e0ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e0d4:	8911      	ldrh	r1, [r2, #8]
 800e0d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e0dc:	8952      	ldrh	r2, [r2, #10]
 800e0de:	0952      	lsrs	r2, r2, #5
 800e0e0:	b292      	uxth	r2, r2
 800e0e2:	fbb1 f2f2 	udiv	r2, r1, r2
 800e0e6:	b292      	uxth	r2, r2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e0ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d201      	bcs.n	800e0f8 <find_volume+0x3a8>
 800e0f4:	230d      	movs	r3, #13
 800e0f6:	e150      	b.n	800e39a <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800e0f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e100:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e104:	7892      	ldrb	r2, [r2, #2]
 800e106:	fbb3 f3f2 	udiv	r3, r3, r2
 800e10a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <find_volume+0x3c6>
 800e112:	230d      	movs	r3, #13
 800e114:	e141      	b.n	800e39a <find_volume+0x64a>
	fmt = FS_FAT12;
 800e116:	2301      	movs	r3, #1
 800e118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e122:	4293      	cmp	r3, r2
 800e124:	d902      	bls.n	800e12c <find_volume+0x3dc>
 800e126:	2302      	movs	r3, #2
 800e128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800e12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e132:	4293      	cmp	r3, r2
 800e134:	d902      	bls.n	800e13c <find_volume+0x3ec>
 800e136:	2303      	movs	r3, #3
 800e138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13e:	3302      	adds	r3, #2
 800e140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e146:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800e148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e14e:	461a      	mov	r2, r3
 800e150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e152:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800e154:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e158:	4413      	add	r3, r2
 800e15a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e15c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e160:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800e162:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e166:	4413      	add	r3, r2
 800e168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e16a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e16e:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800e170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e174:	2b03      	cmp	r3, #3
 800e176:	d124      	bne.n	800e1c2 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800e178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e17e:	891b      	ldrh	r3, [r3, #8]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <find_volume+0x438>
 800e184:	230d      	movs	r3, #13
 800e186:	e108      	b.n	800e39a <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800e188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e18e:	061a      	lsls	r2, r3, #24
 800e190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e192:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e196:	041b      	lsls	r3, r3, #16
 800e198:	4313      	orrs	r3, r2
 800e19a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e19c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800e1a0:	0212      	lsls	r2, r2, #8
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1a6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e1b2:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800e1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ba:	695b      	ldr	r3, [r3, #20]
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	647b      	str	r3, [r7, #68]	; 0x44
 800e1c0:	e02b      	b.n	800e21a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800e1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c8:	891b      	ldrh	r3, [r3, #8]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <find_volume+0x482>
 800e1ce:	230d      	movs	r3, #13
 800e1d0:	e0e3      	b.n	800e39a <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1d8:	6a1a      	ldr	r2, [r3, #32]
 800e1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1dc:	4413      	add	r3, r2
 800e1de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e1e4:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e1e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d105      	bne.n	800e1fa <find_volume+0x4aa>
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1f4:	695b      	ldr	r3, [r3, #20]
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	e00e      	b.n	800e218 <find_volume+0x4c8>
 800e1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e200:	695a      	ldr	r2, [r3, #20]
 800e202:	4613      	mov	r3, r2
 800e204:	005b      	lsls	r3, r3, #1
 800e206:	4413      	add	r3, r2
 800e208:	085a      	lsrs	r2, r3, #1
 800e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e210:	695b      	ldr	r3, [r3, #20]
 800e212:	f003 0301 	and.w	r3, r3, #1
 800e216:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800e218:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e220:	699a      	ldr	r2, [r3, #24]
 800e222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e228:	895b      	ldrh	r3, [r3, #10]
 800e22a:	4619      	mov	r1, r3
 800e22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e22e:	440b      	add	r3, r1
 800e230:	3b01      	subs	r3, #1
 800e232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e234:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800e238:	8949      	ldrh	r1, [r1, #10]
 800e23a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e23e:	429a      	cmp	r2, r3
 800e240:	d201      	bcs.n	800e246 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800e242:	230d      	movs	r3, #13
 800e244:	e0a9      	b.n	800e39a <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800e246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24c:	461a      	mov	r2, r3
 800e24e:	f04f 33ff 	mov.w	r3, #4294967295
 800e252:	6113      	str	r3, [r2, #16]
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e25a:	691b      	ldr	r3, [r3, #16]
 800e25c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e25e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e262:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e26a:	2280      	movs	r2, #128	; 0x80
 800e26c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800e26e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e272:	2b03      	cmp	r3, #3
 800e274:	d17a      	bne.n	800e36c <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e27c:	021b      	lsls	r3, r3, #8
 800e27e:	b21a      	sxth	r2, r3
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e286:	b21b      	sxth	r3, r3
 800e288:	4313      	orrs	r3, r2
 800e28a:	b21b      	sxth	r3, r3
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d16d      	bne.n	800e36c <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800e290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e292:	3301      	adds	r3, #1
 800e294:	4619      	mov	r1, r3
 800e296:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e298:	f7fd ff84 	bl	800c1a4 <move_window>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d164      	bne.n	800e36c <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ae:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800e2b2:	021b      	lsls	r3, r3, #8
 800e2b4:	b21a      	sxth	r2, r3
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800e2bc:	b21b      	sxth	r3, r3
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	b21b      	sxth	r3, r3
 800e2c2:	4a38      	ldr	r2, [pc, #224]	; (800e3a4 <find_volume+0x654>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d151      	bne.n	800e36c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	78db      	ldrb	r3, [r3, #3]
 800e2cc:	061a      	lsls	r2, r3, #24
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d0:	789b      	ldrb	r3, [r3, #2]
 800e2d2:	041b      	lsls	r3, r3, #16
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2d8:	7852      	ldrb	r2, [r2, #1]
 800e2da:	0212      	lsls	r2, r2, #8
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2e0:	7812      	ldrb	r2, [r2, #0]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	4a30      	ldr	r2, [pc, #192]	; (800e3a8 <find_volume+0x658>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d140      	bne.n	800e36c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800e2f0:	061a      	lsls	r2, r3, #24
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800e2f8:	041b      	lsls	r3, r3, #16
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2fe:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800e302:	0212      	lsls	r2, r2, #8
 800e304:	4313      	orrs	r3, r2
 800e306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e308:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800e30c:	4313      	orrs	r3, r2
 800e30e:	4a27      	ldr	r2, [pc, #156]	; (800e3ac <find_volume+0x65c>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d12b      	bne.n	800e36c <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800e314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e316:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800e31a:	061a      	lsls	r2, r3, #24
 800e31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800e322:	041b      	lsls	r3, r3, #16
 800e324:	4313      	orrs	r3, r2
 800e326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e328:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800e32c:	0212      	lsls	r2, r2, #8
 800e32e:	4313      	orrs	r3, r2
 800e330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e332:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800e336:	4313      	orrs	r3, r2
 800e338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e33a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e33e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800e340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e342:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800e346:	061a      	lsls	r2, r3, #24
 800e348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800e34e:	041b      	lsls	r3, r3, #16
 800e350:	4313      	orrs	r3, r2
 800e352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e354:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800e358:	0212      	lsls	r2, r2, #8
 800e35a:	4313      	orrs	r3, r2
 800e35c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e35e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800e362:	4313      	orrs	r3, r2
 800e364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e36a:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e372:	461a      	mov	r2, r3
 800e374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e378:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800e37a:	4b0d      	ldr	r3, [pc, #52]	; (800e3b0 <find_volume+0x660>)
 800e37c:	881b      	ldrh	r3, [r3, #0]
 800e37e:	3301      	adds	r3, #1
 800e380:	b29a      	uxth	r2, r3
 800e382:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <find_volume+0x660>)
 800e384:	801a      	strh	r2, [r3, #0]
 800e386:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <find_volume+0x660>)
 800e388:	881a      	ldrh	r2, [r3, #0]
 800e38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e390:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800e392:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e394:	f7fd fe8a 	bl	800c0ac <clear_lock>
#endif

	return FR_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3758      	adds	r7, #88	; 0x58
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	ffffaa55 	.word	0xffffaa55
 800e3a8:	41615252 	.word	0x41615252
 800e3ac:	61417272 	.word	0x61417272
 800e3b0:	20002b74 	.word	0x20002b74

0800e3b4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d02a      	beq.n	800e41c <validate+0x68>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d024      	beq.n	800e41c <validate+0x68>
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d01b      	beq.n	800e41c <validate+0x68>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3f0:	88da      	ldrh	r2, [r3, #6]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3f8:	889b      	ldrh	r3, [r3, #4]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d10e      	bne.n	800e41c <validate+0x68>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e40a:	785b      	ldrb	r3, [r3, #1]
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fd fb9d 	bl	800bb4c <disk_status>
 800e412:	4603      	mov	r3, r0
 800e414:	f003 0301 	and.w	r3, r3, #1
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d001      	beq.n	800e420 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800e41c:	2309      	movs	r3, #9
 800e41e:	e000      	b.n	800e422 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
	...

0800e42c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b088      	sub	sp, #32
 800e430:	af00      	add	r7, sp, #0
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	4613      	mov	r3, r2
 800e438:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800e43e:	f107 0310 	add.w	r3, r7, #16
 800e442:	4618      	mov	r0, r3
 800e444:	f7ff fbd2 	bl	800dbec <get_ldnumber>
 800e448:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	da01      	bge.n	800e454 <f_mount+0x28>
 800e450:	230b      	movs	r3, #11
 800e452:	e02f      	b.n	800e4b4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e454:	4a19      	ldr	r2, [pc, #100]	; (800e4bc <f_mount+0x90>)
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e45c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d007      	beq.n	800e474 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800e464:	69b8      	ldr	r0, [r7, #24]
 800e466:	f7fd fe21 	bl	800c0ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e470:	2200      	movs	r2, #0
 800e472:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d004      	beq.n	800e484 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e480:	2200      	movs	r2, #0
 800e482:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	490d      	ldr	r1, [pc, #52]	; (800e4bc <f_mount+0x90>)
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <f_mount+0x6e>
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	2b01      	cmp	r3, #1
 800e498:	d001      	beq.n	800e49e <f_mount+0x72>
 800e49a:	2300      	movs	r3, #0
 800e49c:	e00a      	b.n	800e4b4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800e49e:	f107 0108 	add.w	r1, r7, #8
 800e4a2:	f107 030c 	add.w	r3, r7, #12
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7ff fc51 	bl	800dd50 <find_volume>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3720      	adds	r7, #32
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	20002b70 	.word	0x20002b70

0800e4c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e4ce:	f843 0c4c 	str.w	r0, [r3, #-76]
 800e4d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e4d6:	f843 1c50 	str.w	r1, [r3, #-80]
 800e4da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e4de:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800e4e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e4e6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <f_open+0x32>
 800e4ee:	2309      	movs	r3, #9
 800e4f0:	e2f7      	b.n	800eae2 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800e4f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e4f6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4fe:	461a      	mov	r2, r3
 800e500:	2300      	movs	r3, #0
 800e502:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800e504:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e508:	461a      	mov	r2, r3
 800e50a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e50e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e512:	f003 031f 	and.w	r3, r3, #31
 800e516:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800e51a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e51e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e522:	f023 0301 	bic.w	r3, r3, #1
 800e526:	b2da      	uxtb	r2, r3
 800e528:	f107 0118 	add.w	r1, r7, #24
 800e52c:	3910      	subs	r1, #16
 800e52e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e532:	3b18      	subs	r3, #24
 800e534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e538:	4618      	mov	r0, r3
 800e53a:	f7ff fc09 	bl	800dd50 <find_volume>
 800e53e:	4603      	mov	r3, r0
 800e540:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e544:	f102 0217 	add.w	r2, r2, #23
 800e548:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800e54a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e54e:	f103 0317 	add.w	r3, r3, #23
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	f040 82bf 	bne.w	800ead8 <f_open+0x618>
		INIT_BUF(dj);
 800e55a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e55e:	461a      	mov	r2, r3
 800e560:	f107 0318 	add.w	r3, r7, #24
 800e564:	3b04      	subs	r3, #4
 800e566:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800e56a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e56e:	461a      	mov	r2, r3
 800e570:	4bd4      	ldr	r3, [pc, #848]	; (800e8c4 <f_open+0x404>)
 800e572:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800e576:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e57a:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800e57e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e582:	3b18      	subs	r3, #24
 800e584:	4611      	mov	r1, r2
 800e586:	4618      	mov	r0, r3
 800e588:	f7ff faba 	bl	800db00 <follow_path>
 800e58c:	4603      	mov	r3, r0
 800e58e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e592:	f102 0217 	add.w	r2, r2, #23
 800e596:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800e598:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e59c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800e5a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e5a4:	f102 0210 	add.w	r2, r2, #16
 800e5a8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e5aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e5ae:	f103 0317 	add.w	r3, r3, #23
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d126      	bne.n	800e606 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800e5b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e5bc:	f103 0310 	add.w	r3, r3, #16
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d106      	bne.n	800e5d4 <f_open+0x114>
				res = FR_INVALID_NAME;
 800e5c6:	2306      	movs	r3, #6
 800e5c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e5cc:	f102 0217 	add.w	r2, r2, #23
 800e5d0:	7013      	strb	r3, [r2, #0]
 800e5d2:	e018      	b.n	800e606 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e5d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e5d8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e5dc:	f023 0301 	bic.w	r3, r3, #1
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	bf14      	ite	ne
 800e5e4:	2301      	movne	r3, #1
 800e5e6:	2300      	moveq	r3, #0
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e5f0:	3b18      	subs	r3, #24
 800e5f2:	4611      	mov	r1, r2
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7fd fbc3 	bl	800bd80 <chk_lock>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e600:	f102 0217 	add.w	r2, r2, #23
 800e604:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e606:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e60a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e60e:	f003 031c 	and.w	r3, r3, #28
 800e612:	2b00      	cmp	r3, #0
 800e614:	f000 813c 	beq.w	800e890 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800e618:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e61c:	f103 0317 	add.w	r3, r3, #23
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d02e      	beq.n	800e684 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800e626:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e62a:	f103 0317 	add.w	r3, r3, #23
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	2b04      	cmp	r3, #4
 800e632:	d112      	bne.n	800e65a <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e634:	f7fd fc14 	bl	800be60 <enq_lock>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d007      	beq.n	800e64e <f_open+0x18e>
 800e63e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e642:	3b18      	subs	r3, #24
 800e644:	4618      	mov	r0, r3
 800e646:	f7fe ff79 	bl	800d53c <dir_register>
 800e64a:	4603      	mov	r3, r0
 800e64c:	e000      	b.n	800e650 <f_open+0x190>
 800e64e:	2312      	movs	r3, #18
 800e650:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e654:	f102 0217 	add.w	r2, r2, #23
 800e658:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e65a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e65e:	461a      	mov	r2, r3
 800e660:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e664:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e668:	f043 0308 	orr.w	r3, r3, #8
 800e66c:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800e670:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e674:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800e678:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e67c:	f102 0210 	add.w	r2, r2, #16
 800e680:	6013      	str	r3, [r2, #0]
 800e682:	e01f      	b.n	800e6c4 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e684:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e688:	f103 0310 	add.w	r3, r3, #16
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	330b      	adds	r3, #11
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	f003 0311 	and.w	r3, r3, #17
 800e696:	2b00      	cmp	r3, #0
 800e698:	d006      	beq.n	800e6a8 <f_open+0x1e8>
					res = FR_DENIED;
 800e69a:	2307      	movs	r3, #7
 800e69c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e6a0:	f102 0217 	add.w	r2, r2, #23
 800e6a4:	7013      	strb	r3, [r2, #0]
 800e6a6:	e00d      	b.n	800e6c4 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800e6a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e6ac:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e6b0:	f003 0304 	and.w	r3, r3, #4
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d005      	beq.n	800e6c4 <f_open+0x204>
						res = FR_EXIST;
 800e6b8:	2308      	movs	r3, #8
 800e6ba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e6be:	f102 0217 	add.w	r2, r2, #23
 800e6c2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e6c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e6c8:	f103 0317 	add.w	r3, r3, #23
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f040 8113 	bne.w	800e8fa <f_open+0x43a>
 800e6d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e6d8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e6dc:	f003 0308 	and.w	r3, r3, #8
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f000 810a 	beq.w	800e8fa <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800e6e6:	f7fd f9cf 	bl	800ba88 <get_fattime>
 800e6ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e6ee:	f103 030c 	add.w	r3, r3, #12
 800e6f2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800e6f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e6f8:	f103 0310 	add.w	r3, r3, #16
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	330e      	adds	r3, #14
 800e700:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e704:	f102 020c 	add.w	r2, r2, #12
 800e708:	6812      	ldr	r2, [r2, #0]
 800e70a:	b2d2      	uxtb	r2, r2
 800e70c:	701a      	strb	r2, [r3, #0]
 800e70e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e712:	f103 030c 	add.w	r3, r3, #12
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	0a1b      	lsrs	r3, r3, #8
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e722:	f103 0310 	add.w	r3, r3, #16
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	330f      	adds	r3, #15
 800e72a:	b2d2      	uxtb	r2, r2
 800e72c:	701a      	strb	r2, [r3, #0]
 800e72e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e732:	f103 030c 	add.w	r3, r3, #12
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	0c1a      	lsrs	r2, r3, #16
 800e73a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e73e:	f103 0310 	add.w	r3, r3, #16
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	3310      	adds	r3, #16
 800e746:	b2d2      	uxtb	r2, r2
 800e748:	701a      	strb	r2, [r3, #0]
 800e74a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e74e:	f103 030c 	add.w	r3, r3, #12
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	0e1a      	lsrs	r2, r3, #24
 800e756:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e75a:	f103 0310 	add.w	r3, r3, #16
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3311      	adds	r3, #17
 800e762:	b2d2      	uxtb	r2, r2
 800e764:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800e766:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e76a:	f103 0310 	add.w	r3, r3, #16
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	330b      	adds	r3, #11
 800e772:	2200      	movs	r2, #0
 800e774:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800e776:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e77a:	f103 0310 	add.w	r3, r3, #16
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	331c      	adds	r3, #28
 800e782:	2200      	movs	r2, #0
 800e784:	701a      	strb	r2, [r3, #0]
 800e786:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e78a:	f103 0310 	add.w	r3, r3, #16
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	331d      	adds	r3, #29
 800e792:	2200      	movs	r2, #0
 800e794:	701a      	strb	r2, [r3, #0]
 800e796:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e79a:	f103 0310 	add.w	r3, r3, #16
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	331e      	adds	r3, #30
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e7aa:	f103 0310 	add.w	r3, r3, #16
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	331f      	adds	r3, #31
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800e7b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e7ba:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800e7be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e7c2:	f102 0210 	add.w	r2, r2, #16
 800e7c6:	6811      	ldr	r1, [r2, #0]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fe fc00 	bl	800cfce <ld_clust>
 800e7ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e7d2:	f103 0308 	add.w	r3, r3, #8
 800e7d6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800e7d8:	2100      	movs	r1, #0
 800e7da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e7de:	f103 0310 	add.w	r3, r3, #16
 800e7e2:	6818      	ldr	r0, [r3, #0]
 800e7e4:	f7fe fc22 	bl	800d02c <st_clust>
				dj.fs->wflag = 1;
 800e7e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e7ec:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800e7f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800e7f8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e7fc:	f103 0308 	add.w	r3, r3, #8
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d079      	beq.n	800e8fa <f_open+0x43a>
					dw = dj.fs->winsect;
 800e806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e80a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800e80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e814:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e818:	f102 020c 	add.w	r2, r2, #12
 800e81c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800e81e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e822:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800e826:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e82a:	f102 0208 	add.w	r2, r2, #8
 800e82e:	6811      	ldr	r1, [r2, #0]
 800e830:	4618      	mov	r0, r3
 800e832:	f7fe f81c 	bl	800c86e <remove_chain>
 800e836:	4603      	mov	r3, r0
 800e838:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e83c:	f102 0217 	add.w	r2, r2, #23
 800e840:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800e842:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e846:	f103 0317 	add.w	r3, r3, #23
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d154      	bne.n	800e8fa <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800e850:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e854:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800e858:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e85c:	f103 0308 	add.w	r3, r3, #8
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3b01      	subs	r3, #1
 800e864:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e868:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800e86a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e86e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800e872:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e876:	f102 020c 	add.w	r2, r2, #12
 800e87a:	6811      	ldr	r1, [r2, #0]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fd fc91 	bl	800c1a4 <move_window>
 800e882:	4603      	mov	r3, r0
 800e884:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e888:	f102 0217 	add.w	r2, r2, #23
 800e88c:	7013      	strb	r3, [r2, #0]
 800e88e:	e034      	b.n	800e8fa <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800e890:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e894:	f103 0317 	add.w	r3, r3, #23
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d12d      	bne.n	800e8fa <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800e89e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e8a2:	f103 0310 	add.w	r3, r3, #16
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	330b      	adds	r3, #11
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	f003 0310 	and.w	r3, r3, #16
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d009      	beq.n	800e8c8 <f_open+0x408>
					res = FR_NO_FILE;
 800e8b4:	2304      	movs	r3, #4
 800e8b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e8ba:	f102 0217 	add.w	r2, r2, #23
 800e8be:	7013      	strb	r3, [r2, #0]
 800e8c0:	e01b      	b.n	800e8fa <f_open+0x43a>
 800e8c2:	bf00      	nop
 800e8c4:	20002b90 	.word	0x20002b90
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800e8c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e8cc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e8d0:	f003 0302 	and.w	r3, r3, #2
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d010      	beq.n	800e8fa <f_open+0x43a>
 800e8d8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e8dc:	f103 0310 	add.w	r3, r3, #16
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	330b      	adds	r3, #11
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d005      	beq.n	800e8fa <f_open+0x43a>
						res = FR_DENIED;
 800e8ee:	2307      	movs	r3, #7
 800e8f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e8f4:	f102 0217 	add.w	r2, r2, #23
 800e8f8:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800e8fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e8fe:	f103 0317 	add.w	r3, r3, #23
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d157      	bne.n	800e9b8 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e908:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e90c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e910:	f003 0308 	and.w	r3, r3, #8
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00a      	beq.n	800e92e <f_open+0x46e>
				mode |= FA__WRITTEN;
 800e918:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e91c:	461a      	mov	r2, r3
 800e91e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e922:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e926:	f043 0320 	orr.w	r3, r3, #32
 800e92a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800e92e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e932:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800e936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e93c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e940:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800e944:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e948:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800e94a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e94e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e956:	461a      	mov	r2, r3
 800e958:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e95c:	f103 0310 	add.w	r3, r3, #16
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e964:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e968:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e96c:	f023 0301 	bic.w	r3, r3, #1
 800e970:	2b00      	cmp	r3, #0
 800e972:	bf14      	ite	ne
 800e974:	2301      	movne	r3, #1
 800e976:	2300      	moveq	r3, #0
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	461a      	mov	r2, r3
 800e97c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e980:	3b18      	subs	r3, #24
 800e982:	4611      	mov	r1, r2
 800e984:	4618      	mov	r0, r3
 800e986:	f7fd fa8f 	bl	800bea8 <inc_lock>
 800e98a:	4602      	mov	r2, r0
 800e98c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e990:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e998:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800e99a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e99e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e9a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d105      	bne.n	800e9b8 <f_open+0x4f8>
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e9b2:	f102 0217 	add.w	r2, r2, #23
 800e9b6:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800e9b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e9bc:	f103 0317 	add.w	r3, r3, #23
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f040 8088 	bne.w	800ead8 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800e9c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9cc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9da:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800e9de:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800e9e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9e4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800e9f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9f4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800e9f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e9fc:	f102 0210 	add.w	r2, r2, #16
 800ea00:	6811      	ldr	r1, [r2, #0]
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fe fae3 	bl	800cfce <ld_clust>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea0e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ea12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea16:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800ea18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ea1c:	f103 0310 	add.w	r3, r3, #16
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	331f      	adds	r3, #31
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	061a      	lsls	r2, r3, #24
 800ea28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ea2c:	f103 0310 	add.w	r3, r3, #16
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	331e      	adds	r3, #30
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	041b      	lsls	r3, r3, #16
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ea3e:	f102 0210 	add.w	r2, r2, #16
 800ea42:	6812      	ldr	r2, [r2, #0]
 800ea44:	321d      	adds	r2, #29
 800ea46:	7812      	ldrb	r2, [r2, #0]
 800ea48:	0212      	lsls	r2, r2, #8
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ea50:	f102 0210 	add.w	r2, r2, #16
 800ea54:	6812      	ldr	r2, [r2, #0]
 800ea56:	321c      	adds	r2, #28
 800ea58:	7812      	ldrb	r2, [r2, #0]
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ea60:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800ea64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ea68:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800ea6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea6e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ea72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea76:	461a      	mov	r2, r3
 800ea78:	2300      	movs	r3, #0
 800ea7a:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800ea7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea80:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ea84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea88:	461a      	mov	r2, r3
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800ea8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea92:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ea96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800eaa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eaa4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800eaa8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800eaac:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800eab0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eab4:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800eab6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eaba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800eabe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eac8:	88da      	ldrh	r2, [r3, #6]
 800eaca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eace:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ead2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ead6:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800ead8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800eadc:	f103 0317 	add.w	r3, r3, #23
 800eae0:	781b      	ldrb	r3, [r3, #0]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800eae8:	3718      	adds	r7, #24
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop

0800eaf0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b08c      	sub	sp, #48	; 0x30
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
 800eafc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	2200      	movs	r2, #0
 800eb06:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800eb08:	68f8      	ldr	r0, [r7, #12]
 800eb0a:	f7ff fc53 	bl	800e3b4 <validate>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800eb12:	7ffb      	ldrb	r3, [r7, #31]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d001      	beq.n	800eb1c <f_read+0x2c>
 800eb18:	7ffb      	ldrb	r3, [r7, #31]
 800eb1a:	e1cd      	b.n	800eeb8 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb22:	79db      	ldrb	r3, [r3, #7]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d004      	beq.n	800eb32 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb2e:	79db      	ldrb	r3, [r3, #7]
 800eb30:	e1c2      	b.n	800eeb8 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb38:	799b      	ldrb	r3, [r3, #6]
 800eb3a:	f003 0301 	and.w	r3, r3, #1
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d101      	bne.n	800eb46 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800eb42:	2307      	movs	r3, #7
 800eb44:	e1b8      	b.n	800eeb8 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb4c:	68da      	ldr	r2, [r3, #12]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb54:	689b      	ldr	r3, [r3, #8]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	f240 81a5 	bls.w	800eeae <f_read+0x3be>
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eb68:	e1a1      	b.n	800eeae <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eb78:	6812      	ldr	r2, [r2, #0]
 800eb7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eb7e:	8952      	ldrh	r2, [r2, #10]
 800eb80:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb84:	fb01 f202 	mul.w	r2, r1, r2
 800eb88:	1a9b      	subs	r3, r3, r2
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f040 8140 	bne.w	800ee10 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eb9e:	6812      	ldr	r2, [r2, #0]
 800eba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eba4:	8952      	ldrh	r2, [r2, #10]
 800eba6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebb8:	789b      	ldrb	r3, [r3, #2]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	4013      	ands	r3, r2
 800ebc0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800ebc2:	7dfb      	ldrb	r3, [r7, #23]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d143      	bne.n	800ec50 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d105      	bne.n	800ebe0 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebde:	e01c      	b.n	800ec1a <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d009      	beq.n	800ec00 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	68f8      	ldr	r0, [r7, #12]
 800ebf8:	f7fd ff42 	bl	800ca80 <clmt_clust>
 800ebfc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ebfe:	e00c      	b.n	800ec1a <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec0e:	695b      	ldr	r3, [r3, #20]
 800ec10:	4619      	mov	r1, r3
 800ec12:	4610      	mov	r0, r2
 800ec14:	f7fd fbdc 	bl	800c3d0 <get_fat>
 800ec18:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d806      	bhi.n	800ec2e <f_read+0x13e>
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec26:	2202      	movs	r2, #2
 800ec28:	71da      	strb	r2, [r3, #7]
 800ec2a:	2302      	movs	r3, #2
 800ec2c:	e144      	b.n	800eeb8 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec34:	d106      	bne.n	800ec44 <f_read+0x154>
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	71da      	strb	r2, [r3, #7]
 800ec40:	2301      	movs	r3, #1
 800ec42:	e139      	b.n	800eeb8 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4e:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec5e:	695b      	ldr	r3, [r3, #20]
 800ec60:	4619      	mov	r1, r3
 800ec62:	4610      	mov	r0, r2
 800ec64:	f7fd fb8f 	bl	800c386 <clust2sect>
 800ec68:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d106      	bne.n	800ec7e <f_read+0x18e>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec76:	2202      	movs	r2, #2
 800ec78:	71da      	strb	r2, [r3, #7]
 800ec7a:	2302      	movs	r3, #2
 800ec7c:	e11c      	b.n	800eeb8 <f_read+0x3c8>
			sect += csect;
 800ec7e:	7dfb      	ldrb	r3, [r7, #23]
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	4413      	add	r3, r2
 800ec84:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec92:	895b      	ldrh	r3, [r3, #10]
 800ec94:	461a      	mov	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec9c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d066      	beq.n	800ed72 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800eca4:	7dfa      	ldrb	r2, [r7, #23]
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	4413      	add	r3, r2
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ecb0:	6812      	ldr	r2, [r2, #0]
 800ecb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ecb6:	7892      	ldrb	r2, [r2, #2]
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d90a      	bls.n	800ecd2 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecc8:	789b      	ldrb	r3, [r3, #2]
 800ecca:	461a      	mov	r2, r3
 800eccc:	7dfb      	ldrb	r3, [r7, #23]
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecde:	7858      	ldrb	r0, [r3, #1]
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	6a39      	ldr	r1, [r7, #32]
 800ece6:	f7fc ff71 	bl	800bbcc <disk_read>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d006      	beq.n	800ecfe <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	71da      	strb	r2, [r3, #7]
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e0dc      	b.n	800eeb8 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed04:	799b      	ldrb	r3, [r3, #6]
 800ed06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d024      	beq.n	800ed58 <f_read+0x268>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed14:	699a      	ldr	r2, [r3, #24]
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d91b      	bls.n	800ed58 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed26:	699a      	ldr	r2, [r3, #24]
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ed32:	6812      	ldr	r2, [r2, #0]
 800ed34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ed38:	8952      	ldrh	r2, [r2, #10]
 800ed3a:	fb02 f303 	mul.w	r3, r2, r3
 800ed3e:	6a3a      	ldr	r2, [r7, #32]
 800ed40:	18d0      	adds	r0, r2, r3
 800ed42:	68f9      	ldr	r1, [r7, #12]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed50:	895b      	ldrh	r3, [r3, #10]
 800ed52:	461a      	mov	r2, r3
 800ed54:	f7fc ff98 	bl	800bc88 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed64:	895b      	ldrh	r3, [r3, #10]
 800ed66:	461a      	mov	r2, r3
 800ed68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6a:	fb02 f303 	mul.w	r3, r2, r3
 800ed6e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800ed70:	e085      	b.n	800ee7e <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed78:	699b      	ldr	r3, [r3, #24]
 800ed7a:	693a      	ldr	r2, [r7, #16]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d041      	beq.n	800ee04 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed86:	799b      	ldrb	r3, [r3, #6]
 800ed88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d023      	beq.n	800edd8 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed9c:	7858      	ldrb	r0, [r3, #1]
 800ed9e:	68f9      	ldr	r1, [r7, #12]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eda6:	699a      	ldr	r2, [r3, #24]
 800eda8:	2301      	movs	r3, #1
 800edaa:	f7fc ff2f 	bl	800bc0c <disk_write>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d006      	beq.n	800edc2 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edba:	2201      	movs	r2, #1
 800edbc:	71da      	strb	r2, [r3, #7]
 800edbe:	2301      	movs	r3, #1
 800edc0:	e07a      	b.n	800eeb8 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edc8:	799b      	ldrb	r3, [r3, #6]
 800edca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edce:	b2da      	uxtb	r2, r3
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edd6:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ede4:	7858      	ldrb	r0, [r3, #1]
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	2301      	movs	r3, #1
 800edea:	693a      	ldr	r2, [r7, #16]
 800edec:	f7fc feee 	bl	800bbcc <disk_read>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d006      	beq.n	800ee04 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edfc:	2201      	movs	r2, #1
 800edfe:	71da      	strb	r2, [r3, #7]
 800ee00:	2301      	movs	r3, #1
 800ee02:	e059      	b.n	800eeb8 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee1c:	895b      	ldrh	r3, [r3, #10]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee2e:	6812      	ldr	r2, [r2, #0]
 800ee30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee34:	8952      	ldrh	r2, [r2, #10]
 800ee36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee3a:	fb01 f202 	mul.w	r2, r1, r2
 800ee3e:	1a9b      	subs	r3, r3, r2
 800ee40:	1ac3      	subs	r3, r0, r3
 800ee42:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800ee44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d901      	bls.n	800ee50 <f_read+0x360>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee5e:	6812      	ldr	r2, [r2, #0]
 800ee60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee64:	8952      	ldrh	r2, [r2, #10]
 800ee66:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee6a:	fb01 f202 	mul.w	r2, r1, r2
 800ee6e:	1a9b      	subs	r3, r3, r2
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	4413      	add	r3, r2
 800ee74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee76:	4619      	mov	r1, r3
 800ee78:	6a38      	ldr	r0, [r7, #32]
 800ee7a:	f7fc ff05 	bl	800bc88 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ee7e:	6a3a      	ldr	r2, [r7, #32]
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	4413      	add	r3, r2
 800ee84:	623b      	str	r3, [r7, #32]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee8c:	689a      	ldr	r2, [r3, #8]
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	4413      	add	r3, r2
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee98:	6093      	str	r3, [r2, #8]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	441a      	add	r2, r3
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	601a      	str	r2, [r3, #0]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f47f ae5a 	bne.w	800eb6a <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3730      	adds	r7, #48	; 0x30
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b08a      	sub	sp, #40	; 0x28
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	60b9      	str	r1, [r7, #8]
 800eeca:	607a      	str	r2, [r7, #4]
 800eecc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2200      	movs	r2, #0
 800eed6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f7ff fa6b 	bl	800e3b4 <validate>
 800eede:	4603      	mov	r3, r0
 800eee0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800eee2:	7dfb      	ldrb	r3, [r7, #23]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d001      	beq.n	800eeec <f_write+0x2c>
 800eee8:	7dfb      	ldrb	r3, [r7, #23]
 800eeea:	e21e      	b.n	800f32a <f_write+0x46a>
	if (fp->err)							/* Check error */
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eef2:	79db      	ldrb	r3, [r3, #7]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d004      	beq.n	800ef02 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eefe:	79db      	ldrb	r3, [r3, #7]
 800ef00:	e213      	b.n	800f32a <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef08:	799b      	ldrb	r3, [r3, #6]
 800ef0a:	f003 0302 	and.w	r3, r3, #2
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d101      	bne.n	800ef16 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ef12:	2307      	movs	r3, #7
 800ef14:	e209      	b.n	800f32a <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef1c:	689a      	ldr	r2, [r3, #8]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	441a      	add	r2, r3
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	f080 81d9 	bcs.w	800f2e2 <f_write+0x422>
 800ef30:	2300      	movs	r3, #0
 800ef32:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800ef34:	e1d5      	b.n	800f2e2 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	68fa      	ldr	r2, [r7, #12]
 800ef40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ef44:	6812      	ldr	r2, [r2, #0]
 800ef46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ef4a:	8952      	ldrh	r2, [r2, #10]
 800ef4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef50:	fb01 f202 	mul.w	r2, r1, r2
 800ef54:	1a9b      	subs	r3, r3, r2
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f040 8169 	bne.w	800f22e <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ef6a:	6812      	ldr	r2, [r2, #0]
 800ef6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ef70:	8952      	ldrh	r2, [r2, #10]
 800ef72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef76:	b2da      	uxtb	r2, r3
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef84:	789b      	ldrb	r3, [r3, #2]
 800ef86:	3b01      	subs	r3, #1
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800ef8e:	7dbb      	ldrb	r3, [r7, #22]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d15f      	bne.n	800f054 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d111      	bne.n	800efc4 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	2b00      	cmp	r3, #0
 800efae:	d126      	bne.n	800effe <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2100      	movs	r1, #0
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fd fcb8 	bl	800c930 <create_chain>
 800efc0:	6278      	str	r0, [r7, #36]	; 0x24
 800efc2:	e01c      	b.n	800effe <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d009      	beq.n	800efe4 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	4619      	mov	r1, r3
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f7fd fd50 	bl	800ca80 <clmt_clust>
 800efe0:	6278      	str	r0, [r7, #36]	; 0x24
 800efe2:	e00c      	b.n	800effe <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eff2:	695b      	ldr	r3, [r3, #20]
 800eff4:	4619      	mov	r1, r3
 800eff6:	4610      	mov	r0, r2
 800eff8:	f7fd fc9a 	bl	800c930 <create_chain>
 800effc:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800effe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f000:	2b00      	cmp	r3, #0
 800f002:	f000 8173 	beq.w	800f2ec <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d106      	bne.n	800f01a <f_write+0x15a>
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f012:	2202      	movs	r2, #2
 800f014:	71da      	strb	r2, [r3, #7]
 800f016:	2302      	movs	r3, #2
 800f018:	e187      	b.n	800f32a <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f020:	d106      	bne.n	800f030 <f_write+0x170>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f028:	2201      	movs	r2, #1
 800f02a:	71da      	strb	r2, [r3, #7]
 800f02c:	2301      	movs	r3, #1
 800f02e:	e17c      	b.n	800f32a <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f036:	461a      	mov	r2, r3
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03a:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d105      	bne.n	800f054 <f_write+0x194>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f04e:	461a      	mov	r2, r3
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f05a:	799b      	ldrb	r3, [r3, #6]
 800f05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f060:	2b00      	cmp	r3, #0
 800f062:	d023      	beq.n	800f0ac <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f070:	7858      	ldrb	r0, [r3, #1]
 800f072:	68f9      	ldr	r1, [r7, #12]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f07a:	699a      	ldr	r2, [r3, #24]
 800f07c:	2301      	movs	r3, #1
 800f07e:	f7fc fdc5 	bl	800bc0c <disk_write>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d006      	beq.n	800f096 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f08e:	2201      	movs	r2, #1
 800f090:	71da      	strb	r2, [r3, #7]
 800f092:	2301      	movs	r3, #1
 800f094:	e149      	b.n	800f32a <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f09c:	799b      	ldrb	r3, [r3, #6]
 800f09e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0a2:	b2da      	uxtb	r2, r3
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0aa:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0ba:	695b      	ldr	r3, [r3, #20]
 800f0bc:	4619      	mov	r1, r3
 800f0be:	4610      	mov	r0, r2
 800f0c0:	f7fd f961 	bl	800c386 <clust2sect>
 800f0c4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d106      	bne.n	800f0da <f_write+0x21a>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0d2:	2202      	movs	r2, #2
 800f0d4:	71da      	strb	r2, [r3, #7]
 800f0d6:	2302      	movs	r3, #2
 800f0d8:	e127      	b.n	800f32a <f_write+0x46a>
			sect += csect;
 800f0da:	7dbb      	ldrb	r3, [r7, #22]
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	4413      	add	r3, r2
 800f0e0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0ee:	895b      	ldrh	r3, [r3, #10]
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0f8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d069      	beq.n	800f1d4 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800f100:	7dba      	ldrb	r2, [r7, #22]
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	4413      	add	r3, r2
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f10c:	6812      	ldr	r2, [r2, #0]
 800f10e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f112:	7892      	ldrb	r2, [r2, #2]
 800f114:	4293      	cmp	r3, r2
 800f116:	d90a      	bls.n	800f12e <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f124:	789b      	ldrb	r3, [r3, #2]
 800f126:	461a      	mov	r2, r3
 800f128:	7dbb      	ldrb	r3, [r7, #22]
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f13a:	7858      	ldrb	r0, [r3, #1]
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	693a      	ldr	r2, [r7, #16]
 800f140:	69b9      	ldr	r1, [r7, #24]
 800f142:	f7fc fd63 	bl	800bc0c <disk_write>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d006      	beq.n	800f15a <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f152:	2201      	movs	r2, #1
 800f154:	71da      	strb	r2, [r3, #7]
 800f156:	2301      	movs	r3, #1
 800f158:	e0e7      	b.n	800f32a <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f160:	699a      	ldr	r2, [r3, #24]
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	69fa      	ldr	r2, [r7, #28]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d926      	bls.n	800f1ba <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f174:	699a      	ldr	r2, [r3, #24]
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	1ad3      	subs	r3, r2, r3
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f180:	6812      	ldr	r2, [r2, #0]
 800f182:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f186:	8952      	ldrh	r2, [r2, #10]
 800f188:	fb02 f303 	mul.w	r3, r2, r3
 800f18c:	69ba      	ldr	r2, [r7, #24]
 800f18e:	18d1      	adds	r1, r2, r3
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f19c:	895b      	ldrh	r3, [r3, #10]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	f7fc fd72 	bl	800bc88 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1aa:	799b      	ldrb	r3, [r3, #6]
 800f1ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1b0:	b2da      	uxtb	r2, r3
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1b8:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1c6:	895b      	ldrh	r3, [r3, #10]
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	fb02 f303 	mul.w	r3, r2, r3
 800f1d0:	623b      	str	r3, [r7, #32]
				continue;
 800f1d2:	e06e      	b.n	800f2b2 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1da:	699b      	ldr	r3, [r3, #24]
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d01f      	beq.n	800f222 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1e8:	689a      	ldr	r2, [r3, #8]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d215      	bcs.n	800f222 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f202:	7858      	ldrb	r0, [r3, #1]
 800f204:	68f9      	ldr	r1, [r7, #12]
 800f206:	2301      	movs	r3, #1
 800f208:	693a      	ldr	r2, [r7, #16]
 800f20a:	f7fc fcdf 	bl	800bbcc <disk_read>
 800f20e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800f210:	2b00      	cmp	r3, #0
 800f212:	d006      	beq.n	800f222 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f21a:	2201      	movs	r2, #1
 800f21c:	71da      	strb	r2, [r3, #7]
 800f21e:	2301      	movs	r3, #1
 800f220:	e083      	b.n	800f32a <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f228:	461a      	mov	r2, r3
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f23a:	895b      	ldrh	r3, [r3, #10]
 800f23c:	4618      	mov	r0, r3
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f24c:	6812      	ldr	r2, [r2, #0]
 800f24e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f252:	8952      	ldrh	r2, [r2, #10]
 800f254:	fbb3 f1f2 	udiv	r1, r3, r2
 800f258:	fb01 f202 	mul.w	r2, r1, r2
 800f25c:	1a9b      	subs	r3, r3, r2
 800f25e:	1ac3      	subs	r3, r0, r3
 800f260:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800f262:	6a3a      	ldr	r2, [r7, #32]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	429a      	cmp	r2, r3
 800f268:	d901      	bls.n	800f26e <f_write+0x3ae>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f274:	689b      	ldr	r3, [r3, #8]
 800f276:	68fa      	ldr	r2, [r7, #12]
 800f278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f27c:	6812      	ldr	r2, [r2, #0]
 800f27e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f282:	8952      	ldrh	r2, [r2, #10]
 800f284:	fbb3 f1f2 	udiv	r1, r3, r2
 800f288:	fb01 f202 	mul.w	r2, r1, r2
 800f28c:	1a9b      	subs	r3, r3, r2
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	4413      	add	r3, r2
 800f292:	6a3a      	ldr	r2, [r7, #32]
 800f294:	69b9      	ldr	r1, [r7, #24]
 800f296:	4618      	mov	r0, r3
 800f298:	f7fc fcf6 	bl	800bc88 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2a2:	799b      	ldrb	r3, [r3, #6]
 800f2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2a8:	b2da      	uxtb	r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2b0:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800f2b2:	69ba      	ldr	r2, [r7, #24]
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	61bb      	str	r3, [r7, #24]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2c0:	689a      	ldr	r2, [r3, #8]
 800f2c2:	6a3b      	ldr	r3, [r7, #32]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f2cc:	6093      	str	r3, [r2, #8]
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	6a3b      	ldr	r3, [r7, #32]
 800f2d4:	441a      	add	r2, r3
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	601a      	str	r2, [r3, #0]
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	6a3b      	ldr	r3, [r7, #32]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f47f ae26 	bne.w	800ef36 <f_write+0x76>
 800f2ea:	e000      	b.n	800f2ee <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f2ec:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2f4:	689a      	ldr	r2, [r3, #8]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d907      	bls.n	800f312 <f_write+0x452>
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f310:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f318:	799b      	ldrb	r3, [r3, #6]
 800f31a:	f043 0320 	orr.w	r3, r3, #32
 800f31e:	b2da      	uxtb	r2, r3
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f326:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3728      	adds	r7, #40	; 0x28
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b086      	sub	sp, #24
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7ff f83a 	bl	800e3b4 <validate>
 800f340:	4603      	mov	r3, r0
 800f342:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f344:	7dfb      	ldrb	r3, [r7, #23]
 800f346:	2b00      	cmp	r3, #0
 800f348:	f040 80bc 	bne.w	800f4c4 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f352:	799b      	ldrb	r3, [r3, #6]
 800f354:	f003 0320 	and.w	r3, r3, #32
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f000 80b3 	beq.w	800f4c4 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f364:	799b      	ldrb	r3, [r3, #6]
 800f366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d01e      	beq.n	800f3ac <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f37a:	7858      	ldrb	r0, [r3, #1]
 800f37c:	6879      	ldr	r1, [r7, #4]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f384:	699a      	ldr	r2, [r3, #24]
 800f386:	2301      	movs	r3, #1
 800f388:	f7fc fc40 	bl	800bc0c <disk_write>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d001      	beq.n	800f396 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800f392:	2301      	movs	r3, #1
 800f394:	e097      	b.n	800f4c6 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f39c:	799b      	ldrb	r3, [r3, #6]
 800f39e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3aa:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3ba:	69db      	ldr	r3, [r3, #28]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	4610      	mov	r0, r2
 800f3c0:	f7fc fef0 	bl	800c1a4 <move_window>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800f3c8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d17a      	bne.n	800f4c4 <f_sync+0x192>
				dir = fp->dir_ptr;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3d4:	6a1b      	ldr	r3, [r3, #32]
 800f3d6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	330b      	adds	r3, #11
 800f3dc:	781a      	ldrb	r2, [r3, #0]
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	330b      	adds	r3, #11
 800f3e2:	f042 0220 	orr.w	r2, r2, #32
 800f3e6:	b2d2      	uxtb	r2, r2
 800f3e8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3f0:	68da      	ldr	r2, [r3, #12]
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	331c      	adds	r3, #28
 800f3f6:	b2d2      	uxtb	r2, r2
 800f3f8:	701a      	strb	r2, [r3, #0]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	b29b      	uxth	r3, r3
 800f404:	0a1b      	lsrs	r3, r3, #8
 800f406:	b29a      	uxth	r2, r3
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	331d      	adds	r3, #29
 800f40c:	b2d2      	uxtb	r2, r2
 800f40e:	701a      	strb	r2, [r3, #0]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	0c1a      	lsrs	r2, r3, #16
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	331e      	adds	r3, #30
 800f41e:	b2d2      	uxtb	r2, r2
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	0e1a      	lsrs	r2, r3, #24
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	331f      	adds	r3, #31
 800f430:	b2d2      	uxtb	r2, r2
 800f432:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f43a:	691b      	ldr	r3, [r3, #16]
 800f43c:	4619      	mov	r1, r3
 800f43e:	6938      	ldr	r0, [r7, #16]
 800f440:	f7fd fdf4 	bl	800d02c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800f444:	f7fc fb20 	bl	800ba88 <get_fattime>
 800f448:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	3316      	adds	r3, #22
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	b2d2      	uxtb	r2, r2
 800f452:	701a      	strb	r2, [r3, #0]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	b29b      	uxth	r3, r3
 800f458:	0a1b      	lsrs	r3, r3, #8
 800f45a:	b29a      	uxth	r2, r3
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	3317      	adds	r3, #23
 800f460:	b2d2      	uxtb	r2, r2
 800f462:	701a      	strb	r2, [r3, #0]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	0c1a      	lsrs	r2, r3, #16
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	3318      	adds	r3, #24
 800f46c:	b2d2      	uxtb	r2, r2
 800f46e:	701a      	strb	r2, [r3, #0]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	0e1a      	lsrs	r2, r3, #24
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	3319      	adds	r3, #25
 800f478:	b2d2      	uxtb	r2, r2
 800f47a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	3312      	adds	r3, #18
 800f480:	2200      	movs	r2, #0
 800f482:	701a      	strb	r2, [r3, #0]
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	3313      	adds	r3, #19
 800f488:	2200      	movs	r2, #0
 800f48a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f492:	799b      	ldrb	r3, [r3, #6]
 800f494:	f023 0320 	bic.w	r3, r3, #32
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4a0:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fc fea4 	bl	800c208 <sync_fs>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800f4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3718      	adds	r7, #24
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b084      	sub	sp, #16
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7ff ff2b 	bl	800f332 <f_sync>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d119      	bne.n	800f51a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7fe ff64 	bl	800e3b4 <validate>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d111      	bne.n	800f51a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fc fd90 	bl	800c024 <dec_lock>
 800f504:	4603      	mov	r3, r0
 800f506:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f508:	7bfb      	ldrb	r3, [r7, #15]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d105      	bne.n	800f51a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f514:	461a      	mov	r2, r3
 800f516:	2300      	movs	r3, #0
 800f518:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b090      	sub	sp, #64	; 0x40
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7fe ff40 	bl	800e3b4 <validate>
 800f534:	4603      	mov	r3, r0
 800f536:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800f53a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d002      	beq.n	800f548 <f_lseek+0x24>
 800f542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f546:	e2da      	b.n	800fafe <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f54e:	79db      	ldrb	r3, [r3, #7]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d004      	beq.n	800f55e <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f55a:	79db      	ldrb	r3, [r3, #7]
 800f55c:	e2cf      	b.n	800fafe <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f566:	2b00      	cmp	r3, #0
 800f568:	f000 8124 	beq.w	800f7b4 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f572:	d16c      	bne.n	800f64e <f_lseek+0x12a>
			tbl = fp->cltbl;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f57c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f580:	1d1a      	adds	r2, r3, #4
 800f582:	627a      	str	r2, [r7, #36]	; 0x24
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	617b      	str	r3, [r7, #20]
 800f588:	2302      	movs	r3, #2
 800f58a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f592:	691b      	ldr	r3, [r3, #16]
 800f594:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d046      	beq.n	800f62a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59e:	613b      	str	r3, [r7, #16]
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a6:	3302      	adds	r3, #2
 800f5a8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	60fb      	str	r3, [r7, #12]
 800f5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fc ff06 	bl	800c3d0 <get_fat>
 800f5c4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800f5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d806      	bhi.n	800f5da <f_lseek+0xb6>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	71da      	strb	r2, [r3, #7]
 800f5d6:	2302      	movs	r3, #2
 800f5d8:	e291      	b.n	800fafe <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e0:	d106      	bne.n	800f5f0 <f_lseek+0xcc>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	71da      	strb	r2, [r3, #7]
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	e286      	b.n	800fafe <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d0d7      	beq.n	800f5aa <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f5fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d809      	bhi.n	800f616 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f604:	1d1a      	adds	r2, r3, #4
 800f606:	627a      	str	r2, [r7, #36]	; 0x24
 800f608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f60a:	601a      	str	r2, [r3, #0]
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	1d1a      	adds	r2, r3, #4
 800f610:	627a      	str	r2, [r7, #36]	; 0x24
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f626:	429a      	cmp	r2, r3
 800f628:	d3b8      	bcc.n	800f59c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f634:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800f636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d803      	bhi.n	800f646 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	2200      	movs	r2, #0
 800f642:	601a      	str	r2, [r3, #0]
 800f644:	e259      	b.n	800fafa <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f646:	2311      	movs	r3, #17
 800f648:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f64c:	e255      	b.n	800fafa <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	683a      	ldr	r2, [r7, #0]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d904      	bls.n	800f666 <f_lseek+0x142>
				ofs = fp->fsize;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f66c:	461a      	mov	r2, r3
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	f000 8240 	beq.w	800fafa <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	3b01      	subs	r3, #1
 800f67e:	4619      	mov	r1, r3
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7fd f9fd 	bl	800ca80 <clmt_clust>
 800f686:	4602      	mov	r2, r0
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f68e:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f69e:	695b      	ldr	r3, [r3, #20]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4610      	mov	r0, r2
 800f6a4:	f7fc fe6f 	bl	800c386 <clust2sect>
 800f6a8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d106      	bne.n	800f6be <f_lseek+0x19a>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6b6:	2202      	movs	r2, #2
 800f6b8:	71da      	strb	r2, [r3, #7]
 800f6ba:	2302      	movs	r3, #2
 800f6bc:	e21f      	b.n	800fafe <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6c8:	6812      	ldr	r2, [r2, #0]
 800f6ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6ce:	8952      	ldrh	r2, [r2, #10]
 800f6d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6da:	6812      	ldr	r2, [r2, #0]
 800f6dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6e0:	7892      	ldrb	r2, [r2, #2]
 800f6e2:	3a01      	subs	r2, #1
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	69ba      	ldr	r2, [r7, #24]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6fa:	6812      	ldr	r2, [r2, #0]
 800f6fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f700:	8952      	ldrh	r2, [r2, #10]
 800f702:	fbb3 f1f2 	udiv	r1, r3, r2
 800f706:	fb01 f202 	mul.w	r2, r1, r2
 800f70a:	1a9b      	subs	r3, r3, r2
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f000 81f4 	beq.w	800fafa <f_lseek+0x5d6>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	69ba      	ldr	r2, [r7, #24]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	f000 81ec 	beq.w	800fafa <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f728:	799b      	ldrb	r3, [r3, #6]
 800f72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d023      	beq.n	800f77a <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f73e:	7858      	ldrb	r0, [r3, #1]
 800f740:	6879      	ldr	r1, [r7, #4]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f748:	699a      	ldr	r2, [r3, #24]
 800f74a:	2301      	movs	r3, #1
 800f74c:	f7fc fa5e 	bl	800bc0c <disk_write>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d006      	beq.n	800f764 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f75c:	2201      	movs	r2, #1
 800f75e:	71da      	strb	r2, [r3, #7]
 800f760:	2301      	movs	r3, #1
 800f762:	e1cc      	b.n	800fafe <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f76a:	799b      	ldrb	r3, [r3, #6]
 800f76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f770:	b2da      	uxtb	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f778:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f786:	7858      	ldrb	r0, [r3, #1]
 800f788:	6879      	ldr	r1, [r7, #4]
 800f78a:	2301      	movs	r3, #1
 800f78c:	69ba      	ldr	r2, [r7, #24]
 800f78e:	f7fc fa1d 	bl	800bbcc <disk_read>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d006      	beq.n	800f7a6 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f79e:	2201      	movs	r2, #1
 800f7a0:	71da      	strb	r2, [r3, #7]
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e1ab      	b.n	800fafe <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	6193      	str	r3, [r2, #24]
 800f7b2:	e1a2      	b.n	800fafa <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	683a      	ldr	r2, [r7, #0]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d90c      	bls.n	800f7dc <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7c8:	799b      	ldrb	r3, [r3, #6]
 800f7ca:	f003 0302 	and.w	r3, r3, #2
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d104      	bne.n	800f7dc <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f4:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f000 8100 	beq.w	800f9fe <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f80a:	789b      	ldrb	r3, [r3, #2]
 800f80c:	461a      	mov	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f81a:	895b      	ldrh	r3, [r3, #10]
 800f81c:	fb02 f303 	mul.w	r3, r2, r3
 800f820:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f822:	6a3b      	ldr	r3, [r7, #32]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d021      	beq.n	800f86c <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	1e5a      	subs	r2, r3, #1
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	1e59      	subs	r1, r3, #1
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d315      	bcc.n	800f86c <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800f840:	6a3b      	ldr	r3, [r7, #32]
 800f842:	1e5a      	subs	r2, r3, #1
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	425b      	negs	r3, r3
 800f848:	4013      	ands	r3, r2
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f850:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f858:	689b      	ldr	r3, [r3, #8]
 800f85a:	683a      	ldr	r2, [r7, #0]
 800f85c:	1ad3      	subs	r3, r2, r3
 800f85e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f866:	695b      	ldr	r3, [r3, #20]
 800f868:	63bb      	str	r3, [r7, #56]	; 0x38
 800f86a:	e031      	b.n	800f8d0 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f872:	691b      	ldr	r3, [r3, #16]
 800f874:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d123      	bne.n	800f8c4 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2100      	movs	r1, #0
 800f886:	4618      	mov	r0, r3
 800f888:	f7fd f852 	bl	800c930 <create_chain>
 800f88c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800f88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f890:	2b01      	cmp	r3, #1
 800f892:	d106      	bne.n	800f8a2 <f_lseek+0x37e>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f89a:	2202      	movs	r2, #2
 800f89c:	71da      	strb	r2, [r3, #7]
 800f89e:	2302      	movs	r3, #2
 800f8a0:	e12d      	b.n	800fafe <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8a8:	d106      	bne.n	800f8b8 <f_lseek+0x394>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	71da      	strb	r2, [r3, #7]
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e122      	b.n	800fafe <f_lseek+0x5da>
					fp->sclust = clst;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8be:	461a      	mov	r2, r3
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800f8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f000 8093 	beq.w	800f9fe <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800f8d8:	e052      	b.n	800f980 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8e0:	799b      	ldrb	r3, [r3, #6]
 800f8e2:	f003 0302 	and.w	r3, r3, #2
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00e      	beq.n	800f908 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7fd f81b 	bl	800c930 <create_chain>
 800f8fa:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d10b      	bne.n	800f91a <f_lseek+0x3f6>
							ofs = bcs; break;
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	603b      	str	r3, [r7, #0]
 800f906:	e03f      	b.n	800f988 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f912:	4618      	mov	r0, r3
 800f914:	f7fc fd5c 	bl	800c3d0 <get_fat>
 800f918:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f920:	d106      	bne.n	800f930 <f_lseek+0x40c>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f928:	2201      	movs	r2, #1
 800f92a:	71da      	strb	r2, [r3, #7]
 800f92c:	2301      	movs	r3, #1
 800f92e:	e0e6      	b.n	800fafe <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	2b01      	cmp	r3, #1
 800f934:	d909      	bls.n	800f94a <f_lseek+0x426>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f942:	695b      	ldr	r3, [r3, #20]
 800f944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f946:	429a      	cmp	r2, r3
 800f948:	d306      	bcc.n	800f958 <f_lseek+0x434>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f950:	2202      	movs	r2, #2
 800f952:	71da      	strb	r2, [r3, #7]
 800f954:	2302      	movs	r3, #2
 800f956:	e0d2      	b.n	800fafe <f_lseek+0x5da>
					fp->clust = clst;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f95e:	461a      	mov	r2, r3
 800f960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f962:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f96a:	689a      	ldr	r2, [r3, #8]
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	4413      	add	r3, r2
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f976:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800f978:	683a      	ldr	r2, [r7, #0]
 800f97a:	69fb      	ldr	r3, [r7, #28]
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800f980:	683a      	ldr	r2, [r7, #0]
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	429a      	cmp	r2, r3
 800f986:	d8a8      	bhi.n	800f8da <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f98e:	689a      	ldr	r2, [r3, #8]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	4413      	add	r3, r2
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f99a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9a8:	895b      	ldrh	r3, [r3, #10]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9b2:	fb01 f202 	mul.w	r2, r1, r2
 800f9b6:	1a9b      	subs	r3, r3, r2
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d020      	beq.n	800f9fe <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fc fcdd 	bl	800c386 <clust2sect>
 800f9cc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800f9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d106      	bne.n	800f9e2 <f_lseek+0x4be>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9da:	2202      	movs	r2, #2
 800f9dc:	71da      	strb	r2, [r3, #7]
 800f9de:	2302      	movs	r3, #2
 800f9e0:	e08d      	b.n	800fafe <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9ee:	895b      	ldrh	r3, [r3, #10]
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9fa:	4413      	add	r3, r2
 800f9fc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa0c:	6812      	ldr	r2, [r2, #0]
 800fa0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa12:	8952      	ldrh	r2, [r2, #10]
 800fa14:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa18:	fb01 f202 	mul.w	r2, r1, r2
 800fa1c:	1a9b      	subs	r3, r3, r2
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d04e      	beq.n	800fac0 <f_lseek+0x59c>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa28:	699b      	ldr	r3, [r3, #24]
 800fa2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d047      	beq.n	800fac0 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa36:	799b      	ldrb	r3, [r3, #6]
 800fa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d023      	beq.n	800fa88 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa4c:	7858      	ldrb	r0, [r3, #1]
 800fa4e:	6879      	ldr	r1, [r7, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa56:	699a      	ldr	r2, [r3, #24]
 800fa58:	2301      	movs	r3, #1
 800fa5a:	f7fc f8d7 	bl	800bc0c <disk_write>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d006      	beq.n	800fa72 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	71da      	strb	r2, [r3, #7]
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e045      	b.n	800fafe <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa78:	799b      	ldrb	r3, [r3, #6]
 800fa7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa7e:	b2da      	uxtb	r2, r3
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa86:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa94:	7858      	ldrb	r0, [r3, #1]
 800fa96:	6879      	ldr	r1, [r7, #4]
 800fa98:	2301      	movs	r3, #1
 800fa9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa9c:	f7fc f896 	bl	800bbcc <disk_read>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d006      	beq.n	800fab4 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faac:	2201      	movs	r2, #1
 800faae:	71da      	strb	r2, [r3, #7]
 800fab0:	2301      	movs	r3, #1
 800fab2:	e024      	b.n	800fafe <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faba:	461a      	mov	r2, r3
 800fabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fabe:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fac6:	689a      	ldr	r2, [r3, #8]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d912      	bls.n	800fafa <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fae2:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faea:	799b      	ldrb	r3, [r3, #6]
 800faec:	f043 0320 	orr.w	r3, r3, #32
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faf8:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800fafa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3740      	adds	r7, #64	; 0x40
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	b08e      	sub	sp, #56	; 0x38
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	60f8      	str	r0, [r7, #12]
 800fb0e:	60b9      	str	r1, [r7, #8]
 800fb10:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800fb12:	f107 030c 	add.w	r3, r7, #12
 800fb16:	2200      	movs	r2, #0
 800fb18:	4619      	mov	r1, r3
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7fe f918 	bl	800dd50 <find_volume>
 800fb20:	4603      	mov	r3, r0
 800fb22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800fb2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f040 80bc 	bne.w	800fcae <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb3c:	691a      	ldr	r2, [r3, #16]
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb44:	695b      	ldr	r3, [r3, #20]
 800fb46:	3b02      	subs	r3, #2
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d806      	bhi.n	800fb5a <f_getfree+0x54>
			*nclst = fs->free_clust;
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb52:	691a      	ldr	r2, [r3, #16]
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	601a      	str	r2, [r3, #0]
 800fb58:	e0a9      	b.n	800fcae <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800fb68:	7efb      	ldrb	r3, [r7, #27]
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d126      	bne.n	800fbbc <f_getfree+0xb6>
				clst = 2;
 800fb6e:	2302      	movs	r3, #2
 800fb70:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800fb72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb74:	69f8      	ldr	r0, [r7, #28]
 800fb76:	f7fc fc2b 	bl	800c3d0 <get_fat>
 800fb7a:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb82:	d103      	bne.n	800fb8c <f_getfree+0x86>
 800fb84:	2301      	movs	r3, #1
 800fb86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb8a:	e07c      	b.n	800fc86 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d103      	bne.n	800fb9a <f_getfree+0x94>
 800fb92:	2302      	movs	r3, #2
 800fb94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb98:	e075      	b.n	800fc86 <f_getfree+0x180>
					if (stat == 0) n++;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d102      	bne.n	800fba6 <f_getfree+0xa0>
 800fba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba2:	3301      	adds	r3, #1
 800fba4:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800fba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba8:	3301      	adds	r3, #1
 800fbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbb2:	695b      	ldr	r3, [r3, #20]
 800fbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d3db      	bcc.n	800fb72 <f_getfree+0x6c>
 800fbba:	e064      	b.n	800fc86 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbcc:	6a1b      	ldr	r3, [r3, #32]
 800fbce:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	627b      	str	r3, [r7, #36]	; 0x24
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d114      	bne.n	800fc08 <f_getfree+0x102>
						res = move_window(fs, sect++);
 800fbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe0:	1c5a      	adds	r2, r3, #1
 800fbe2:	62ba      	str	r2, [r7, #40]	; 0x28
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	69f8      	ldr	r0, [r7, #28]
 800fbe8:	f7fc fadc 	bl	800c1a4 <move_window>
 800fbec:	4603      	mov	r3, r0
 800fbee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800fbf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d144      	bne.n	800fc84 <f_getfree+0x17e>
						p = fs->win.d8;
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc04:	895b      	ldrh	r3, [r3, #10]
 800fc06:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800fc08:	7efb      	ldrb	r3, [r7, #27]
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	d115      	bne.n	800fc3a <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 800fc0e:	6a3b      	ldr	r3, [r7, #32]
 800fc10:	3301      	adds	r3, #1
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	021b      	lsls	r3, r3, #8
 800fc16:	b21a      	sxth	r2, r3
 800fc18:	6a3b      	ldr	r3, [r7, #32]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	b21b      	sxth	r3, r3
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	b21b      	sxth	r3, r3
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d102      	bne.n	800fc2c <f_getfree+0x126>
 800fc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc28:	3301      	adds	r3, #1
 800fc2a:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800fc2c:	6a3b      	ldr	r3, [r7, #32]
 800fc2e:	3302      	adds	r3, #2
 800fc30:	623b      	str	r3, [r7, #32]
 800fc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc34:	3b02      	subs	r3, #2
 800fc36:	627b      	str	r3, [r7, #36]	; 0x24
 800fc38:	e01d      	b.n	800fc76 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800fc3a:	6a3b      	ldr	r3, [r7, #32]
 800fc3c:	3303      	adds	r3, #3
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	061a      	lsls	r2, r3, #24
 800fc42:	6a3b      	ldr	r3, [r7, #32]
 800fc44:	3302      	adds	r3, #2
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	041b      	lsls	r3, r3, #16
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	6a3a      	ldr	r2, [r7, #32]
 800fc4e:	3201      	adds	r2, #1
 800fc50:	7812      	ldrb	r2, [r2, #0]
 800fc52:	0212      	lsls	r2, r2, #8
 800fc54:	4313      	orrs	r3, r2
 800fc56:	6a3a      	ldr	r2, [r7, #32]
 800fc58:	7812      	ldrb	r2, [r2, #0]
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <f_getfree+0x164>
 800fc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc66:	3301      	adds	r3, #1
 800fc68:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800fc6a:	6a3b      	ldr	r3, [r7, #32]
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	623b      	str	r3, [r7, #32]
 800fc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc72:	3b04      	subs	r3, #4
 800fc74:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800fc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1aa      	bne.n	800fbd8 <f_getfree+0xd2>
 800fc82:	e000      	b.n	800fc86 <f_getfree+0x180>
						if (res != FR_OK) break;
 800fc84:	bf00      	nop
			}
			fs->free_clust = n;
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc98:	795b      	ldrb	r3, [r3, #5]
 800fc9a:	f043 0301 	orr.w	r3, r3, #1
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fca6:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcac:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800fcae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3738      	adds	r7, #56	; 0x38
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b088      	sub	sp, #32
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	60f8      	str	r0, [r7, #12]
 800fcc2:	60b9      	str	r1, [r7, #8]
 800fcc4:	607a      	str	r2, [r7, #4]
	int n = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800fcce:	e01b      	b.n	800fd08 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800fcd0:	f107 0310 	add.w	r3, r7, #16
 800fcd4:	f107 0114 	add.w	r1, r7, #20
 800fcd8:	2201      	movs	r2, #1
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7fe ff08 	bl	800eaf0 <f_read>
		if (rc != 1) break;
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d116      	bne.n	800fd14 <f_gets+0x5a>
		c = s[0];
 800fce6:	7d3b      	ldrb	r3, [r7, #20]
 800fce8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800fcea:	7dfb      	ldrb	r3, [r7, #23]
 800fcec:	2b0d      	cmp	r3, #13
 800fcee:	d100      	bne.n	800fcf2 <f_gets+0x38>
 800fcf0:	e00a      	b.n	800fd08 <f_gets+0x4e>
		*p++ = c;
 800fcf2:	69bb      	ldr	r3, [r7, #24]
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	61ba      	str	r2, [r7, #24]
 800fcf8:	7dfa      	ldrb	r2, [r7, #23]
 800fcfa:	701a      	strb	r2, [r3, #0]
		n++;
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800fd02:	7dfb      	ldrb	r3, [r7, #23]
 800fd04:	2b0a      	cmp	r3, #10
 800fd06:	d007      	beq.n	800fd18 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	3b01      	subs	r3, #1
 800fd0c:	69fa      	ldr	r2, [r7, #28]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	dbde      	blt.n	800fcd0 <f_gets+0x16>
 800fd12:	e002      	b.n	800fd1a <f_gets+0x60>
		if (rc != 1) break;
 800fd14:	bf00      	nop
 800fd16:	e000      	b.n	800fd1a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800fd18:	bf00      	nop
	}
	*p = 0;
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <f_gets+0x70>
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	e000      	b.n	800fd2c <f_gets+0x72>
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3720      	adds	r7, #32
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800fd40:	78fb      	ldrb	r3, [r7, #3]
 800fd42:	2b0a      	cmp	r3, #10
 800fd44:	d103      	bne.n	800fd4e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fd46:	210d      	movs	r1, #13
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7ff fff3 	bl	800fd34 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	db25      	blt.n	800fda6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	1c5a      	adds	r2, r3, #1
 800fd5e:	60fa      	str	r2, [r7, #12]
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	4413      	add	r3, r2
 800fd64:	78fa      	ldrb	r2, [r7, #3]
 800fd66:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b3c      	cmp	r3, #60	; 0x3c
 800fd6c:	dd12      	ble.n	800fd94 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6818      	ldr	r0, [r3, #0]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f103 010c 	add.w	r1, r3, #12
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	f107 0308 	add.w	r3, r7, #8
 800fd7e:	f7ff f89f 	bl	800eec0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d101      	bne.n	800fd8e <putc_bfd+0x5a>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	e001      	b.n	800fd92 <putc_bfd+0x5e>
 800fd8e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd92:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	609a      	str	r2, [r3, #8]
 800fda4:	e000      	b.n	800fda8 <putc_bfd+0x74>
	if (i < 0) return;
 800fda6:	bf00      	nop
}
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800fdae:	b590      	push	{r4, r7, lr}
 800fdb0:	b097      	sub	sp, #92	; 0x5c
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
 800fdb6:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	613b      	str	r3, [r7, #16]
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800fdc4:	e009      	b.n	800fdda <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	1c5a      	adds	r2, r3, #1
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	781a      	ldrb	r2, [r3, #0]
 800fdce:	f107 030c 	add.w	r3, r7, #12
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7ff ffad 	bl	800fd34 <putc_bfd>
	while (*str)			/* Put the string */
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1f1      	bne.n	800fdc6 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	db15      	blt.n	800fe14 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	461c      	mov	r4, r3
 800fdee:	f107 0208 	add.w	r2, r7, #8
 800fdf2:	f107 030c 	add.w	r3, r7, #12
 800fdf6:	f103 010c 	add.w	r1, r3, #12
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	4622      	mov	r2, r4
 800fdfe:	f7ff f85f 	bl	800eec0 <f_write>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d105      	bne.n	800fe14 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d101      	bne.n	800fe14 <f_puts+0x66>
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	e001      	b.n	800fe18 <f_puts+0x6a>
	return EOF;
 800fe14:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	375c      	adds	r7, #92	; 0x5c
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd90      	pop	{r4, r7, pc}

0800fe20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b087      	sub	sp, #28
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fe32:	2300      	movs	r3, #0
 800fe34:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800fe36:	4b1f      	ldr	r3, [pc, #124]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe38:	7a5b      	ldrb	r3, [r3, #9]
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d831      	bhi.n	800fea4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fe40:	4b1c      	ldr	r3, [pc, #112]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe42:	7a5b      	ldrb	r3, [r3, #9]
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	461a      	mov	r2, r3
 800fe48:	4b1a      	ldr	r3, [pc, #104]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe4a:	2100      	movs	r1, #0
 800fe4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800fe4e:	4b19      	ldr	r3, [pc, #100]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe50:	7a5b      	ldrb	r3, [r3, #9]
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	4a17      	ldr	r2, [pc, #92]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4413      	add	r3, r2
 800fe5a:	68fa      	ldr	r2, [r7, #12]
 800fe5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800fe5e:	4b15      	ldr	r3, [pc, #84]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe60:	7a5b      	ldrb	r3, [r3, #9]
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	461a      	mov	r2, r3
 800fe66:	4b13      	ldr	r3, [pc, #76]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe68:	4413      	add	r3, r2
 800fe6a:	79fa      	ldrb	r2, [r7, #7]
 800fe6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fe6e:	4b11      	ldr	r3, [pc, #68]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe70:	7a5b      	ldrb	r3, [r3, #9]
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	1c5a      	adds	r2, r3, #1
 800fe76:	b2d1      	uxtb	r1, r2
 800fe78:	4a0e      	ldr	r2, [pc, #56]	; (800feb4 <FATFS_LinkDriverEx+0x94>)
 800fe7a:	7251      	strb	r1, [r2, #9]
 800fe7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fe7e:	7dbb      	ldrb	r3, [r7, #22]
 800fe80:	3330      	adds	r3, #48	; 0x30
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	223a      	movs	r2, #58	; 0x3a
 800fe8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	3302      	adds	r3, #2
 800fe94:	222f      	movs	r2, #47	; 0x2f
 800fe96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	3303      	adds	r3, #3
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fea0:	2300      	movs	r3, #0
 800fea2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800fea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	371c      	adds	r7, #28
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	20002d90 	.word	0x20002d90

0800feb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fec2:	2200      	movs	r2, #0
 800fec4:	6839      	ldr	r1, [r7, #0]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff ffaa 	bl	800fe20 <FATFS_LinkDriverEx>
 800fecc:	4603      	mov	r3, r0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3708      	adds	r7, #8
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	4603      	mov	r3, r0
 800fee0:	6039      	str	r1, [r7, #0]
 800fee2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fee4:	88fb      	ldrh	r3, [r7, #6]
 800fee6:	2b7f      	cmp	r3, #127	; 0x7f
 800fee8:	d802      	bhi.n	800fef0 <ff_convert+0x18>
		c = chr;
 800feea:	88fb      	ldrh	r3, [r7, #6]
 800feec:	81fb      	strh	r3, [r7, #14]
 800feee:	e025      	b.n	800ff3c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00b      	beq.n	800ff0e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fef6:	88fb      	ldrh	r3, [r7, #6]
 800fef8:	2bff      	cmp	r3, #255	; 0xff
 800fefa:	d805      	bhi.n	800ff08 <ff_convert+0x30>
 800fefc:	88fb      	ldrh	r3, [r7, #6]
 800fefe:	3b80      	subs	r3, #128	; 0x80
 800ff00:	4a12      	ldr	r2, [pc, #72]	; (800ff4c <ff_convert+0x74>)
 800ff02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff06:	e000      	b.n	800ff0a <ff_convert+0x32>
 800ff08:	2300      	movs	r3, #0
 800ff0a:	81fb      	strh	r3, [r7, #14]
 800ff0c:	e016      	b.n	800ff3c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800ff0e:	2300      	movs	r3, #0
 800ff10:	81fb      	strh	r3, [r7, #14]
 800ff12:	e009      	b.n	800ff28 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ff14:	89fb      	ldrh	r3, [r7, #14]
 800ff16:	4a0d      	ldr	r2, [pc, #52]	; (800ff4c <ff_convert+0x74>)
 800ff18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff1c:	88fa      	ldrh	r2, [r7, #6]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d006      	beq.n	800ff30 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ff22:	89fb      	ldrh	r3, [r7, #14]
 800ff24:	3301      	adds	r3, #1
 800ff26:	81fb      	strh	r3, [r7, #14]
 800ff28:	89fb      	ldrh	r3, [r7, #14]
 800ff2a:	2b7f      	cmp	r3, #127	; 0x7f
 800ff2c:	d9f2      	bls.n	800ff14 <ff_convert+0x3c>
 800ff2e:	e000      	b.n	800ff32 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ff30:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ff32:	89fb      	ldrh	r3, [r7, #14]
 800ff34:	3380      	adds	r3, #128	; 0x80
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ff3c:	89fb      	ldrh	r3, [r7, #14]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	08014130 	.word	0x08014130

0800ff50 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	4603      	mov	r3, r0
 800ff58:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	60fb      	str	r3, [r7, #12]
 800ff5e:	e002      	b.n	800ff66 <ff_wtoupper+0x16>
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	3301      	adds	r3, #1
 800ff64:	60fb      	str	r3, [r7, #12]
 800ff66:	4a0f      	ldr	r2, [pc, #60]	; (800ffa4 <ff_wtoupper+0x54>)
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d006      	beq.n	800ff80 <ff_wtoupper+0x30>
 800ff72:	4a0c      	ldr	r2, [pc, #48]	; (800ffa4 <ff_wtoupper+0x54>)
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff7a:	88fa      	ldrh	r2, [r7, #6]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d1ef      	bne.n	800ff60 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800ff80:	4a08      	ldr	r2, [pc, #32]	; (800ffa4 <ff_wtoupper+0x54>)
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d004      	beq.n	800ff96 <ff_wtoupper+0x46>
 800ff8c:	4a06      	ldr	r2, [pc, #24]	; (800ffa8 <ff_wtoupper+0x58>)
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff94:	e000      	b.n	800ff98 <ff_wtoupper+0x48>
 800ff96:	88fb      	ldrh	r3, [r7, #6]
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3714      	adds	r7, #20
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr
 800ffa4:	08014230 	.word	0x08014230
 800ffa8:	08014410 	.word	0x08014410
 800ffac:	00000000 	.word	0x00000000

0800ffb0 <log>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	ed2d 8b02 	vpush	{d8}
 800ffb6:	ec55 4b10 	vmov	r4, r5, d0
 800ffba:	f000 f839 	bl	8010030 <__ieee754_log>
 800ffbe:	4622      	mov	r2, r4
 800ffc0:	462b      	mov	r3, r5
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	eeb0 8a40 	vmov.f32	s16, s0
 800ffca:	eef0 8a60 	vmov.f32	s17, s1
 800ffce:	f7f0 fdad 	bl	8000b2c <__aeabi_dcmpun>
 800ffd2:	b998      	cbnz	r0, 800fffc <log+0x4c>
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	4620      	mov	r0, r4
 800ffda:	4629      	mov	r1, r5
 800ffdc:	f7f0 fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 800ffe0:	b960      	cbnz	r0, 800fffc <log+0x4c>
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	4629      	mov	r1, r5
 800ffea:	f7f0 fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffee:	b160      	cbz	r0, 801000a <log+0x5a>
 800fff0:	f000 f9e2 	bl	80103b8 <__errno>
 800fff4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8010020 <log+0x70>
 800fff8:	2322      	movs	r3, #34	; 0x22
 800fffa:	6003      	str	r3, [r0, #0]
 800fffc:	eeb0 0a48 	vmov.f32	s0, s16
 8010000:	eef0 0a68 	vmov.f32	s1, s17
 8010004:	ecbd 8b02 	vpop	{d8}
 8010008:	bd38      	pop	{r3, r4, r5, pc}
 801000a:	f000 f9d5 	bl	80103b8 <__errno>
 801000e:	ecbd 8b02 	vpop	{d8}
 8010012:	2321      	movs	r3, #33	; 0x21
 8010014:	6003      	str	r3, [r0, #0]
 8010016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801001a:	4803      	ldr	r0, [pc, #12]	; (8010028 <log+0x78>)
 801001c:	f000 b9c4 	b.w	80103a8 <nan>
 8010020:	00000000 	.word	0x00000000
 8010024:	fff00000 	.word	0xfff00000
 8010028:	08014860 	.word	0x08014860
 801002c:	00000000 	.word	0x00000000

08010030 <__ieee754_log>:
 8010030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010034:	ec51 0b10 	vmov	r0, r1, d0
 8010038:	ed2d 8b04 	vpush	{d8-d9}
 801003c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010040:	b083      	sub	sp, #12
 8010042:	460d      	mov	r5, r1
 8010044:	da29      	bge.n	801009a <__ieee754_log+0x6a>
 8010046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801004a:	4303      	orrs	r3, r0
 801004c:	ee10 2a10 	vmov	r2, s0
 8010050:	d10c      	bne.n	801006c <__ieee754_log+0x3c>
 8010052:	49cf      	ldr	r1, [pc, #828]	; (8010390 <__ieee754_log+0x360>)
 8010054:	2200      	movs	r2, #0
 8010056:	2300      	movs	r3, #0
 8010058:	2000      	movs	r0, #0
 801005a:	f7f0 fbf7 	bl	800084c <__aeabi_ddiv>
 801005e:	ec41 0b10 	vmov	d0, r0, r1
 8010062:	b003      	add	sp, #12
 8010064:	ecbd 8b04 	vpop	{d8-d9}
 8010068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006c:	2900      	cmp	r1, #0
 801006e:	da05      	bge.n	801007c <__ieee754_log+0x4c>
 8010070:	460b      	mov	r3, r1
 8010072:	f7f0 f909 	bl	8000288 <__aeabi_dsub>
 8010076:	2200      	movs	r2, #0
 8010078:	2300      	movs	r3, #0
 801007a:	e7ee      	b.n	801005a <__ieee754_log+0x2a>
 801007c:	4bc5      	ldr	r3, [pc, #788]	; (8010394 <__ieee754_log+0x364>)
 801007e:	2200      	movs	r2, #0
 8010080:	f7f0 faba 	bl	80005f8 <__aeabi_dmul>
 8010084:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010088:	460d      	mov	r5, r1
 801008a:	4ac3      	ldr	r2, [pc, #780]	; (8010398 <__ieee754_log+0x368>)
 801008c:	4295      	cmp	r5, r2
 801008e:	dd06      	ble.n	801009e <__ieee754_log+0x6e>
 8010090:	4602      	mov	r2, r0
 8010092:	460b      	mov	r3, r1
 8010094:	f7f0 f8fa 	bl	800028c <__adddf3>
 8010098:	e7e1      	b.n	801005e <__ieee754_log+0x2e>
 801009a:	2300      	movs	r3, #0
 801009c:	e7f5      	b.n	801008a <__ieee754_log+0x5a>
 801009e:	152c      	asrs	r4, r5, #20
 80100a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80100a4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80100a8:	441c      	add	r4, r3
 80100aa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80100ae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80100b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80100b6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80100ba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80100be:	ea42 0105 	orr.w	r1, r2, r5
 80100c2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80100c6:	2200      	movs	r2, #0
 80100c8:	4bb4      	ldr	r3, [pc, #720]	; (801039c <__ieee754_log+0x36c>)
 80100ca:	f7f0 f8dd 	bl	8000288 <__aeabi_dsub>
 80100ce:	1cab      	adds	r3, r5, #2
 80100d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100d4:	2b02      	cmp	r3, #2
 80100d6:	4682      	mov	sl, r0
 80100d8:	468b      	mov	fp, r1
 80100da:	f04f 0200 	mov.w	r2, #0
 80100de:	dc53      	bgt.n	8010188 <__ieee754_log+0x158>
 80100e0:	2300      	movs	r3, #0
 80100e2:	f7f0 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80100e6:	b1d0      	cbz	r0, 801011e <__ieee754_log+0xee>
 80100e8:	2c00      	cmp	r4, #0
 80100ea:	f000 8122 	beq.w	8010332 <__ieee754_log+0x302>
 80100ee:	4620      	mov	r0, r4
 80100f0:	f7f0 fa18 	bl	8000524 <__aeabi_i2d>
 80100f4:	a390      	add	r3, pc, #576	; (adr r3, 8010338 <__ieee754_log+0x308>)
 80100f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fa:	4606      	mov	r6, r0
 80100fc:	460f      	mov	r7, r1
 80100fe:	f7f0 fa7b 	bl	80005f8 <__aeabi_dmul>
 8010102:	a38f      	add	r3, pc, #572	; (adr r3, 8010340 <__ieee754_log+0x310>)
 8010104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010108:	4604      	mov	r4, r0
 801010a:	460d      	mov	r5, r1
 801010c:	4630      	mov	r0, r6
 801010e:	4639      	mov	r1, r7
 8010110:	f7f0 fa72 	bl	80005f8 <__aeabi_dmul>
 8010114:	4602      	mov	r2, r0
 8010116:	460b      	mov	r3, r1
 8010118:	4620      	mov	r0, r4
 801011a:	4629      	mov	r1, r5
 801011c:	e7ba      	b.n	8010094 <__ieee754_log+0x64>
 801011e:	a38a      	add	r3, pc, #552	; (adr r3, 8010348 <__ieee754_log+0x318>)
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	4650      	mov	r0, sl
 8010126:	4659      	mov	r1, fp
 8010128:	f7f0 fa66 	bl	80005f8 <__aeabi_dmul>
 801012c:	4602      	mov	r2, r0
 801012e:	460b      	mov	r3, r1
 8010130:	2000      	movs	r0, #0
 8010132:	499b      	ldr	r1, [pc, #620]	; (80103a0 <__ieee754_log+0x370>)
 8010134:	f7f0 f8a8 	bl	8000288 <__aeabi_dsub>
 8010138:	4652      	mov	r2, sl
 801013a:	4606      	mov	r6, r0
 801013c:	460f      	mov	r7, r1
 801013e:	465b      	mov	r3, fp
 8010140:	4650      	mov	r0, sl
 8010142:	4659      	mov	r1, fp
 8010144:	f7f0 fa58 	bl	80005f8 <__aeabi_dmul>
 8010148:	4602      	mov	r2, r0
 801014a:	460b      	mov	r3, r1
 801014c:	4630      	mov	r0, r6
 801014e:	4639      	mov	r1, r7
 8010150:	f7f0 fa52 	bl	80005f8 <__aeabi_dmul>
 8010154:	4606      	mov	r6, r0
 8010156:	460f      	mov	r7, r1
 8010158:	b914      	cbnz	r4, 8010160 <__ieee754_log+0x130>
 801015a:	4632      	mov	r2, r6
 801015c:	463b      	mov	r3, r7
 801015e:	e0a2      	b.n	80102a6 <__ieee754_log+0x276>
 8010160:	4620      	mov	r0, r4
 8010162:	f7f0 f9df 	bl	8000524 <__aeabi_i2d>
 8010166:	a374      	add	r3, pc, #464	; (adr r3, 8010338 <__ieee754_log+0x308>)
 8010168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016c:	4680      	mov	r8, r0
 801016e:	4689      	mov	r9, r1
 8010170:	f7f0 fa42 	bl	80005f8 <__aeabi_dmul>
 8010174:	a372      	add	r3, pc, #456	; (adr r3, 8010340 <__ieee754_log+0x310>)
 8010176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017a:	4604      	mov	r4, r0
 801017c:	460d      	mov	r5, r1
 801017e:	4640      	mov	r0, r8
 8010180:	4649      	mov	r1, r9
 8010182:	f7f0 fa39 	bl	80005f8 <__aeabi_dmul>
 8010186:	e0a7      	b.n	80102d8 <__ieee754_log+0x2a8>
 8010188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801018c:	f7f0 f87e 	bl	800028c <__adddf3>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	4650      	mov	r0, sl
 8010196:	4659      	mov	r1, fp
 8010198:	f7f0 fb58 	bl	800084c <__aeabi_ddiv>
 801019c:	ec41 0b18 	vmov	d8, r0, r1
 80101a0:	4620      	mov	r0, r4
 80101a2:	f7f0 f9bf 	bl	8000524 <__aeabi_i2d>
 80101a6:	ec53 2b18 	vmov	r2, r3, d8
 80101aa:	ec41 0b19 	vmov	d9, r0, r1
 80101ae:	ec51 0b18 	vmov	r0, r1, d8
 80101b2:	f7f0 fa21 	bl	80005f8 <__aeabi_dmul>
 80101b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80101ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80101be:	9301      	str	r3, [sp, #4]
 80101c0:	4602      	mov	r2, r0
 80101c2:	460b      	mov	r3, r1
 80101c4:	4680      	mov	r8, r0
 80101c6:	4689      	mov	r9, r1
 80101c8:	f7f0 fa16 	bl	80005f8 <__aeabi_dmul>
 80101cc:	a360      	add	r3, pc, #384	; (adr r3, 8010350 <__ieee754_log+0x320>)
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	4606      	mov	r6, r0
 80101d4:	460f      	mov	r7, r1
 80101d6:	f7f0 fa0f 	bl	80005f8 <__aeabi_dmul>
 80101da:	a35f      	add	r3, pc, #380	; (adr r3, 8010358 <__ieee754_log+0x328>)
 80101dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e0:	f7f0 f854 	bl	800028c <__adddf3>
 80101e4:	4632      	mov	r2, r6
 80101e6:	463b      	mov	r3, r7
 80101e8:	f7f0 fa06 	bl	80005f8 <__aeabi_dmul>
 80101ec:	a35c      	add	r3, pc, #368	; (adr r3, 8010360 <__ieee754_log+0x330>)
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	f7f0 f84b 	bl	800028c <__adddf3>
 80101f6:	4632      	mov	r2, r6
 80101f8:	463b      	mov	r3, r7
 80101fa:	f7f0 f9fd 	bl	80005f8 <__aeabi_dmul>
 80101fe:	a35a      	add	r3, pc, #360	; (adr r3, 8010368 <__ieee754_log+0x338>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7f0 f842 	bl	800028c <__adddf3>
 8010208:	4642      	mov	r2, r8
 801020a:	464b      	mov	r3, r9
 801020c:	f7f0 f9f4 	bl	80005f8 <__aeabi_dmul>
 8010210:	a357      	add	r3, pc, #348	; (adr r3, 8010370 <__ieee754_log+0x340>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	4680      	mov	r8, r0
 8010218:	4689      	mov	r9, r1
 801021a:	4630      	mov	r0, r6
 801021c:	4639      	mov	r1, r7
 801021e:	f7f0 f9eb 	bl	80005f8 <__aeabi_dmul>
 8010222:	a355      	add	r3, pc, #340	; (adr r3, 8010378 <__ieee754_log+0x348>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	f7f0 f830 	bl	800028c <__adddf3>
 801022c:	4632      	mov	r2, r6
 801022e:	463b      	mov	r3, r7
 8010230:	f7f0 f9e2 	bl	80005f8 <__aeabi_dmul>
 8010234:	a352      	add	r3, pc, #328	; (adr r3, 8010380 <__ieee754_log+0x350>)
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	f7f0 f827 	bl	800028c <__adddf3>
 801023e:	4632      	mov	r2, r6
 8010240:	463b      	mov	r3, r7
 8010242:	f7f0 f9d9 	bl	80005f8 <__aeabi_dmul>
 8010246:	460b      	mov	r3, r1
 8010248:	4602      	mov	r2, r0
 801024a:	4649      	mov	r1, r9
 801024c:	4640      	mov	r0, r8
 801024e:	f7f0 f81d 	bl	800028c <__adddf3>
 8010252:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010256:	9b01      	ldr	r3, [sp, #4]
 8010258:	3551      	adds	r5, #81	; 0x51
 801025a:	431d      	orrs	r5, r3
 801025c:	2d00      	cmp	r5, #0
 801025e:	4680      	mov	r8, r0
 8010260:	4689      	mov	r9, r1
 8010262:	dd48      	ble.n	80102f6 <__ieee754_log+0x2c6>
 8010264:	4b4e      	ldr	r3, [pc, #312]	; (80103a0 <__ieee754_log+0x370>)
 8010266:	2200      	movs	r2, #0
 8010268:	4650      	mov	r0, sl
 801026a:	4659      	mov	r1, fp
 801026c:	f7f0 f9c4 	bl	80005f8 <__aeabi_dmul>
 8010270:	4652      	mov	r2, sl
 8010272:	465b      	mov	r3, fp
 8010274:	f7f0 f9c0 	bl	80005f8 <__aeabi_dmul>
 8010278:	4602      	mov	r2, r0
 801027a:	460b      	mov	r3, r1
 801027c:	4606      	mov	r6, r0
 801027e:	460f      	mov	r7, r1
 8010280:	4640      	mov	r0, r8
 8010282:	4649      	mov	r1, r9
 8010284:	f7f0 f802 	bl	800028c <__adddf3>
 8010288:	ec53 2b18 	vmov	r2, r3, d8
 801028c:	f7f0 f9b4 	bl	80005f8 <__aeabi_dmul>
 8010290:	4680      	mov	r8, r0
 8010292:	4689      	mov	r9, r1
 8010294:	b964      	cbnz	r4, 80102b0 <__ieee754_log+0x280>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4630      	mov	r0, r6
 801029c:	4639      	mov	r1, r7
 801029e:	f7ef fff3 	bl	8000288 <__aeabi_dsub>
 80102a2:	4602      	mov	r2, r0
 80102a4:	460b      	mov	r3, r1
 80102a6:	4650      	mov	r0, sl
 80102a8:	4659      	mov	r1, fp
 80102aa:	f7ef ffed 	bl	8000288 <__aeabi_dsub>
 80102ae:	e6d6      	b.n	801005e <__ieee754_log+0x2e>
 80102b0:	a321      	add	r3, pc, #132	; (adr r3, 8010338 <__ieee754_log+0x308>)
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	ec51 0b19 	vmov	r0, r1, d9
 80102ba:	f7f0 f99d 	bl	80005f8 <__aeabi_dmul>
 80102be:	a320      	add	r3, pc, #128	; (adr r3, 8010340 <__ieee754_log+0x310>)
 80102c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c4:	4604      	mov	r4, r0
 80102c6:	460d      	mov	r5, r1
 80102c8:	ec51 0b19 	vmov	r0, r1, d9
 80102cc:	f7f0 f994 	bl	80005f8 <__aeabi_dmul>
 80102d0:	4642      	mov	r2, r8
 80102d2:	464b      	mov	r3, r9
 80102d4:	f7ef ffda 	bl	800028c <__adddf3>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4630      	mov	r0, r6
 80102de:	4639      	mov	r1, r7
 80102e0:	f7ef ffd2 	bl	8000288 <__aeabi_dsub>
 80102e4:	4652      	mov	r2, sl
 80102e6:	465b      	mov	r3, fp
 80102e8:	f7ef ffce 	bl	8000288 <__aeabi_dsub>
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	4620      	mov	r0, r4
 80102f2:	4629      	mov	r1, r5
 80102f4:	e7d9      	b.n	80102aa <__ieee754_log+0x27a>
 80102f6:	4602      	mov	r2, r0
 80102f8:	460b      	mov	r3, r1
 80102fa:	4650      	mov	r0, sl
 80102fc:	4659      	mov	r1, fp
 80102fe:	f7ef ffc3 	bl	8000288 <__aeabi_dsub>
 8010302:	ec53 2b18 	vmov	r2, r3, d8
 8010306:	f7f0 f977 	bl	80005f8 <__aeabi_dmul>
 801030a:	4606      	mov	r6, r0
 801030c:	460f      	mov	r7, r1
 801030e:	2c00      	cmp	r4, #0
 8010310:	f43f af23 	beq.w	801015a <__ieee754_log+0x12a>
 8010314:	a308      	add	r3, pc, #32	; (adr r3, 8010338 <__ieee754_log+0x308>)
 8010316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031a:	ec51 0b19 	vmov	r0, r1, d9
 801031e:	f7f0 f96b 	bl	80005f8 <__aeabi_dmul>
 8010322:	a307      	add	r3, pc, #28	; (adr r3, 8010340 <__ieee754_log+0x310>)
 8010324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010328:	4604      	mov	r4, r0
 801032a:	460d      	mov	r5, r1
 801032c:	ec51 0b19 	vmov	r0, r1, d9
 8010330:	e727      	b.n	8010182 <__ieee754_log+0x152>
 8010332:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010388 <__ieee754_log+0x358>
 8010336:	e694      	b.n	8010062 <__ieee754_log+0x32>
 8010338:	fee00000 	.word	0xfee00000
 801033c:	3fe62e42 	.word	0x3fe62e42
 8010340:	35793c76 	.word	0x35793c76
 8010344:	3dea39ef 	.word	0x3dea39ef
 8010348:	55555555 	.word	0x55555555
 801034c:	3fd55555 	.word	0x3fd55555
 8010350:	df3e5244 	.word	0xdf3e5244
 8010354:	3fc2f112 	.word	0x3fc2f112
 8010358:	96cb03de 	.word	0x96cb03de
 801035c:	3fc74664 	.word	0x3fc74664
 8010360:	94229359 	.word	0x94229359
 8010364:	3fd24924 	.word	0x3fd24924
 8010368:	55555593 	.word	0x55555593
 801036c:	3fe55555 	.word	0x3fe55555
 8010370:	d078c69f 	.word	0xd078c69f
 8010374:	3fc39a09 	.word	0x3fc39a09
 8010378:	1d8e78af 	.word	0x1d8e78af
 801037c:	3fcc71c5 	.word	0x3fcc71c5
 8010380:	9997fa04 	.word	0x9997fa04
 8010384:	3fd99999 	.word	0x3fd99999
	...
 8010390:	c3500000 	.word	0xc3500000
 8010394:	43500000 	.word	0x43500000
 8010398:	7fefffff 	.word	0x7fefffff
 801039c:	3ff00000 	.word	0x3ff00000
 80103a0:	3fe00000 	.word	0x3fe00000
 80103a4:	00000000 	.word	0x00000000

080103a8 <nan>:
 80103a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80103b0 <nan+0x8>
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	00000000 	.word	0x00000000
 80103b4:	7ff80000 	.word	0x7ff80000

080103b8 <__errno>:
 80103b8:	4b01      	ldr	r3, [pc, #4]	; (80103c0 <__errno+0x8>)
 80103ba:	6818      	ldr	r0, [r3, #0]
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	20000024 	.word	0x20000024

080103c4 <__libc_init_array>:
 80103c4:	b570      	push	{r4, r5, r6, lr}
 80103c6:	4d0d      	ldr	r5, [pc, #52]	; (80103fc <__libc_init_array+0x38>)
 80103c8:	4c0d      	ldr	r4, [pc, #52]	; (8010400 <__libc_init_array+0x3c>)
 80103ca:	1b64      	subs	r4, r4, r5
 80103cc:	10a4      	asrs	r4, r4, #2
 80103ce:	2600      	movs	r6, #0
 80103d0:	42a6      	cmp	r6, r4
 80103d2:	d109      	bne.n	80103e8 <__libc_init_array+0x24>
 80103d4:	4d0b      	ldr	r5, [pc, #44]	; (8010404 <__libc_init_array+0x40>)
 80103d6:	4c0c      	ldr	r4, [pc, #48]	; (8010408 <__libc_init_array+0x44>)
 80103d8:	f002 ff0c 	bl	80131f4 <_init>
 80103dc:	1b64      	subs	r4, r4, r5
 80103de:	10a4      	asrs	r4, r4, #2
 80103e0:	2600      	movs	r6, #0
 80103e2:	42a6      	cmp	r6, r4
 80103e4:	d105      	bne.n	80103f2 <__libc_init_array+0x2e>
 80103e6:	bd70      	pop	{r4, r5, r6, pc}
 80103e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80103ec:	4798      	blx	r3
 80103ee:	3601      	adds	r6, #1
 80103f0:	e7ee      	b.n	80103d0 <__libc_init_array+0xc>
 80103f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80103f6:	4798      	blx	r3
 80103f8:	3601      	adds	r6, #1
 80103fa:	e7f2      	b.n	80103e2 <__libc_init_array+0x1e>
 80103fc:	080149cc 	.word	0x080149cc
 8010400:	080149cc 	.word	0x080149cc
 8010404:	080149cc 	.word	0x080149cc
 8010408:	080149d0 	.word	0x080149d0

0801040c <malloc>:
 801040c:	4b02      	ldr	r3, [pc, #8]	; (8010418 <malloc+0xc>)
 801040e:	4601      	mov	r1, r0
 8010410:	6818      	ldr	r0, [r3, #0]
 8010412:	f000 b88d 	b.w	8010530 <_malloc_r>
 8010416:	bf00      	nop
 8010418:	20000024 	.word	0x20000024

0801041c <free>:
 801041c:	4b02      	ldr	r3, [pc, #8]	; (8010428 <free+0xc>)
 801041e:	4601      	mov	r1, r0
 8010420:	6818      	ldr	r0, [r3, #0]
 8010422:	f000 b819 	b.w	8010458 <_free_r>
 8010426:	bf00      	nop
 8010428:	20000024 	.word	0x20000024

0801042c <memcpy>:
 801042c:	440a      	add	r2, r1
 801042e:	4291      	cmp	r1, r2
 8010430:	f100 33ff 	add.w	r3, r0, #4294967295
 8010434:	d100      	bne.n	8010438 <memcpy+0xc>
 8010436:	4770      	bx	lr
 8010438:	b510      	push	{r4, lr}
 801043a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801043e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010442:	4291      	cmp	r1, r2
 8010444:	d1f9      	bne.n	801043a <memcpy+0xe>
 8010446:	bd10      	pop	{r4, pc}

08010448 <memset>:
 8010448:	4402      	add	r2, r0
 801044a:	4603      	mov	r3, r0
 801044c:	4293      	cmp	r3, r2
 801044e:	d100      	bne.n	8010452 <memset+0xa>
 8010450:	4770      	bx	lr
 8010452:	f803 1b01 	strb.w	r1, [r3], #1
 8010456:	e7f9      	b.n	801044c <memset+0x4>

08010458 <_free_r>:
 8010458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801045a:	2900      	cmp	r1, #0
 801045c:	d044      	beq.n	80104e8 <_free_r+0x90>
 801045e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010462:	9001      	str	r0, [sp, #4]
 8010464:	2b00      	cmp	r3, #0
 8010466:	f1a1 0404 	sub.w	r4, r1, #4
 801046a:	bfb8      	it	lt
 801046c:	18e4      	addlt	r4, r4, r3
 801046e:	f001 fbed 	bl	8011c4c <__malloc_lock>
 8010472:	4a1e      	ldr	r2, [pc, #120]	; (80104ec <_free_r+0x94>)
 8010474:	9801      	ldr	r0, [sp, #4]
 8010476:	6813      	ldr	r3, [r2, #0]
 8010478:	b933      	cbnz	r3, 8010488 <_free_r+0x30>
 801047a:	6063      	str	r3, [r4, #4]
 801047c:	6014      	str	r4, [r2, #0]
 801047e:	b003      	add	sp, #12
 8010480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010484:	f001 bbe8 	b.w	8011c58 <__malloc_unlock>
 8010488:	42a3      	cmp	r3, r4
 801048a:	d908      	bls.n	801049e <_free_r+0x46>
 801048c:	6825      	ldr	r5, [r4, #0]
 801048e:	1961      	adds	r1, r4, r5
 8010490:	428b      	cmp	r3, r1
 8010492:	bf01      	itttt	eq
 8010494:	6819      	ldreq	r1, [r3, #0]
 8010496:	685b      	ldreq	r3, [r3, #4]
 8010498:	1949      	addeq	r1, r1, r5
 801049a:	6021      	streq	r1, [r4, #0]
 801049c:	e7ed      	b.n	801047a <_free_r+0x22>
 801049e:	461a      	mov	r2, r3
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	b10b      	cbz	r3, 80104a8 <_free_r+0x50>
 80104a4:	42a3      	cmp	r3, r4
 80104a6:	d9fa      	bls.n	801049e <_free_r+0x46>
 80104a8:	6811      	ldr	r1, [r2, #0]
 80104aa:	1855      	adds	r5, r2, r1
 80104ac:	42a5      	cmp	r5, r4
 80104ae:	d10b      	bne.n	80104c8 <_free_r+0x70>
 80104b0:	6824      	ldr	r4, [r4, #0]
 80104b2:	4421      	add	r1, r4
 80104b4:	1854      	adds	r4, r2, r1
 80104b6:	42a3      	cmp	r3, r4
 80104b8:	6011      	str	r1, [r2, #0]
 80104ba:	d1e0      	bne.n	801047e <_free_r+0x26>
 80104bc:	681c      	ldr	r4, [r3, #0]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	6053      	str	r3, [r2, #4]
 80104c2:	4421      	add	r1, r4
 80104c4:	6011      	str	r1, [r2, #0]
 80104c6:	e7da      	b.n	801047e <_free_r+0x26>
 80104c8:	d902      	bls.n	80104d0 <_free_r+0x78>
 80104ca:	230c      	movs	r3, #12
 80104cc:	6003      	str	r3, [r0, #0]
 80104ce:	e7d6      	b.n	801047e <_free_r+0x26>
 80104d0:	6825      	ldr	r5, [r4, #0]
 80104d2:	1961      	adds	r1, r4, r5
 80104d4:	428b      	cmp	r3, r1
 80104d6:	bf04      	itt	eq
 80104d8:	6819      	ldreq	r1, [r3, #0]
 80104da:	685b      	ldreq	r3, [r3, #4]
 80104dc:	6063      	str	r3, [r4, #4]
 80104de:	bf04      	itt	eq
 80104e0:	1949      	addeq	r1, r1, r5
 80104e2:	6021      	streq	r1, [r4, #0]
 80104e4:	6054      	str	r4, [r2, #4]
 80104e6:	e7ca      	b.n	801047e <_free_r+0x26>
 80104e8:	b003      	add	sp, #12
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	20002d9c 	.word	0x20002d9c

080104f0 <sbrk_aligned>:
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	4e0e      	ldr	r6, [pc, #56]	; (801052c <sbrk_aligned+0x3c>)
 80104f4:	460c      	mov	r4, r1
 80104f6:	6831      	ldr	r1, [r6, #0]
 80104f8:	4605      	mov	r5, r0
 80104fa:	b911      	cbnz	r1, 8010502 <sbrk_aligned+0x12>
 80104fc:	f000 fcf6 	bl	8010eec <_sbrk_r>
 8010500:	6030      	str	r0, [r6, #0]
 8010502:	4621      	mov	r1, r4
 8010504:	4628      	mov	r0, r5
 8010506:	f000 fcf1 	bl	8010eec <_sbrk_r>
 801050a:	1c43      	adds	r3, r0, #1
 801050c:	d00a      	beq.n	8010524 <sbrk_aligned+0x34>
 801050e:	1cc4      	adds	r4, r0, #3
 8010510:	f024 0403 	bic.w	r4, r4, #3
 8010514:	42a0      	cmp	r0, r4
 8010516:	d007      	beq.n	8010528 <sbrk_aligned+0x38>
 8010518:	1a21      	subs	r1, r4, r0
 801051a:	4628      	mov	r0, r5
 801051c:	f000 fce6 	bl	8010eec <_sbrk_r>
 8010520:	3001      	adds	r0, #1
 8010522:	d101      	bne.n	8010528 <sbrk_aligned+0x38>
 8010524:	f04f 34ff 	mov.w	r4, #4294967295
 8010528:	4620      	mov	r0, r4
 801052a:	bd70      	pop	{r4, r5, r6, pc}
 801052c:	20002da0 	.word	0x20002da0

08010530 <_malloc_r>:
 8010530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010534:	1ccd      	adds	r5, r1, #3
 8010536:	f025 0503 	bic.w	r5, r5, #3
 801053a:	3508      	adds	r5, #8
 801053c:	2d0c      	cmp	r5, #12
 801053e:	bf38      	it	cc
 8010540:	250c      	movcc	r5, #12
 8010542:	2d00      	cmp	r5, #0
 8010544:	4607      	mov	r7, r0
 8010546:	db01      	blt.n	801054c <_malloc_r+0x1c>
 8010548:	42a9      	cmp	r1, r5
 801054a:	d905      	bls.n	8010558 <_malloc_r+0x28>
 801054c:	230c      	movs	r3, #12
 801054e:	603b      	str	r3, [r7, #0]
 8010550:	2600      	movs	r6, #0
 8010552:	4630      	mov	r0, r6
 8010554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010558:	4e2e      	ldr	r6, [pc, #184]	; (8010614 <_malloc_r+0xe4>)
 801055a:	f001 fb77 	bl	8011c4c <__malloc_lock>
 801055e:	6833      	ldr	r3, [r6, #0]
 8010560:	461c      	mov	r4, r3
 8010562:	bb34      	cbnz	r4, 80105b2 <_malloc_r+0x82>
 8010564:	4629      	mov	r1, r5
 8010566:	4638      	mov	r0, r7
 8010568:	f7ff ffc2 	bl	80104f0 <sbrk_aligned>
 801056c:	1c43      	adds	r3, r0, #1
 801056e:	4604      	mov	r4, r0
 8010570:	d14d      	bne.n	801060e <_malloc_r+0xde>
 8010572:	6834      	ldr	r4, [r6, #0]
 8010574:	4626      	mov	r6, r4
 8010576:	2e00      	cmp	r6, #0
 8010578:	d140      	bne.n	80105fc <_malloc_r+0xcc>
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	4631      	mov	r1, r6
 801057e:	4638      	mov	r0, r7
 8010580:	eb04 0803 	add.w	r8, r4, r3
 8010584:	f000 fcb2 	bl	8010eec <_sbrk_r>
 8010588:	4580      	cmp	r8, r0
 801058a:	d13a      	bne.n	8010602 <_malloc_r+0xd2>
 801058c:	6821      	ldr	r1, [r4, #0]
 801058e:	3503      	adds	r5, #3
 8010590:	1a6d      	subs	r5, r5, r1
 8010592:	f025 0503 	bic.w	r5, r5, #3
 8010596:	3508      	adds	r5, #8
 8010598:	2d0c      	cmp	r5, #12
 801059a:	bf38      	it	cc
 801059c:	250c      	movcc	r5, #12
 801059e:	4629      	mov	r1, r5
 80105a0:	4638      	mov	r0, r7
 80105a2:	f7ff ffa5 	bl	80104f0 <sbrk_aligned>
 80105a6:	3001      	adds	r0, #1
 80105a8:	d02b      	beq.n	8010602 <_malloc_r+0xd2>
 80105aa:	6823      	ldr	r3, [r4, #0]
 80105ac:	442b      	add	r3, r5
 80105ae:	6023      	str	r3, [r4, #0]
 80105b0:	e00e      	b.n	80105d0 <_malloc_r+0xa0>
 80105b2:	6822      	ldr	r2, [r4, #0]
 80105b4:	1b52      	subs	r2, r2, r5
 80105b6:	d41e      	bmi.n	80105f6 <_malloc_r+0xc6>
 80105b8:	2a0b      	cmp	r2, #11
 80105ba:	d916      	bls.n	80105ea <_malloc_r+0xba>
 80105bc:	1961      	adds	r1, r4, r5
 80105be:	42a3      	cmp	r3, r4
 80105c0:	6025      	str	r5, [r4, #0]
 80105c2:	bf18      	it	ne
 80105c4:	6059      	strne	r1, [r3, #4]
 80105c6:	6863      	ldr	r3, [r4, #4]
 80105c8:	bf08      	it	eq
 80105ca:	6031      	streq	r1, [r6, #0]
 80105cc:	5162      	str	r2, [r4, r5]
 80105ce:	604b      	str	r3, [r1, #4]
 80105d0:	4638      	mov	r0, r7
 80105d2:	f104 060b 	add.w	r6, r4, #11
 80105d6:	f001 fb3f 	bl	8011c58 <__malloc_unlock>
 80105da:	f026 0607 	bic.w	r6, r6, #7
 80105de:	1d23      	adds	r3, r4, #4
 80105e0:	1af2      	subs	r2, r6, r3
 80105e2:	d0b6      	beq.n	8010552 <_malloc_r+0x22>
 80105e4:	1b9b      	subs	r3, r3, r6
 80105e6:	50a3      	str	r3, [r4, r2]
 80105e8:	e7b3      	b.n	8010552 <_malloc_r+0x22>
 80105ea:	6862      	ldr	r2, [r4, #4]
 80105ec:	42a3      	cmp	r3, r4
 80105ee:	bf0c      	ite	eq
 80105f0:	6032      	streq	r2, [r6, #0]
 80105f2:	605a      	strne	r2, [r3, #4]
 80105f4:	e7ec      	b.n	80105d0 <_malloc_r+0xa0>
 80105f6:	4623      	mov	r3, r4
 80105f8:	6864      	ldr	r4, [r4, #4]
 80105fa:	e7b2      	b.n	8010562 <_malloc_r+0x32>
 80105fc:	4634      	mov	r4, r6
 80105fe:	6876      	ldr	r6, [r6, #4]
 8010600:	e7b9      	b.n	8010576 <_malloc_r+0x46>
 8010602:	230c      	movs	r3, #12
 8010604:	603b      	str	r3, [r7, #0]
 8010606:	4638      	mov	r0, r7
 8010608:	f001 fb26 	bl	8011c58 <__malloc_unlock>
 801060c:	e7a1      	b.n	8010552 <_malloc_r+0x22>
 801060e:	6025      	str	r5, [r4, #0]
 8010610:	e7de      	b.n	80105d0 <_malloc_r+0xa0>
 8010612:	bf00      	nop
 8010614:	20002d9c 	.word	0x20002d9c

08010618 <__cvt>:
 8010618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801061c:	ec55 4b10 	vmov	r4, r5, d0
 8010620:	2d00      	cmp	r5, #0
 8010622:	460e      	mov	r6, r1
 8010624:	4619      	mov	r1, r3
 8010626:	462b      	mov	r3, r5
 8010628:	bfbb      	ittet	lt
 801062a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801062e:	461d      	movlt	r5, r3
 8010630:	2300      	movge	r3, #0
 8010632:	232d      	movlt	r3, #45	; 0x2d
 8010634:	700b      	strb	r3, [r1, #0]
 8010636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010638:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801063c:	4691      	mov	r9, r2
 801063e:	f023 0820 	bic.w	r8, r3, #32
 8010642:	bfbc      	itt	lt
 8010644:	4622      	movlt	r2, r4
 8010646:	4614      	movlt	r4, r2
 8010648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801064c:	d005      	beq.n	801065a <__cvt+0x42>
 801064e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010652:	d100      	bne.n	8010656 <__cvt+0x3e>
 8010654:	3601      	adds	r6, #1
 8010656:	2102      	movs	r1, #2
 8010658:	e000      	b.n	801065c <__cvt+0x44>
 801065a:	2103      	movs	r1, #3
 801065c:	ab03      	add	r3, sp, #12
 801065e:	9301      	str	r3, [sp, #4]
 8010660:	ab02      	add	r3, sp, #8
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	ec45 4b10 	vmov	d0, r4, r5
 8010668:	4653      	mov	r3, sl
 801066a:	4632      	mov	r2, r6
 801066c:	f000 fcfc 	bl	8011068 <_dtoa_r>
 8010670:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010674:	4607      	mov	r7, r0
 8010676:	d102      	bne.n	801067e <__cvt+0x66>
 8010678:	f019 0f01 	tst.w	r9, #1
 801067c:	d022      	beq.n	80106c4 <__cvt+0xac>
 801067e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010682:	eb07 0906 	add.w	r9, r7, r6
 8010686:	d110      	bne.n	80106aa <__cvt+0x92>
 8010688:	783b      	ldrb	r3, [r7, #0]
 801068a:	2b30      	cmp	r3, #48	; 0x30
 801068c:	d10a      	bne.n	80106a4 <__cvt+0x8c>
 801068e:	2200      	movs	r2, #0
 8010690:	2300      	movs	r3, #0
 8010692:	4620      	mov	r0, r4
 8010694:	4629      	mov	r1, r5
 8010696:	f7f0 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 801069a:	b918      	cbnz	r0, 80106a4 <__cvt+0x8c>
 801069c:	f1c6 0601 	rsb	r6, r6, #1
 80106a0:	f8ca 6000 	str.w	r6, [sl]
 80106a4:	f8da 3000 	ldr.w	r3, [sl]
 80106a8:	4499      	add	r9, r3
 80106aa:	2200      	movs	r2, #0
 80106ac:	2300      	movs	r3, #0
 80106ae:	4620      	mov	r0, r4
 80106b0:	4629      	mov	r1, r5
 80106b2:	f7f0 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80106b6:	b108      	cbz	r0, 80106bc <__cvt+0xa4>
 80106b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80106bc:	2230      	movs	r2, #48	; 0x30
 80106be:	9b03      	ldr	r3, [sp, #12]
 80106c0:	454b      	cmp	r3, r9
 80106c2:	d307      	bcc.n	80106d4 <__cvt+0xbc>
 80106c4:	9b03      	ldr	r3, [sp, #12]
 80106c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80106c8:	1bdb      	subs	r3, r3, r7
 80106ca:	4638      	mov	r0, r7
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	b004      	add	sp, #16
 80106d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106d4:	1c59      	adds	r1, r3, #1
 80106d6:	9103      	str	r1, [sp, #12]
 80106d8:	701a      	strb	r2, [r3, #0]
 80106da:	e7f0      	b.n	80106be <__cvt+0xa6>

080106dc <__exponent>:
 80106dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106de:	4603      	mov	r3, r0
 80106e0:	2900      	cmp	r1, #0
 80106e2:	bfb8      	it	lt
 80106e4:	4249      	neglt	r1, r1
 80106e6:	f803 2b02 	strb.w	r2, [r3], #2
 80106ea:	bfb4      	ite	lt
 80106ec:	222d      	movlt	r2, #45	; 0x2d
 80106ee:	222b      	movge	r2, #43	; 0x2b
 80106f0:	2909      	cmp	r1, #9
 80106f2:	7042      	strb	r2, [r0, #1]
 80106f4:	dd2a      	ble.n	801074c <__exponent+0x70>
 80106f6:	f10d 0407 	add.w	r4, sp, #7
 80106fa:	46a4      	mov	ip, r4
 80106fc:	270a      	movs	r7, #10
 80106fe:	46a6      	mov	lr, r4
 8010700:	460a      	mov	r2, r1
 8010702:	fb91 f6f7 	sdiv	r6, r1, r7
 8010706:	fb07 1516 	mls	r5, r7, r6, r1
 801070a:	3530      	adds	r5, #48	; 0x30
 801070c:	2a63      	cmp	r2, #99	; 0x63
 801070e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010716:	4631      	mov	r1, r6
 8010718:	dcf1      	bgt.n	80106fe <__exponent+0x22>
 801071a:	3130      	adds	r1, #48	; 0x30
 801071c:	f1ae 0502 	sub.w	r5, lr, #2
 8010720:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010724:	1c44      	adds	r4, r0, #1
 8010726:	4629      	mov	r1, r5
 8010728:	4561      	cmp	r1, ip
 801072a:	d30a      	bcc.n	8010742 <__exponent+0x66>
 801072c:	f10d 0209 	add.w	r2, sp, #9
 8010730:	eba2 020e 	sub.w	r2, r2, lr
 8010734:	4565      	cmp	r5, ip
 8010736:	bf88      	it	hi
 8010738:	2200      	movhi	r2, #0
 801073a:	4413      	add	r3, r2
 801073c:	1a18      	subs	r0, r3, r0
 801073e:	b003      	add	sp, #12
 8010740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010746:	f804 2f01 	strb.w	r2, [r4, #1]!
 801074a:	e7ed      	b.n	8010728 <__exponent+0x4c>
 801074c:	2330      	movs	r3, #48	; 0x30
 801074e:	3130      	adds	r1, #48	; 0x30
 8010750:	7083      	strb	r3, [r0, #2]
 8010752:	70c1      	strb	r1, [r0, #3]
 8010754:	1d03      	adds	r3, r0, #4
 8010756:	e7f1      	b.n	801073c <__exponent+0x60>

08010758 <_printf_float>:
 8010758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075c:	ed2d 8b02 	vpush	{d8}
 8010760:	b08d      	sub	sp, #52	; 0x34
 8010762:	460c      	mov	r4, r1
 8010764:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010768:	4616      	mov	r6, r2
 801076a:	461f      	mov	r7, r3
 801076c:	4605      	mov	r5, r0
 801076e:	f001 fa69 	bl	8011c44 <_localeconv_r>
 8010772:	f8d0 a000 	ldr.w	sl, [r0]
 8010776:	4650      	mov	r0, sl
 8010778:	f7ef fd2a 	bl	80001d0 <strlen>
 801077c:	2300      	movs	r3, #0
 801077e:	930a      	str	r3, [sp, #40]	; 0x28
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	9305      	str	r3, [sp, #20]
 8010784:	f8d8 3000 	ldr.w	r3, [r8]
 8010788:	f894 b018 	ldrb.w	fp, [r4, #24]
 801078c:	3307      	adds	r3, #7
 801078e:	f023 0307 	bic.w	r3, r3, #7
 8010792:	f103 0208 	add.w	r2, r3, #8
 8010796:	f8c8 2000 	str.w	r2, [r8]
 801079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80107a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80107a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80107aa:	9307      	str	r3, [sp, #28]
 80107ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80107b0:	ee08 0a10 	vmov	s16, r0
 80107b4:	4b9f      	ldr	r3, [pc, #636]	; (8010a34 <_printf_float+0x2dc>)
 80107b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107ba:	f04f 32ff 	mov.w	r2, #4294967295
 80107be:	f7f0 f9b5 	bl	8000b2c <__aeabi_dcmpun>
 80107c2:	bb88      	cbnz	r0, 8010828 <_printf_float+0xd0>
 80107c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107c8:	4b9a      	ldr	r3, [pc, #616]	; (8010a34 <_printf_float+0x2dc>)
 80107ca:	f04f 32ff 	mov.w	r2, #4294967295
 80107ce:	f7f0 f98f 	bl	8000af0 <__aeabi_dcmple>
 80107d2:	bb48      	cbnz	r0, 8010828 <_printf_float+0xd0>
 80107d4:	2200      	movs	r2, #0
 80107d6:	2300      	movs	r3, #0
 80107d8:	4640      	mov	r0, r8
 80107da:	4649      	mov	r1, r9
 80107dc:	f7f0 f97e 	bl	8000adc <__aeabi_dcmplt>
 80107e0:	b110      	cbz	r0, 80107e8 <_printf_float+0x90>
 80107e2:	232d      	movs	r3, #45	; 0x2d
 80107e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107e8:	4b93      	ldr	r3, [pc, #588]	; (8010a38 <_printf_float+0x2e0>)
 80107ea:	4894      	ldr	r0, [pc, #592]	; (8010a3c <_printf_float+0x2e4>)
 80107ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80107f0:	bf94      	ite	ls
 80107f2:	4698      	movls	r8, r3
 80107f4:	4680      	movhi	r8, r0
 80107f6:	2303      	movs	r3, #3
 80107f8:	6123      	str	r3, [r4, #16]
 80107fa:	9b05      	ldr	r3, [sp, #20]
 80107fc:	f023 0204 	bic.w	r2, r3, #4
 8010800:	6022      	str	r2, [r4, #0]
 8010802:	f04f 0900 	mov.w	r9, #0
 8010806:	9700      	str	r7, [sp, #0]
 8010808:	4633      	mov	r3, r6
 801080a:	aa0b      	add	r2, sp, #44	; 0x2c
 801080c:	4621      	mov	r1, r4
 801080e:	4628      	mov	r0, r5
 8010810:	f000 f9d8 	bl	8010bc4 <_printf_common>
 8010814:	3001      	adds	r0, #1
 8010816:	f040 8090 	bne.w	801093a <_printf_float+0x1e2>
 801081a:	f04f 30ff 	mov.w	r0, #4294967295
 801081e:	b00d      	add	sp, #52	; 0x34
 8010820:	ecbd 8b02 	vpop	{d8}
 8010824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010828:	4642      	mov	r2, r8
 801082a:	464b      	mov	r3, r9
 801082c:	4640      	mov	r0, r8
 801082e:	4649      	mov	r1, r9
 8010830:	f7f0 f97c 	bl	8000b2c <__aeabi_dcmpun>
 8010834:	b140      	cbz	r0, 8010848 <_printf_float+0xf0>
 8010836:	464b      	mov	r3, r9
 8010838:	2b00      	cmp	r3, #0
 801083a:	bfbc      	itt	lt
 801083c:	232d      	movlt	r3, #45	; 0x2d
 801083e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010842:	487f      	ldr	r0, [pc, #508]	; (8010a40 <_printf_float+0x2e8>)
 8010844:	4b7f      	ldr	r3, [pc, #508]	; (8010a44 <_printf_float+0x2ec>)
 8010846:	e7d1      	b.n	80107ec <_printf_float+0x94>
 8010848:	6863      	ldr	r3, [r4, #4]
 801084a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801084e:	9206      	str	r2, [sp, #24]
 8010850:	1c5a      	adds	r2, r3, #1
 8010852:	d13f      	bne.n	80108d4 <_printf_float+0x17c>
 8010854:	2306      	movs	r3, #6
 8010856:	6063      	str	r3, [r4, #4]
 8010858:	9b05      	ldr	r3, [sp, #20]
 801085a:	6861      	ldr	r1, [r4, #4]
 801085c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010860:	2300      	movs	r3, #0
 8010862:	9303      	str	r3, [sp, #12]
 8010864:	ab0a      	add	r3, sp, #40	; 0x28
 8010866:	e9cd b301 	strd	fp, r3, [sp, #4]
 801086a:	ab09      	add	r3, sp, #36	; 0x24
 801086c:	ec49 8b10 	vmov	d0, r8, r9
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	6022      	str	r2, [r4, #0]
 8010874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010878:	4628      	mov	r0, r5
 801087a:	f7ff fecd 	bl	8010618 <__cvt>
 801087e:	9b06      	ldr	r3, [sp, #24]
 8010880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010882:	2b47      	cmp	r3, #71	; 0x47
 8010884:	4680      	mov	r8, r0
 8010886:	d108      	bne.n	801089a <_printf_float+0x142>
 8010888:	1cc8      	adds	r0, r1, #3
 801088a:	db02      	blt.n	8010892 <_printf_float+0x13a>
 801088c:	6863      	ldr	r3, [r4, #4]
 801088e:	4299      	cmp	r1, r3
 8010890:	dd41      	ble.n	8010916 <_printf_float+0x1be>
 8010892:	f1ab 0b02 	sub.w	fp, fp, #2
 8010896:	fa5f fb8b 	uxtb.w	fp, fp
 801089a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801089e:	d820      	bhi.n	80108e2 <_printf_float+0x18a>
 80108a0:	3901      	subs	r1, #1
 80108a2:	465a      	mov	r2, fp
 80108a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80108a8:	9109      	str	r1, [sp, #36]	; 0x24
 80108aa:	f7ff ff17 	bl	80106dc <__exponent>
 80108ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108b0:	1813      	adds	r3, r2, r0
 80108b2:	2a01      	cmp	r2, #1
 80108b4:	4681      	mov	r9, r0
 80108b6:	6123      	str	r3, [r4, #16]
 80108b8:	dc02      	bgt.n	80108c0 <_printf_float+0x168>
 80108ba:	6822      	ldr	r2, [r4, #0]
 80108bc:	07d2      	lsls	r2, r2, #31
 80108be:	d501      	bpl.n	80108c4 <_printf_float+0x16c>
 80108c0:	3301      	adds	r3, #1
 80108c2:	6123      	str	r3, [r4, #16]
 80108c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d09c      	beq.n	8010806 <_printf_float+0xae>
 80108cc:	232d      	movs	r3, #45	; 0x2d
 80108ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108d2:	e798      	b.n	8010806 <_printf_float+0xae>
 80108d4:	9a06      	ldr	r2, [sp, #24]
 80108d6:	2a47      	cmp	r2, #71	; 0x47
 80108d8:	d1be      	bne.n	8010858 <_printf_float+0x100>
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d1bc      	bne.n	8010858 <_printf_float+0x100>
 80108de:	2301      	movs	r3, #1
 80108e0:	e7b9      	b.n	8010856 <_printf_float+0xfe>
 80108e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80108e6:	d118      	bne.n	801091a <_printf_float+0x1c2>
 80108e8:	2900      	cmp	r1, #0
 80108ea:	6863      	ldr	r3, [r4, #4]
 80108ec:	dd0b      	ble.n	8010906 <_printf_float+0x1ae>
 80108ee:	6121      	str	r1, [r4, #16]
 80108f0:	b913      	cbnz	r3, 80108f8 <_printf_float+0x1a0>
 80108f2:	6822      	ldr	r2, [r4, #0]
 80108f4:	07d0      	lsls	r0, r2, #31
 80108f6:	d502      	bpl.n	80108fe <_printf_float+0x1a6>
 80108f8:	3301      	adds	r3, #1
 80108fa:	440b      	add	r3, r1
 80108fc:	6123      	str	r3, [r4, #16]
 80108fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8010900:	f04f 0900 	mov.w	r9, #0
 8010904:	e7de      	b.n	80108c4 <_printf_float+0x16c>
 8010906:	b913      	cbnz	r3, 801090e <_printf_float+0x1b6>
 8010908:	6822      	ldr	r2, [r4, #0]
 801090a:	07d2      	lsls	r2, r2, #31
 801090c:	d501      	bpl.n	8010912 <_printf_float+0x1ba>
 801090e:	3302      	adds	r3, #2
 8010910:	e7f4      	b.n	80108fc <_printf_float+0x1a4>
 8010912:	2301      	movs	r3, #1
 8010914:	e7f2      	b.n	80108fc <_printf_float+0x1a4>
 8010916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801091a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801091c:	4299      	cmp	r1, r3
 801091e:	db05      	blt.n	801092c <_printf_float+0x1d4>
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	6121      	str	r1, [r4, #16]
 8010924:	07d8      	lsls	r0, r3, #31
 8010926:	d5ea      	bpl.n	80108fe <_printf_float+0x1a6>
 8010928:	1c4b      	adds	r3, r1, #1
 801092a:	e7e7      	b.n	80108fc <_printf_float+0x1a4>
 801092c:	2900      	cmp	r1, #0
 801092e:	bfd4      	ite	le
 8010930:	f1c1 0202 	rsble	r2, r1, #2
 8010934:	2201      	movgt	r2, #1
 8010936:	4413      	add	r3, r2
 8010938:	e7e0      	b.n	80108fc <_printf_float+0x1a4>
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	055a      	lsls	r2, r3, #21
 801093e:	d407      	bmi.n	8010950 <_printf_float+0x1f8>
 8010940:	6923      	ldr	r3, [r4, #16]
 8010942:	4642      	mov	r2, r8
 8010944:	4631      	mov	r1, r6
 8010946:	4628      	mov	r0, r5
 8010948:	47b8      	blx	r7
 801094a:	3001      	adds	r0, #1
 801094c:	d12c      	bne.n	80109a8 <_printf_float+0x250>
 801094e:	e764      	b.n	801081a <_printf_float+0xc2>
 8010950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010954:	f240 80e0 	bls.w	8010b18 <_printf_float+0x3c0>
 8010958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801095c:	2200      	movs	r2, #0
 801095e:	2300      	movs	r3, #0
 8010960:	f7f0 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010964:	2800      	cmp	r0, #0
 8010966:	d034      	beq.n	80109d2 <_printf_float+0x27a>
 8010968:	4a37      	ldr	r2, [pc, #220]	; (8010a48 <_printf_float+0x2f0>)
 801096a:	2301      	movs	r3, #1
 801096c:	4631      	mov	r1, r6
 801096e:	4628      	mov	r0, r5
 8010970:	47b8      	blx	r7
 8010972:	3001      	adds	r0, #1
 8010974:	f43f af51 	beq.w	801081a <_printf_float+0xc2>
 8010978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801097c:	429a      	cmp	r2, r3
 801097e:	db02      	blt.n	8010986 <_printf_float+0x22e>
 8010980:	6823      	ldr	r3, [r4, #0]
 8010982:	07d8      	lsls	r0, r3, #31
 8010984:	d510      	bpl.n	80109a8 <_printf_float+0x250>
 8010986:	ee18 3a10 	vmov	r3, s16
 801098a:	4652      	mov	r2, sl
 801098c:	4631      	mov	r1, r6
 801098e:	4628      	mov	r0, r5
 8010990:	47b8      	blx	r7
 8010992:	3001      	adds	r0, #1
 8010994:	f43f af41 	beq.w	801081a <_printf_float+0xc2>
 8010998:	f04f 0800 	mov.w	r8, #0
 801099c:	f104 091a 	add.w	r9, r4, #26
 80109a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109a2:	3b01      	subs	r3, #1
 80109a4:	4543      	cmp	r3, r8
 80109a6:	dc09      	bgt.n	80109bc <_printf_float+0x264>
 80109a8:	6823      	ldr	r3, [r4, #0]
 80109aa:	079b      	lsls	r3, r3, #30
 80109ac:	f100 8105 	bmi.w	8010bba <_printf_float+0x462>
 80109b0:	68e0      	ldr	r0, [r4, #12]
 80109b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109b4:	4298      	cmp	r0, r3
 80109b6:	bfb8      	it	lt
 80109b8:	4618      	movlt	r0, r3
 80109ba:	e730      	b.n	801081e <_printf_float+0xc6>
 80109bc:	2301      	movs	r3, #1
 80109be:	464a      	mov	r2, r9
 80109c0:	4631      	mov	r1, r6
 80109c2:	4628      	mov	r0, r5
 80109c4:	47b8      	blx	r7
 80109c6:	3001      	adds	r0, #1
 80109c8:	f43f af27 	beq.w	801081a <_printf_float+0xc2>
 80109cc:	f108 0801 	add.w	r8, r8, #1
 80109d0:	e7e6      	b.n	80109a0 <_printf_float+0x248>
 80109d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	dc39      	bgt.n	8010a4c <_printf_float+0x2f4>
 80109d8:	4a1b      	ldr	r2, [pc, #108]	; (8010a48 <_printf_float+0x2f0>)
 80109da:	2301      	movs	r3, #1
 80109dc:	4631      	mov	r1, r6
 80109de:	4628      	mov	r0, r5
 80109e0:	47b8      	blx	r7
 80109e2:	3001      	adds	r0, #1
 80109e4:	f43f af19 	beq.w	801081a <_printf_float+0xc2>
 80109e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109ec:	4313      	orrs	r3, r2
 80109ee:	d102      	bne.n	80109f6 <_printf_float+0x29e>
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	07d9      	lsls	r1, r3, #31
 80109f4:	d5d8      	bpl.n	80109a8 <_printf_float+0x250>
 80109f6:	ee18 3a10 	vmov	r3, s16
 80109fa:	4652      	mov	r2, sl
 80109fc:	4631      	mov	r1, r6
 80109fe:	4628      	mov	r0, r5
 8010a00:	47b8      	blx	r7
 8010a02:	3001      	adds	r0, #1
 8010a04:	f43f af09 	beq.w	801081a <_printf_float+0xc2>
 8010a08:	f04f 0900 	mov.w	r9, #0
 8010a0c:	f104 0a1a 	add.w	sl, r4, #26
 8010a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a12:	425b      	negs	r3, r3
 8010a14:	454b      	cmp	r3, r9
 8010a16:	dc01      	bgt.n	8010a1c <_printf_float+0x2c4>
 8010a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a1a:	e792      	b.n	8010942 <_printf_float+0x1ea>
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	4652      	mov	r2, sl
 8010a20:	4631      	mov	r1, r6
 8010a22:	4628      	mov	r0, r5
 8010a24:	47b8      	blx	r7
 8010a26:	3001      	adds	r0, #1
 8010a28:	f43f aef7 	beq.w	801081a <_printf_float+0xc2>
 8010a2c:	f109 0901 	add.w	r9, r9, #1
 8010a30:	e7ee      	b.n	8010a10 <_printf_float+0x2b8>
 8010a32:	bf00      	nop
 8010a34:	7fefffff 	.word	0x7fefffff
 8010a38:	080145f4 	.word	0x080145f4
 8010a3c:	080145f8 	.word	0x080145f8
 8010a40:	08014600 	.word	0x08014600
 8010a44:	080145fc 	.word	0x080145fc
 8010a48:	08014604 	.word	0x08014604
 8010a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a50:	429a      	cmp	r2, r3
 8010a52:	bfa8      	it	ge
 8010a54:	461a      	movge	r2, r3
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	4691      	mov	r9, r2
 8010a5a:	dc37      	bgt.n	8010acc <_printf_float+0x374>
 8010a5c:	f04f 0b00 	mov.w	fp, #0
 8010a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a64:	f104 021a 	add.w	r2, r4, #26
 8010a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a6a:	9305      	str	r3, [sp, #20]
 8010a6c:	eba3 0309 	sub.w	r3, r3, r9
 8010a70:	455b      	cmp	r3, fp
 8010a72:	dc33      	bgt.n	8010adc <_printf_float+0x384>
 8010a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	db3b      	blt.n	8010af4 <_printf_float+0x39c>
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	07da      	lsls	r2, r3, #31
 8010a80:	d438      	bmi.n	8010af4 <_printf_float+0x39c>
 8010a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a84:	9a05      	ldr	r2, [sp, #20]
 8010a86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a88:	1a9a      	subs	r2, r3, r2
 8010a8a:	eba3 0901 	sub.w	r9, r3, r1
 8010a8e:	4591      	cmp	r9, r2
 8010a90:	bfa8      	it	ge
 8010a92:	4691      	movge	r9, r2
 8010a94:	f1b9 0f00 	cmp.w	r9, #0
 8010a98:	dc35      	bgt.n	8010b06 <_printf_float+0x3ae>
 8010a9a:	f04f 0800 	mov.w	r8, #0
 8010a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010aa2:	f104 0a1a 	add.w	sl, r4, #26
 8010aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010aaa:	1a9b      	subs	r3, r3, r2
 8010aac:	eba3 0309 	sub.w	r3, r3, r9
 8010ab0:	4543      	cmp	r3, r8
 8010ab2:	f77f af79 	ble.w	80109a8 <_printf_float+0x250>
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	4652      	mov	r2, sl
 8010aba:	4631      	mov	r1, r6
 8010abc:	4628      	mov	r0, r5
 8010abe:	47b8      	blx	r7
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	f43f aeaa 	beq.w	801081a <_printf_float+0xc2>
 8010ac6:	f108 0801 	add.w	r8, r8, #1
 8010aca:	e7ec      	b.n	8010aa6 <_printf_float+0x34e>
 8010acc:	4613      	mov	r3, r2
 8010ace:	4631      	mov	r1, r6
 8010ad0:	4642      	mov	r2, r8
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	47b8      	blx	r7
 8010ad6:	3001      	adds	r0, #1
 8010ad8:	d1c0      	bne.n	8010a5c <_printf_float+0x304>
 8010ada:	e69e      	b.n	801081a <_printf_float+0xc2>
 8010adc:	2301      	movs	r3, #1
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	9205      	str	r2, [sp, #20]
 8010ae4:	47b8      	blx	r7
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	f43f ae97 	beq.w	801081a <_printf_float+0xc2>
 8010aec:	9a05      	ldr	r2, [sp, #20]
 8010aee:	f10b 0b01 	add.w	fp, fp, #1
 8010af2:	e7b9      	b.n	8010a68 <_printf_float+0x310>
 8010af4:	ee18 3a10 	vmov	r3, s16
 8010af8:	4652      	mov	r2, sl
 8010afa:	4631      	mov	r1, r6
 8010afc:	4628      	mov	r0, r5
 8010afe:	47b8      	blx	r7
 8010b00:	3001      	adds	r0, #1
 8010b02:	d1be      	bne.n	8010a82 <_printf_float+0x32a>
 8010b04:	e689      	b.n	801081a <_printf_float+0xc2>
 8010b06:	9a05      	ldr	r2, [sp, #20]
 8010b08:	464b      	mov	r3, r9
 8010b0a:	4442      	add	r2, r8
 8010b0c:	4631      	mov	r1, r6
 8010b0e:	4628      	mov	r0, r5
 8010b10:	47b8      	blx	r7
 8010b12:	3001      	adds	r0, #1
 8010b14:	d1c1      	bne.n	8010a9a <_printf_float+0x342>
 8010b16:	e680      	b.n	801081a <_printf_float+0xc2>
 8010b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b1a:	2a01      	cmp	r2, #1
 8010b1c:	dc01      	bgt.n	8010b22 <_printf_float+0x3ca>
 8010b1e:	07db      	lsls	r3, r3, #31
 8010b20:	d538      	bpl.n	8010b94 <_printf_float+0x43c>
 8010b22:	2301      	movs	r3, #1
 8010b24:	4642      	mov	r2, r8
 8010b26:	4631      	mov	r1, r6
 8010b28:	4628      	mov	r0, r5
 8010b2a:	47b8      	blx	r7
 8010b2c:	3001      	adds	r0, #1
 8010b2e:	f43f ae74 	beq.w	801081a <_printf_float+0xc2>
 8010b32:	ee18 3a10 	vmov	r3, s16
 8010b36:	4652      	mov	r2, sl
 8010b38:	4631      	mov	r1, r6
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	47b8      	blx	r7
 8010b3e:	3001      	adds	r0, #1
 8010b40:	f43f ae6b 	beq.w	801081a <_printf_float+0xc2>
 8010b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010b48:	2200      	movs	r2, #0
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	f7ef ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b50:	b9d8      	cbnz	r0, 8010b8a <_printf_float+0x432>
 8010b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b54:	f108 0201 	add.w	r2, r8, #1
 8010b58:	3b01      	subs	r3, #1
 8010b5a:	4631      	mov	r1, r6
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	47b8      	blx	r7
 8010b60:	3001      	adds	r0, #1
 8010b62:	d10e      	bne.n	8010b82 <_printf_float+0x42a>
 8010b64:	e659      	b.n	801081a <_printf_float+0xc2>
 8010b66:	2301      	movs	r3, #1
 8010b68:	4652      	mov	r2, sl
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	47b8      	blx	r7
 8010b70:	3001      	adds	r0, #1
 8010b72:	f43f ae52 	beq.w	801081a <_printf_float+0xc2>
 8010b76:	f108 0801 	add.w	r8, r8, #1
 8010b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	4543      	cmp	r3, r8
 8010b80:	dcf1      	bgt.n	8010b66 <_printf_float+0x40e>
 8010b82:	464b      	mov	r3, r9
 8010b84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010b88:	e6dc      	b.n	8010944 <_printf_float+0x1ec>
 8010b8a:	f04f 0800 	mov.w	r8, #0
 8010b8e:	f104 0a1a 	add.w	sl, r4, #26
 8010b92:	e7f2      	b.n	8010b7a <_printf_float+0x422>
 8010b94:	2301      	movs	r3, #1
 8010b96:	4642      	mov	r2, r8
 8010b98:	e7df      	b.n	8010b5a <_printf_float+0x402>
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	464a      	mov	r2, r9
 8010b9e:	4631      	mov	r1, r6
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	47b8      	blx	r7
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	f43f ae38 	beq.w	801081a <_printf_float+0xc2>
 8010baa:	f108 0801 	add.w	r8, r8, #1
 8010bae:	68e3      	ldr	r3, [r4, #12]
 8010bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010bb2:	1a5b      	subs	r3, r3, r1
 8010bb4:	4543      	cmp	r3, r8
 8010bb6:	dcf0      	bgt.n	8010b9a <_printf_float+0x442>
 8010bb8:	e6fa      	b.n	80109b0 <_printf_float+0x258>
 8010bba:	f04f 0800 	mov.w	r8, #0
 8010bbe:	f104 0919 	add.w	r9, r4, #25
 8010bc2:	e7f4      	b.n	8010bae <_printf_float+0x456>

08010bc4 <_printf_common>:
 8010bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bc8:	4616      	mov	r6, r2
 8010bca:	4699      	mov	r9, r3
 8010bcc:	688a      	ldr	r2, [r1, #8]
 8010bce:	690b      	ldr	r3, [r1, #16]
 8010bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	bfb8      	it	lt
 8010bd8:	4613      	movlt	r3, r2
 8010bda:	6033      	str	r3, [r6, #0]
 8010bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010be0:	4607      	mov	r7, r0
 8010be2:	460c      	mov	r4, r1
 8010be4:	b10a      	cbz	r2, 8010bea <_printf_common+0x26>
 8010be6:	3301      	adds	r3, #1
 8010be8:	6033      	str	r3, [r6, #0]
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	0699      	lsls	r1, r3, #26
 8010bee:	bf42      	ittt	mi
 8010bf0:	6833      	ldrmi	r3, [r6, #0]
 8010bf2:	3302      	addmi	r3, #2
 8010bf4:	6033      	strmi	r3, [r6, #0]
 8010bf6:	6825      	ldr	r5, [r4, #0]
 8010bf8:	f015 0506 	ands.w	r5, r5, #6
 8010bfc:	d106      	bne.n	8010c0c <_printf_common+0x48>
 8010bfe:	f104 0a19 	add.w	sl, r4, #25
 8010c02:	68e3      	ldr	r3, [r4, #12]
 8010c04:	6832      	ldr	r2, [r6, #0]
 8010c06:	1a9b      	subs	r3, r3, r2
 8010c08:	42ab      	cmp	r3, r5
 8010c0a:	dc26      	bgt.n	8010c5a <_printf_common+0x96>
 8010c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c10:	1e13      	subs	r3, r2, #0
 8010c12:	6822      	ldr	r2, [r4, #0]
 8010c14:	bf18      	it	ne
 8010c16:	2301      	movne	r3, #1
 8010c18:	0692      	lsls	r2, r2, #26
 8010c1a:	d42b      	bmi.n	8010c74 <_printf_common+0xb0>
 8010c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c20:	4649      	mov	r1, r9
 8010c22:	4638      	mov	r0, r7
 8010c24:	47c0      	blx	r8
 8010c26:	3001      	adds	r0, #1
 8010c28:	d01e      	beq.n	8010c68 <_printf_common+0xa4>
 8010c2a:	6823      	ldr	r3, [r4, #0]
 8010c2c:	68e5      	ldr	r5, [r4, #12]
 8010c2e:	6832      	ldr	r2, [r6, #0]
 8010c30:	f003 0306 	and.w	r3, r3, #6
 8010c34:	2b04      	cmp	r3, #4
 8010c36:	bf08      	it	eq
 8010c38:	1aad      	subeq	r5, r5, r2
 8010c3a:	68a3      	ldr	r3, [r4, #8]
 8010c3c:	6922      	ldr	r2, [r4, #16]
 8010c3e:	bf0c      	ite	eq
 8010c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c44:	2500      	movne	r5, #0
 8010c46:	4293      	cmp	r3, r2
 8010c48:	bfc4      	itt	gt
 8010c4a:	1a9b      	subgt	r3, r3, r2
 8010c4c:	18ed      	addgt	r5, r5, r3
 8010c4e:	2600      	movs	r6, #0
 8010c50:	341a      	adds	r4, #26
 8010c52:	42b5      	cmp	r5, r6
 8010c54:	d11a      	bne.n	8010c8c <_printf_common+0xc8>
 8010c56:	2000      	movs	r0, #0
 8010c58:	e008      	b.n	8010c6c <_printf_common+0xa8>
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	4652      	mov	r2, sl
 8010c5e:	4649      	mov	r1, r9
 8010c60:	4638      	mov	r0, r7
 8010c62:	47c0      	blx	r8
 8010c64:	3001      	adds	r0, #1
 8010c66:	d103      	bne.n	8010c70 <_printf_common+0xac>
 8010c68:	f04f 30ff 	mov.w	r0, #4294967295
 8010c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c70:	3501      	adds	r5, #1
 8010c72:	e7c6      	b.n	8010c02 <_printf_common+0x3e>
 8010c74:	18e1      	adds	r1, r4, r3
 8010c76:	1c5a      	adds	r2, r3, #1
 8010c78:	2030      	movs	r0, #48	; 0x30
 8010c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c7e:	4422      	add	r2, r4
 8010c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c88:	3302      	adds	r3, #2
 8010c8a:	e7c7      	b.n	8010c1c <_printf_common+0x58>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	4622      	mov	r2, r4
 8010c90:	4649      	mov	r1, r9
 8010c92:	4638      	mov	r0, r7
 8010c94:	47c0      	blx	r8
 8010c96:	3001      	adds	r0, #1
 8010c98:	d0e6      	beq.n	8010c68 <_printf_common+0xa4>
 8010c9a:	3601      	adds	r6, #1
 8010c9c:	e7d9      	b.n	8010c52 <_printf_common+0x8e>
	...

08010ca0 <_printf_i>:
 8010ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca4:	7e0f      	ldrb	r7, [r1, #24]
 8010ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ca8:	2f78      	cmp	r7, #120	; 0x78
 8010caa:	4691      	mov	r9, r2
 8010cac:	4680      	mov	r8, r0
 8010cae:	460c      	mov	r4, r1
 8010cb0:	469a      	mov	sl, r3
 8010cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010cb6:	d807      	bhi.n	8010cc8 <_printf_i+0x28>
 8010cb8:	2f62      	cmp	r7, #98	; 0x62
 8010cba:	d80a      	bhi.n	8010cd2 <_printf_i+0x32>
 8010cbc:	2f00      	cmp	r7, #0
 8010cbe:	f000 80d8 	beq.w	8010e72 <_printf_i+0x1d2>
 8010cc2:	2f58      	cmp	r7, #88	; 0x58
 8010cc4:	f000 80a3 	beq.w	8010e0e <_printf_i+0x16e>
 8010cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010cd0:	e03a      	b.n	8010d48 <_printf_i+0xa8>
 8010cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010cd6:	2b15      	cmp	r3, #21
 8010cd8:	d8f6      	bhi.n	8010cc8 <_printf_i+0x28>
 8010cda:	a101      	add	r1, pc, #4	; (adr r1, 8010ce0 <_printf_i+0x40>)
 8010cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ce0:	08010d39 	.word	0x08010d39
 8010ce4:	08010d4d 	.word	0x08010d4d
 8010ce8:	08010cc9 	.word	0x08010cc9
 8010cec:	08010cc9 	.word	0x08010cc9
 8010cf0:	08010cc9 	.word	0x08010cc9
 8010cf4:	08010cc9 	.word	0x08010cc9
 8010cf8:	08010d4d 	.word	0x08010d4d
 8010cfc:	08010cc9 	.word	0x08010cc9
 8010d00:	08010cc9 	.word	0x08010cc9
 8010d04:	08010cc9 	.word	0x08010cc9
 8010d08:	08010cc9 	.word	0x08010cc9
 8010d0c:	08010e59 	.word	0x08010e59
 8010d10:	08010d7d 	.word	0x08010d7d
 8010d14:	08010e3b 	.word	0x08010e3b
 8010d18:	08010cc9 	.word	0x08010cc9
 8010d1c:	08010cc9 	.word	0x08010cc9
 8010d20:	08010e7b 	.word	0x08010e7b
 8010d24:	08010cc9 	.word	0x08010cc9
 8010d28:	08010d7d 	.word	0x08010d7d
 8010d2c:	08010cc9 	.word	0x08010cc9
 8010d30:	08010cc9 	.word	0x08010cc9
 8010d34:	08010e43 	.word	0x08010e43
 8010d38:	682b      	ldr	r3, [r5, #0]
 8010d3a:	1d1a      	adds	r2, r3, #4
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	602a      	str	r2, [r5, #0]
 8010d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d48:	2301      	movs	r3, #1
 8010d4a:	e0a3      	b.n	8010e94 <_printf_i+0x1f4>
 8010d4c:	6820      	ldr	r0, [r4, #0]
 8010d4e:	6829      	ldr	r1, [r5, #0]
 8010d50:	0606      	lsls	r6, r0, #24
 8010d52:	f101 0304 	add.w	r3, r1, #4
 8010d56:	d50a      	bpl.n	8010d6e <_printf_i+0xce>
 8010d58:	680e      	ldr	r6, [r1, #0]
 8010d5a:	602b      	str	r3, [r5, #0]
 8010d5c:	2e00      	cmp	r6, #0
 8010d5e:	da03      	bge.n	8010d68 <_printf_i+0xc8>
 8010d60:	232d      	movs	r3, #45	; 0x2d
 8010d62:	4276      	negs	r6, r6
 8010d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d68:	485e      	ldr	r0, [pc, #376]	; (8010ee4 <_printf_i+0x244>)
 8010d6a:	230a      	movs	r3, #10
 8010d6c:	e019      	b.n	8010da2 <_printf_i+0x102>
 8010d6e:	680e      	ldr	r6, [r1, #0]
 8010d70:	602b      	str	r3, [r5, #0]
 8010d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d76:	bf18      	it	ne
 8010d78:	b236      	sxthne	r6, r6
 8010d7a:	e7ef      	b.n	8010d5c <_printf_i+0xbc>
 8010d7c:	682b      	ldr	r3, [r5, #0]
 8010d7e:	6820      	ldr	r0, [r4, #0]
 8010d80:	1d19      	adds	r1, r3, #4
 8010d82:	6029      	str	r1, [r5, #0]
 8010d84:	0601      	lsls	r1, r0, #24
 8010d86:	d501      	bpl.n	8010d8c <_printf_i+0xec>
 8010d88:	681e      	ldr	r6, [r3, #0]
 8010d8a:	e002      	b.n	8010d92 <_printf_i+0xf2>
 8010d8c:	0646      	lsls	r6, r0, #25
 8010d8e:	d5fb      	bpl.n	8010d88 <_printf_i+0xe8>
 8010d90:	881e      	ldrh	r6, [r3, #0]
 8010d92:	4854      	ldr	r0, [pc, #336]	; (8010ee4 <_printf_i+0x244>)
 8010d94:	2f6f      	cmp	r7, #111	; 0x6f
 8010d96:	bf0c      	ite	eq
 8010d98:	2308      	moveq	r3, #8
 8010d9a:	230a      	movne	r3, #10
 8010d9c:	2100      	movs	r1, #0
 8010d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010da2:	6865      	ldr	r5, [r4, #4]
 8010da4:	60a5      	str	r5, [r4, #8]
 8010da6:	2d00      	cmp	r5, #0
 8010da8:	bfa2      	ittt	ge
 8010daa:	6821      	ldrge	r1, [r4, #0]
 8010dac:	f021 0104 	bicge.w	r1, r1, #4
 8010db0:	6021      	strge	r1, [r4, #0]
 8010db2:	b90e      	cbnz	r6, 8010db8 <_printf_i+0x118>
 8010db4:	2d00      	cmp	r5, #0
 8010db6:	d04d      	beq.n	8010e54 <_printf_i+0x1b4>
 8010db8:	4615      	mov	r5, r2
 8010dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8010dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8010dc2:	5dc7      	ldrb	r7, [r0, r7]
 8010dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010dc8:	4637      	mov	r7, r6
 8010dca:	42bb      	cmp	r3, r7
 8010dcc:	460e      	mov	r6, r1
 8010dce:	d9f4      	bls.n	8010dba <_printf_i+0x11a>
 8010dd0:	2b08      	cmp	r3, #8
 8010dd2:	d10b      	bne.n	8010dec <_printf_i+0x14c>
 8010dd4:	6823      	ldr	r3, [r4, #0]
 8010dd6:	07de      	lsls	r6, r3, #31
 8010dd8:	d508      	bpl.n	8010dec <_printf_i+0x14c>
 8010dda:	6923      	ldr	r3, [r4, #16]
 8010ddc:	6861      	ldr	r1, [r4, #4]
 8010dde:	4299      	cmp	r1, r3
 8010de0:	bfde      	ittt	le
 8010de2:	2330      	movle	r3, #48	; 0x30
 8010de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010de8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010dec:	1b52      	subs	r2, r2, r5
 8010dee:	6122      	str	r2, [r4, #16]
 8010df0:	f8cd a000 	str.w	sl, [sp]
 8010df4:	464b      	mov	r3, r9
 8010df6:	aa03      	add	r2, sp, #12
 8010df8:	4621      	mov	r1, r4
 8010dfa:	4640      	mov	r0, r8
 8010dfc:	f7ff fee2 	bl	8010bc4 <_printf_common>
 8010e00:	3001      	adds	r0, #1
 8010e02:	d14c      	bne.n	8010e9e <_printf_i+0x1fe>
 8010e04:	f04f 30ff 	mov.w	r0, #4294967295
 8010e08:	b004      	add	sp, #16
 8010e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e0e:	4835      	ldr	r0, [pc, #212]	; (8010ee4 <_printf_i+0x244>)
 8010e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010e14:	6829      	ldr	r1, [r5, #0]
 8010e16:	6823      	ldr	r3, [r4, #0]
 8010e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8010e1c:	6029      	str	r1, [r5, #0]
 8010e1e:	061d      	lsls	r5, r3, #24
 8010e20:	d514      	bpl.n	8010e4c <_printf_i+0x1ac>
 8010e22:	07df      	lsls	r7, r3, #31
 8010e24:	bf44      	itt	mi
 8010e26:	f043 0320 	orrmi.w	r3, r3, #32
 8010e2a:	6023      	strmi	r3, [r4, #0]
 8010e2c:	b91e      	cbnz	r6, 8010e36 <_printf_i+0x196>
 8010e2e:	6823      	ldr	r3, [r4, #0]
 8010e30:	f023 0320 	bic.w	r3, r3, #32
 8010e34:	6023      	str	r3, [r4, #0]
 8010e36:	2310      	movs	r3, #16
 8010e38:	e7b0      	b.n	8010d9c <_printf_i+0xfc>
 8010e3a:	6823      	ldr	r3, [r4, #0]
 8010e3c:	f043 0320 	orr.w	r3, r3, #32
 8010e40:	6023      	str	r3, [r4, #0]
 8010e42:	2378      	movs	r3, #120	; 0x78
 8010e44:	4828      	ldr	r0, [pc, #160]	; (8010ee8 <_printf_i+0x248>)
 8010e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e4a:	e7e3      	b.n	8010e14 <_printf_i+0x174>
 8010e4c:	0659      	lsls	r1, r3, #25
 8010e4e:	bf48      	it	mi
 8010e50:	b2b6      	uxthmi	r6, r6
 8010e52:	e7e6      	b.n	8010e22 <_printf_i+0x182>
 8010e54:	4615      	mov	r5, r2
 8010e56:	e7bb      	b.n	8010dd0 <_printf_i+0x130>
 8010e58:	682b      	ldr	r3, [r5, #0]
 8010e5a:	6826      	ldr	r6, [r4, #0]
 8010e5c:	6961      	ldr	r1, [r4, #20]
 8010e5e:	1d18      	adds	r0, r3, #4
 8010e60:	6028      	str	r0, [r5, #0]
 8010e62:	0635      	lsls	r5, r6, #24
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	d501      	bpl.n	8010e6c <_printf_i+0x1cc>
 8010e68:	6019      	str	r1, [r3, #0]
 8010e6a:	e002      	b.n	8010e72 <_printf_i+0x1d2>
 8010e6c:	0670      	lsls	r0, r6, #25
 8010e6e:	d5fb      	bpl.n	8010e68 <_printf_i+0x1c8>
 8010e70:	8019      	strh	r1, [r3, #0]
 8010e72:	2300      	movs	r3, #0
 8010e74:	6123      	str	r3, [r4, #16]
 8010e76:	4615      	mov	r5, r2
 8010e78:	e7ba      	b.n	8010df0 <_printf_i+0x150>
 8010e7a:	682b      	ldr	r3, [r5, #0]
 8010e7c:	1d1a      	adds	r2, r3, #4
 8010e7e:	602a      	str	r2, [r5, #0]
 8010e80:	681d      	ldr	r5, [r3, #0]
 8010e82:	6862      	ldr	r2, [r4, #4]
 8010e84:	2100      	movs	r1, #0
 8010e86:	4628      	mov	r0, r5
 8010e88:	f7ef f9aa 	bl	80001e0 <memchr>
 8010e8c:	b108      	cbz	r0, 8010e92 <_printf_i+0x1f2>
 8010e8e:	1b40      	subs	r0, r0, r5
 8010e90:	6060      	str	r0, [r4, #4]
 8010e92:	6863      	ldr	r3, [r4, #4]
 8010e94:	6123      	str	r3, [r4, #16]
 8010e96:	2300      	movs	r3, #0
 8010e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e9c:	e7a8      	b.n	8010df0 <_printf_i+0x150>
 8010e9e:	6923      	ldr	r3, [r4, #16]
 8010ea0:	462a      	mov	r2, r5
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	4640      	mov	r0, r8
 8010ea6:	47d0      	blx	sl
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	d0ab      	beq.n	8010e04 <_printf_i+0x164>
 8010eac:	6823      	ldr	r3, [r4, #0]
 8010eae:	079b      	lsls	r3, r3, #30
 8010eb0:	d413      	bmi.n	8010eda <_printf_i+0x23a>
 8010eb2:	68e0      	ldr	r0, [r4, #12]
 8010eb4:	9b03      	ldr	r3, [sp, #12]
 8010eb6:	4298      	cmp	r0, r3
 8010eb8:	bfb8      	it	lt
 8010eba:	4618      	movlt	r0, r3
 8010ebc:	e7a4      	b.n	8010e08 <_printf_i+0x168>
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	4632      	mov	r2, r6
 8010ec2:	4649      	mov	r1, r9
 8010ec4:	4640      	mov	r0, r8
 8010ec6:	47d0      	blx	sl
 8010ec8:	3001      	adds	r0, #1
 8010eca:	d09b      	beq.n	8010e04 <_printf_i+0x164>
 8010ecc:	3501      	adds	r5, #1
 8010ece:	68e3      	ldr	r3, [r4, #12]
 8010ed0:	9903      	ldr	r1, [sp, #12]
 8010ed2:	1a5b      	subs	r3, r3, r1
 8010ed4:	42ab      	cmp	r3, r5
 8010ed6:	dcf2      	bgt.n	8010ebe <_printf_i+0x21e>
 8010ed8:	e7eb      	b.n	8010eb2 <_printf_i+0x212>
 8010eda:	2500      	movs	r5, #0
 8010edc:	f104 0619 	add.w	r6, r4, #25
 8010ee0:	e7f5      	b.n	8010ece <_printf_i+0x22e>
 8010ee2:	bf00      	nop
 8010ee4:	08014606 	.word	0x08014606
 8010ee8:	08014617 	.word	0x08014617

08010eec <_sbrk_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d06      	ldr	r5, [pc, #24]	; (8010f08 <_sbrk_r+0x1c>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	602b      	str	r3, [r5, #0]
 8010ef8:	f7f5 fb8a 	bl	8006610 <_sbrk>
 8010efc:	1c43      	adds	r3, r0, #1
 8010efe:	d102      	bne.n	8010f06 <_sbrk_r+0x1a>
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	b103      	cbz	r3, 8010f06 <_sbrk_r+0x1a>
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	20002da4 	.word	0x20002da4

08010f0c <siprintf>:
 8010f0c:	b40e      	push	{r1, r2, r3}
 8010f0e:	b500      	push	{lr}
 8010f10:	b09c      	sub	sp, #112	; 0x70
 8010f12:	ab1d      	add	r3, sp, #116	; 0x74
 8010f14:	9002      	str	r0, [sp, #8]
 8010f16:	9006      	str	r0, [sp, #24]
 8010f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f1c:	4809      	ldr	r0, [pc, #36]	; (8010f44 <siprintf+0x38>)
 8010f1e:	9107      	str	r1, [sp, #28]
 8010f20:	9104      	str	r1, [sp, #16]
 8010f22:	4909      	ldr	r1, [pc, #36]	; (8010f48 <siprintf+0x3c>)
 8010f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f28:	9105      	str	r1, [sp, #20]
 8010f2a:	6800      	ldr	r0, [r0, #0]
 8010f2c:	9301      	str	r3, [sp, #4]
 8010f2e:	a902      	add	r1, sp, #8
 8010f30:	f001 fa8e 	bl	8012450 <_svfiprintf_r>
 8010f34:	9b02      	ldr	r3, [sp, #8]
 8010f36:	2200      	movs	r2, #0
 8010f38:	701a      	strb	r2, [r3, #0]
 8010f3a:	b01c      	add	sp, #112	; 0x70
 8010f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f40:	b003      	add	sp, #12
 8010f42:	4770      	bx	lr
 8010f44:	20000024 	.word	0x20000024
 8010f48:	ffff0208 	.word	0xffff0208

08010f4c <quorem>:
 8010f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f50:	6903      	ldr	r3, [r0, #16]
 8010f52:	690c      	ldr	r4, [r1, #16]
 8010f54:	42a3      	cmp	r3, r4
 8010f56:	4607      	mov	r7, r0
 8010f58:	f2c0 8081 	blt.w	801105e <quorem+0x112>
 8010f5c:	3c01      	subs	r4, #1
 8010f5e:	f101 0814 	add.w	r8, r1, #20
 8010f62:	f100 0514 	add.w	r5, r0, #20
 8010f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f6a:	9301      	str	r3, [sp, #4]
 8010f6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010f70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f74:	3301      	adds	r3, #1
 8010f76:	429a      	cmp	r2, r3
 8010f78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010f7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f80:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f84:	d331      	bcc.n	8010fea <quorem+0x9e>
 8010f86:	f04f 0e00 	mov.w	lr, #0
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	46ac      	mov	ip, r5
 8010f8e:	46f2      	mov	sl, lr
 8010f90:	f850 2b04 	ldr.w	r2, [r0], #4
 8010f94:	b293      	uxth	r3, r2
 8010f96:	fb06 e303 	mla	r3, r6, r3, lr
 8010f9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	ebaa 0303 	sub.w	r3, sl, r3
 8010fa4:	f8dc a000 	ldr.w	sl, [ip]
 8010fa8:	0c12      	lsrs	r2, r2, #16
 8010faa:	fa13 f38a 	uxtah	r3, r3, sl
 8010fae:	fb06 e202 	mla	r2, r6, r2, lr
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	9b00      	ldr	r3, [sp, #0]
 8010fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010fba:	b292      	uxth	r2, r2
 8010fbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010fc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8010fc8:	4581      	cmp	r9, r0
 8010fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fce:	f84c 3b04 	str.w	r3, [ip], #4
 8010fd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010fd6:	d2db      	bcs.n	8010f90 <quorem+0x44>
 8010fd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8010fdc:	b92b      	cbnz	r3, 8010fea <quorem+0x9e>
 8010fde:	9b01      	ldr	r3, [sp, #4]
 8010fe0:	3b04      	subs	r3, #4
 8010fe2:	429d      	cmp	r5, r3
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	d32e      	bcc.n	8011046 <quorem+0xfa>
 8010fe8:	613c      	str	r4, [r7, #16]
 8010fea:	4638      	mov	r0, r7
 8010fec:	f001 f8bc 	bl	8012168 <__mcmp>
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	db24      	blt.n	801103e <quorem+0xf2>
 8010ff4:	3601      	adds	r6, #1
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	f04f 0c00 	mov.w	ip, #0
 8010ffc:	f858 2b04 	ldr.w	r2, [r8], #4
 8011000:	f8d0 e000 	ldr.w	lr, [r0]
 8011004:	b293      	uxth	r3, r2
 8011006:	ebac 0303 	sub.w	r3, ip, r3
 801100a:	0c12      	lsrs	r2, r2, #16
 801100c:	fa13 f38e 	uxtah	r3, r3, lr
 8011010:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011018:	b29b      	uxth	r3, r3
 801101a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801101e:	45c1      	cmp	r9, r8
 8011020:	f840 3b04 	str.w	r3, [r0], #4
 8011024:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011028:	d2e8      	bcs.n	8010ffc <quorem+0xb0>
 801102a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801102e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011032:	b922      	cbnz	r2, 801103e <quorem+0xf2>
 8011034:	3b04      	subs	r3, #4
 8011036:	429d      	cmp	r5, r3
 8011038:	461a      	mov	r2, r3
 801103a:	d30a      	bcc.n	8011052 <quorem+0x106>
 801103c:	613c      	str	r4, [r7, #16]
 801103e:	4630      	mov	r0, r6
 8011040:	b003      	add	sp, #12
 8011042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011046:	6812      	ldr	r2, [r2, #0]
 8011048:	3b04      	subs	r3, #4
 801104a:	2a00      	cmp	r2, #0
 801104c:	d1cc      	bne.n	8010fe8 <quorem+0x9c>
 801104e:	3c01      	subs	r4, #1
 8011050:	e7c7      	b.n	8010fe2 <quorem+0x96>
 8011052:	6812      	ldr	r2, [r2, #0]
 8011054:	3b04      	subs	r3, #4
 8011056:	2a00      	cmp	r2, #0
 8011058:	d1f0      	bne.n	801103c <quorem+0xf0>
 801105a:	3c01      	subs	r4, #1
 801105c:	e7eb      	b.n	8011036 <quorem+0xea>
 801105e:	2000      	movs	r0, #0
 8011060:	e7ee      	b.n	8011040 <quorem+0xf4>
 8011062:	0000      	movs	r0, r0
 8011064:	0000      	movs	r0, r0
	...

08011068 <_dtoa_r>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	ed2d 8b04 	vpush	{d8-d9}
 8011070:	ec57 6b10 	vmov	r6, r7, d0
 8011074:	b093      	sub	sp, #76	; 0x4c
 8011076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801107c:	9106      	str	r1, [sp, #24]
 801107e:	ee10 aa10 	vmov	sl, s0
 8011082:	4604      	mov	r4, r0
 8011084:	9209      	str	r2, [sp, #36]	; 0x24
 8011086:	930c      	str	r3, [sp, #48]	; 0x30
 8011088:	46bb      	mov	fp, r7
 801108a:	b975      	cbnz	r5, 80110aa <_dtoa_r+0x42>
 801108c:	2010      	movs	r0, #16
 801108e:	f7ff f9bd 	bl	801040c <malloc>
 8011092:	4602      	mov	r2, r0
 8011094:	6260      	str	r0, [r4, #36]	; 0x24
 8011096:	b920      	cbnz	r0, 80110a2 <_dtoa_r+0x3a>
 8011098:	4ba7      	ldr	r3, [pc, #668]	; (8011338 <_dtoa_r+0x2d0>)
 801109a:	21ea      	movs	r1, #234	; 0xea
 801109c:	48a7      	ldr	r0, [pc, #668]	; (801133c <_dtoa_r+0x2d4>)
 801109e:	f001 fad7 	bl	8012650 <__assert_func>
 80110a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80110a6:	6005      	str	r5, [r0, #0]
 80110a8:	60c5      	str	r5, [r0, #12]
 80110aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110ac:	6819      	ldr	r1, [r3, #0]
 80110ae:	b151      	cbz	r1, 80110c6 <_dtoa_r+0x5e>
 80110b0:	685a      	ldr	r2, [r3, #4]
 80110b2:	604a      	str	r2, [r1, #4]
 80110b4:	2301      	movs	r3, #1
 80110b6:	4093      	lsls	r3, r2
 80110b8:	608b      	str	r3, [r1, #8]
 80110ba:	4620      	mov	r0, r4
 80110bc:	f000 fe12 	bl	8011ce4 <_Bfree>
 80110c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110c2:	2200      	movs	r2, #0
 80110c4:	601a      	str	r2, [r3, #0]
 80110c6:	1e3b      	subs	r3, r7, #0
 80110c8:	bfaa      	itet	ge
 80110ca:	2300      	movge	r3, #0
 80110cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80110d0:	f8c8 3000 	strge.w	r3, [r8]
 80110d4:	4b9a      	ldr	r3, [pc, #616]	; (8011340 <_dtoa_r+0x2d8>)
 80110d6:	bfbc      	itt	lt
 80110d8:	2201      	movlt	r2, #1
 80110da:	f8c8 2000 	strlt.w	r2, [r8]
 80110de:	ea33 030b 	bics.w	r3, r3, fp
 80110e2:	d11b      	bne.n	801111c <_dtoa_r+0xb4>
 80110e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80110ea:	6013      	str	r3, [r2, #0]
 80110ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110f0:	4333      	orrs	r3, r6
 80110f2:	f000 8592 	beq.w	8011c1a <_dtoa_r+0xbb2>
 80110f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110f8:	b963      	cbnz	r3, 8011114 <_dtoa_r+0xac>
 80110fa:	4b92      	ldr	r3, [pc, #584]	; (8011344 <_dtoa_r+0x2dc>)
 80110fc:	e022      	b.n	8011144 <_dtoa_r+0xdc>
 80110fe:	4b92      	ldr	r3, [pc, #584]	; (8011348 <_dtoa_r+0x2e0>)
 8011100:	9301      	str	r3, [sp, #4]
 8011102:	3308      	adds	r3, #8
 8011104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011106:	6013      	str	r3, [r2, #0]
 8011108:	9801      	ldr	r0, [sp, #4]
 801110a:	b013      	add	sp, #76	; 0x4c
 801110c:	ecbd 8b04 	vpop	{d8-d9}
 8011110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011114:	4b8b      	ldr	r3, [pc, #556]	; (8011344 <_dtoa_r+0x2dc>)
 8011116:	9301      	str	r3, [sp, #4]
 8011118:	3303      	adds	r3, #3
 801111a:	e7f3      	b.n	8011104 <_dtoa_r+0x9c>
 801111c:	2200      	movs	r2, #0
 801111e:	2300      	movs	r3, #0
 8011120:	4650      	mov	r0, sl
 8011122:	4659      	mov	r1, fp
 8011124:	f7ef fcd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011128:	ec4b ab19 	vmov	d9, sl, fp
 801112c:	4680      	mov	r8, r0
 801112e:	b158      	cbz	r0, 8011148 <_dtoa_r+0xe0>
 8011130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011132:	2301      	movs	r3, #1
 8011134:	6013      	str	r3, [r2, #0]
 8011136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011138:	2b00      	cmp	r3, #0
 801113a:	f000 856b 	beq.w	8011c14 <_dtoa_r+0xbac>
 801113e:	4883      	ldr	r0, [pc, #524]	; (801134c <_dtoa_r+0x2e4>)
 8011140:	6018      	str	r0, [r3, #0]
 8011142:	1e43      	subs	r3, r0, #1
 8011144:	9301      	str	r3, [sp, #4]
 8011146:	e7df      	b.n	8011108 <_dtoa_r+0xa0>
 8011148:	ec4b ab10 	vmov	d0, sl, fp
 801114c:	aa10      	add	r2, sp, #64	; 0x40
 801114e:	a911      	add	r1, sp, #68	; 0x44
 8011150:	4620      	mov	r0, r4
 8011152:	f001 f8af 	bl	80122b4 <__d2b>
 8011156:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801115a:	ee08 0a10 	vmov	s16, r0
 801115e:	2d00      	cmp	r5, #0
 8011160:	f000 8084 	beq.w	801126c <_dtoa_r+0x204>
 8011164:	ee19 3a90 	vmov	r3, s19
 8011168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801116c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011170:	4656      	mov	r6, sl
 8011172:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801117a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801117e:	4b74      	ldr	r3, [pc, #464]	; (8011350 <_dtoa_r+0x2e8>)
 8011180:	2200      	movs	r2, #0
 8011182:	4630      	mov	r0, r6
 8011184:	4639      	mov	r1, r7
 8011186:	f7ef f87f 	bl	8000288 <__aeabi_dsub>
 801118a:	a365      	add	r3, pc, #404	; (adr r3, 8011320 <_dtoa_r+0x2b8>)
 801118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011190:	f7ef fa32 	bl	80005f8 <__aeabi_dmul>
 8011194:	a364      	add	r3, pc, #400	; (adr r3, 8011328 <_dtoa_r+0x2c0>)
 8011196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119a:	f7ef f877 	bl	800028c <__adddf3>
 801119e:	4606      	mov	r6, r0
 80111a0:	4628      	mov	r0, r5
 80111a2:	460f      	mov	r7, r1
 80111a4:	f7ef f9be 	bl	8000524 <__aeabi_i2d>
 80111a8:	a361      	add	r3, pc, #388	; (adr r3, 8011330 <_dtoa_r+0x2c8>)
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	f7ef fa23 	bl	80005f8 <__aeabi_dmul>
 80111b2:	4602      	mov	r2, r0
 80111b4:	460b      	mov	r3, r1
 80111b6:	4630      	mov	r0, r6
 80111b8:	4639      	mov	r1, r7
 80111ba:	f7ef f867 	bl	800028c <__adddf3>
 80111be:	4606      	mov	r6, r0
 80111c0:	460f      	mov	r7, r1
 80111c2:	f7ef fcc9 	bl	8000b58 <__aeabi_d2iz>
 80111c6:	2200      	movs	r2, #0
 80111c8:	9000      	str	r0, [sp, #0]
 80111ca:	2300      	movs	r3, #0
 80111cc:	4630      	mov	r0, r6
 80111ce:	4639      	mov	r1, r7
 80111d0:	f7ef fc84 	bl	8000adc <__aeabi_dcmplt>
 80111d4:	b150      	cbz	r0, 80111ec <_dtoa_r+0x184>
 80111d6:	9800      	ldr	r0, [sp, #0]
 80111d8:	f7ef f9a4 	bl	8000524 <__aeabi_i2d>
 80111dc:	4632      	mov	r2, r6
 80111de:	463b      	mov	r3, r7
 80111e0:	f7ef fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80111e4:	b910      	cbnz	r0, 80111ec <_dtoa_r+0x184>
 80111e6:	9b00      	ldr	r3, [sp, #0]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	9b00      	ldr	r3, [sp, #0]
 80111ee:	2b16      	cmp	r3, #22
 80111f0:	d85a      	bhi.n	80112a8 <_dtoa_r+0x240>
 80111f2:	9a00      	ldr	r2, [sp, #0]
 80111f4:	4b57      	ldr	r3, [pc, #348]	; (8011354 <_dtoa_r+0x2ec>)
 80111f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fe:	ec51 0b19 	vmov	r0, r1, d9
 8011202:	f7ef fc6b 	bl	8000adc <__aeabi_dcmplt>
 8011206:	2800      	cmp	r0, #0
 8011208:	d050      	beq.n	80112ac <_dtoa_r+0x244>
 801120a:	9b00      	ldr	r3, [sp, #0]
 801120c:	3b01      	subs	r3, #1
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	2300      	movs	r3, #0
 8011212:	930b      	str	r3, [sp, #44]	; 0x2c
 8011214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011216:	1b5d      	subs	r5, r3, r5
 8011218:	1e6b      	subs	r3, r5, #1
 801121a:	9305      	str	r3, [sp, #20]
 801121c:	bf45      	ittet	mi
 801121e:	f1c5 0301 	rsbmi	r3, r5, #1
 8011222:	9304      	strmi	r3, [sp, #16]
 8011224:	2300      	movpl	r3, #0
 8011226:	2300      	movmi	r3, #0
 8011228:	bf4c      	ite	mi
 801122a:	9305      	strmi	r3, [sp, #20]
 801122c:	9304      	strpl	r3, [sp, #16]
 801122e:	9b00      	ldr	r3, [sp, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	db3d      	blt.n	80112b0 <_dtoa_r+0x248>
 8011234:	9b05      	ldr	r3, [sp, #20]
 8011236:	9a00      	ldr	r2, [sp, #0]
 8011238:	920a      	str	r2, [sp, #40]	; 0x28
 801123a:	4413      	add	r3, r2
 801123c:	9305      	str	r3, [sp, #20]
 801123e:	2300      	movs	r3, #0
 8011240:	9307      	str	r3, [sp, #28]
 8011242:	9b06      	ldr	r3, [sp, #24]
 8011244:	2b09      	cmp	r3, #9
 8011246:	f200 8089 	bhi.w	801135c <_dtoa_r+0x2f4>
 801124a:	2b05      	cmp	r3, #5
 801124c:	bfc4      	itt	gt
 801124e:	3b04      	subgt	r3, #4
 8011250:	9306      	strgt	r3, [sp, #24]
 8011252:	9b06      	ldr	r3, [sp, #24]
 8011254:	f1a3 0302 	sub.w	r3, r3, #2
 8011258:	bfcc      	ite	gt
 801125a:	2500      	movgt	r5, #0
 801125c:	2501      	movle	r5, #1
 801125e:	2b03      	cmp	r3, #3
 8011260:	f200 8087 	bhi.w	8011372 <_dtoa_r+0x30a>
 8011264:	e8df f003 	tbb	[pc, r3]
 8011268:	59383a2d 	.word	0x59383a2d
 801126c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011270:	441d      	add	r5, r3
 8011272:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011276:	2b20      	cmp	r3, #32
 8011278:	bfc1      	itttt	gt
 801127a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801127e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011282:	fa0b f303 	lslgt.w	r3, fp, r3
 8011286:	fa26 f000 	lsrgt.w	r0, r6, r0
 801128a:	bfda      	itte	le
 801128c:	f1c3 0320 	rsble	r3, r3, #32
 8011290:	fa06 f003 	lslle.w	r0, r6, r3
 8011294:	4318      	orrgt	r0, r3
 8011296:	f7ef f935 	bl	8000504 <__aeabi_ui2d>
 801129a:	2301      	movs	r3, #1
 801129c:	4606      	mov	r6, r0
 801129e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80112a2:	3d01      	subs	r5, #1
 80112a4:	930e      	str	r3, [sp, #56]	; 0x38
 80112a6:	e76a      	b.n	801117e <_dtoa_r+0x116>
 80112a8:	2301      	movs	r3, #1
 80112aa:	e7b2      	b.n	8011212 <_dtoa_r+0x1aa>
 80112ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80112ae:	e7b1      	b.n	8011214 <_dtoa_r+0x1ac>
 80112b0:	9b04      	ldr	r3, [sp, #16]
 80112b2:	9a00      	ldr	r2, [sp, #0]
 80112b4:	1a9b      	subs	r3, r3, r2
 80112b6:	9304      	str	r3, [sp, #16]
 80112b8:	4253      	negs	r3, r2
 80112ba:	9307      	str	r3, [sp, #28]
 80112bc:	2300      	movs	r3, #0
 80112be:	930a      	str	r3, [sp, #40]	; 0x28
 80112c0:	e7bf      	b.n	8011242 <_dtoa_r+0x1da>
 80112c2:	2300      	movs	r3, #0
 80112c4:	9308      	str	r3, [sp, #32]
 80112c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	dc55      	bgt.n	8011378 <_dtoa_r+0x310>
 80112cc:	2301      	movs	r3, #1
 80112ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80112d2:	461a      	mov	r2, r3
 80112d4:	9209      	str	r2, [sp, #36]	; 0x24
 80112d6:	e00c      	b.n	80112f2 <_dtoa_r+0x28a>
 80112d8:	2301      	movs	r3, #1
 80112da:	e7f3      	b.n	80112c4 <_dtoa_r+0x25c>
 80112dc:	2300      	movs	r3, #0
 80112de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112e0:	9308      	str	r3, [sp, #32]
 80112e2:	9b00      	ldr	r3, [sp, #0]
 80112e4:	4413      	add	r3, r2
 80112e6:	9302      	str	r3, [sp, #8]
 80112e8:	3301      	adds	r3, #1
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	9303      	str	r3, [sp, #12]
 80112ee:	bfb8      	it	lt
 80112f0:	2301      	movlt	r3, #1
 80112f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80112f4:	2200      	movs	r2, #0
 80112f6:	6042      	str	r2, [r0, #4]
 80112f8:	2204      	movs	r2, #4
 80112fa:	f102 0614 	add.w	r6, r2, #20
 80112fe:	429e      	cmp	r6, r3
 8011300:	6841      	ldr	r1, [r0, #4]
 8011302:	d93d      	bls.n	8011380 <_dtoa_r+0x318>
 8011304:	4620      	mov	r0, r4
 8011306:	f000 fcad 	bl	8011c64 <_Balloc>
 801130a:	9001      	str	r0, [sp, #4]
 801130c:	2800      	cmp	r0, #0
 801130e:	d13b      	bne.n	8011388 <_dtoa_r+0x320>
 8011310:	4b11      	ldr	r3, [pc, #68]	; (8011358 <_dtoa_r+0x2f0>)
 8011312:	4602      	mov	r2, r0
 8011314:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011318:	e6c0      	b.n	801109c <_dtoa_r+0x34>
 801131a:	2301      	movs	r3, #1
 801131c:	e7df      	b.n	80112de <_dtoa_r+0x276>
 801131e:	bf00      	nop
 8011320:	636f4361 	.word	0x636f4361
 8011324:	3fd287a7 	.word	0x3fd287a7
 8011328:	8b60c8b3 	.word	0x8b60c8b3
 801132c:	3fc68a28 	.word	0x3fc68a28
 8011330:	509f79fb 	.word	0x509f79fb
 8011334:	3fd34413 	.word	0x3fd34413
 8011338:	08014635 	.word	0x08014635
 801133c:	0801464c 	.word	0x0801464c
 8011340:	7ff00000 	.word	0x7ff00000
 8011344:	08014631 	.word	0x08014631
 8011348:	08014628 	.word	0x08014628
 801134c:	08014605 	.word	0x08014605
 8011350:	3ff80000 	.word	0x3ff80000
 8011354:	08014740 	.word	0x08014740
 8011358:	080146a7 	.word	0x080146a7
 801135c:	2501      	movs	r5, #1
 801135e:	2300      	movs	r3, #0
 8011360:	9306      	str	r3, [sp, #24]
 8011362:	9508      	str	r5, [sp, #32]
 8011364:	f04f 33ff 	mov.w	r3, #4294967295
 8011368:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801136c:	2200      	movs	r2, #0
 801136e:	2312      	movs	r3, #18
 8011370:	e7b0      	b.n	80112d4 <_dtoa_r+0x26c>
 8011372:	2301      	movs	r3, #1
 8011374:	9308      	str	r3, [sp, #32]
 8011376:	e7f5      	b.n	8011364 <_dtoa_r+0x2fc>
 8011378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801137a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801137e:	e7b8      	b.n	80112f2 <_dtoa_r+0x28a>
 8011380:	3101      	adds	r1, #1
 8011382:	6041      	str	r1, [r0, #4]
 8011384:	0052      	lsls	r2, r2, #1
 8011386:	e7b8      	b.n	80112fa <_dtoa_r+0x292>
 8011388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801138a:	9a01      	ldr	r2, [sp, #4]
 801138c:	601a      	str	r2, [r3, #0]
 801138e:	9b03      	ldr	r3, [sp, #12]
 8011390:	2b0e      	cmp	r3, #14
 8011392:	f200 809d 	bhi.w	80114d0 <_dtoa_r+0x468>
 8011396:	2d00      	cmp	r5, #0
 8011398:	f000 809a 	beq.w	80114d0 <_dtoa_r+0x468>
 801139c:	9b00      	ldr	r3, [sp, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	dd32      	ble.n	8011408 <_dtoa_r+0x3a0>
 80113a2:	4ab7      	ldr	r2, [pc, #732]	; (8011680 <_dtoa_r+0x618>)
 80113a4:	f003 030f 	and.w	r3, r3, #15
 80113a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80113ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80113b0:	9b00      	ldr	r3, [sp, #0]
 80113b2:	05d8      	lsls	r0, r3, #23
 80113b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80113b8:	d516      	bpl.n	80113e8 <_dtoa_r+0x380>
 80113ba:	4bb2      	ldr	r3, [pc, #712]	; (8011684 <_dtoa_r+0x61c>)
 80113bc:	ec51 0b19 	vmov	r0, r1, d9
 80113c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80113c4:	f7ef fa42 	bl	800084c <__aeabi_ddiv>
 80113c8:	f007 070f 	and.w	r7, r7, #15
 80113cc:	4682      	mov	sl, r0
 80113ce:	468b      	mov	fp, r1
 80113d0:	2503      	movs	r5, #3
 80113d2:	4eac      	ldr	r6, [pc, #688]	; (8011684 <_dtoa_r+0x61c>)
 80113d4:	b957      	cbnz	r7, 80113ec <_dtoa_r+0x384>
 80113d6:	4642      	mov	r2, r8
 80113d8:	464b      	mov	r3, r9
 80113da:	4650      	mov	r0, sl
 80113dc:	4659      	mov	r1, fp
 80113de:	f7ef fa35 	bl	800084c <__aeabi_ddiv>
 80113e2:	4682      	mov	sl, r0
 80113e4:	468b      	mov	fp, r1
 80113e6:	e028      	b.n	801143a <_dtoa_r+0x3d2>
 80113e8:	2502      	movs	r5, #2
 80113ea:	e7f2      	b.n	80113d2 <_dtoa_r+0x36a>
 80113ec:	07f9      	lsls	r1, r7, #31
 80113ee:	d508      	bpl.n	8011402 <_dtoa_r+0x39a>
 80113f0:	4640      	mov	r0, r8
 80113f2:	4649      	mov	r1, r9
 80113f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80113f8:	f7ef f8fe 	bl	80005f8 <__aeabi_dmul>
 80113fc:	3501      	adds	r5, #1
 80113fe:	4680      	mov	r8, r0
 8011400:	4689      	mov	r9, r1
 8011402:	107f      	asrs	r7, r7, #1
 8011404:	3608      	adds	r6, #8
 8011406:	e7e5      	b.n	80113d4 <_dtoa_r+0x36c>
 8011408:	f000 809b 	beq.w	8011542 <_dtoa_r+0x4da>
 801140c:	9b00      	ldr	r3, [sp, #0]
 801140e:	4f9d      	ldr	r7, [pc, #628]	; (8011684 <_dtoa_r+0x61c>)
 8011410:	425e      	negs	r6, r3
 8011412:	4b9b      	ldr	r3, [pc, #620]	; (8011680 <_dtoa_r+0x618>)
 8011414:	f006 020f 	and.w	r2, r6, #15
 8011418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011420:	ec51 0b19 	vmov	r0, r1, d9
 8011424:	f7ef f8e8 	bl	80005f8 <__aeabi_dmul>
 8011428:	1136      	asrs	r6, r6, #4
 801142a:	4682      	mov	sl, r0
 801142c:	468b      	mov	fp, r1
 801142e:	2300      	movs	r3, #0
 8011430:	2502      	movs	r5, #2
 8011432:	2e00      	cmp	r6, #0
 8011434:	d17a      	bne.n	801152c <_dtoa_r+0x4c4>
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1d3      	bne.n	80113e2 <_dtoa_r+0x37a>
 801143a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801143c:	2b00      	cmp	r3, #0
 801143e:	f000 8082 	beq.w	8011546 <_dtoa_r+0x4de>
 8011442:	4b91      	ldr	r3, [pc, #580]	; (8011688 <_dtoa_r+0x620>)
 8011444:	2200      	movs	r2, #0
 8011446:	4650      	mov	r0, sl
 8011448:	4659      	mov	r1, fp
 801144a:	f7ef fb47 	bl	8000adc <__aeabi_dcmplt>
 801144e:	2800      	cmp	r0, #0
 8011450:	d079      	beq.n	8011546 <_dtoa_r+0x4de>
 8011452:	9b03      	ldr	r3, [sp, #12]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d076      	beq.n	8011546 <_dtoa_r+0x4de>
 8011458:	9b02      	ldr	r3, [sp, #8]
 801145a:	2b00      	cmp	r3, #0
 801145c:	dd36      	ble.n	80114cc <_dtoa_r+0x464>
 801145e:	9b00      	ldr	r3, [sp, #0]
 8011460:	4650      	mov	r0, sl
 8011462:	4659      	mov	r1, fp
 8011464:	1e5f      	subs	r7, r3, #1
 8011466:	2200      	movs	r2, #0
 8011468:	4b88      	ldr	r3, [pc, #544]	; (801168c <_dtoa_r+0x624>)
 801146a:	f7ef f8c5 	bl	80005f8 <__aeabi_dmul>
 801146e:	9e02      	ldr	r6, [sp, #8]
 8011470:	4682      	mov	sl, r0
 8011472:	468b      	mov	fp, r1
 8011474:	3501      	adds	r5, #1
 8011476:	4628      	mov	r0, r5
 8011478:	f7ef f854 	bl	8000524 <__aeabi_i2d>
 801147c:	4652      	mov	r2, sl
 801147e:	465b      	mov	r3, fp
 8011480:	f7ef f8ba 	bl	80005f8 <__aeabi_dmul>
 8011484:	4b82      	ldr	r3, [pc, #520]	; (8011690 <_dtoa_r+0x628>)
 8011486:	2200      	movs	r2, #0
 8011488:	f7ee ff00 	bl	800028c <__adddf3>
 801148c:	46d0      	mov	r8, sl
 801148e:	46d9      	mov	r9, fp
 8011490:	4682      	mov	sl, r0
 8011492:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011496:	2e00      	cmp	r6, #0
 8011498:	d158      	bne.n	801154c <_dtoa_r+0x4e4>
 801149a:	4b7e      	ldr	r3, [pc, #504]	; (8011694 <_dtoa_r+0x62c>)
 801149c:	2200      	movs	r2, #0
 801149e:	4640      	mov	r0, r8
 80114a0:	4649      	mov	r1, r9
 80114a2:	f7ee fef1 	bl	8000288 <__aeabi_dsub>
 80114a6:	4652      	mov	r2, sl
 80114a8:	465b      	mov	r3, fp
 80114aa:	4680      	mov	r8, r0
 80114ac:	4689      	mov	r9, r1
 80114ae:	f7ef fb33 	bl	8000b18 <__aeabi_dcmpgt>
 80114b2:	2800      	cmp	r0, #0
 80114b4:	f040 8295 	bne.w	80119e2 <_dtoa_r+0x97a>
 80114b8:	4652      	mov	r2, sl
 80114ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80114be:	4640      	mov	r0, r8
 80114c0:	4649      	mov	r1, r9
 80114c2:	f7ef fb0b 	bl	8000adc <__aeabi_dcmplt>
 80114c6:	2800      	cmp	r0, #0
 80114c8:	f040 8289 	bne.w	80119de <_dtoa_r+0x976>
 80114cc:	ec5b ab19 	vmov	sl, fp, d9
 80114d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	f2c0 8148 	blt.w	8011768 <_dtoa_r+0x700>
 80114d8:	9a00      	ldr	r2, [sp, #0]
 80114da:	2a0e      	cmp	r2, #14
 80114dc:	f300 8144 	bgt.w	8011768 <_dtoa_r+0x700>
 80114e0:	4b67      	ldr	r3, [pc, #412]	; (8011680 <_dtoa_r+0x618>)
 80114e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80114e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80114ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	f280 80d5 	bge.w	801169c <_dtoa_r+0x634>
 80114f2:	9b03      	ldr	r3, [sp, #12]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f300 80d1 	bgt.w	801169c <_dtoa_r+0x634>
 80114fa:	f040 826f 	bne.w	80119dc <_dtoa_r+0x974>
 80114fe:	4b65      	ldr	r3, [pc, #404]	; (8011694 <_dtoa_r+0x62c>)
 8011500:	2200      	movs	r2, #0
 8011502:	4640      	mov	r0, r8
 8011504:	4649      	mov	r1, r9
 8011506:	f7ef f877 	bl	80005f8 <__aeabi_dmul>
 801150a:	4652      	mov	r2, sl
 801150c:	465b      	mov	r3, fp
 801150e:	f7ef faf9 	bl	8000b04 <__aeabi_dcmpge>
 8011512:	9e03      	ldr	r6, [sp, #12]
 8011514:	4637      	mov	r7, r6
 8011516:	2800      	cmp	r0, #0
 8011518:	f040 8245 	bne.w	80119a6 <_dtoa_r+0x93e>
 801151c:	9d01      	ldr	r5, [sp, #4]
 801151e:	2331      	movs	r3, #49	; 0x31
 8011520:	f805 3b01 	strb.w	r3, [r5], #1
 8011524:	9b00      	ldr	r3, [sp, #0]
 8011526:	3301      	adds	r3, #1
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	e240      	b.n	80119ae <_dtoa_r+0x946>
 801152c:	07f2      	lsls	r2, r6, #31
 801152e:	d505      	bpl.n	801153c <_dtoa_r+0x4d4>
 8011530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011534:	f7ef f860 	bl	80005f8 <__aeabi_dmul>
 8011538:	3501      	adds	r5, #1
 801153a:	2301      	movs	r3, #1
 801153c:	1076      	asrs	r6, r6, #1
 801153e:	3708      	adds	r7, #8
 8011540:	e777      	b.n	8011432 <_dtoa_r+0x3ca>
 8011542:	2502      	movs	r5, #2
 8011544:	e779      	b.n	801143a <_dtoa_r+0x3d2>
 8011546:	9f00      	ldr	r7, [sp, #0]
 8011548:	9e03      	ldr	r6, [sp, #12]
 801154a:	e794      	b.n	8011476 <_dtoa_r+0x40e>
 801154c:	9901      	ldr	r1, [sp, #4]
 801154e:	4b4c      	ldr	r3, [pc, #304]	; (8011680 <_dtoa_r+0x618>)
 8011550:	4431      	add	r1, r6
 8011552:	910d      	str	r1, [sp, #52]	; 0x34
 8011554:	9908      	ldr	r1, [sp, #32]
 8011556:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801155a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801155e:	2900      	cmp	r1, #0
 8011560:	d043      	beq.n	80115ea <_dtoa_r+0x582>
 8011562:	494d      	ldr	r1, [pc, #308]	; (8011698 <_dtoa_r+0x630>)
 8011564:	2000      	movs	r0, #0
 8011566:	f7ef f971 	bl	800084c <__aeabi_ddiv>
 801156a:	4652      	mov	r2, sl
 801156c:	465b      	mov	r3, fp
 801156e:	f7ee fe8b 	bl	8000288 <__aeabi_dsub>
 8011572:	9d01      	ldr	r5, [sp, #4]
 8011574:	4682      	mov	sl, r0
 8011576:	468b      	mov	fp, r1
 8011578:	4649      	mov	r1, r9
 801157a:	4640      	mov	r0, r8
 801157c:	f7ef faec 	bl	8000b58 <__aeabi_d2iz>
 8011580:	4606      	mov	r6, r0
 8011582:	f7ee ffcf 	bl	8000524 <__aeabi_i2d>
 8011586:	4602      	mov	r2, r0
 8011588:	460b      	mov	r3, r1
 801158a:	4640      	mov	r0, r8
 801158c:	4649      	mov	r1, r9
 801158e:	f7ee fe7b 	bl	8000288 <__aeabi_dsub>
 8011592:	3630      	adds	r6, #48	; 0x30
 8011594:	f805 6b01 	strb.w	r6, [r5], #1
 8011598:	4652      	mov	r2, sl
 801159a:	465b      	mov	r3, fp
 801159c:	4680      	mov	r8, r0
 801159e:	4689      	mov	r9, r1
 80115a0:	f7ef fa9c 	bl	8000adc <__aeabi_dcmplt>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d163      	bne.n	8011670 <_dtoa_r+0x608>
 80115a8:	4642      	mov	r2, r8
 80115aa:	464b      	mov	r3, r9
 80115ac:	4936      	ldr	r1, [pc, #216]	; (8011688 <_dtoa_r+0x620>)
 80115ae:	2000      	movs	r0, #0
 80115b0:	f7ee fe6a 	bl	8000288 <__aeabi_dsub>
 80115b4:	4652      	mov	r2, sl
 80115b6:	465b      	mov	r3, fp
 80115b8:	f7ef fa90 	bl	8000adc <__aeabi_dcmplt>
 80115bc:	2800      	cmp	r0, #0
 80115be:	f040 80b5 	bne.w	801172c <_dtoa_r+0x6c4>
 80115c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115c4:	429d      	cmp	r5, r3
 80115c6:	d081      	beq.n	80114cc <_dtoa_r+0x464>
 80115c8:	4b30      	ldr	r3, [pc, #192]	; (801168c <_dtoa_r+0x624>)
 80115ca:	2200      	movs	r2, #0
 80115cc:	4650      	mov	r0, sl
 80115ce:	4659      	mov	r1, fp
 80115d0:	f7ef f812 	bl	80005f8 <__aeabi_dmul>
 80115d4:	4b2d      	ldr	r3, [pc, #180]	; (801168c <_dtoa_r+0x624>)
 80115d6:	4682      	mov	sl, r0
 80115d8:	468b      	mov	fp, r1
 80115da:	4640      	mov	r0, r8
 80115dc:	4649      	mov	r1, r9
 80115de:	2200      	movs	r2, #0
 80115e0:	f7ef f80a 	bl	80005f8 <__aeabi_dmul>
 80115e4:	4680      	mov	r8, r0
 80115e6:	4689      	mov	r9, r1
 80115e8:	e7c6      	b.n	8011578 <_dtoa_r+0x510>
 80115ea:	4650      	mov	r0, sl
 80115ec:	4659      	mov	r1, fp
 80115ee:	f7ef f803 	bl	80005f8 <__aeabi_dmul>
 80115f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115f4:	9d01      	ldr	r5, [sp, #4]
 80115f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80115f8:	4682      	mov	sl, r0
 80115fa:	468b      	mov	fp, r1
 80115fc:	4649      	mov	r1, r9
 80115fe:	4640      	mov	r0, r8
 8011600:	f7ef faaa 	bl	8000b58 <__aeabi_d2iz>
 8011604:	4606      	mov	r6, r0
 8011606:	f7ee ff8d 	bl	8000524 <__aeabi_i2d>
 801160a:	3630      	adds	r6, #48	; 0x30
 801160c:	4602      	mov	r2, r0
 801160e:	460b      	mov	r3, r1
 8011610:	4640      	mov	r0, r8
 8011612:	4649      	mov	r1, r9
 8011614:	f7ee fe38 	bl	8000288 <__aeabi_dsub>
 8011618:	f805 6b01 	strb.w	r6, [r5], #1
 801161c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801161e:	429d      	cmp	r5, r3
 8011620:	4680      	mov	r8, r0
 8011622:	4689      	mov	r9, r1
 8011624:	f04f 0200 	mov.w	r2, #0
 8011628:	d124      	bne.n	8011674 <_dtoa_r+0x60c>
 801162a:	4b1b      	ldr	r3, [pc, #108]	; (8011698 <_dtoa_r+0x630>)
 801162c:	4650      	mov	r0, sl
 801162e:	4659      	mov	r1, fp
 8011630:	f7ee fe2c 	bl	800028c <__adddf3>
 8011634:	4602      	mov	r2, r0
 8011636:	460b      	mov	r3, r1
 8011638:	4640      	mov	r0, r8
 801163a:	4649      	mov	r1, r9
 801163c:	f7ef fa6c 	bl	8000b18 <__aeabi_dcmpgt>
 8011640:	2800      	cmp	r0, #0
 8011642:	d173      	bne.n	801172c <_dtoa_r+0x6c4>
 8011644:	4652      	mov	r2, sl
 8011646:	465b      	mov	r3, fp
 8011648:	4913      	ldr	r1, [pc, #76]	; (8011698 <_dtoa_r+0x630>)
 801164a:	2000      	movs	r0, #0
 801164c:	f7ee fe1c 	bl	8000288 <__aeabi_dsub>
 8011650:	4602      	mov	r2, r0
 8011652:	460b      	mov	r3, r1
 8011654:	4640      	mov	r0, r8
 8011656:	4649      	mov	r1, r9
 8011658:	f7ef fa40 	bl	8000adc <__aeabi_dcmplt>
 801165c:	2800      	cmp	r0, #0
 801165e:	f43f af35 	beq.w	80114cc <_dtoa_r+0x464>
 8011662:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011664:	1e6b      	subs	r3, r5, #1
 8011666:	930f      	str	r3, [sp, #60]	; 0x3c
 8011668:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801166c:	2b30      	cmp	r3, #48	; 0x30
 801166e:	d0f8      	beq.n	8011662 <_dtoa_r+0x5fa>
 8011670:	9700      	str	r7, [sp, #0]
 8011672:	e049      	b.n	8011708 <_dtoa_r+0x6a0>
 8011674:	4b05      	ldr	r3, [pc, #20]	; (801168c <_dtoa_r+0x624>)
 8011676:	f7ee ffbf 	bl	80005f8 <__aeabi_dmul>
 801167a:	4680      	mov	r8, r0
 801167c:	4689      	mov	r9, r1
 801167e:	e7bd      	b.n	80115fc <_dtoa_r+0x594>
 8011680:	08014740 	.word	0x08014740
 8011684:	08014718 	.word	0x08014718
 8011688:	3ff00000 	.word	0x3ff00000
 801168c:	40240000 	.word	0x40240000
 8011690:	401c0000 	.word	0x401c0000
 8011694:	40140000 	.word	0x40140000
 8011698:	3fe00000 	.word	0x3fe00000
 801169c:	9d01      	ldr	r5, [sp, #4]
 801169e:	4656      	mov	r6, sl
 80116a0:	465f      	mov	r7, fp
 80116a2:	4642      	mov	r2, r8
 80116a4:	464b      	mov	r3, r9
 80116a6:	4630      	mov	r0, r6
 80116a8:	4639      	mov	r1, r7
 80116aa:	f7ef f8cf 	bl	800084c <__aeabi_ddiv>
 80116ae:	f7ef fa53 	bl	8000b58 <__aeabi_d2iz>
 80116b2:	4682      	mov	sl, r0
 80116b4:	f7ee ff36 	bl	8000524 <__aeabi_i2d>
 80116b8:	4642      	mov	r2, r8
 80116ba:	464b      	mov	r3, r9
 80116bc:	f7ee ff9c 	bl	80005f8 <__aeabi_dmul>
 80116c0:	4602      	mov	r2, r0
 80116c2:	460b      	mov	r3, r1
 80116c4:	4630      	mov	r0, r6
 80116c6:	4639      	mov	r1, r7
 80116c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80116cc:	f7ee fddc 	bl	8000288 <__aeabi_dsub>
 80116d0:	f805 6b01 	strb.w	r6, [r5], #1
 80116d4:	9e01      	ldr	r6, [sp, #4]
 80116d6:	9f03      	ldr	r7, [sp, #12]
 80116d8:	1bae      	subs	r6, r5, r6
 80116da:	42b7      	cmp	r7, r6
 80116dc:	4602      	mov	r2, r0
 80116de:	460b      	mov	r3, r1
 80116e0:	d135      	bne.n	801174e <_dtoa_r+0x6e6>
 80116e2:	f7ee fdd3 	bl	800028c <__adddf3>
 80116e6:	4642      	mov	r2, r8
 80116e8:	464b      	mov	r3, r9
 80116ea:	4606      	mov	r6, r0
 80116ec:	460f      	mov	r7, r1
 80116ee:	f7ef fa13 	bl	8000b18 <__aeabi_dcmpgt>
 80116f2:	b9d0      	cbnz	r0, 801172a <_dtoa_r+0x6c2>
 80116f4:	4642      	mov	r2, r8
 80116f6:	464b      	mov	r3, r9
 80116f8:	4630      	mov	r0, r6
 80116fa:	4639      	mov	r1, r7
 80116fc:	f7ef f9e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011700:	b110      	cbz	r0, 8011708 <_dtoa_r+0x6a0>
 8011702:	f01a 0f01 	tst.w	sl, #1
 8011706:	d110      	bne.n	801172a <_dtoa_r+0x6c2>
 8011708:	4620      	mov	r0, r4
 801170a:	ee18 1a10 	vmov	r1, s16
 801170e:	f000 fae9 	bl	8011ce4 <_Bfree>
 8011712:	2300      	movs	r3, #0
 8011714:	9800      	ldr	r0, [sp, #0]
 8011716:	702b      	strb	r3, [r5, #0]
 8011718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801171a:	3001      	adds	r0, #1
 801171c:	6018      	str	r0, [r3, #0]
 801171e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011720:	2b00      	cmp	r3, #0
 8011722:	f43f acf1 	beq.w	8011108 <_dtoa_r+0xa0>
 8011726:	601d      	str	r5, [r3, #0]
 8011728:	e4ee      	b.n	8011108 <_dtoa_r+0xa0>
 801172a:	9f00      	ldr	r7, [sp, #0]
 801172c:	462b      	mov	r3, r5
 801172e:	461d      	mov	r5, r3
 8011730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011734:	2a39      	cmp	r2, #57	; 0x39
 8011736:	d106      	bne.n	8011746 <_dtoa_r+0x6de>
 8011738:	9a01      	ldr	r2, [sp, #4]
 801173a:	429a      	cmp	r2, r3
 801173c:	d1f7      	bne.n	801172e <_dtoa_r+0x6c6>
 801173e:	9901      	ldr	r1, [sp, #4]
 8011740:	2230      	movs	r2, #48	; 0x30
 8011742:	3701      	adds	r7, #1
 8011744:	700a      	strb	r2, [r1, #0]
 8011746:	781a      	ldrb	r2, [r3, #0]
 8011748:	3201      	adds	r2, #1
 801174a:	701a      	strb	r2, [r3, #0]
 801174c:	e790      	b.n	8011670 <_dtoa_r+0x608>
 801174e:	4ba6      	ldr	r3, [pc, #664]	; (80119e8 <_dtoa_r+0x980>)
 8011750:	2200      	movs	r2, #0
 8011752:	f7ee ff51 	bl	80005f8 <__aeabi_dmul>
 8011756:	2200      	movs	r2, #0
 8011758:	2300      	movs	r3, #0
 801175a:	4606      	mov	r6, r0
 801175c:	460f      	mov	r7, r1
 801175e:	f7ef f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011762:	2800      	cmp	r0, #0
 8011764:	d09d      	beq.n	80116a2 <_dtoa_r+0x63a>
 8011766:	e7cf      	b.n	8011708 <_dtoa_r+0x6a0>
 8011768:	9a08      	ldr	r2, [sp, #32]
 801176a:	2a00      	cmp	r2, #0
 801176c:	f000 80d7 	beq.w	801191e <_dtoa_r+0x8b6>
 8011770:	9a06      	ldr	r2, [sp, #24]
 8011772:	2a01      	cmp	r2, #1
 8011774:	f300 80ba 	bgt.w	80118ec <_dtoa_r+0x884>
 8011778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801177a:	2a00      	cmp	r2, #0
 801177c:	f000 80b2 	beq.w	80118e4 <_dtoa_r+0x87c>
 8011780:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011784:	9e07      	ldr	r6, [sp, #28]
 8011786:	9d04      	ldr	r5, [sp, #16]
 8011788:	9a04      	ldr	r2, [sp, #16]
 801178a:	441a      	add	r2, r3
 801178c:	9204      	str	r2, [sp, #16]
 801178e:	9a05      	ldr	r2, [sp, #20]
 8011790:	2101      	movs	r1, #1
 8011792:	441a      	add	r2, r3
 8011794:	4620      	mov	r0, r4
 8011796:	9205      	str	r2, [sp, #20]
 8011798:	f000 fb5c 	bl	8011e54 <__i2b>
 801179c:	4607      	mov	r7, r0
 801179e:	2d00      	cmp	r5, #0
 80117a0:	dd0c      	ble.n	80117bc <_dtoa_r+0x754>
 80117a2:	9b05      	ldr	r3, [sp, #20]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	dd09      	ble.n	80117bc <_dtoa_r+0x754>
 80117a8:	42ab      	cmp	r3, r5
 80117aa:	9a04      	ldr	r2, [sp, #16]
 80117ac:	bfa8      	it	ge
 80117ae:	462b      	movge	r3, r5
 80117b0:	1ad2      	subs	r2, r2, r3
 80117b2:	9204      	str	r2, [sp, #16]
 80117b4:	9a05      	ldr	r2, [sp, #20]
 80117b6:	1aed      	subs	r5, r5, r3
 80117b8:	1ad3      	subs	r3, r2, r3
 80117ba:	9305      	str	r3, [sp, #20]
 80117bc:	9b07      	ldr	r3, [sp, #28]
 80117be:	b31b      	cbz	r3, 8011808 <_dtoa_r+0x7a0>
 80117c0:	9b08      	ldr	r3, [sp, #32]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f000 80af 	beq.w	8011926 <_dtoa_r+0x8be>
 80117c8:	2e00      	cmp	r6, #0
 80117ca:	dd13      	ble.n	80117f4 <_dtoa_r+0x78c>
 80117cc:	4639      	mov	r1, r7
 80117ce:	4632      	mov	r2, r6
 80117d0:	4620      	mov	r0, r4
 80117d2:	f000 fbff 	bl	8011fd4 <__pow5mult>
 80117d6:	ee18 2a10 	vmov	r2, s16
 80117da:	4601      	mov	r1, r0
 80117dc:	4607      	mov	r7, r0
 80117de:	4620      	mov	r0, r4
 80117e0:	f000 fb4e 	bl	8011e80 <__multiply>
 80117e4:	ee18 1a10 	vmov	r1, s16
 80117e8:	4680      	mov	r8, r0
 80117ea:	4620      	mov	r0, r4
 80117ec:	f000 fa7a 	bl	8011ce4 <_Bfree>
 80117f0:	ee08 8a10 	vmov	s16, r8
 80117f4:	9b07      	ldr	r3, [sp, #28]
 80117f6:	1b9a      	subs	r2, r3, r6
 80117f8:	d006      	beq.n	8011808 <_dtoa_r+0x7a0>
 80117fa:	ee18 1a10 	vmov	r1, s16
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 fbe8 	bl	8011fd4 <__pow5mult>
 8011804:	ee08 0a10 	vmov	s16, r0
 8011808:	2101      	movs	r1, #1
 801180a:	4620      	mov	r0, r4
 801180c:	f000 fb22 	bl	8011e54 <__i2b>
 8011810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011812:	2b00      	cmp	r3, #0
 8011814:	4606      	mov	r6, r0
 8011816:	f340 8088 	ble.w	801192a <_dtoa_r+0x8c2>
 801181a:	461a      	mov	r2, r3
 801181c:	4601      	mov	r1, r0
 801181e:	4620      	mov	r0, r4
 8011820:	f000 fbd8 	bl	8011fd4 <__pow5mult>
 8011824:	9b06      	ldr	r3, [sp, #24]
 8011826:	2b01      	cmp	r3, #1
 8011828:	4606      	mov	r6, r0
 801182a:	f340 8081 	ble.w	8011930 <_dtoa_r+0x8c8>
 801182e:	f04f 0800 	mov.w	r8, #0
 8011832:	6933      	ldr	r3, [r6, #16]
 8011834:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011838:	6918      	ldr	r0, [r3, #16]
 801183a:	f000 fabb 	bl	8011db4 <__hi0bits>
 801183e:	f1c0 0020 	rsb	r0, r0, #32
 8011842:	9b05      	ldr	r3, [sp, #20]
 8011844:	4418      	add	r0, r3
 8011846:	f010 001f 	ands.w	r0, r0, #31
 801184a:	f000 8092 	beq.w	8011972 <_dtoa_r+0x90a>
 801184e:	f1c0 0320 	rsb	r3, r0, #32
 8011852:	2b04      	cmp	r3, #4
 8011854:	f340 808a 	ble.w	801196c <_dtoa_r+0x904>
 8011858:	f1c0 001c 	rsb	r0, r0, #28
 801185c:	9b04      	ldr	r3, [sp, #16]
 801185e:	4403      	add	r3, r0
 8011860:	9304      	str	r3, [sp, #16]
 8011862:	9b05      	ldr	r3, [sp, #20]
 8011864:	4403      	add	r3, r0
 8011866:	4405      	add	r5, r0
 8011868:	9305      	str	r3, [sp, #20]
 801186a:	9b04      	ldr	r3, [sp, #16]
 801186c:	2b00      	cmp	r3, #0
 801186e:	dd07      	ble.n	8011880 <_dtoa_r+0x818>
 8011870:	ee18 1a10 	vmov	r1, s16
 8011874:	461a      	mov	r2, r3
 8011876:	4620      	mov	r0, r4
 8011878:	f000 fc06 	bl	8012088 <__lshift>
 801187c:	ee08 0a10 	vmov	s16, r0
 8011880:	9b05      	ldr	r3, [sp, #20]
 8011882:	2b00      	cmp	r3, #0
 8011884:	dd05      	ble.n	8011892 <_dtoa_r+0x82a>
 8011886:	4631      	mov	r1, r6
 8011888:	461a      	mov	r2, r3
 801188a:	4620      	mov	r0, r4
 801188c:	f000 fbfc 	bl	8012088 <__lshift>
 8011890:	4606      	mov	r6, r0
 8011892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011894:	2b00      	cmp	r3, #0
 8011896:	d06e      	beq.n	8011976 <_dtoa_r+0x90e>
 8011898:	ee18 0a10 	vmov	r0, s16
 801189c:	4631      	mov	r1, r6
 801189e:	f000 fc63 	bl	8012168 <__mcmp>
 80118a2:	2800      	cmp	r0, #0
 80118a4:	da67      	bge.n	8011976 <_dtoa_r+0x90e>
 80118a6:	9b00      	ldr	r3, [sp, #0]
 80118a8:	3b01      	subs	r3, #1
 80118aa:	ee18 1a10 	vmov	r1, s16
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	220a      	movs	r2, #10
 80118b2:	2300      	movs	r3, #0
 80118b4:	4620      	mov	r0, r4
 80118b6:	f000 fa37 	bl	8011d28 <__multadd>
 80118ba:	9b08      	ldr	r3, [sp, #32]
 80118bc:	ee08 0a10 	vmov	s16, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	f000 81b1 	beq.w	8011c28 <_dtoa_r+0xbc0>
 80118c6:	2300      	movs	r3, #0
 80118c8:	4639      	mov	r1, r7
 80118ca:	220a      	movs	r2, #10
 80118cc:	4620      	mov	r0, r4
 80118ce:	f000 fa2b 	bl	8011d28 <__multadd>
 80118d2:	9b02      	ldr	r3, [sp, #8]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	4607      	mov	r7, r0
 80118d8:	f300 808e 	bgt.w	80119f8 <_dtoa_r+0x990>
 80118dc:	9b06      	ldr	r3, [sp, #24]
 80118de:	2b02      	cmp	r3, #2
 80118e0:	dc51      	bgt.n	8011986 <_dtoa_r+0x91e>
 80118e2:	e089      	b.n	80119f8 <_dtoa_r+0x990>
 80118e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80118e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80118ea:	e74b      	b.n	8011784 <_dtoa_r+0x71c>
 80118ec:	9b03      	ldr	r3, [sp, #12]
 80118ee:	1e5e      	subs	r6, r3, #1
 80118f0:	9b07      	ldr	r3, [sp, #28]
 80118f2:	42b3      	cmp	r3, r6
 80118f4:	bfbf      	itttt	lt
 80118f6:	9b07      	ldrlt	r3, [sp, #28]
 80118f8:	9607      	strlt	r6, [sp, #28]
 80118fa:	1af2      	sublt	r2, r6, r3
 80118fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80118fe:	bfb6      	itet	lt
 8011900:	189b      	addlt	r3, r3, r2
 8011902:	1b9e      	subge	r6, r3, r6
 8011904:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011906:	9b03      	ldr	r3, [sp, #12]
 8011908:	bfb8      	it	lt
 801190a:	2600      	movlt	r6, #0
 801190c:	2b00      	cmp	r3, #0
 801190e:	bfb7      	itett	lt
 8011910:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011914:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011918:	1a9d      	sublt	r5, r3, r2
 801191a:	2300      	movlt	r3, #0
 801191c:	e734      	b.n	8011788 <_dtoa_r+0x720>
 801191e:	9e07      	ldr	r6, [sp, #28]
 8011920:	9d04      	ldr	r5, [sp, #16]
 8011922:	9f08      	ldr	r7, [sp, #32]
 8011924:	e73b      	b.n	801179e <_dtoa_r+0x736>
 8011926:	9a07      	ldr	r2, [sp, #28]
 8011928:	e767      	b.n	80117fa <_dtoa_r+0x792>
 801192a:	9b06      	ldr	r3, [sp, #24]
 801192c:	2b01      	cmp	r3, #1
 801192e:	dc18      	bgt.n	8011962 <_dtoa_r+0x8fa>
 8011930:	f1ba 0f00 	cmp.w	sl, #0
 8011934:	d115      	bne.n	8011962 <_dtoa_r+0x8fa>
 8011936:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801193a:	b993      	cbnz	r3, 8011962 <_dtoa_r+0x8fa>
 801193c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011940:	0d1b      	lsrs	r3, r3, #20
 8011942:	051b      	lsls	r3, r3, #20
 8011944:	b183      	cbz	r3, 8011968 <_dtoa_r+0x900>
 8011946:	9b04      	ldr	r3, [sp, #16]
 8011948:	3301      	adds	r3, #1
 801194a:	9304      	str	r3, [sp, #16]
 801194c:	9b05      	ldr	r3, [sp, #20]
 801194e:	3301      	adds	r3, #1
 8011950:	9305      	str	r3, [sp, #20]
 8011952:	f04f 0801 	mov.w	r8, #1
 8011956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011958:	2b00      	cmp	r3, #0
 801195a:	f47f af6a 	bne.w	8011832 <_dtoa_r+0x7ca>
 801195e:	2001      	movs	r0, #1
 8011960:	e76f      	b.n	8011842 <_dtoa_r+0x7da>
 8011962:	f04f 0800 	mov.w	r8, #0
 8011966:	e7f6      	b.n	8011956 <_dtoa_r+0x8ee>
 8011968:	4698      	mov	r8, r3
 801196a:	e7f4      	b.n	8011956 <_dtoa_r+0x8ee>
 801196c:	f43f af7d 	beq.w	801186a <_dtoa_r+0x802>
 8011970:	4618      	mov	r0, r3
 8011972:	301c      	adds	r0, #28
 8011974:	e772      	b.n	801185c <_dtoa_r+0x7f4>
 8011976:	9b03      	ldr	r3, [sp, #12]
 8011978:	2b00      	cmp	r3, #0
 801197a:	dc37      	bgt.n	80119ec <_dtoa_r+0x984>
 801197c:	9b06      	ldr	r3, [sp, #24]
 801197e:	2b02      	cmp	r3, #2
 8011980:	dd34      	ble.n	80119ec <_dtoa_r+0x984>
 8011982:	9b03      	ldr	r3, [sp, #12]
 8011984:	9302      	str	r3, [sp, #8]
 8011986:	9b02      	ldr	r3, [sp, #8]
 8011988:	b96b      	cbnz	r3, 80119a6 <_dtoa_r+0x93e>
 801198a:	4631      	mov	r1, r6
 801198c:	2205      	movs	r2, #5
 801198e:	4620      	mov	r0, r4
 8011990:	f000 f9ca 	bl	8011d28 <__multadd>
 8011994:	4601      	mov	r1, r0
 8011996:	4606      	mov	r6, r0
 8011998:	ee18 0a10 	vmov	r0, s16
 801199c:	f000 fbe4 	bl	8012168 <__mcmp>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	f73f adbb 	bgt.w	801151c <_dtoa_r+0x4b4>
 80119a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119a8:	9d01      	ldr	r5, [sp, #4]
 80119aa:	43db      	mvns	r3, r3
 80119ac:	9300      	str	r3, [sp, #0]
 80119ae:	f04f 0800 	mov.w	r8, #0
 80119b2:	4631      	mov	r1, r6
 80119b4:	4620      	mov	r0, r4
 80119b6:	f000 f995 	bl	8011ce4 <_Bfree>
 80119ba:	2f00      	cmp	r7, #0
 80119bc:	f43f aea4 	beq.w	8011708 <_dtoa_r+0x6a0>
 80119c0:	f1b8 0f00 	cmp.w	r8, #0
 80119c4:	d005      	beq.n	80119d2 <_dtoa_r+0x96a>
 80119c6:	45b8      	cmp	r8, r7
 80119c8:	d003      	beq.n	80119d2 <_dtoa_r+0x96a>
 80119ca:	4641      	mov	r1, r8
 80119cc:	4620      	mov	r0, r4
 80119ce:	f000 f989 	bl	8011ce4 <_Bfree>
 80119d2:	4639      	mov	r1, r7
 80119d4:	4620      	mov	r0, r4
 80119d6:	f000 f985 	bl	8011ce4 <_Bfree>
 80119da:	e695      	b.n	8011708 <_dtoa_r+0x6a0>
 80119dc:	2600      	movs	r6, #0
 80119de:	4637      	mov	r7, r6
 80119e0:	e7e1      	b.n	80119a6 <_dtoa_r+0x93e>
 80119e2:	9700      	str	r7, [sp, #0]
 80119e4:	4637      	mov	r7, r6
 80119e6:	e599      	b.n	801151c <_dtoa_r+0x4b4>
 80119e8:	40240000 	.word	0x40240000
 80119ec:	9b08      	ldr	r3, [sp, #32]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f000 80ca 	beq.w	8011b88 <_dtoa_r+0xb20>
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	9302      	str	r3, [sp, #8]
 80119f8:	2d00      	cmp	r5, #0
 80119fa:	dd05      	ble.n	8011a08 <_dtoa_r+0x9a0>
 80119fc:	4639      	mov	r1, r7
 80119fe:	462a      	mov	r2, r5
 8011a00:	4620      	mov	r0, r4
 8011a02:	f000 fb41 	bl	8012088 <__lshift>
 8011a06:	4607      	mov	r7, r0
 8011a08:	f1b8 0f00 	cmp.w	r8, #0
 8011a0c:	d05b      	beq.n	8011ac6 <_dtoa_r+0xa5e>
 8011a0e:	6879      	ldr	r1, [r7, #4]
 8011a10:	4620      	mov	r0, r4
 8011a12:	f000 f927 	bl	8011c64 <_Balloc>
 8011a16:	4605      	mov	r5, r0
 8011a18:	b928      	cbnz	r0, 8011a26 <_dtoa_r+0x9be>
 8011a1a:	4b87      	ldr	r3, [pc, #540]	; (8011c38 <_dtoa_r+0xbd0>)
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011a22:	f7ff bb3b 	b.w	801109c <_dtoa_r+0x34>
 8011a26:	693a      	ldr	r2, [r7, #16]
 8011a28:	3202      	adds	r2, #2
 8011a2a:	0092      	lsls	r2, r2, #2
 8011a2c:	f107 010c 	add.w	r1, r7, #12
 8011a30:	300c      	adds	r0, #12
 8011a32:	f7fe fcfb 	bl	801042c <memcpy>
 8011a36:	2201      	movs	r2, #1
 8011a38:	4629      	mov	r1, r5
 8011a3a:	4620      	mov	r0, r4
 8011a3c:	f000 fb24 	bl	8012088 <__lshift>
 8011a40:	9b01      	ldr	r3, [sp, #4]
 8011a42:	f103 0901 	add.w	r9, r3, #1
 8011a46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	9305      	str	r3, [sp, #20]
 8011a4e:	f00a 0301 	and.w	r3, sl, #1
 8011a52:	46b8      	mov	r8, r7
 8011a54:	9304      	str	r3, [sp, #16]
 8011a56:	4607      	mov	r7, r0
 8011a58:	4631      	mov	r1, r6
 8011a5a:	ee18 0a10 	vmov	r0, s16
 8011a5e:	f7ff fa75 	bl	8010f4c <quorem>
 8011a62:	4641      	mov	r1, r8
 8011a64:	9002      	str	r0, [sp, #8]
 8011a66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011a6a:	ee18 0a10 	vmov	r0, s16
 8011a6e:	f000 fb7b 	bl	8012168 <__mcmp>
 8011a72:	463a      	mov	r2, r7
 8011a74:	9003      	str	r0, [sp, #12]
 8011a76:	4631      	mov	r1, r6
 8011a78:	4620      	mov	r0, r4
 8011a7a:	f000 fb91 	bl	80121a0 <__mdiff>
 8011a7e:	68c2      	ldr	r2, [r0, #12]
 8011a80:	f109 3bff 	add.w	fp, r9, #4294967295
 8011a84:	4605      	mov	r5, r0
 8011a86:	bb02      	cbnz	r2, 8011aca <_dtoa_r+0xa62>
 8011a88:	4601      	mov	r1, r0
 8011a8a:	ee18 0a10 	vmov	r0, s16
 8011a8e:	f000 fb6b 	bl	8012168 <__mcmp>
 8011a92:	4602      	mov	r2, r0
 8011a94:	4629      	mov	r1, r5
 8011a96:	4620      	mov	r0, r4
 8011a98:	9207      	str	r2, [sp, #28]
 8011a9a:	f000 f923 	bl	8011ce4 <_Bfree>
 8011a9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011aa2:	ea43 0102 	orr.w	r1, r3, r2
 8011aa6:	9b04      	ldr	r3, [sp, #16]
 8011aa8:	430b      	orrs	r3, r1
 8011aaa:	464d      	mov	r5, r9
 8011aac:	d10f      	bne.n	8011ace <_dtoa_r+0xa66>
 8011aae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ab2:	d02a      	beq.n	8011b0a <_dtoa_r+0xaa2>
 8011ab4:	9b03      	ldr	r3, [sp, #12]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	dd02      	ble.n	8011ac0 <_dtoa_r+0xa58>
 8011aba:	9b02      	ldr	r3, [sp, #8]
 8011abc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011ac0:	f88b a000 	strb.w	sl, [fp]
 8011ac4:	e775      	b.n	80119b2 <_dtoa_r+0x94a>
 8011ac6:	4638      	mov	r0, r7
 8011ac8:	e7ba      	b.n	8011a40 <_dtoa_r+0x9d8>
 8011aca:	2201      	movs	r2, #1
 8011acc:	e7e2      	b.n	8011a94 <_dtoa_r+0xa2c>
 8011ace:	9b03      	ldr	r3, [sp, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	db04      	blt.n	8011ade <_dtoa_r+0xa76>
 8011ad4:	9906      	ldr	r1, [sp, #24]
 8011ad6:	430b      	orrs	r3, r1
 8011ad8:	9904      	ldr	r1, [sp, #16]
 8011ada:	430b      	orrs	r3, r1
 8011adc:	d122      	bne.n	8011b24 <_dtoa_r+0xabc>
 8011ade:	2a00      	cmp	r2, #0
 8011ae0:	ddee      	ble.n	8011ac0 <_dtoa_r+0xa58>
 8011ae2:	ee18 1a10 	vmov	r1, s16
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f000 facd 	bl	8012088 <__lshift>
 8011aee:	4631      	mov	r1, r6
 8011af0:	ee08 0a10 	vmov	s16, r0
 8011af4:	f000 fb38 	bl	8012168 <__mcmp>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	dc03      	bgt.n	8011b04 <_dtoa_r+0xa9c>
 8011afc:	d1e0      	bne.n	8011ac0 <_dtoa_r+0xa58>
 8011afe:	f01a 0f01 	tst.w	sl, #1
 8011b02:	d0dd      	beq.n	8011ac0 <_dtoa_r+0xa58>
 8011b04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011b08:	d1d7      	bne.n	8011aba <_dtoa_r+0xa52>
 8011b0a:	2339      	movs	r3, #57	; 0x39
 8011b0c:	f88b 3000 	strb.w	r3, [fp]
 8011b10:	462b      	mov	r3, r5
 8011b12:	461d      	mov	r5, r3
 8011b14:	3b01      	subs	r3, #1
 8011b16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011b1a:	2a39      	cmp	r2, #57	; 0x39
 8011b1c:	d071      	beq.n	8011c02 <_dtoa_r+0xb9a>
 8011b1e:	3201      	adds	r2, #1
 8011b20:	701a      	strb	r2, [r3, #0]
 8011b22:	e746      	b.n	80119b2 <_dtoa_r+0x94a>
 8011b24:	2a00      	cmp	r2, #0
 8011b26:	dd07      	ble.n	8011b38 <_dtoa_r+0xad0>
 8011b28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011b2c:	d0ed      	beq.n	8011b0a <_dtoa_r+0xaa2>
 8011b2e:	f10a 0301 	add.w	r3, sl, #1
 8011b32:	f88b 3000 	strb.w	r3, [fp]
 8011b36:	e73c      	b.n	80119b2 <_dtoa_r+0x94a>
 8011b38:	9b05      	ldr	r3, [sp, #20]
 8011b3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011b3e:	4599      	cmp	r9, r3
 8011b40:	d047      	beq.n	8011bd2 <_dtoa_r+0xb6a>
 8011b42:	ee18 1a10 	vmov	r1, s16
 8011b46:	2300      	movs	r3, #0
 8011b48:	220a      	movs	r2, #10
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f000 f8ec 	bl	8011d28 <__multadd>
 8011b50:	45b8      	cmp	r8, r7
 8011b52:	ee08 0a10 	vmov	s16, r0
 8011b56:	f04f 0300 	mov.w	r3, #0
 8011b5a:	f04f 020a 	mov.w	r2, #10
 8011b5e:	4641      	mov	r1, r8
 8011b60:	4620      	mov	r0, r4
 8011b62:	d106      	bne.n	8011b72 <_dtoa_r+0xb0a>
 8011b64:	f000 f8e0 	bl	8011d28 <__multadd>
 8011b68:	4680      	mov	r8, r0
 8011b6a:	4607      	mov	r7, r0
 8011b6c:	f109 0901 	add.w	r9, r9, #1
 8011b70:	e772      	b.n	8011a58 <_dtoa_r+0x9f0>
 8011b72:	f000 f8d9 	bl	8011d28 <__multadd>
 8011b76:	4639      	mov	r1, r7
 8011b78:	4680      	mov	r8, r0
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	220a      	movs	r2, #10
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f000 f8d2 	bl	8011d28 <__multadd>
 8011b84:	4607      	mov	r7, r0
 8011b86:	e7f1      	b.n	8011b6c <_dtoa_r+0xb04>
 8011b88:	9b03      	ldr	r3, [sp, #12]
 8011b8a:	9302      	str	r3, [sp, #8]
 8011b8c:	9d01      	ldr	r5, [sp, #4]
 8011b8e:	ee18 0a10 	vmov	r0, s16
 8011b92:	4631      	mov	r1, r6
 8011b94:	f7ff f9da 	bl	8010f4c <quorem>
 8011b98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011b9c:	9b01      	ldr	r3, [sp, #4]
 8011b9e:	f805 ab01 	strb.w	sl, [r5], #1
 8011ba2:	1aea      	subs	r2, r5, r3
 8011ba4:	9b02      	ldr	r3, [sp, #8]
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	dd09      	ble.n	8011bbe <_dtoa_r+0xb56>
 8011baa:	ee18 1a10 	vmov	r1, s16
 8011bae:	2300      	movs	r3, #0
 8011bb0:	220a      	movs	r2, #10
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f000 f8b8 	bl	8011d28 <__multadd>
 8011bb8:	ee08 0a10 	vmov	s16, r0
 8011bbc:	e7e7      	b.n	8011b8e <_dtoa_r+0xb26>
 8011bbe:	9b02      	ldr	r3, [sp, #8]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	bfc8      	it	gt
 8011bc4:	461d      	movgt	r5, r3
 8011bc6:	9b01      	ldr	r3, [sp, #4]
 8011bc8:	bfd8      	it	le
 8011bca:	2501      	movle	r5, #1
 8011bcc:	441d      	add	r5, r3
 8011bce:	f04f 0800 	mov.w	r8, #0
 8011bd2:	ee18 1a10 	vmov	r1, s16
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 fa55 	bl	8012088 <__lshift>
 8011bde:	4631      	mov	r1, r6
 8011be0:	ee08 0a10 	vmov	s16, r0
 8011be4:	f000 fac0 	bl	8012168 <__mcmp>
 8011be8:	2800      	cmp	r0, #0
 8011bea:	dc91      	bgt.n	8011b10 <_dtoa_r+0xaa8>
 8011bec:	d102      	bne.n	8011bf4 <_dtoa_r+0xb8c>
 8011bee:	f01a 0f01 	tst.w	sl, #1
 8011bf2:	d18d      	bne.n	8011b10 <_dtoa_r+0xaa8>
 8011bf4:	462b      	mov	r3, r5
 8011bf6:	461d      	mov	r5, r3
 8011bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011bfc:	2a30      	cmp	r2, #48	; 0x30
 8011bfe:	d0fa      	beq.n	8011bf6 <_dtoa_r+0xb8e>
 8011c00:	e6d7      	b.n	80119b2 <_dtoa_r+0x94a>
 8011c02:	9a01      	ldr	r2, [sp, #4]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d184      	bne.n	8011b12 <_dtoa_r+0xaaa>
 8011c08:	9b00      	ldr	r3, [sp, #0]
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	2331      	movs	r3, #49	; 0x31
 8011c10:	7013      	strb	r3, [r2, #0]
 8011c12:	e6ce      	b.n	80119b2 <_dtoa_r+0x94a>
 8011c14:	4b09      	ldr	r3, [pc, #36]	; (8011c3c <_dtoa_r+0xbd4>)
 8011c16:	f7ff ba95 	b.w	8011144 <_dtoa_r+0xdc>
 8011c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f47f aa6e 	bne.w	80110fe <_dtoa_r+0x96>
 8011c22:	4b07      	ldr	r3, [pc, #28]	; (8011c40 <_dtoa_r+0xbd8>)
 8011c24:	f7ff ba8e 	b.w	8011144 <_dtoa_r+0xdc>
 8011c28:	9b02      	ldr	r3, [sp, #8]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	dcae      	bgt.n	8011b8c <_dtoa_r+0xb24>
 8011c2e:	9b06      	ldr	r3, [sp, #24]
 8011c30:	2b02      	cmp	r3, #2
 8011c32:	f73f aea8 	bgt.w	8011986 <_dtoa_r+0x91e>
 8011c36:	e7a9      	b.n	8011b8c <_dtoa_r+0xb24>
 8011c38:	080146a7 	.word	0x080146a7
 8011c3c:	08014604 	.word	0x08014604
 8011c40:	08014628 	.word	0x08014628

08011c44 <_localeconv_r>:
 8011c44:	4800      	ldr	r0, [pc, #0]	; (8011c48 <_localeconv_r+0x4>)
 8011c46:	4770      	bx	lr
 8011c48:	20000178 	.word	0x20000178

08011c4c <__malloc_lock>:
 8011c4c:	4801      	ldr	r0, [pc, #4]	; (8011c54 <__malloc_lock+0x8>)
 8011c4e:	f000 bd30 	b.w	80126b2 <__retarget_lock_acquire_recursive>
 8011c52:	bf00      	nop
 8011c54:	20002da8 	.word	0x20002da8

08011c58 <__malloc_unlock>:
 8011c58:	4801      	ldr	r0, [pc, #4]	; (8011c60 <__malloc_unlock+0x8>)
 8011c5a:	f000 bd2b 	b.w	80126b4 <__retarget_lock_release_recursive>
 8011c5e:	bf00      	nop
 8011c60:	20002da8 	.word	0x20002da8

08011c64 <_Balloc>:
 8011c64:	b570      	push	{r4, r5, r6, lr}
 8011c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c68:	4604      	mov	r4, r0
 8011c6a:	460d      	mov	r5, r1
 8011c6c:	b976      	cbnz	r6, 8011c8c <_Balloc+0x28>
 8011c6e:	2010      	movs	r0, #16
 8011c70:	f7fe fbcc 	bl	801040c <malloc>
 8011c74:	4602      	mov	r2, r0
 8011c76:	6260      	str	r0, [r4, #36]	; 0x24
 8011c78:	b920      	cbnz	r0, 8011c84 <_Balloc+0x20>
 8011c7a:	4b18      	ldr	r3, [pc, #96]	; (8011cdc <_Balloc+0x78>)
 8011c7c:	4818      	ldr	r0, [pc, #96]	; (8011ce0 <_Balloc+0x7c>)
 8011c7e:	2166      	movs	r1, #102	; 0x66
 8011c80:	f000 fce6 	bl	8012650 <__assert_func>
 8011c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c88:	6006      	str	r6, [r0, #0]
 8011c8a:	60c6      	str	r6, [r0, #12]
 8011c8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011c8e:	68f3      	ldr	r3, [r6, #12]
 8011c90:	b183      	cbz	r3, 8011cb4 <_Balloc+0x50>
 8011c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c9a:	b9b8      	cbnz	r0, 8011ccc <_Balloc+0x68>
 8011c9c:	2101      	movs	r1, #1
 8011c9e:	fa01 f605 	lsl.w	r6, r1, r5
 8011ca2:	1d72      	adds	r2, r6, #5
 8011ca4:	0092      	lsls	r2, r2, #2
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f000 fb60 	bl	801236c <_calloc_r>
 8011cac:	b160      	cbz	r0, 8011cc8 <_Balloc+0x64>
 8011cae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011cb2:	e00e      	b.n	8011cd2 <_Balloc+0x6e>
 8011cb4:	2221      	movs	r2, #33	; 0x21
 8011cb6:	2104      	movs	r1, #4
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f000 fb57 	bl	801236c <_calloc_r>
 8011cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cc0:	60f0      	str	r0, [r6, #12]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d1e4      	bne.n	8011c92 <_Balloc+0x2e>
 8011cc8:	2000      	movs	r0, #0
 8011cca:	bd70      	pop	{r4, r5, r6, pc}
 8011ccc:	6802      	ldr	r2, [r0, #0]
 8011cce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011cd8:	e7f7      	b.n	8011cca <_Balloc+0x66>
 8011cda:	bf00      	nop
 8011cdc:	08014635 	.word	0x08014635
 8011ce0:	080146b8 	.word	0x080146b8

08011ce4 <_Bfree>:
 8011ce4:	b570      	push	{r4, r5, r6, lr}
 8011ce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011ce8:	4605      	mov	r5, r0
 8011cea:	460c      	mov	r4, r1
 8011cec:	b976      	cbnz	r6, 8011d0c <_Bfree+0x28>
 8011cee:	2010      	movs	r0, #16
 8011cf0:	f7fe fb8c 	bl	801040c <malloc>
 8011cf4:	4602      	mov	r2, r0
 8011cf6:	6268      	str	r0, [r5, #36]	; 0x24
 8011cf8:	b920      	cbnz	r0, 8011d04 <_Bfree+0x20>
 8011cfa:	4b09      	ldr	r3, [pc, #36]	; (8011d20 <_Bfree+0x3c>)
 8011cfc:	4809      	ldr	r0, [pc, #36]	; (8011d24 <_Bfree+0x40>)
 8011cfe:	218a      	movs	r1, #138	; 0x8a
 8011d00:	f000 fca6 	bl	8012650 <__assert_func>
 8011d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d08:	6006      	str	r6, [r0, #0]
 8011d0a:	60c6      	str	r6, [r0, #12]
 8011d0c:	b13c      	cbz	r4, 8011d1e <_Bfree+0x3a>
 8011d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d10:	6862      	ldr	r2, [r4, #4]
 8011d12:	68db      	ldr	r3, [r3, #12]
 8011d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d18:	6021      	str	r1, [r4, #0]
 8011d1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d1e:	bd70      	pop	{r4, r5, r6, pc}
 8011d20:	08014635 	.word	0x08014635
 8011d24:	080146b8 	.word	0x080146b8

08011d28 <__multadd>:
 8011d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d2c:	690d      	ldr	r5, [r1, #16]
 8011d2e:	4607      	mov	r7, r0
 8011d30:	460c      	mov	r4, r1
 8011d32:	461e      	mov	r6, r3
 8011d34:	f101 0c14 	add.w	ip, r1, #20
 8011d38:	2000      	movs	r0, #0
 8011d3a:	f8dc 3000 	ldr.w	r3, [ip]
 8011d3e:	b299      	uxth	r1, r3
 8011d40:	fb02 6101 	mla	r1, r2, r1, r6
 8011d44:	0c1e      	lsrs	r6, r3, #16
 8011d46:	0c0b      	lsrs	r3, r1, #16
 8011d48:	fb02 3306 	mla	r3, r2, r6, r3
 8011d4c:	b289      	uxth	r1, r1
 8011d4e:	3001      	adds	r0, #1
 8011d50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d54:	4285      	cmp	r5, r0
 8011d56:	f84c 1b04 	str.w	r1, [ip], #4
 8011d5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d5e:	dcec      	bgt.n	8011d3a <__multadd+0x12>
 8011d60:	b30e      	cbz	r6, 8011da6 <__multadd+0x7e>
 8011d62:	68a3      	ldr	r3, [r4, #8]
 8011d64:	42ab      	cmp	r3, r5
 8011d66:	dc19      	bgt.n	8011d9c <__multadd+0x74>
 8011d68:	6861      	ldr	r1, [r4, #4]
 8011d6a:	4638      	mov	r0, r7
 8011d6c:	3101      	adds	r1, #1
 8011d6e:	f7ff ff79 	bl	8011c64 <_Balloc>
 8011d72:	4680      	mov	r8, r0
 8011d74:	b928      	cbnz	r0, 8011d82 <__multadd+0x5a>
 8011d76:	4602      	mov	r2, r0
 8011d78:	4b0c      	ldr	r3, [pc, #48]	; (8011dac <__multadd+0x84>)
 8011d7a:	480d      	ldr	r0, [pc, #52]	; (8011db0 <__multadd+0x88>)
 8011d7c:	21b5      	movs	r1, #181	; 0xb5
 8011d7e:	f000 fc67 	bl	8012650 <__assert_func>
 8011d82:	6922      	ldr	r2, [r4, #16]
 8011d84:	3202      	adds	r2, #2
 8011d86:	f104 010c 	add.w	r1, r4, #12
 8011d8a:	0092      	lsls	r2, r2, #2
 8011d8c:	300c      	adds	r0, #12
 8011d8e:	f7fe fb4d 	bl	801042c <memcpy>
 8011d92:	4621      	mov	r1, r4
 8011d94:	4638      	mov	r0, r7
 8011d96:	f7ff ffa5 	bl	8011ce4 <_Bfree>
 8011d9a:	4644      	mov	r4, r8
 8011d9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011da0:	3501      	adds	r5, #1
 8011da2:	615e      	str	r6, [r3, #20]
 8011da4:	6125      	str	r5, [r4, #16]
 8011da6:	4620      	mov	r0, r4
 8011da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dac:	080146a7 	.word	0x080146a7
 8011db0:	080146b8 	.word	0x080146b8

08011db4 <__hi0bits>:
 8011db4:	0c03      	lsrs	r3, r0, #16
 8011db6:	041b      	lsls	r3, r3, #16
 8011db8:	b9d3      	cbnz	r3, 8011df0 <__hi0bits+0x3c>
 8011dba:	0400      	lsls	r0, r0, #16
 8011dbc:	2310      	movs	r3, #16
 8011dbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011dc2:	bf04      	itt	eq
 8011dc4:	0200      	lsleq	r0, r0, #8
 8011dc6:	3308      	addeq	r3, #8
 8011dc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011dcc:	bf04      	itt	eq
 8011dce:	0100      	lsleq	r0, r0, #4
 8011dd0:	3304      	addeq	r3, #4
 8011dd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011dd6:	bf04      	itt	eq
 8011dd8:	0080      	lsleq	r0, r0, #2
 8011dda:	3302      	addeq	r3, #2
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	db05      	blt.n	8011dec <__hi0bits+0x38>
 8011de0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011de4:	f103 0301 	add.w	r3, r3, #1
 8011de8:	bf08      	it	eq
 8011dea:	2320      	moveq	r3, #32
 8011dec:	4618      	mov	r0, r3
 8011dee:	4770      	bx	lr
 8011df0:	2300      	movs	r3, #0
 8011df2:	e7e4      	b.n	8011dbe <__hi0bits+0xa>

08011df4 <__lo0bits>:
 8011df4:	6803      	ldr	r3, [r0, #0]
 8011df6:	f013 0207 	ands.w	r2, r3, #7
 8011dfa:	4601      	mov	r1, r0
 8011dfc:	d00b      	beq.n	8011e16 <__lo0bits+0x22>
 8011dfe:	07da      	lsls	r2, r3, #31
 8011e00:	d423      	bmi.n	8011e4a <__lo0bits+0x56>
 8011e02:	0798      	lsls	r0, r3, #30
 8011e04:	bf49      	itett	mi
 8011e06:	085b      	lsrmi	r3, r3, #1
 8011e08:	089b      	lsrpl	r3, r3, #2
 8011e0a:	2001      	movmi	r0, #1
 8011e0c:	600b      	strmi	r3, [r1, #0]
 8011e0e:	bf5c      	itt	pl
 8011e10:	600b      	strpl	r3, [r1, #0]
 8011e12:	2002      	movpl	r0, #2
 8011e14:	4770      	bx	lr
 8011e16:	b298      	uxth	r0, r3
 8011e18:	b9a8      	cbnz	r0, 8011e46 <__lo0bits+0x52>
 8011e1a:	0c1b      	lsrs	r3, r3, #16
 8011e1c:	2010      	movs	r0, #16
 8011e1e:	b2da      	uxtb	r2, r3
 8011e20:	b90a      	cbnz	r2, 8011e26 <__lo0bits+0x32>
 8011e22:	3008      	adds	r0, #8
 8011e24:	0a1b      	lsrs	r3, r3, #8
 8011e26:	071a      	lsls	r2, r3, #28
 8011e28:	bf04      	itt	eq
 8011e2a:	091b      	lsreq	r3, r3, #4
 8011e2c:	3004      	addeq	r0, #4
 8011e2e:	079a      	lsls	r2, r3, #30
 8011e30:	bf04      	itt	eq
 8011e32:	089b      	lsreq	r3, r3, #2
 8011e34:	3002      	addeq	r0, #2
 8011e36:	07da      	lsls	r2, r3, #31
 8011e38:	d403      	bmi.n	8011e42 <__lo0bits+0x4e>
 8011e3a:	085b      	lsrs	r3, r3, #1
 8011e3c:	f100 0001 	add.w	r0, r0, #1
 8011e40:	d005      	beq.n	8011e4e <__lo0bits+0x5a>
 8011e42:	600b      	str	r3, [r1, #0]
 8011e44:	4770      	bx	lr
 8011e46:	4610      	mov	r0, r2
 8011e48:	e7e9      	b.n	8011e1e <__lo0bits+0x2a>
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	4770      	bx	lr
 8011e4e:	2020      	movs	r0, #32
 8011e50:	4770      	bx	lr
	...

08011e54 <__i2b>:
 8011e54:	b510      	push	{r4, lr}
 8011e56:	460c      	mov	r4, r1
 8011e58:	2101      	movs	r1, #1
 8011e5a:	f7ff ff03 	bl	8011c64 <_Balloc>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	b928      	cbnz	r0, 8011e6e <__i2b+0x1a>
 8011e62:	4b05      	ldr	r3, [pc, #20]	; (8011e78 <__i2b+0x24>)
 8011e64:	4805      	ldr	r0, [pc, #20]	; (8011e7c <__i2b+0x28>)
 8011e66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011e6a:	f000 fbf1 	bl	8012650 <__assert_func>
 8011e6e:	2301      	movs	r3, #1
 8011e70:	6144      	str	r4, [r0, #20]
 8011e72:	6103      	str	r3, [r0, #16]
 8011e74:	bd10      	pop	{r4, pc}
 8011e76:	bf00      	nop
 8011e78:	080146a7 	.word	0x080146a7
 8011e7c:	080146b8 	.word	0x080146b8

08011e80 <__multiply>:
 8011e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e84:	4691      	mov	r9, r2
 8011e86:	690a      	ldr	r2, [r1, #16]
 8011e88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	bfb8      	it	lt
 8011e90:	460b      	movlt	r3, r1
 8011e92:	460c      	mov	r4, r1
 8011e94:	bfbc      	itt	lt
 8011e96:	464c      	movlt	r4, r9
 8011e98:	4699      	movlt	r9, r3
 8011e9a:	6927      	ldr	r7, [r4, #16]
 8011e9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011ea0:	68a3      	ldr	r3, [r4, #8]
 8011ea2:	6861      	ldr	r1, [r4, #4]
 8011ea4:	eb07 060a 	add.w	r6, r7, sl
 8011ea8:	42b3      	cmp	r3, r6
 8011eaa:	b085      	sub	sp, #20
 8011eac:	bfb8      	it	lt
 8011eae:	3101      	addlt	r1, #1
 8011eb0:	f7ff fed8 	bl	8011c64 <_Balloc>
 8011eb4:	b930      	cbnz	r0, 8011ec4 <__multiply+0x44>
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	4b44      	ldr	r3, [pc, #272]	; (8011fcc <__multiply+0x14c>)
 8011eba:	4845      	ldr	r0, [pc, #276]	; (8011fd0 <__multiply+0x150>)
 8011ebc:	f240 115d 	movw	r1, #349	; 0x15d
 8011ec0:	f000 fbc6 	bl	8012650 <__assert_func>
 8011ec4:	f100 0514 	add.w	r5, r0, #20
 8011ec8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011ecc:	462b      	mov	r3, r5
 8011ece:	2200      	movs	r2, #0
 8011ed0:	4543      	cmp	r3, r8
 8011ed2:	d321      	bcc.n	8011f18 <__multiply+0x98>
 8011ed4:	f104 0314 	add.w	r3, r4, #20
 8011ed8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011edc:	f109 0314 	add.w	r3, r9, #20
 8011ee0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011ee4:	9202      	str	r2, [sp, #8]
 8011ee6:	1b3a      	subs	r2, r7, r4
 8011ee8:	3a15      	subs	r2, #21
 8011eea:	f022 0203 	bic.w	r2, r2, #3
 8011eee:	3204      	adds	r2, #4
 8011ef0:	f104 0115 	add.w	r1, r4, #21
 8011ef4:	428f      	cmp	r7, r1
 8011ef6:	bf38      	it	cc
 8011ef8:	2204      	movcc	r2, #4
 8011efa:	9201      	str	r2, [sp, #4]
 8011efc:	9a02      	ldr	r2, [sp, #8]
 8011efe:	9303      	str	r3, [sp, #12]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d80c      	bhi.n	8011f1e <__multiply+0x9e>
 8011f04:	2e00      	cmp	r6, #0
 8011f06:	dd03      	ble.n	8011f10 <__multiply+0x90>
 8011f08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d05a      	beq.n	8011fc6 <__multiply+0x146>
 8011f10:	6106      	str	r6, [r0, #16]
 8011f12:	b005      	add	sp, #20
 8011f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f18:	f843 2b04 	str.w	r2, [r3], #4
 8011f1c:	e7d8      	b.n	8011ed0 <__multiply+0x50>
 8011f1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f22:	f1ba 0f00 	cmp.w	sl, #0
 8011f26:	d024      	beq.n	8011f72 <__multiply+0xf2>
 8011f28:	f104 0e14 	add.w	lr, r4, #20
 8011f2c:	46a9      	mov	r9, r5
 8011f2e:	f04f 0c00 	mov.w	ip, #0
 8011f32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011f36:	f8d9 1000 	ldr.w	r1, [r9]
 8011f3a:	fa1f fb82 	uxth.w	fp, r2
 8011f3e:	b289      	uxth	r1, r1
 8011f40:	fb0a 110b 	mla	r1, sl, fp, r1
 8011f44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011f48:	f8d9 2000 	ldr.w	r2, [r9]
 8011f4c:	4461      	add	r1, ip
 8011f4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f52:	fb0a c20b 	mla	r2, sl, fp, ip
 8011f56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011f5a:	b289      	uxth	r1, r1
 8011f5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011f60:	4577      	cmp	r7, lr
 8011f62:	f849 1b04 	str.w	r1, [r9], #4
 8011f66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f6a:	d8e2      	bhi.n	8011f32 <__multiply+0xb2>
 8011f6c:	9a01      	ldr	r2, [sp, #4]
 8011f6e:	f845 c002 	str.w	ip, [r5, r2]
 8011f72:	9a03      	ldr	r2, [sp, #12]
 8011f74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011f78:	3304      	adds	r3, #4
 8011f7a:	f1b9 0f00 	cmp.w	r9, #0
 8011f7e:	d020      	beq.n	8011fc2 <__multiply+0x142>
 8011f80:	6829      	ldr	r1, [r5, #0]
 8011f82:	f104 0c14 	add.w	ip, r4, #20
 8011f86:	46ae      	mov	lr, r5
 8011f88:	f04f 0a00 	mov.w	sl, #0
 8011f8c:	f8bc b000 	ldrh.w	fp, [ip]
 8011f90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011f94:	fb09 220b 	mla	r2, r9, fp, r2
 8011f98:	4492      	add	sl, r2
 8011f9a:	b289      	uxth	r1, r1
 8011f9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011fa0:	f84e 1b04 	str.w	r1, [lr], #4
 8011fa4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011fa8:	f8be 1000 	ldrh.w	r1, [lr]
 8011fac:	0c12      	lsrs	r2, r2, #16
 8011fae:	fb09 1102 	mla	r1, r9, r2, r1
 8011fb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011fb6:	4567      	cmp	r7, ip
 8011fb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011fbc:	d8e6      	bhi.n	8011f8c <__multiply+0x10c>
 8011fbe:	9a01      	ldr	r2, [sp, #4]
 8011fc0:	50a9      	str	r1, [r5, r2]
 8011fc2:	3504      	adds	r5, #4
 8011fc4:	e79a      	b.n	8011efc <__multiply+0x7c>
 8011fc6:	3e01      	subs	r6, #1
 8011fc8:	e79c      	b.n	8011f04 <__multiply+0x84>
 8011fca:	bf00      	nop
 8011fcc:	080146a7 	.word	0x080146a7
 8011fd0:	080146b8 	.word	0x080146b8

08011fd4 <__pow5mult>:
 8011fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fd8:	4615      	mov	r5, r2
 8011fda:	f012 0203 	ands.w	r2, r2, #3
 8011fde:	4606      	mov	r6, r0
 8011fe0:	460f      	mov	r7, r1
 8011fe2:	d007      	beq.n	8011ff4 <__pow5mult+0x20>
 8011fe4:	4c25      	ldr	r4, [pc, #148]	; (801207c <__pow5mult+0xa8>)
 8011fe6:	3a01      	subs	r2, #1
 8011fe8:	2300      	movs	r3, #0
 8011fea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011fee:	f7ff fe9b 	bl	8011d28 <__multadd>
 8011ff2:	4607      	mov	r7, r0
 8011ff4:	10ad      	asrs	r5, r5, #2
 8011ff6:	d03d      	beq.n	8012074 <__pow5mult+0xa0>
 8011ff8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011ffa:	b97c      	cbnz	r4, 801201c <__pow5mult+0x48>
 8011ffc:	2010      	movs	r0, #16
 8011ffe:	f7fe fa05 	bl	801040c <malloc>
 8012002:	4602      	mov	r2, r0
 8012004:	6270      	str	r0, [r6, #36]	; 0x24
 8012006:	b928      	cbnz	r0, 8012014 <__pow5mult+0x40>
 8012008:	4b1d      	ldr	r3, [pc, #116]	; (8012080 <__pow5mult+0xac>)
 801200a:	481e      	ldr	r0, [pc, #120]	; (8012084 <__pow5mult+0xb0>)
 801200c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012010:	f000 fb1e 	bl	8012650 <__assert_func>
 8012014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012018:	6004      	str	r4, [r0, #0]
 801201a:	60c4      	str	r4, [r0, #12]
 801201c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012024:	b94c      	cbnz	r4, 801203a <__pow5mult+0x66>
 8012026:	f240 2171 	movw	r1, #625	; 0x271
 801202a:	4630      	mov	r0, r6
 801202c:	f7ff ff12 	bl	8011e54 <__i2b>
 8012030:	2300      	movs	r3, #0
 8012032:	f8c8 0008 	str.w	r0, [r8, #8]
 8012036:	4604      	mov	r4, r0
 8012038:	6003      	str	r3, [r0, #0]
 801203a:	f04f 0900 	mov.w	r9, #0
 801203e:	07eb      	lsls	r3, r5, #31
 8012040:	d50a      	bpl.n	8012058 <__pow5mult+0x84>
 8012042:	4639      	mov	r1, r7
 8012044:	4622      	mov	r2, r4
 8012046:	4630      	mov	r0, r6
 8012048:	f7ff ff1a 	bl	8011e80 <__multiply>
 801204c:	4639      	mov	r1, r7
 801204e:	4680      	mov	r8, r0
 8012050:	4630      	mov	r0, r6
 8012052:	f7ff fe47 	bl	8011ce4 <_Bfree>
 8012056:	4647      	mov	r7, r8
 8012058:	106d      	asrs	r5, r5, #1
 801205a:	d00b      	beq.n	8012074 <__pow5mult+0xa0>
 801205c:	6820      	ldr	r0, [r4, #0]
 801205e:	b938      	cbnz	r0, 8012070 <__pow5mult+0x9c>
 8012060:	4622      	mov	r2, r4
 8012062:	4621      	mov	r1, r4
 8012064:	4630      	mov	r0, r6
 8012066:	f7ff ff0b 	bl	8011e80 <__multiply>
 801206a:	6020      	str	r0, [r4, #0]
 801206c:	f8c0 9000 	str.w	r9, [r0]
 8012070:	4604      	mov	r4, r0
 8012072:	e7e4      	b.n	801203e <__pow5mult+0x6a>
 8012074:	4638      	mov	r0, r7
 8012076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801207a:	bf00      	nop
 801207c:	08014808 	.word	0x08014808
 8012080:	08014635 	.word	0x08014635
 8012084:	080146b8 	.word	0x080146b8

08012088 <__lshift>:
 8012088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801208c:	460c      	mov	r4, r1
 801208e:	6849      	ldr	r1, [r1, #4]
 8012090:	6923      	ldr	r3, [r4, #16]
 8012092:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012096:	68a3      	ldr	r3, [r4, #8]
 8012098:	4607      	mov	r7, r0
 801209a:	4691      	mov	r9, r2
 801209c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120a0:	f108 0601 	add.w	r6, r8, #1
 80120a4:	42b3      	cmp	r3, r6
 80120a6:	db0b      	blt.n	80120c0 <__lshift+0x38>
 80120a8:	4638      	mov	r0, r7
 80120aa:	f7ff fddb 	bl	8011c64 <_Balloc>
 80120ae:	4605      	mov	r5, r0
 80120b0:	b948      	cbnz	r0, 80120c6 <__lshift+0x3e>
 80120b2:	4602      	mov	r2, r0
 80120b4:	4b2a      	ldr	r3, [pc, #168]	; (8012160 <__lshift+0xd8>)
 80120b6:	482b      	ldr	r0, [pc, #172]	; (8012164 <__lshift+0xdc>)
 80120b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80120bc:	f000 fac8 	bl	8012650 <__assert_func>
 80120c0:	3101      	adds	r1, #1
 80120c2:	005b      	lsls	r3, r3, #1
 80120c4:	e7ee      	b.n	80120a4 <__lshift+0x1c>
 80120c6:	2300      	movs	r3, #0
 80120c8:	f100 0114 	add.w	r1, r0, #20
 80120cc:	f100 0210 	add.w	r2, r0, #16
 80120d0:	4618      	mov	r0, r3
 80120d2:	4553      	cmp	r3, sl
 80120d4:	db37      	blt.n	8012146 <__lshift+0xbe>
 80120d6:	6920      	ldr	r0, [r4, #16]
 80120d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80120dc:	f104 0314 	add.w	r3, r4, #20
 80120e0:	f019 091f 	ands.w	r9, r9, #31
 80120e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80120ec:	d02f      	beq.n	801214e <__lshift+0xc6>
 80120ee:	f1c9 0e20 	rsb	lr, r9, #32
 80120f2:	468a      	mov	sl, r1
 80120f4:	f04f 0c00 	mov.w	ip, #0
 80120f8:	681a      	ldr	r2, [r3, #0]
 80120fa:	fa02 f209 	lsl.w	r2, r2, r9
 80120fe:	ea42 020c 	orr.w	r2, r2, ip
 8012102:	f84a 2b04 	str.w	r2, [sl], #4
 8012106:	f853 2b04 	ldr.w	r2, [r3], #4
 801210a:	4298      	cmp	r0, r3
 801210c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012110:	d8f2      	bhi.n	80120f8 <__lshift+0x70>
 8012112:	1b03      	subs	r3, r0, r4
 8012114:	3b15      	subs	r3, #21
 8012116:	f023 0303 	bic.w	r3, r3, #3
 801211a:	3304      	adds	r3, #4
 801211c:	f104 0215 	add.w	r2, r4, #21
 8012120:	4290      	cmp	r0, r2
 8012122:	bf38      	it	cc
 8012124:	2304      	movcc	r3, #4
 8012126:	f841 c003 	str.w	ip, [r1, r3]
 801212a:	f1bc 0f00 	cmp.w	ip, #0
 801212e:	d001      	beq.n	8012134 <__lshift+0xac>
 8012130:	f108 0602 	add.w	r6, r8, #2
 8012134:	3e01      	subs	r6, #1
 8012136:	4638      	mov	r0, r7
 8012138:	612e      	str	r6, [r5, #16]
 801213a:	4621      	mov	r1, r4
 801213c:	f7ff fdd2 	bl	8011ce4 <_Bfree>
 8012140:	4628      	mov	r0, r5
 8012142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012146:	f842 0f04 	str.w	r0, [r2, #4]!
 801214a:	3301      	adds	r3, #1
 801214c:	e7c1      	b.n	80120d2 <__lshift+0x4a>
 801214e:	3904      	subs	r1, #4
 8012150:	f853 2b04 	ldr.w	r2, [r3], #4
 8012154:	f841 2f04 	str.w	r2, [r1, #4]!
 8012158:	4298      	cmp	r0, r3
 801215a:	d8f9      	bhi.n	8012150 <__lshift+0xc8>
 801215c:	e7ea      	b.n	8012134 <__lshift+0xac>
 801215e:	bf00      	nop
 8012160:	080146a7 	.word	0x080146a7
 8012164:	080146b8 	.word	0x080146b8

08012168 <__mcmp>:
 8012168:	b530      	push	{r4, r5, lr}
 801216a:	6902      	ldr	r2, [r0, #16]
 801216c:	690c      	ldr	r4, [r1, #16]
 801216e:	1b12      	subs	r2, r2, r4
 8012170:	d10e      	bne.n	8012190 <__mcmp+0x28>
 8012172:	f100 0314 	add.w	r3, r0, #20
 8012176:	3114      	adds	r1, #20
 8012178:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801217c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012180:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012184:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012188:	42a5      	cmp	r5, r4
 801218a:	d003      	beq.n	8012194 <__mcmp+0x2c>
 801218c:	d305      	bcc.n	801219a <__mcmp+0x32>
 801218e:	2201      	movs	r2, #1
 8012190:	4610      	mov	r0, r2
 8012192:	bd30      	pop	{r4, r5, pc}
 8012194:	4283      	cmp	r3, r0
 8012196:	d3f3      	bcc.n	8012180 <__mcmp+0x18>
 8012198:	e7fa      	b.n	8012190 <__mcmp+0x28>
 801219a:	f04f 32ff 	mov.w	r2, #4294967295
 801219e:	e7f7      	b.n	8012190 <__mcmp+0x28>

080121a0 <__mdiff>:
 80121a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	460c      	mov	r4, r1
 80121a6:	4606      	mov	r6, r0
 80121a8:	4611      	mov	r1, r2
 80121aa:	4620      	mov	r0, r4
 80121ac:	4690      	mov	r8, r2
 80121ae:	f7ff ffdb 	bl	8012168 <__mcmp>
 80121b2:	1e05      	subs	r5, r0, #0
 80121b4:	d110      	bne.n	80121d8 <__mdiff+0x38>
 80121b6:	4629      	mov	r1, r5
 80121b8:	4630      	mov	r0, r6
 80121ba:	f7ff fd53 	bl	8011c64 <_Balloc>
 80121be:	b930      	cbnz	r0, 80121ce <__mdiff+0x2e>
 80121c0:	4b3a      	ldr	r3, [pc, #232]	; (80122ac <__mdiff+0x10c>)
 80121c2:	4602      	mov	r2, r0
 80121c4:	f240 2132 	movw	r1, #562	; 0x232
 80121c8:	4839      	ldr	r0, [pc, #228]	; (80122b0 <__mdiff+0x110>)
 80121ca:	f000 fa41 	bl	8012650 <__assert_func>
 80121ce:	2301      	movs	r3, #1
 80121d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80121d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d8:	bfa4      	itt	ge
 80121da:	4643      	movge	r3, r8
 80121dc:	46a0      	movge	r8, r4
 80121de:	4630      	mov	r0, r6
 80121e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80121e4:	bfa6      	itte	ge
 80121e6:	461c      	movge	r4, r3
 80121e8:	2500      	movge	r5, #0
 80121ea:	2501      	movlt	r5, #1
 80121ec:	f7ff fd3a 	bl	8011c64 <_Balloc>
 80121f0:	b920      	cbnz	r0, 80121fc <__mdiff+0x5c>
 80121f2:	4b2e      	ldr	r3, [pc, #184]	; (80122ac <__mdiff+0x10c>)
 80121f4:	4602      	mov	r2, r0
 80121f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80121fa:	e7e5      	b.n	80121c8 <__mdiff+0x28>
 80121fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012200:	6926      	ldr	r6, [r4, #16]
 8012202:	60c5      	str	r5, [r0, #12]
 8012204:	f104 0914 	add.w	r9, r4, #20
 8012208:	f108 0514 	add.w	r5, r8, #20
 801220c:	f100 0e14 	add.w	lr, r0, #20
 8012210:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012214:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012218:	f108 0210 	add.w	r2, r8, #16
 801221c:	46f2      	mov	sl, lr
 801221e:	2100      	movs	r1, #0
 8012220:	f859 3b04 	ldr.w	r3, [r9], #4
 8012224:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012228:	fa1f f883 	uxth.w	r8, r3
 801222c:	fa11 f18b 	uxtah	r1, r1, fp
 8012230:	0c1b      	lsrs	r3, r3, #16
 8012232:	eba1 0808 	sub.w	r8, r1, r8
 8012236:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801223a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801223e:	fa1f f888 	uxth.w	r8, r8
 8012242:	1419      	asrs	r1, r3, #16
 8012244:	454e      	cmp	r6, r9
 8012246:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801224a:	f84a 3b04 	str.w	r3, [sl], #4
 801224e:	d8e7      	bhi.n	8012220 <__mdiff+0x80>
 8012250:	1b33      	subs	r3, r6, r4
 8012252:	3b15      	subs	r3, #21
 8012254:	f023 0303 	bic.w	r3, r3, #3
 8012258:	3304      	adds	r3, #4
 801225a:	3415      	adds	r4, #21
 801225c:	42a6      	cmp	r6, r4
 801225e:	bf38      	it	cc
 8012260:	2304      	movcc	r3, #4
 8012262:	441d      	add	r5, r3
 8012264:	4473      	add	r3, lr
 8012266:	469e      	mov	lr, r3
 8012268:	462e      	mov	r6, r5
 801226a:	4566      	cmp	r6, ip
 801226c:	d30e      	bcc.n	801228c <__mdiff+0xec>
 801226e:	f10c 0203 	add.w	r2, ip, #3
 8012272:	1b52      	subs	r2, r2, r5
 8012274:	f022 0203 	bic.w	r2, r2, #3
 8012278:	3d03      	subs	r5, #3
 801227a:	45ac      	cmp	ip, r5
 801227c:	bf38      	it	cc
 801227e:	2200      	movcc	r2, #0
 8012280:	441a      	add	r2, r3
 8012282:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012286:	b17b      	cbz	r3, 80122a8 <__mdiff+0x108>
 8012288:	6107      	str	r7, [r0, #16]
 801228a:	e7a3      	b.n	80121d4 <__mdiff+0x34>
 801228c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012290:	fa11 f288 	uxtah	r2, r1, r8
 8012294:	1414      	asrs	r4, r2, #16
 8012296:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801229a:	b292      	uxth	r2, r2
 801229c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80122a0:	f84e 2b04 	str.w	r2, [lr], #4
 80122a4:	1421      	asrs	r1, r4, #16
 80122a6:	e7e0      	b.n	801226a <__mdiff+0xca>
 80122a8:	3f01      	subs	r7, #1
 80122aa:	e7ea      	b.n	8012282 <__mdiff+0xe2>
 80122ac:	080146a7 	.word	0x080146a7
 80122b0:	080146b8 	.word	0x080146b8

080122b4 <__d2b>:
 80122b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122b8:	4689      	mov	r9, r1
 80122ba:	2101      	movs	r1, #1
 80122bc:	ec57 6b10 	vmov	r6, r7, d0
 80122c0:	4690      	mov	r8, r2
 80122c2:	f7ff fccf 	bl	8011c64 <_Balloc>
 80122c6:	4604      	mov	r4, r0
 80122c8:	b930      	cbnz	r0, 80122d8 <__d2b+0x24>
 80122ca:	4602      	mov	r2, r0
 80122cc:	4b25      	ldr	r3, [pc, #148]	; (8012364 <__d2b+0xb0>)
 80122ce:	4826      	ldr	r0, [pc, #152]	; (8012368 <__d2b+0xb4>)
 80122d0:	f240 310a 	movw	r1, #778	; 0x30a
 80122d4:	f000 f9bc 	bl	8012650 <__assert_func>
 80122d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80122dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80122e0:	bb35      	cbnz	r5, 8012330 <__d2b+0x7c>
 80122e2:	2e00      	cmp	r6, #0
 80122e4:	9301      	str	r3, [sp, #4]
 80122e6:	d028      	beq.n	801233a <__d2b+0x86>
 80122e8:	4668      	mov	r0, sp
 80122ea:	9600      	str	r6, [sp, #0]
 80122ec:	f7ff fd82 	bl	8011df4 <__lo0bits>
 80122f0:	9900      	ldr	r1, [sp, #0]
 80122f2:	b300      	cbz	r0, 8012336 <__d2b+0x82>
 80122f4:	9a01      	ldr	r2, [sp, #4]
 80122f6:	f1c0 0320 	rsb	r3, r0, #32
 80122fa:	fa02 f303 	lsl.w	r3, r2, r3
 80122fe:	430b      	orrs	r3, r1
 8012300:	40c2      	lsrs	r2, r0
 8012302:	6163      	str	r3, [r4, #20]
 8012304:	9201      	str	r2, [sp, #4]
 8012306:	9b01      	ldr	r3, [sp, #4]
 8012308:	61a3      	str	r3, [r4, #24]
 801230a:	2b00      	cmp	r3, #0
 801230c:	bf14      	ite	ne
 801230e:	2202      	movne	r2, #2
 8012310:	2201      	moveq	r2, #1
 8012312:	6122      	str	r2, [r4, #16]
 8012314:	b1d5      	cbz	r5, 801234c <__d2b+0x98>
 8012316:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801231a:	4405      	add	r5, r0
 801231c:	f8c9 5000 	str.w	r5, [r9]
 8012320:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012324:	f8c8 0000 	str.w	r0, [r8]
 8012328:	4620      	mov	r0, r4
 801232a:	b003      	add	sp, #12
 801232c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012334:	e7d5      	b.n	80122e2 <__d2b+0x2e>
 8012336:	6161      	str	r1, [r4, #20]
 8012338:	e7e5      	b.n	8012306 <__d2b+0x52>
 801233a:	a801      	add	r0, sp, #4
 801233c:	f7ff fd5a 	bl	8011df4 <__lo0bits>
 8012340:	9b01      	ldr	r3, [sp, #4]
 8012342:	6163      	str	r3, [r4, #20]
 8012344:	2201      	movs	r2, #1
 8012346:	6122      	str	r2, [r4, #16]
 8012348:	3020      	adds	r0, #32
 801234a:	e7e3      	b.n	8012314 <__d2b+0x60>
 801234c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012350:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012354:	f8c9 0000 	str.w	r0, [r9]
 8012358:	6918      	ldr	r0, [r3, #16]
 801235a:	f7ff fd2b 	bl	8011db4 <__hi0bits>
 801235e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012362:	e7df      	b.n	8012324 <__d2b+0x70>
 8012364:	080146a7 	.word	0x080146a7
 8012368:	080146b8 	.word	0x080146b8

0801236c <_calloc_r>:
 801236c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801236e:	fba1 2402 	umull	r2, r4, r1, r2
 8012372:	b94c      	cbnz	r4, 8012388 <_calloc_r+0x1c>
 8012374:	4611      	mov	r1, r2
 8012376:	9201      	str	r2, [sp, #4]
 8012378:	f7fe f8da 	bl	8010530 <_malloc_r>
 801237c:	9a01      	ldr	r2, [sp, #4]
 801237e:	4605      	mov	r5, r0
 8012380:	b930      	cbnz	r0, 8012390 <_calloc_r+0x24>
 8012382:	4628      	mov	r0, r5
 8012384:	b003      	add	sp, #12
 8012386:	bd30      	pop	{r4, r5, pc}
 8012388:	220c      	movs	r2, #12
 801238a:	6002      	str	r2, [r0, #0]
 801238c:	2500      	movs	r5, #0
 801238e:	e7f8      	b.n	8012382 <_calloc_r+0x16>
 8012390:	4621      	mov	r1, r4
 8012392:	f7fe f859 	bl	8010448 <memset>
 8012396:	e7f4      	b.n	8012382 <_calloc_r+0x16>

08012398 <__ssputs_r>:
 8012398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801239c:	688e      	ldr	r6, [r1, #8]
 801239e:	429e      	cmp	r6, r3
 80123a0:	4682      	mov	sl, r0
 80123a2:	460c      	mov	r4, r1
 80123a4:	4690      	mov	r8, r2
 80123a6:	461f      	mov	r7, r3
 80123a8:	d838      	bhi.n	801241c <__ssputs_r+0x84>
 80123aa:	898a      	ldrh	r2, [r1, #12]
 80123ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80123b0:	d032      	beq.n	8012418 <__ssputs_r+0x80>
 80123b2:	6825      	ldr	r5, [r4, #0]
 80123b4:	6909      	ldr	r1, [r1, #16]
 80123b6:	eba5 0901 	sub.w	r9, r5, r1
 80123ba:	6965      	ldr	r5, [r4, #20]
 80123bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80123c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80123c4:	3301      	adds	r3, #1
 80123c6:	444b      	add	r3, r9
 80123c8:	106d      	asrs	r5, r5, #1
 80123ca:	429d      	cmp	r5, r3
 80123cc:	bf38      	it	cc
 80123ce:	461d      	movcc	r5, r3
 80123d0:	0553      	lsls	r3, r2, #21
 80123d2:	d531      	bpl.n	8012438 <__ssputs_r+0xa0>
 80123d4:	4629      	mov	r1, r5
 80123d6:	f7fe f8ab 	bl	8010530 <_malloc_r>
 80123da:	4606      	mov	r6, r0
 80123dc:	b950      	cbnz	r0, 80123f4 <__ssputs_r+0x5c>
 80123de:	230c      	movs	r3, #12
 80123e0:	f8ca 3000 	str.w	r3, [sl]
 80123e4:	89a3      	ldrh	r3, [r4, #12]
 80123e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123ea:	81a3      	strh	r3, [r4, #12]
 80123ec:	f04f 30ff 	mov.w	r0, #4294967295
 80123f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f4:	6921      	ldr	r1, [r4, #16]
 80123f6:	464a      	mov	r2, r9
 80123f8:	f7fe f818 	bl	801042c <memcpy>
 80123fc:	89a3      	ldrh	r3, [r4, #12]
 80123fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012406:	81a3      	strh	r3, [r4, #12]
 8012408:	6126      	str	r6, [r4, #16]
 801240a:	6165      	str	r5, [r4, #20]
 801240c:	444e      	add	r6, r9
 801240e:	eba5 0509 	sub.w	r5, r5, r9
 8012412:	6026      	str	r6, [r4, #0]
 8012414:	60a5      	str	r5, [r4, #8]
 8012416:	463e      	mov	r6, r7
 8012418:	42be      	cmp	r6, r7
 801241a:	d900      	bls.n	801241e <__ssputs_r+0x86>
 801241c:	463e      	mov	r6, r7
 801241e:	6820      	ldr	r0, [r4, #0]
 8012420:	4632      	mov	r2, r6
 8012422:	4641      	mov	r1, r8
 8012424:	f000 f959 	bl	80126da <memmove>
 8012428:	68a3      	ldr	r3, [r4, #8]
 801242a:	1b9b      	subs	r3, r3, r6
 801242c:	60a3      	str	r3, [r4, #8]
 801242e:	6823      	ldr	r3, [r4, #0]
 8012430:	4433      	add	r3, r6
 8012432:	6023      	str	r3, [r4, #0]
 8012434:	2000      	movs	r0, #0
 8012436:	e7db      	b.n	80123f0 <__ssputs_r+0x58>
 8012438:	462a      	mov	r2, r5
 801243a:	f000 f968 	bl	801270e <_realloc_r>
 801243e:	4606      	mov	r6, r0
 8012440:	2800      	cmp	r0, #0
 8012442:	d1e1      	bne.n	8012408 <__ssputs_r+0x70>
 8012444:	6921      	ldr	r1, [r4, #16]
 8012446:	4650      	mov	r0, sl
 8012448:	f7fe f806 	bl	8010458 <_free_r>
 801244c:	e7c7      	b.n	80123de <__ssputs_r+0x46>
	...

08012450 <_svfiprintf_r>:
 8012450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012454:	4698      	mov	r8, r3
 8012456:	898b      	ldrh	r3, [r1, #12]
 8012458:	061b      	lsls	r3, r3, #24
 801245a:	b09d      	sub	sp, #116	; 0x74
 801245c:	4607      	mov	r7, r0
 801245e:	460d      	mov	r5, r1
 8012460:	4614      	mov	r4, r2
 8012462:	d50e      	bpl.n	8012482 <_svfiprintf_r+0x32>
 8012464:	690b      	ldr	r3, [r1, #16]
 8012466:	b963      	cbnz	r3, 8012482 <_svfiprintf_r+0x32>
 8012468:	2140      	movs	r1, #64	; 0x40
 801246a:	f7fe f861 	bl	8010530 <_malloc_r>
 801246e:	6028      	str	r0, [r5, #0]
 8012470:	6128      	str	r0, [r5, #16]
 8012472:	b920      	cbnz	r0, 801247e <_svfiprintf_r+0x2e>
 8012474:	230c      	movs	r3, #12
 8012476:	603b      	str	r3, [r7, #0]
 8012478:	f04f 30ff 	mov.w	r0, #4294967295
 801247c:	e0d1      	b.n	8012622 <_svfiprintf_r+0x1d2>
 801247e:	2340      	movs	r3, #64	; 0x40
 8012480:	616b      	str	r3, [r5, #20]
 8012482:	2300      	movs	r3, #0
 8012484:	9309      	str	r3, [sp, #36]	; 0x24
 8012486:	2320      	movs	r3, #32
 8012488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801248c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012490:	2330      	movs	r3, #48	; 0x30
 8012492:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801263c <_svfiprintf_r+0x1ec>
 8012496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801249a:	f04f 0901 	mov.w	r9, #1
 801249e:	4623      	mov	r3, r4
 80124a0:	469a      	mov	sl, r3
 80124a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124a6:	b10a      	cbz	r2, 80124ac <_svfiprintf_r+0x5c>
 80124a8:	2a25      	cmp	r2, #37	; 0x25
 80124aa:	d1f9      	bne.n	80124a0 <_svfiprintf_r+0x50>
 80124ac:	ebba 0b04 	subs.w	fp, sl, r4
 80124b0:	d00b      	beq.n	80124ca <_svfiprintf_r+0x7a>
 80124b2:	465b      	mov	r3, fp
 80124b4:	4622      	mov	r2, r4
 80124b6:	4629      	mov	r1, r5
 80124b8:	4638      	mov	r0, r7
 80124ba:	f7ff ff6d 	bl	8012398 <__ssputs_r>
 80124be:	3001      	adds	r0, #1
 80124c0:	f000 80aa 	beq.w	8012618 <_svfiprintf_r+0x1c8>
 80124c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124c6:	445a      	add	r2, fp
 80124c8:	9209      	str	r2, [sp, #36]	; 0x24
 80124ca:	f89a 3000 	ldrb.w	r3, [sl]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	f000 80a2 	beq.w	8012618 <_svfiprintf_r+0x1c8>
 80124d4:	2300      	movs	r3, #0
 80124d6:	f04f 32ff 	mov.w	r2, #4294967295
 80124da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124de:	f10a 0a01 	add.w	sl, sl, #1
 80124e2:	9304      	str	r3, [sp, #16]
 80124e4:	9307      	str	r3, [sp, #28]
 80124e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124ea:	931a      	str	r3, [sp, #104]	; 0x68
 80124ec:	4654      	mov	r4, sl
 80124ee:	2205      	movs	r2, #5
 80124f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124f4:	4851      	ldr	r0, [pc, #324]	; (801263c <_svfiprintf_r+0x1ec>)
 80124f6:	f7ed fe73 	bl	80001e0 <memchr>
 80124fa:	9a04      	ldr	r2, [sp, #16]
 80124fc:	b9d8      	cbnz	r0, 8012536 <_svfiprintf_r+0xe6>
 80124fe:	06d0      	lsls	r0, r2, #27
 8012500:	bf44      	itt	mi
 8012502:	2320      	movmi	r3, #32
 8012504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012508:	0711      	lsls	r1, r2, #28
 801250a:	bf44      	itt	mi
 801250c:	232b      	movmi	r3, #43	; 0x2b
 801250e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012512:	f89a 3000 	ldrb.w	r3, [sl]
 8012516:	2b2a      	cmp	r3, #42	; 0x2a
 8012518:	d015      	beq.n	8012546 <_svfiprintf_r+0xf6>
 801251a:	9a07      	ldr	r2, [sp, #28]
 801251c:	4654      	mov	r4, sl
 801251e:	2000      	movs	r0, #0
 8012520:	f04f 0c0a 	mov.w	ip, #10
 8012524:	4621      	mov	r1, r4
 8012526:	f811 3b01 	ldrb.w	r3, [r1], #1
 801252a:	3b30      	subs	r3, #48	; 0x30
 801252c:	2b09      	cmp	r3, #9
 801252e:	d94e      	bls.n	80125ce <_svfiprintf_r+0x17e>
 8012530:	b1b0      	cbz	r0, 8012560 <_svfiprintf_r+0x110>
 8012532:	9207      	str	r2, [sp, #28]
 8012534:	e014      	b.n	8012560 <_svfiprintf_r+0x110>
 8012536:	eba0 0308 	sub.w	r3, r0, r8
 801253a:	fa09 f303 	lsl.w	r3, r9, r3
 801253e:	4313      	orrs	r3, r2
 8012540:	9304      	str	r3, [sp, #16]
 8012542:	46a2      	mov	sl, r4
 8012544:	e7d2      	b.n	80124ec <_svfiprintf_r+0x9c>
 8012546:	9b03      	ldr	r3, [sp, #12]
 8012548:	1d19      	adds	r1, r3, #4
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	9103      	str	r1, [sp, #12]
 801254e:	2b00      	cmp	r3, #0
 8012550:	bfbb      	ittet	lt
 8012552:	425b      	neglt	r3, r3
 8012554:	f042 0202 	orrlt.w	r2, r2, #2
 8012558:	9307      	strge	r3, [sp, #28]
 801255a:	9307      	strlt	r3, [sp, #28]
 801255c:	bfb8      	it	lt
 801255e:	9204      	strlt	r2, [sp, #16]
 8012560:	7823      	ldrb	r3, [r4, #0]
 8012562:	2b2e      	cmp	r3, #46	; 0x2e
 8012564:	d10c      	bne.n	8012580 <_svfiprintf_r+0x130>
 8012566:	7863      	ldrb	r3, [r4, #1]
 8012568:	2b2a      	cmp	r3, #42	; 0x2a
 801256a:	d135      	bne.n	80125d8 <_svfiprintf_r+0x188>
 801256c:	9b03      	ldr	r3, [sp, #12]
 801256e:	1d1a      	adds	r2, r3, #4
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	9203      	str	r2, [sp, #12]
 8012574:	2b00      	cmp	r3, #0
 8012576:	bfb8      	it	lt
 8012578:	f04f 33ff 	movlt.w	r3, #4294967295
 801257c:	3402      	adds	r4, #2
 801257e:	9305      	str	r3, [sp, #20]
 8012580:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801264c <_svfiprintf_r+0x1fc>
 8012584:	7821      	ldrb	r1, [r4, #0]
 8012586:	2203      	movs	r2, #3
 8012588:	4650      	mov	r0, sl
 801258a:	f7ed fe29 	bl	80001e0 <memchr>
 801258e:	b140      	cbz	r0, 80125a2 <_svfiprintf_r+0x152>
 8012590:	2340      	movs	r3, #64	; 0x40
 8012592:	eba0 000a 	sub.w	r0, r0, sl
 8012596:	fa03 f000 	lsl.w	r0, r3, r0
 801259a:	9b04      	ldr	r3, [sp, #16]
 801259c:	4303      	orrs	r3, r0
 801259e:	3401      	adds	r4, #1
 80125a0:	9304      	str	r3, [sp, #16]
 80125a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125a6:	4826      	ldr	r0, [pc, #152]	; (8012640 <_svfiprintf_r+0x1f0>)
 80125a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125ac:	2206      	movs	r2, #6
 80125ae:	f7ed fe17 	bl	80001e0 <memchr>
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d038      	beq.n	8012628 <_svfiprintf_r+0x1d8>
 80125b6:	4b23      	ldr	r3, [pc, #140]	; (8012644 <_svfiprintf_r+0x1f4>)
 80125b8:	bb1b      	cbnz	r3, 8012602 <_svfiprintf_r+0x1b2>
 80125ba:	9b03      	ldr	r3, [sp, #12]
 80125bc:	3307      	adds	r3, #7
 80125be:	f023 0307 	bic.w	r3, r3, #7
 80125c2:	3308      	adds	r3, #8
 80125c4:	9303      	str	r3, [sp, #12]
 80125c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125c8:	4433      	add	r3, r6
 80125ca:	9309      	str	r3, [sp, #36]	; 0x24
 80125cc:	e767      	b.n	801249e <_svfiprintf_r+0x4e>
 80125ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80125d2:	460c      	mov	r4, r1
 80125d4:	2001      	movs	r0, #1
 80125d6:	e7a5      	b.n	8012524 <_svfiprintf_r+0xd4>
 80125d8:	2300      	movs	r3, #0
 80125da:	3401      	adds	r4, #1
 80125dc:	9305      	str	r3, [sp, #20]
 80125de:	4619      	mov	r1, r3
 80125e0:	f04f 0c0a 	mov.w	ip, #10
 80125e4:	4620      	mov	r0, r4
 80125e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125ea:	3a30      	subs	r2, #48	; 0x30
 80125ec:	2a09      	cmp	r2, #9
 80125ee:	d903      	bls.n	80125f8 <_svfiprintf_r+0x1a8>
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d0c5      	beq.n	8012580 <_svfiprintf_r+0x130>
 80125f4:	9105      	str	r1, [sp, #20]
 80125f6:	e7c3      	b.n	8012580 <_svfiprintf_r+0x130>
 80125f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80125fc:	4604      	mov	r4, r0
 80125fe:	2301      	movs	r3, #1
 8012600:	e7f0      	b.n	80125e4 <_svfiprintf_r+0x194>
 8012602:	ab03      	add	r3, sp, #12
 8012604:	9300      	str	r3, [sp, #0]
 8012606:	462a      	mov	r2, r5
 8012608:	4b0f      	ldr	r3, [pc, #60]	; (8012648 <_svfiprintf_r+0x1f8>)
 801260a:	a904      	add	r1, sp, #16
 801260c:	4638      	mov	r0, r7
 801260e:	f7fe f8a3 	bl	8010758 <_printf_float>
 8012612:	1c42      	adds	r2, r0, #1
 8012614:	4606      	mov	r6, r0
 8012616:	d1d6      	bne.n	80125c6 <_svfiprintf_r+0x176>
 8012618:	89ab      	ldrh	r3, [r5, #12]
 801261a:	065b      	lsls	r3, r3, #25
 801261c:	f53f af2c 	bmi.w	8012478 <_svfiprintf_r+0x28>
 8012620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012622:	b01d      	add	sp, #116	; 0x74
 8012624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012628:	ab03      	add	r3, sp, #12
 801262a:	9300      	str	r3, [sp, #0]
 801262c:	462a      	mov	r2, r5
 801262e:	4b06      	ldr	r3, [pc, #24]	; (8012648 <_svfiprintf_r+0x1f8>)
 8012630:	a904      	add	r1, sp, #16
 8012632:	4638      	mov	r0, r7
 8012634:	f7fe fb34 	bl	8010ca0 <_printf_i>
 8012638:	e7eb      	b.n	8012612 <_svfiprintf_r+0x1c2>
 801263a:	bf00      	nop
 801263c:	08014814 	.word	0x08014814
 8012640:	0801481e 	.word	0x0801481e
 8012644:	08010759 	.word	0x08010759
 8012648:	08012399 	.word	0x08012399
 801264c:	0801481a 	.word	0x0801481a

08012650 <__assert_func>:
 8012650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012652:	4614      	mov	r4, r2
 8012654:	461a      	mov	r2, r3
 8012656:	4b09      	ldr	r3, [pc, #36]	; (801267c <__assert_func+0x2c>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4605      	mov	r5, r0
 801265c:	68d8      	ldr	r0, [r3, #12]
 801265e:	b14c      	cbz	r4, 8012674 <__assert_func+0x24>
 8012660:	4b07      	ldr	r3, [pc, #28]	; (8012680 <__assert_func+0x30>)
 8012662:	9100      	str	r1, [sp, #0]
 8012664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012668:	4906      	ldr	r1, [pc, #24]	; (8012684 <__assert_func+0x34>)
 801266a:	462b      	mov	r3, r5
 801266c:	f000 f80e 	bl	801268c <fiprintf>
 8012670:	f000 faa4 	bl	8012bbc <abort>
 8012674:	4b04      	ldr	r3, [pc, #16]	; (8012688 <__assert_func+0x38>)
 8012676:	461c      	mov	r4, r3
 8012678:	e7f3      	b.n	8012662 <__assert_func+0x12>
 801267a:	bf00      	nop
 801267c:	20000024 	.word	0x20000024
 8012680:	08014825 	.word	0x08014825
 8012684:	08014832 	.word	0x08014832
 8012688:	08014860 	.word	0x08014860

0801268c <fiprintf>:
 801268c:	b40e      	push	{r1, r2, r3}
 801268e:	b503      	push	{r0, r1, lr}
 8012690:	4601      	mov	r1, r0
 8012692:	ab03      	add	r3, sp, #12
 8012694:	4805      	ldr	r0, [pc, #20]	; (80126ac <fiprintf+0x20>)
 8012696:	f853 2b04 	ldr.w	r2, [r3], #4
 801269a:	6800      	ldr	r0, [r0, #0]
 801269c:	9301      	str	r3, [sp, #4]
 801269e:	f000 f88f 	bl	80127c0 <_vfiprintf_r>
 80126a2:	b002      	add	sp, #8
 80126a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80126a8:	b003      	add	sp, #12
 80126aa:	4770      	bx	lr
 80126ac:	20000024 	.word	0x20000024

080126b0 <__retarget_lock_init_recursive>:
 80126b0:	4770      	bx	lr

080126b2 <__retarget_lock_acquire_recursive>:
 80126b2:	4770      	bx	lr

080126b4 <__retarget_lock_release_recursive>:
 80126b4:	4770      	bx	lr

080126b6 <__ascii_mbtowc>:
 80126b6:	b082      	sub	sp, #8
 80126b8:	b901      	cbnz	r1, 80126bc <__ascii_mbtowc+0x6>
 80126ba:	a901      	add	r1, sp, #4
 80126bc:	b142      	cbz	r2, 80126d0 <__ascii_mbtowc+0x1a>
 80126be:	b14b      	cbz	r3, 80126d4 <__ascii_mbtowc+0x1e>
 80126c0:	7813      	ldrb	r3, [r2, #0]
 80126c2:	600b      	str	r3, [r1, #0]
 80126c4:	7812      	ldrb	r2, [r2, #0]
 80126c6:	1e10      	subs	r0, r2, #0
 80126c8:	bf18      	it	ne
 80126ca:	2001      	movne	r0, #1
 80126cc:	b002      	add	sp, #8
 80126ce:	4770      	bx	lr
 80126d0:	4610      	mov	r0, r2
 80126d2:	e7fb      	b.n	80126cc <__ascii_mbtowc+0x16>
 80126d4:	f06f 0001 	mvn.w	r0, #1
 80126d8:	e7f8      	b.n	80126cc <__ascii_mbtowc+0x16>

080126da <memmove>:
 80126da:	4288      	cmp	r0, r1
 80126dc:	b510      	push	{r4, lr}
 80126de:	eb01 0402 	add.w	r4, r1, r2
 80126e2:	d902      	bls.n	80126ea <memmove+0x10>
 80126e4:	4284      	cmp	r4, r0
 80126e6:	4623      	mov	r3, r4
 80126e8:	d807      	bhi.n	80126fa <memmove+0x20>
 80126ea:	1e43      	subs	r3, r0, #1
 80126ec:	42a1      	cmp	r1, r4
 80126ee:	d008      	beq.n	8012702 <memmove+0x28>
 80126f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126f8:	e7f8      	b.n	80126ec <memmove+0x12>
 80126fa:	4402      	add	r2, r0
 80126fc:	4601      	mov	r1, r0
 80126fe:	428a      	cmp	r2, r1
 8012700:	d100      	bne.n	8012704 <memmove+0x2a>
 8012702:	bd10      	pop	{r4, pc}
 8012704:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012708:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801270c:	e7f7      	b.n	80126fe <memmove+0x24>

0801270e <_realloc_r>:
 801270e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012712:	4680      	mov	r8, r0
 8012714:	4614      	mov	r4, r2
 8012716:	460e      	mov	r6, r1
 8012718:	b921      	cbnz	r1, 8012724 <_realloc_r+0x16>
 801271a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801271e:	4611      	mov	r1, r2
 8012720:	f7fd bf06 	b.w	8010530 <_malloc_r>
 8012724:	b92a      	cbnz	r2, 8012732 <_realloc_r+0x24>
 8012726:	f7fd fe97 	bl	8010458 <_free_r>
 801272a:	4625      	mov	r5, r4
 801272c:	4628      	mov	r0, r5
 801272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012732:	f000 fc67 	bl	8013004 <_malloc_usable_size_r>
 8012736:	4284      	cmp	r4, r0
 8012738:	4607      	mov	r7, r0
 801273a:	d802      	bhi.n	8012742 <_realloc_r+0x34>
 801273c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012740:	d812      	bhi.n	8012768 <_realloc_r+0x5a>
 8012742:	4621      	mov	r1, r4
 8012744:	4640      	mov	r0, r8
 8012746:	f7fd fef3 	bl	8010530 <_malloc_r>
 801274a:	4605      	mov	r5, r0
 801274c:	2800      	cmp	r0, #0
 801274e:	d0ed      	beq.n	801272c <_realloc_r+0x1e>
 8012750:	42bc      	cmp	r4, r7
 8012752:	4622      	mov	r2, r4
 8012754:	4631      	mov	r1, r6
 8012756:	bf28      	it	cs
 8012758:	463a      	movcs	r2, r7
 801275a:	f7fd fe67 	bl	801042c <memcpy>
 801275e:	4631      	mov	r1, r6
 8012760:	4640      	mov	r0, r8
 8012762:	f7fd fe79 	bl	8010458 <_free_r>
 8012766:	e7e1      	b.n	801272c <_realloc_r+0x1e>
 8012768:	4635      	mov	r5, r6
 801276a:	e7df      	b.n	801272c <_realloc_r+0x1e>

0801276c <__sfputc_r>:
 801276c:	6893      	ldr	r3, [r2, #8]
 801276e:	3b01      	subs	r3, #1
 8012770:	2b00      	cmp	r3, #0
 8012772:	b410      	push	{r4}
 8012774:	6093      	str	r3, [r2, #8]
 8012776:	da08      	bge.n	801278a <__sfputc_r+0x1e>
 8012778:	6994      	ldr	r4, [r2, #24]
 801277a:	42a3      	cmp	r3, r4
 801277c:	db01      	blt.n	8012782 <__sfputc_r+0x16>
 801277e:	290a      	cmp	r1, #10
 8012780:	d103      	bne.n	801278a <__sfputc_r+0x1e>
 8012782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012786:	f000 b94b 	b.w	8012a20 <__swbuf_r>
 801278a:	6813      	ldr	r3, [r2, #0]
 801278c:	1c58      	adds	r0, r3, #1
 801278e:	6010      	str	r0, [r2, #0]
 8012790:	7019      	strb	r1, [r3, #0]
 8012792:	4608      	mov	r0, r1
 8012794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012798:	4770      	bx	lr

0801279a <__sfputs_r>:
 801279a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801279c:	4606      	mov	r6, r0
 801279e:	460f      	mov	r7, r1
 80127a0:	4614      	mov	r4, r2
 80127a2:	18d5      	adds	r5, r2, r3
 80127a4:	42ac      	cmp	r4, r5
 80127a6:	d101      	bne.n	80127ac <__sfputs_r+0x12>
 80127a8:	2000      	movs	r0, #0
 80127aa:	e007      	b.n	80127bc <__sfputs_r+0x22>
 80127ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127b0:	463a      	mov	r2, r7
 80127b2:	4630      	mov	r0, r6
 80127b4:	f7ff ffda 	bl	801276c <__sfputc_r>
 80127b8:	1c43      	adds	r3, r0, #1
 80127ba:	d1f3      	bne.n	80127a4 <__sfputs_r+0xa>
 80127bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080127c0 <_vfiprintf_r>:
 80127c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c4:	460d      	mov	r5, r1
 80127c6:	b09d      	sub	sp, #116	; 0x74
 80127c8:	4614      	mov	r4, r2
 80127ca:	4698      	mov	r8, r3
 80127cc:	4606      	mov	r6, r0
 80127ce:	b118      	cbz	r0, 80127d8 <_vfiprintf_r+0x18>
 80127d0:	6983      	ldr	r3, [r0, #24]
 80127d2:	b90b      	cbnz	r3, 80127d8 <_vfiprintf_r+0x18>
 80127d4:	f000 fb14 	bl	8012e00 <__sinit>
 80127d8:	4b89      	ldr	r3, [pc, #548]	; (8012a00 <_vfiprintf_r+0x240>)
 80127da:	429d      	cmp	r5, r3
 80127dc:	d11b      	bne.n	8012816 <_vfiprintf_r+0x56>
 80127de:	6875      	ldr	r5, [r6, #4]
 80127e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127e2:	07d9      	lsls	r1, r3, #31
 80127e4:	d405      	bmi.n	80127f2 <_vfiprintf_r+0x32>
 80127e6:	89ab      	ldrh	r3, [r5, #12]
 80127e8:	059a      	lsls	r2, r3, #22
 80127ea:	d402      	bmi.n	80127f2 <_vfiprintf_r+0x32>
 80127ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127ee:	f7ff ff60 	bl	80126b2 <__retarget_lock_acquire_recursive>
 80127f2:	89ab      	ldrh	r3, [r5, #12]
 80127f4:	071b      	lsls	r3, r3, #28
 80127f6:	d501      	bpl.n	80127fc <_vfiprintf_r+0x3c>
 80127f8:	692b      	ldr	r3, [r5, #16]
 80127fa:	b9eb      	cbnz	r3, 8012838 <_vfiprintf_r+0x78>
 80127fc:	4629      	mov	r1, r5
 80127fe:	4630      	mov	r0, r6
 8012800:	f000 f96e 	bl	8012ae0 <__swsetup_r>
 8012804:	b1c0      	cbz	r0, 8012838 <_vfiprintf_r+0x78>
 8012806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012808:	07dc      	lsls	r4, r3, #31
 801280a:	d50e      	bpl.n	801282a <_vfiprintf_r+0x6a>
 801280c:	f04f 30ff 	mov.w	r0, #4294967295
 8012810:	b01d      	add	sp, #116	; 0x74
 8012812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012816:	4b7b      	ldr	r3, [pc, #492]	; (8012a04 <_vfiprintf_r+0x244>)
 8012818:	429d      	cmp	r5, r3
 801281a:	d101      	bne.n	8012820 <_vfiprintf_r+0x60>
 801281c:	68b5      	ldr	r5, [r6, #8]
 801281e:	e7df      	b.n	80127e0 <_vfiprintf_r+0x20>
 8012820:	4b79      	ldr	r3, [pc, #484]	; (8012a08 <_vfiprintf_r+0x248>)
 8012822:	429d      	cmp	r5, r3
 8012824:	bf08      	it	eq
 8012826:	68f5      	ldreq	r5, [r6, #12]
 8012828:	e7da      	b.n	80127e0 <_vfiprintf_r+0x20>
 801282a:	89ab      	ldrh	r3, [r5, #12]
 801282c:	0598      	lsls	r0, r3, #22
 801282e:	d4ed      	bmi.n	801280c <_vfiprintf_r+0x4c>
 8012830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012832:	f7ff ff3f 	bl	80126b4 <__retarget_lock_release_recursive>
 8012836:	e7e9      	b.n	801280c <_vfiprintf_r+0x4c>
 8012838:	2300      	movs	r3, #0
 801283a:	9309      	str	r3, [sp, #36]	; 0x24
 801283c:	2320      	movs	r3, #32
 801283e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012842:	f8cd 800c 	str.w	r8, [sp, #12]
 8012846:	2330      	movs	r3, #48	; 0x30
 8012848:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012a0c <_vfiprintf_r+0x24c>
 801284c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012850:	f04f 0901 	mov.w	r9, #1
 8012854:	4623      	mov	r3, r4
 8012856:	469a      	mov	sl, r3
 8012858:	f813 2b01 	ldrb.w	r2, [r3], #1
 801285c:	b10a      	cbz	r2, 8012862 <_vfiprintf_r+0xa2>
 801285e:	2a25      	cmp	r2, #37	; 0x25
 8012860:	d1f9      	bne.n	8012856 <_vfiprintf_r+0x96>
 8012862:	ebba 0b04 	subs.w	fp, sl, r4
 8012866:	d00b      	beq.n	8012880 <_vfiprintf_r+0xc0>
 8012868:	465b      	mov	r3, fp
 801286a:	4622      	mov	r2, r4
 801286c:	4629      	mov	r1, r5
 801286e:	4630      	mov	r0, r6
 8012870:	f7ff ff93 	bl	801279a <__sfputs_r>
 8012874:	3001      	adds	r0, #1
 8012876:	f000 80aa 	beq.w	80129ce <_vfiprintf_r+0x20e>
 801287a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801287c:	445a      	add	r2, fp
 801287e:	9209      	str	r2, [sp, #36]	; 0x24
 8012880:	f89a 3000 	ldrb.w	r3, [sl]
 8012884:	2b00      	cmp	r3, #0
 8012886:	f000 80a2 	beq.w	80129ce <_vfiprintf_r+0x20e>
 801288a:	2300      	movs	r3, #0
 801288c:	f04f 32ff 	mov.w	r2, #4294967295
 8012890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012894:	f10a 0a01 	add.w	sl, sl, #1
 8012898:	9304      	str	r3, [sp, #16]
 801289a:	9307      	str	r3, [sp, #28]
 801289c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128a0:	931a      	str	r3, [sp, #104]	; 0x68
 80128a2:	4654      	mov	r4, sl
 80128a4:	2205      	movs	r2, #5
 80128a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128aa:	4858      	ldr	r0, [pc, #352]	; (8012a0c <_vfiprintf_r+0x24c>)
 80128ac:	f7ed fc98 	bl	80001e0 <memchr>
 80128b0:	9a04      	ldr	r2, [sp, #16]
 80128b2:	b9d8      	cbnz	r0, 80128ec <_vfiprintf_r+0x12c>
 80128b4:	06d1      	lsls	r1, r2, #27
 80128b6:	bf44      	itt	mi
 80128b8:	2320      	movmi	r3, #32
 80128ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128be:	0713      	lsls	r3, r2, #28
 80128c0:	bf44      	itt	mi
 80128c2:	232b      	movmi	r3, #43	; 0x2b
 80128c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128c8:	f89a 3000 	ldrb.w	r3, [sl]
 80128cc:	2b2a      	cmp	r3, #42	; 0x2a
 80128ce:	d015      	beq.n	80128fc <_vfiprintf_r+0x13c>
 80128d0:	9a07      	ldr	r2, [sp, #28]
 80128d2:	4654      	mov	r4, sl
 80128d4:	2000      	movs	r0, #0
 80128d6:	f04f 0c0a 	mov.w	ip, #10
 80128da:	4621      	mov	r1, r4
 80128dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128e0:	3b30      	subs	r3, #48	; 0x30
 80128e2:	2b09      	cmp	r3, #9
 80128e4:	d94e      	bls.n	8012984 <_vfiprintf_r+0x1c4>
 80128e6:	b1b0      	cbz	r0, 8012916 <_vfiprintf_r+0x156>
 80128e8:	9207      	str	r2, [sp, #28]
 80128ea:	e014      	b.n	8012916 <_vfiprintf_r+0x156>
 80128ec:	eba0 0308 	sub.w	r3, r0, r8
 80128f0:	fa09 f303 	lsl.w	r3, r9, r3
 80128f4:	4313      	orrs	r3, r2
 80128f6:	9304      	str	r3, [sp, #16]
 80128f8:	46a2      	mov	sl, r4
 80128fa:	e7d2      	b.n	80128a2 <_vfiprintf_r+0xe2>
 80128fc:	9b03      	ldr	r3, [sp, #12]
 80128fe:	1d19      	adds	r1, r3, #4
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	9103      	str	r1, [sp, #12]
 8012904:	2b00      	cmp	r3, #0
 8012906:	bfbb      	ittet	lt
 8012908:	425b      	neglt	r3, r3
 801290a:	f042 0202 	orrlt.w	r2, r2, #2
 801290e:	9307      	strge	r3, [sp, #28]
 8012910:	9307      	strlt	r3, [sp, #28]
 8012912:	bfb8      	it	lt
 8012914:	9204      	strlt	r2, [sp, #16]
 8012916:	7823      	ldrb	r3, [r4, #0]
 8012918:	2b2e      	cmp	r3, #46	; 0x2e
 801291a:	d10c      	bne.n	8012936 <_vfiprintf_r+0x176>
 801291c:	7863      	ldrb	r3, [r4, #1]
 801291e:	2b2a      	cmp	r3, #42	; 0x2a
 8012920:	d135      	bne.n	801298e <_vfiprintf_r+0x1ce>
 8012922:	9b03      	ldr	r3, [sp, #12]
 8012924:	1d1a      	adds	r2, r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	9203      	str	r2, [sp, #12]
 801292a:	2b00      	cmp	r3, #0
 801292c:	bfb8      	it	lt
 801292e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012932:	3402      	adds	r4, #2
 8012934:	9305      	str	r3, [sp, #20]
 8012936:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012a1c <_vfiprintf_r+0x25c>
 801293a:	7821      	ldrb	r1, [r4, #0]
 801293c:	2203      	movs	r2, #3
 801293e:	4650      	mov	r0, sl
 8012940:	f7ed fc4e 	bl	80001e0 <memchr>
 8012944:	b140      	cbz	r0, 8012958 <_vfiprintf_r+0x198>
 8012946:	2340      	movs	r3, #64	; 0x40
 8012948:	eba0 000a 	sub.w	r0, r0, sl
 801294c:	fa03 f000 	lsl.w	r0, r3, r0
 8012950:	9b04      	ldr	r3, [sp, #16]
 8012952:	4303      	orrs	r3, r0
 8012954:	3401      	adds	r4, #1
 8012956:	9304      	str	r3, [sp, #16]
 8012958:	f814 1b01 	ldrb.w	r1, [r4], #1
 801295c:	482c      	ldr	r0, [pc, #176]	; (8012a10 <_vfiprintf_r+0x250>)
 801295e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012962:	2206      	movs	r2, #6
 8012964:	f7ed fc3c 	bl	80001e0 <memchr>
 8012968:	2800      	cmp	r0, #0
 801296a:	d03f      	beq.n	80129ec <_vfiprintf_r+0x22c>
 801296c:	4b29      	ldr	r3, [pc, #164]	; (8012a14 <_vfiprintf_r+0x254>)
 801296e:	bb1b      	cbnz	r3, 80129b8 <_vfiprintf_r+0x1f8>
 8012970:	9b03      	ldr	r3, [sp, #12]
 8012972:	3307      	adds	r3, #7
 8012974:	f023 0307 	bic.w	r3, r3, #7
 8012978:	3308      	adds	r3, #8
 801297a:	9303      	str	r3, [sp, #12]
 801297c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801297e:	443b      	add	r3, r7
 8012980:	9309      	str	r3, [sp, #36]	; 0x24
 8012982:	e767      	b.n	8012854 <_vfiprintf_r+0x94>
 8012984:	fb0c 3202 	mla	r2, ip, r2, r3
 8012988:	460c      	mov	r4, r1
 801298a:	2001      	movs	r0, #1
 801298c:	e7a5      	b.n	80128da <_vfiprintf_r+0x11a>
 801298e:	2300      	movs	r3, #0
 8012990:	3401      	adds	r4, #1
 8012992:	9305      	str	r3, [sp, #20]
 8012994:	4619      	mov	r1, r3
 8012996:	f04f 0c0a 	mov.w	ip, #10
 801299a:	4620      	mov	r0, r4
 801299c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129a0:	3a30      	subs	r2, #48	; 0x30
 80129a2:	2a09      	cmp	r2, #9
 80129a4:	d903      	bls.n	80129ae <_vfiprintf_r+0x1ee>
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d0c5      	beq.n	8012936 <_vfiprintf_r+0x176>
 80129aa:	9105      	str	r1, [sp, #20]
 80129ac:	e7c3      	b.n	8012936 <_vfiprintf_r+0x176>
 80129ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80129b2:	4604      	mov	r4, r0
 80129b4:	2301      	movs	r3, #1
 80129b6:	e7f0      	b.n	801299a <_vfiprintf_r+0x1da>
 80129b8:	ab03      	add	r3, sp, #12
 80129ba:	9300      	str	r3, [sp, #0]
 80129bc:	462a      	mov	r2, r5
 80129be:	4b16      	ldr	r3, [pc, #88]	; (8012a18 <_vfiprintf_r+0x258>)
 80129c0:	a904      	add	r1, sp, #16
 80129c2:	4630      	mov	r0, r6
 80129c4:	f7fd fec8 	bl	8010758 <_printf_float>
 80129c8:	4607      	mov	r7, r0
 80129ca:	1c78      	adds	r0, r7, #1
 80129cc:	d1d6      	bne.n	801297c <_vfiprintf_r+0x1bc>
 80129ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129d0:	07d9      	lsls	r1, r3, #31
 80129d2:	d405      	bmi.n	80129e0 <_vfiprintf_r+0x220>
 80129d4:	89ab      	ldrh	r3, [r5, #12]
 80129d6:	059a      	lsls	r2, r3, #22
 80129d8:	d402      	bmi.n	80129e0 <_vfiprintf_r+0x220>
 80129da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129dc:	f7ff fe6a 	bl	80126b4 <__retarget_lock_release_recursive>
 80129e0:	89ab      	ldrh	r3, [r5, #12]
 80129e2:	065b      	lsls	r3, r3, #25
 80129e4:	f53f af12 	bmi.w	801280c <_vfiprintf_r+0x4c>
 80129e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129ea:	e711      	b.n	8012810 <_vfiprintf_r+0x50>
 80129ec:	ab03      	add	r3, sp, #12
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	462a      	mov	r2, r5
 80129f2:	4b09      	ldr	r3, [pc, #36]	; (8012a18 <_vfiprintf_r+0x258>)
 80129f4:	a904      	add	r1, sp, #16
 80129f6:	4630      	mov	r0, r6
 80129f8:	f7fe f952 	bl	8010ca0 <_printf_i>
 80129fc:	e7e4      	b.n	80129c8 <_vfiprintf_r+0x208>
 80129fe:	bf00      	nop
 8012a00:	0801498c 	.word	0x0801498c
 8012a04:	080149ac 	.word	0x080149ac
 8012a08:	0801496c 	.word	0x0801496c
 8012a0c:	08014814 	.word	0x08014814
 8012a10:	0801481e 	.word	0x0801481e
 8012a14:	08010759 	.word	0x08010759
 8012a18:	0801279b 	.word	0x0801279b
 8012a1c:	0801481a 	.word	0x0801481a

08012a20 <__swbuf_r>:
 8012a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a22:	460e      	mov	r6, r1
 8012a24:	4614      	mov	r4, r2
 8012a26:	4605      	mov	r5, r0
 8012a28:	b118      	cbz	r0, 8012a32 <__swbuf_r+0x12>
 8012a2a:	6983      	ldr	r3, [r0, #24]
 8012a2c:	b90b      	cbnz	r3, 8012a32 <__swbuf_r+0x12>
 8012a2e:	f000 f9e7 	bl	8012e00 <__sinit>
 8012a32:	4b21      	ldr	r3, [pc, #132]	; (8012ab8 <__swbuf_r+0x98>)
 8012a34:	429c      	cmp	r4, r3
 8012a36:	d12b      	bne.n	8012a90 <__swbuf_r+0x70>
 8012a38:	686c      	ldr	r4, [r5, #4]
 8012a3a:	69a3      	ldr	r3, [r4, #24]
 8012a3c:	60a3      	str	r3, [r4, #8]
 8012a3e:	89a3      	ldrh	r3, [r4, #12]
 8012a40:	071a      	lsls	r2, r3, #28
 8012a42:	d52f      	bpl.n	8012aa4 <__swbuf_r+0x84>
 8012a44:	6923      	ldr	r3, [r4, #16]
 8012a46:	b36b      	cbz	r3, 8012aa4 <__swbuf_r+0x84>
 8012a48:	6923      	ldr	r3, [r4, #16]
 8012a4a:	6820      	ldr	r0, [r4, #0]
 8012a4c:	1ac0      	subs	r0, r0, r3
 8012a4e:	6963      	ldr	r3, [r4, #20]
 8012a50:	b2f6      	uxtb	r6, r6
 8012a52:	4283      	cmp	r3, r0
 8012a54:	4637      	mov	r7, r6
 8012a56:	dc04      	bgt.n	8012a62 <__swbuf_r+0x42>
 8012a58:	4621      	mov	r1, r4
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	f000 f93c 	bl	8012cd8 <_fflush_r>
 8012a60:	bb30      	cbnz	r0, 8012ab0 <__swbuf_r+0x90>
 8012a62:	68a3      	ldr	r3, [r4, #8]
 8012a64:	3b01      	subs	r3, #1
 8012a66:	60a3      	str	r3, [r4, #8]
 8012a68:	6823      	ldr	r3, [r4, #0]
 8012a6a:	1c5a      	adds	r2, r3, #1
 8012a6c:	6022      	str	r2, [r4, #0]
 8012a6e:	701e      	strb	r6, [r3, #0]
 8012a70:	6963      	ldr	r3, [r4, #20]
 8012a72:	3001      	adds	r0, #1
 8012a74:	4283      	cmp	r3, r0
 8012a76:	d004      	beq.n	8012a82 <__swbuf_r+0x62>
 8012a78:	89a3      	ldrh	r3, [r4, #12]
 8012a7a:	07db      	lsls	r3, r3, #31
 8012a7c:	d506      	bpl.n	8012a8c <__swbuf_r+0x6c>
 8012a7e:	2e0a      	cmp	r6, #10
 8012a80:	d104      	bne.n	8012a8c <__swbuf_r+0x6c>
 8012a82:	4621      	mov	r1, r4
 8012a84:	4628      	mov	r0, r5
 8012a86:	f000 f927 	bl	8012cd8 <_fflush_r>
 8012a8a:	b988      	cbnz	r0, 8012ab0 <__swbuf_r+0x90>
 8012a8c:	4638      	mov	r0, r7
 8012a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a90:	4b0a      	ldr	r3, [pc, #40]	; (8012abc <__swbuf_r+0x9c>)
 8012a92:	429c      	cmp	r4, r3
 8012a94:	d101      	bne.n	8012a9a <__swbuf_r+0x7a>
 8012a96:	68ac      	ldr	r4, [r5, #8]
 8012a98:	e7cf      	b.n	8012a3a <__swbuf_r+0x1a>
 8012a9a:	4b09      	ldr	r3, [pc, #36]	; (8012ac0 <__swbuf_r+0xa0>)
 8012a9c:	429c      	cmp	r4, r3
 8012a9e:	bf08      	it	eq
 8012aa0:	68ec      	ldreq	r4, [r5, #12]
 8012aa2:	e7ca      	b.n	8012a3a <__swbuf_r+0x1a>
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	f000 f81a 	bl	8012ae0 <__swsetup_r>
 8012aac:	2800      	cmp	r0, #0
 8012aae:	d0cb      	beq.n	8012a48 <__swbuf_r+0x28>
 8012ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8012ab4:	e7ea      	b.n	8012a8c <__swbuf_r+0x6c>
 8012ab6:	bf00      	nop
 8012ab8:	0801498c 	.word	0x0801498c
 8012abc:	080149ac 	.word	0x080149ac
 8012ac0:	0801496c 	.word	0x0801496c

08012ac4 <__ascii_wctomb>:
 8012ac4:	b149      	cbz	r1, 8012ada <__ascii_wctomb+0x16>
 8012ac6:	2aff      	cmp	r2, #255	; 0xff
 8012ac8:	bf85      	ittet	hi
 8012aca:	238a      	movhi	r3, #138	; 0x8a
 8012acc:	6003      	strhi	r3, [r0, #0]
 8012ace:	700a      	strbls	r2, [r1, #0]
 8012ad0:	f04f 30ff 	movhi.w	r0, #4294967295
 8012ad4:	bf98      	it	ls
 8012ad6:	2001      	movls	r0, #1
 8012ad8:	4770      	bx	lr
 8012ada:	4608      	mov	r0, r1
 8012adc:	4770      	bx	lr
	...

08012ae0 <__swsetup_r>:
 8012ae0:	4b32      	ldr	r3, [pc, #200]	; (8012bac <__swsetup_r+0xcc>)
 8012ae2:	b570      	push	{r4, r5, r6, lr}
 8012ae4:	681d      	ldr	r5, [r3, #0]
 8012ae6:	4606      	mov	r6, r0
 8012ae8:	460c      	mov	r4, r1
 8012aea:	b125      	cbz	r5, 8012af6 <__swsetup_r+0x16>
 8012aec:	69ab      	ldr	r3, [r5, #24]
 8012aee:	b913      	cbnz	r3, 8012af6 <__swsetup_r+0x16>
 8012af0:	4628      	mov	r0, r5
 8012af2:	f000 f985 	bl	8012e00 <__sinit>
 8012af6:	4b2e      	ldr	r3, [pc, #184]	; (8012bb0 <__swsetup_r+0xd0>)
 8012af8:	429c      	cmp	r4, r3
 8012afa:	d10f      	bne.n	8012b1c <__swsetup_r+0x3c>
 8012afc:	686c      	ldr	r4, [r5, #4]
 8012afe:	89a3      	ldrh	r3, [r4, #12]
 8012b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b04:	0719      	lsls	r1, r3, #28
 8012b06:	d42c      	bmi.n	8012b62 <__swsetup_r+0x82>
 8012b08:	06dd      	lsls	r5, r3, #27
 8012b0a:	d411      	bmi.n	8012b30 <__swsetup_r+0x50>
 8012b0c:	2309      	movs	r3, #9
 8012b0e:	6033      	str	r3, [r6, #0]
 8012b10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b14:	81a3      	strh	r3, [r4, #12]
 8012b16:	f04f 30ff 	mov.w	r0, #4294967295
 8012b1a:	e03e      	b.n	8012b9a <__swsetup_r+0xba>
 8012b1c:	4b25      	ldr	r3, [pc, #148]	; (8012bb4 <__swsetup_r+0xd4>)
 8012b1e:	429c      	cmp	r4, r3
 8012b20:	d101      	bne.n	8012b26 <__swsetup_r+0x46>
 8012b22:	68ac      	ldr	r4, [r5, #8]
 8012b24:	e7eb      	b.n	8012afe <__swsetup_r+0x1e>
 8012b26:	4b24      	ldr	r3, [pc, #144]	; (8012bb8 <__swsetup_r+0xd8>)
 8012b28:	429c      	cmp	r4, r3
 8012b2a:	bf08      	it	eq
 8012b2c:	68ec      	ldreq	r4, [r5, #12]
 8012b2e:	e7e6      	b.n	8012afe <__swsetup_r+0x1e>
 8012b30:	0758      	lsls	r0, r3, #29
 8012b32:	d512      	bpl.n	8012b5a <__swsetup_r+0x7a>
 8012b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b36:	b141      	cbz	r1, 8012b4a <__swsetup_r+0x6a>
 8012b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b3c:	4299      	cmp	r1, r3
 8012b3e:	d002      	beq.n	8012b46 <__swsetup_r+0x66>
 8012b40:	4630      	mov	r0, r6
 8012b42:	f7fd fc89 	bl	8010458 <_free_r>
 8012b46:	2300      	movs	r3, #0
 8012b48:	6363      	str	r3, [r4, #52]	; 0x34
 8012b4a:	89a3      	ldrh	r3, [r4, #12]
 8012b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b50:	81a3      	strh	r3, [r4, #12]
 8012b52:	2300      	movs	r3, #0
 8012b54:	6063      	str	r3, [r4, #4]
 8012b56:	6923      	ldr	r3, [r4, #16]
 8012b58:	6023      	str	r3, [r4, #0]
 8012b5a:	89a3      	ldrh	r3, [r4, #12]
 8012b5c:	f043 0308 	orr.w	r3, r3, #8
 8012b60:	81a3      	strh	r3, [r4, #12]
 8012b62:	6923      	ldr	r3, [r4, #16]
 8012b64:	b94b      	cbnz	r3, 8012b7a <__swsetup_r+0x9a>
 8012b66:	89a3      	ldrh	r3, [r4, #12]
 8012b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b70:	d003      	beq.n	8012b7a <__swsetup_r+0x9a>
 8012b72:	4621      	mov	r1, r4
 8012b74:	4630      	mov	r0, r6
 8012b76:	f000 fa05 	bl	8012f84 <__smakebuf_r>
 8012b7a:	89a0      	ldrh	r0, [r4, #12]
 8012b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b80:	f010 0301 	ands.w	r3, r0, #1
 8012b84:	d00a      	beq.n	8012b9c <__swsetup_r+0xbc>
 8012b86:	2300      	movs	r3, #0
 8012b88:	60a3      	str	r3, [r4, #8]
 8012b8a:	6963      	ldr	r3, [r4, #20]
 8012b8c:	425b      	negs	r3, r3
 8012b8e:	61a3      	str	r3, [r4, #24]
 8012b90:	6923      	ldr	r3, [r4, #16]
 8012b92:	b943      	cbnz	r3, 8012ba6 <__swsetup_r+0xc6>
 8012b94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b98:	d1ba      	bne.n	8012b10 <__swsetup_r+0x30>
 8012b9a:	bd70      	pop	{r4, r5, r6, pc}
 8012b9c:	0781      	lsls	r1, r0, #30
 8012b9e:	bf58      	it	pl
 8012ba0:	6963      	ldrpl	r3, [r4, #20]
 8012ba2:	60a3      	str	r3, [r4, #8]
 8012ba4:	e7f4      	b.n	8012b90 <__swsetup_r+0xb0>
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	e7f7      	b.n	8012b9a <__swsetup_r+0xba>
 8012baa:	bf00      	nop
 8012bac:	20000024 	.word	0x20000024
 8012bb0:	0801498c 	.word	0x0801498c
 8012bb4:	080149ac 	.word	0x080149ac
 8012bb8:	0801496c 	.word	0x0801496c

08012bbc <abort>:
 8012bbc:	b508      	push	{r3, lr}
 8012bbe:	2006      	movs	r0, #6
 8012bc0:	f000 fa50 	bl	8013064 <raise>
 8012bc4:	2001      	movs	r0, #1
 8012bc6:	f7f3 fcab 	bl	8006520 <_exit>
	...

08012bcc <__sflush_r>:
 8012bcc:	898a      	ldrh	r2, [r1, #12]
 8012bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd2:	4605      	mov	r5, r0
 8012bd4:	0710      	lsls	r0, r2, #28
 8012bd6:	460c      	mov	r4, r1
 8012bd8:	d458      	bmi.n	8012c8c <__sflush_r+0xc0>
 8012bda:	684b      	ldr	r3, [r1, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	dc05      	bgt.n	8012bec <__sflush_r+0x20>
 8012be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	dc02      	bgt.n	8012bec <__sflush_r+0x20>
 8012be6:	2000      	movs	r0, #0
 8012be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bee:	2e00      	cmp	r6, #0
 8012bf0:	d0f9      	beq.n	8012be6 <__sflush_r+0x1a>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012bf8:	682f      	ldr	r7, [r5, #0]
 8012bfa:	602b      	str	r3, [r5, #0]
 8012bfc:	d032      	beq.n	8012c64 <__sflush_r+0x98>
 8012bfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c00:	89a3      	ldrh	r3, [r4, #12]
 8012c02:	075a      	lsls	r2, r3, #29
 8012c04:	d505      	bpl.n	8012c12 <__sflush_r+0x46>
 8012c06:	6863      	ldr	r3, [r4, #4]
 8012c08:	1ac0      	subs	r0, r0, r3
 8012c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c0c:	b10b      	cbz	r3, 8012c12 <__sflush_r+0x46>
 8012c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c10:	1ac0      	subs	r0, r0, r3
 8012c12:	2300      	movs	r3, #0
 8012c14:	4602      	mov	r2, r0
 8012c16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c18:	6a21      	ldr	r1, [r4, #32]
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	47b0      	blx	r6
 8012c1e:	1c43      	adds	r3, r0, #1
 8012c20:	89a3      	ldrh	r3, [r4, #12]
 8012c22:	d106      	bne.n	8012c32 <__sflush_r+0x66>
 8012c24:	6829      	ldr	r1, [r5, #0]
 8012c26:	291d      	cmp	r1, #29
 8012c28:	d82c      	bhi.n	8012c84 <__sflush_r+0xb8>
 8012c2a:	4a2a      	ldr	r2, [pc, #168]	; (8012cd4 <__sflush_r+0x108>)
 8012c2c:	40ca      	lsrs	r2, r1
 8012c2e:	07d6      	lsls	r6, r2, #31
 8012c30:	d528      	bpl.n	8012c84 <__sflush_r+0xb8>
 8012c32:	2200      	movs	r2, #0
 8012c34:	6062      	str	r2, [r4, #4]
 8012c36:	04d9      	lsls	r1, r3, #19
 8012c38:	6922      	ldr	r2, [r4, #16]
 8012c3a:	6022      	str	r2, [r4, #0]
 8012c3c:	d504      	bpl.n	8012c48 <__sflush_r+0x7c>
 8012c3e:	1c42      	adds	r2, r0, #1
 8012c40:	d101      	bne.n	8012c46 <__sflush_r+0x7a>
 8012c42:	682b      	ldr	r3, [r5, #0]
 8012c44:	b903      	cbnz	r3, 8012c48 <__sflush_r+0x7c>
 8012c46:	6560      	str	r0, [r4, #84]	; 0x54
 8012c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c4a:	602f      	str	r7, [r5, #0]
 8012c4c:	2900      	cmp	r1, #0
 8012c4e:	d0ca      	beq.n	8012be6 <__sflush_r+0x1a>
 8012c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c54:	4299      	cmp	r1, r3
 8012c56:	d002      	beq.n	8012c5e <__sflush_r+0x92>
 8012c58:	4628      	mov	r0, r5
 8012c5a:	f7fd fbfd 	bl	8010458 <_free_r>
 8012c5e:	2000      	movs	r0, #0
 8012c60:	6360      	str	r0, [r4, #52]	; 0x34
 8012c62:	e7c1      	b.n	8012be8 <__sflush_r+0x1c>
 8012c64:	6a21      	ldr	r1, [r4, #32]
 8012c66:	2301      	movs	r3, #1
 8012c68:	4628      	mov	r0, r5
 8012c6a:	47b0      	blx	r6
 8012c6c:	1c41      	adds	r1, r0, #1
 8012c6e:	d1c7      	bne.n	8012c00 <__sflush_r+0x34>
 8012c70:	682b      	ldr	r3, [r5, #0]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d0c4      	beq.n	8012c00 <__sflush_r+0x34>
 8012c76:	2b1d      	cmp	r3, #29
 8012c78:	d001      	beq.n	8012c7e <__sflush_r+0xb2>
 8012c7a:	2b16      	cmp	r3, #22
 8012c7c:	d101      	bne.n	8012c82 <__sflush_r+0xb6>
 8012c7e:	602f      	str	r7, [r5, #0]
 8012c80:	e7b1      	b.n	8012be6 <__sflush_r+0x1a>
 8012c82:	89a3      	ldrh	r3, [r4, #12]
 8012c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c88:	81a3      	strh	r3, [r4, #12]
 8012c8a:	e7ad      	b.n	8012be8 <__sflush_r+0x1c>
 8012c8c:	690f      	ldr	r7, [r1, #16]
 8012c8e:	2f00      	cmp	r7, #0
 8012c90:	d0a9      	beq.n	8012be6 <__sflush_r+0x1a>
 8012c92:	0793      	lsls	r3, r2, #30
 8012c94:	680e      	ldr	r6, [r1, #0]
 8012c96:	bf08      	it	eq
 8012c98:	694b      	ldreq	r3, [r1, #20]
 8012c9a:	600f      	str	r7, [r1, #0]
 8012c9c:	bf18      	it	ne
 8012c9e:	2300      	movne	r3, #0
 8012ca0:	eba6 0807 	sub.w	r8, r6, r7
 8012ca4:	608b      	str	r3, [r1, #8]
 8012ca6:	f1b8 0f00 	cmp.w	r8, #0
 8012caa:	dd9c      	ble.n	8012be6 <__sflush_r+0x1a>
 8012cac:	6a21      	ldr	r1, [r4, #32]
 8012cae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012cb0:	4643      	mov	r3, r8
 8012cb2:	463a      	mov	r2, r7
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	47b0      	blx	r6
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	dc06      	bgt.n	8012cca <__sflush_r+0xfe>
 8012cbc:	89a3      	ldrh	r3, [r4, #12]
 8012cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cc2:	81a3      	strh	r3, [r4, #12]
 8012cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc8:	e78e      	b.n	8012be8 <__sflush_r+0x1c>
 8012cca:	4407      	add	r7, r0
 8012ccc:	eba8 0800 	sub.w	r8, r8, r0
 8012cd0:	e7e9      	b.n	8012ca6 <__sflush_r+0xda>
 8012cd2:	bf00      	nop
 8012cd4:	20400001 	.word	0x20400001

08012cd8 <_fflush_r>:
 8012cd8:	b538      	push	{r3, r4, r5, lr}
 8012cda:	690b      	ldr	r3, [r1, #16]
 8012cdc:	4605      	mov	r5, r0
 8012cde:	460c      	mov	r4, r1
 8012ce0:	b913      	cbnz	r3, 8012ce8 <_fflush_r+0x10>
 8012ce2:	2500      	movs	r5, #0
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	bd38      	pop	{r3, r4, r5, pc}
 8012ce8:	b118      	cbz	r0, 8012cf2 <_fflush_r+0x1a>
 8012cea:	6983      	ldr	r3, [r0, #24]
 8012cec:	b90b      	cbnz	r3, 8012cf2 <_fflush_r+0x1a>
 8012cee:	f000 f887 	bl	8012e00 <__sinit>
 8012cf2:	4b14      	ldr	r3, [pc, #80]	; (8012d44 <_fflush_r+0x6c>)
 8012cf4:	429c      	cmp	r4, r3
 8012cf6:	d11b      	bne.n	8012d30 <_fflush_r+0x58>
 8012cf8:	686c      	ldr	r4, [r5, #4]
 8012cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d0ef      	beq.n	8012ce2 <_fflush_r+0xa>
 8012d02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d04:	07d0      	lsls	r0, r2, #31
 8012d06:	d404      	bmi.n	8012d12 <_fflush_r+0x3a>
 8012d08:	0599      	lsls	r1, r3, #22
 8012d0a:	d402      	bmi.n	8012d12 <_fflush_r+0x3a>
 8012d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d0e:	f7ff fcd0 	bl	80126b2 <__retarget_lock_acquire_recursive>
 8012d12:	4628      	mov	r0, r5
 8012d14:	4621      	mov	r1, r4
 8012d16:	f7ff ff59 	bl	8012bcc <__sflush_r>
 8012d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d1c:	07da      	lsls	r2, r3, #31
 8012d1e:	4605      	mov	r5, r0
 8012d20:	d4e0      	bmi.n	8012ce4 <_fflush_r+0xc>
 8012d22:	89a3      	ldrh	r3, [r4, #12]
 8012d24:	059b      	lsls	r3, r3, #22
 8012d26:	d4dd      	bmi.n	8012ce4 <_fflush_r+0xc>
 8012d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d2a:	f7ff fcc3 	bl	80126b4 <__retarget_lock_release_recursive>
 8012d2e:	e7d9      	b.n	8012ce4 <_fflush_r+0xc>
 8012d30:	4b05      	ldr	r3, [pc, #20]	; (8012d48 <_fflush_r+0x70>)
 8012d32:	429c      	cmp	r4, r3
 8012d34:	d101      	bne.n	8012d3a <_fflush_r+0x62>
 8012d36:	68ac      	ldr	r4, [r5, #8]
 8012d38:	e7df      	b.n	8012cfa <_fflush_r+0x22>
 8012d3a:	4b04      	ldr	r3, [pc, #16]	; (8012d4c <_fflush_r+0x74>)
 8012d3c:	429c      	cmp	r4, r3
 8012d3e:	bf08      	it	eq
 8012d40:	68ec      	ldreq	r4, [r5, #12]
 8012d42:	e7da      	b.n	8012cfa <_fflush_r+0x22>
 8012d44:	0801498c 	.word	0x0801498c
 8012d48:	080149ac 	.word	0x080149ac
 8012d4c:	0801496c 	.word	0x0801496c

08012d50 <std>:
 8012d50:	2300      	movs	r3, #0
 8012d52:	b510      	push	{r4, lr}
 8012d54:	4604      	mov	r4, r0
 8012d56:	e9c0 3300 	strd	r3, r3, [r0]
 8012d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d5e:	6083      	str	r3, [r0, #8]
 8012d60:	8181      	strh	r1, [r0, #12]
 8012d62:	6643      	str	r3, [r0, #100]	; 0x64
 8012d64:	81c2      	strh	r2, [r0, #14]
 8012d66:	6183      	str	r3, [r0, #24]
 8012d68:	4619      	mov	r1, r3
 8012d6a:	2208      	movs	r2, #8
 8012d6c:	305c      	adds	r0, #92	; 0x5c
 8012d6e:	f7fd fb6b 	bl	8010448 <memset>
 8012d72:	4b05      	ldr	r3, [pc, #20]	; (8012d88 <std+0x38>)
 8012d74:	6263      	str	r3, [r4, #36]	; 0x24
 8012d76:	4b05      	ldr	r3, [pc, #20]	; (8012d8c <std+0x3c>)
 8012d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d7a:	4b05      	ldr	r3, [pc, #20]	; (8012d90 <std+0x40>)
 8012d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d7e:	4b05      	ldr	r3, [pc, #20]	; (8012d94 <std+0x44>)
 8012d80:	6224      	str	r4, [r4, #32]
 8012d82:	6323      	str	r3, [r4, #48]	; 0x30
 8012d84:	bd10      	pop	{r4, pc}
 8012d86:	bf00      	nop
 8012d88:	0801309d 	.word	0x0801309d
 8012d8c:	080130bf 	.word	0x080130bf
 8012d90:	080130f7 	.word	0x080130f7
 8012d94:	0801311b 	.word	0x0801311b

08012d98 <_cleanup_r>:
 8012d98:	4901      	ldr	r1, [pc, #4]	; (8012da0 <_cleanup_r+0x8>)
 8012d9a:	f000 b8af 	b.w	8012efc <_fwalk_reent>
 8012d9e:	bf00      	nop
 8012da0:	08012cd9 	.word	0x08012cd9

08012da4 <__sfmoreglue>:
 8012da4:	b570      	push	{r4, r5, r6, lr}
 8012da6:	2268      	movs	r2, #104	; 0x68
 8012da8:	1e4d      	subs	r5, r1, #1
 8012daa:	4355      	muls	r5, r2
 8012dac:	460e      	mov	r6, r1
 8012dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012db2:	f7fd fbbd 	bl	8010530 <_malloc_r>
 8012db6:	4604      	mov	r4, r0
 8012db8:	b140      	cbz	r0, 8012dcc <__sfmoreglue+0x28>
 8012dba:	2100      	movs	r1, #0
 8012dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8012dc0:	300c      	adds	r0, #12
 8012dc2:	60a0      	str	r0, [r4, #8]
 8012dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012dc8:	f7fd fb3e 	bl	8010448 <memset>
 8012dcc:	4620      	mov	r0, r4
 8012dce:	bd70      	pop	{r4, r5, r6, pc}

08012dd0 <__sfp_lock_acquire>:
 8012dd0:	4801      	ldr	r0, [pc, #4]	; (8012dd8 <__sfp_lock_acquire+0x8>)
 8012dd2:	f7ff bc6e 	b.w	80126b2 <__retarget_lock_acquire_recursive>
 8012dd6:	bf00      	nop
 8012dd8:	20002da9 	.word	0x20002da9

08012ddc <__sfp_lock_release>:
 8012ddc:	4801      	ldr	r0, [pc, #4]	; (8012de4 <__sfp_lock_release+0x8>)
 8012dde:	f7ff bc69 	b.w	80126b4 <__retarget_lock_release_recursive>
 8012de2:	bf00      	nop
 8012de4:	20002da9 	.word	0x20002da9

08012de8 <__sinit_lock_acquire>:
 8012de8:	4801      	ldr	r0, [pc, #4]	; (8012df0 <__sinit_lock_acquire+0x8>)
 8012dea:	f7ff bc62 	b.w	80126b2 <__retarget_lock_acquire_recursive>
 8012dee:	bf00      	nop
 8012df0:	20002daa 	.word	0x20002daa

08012df4 <__sinit_lock_release>:
 8012df4:	4801      	ldr	r0, [pc, #4]	; (8012dfc <__sinit_lock_release+0x8>)
 8012df6:	f7ff bc5d 	b.w	80126b4 <__retarget_lock_release_recursive>
 8012dfa:	bf00      	nop
 8012dfc:	20002daa 	.word	0x20002daa

08012e00 <__sinit>:
 8012e00:	b510      	push	{r4, lr}
 8012e02:	4604      	mov	r4, r0
 8012e04:	f7ff fff0 	bl	8012de8 <__sinit_lock_acquire>
 8012e08:	69a3      	ldr	r3, [r4, #24]
 8012e0a:	b11b      	cbz	r3, 8012e14 <__sinit+0x14>
 8012e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e10:	f7ff bff0 	b.w	8012df4 <__sinit_lock_release>
 8012e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e18:	6523      	str	r3, [r4, #80]	; 0x50
 8012e1a:	4b13      	ldr	r3, [pc, #76]	; (8012e68 <__sinit+0x68>)
 8012e1c:	4a13      	ldr	r2, [pc, #76]	; (8012e6c <__sinit+0x6c>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e22:	42a3      	cmp	r3, r4
 8012e24:	bf04      	itt	eq
 8012e26:	2301      	moveq	r3, #1
 8012e28:	61a3      	streq	r3, [r4, #24]
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f000 f820 	bl	8012e70 <__sfp>
 8012e30:	6060      	str	r0, [r4, #4]
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 f81c 	bl	8012e70 <__sfp>
 8012e38:	60a0      	str	r0, [r4, #8]
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f000 f818 	bl	8012e70 <__sfp>
 8012e40:	2200      	movs	r2, #0
 8012e42:	60e0      	str	r0, [r4, #12]
 8012e44:	2104      	movs	r1, #4
 8012e46:	6860      	ldr	r0, [r4, #4]
 8012e48:	f7ff ff82 	bl	8012d50 <std>
 8012e4c:	68a0      	ldr	r0, [r4, #8]
 8012e4e:	2201      	movs	r2, #1
 8012e50:	2109      	movs	r1, #9
 8012e52:	f7ff ff7d 	bl	8012d50 <std>
 8012e56:	68e0      	ldr	r0, [r4, #12]
 8012e58:	2202      	movs	r2, #2
 8012e5a:	2112      	movs	r1, #18
 8012e5c:	f7ff ff78 	bl	8012d50 <std>
 8012e60:	2301      	movs	r3, #1
 8012e62:	61a3      	str	r3, [r4, #24]
 8012e64:	e7d2      	b.n	8012e0c <__sinit+0xc>
 8012e66:	bf00      	nop
 8012e68:	080145f0 	.word	0x080145f0
 8012e6c:	08012d99 	.word	0x08012d99

08012e70 <__sfp>:
 8012e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e72:	4607      	mov	r7, r0
 8012e74:	f7ff ffac 	bl	8012dd0 <__sfp_lock_acquire>
 8012e78:	4b1e      	ldr	r3, [pc, #120]	; (8012ef4 <__sfp+0x84>)
 8012e7a:	681e      	ldr	r6, [r3, #0]
 8012e7c:	69b3      	ldr	r3, [r6, #24]
 8012e7e:	b913      	cbnz	r3, 8012e86 <__sfp+0x16>
 8012e80:	4630      	mov	r0, r6
 8012e82:	f7ff ffbd 	bl	8012e00 <__sinit>
 8012e86:	3648      	adds	r6, #72	; 0x48
 8012e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	d503      	bpl.n	8012e98 <__sfp+0x28>
 8012e90:	6833      	ldr	r3, [r6, #0]
 8012e92:	b30b      	cbz	r3, 8012ed8 <__sfp+0x68>
 8012e94:	6836      	ldr	r6, [r6, #0]
 8012e96:	e7f7      	b.n	8012e88 <__sfp+0x18>
 8012e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e9c:	b9d5      	cbnz	r5, 8012ed4 <__sfp+0x64>
 8012e9e:	4b16      	ldr	r3, [pc, #88]	; (8012ef8 <__sfp+0x88>)
 8012ea0:	60e3      	str	r3, [r4, #12]
 8012ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8012ea8:	f7ff fc02 	bl	80126b0 <__retarget_lock_init_recursive>
 8012eac:	f7ff ff96 	bl	8012ddc <__sfp_lock_release>
 8012eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012eb8:	6025      	str	r5, [r4, #0]
 8012eba:	61a5      	str	r5, [r4, #24]
 8012ebc:	2208      	movs	r2, #8
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ec4:	f7fd fac0 	bl	8010448 <memset>
 8012ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ed4:	3468      	adds	r4, #104	; 0x68
 8012ed6:	e7d9      	b.n	8012e8c <__sfp+0x1c>
 8012ed8:	2104      	movs	r1, #4
 8012eda:	4638      	mov	r0, r7
 8012edc:	f7ff ff62 	bl	8012da4 <__sfmoreglue>
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	6030      	str	r0, [r6, #0]
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d1d5      	bne.n	8012e94 <__sfp+0x24>
 8012ee8:	f7ff ff78 	bl	8012ddc <__sfp_lock_release>
 8012eec:	230c      	movs	r3, #12
 8012eee:	603b      	str	r3, [r7, #0]
 8012ef0:	e7ee      	b.n	8012ed0 <__sfp+0x60>
 8012ef2:	bf00      	nop
 8012ef4:	080145f0 	.word	0x080145f0
 8012ef8:	ffff0001 	.word	0xffff0001

08012efc <_fwalk_reent>:
 8012efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f00:	4606      	mov	r6, r0
 8012f02:	4688      	mov	r8, r1
 8012f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f08:	2700      	movs	r7, #0
 8012f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8012f12:	d505      	bpl.n	8012f20 <_fwalk_reent+0x24>
 8012f14:	6824      	ldr	r4, [r4, #0]
 8012f16:	2c00      	cmp	r4, #0
 8012f18:	d1f7      	bne.n	8012f0a <_fwalk_reent+0xe>
 8012f1a:	4638      	mov	r0, r7
 8012f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f20:	89ab      	ldrh	r3, [r5, #12]
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	d907      	bls.n	8012f36 <_fwalk_reent+0x3a>
 8012f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	d003      	beq.n	8012f36 <_fwalk_reent+0x3a>
 8012f2e:	4629      	mov	r1, r5
 8012f30:	4630      	mov	r0, r6
 8012f32:	47c0      	blx	r8
 8012f34:	4307      	orrs	r7, r0
 8012f36:	3568      	adds	r5, #104	; 0x68
 8012f38:	e7e9      	b.n	8012f0e <_fwalk_reent+0x12>

08012f3a <__swhatbuf_r>:
 8012f3a:	b570      	push	{r4, r5, r6, lr}
 8012f3c:	460e      	mov	r6, r1
 8012f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f42:	2900      	cmp	r1, #0
 8012f44:	b096      	sub	sp, #88	; 0x58
 8012f46:	4614      	mov	r4, r2
 8012f48:	461d      	mov	r5, r3
 8012f4a:	da08      	bge.n	8012f5e <__swhatbuf_r+0x24>
 8012f4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012f50:	2200      	movs	r2, #0
 8012f52:	602a      	str	r2, [r5, #0]
 8012f54:	061a      	lsls	r2, r3, #24
 8012f56:	d410      	bmi.n	8012f7a <__swhatbuf_r+0x40>
 8012f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f5c:	e00e      	b.n	8012f7c <__swhatbuf_r+0x42>
 8012f5e:	466a      	mov	r2, sp
 8012f60:	f000 f902 	bl	8013168 <_fstat_r>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	dbf1      	blt.n	8012f4c <__swhatbuf_r+0x12>
 8012f68:	9a01      	ldr	r2, [sp, #4]
 8012f6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012f6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012f72:	425a      	negs	r2, r3
 8012f74:	415a      	adcs	r2, r3
 8012f76:	602a      	str	r2, [r5, #0]
 8012f78:	e7ee      	b.n	8012f58 <__swhatbuf_r+0x1e>
 8012f7a:	2340      	movs	r3, #64	; 0x40
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	6023      	str	r3, [r4, #0]
 8012f80:	b016      	add	sp, #88	; 0x58
 8012f82:	bd70      	pop	{r4, r5, r6, pc}

08012f84 <__smakebuf_r>:
 8012f84:	898b      	ldrh	r3, [r1, #12]
 8012f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f88:	079d      	lsls	r5, r3, #30
 8012f8a:	4606      	mov	r6, r0
 8012f8c:	460c      	mov	r4, r1
 8012f8e:	d507      	bpl.n	8012fa0 <__smakebuf_r+0x1c>
 8012f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f94:	6023      	str	r3, [r4, #0]
 8012f96:	6123      	str	r3, [r4, #16]
 8012f98:	2301      	movs	r3, #1
 8012f9a:	6163      	str	r3, [r4, #20]
 8012f9c:	b002      	add	sp, #8
 8012f9e:	bd70      	pop	{r4, r5, r6, pc}
 8012fa0:	ab01      	add	r3, sp, #4
 8012fa2:	466a      	mov	r2, sp
 8012fa4:	f7ff ffc9 	bl	8012f3a <__swhatbuf_r>
 8012fa8:	9900      	ldr	r1, [sp, #0]
 8012faa:	4605      	mov	r5, r0
 8012fac:	4630      	mov	r0, r6
 8012fae:	f7fd fabf 	bl	8010530 <_malloc_r>
 8012fb2:	b948      	cbnz	r0, 8012fc8 <__smakebuf_r+0x44>
 8012fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fb8:	059a      	lsls	r2, r3, #22
 8012fba:	d4ef      	bmi.n	8012f9c <__smakebuf_r+0x18>
 8012fbc:	f023 0303 	bic.w	r3, r3, #3
 8012fc0:	f043 0302 	orr.w	r3, r3, #2
 8012fc4:	81a3      	strh	r3, [r4, #12]
 8012fc6:	e7e3      	b.n	8012f90 <__smakebuf_r+0xc>
 8012fc8:	4b0d      	ldr	r3, [pc, #52]	; (8013000 <__smakebuf_r+0x7c>)
 8012fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8012fcc:	89a3      	ldrh	r3, [r4, #12]
 8012fce:	6020      	str	r0, [r4, #0]
 8012fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fd4:	81a3      	strh	r3, [r4, #12]
 8012fd6:	9b00      	ldr	r3, [sp, #0]
 8012fd8:	6163      	str	r3, [r4, #20]
 8012fda:	9b01      	ldr	r3, [sp, #4]
 8012fdc:	6120      	str	r0, [r4, #16]
 8012fde:	b15b      	cbz	r3, 8012ff8 <__smakebuf_r+0x74>
 8012fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	f000 f8d1 	bl	801318c <_isatty_r>
 8012fea:	b128      	cbz	r0, 8012ff8 <__smakebuf_r+0x74>
 8012fec:	89a3      	ldrh	r3, [r4, #12]
 8012fee:	f023 0303 	bic.w	r3, r3, #3
 8012ff2:	f043 0301 	orr.w	r3, r3, #1
 8012ff6:	81a3      	strh	r3, [r4, #12]
 8012ff8:	89a0      	ldrh	r0, [r4, #12]
 8012ffa:	4305      	orrs	r5, r0
 8012ffc:	81a5      	strh	r5, [r4, #12]
 8012ffe:	e7cd      	b.n	8012f9c <__smakebuf_r+0x18>
 8013000:	08012d99 	.word	0x08012d99

08013004 <_malloc_usable_size_r>:
 8013004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013008:	1f18      	subs	r0, r3, #4
 801300a:	2b00      	cmp	r3, #0
 801300c:	bfbc      	itt	lt
 801300e:	580b      	ldrlt	r3, [r1, r0]
 8013010:	18c0      	addlt	r0, r0, r3
 8013012:	4770      	bx	lr

08013014 <_raise_r>:
 8013014:	291f      	cmp	r1, #31
 8013016:	b538      	push	{r3, r4, r5, lr}
 8013018:	4604      	mov	r4, r0
 801301a:	460d      	mov	r5, r1
 801301c:	d904      	bls.n	8013028 <_raise_r+0x14>
 801301e:	2316      	movs	r3, #22
 8013020:	6003      	str	r3, [r0, #0]
 8013022:	f04f 30ff 	mov.w	r0, #4294967295
 8013026:	bd38      	pop	{r3, r4, r5, pc}
 8013028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801302a:	b112      	cbz	r2, 8013032 <_raise_r+0x1e>
 801302c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013030:	b94b      	cbnz	r3, 8013046 <_raise_r+0x32>
 8013032:	4620      	mov	r0, r4
 8013034:	f000 f830 	bl	8013098 <_getpid_r>
 8013038:	462a      	mov	r2, r5
 801303a:	4601      	mov	r1, r0
 801303c:	4620      	mov	r0, r4
 801303e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013042:	f000 b817 	b.w	8013074 <_kill_r>
 8013046:	2b01      	cmp	r3, #1
 8013048:	d00a      	beq.n	8013060 <_raise_r+0x4c>
 801304a:	1c59      	adds	r1, r3, #1
 801304c:	d103      	bne.n	8013056 <_raise_r+0x42>
 801304e:	2316      	movs	r3, #22
 8013050:	6003      	str	r3, [r0, #0]
 8013052:	2001      	movs	r0, #1
 8013054:	e7e7      	b.n	8013026 <_raise_r+0x12>
 8013056:	2400      	movs	r4, #0
 8013058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801305c:	4628      	mov	r0, r5
 801305e:	4798      	blx	r3
 8013060:	2000      	movs	r0, #0
 8013062:	e7e0      	b.n	8013026 <_raise_r+0x12>

08013064 <raise>:
 8013064:	4b02      	ldr	r3, [pc, #8]	; (8013070 <raise+0xc>)
 8013066:	4601      	mov	r1, r0
 8013068:	6818      	ldr	r0, [r3, #0]
 801306a:	f7ff bfd3 	b.w	8013014 <_raise_r>
 801306e:	bf00      	nop
 8013070:	20000024 	.word	0x20000024

08013074 <_kill_r>:
 8013074:	b538      	push	{r3, r4, r5, lr}
 8013076:	4d07      	ldr	r5, [pc, #28]	; (8013094 <_kill_r+0x20>)
 8013078:	2300      	movs	r3, #0
 801307a:	4604      	mov	r4, r0
 801307c:	4608      	mov	r0, r1
 801307e:	4611      	mov	r1, r2
 8013080:	602b      	str	r3, [r5, #0]
 8013082:	f7f3 fa3d 	bl	8006500 <_kill>
 8013086:	1c43      	adds	r3, r0, #1
 8013088:	d102      	bne.n	8013090 <_kill_r+0x1c>
 801308a:	682b      	ldr	r3, [r5, #0]
 801308c:	b103      	cbz	r3, 8013090 <_kill_r+0x1c>
 801308e:	6023      	str	r3, [r4, #0]
 8013090:	bd38      	pop	{r3, r4, r5, pc}
 8013092:	bf00      	nop
 8013094:	20002da4 	.word	0x20002da4

08013098 <_getpid_r>:
 8013098:	f7f3 ba2a 	b.w	80064f0 <_getpid>

0801309c <__sread>:
 801309c:	b510      	push	{r4, lr}
 801309e:	460c      	mov	r4, r1
 80130a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130a4:	f000 f894 	bl	80131d0 <_read_r>
 80130a8:	2800      	cmp	r0, #0
 80130aa:	bfab      	itete	ge
 80130ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80130ae:	89a3      	ldrhlt	r3, [r4, #12]
 80130b0:	181b      	addge	r3, r3, r0
 80130b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80130b6:	bfac      	ite	ge
 80130b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80130ba:	81a3      	strhlt	r3, [r4, #12]
 80130bc:	bd10      	pop	{r4, pc}

080130be <__swrite>:
 80130be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c2:	461f      	mov	r7, r3
 80130c4:	898b      	ldrh	r3, [r1, #12]
 80130c6:	05db      	lsls	r3, r3, #23
 80130c8:	4605      	mov	r5, r0
 80130ca:	460c      	mov	r4, r1
 80130cc:	4616      	mov	r6, r2
 80130ce:	d505      	bpl.n	80130dc <__swrite+0x1e>
 80130d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130d4:	2302      	movs	r3, #2
 80130d6:	2200      	movs	r2, #0
 80130d8:	f000 f868 	bl	80131ac <_lseek_r>
 80130dc:	89a3      	ldrh	r3, [r4, #12]
 80130de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80130e6:	81a3      	strh	r3, [r4, #12]
 80130e8:	4632      	mov	r2, r6
 80130ea:	463b      	mov	r3, r7
 80130ec:	4628      	mov	r0, r5
 80130ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130f2:	f000 b817 	b.w	8013124 <_write_r>

080130f6 <__sseek>:
 80130f6:	b510      	push	{r4, lr}
 80130f8:	460c      	mov	r4, r1
 80130fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130fe:	f000 f855 	bl	80131ac <_lseek_r>
 8013102:	1c43      	adds	r3, r0, #1
 8013104:	89a3      	ldrh	r3, [r4, #12]
 8013106:	bf15      	itete	ne
 8013108:	6560      	strne	r0, [r4, #84]	; 0x54
 801310a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801310e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013112:	81a3      	strheq	r3, [r4, #12]
 8013114:	bf18      	it	ne
 8013116:	81a3      	strhne	r3, [r4, #12]
 8013118:	bd10      	pop	{r4, pc}

0801311a <__sclose>:
 801311a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801311e:	f000 b813 	b.w	8013148 <_close_r>
	...

08013124 <_write_r>:
 8013124:	b538      	push	{r3, r4, r5, lr}
 8013126:	4d07      	ldr	r5, [pc, #28]	; (8013144 <_write_r+0x20>)
 8013128:	4604      	mov	r4, r0
 801312a:	4608      	mov	r0, r1
 801312c:	4611      	mov	r1, r2
 801312e:	2200      	movs	r2, #0
 8013130:	602a      	str	r2, [r5, #0]
 8013132:	461a      	mov	r2, r3
 8013134:	f7f3 fa1b 	bl	800656e <_write>
 8013138:	1c43      	adds	r3, r0, #1
 801313a:	d102      	bne.n	8013142 <_write_r+0x1e>
 801313c:	682b      	ldr	r3, [r5, #0]
 801313e:	b103      	cbz	r3, 8013142 <_write_r+0x1e>
 8013140:	6023      	str	r3, [r4, #0]
 8013142:	bd38      	pop	{r3, r4, r5, pc}
 8013144:	20002da4 	.word	0x20002da4

08013148 <_close_r>:
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	4d06      	ldr	r5, [pc, #24]	; (8013164 <_close_r+0x1c>)
 801314c:	2300      	movs	r3, #0
 801314e:	4604      	mov	r4, r0
 8013150:	4608      	mov	r0, r1
 8013152:	602b      	str	r3, [r5, #0]
 8013154:	f7f3 fa27 	bl	80065a6 <_close>
 8013158:	1c43      	adds	r3, r0, #1
 801315a:	d102      	bne.n	8013162 <_close_r+0x1a>
 801315c:	682b      	ldr	r3, [r5, #0]
 801315e:	b103      	cbz	r3, 8013162 <_close_r+0x1a>
 8013160:	6023      	str	r3, [r4, #0]
 8013162:	bd38      	pop	{r3, r4, r5, pc}
 8013164:	20002da4 	.word	0x20002da4

08013168 <_fstat_r>:
 8013168:	b538      	push	{r3, r4, r5, lr}
 801316a:	4d07      	ldr	r5, [pc, #28]	; (8013188 <_fstat_r+0x20>)
 801316c:	2300      	movs	r3, #0
 801316e:	4604      	mov	r4, r0
 8013170:	4608      	mov	r0, r1
 8013172:	4611      	mov	r1, r2
 8013174:	602b      	str	r3, [r5, #0]
 8013176:	f7f3 fa22 	bl	80065be <_fstat>
 801317a:	1c43      	adds	r3, r0, #1
 801317c:	d102      	bne.n	8013184 <_fstat_r+0x1c>
 801317e:	682b      	ldr	r3, [r5, #0]
 8013180:	b103      	cbz	r3, 8013184 <_fstat_r+0x1c>
 8013182:	6023      	str	r3, [r4, #0]
 8013184:	bd38      	pop	{r3, r4, r5, pc}
 8013186:	bf00      	nop
 8013188:	20002da4 	.word	0x20002da4

0801318c <_isatty_r>:
 801318c:	b538      	push	{r3, r4, r5, lr}
 801318e:	4d06      	ldr	r5, [pc, #24]	; (80131a8 <_isatty_r+0x1c>)
 8013190:	2300      	movs	r3, #0
 8013192:	4604      	mov	r4, r0
 8013194:	4608      	mov	r0, r1
 8013196:	602b      	str	r3, [r5, #0]
 8013198:	f7f3 fa21 	bl	80065de <_isatty>
 801319c:	1c43      	adds	r3, r0, #1
 801319e:	d102      	bne.n	80131a6 <_isatty_r+0x1a>
 80131a0:	682b      	ldr	r3, [r5, #0]
 80131a2:	b103      	cbz	r3, 80131a6 <_isatty_r+0x1a>
 80131a4:	6023      	str	r3, [r4, #0]
 80131a6:	bd38      	pop	{r3, r4, r5, pc}
 80131a8:	20002da4 	.word	0x20002da4

080131ac <_lseek_r>:
 80131ac:	b538      	push	{r3, r4, r5, lr}
 80131ae:	4d07      	ldr	r5, [pc, #28]	; (80131cc <_lseek_r+0x20>)
 80131b0:	4604      	mov	r4, r0
 80131b2:	4608      	mov	r0, r1
 80131b4:	4611      	mov	r1, r2
 80131b6:	2200      	movs	r2, #0
 80131b8:	602a      	str	r2, [r5, #0]
 80131ba:	461a      	mov	r2, r3
 80131bc:	f7f3 fa1a 	bl	80065f4 <_lseek>
 80131c0:	1c43      	adds	r3, r0, #1
 80131c2:	d102      	bne.n	80131ca <_lseek_r+0x1e>
 80131c4:	682b      	ldr	r3, [r5, #0]
 80131c6:	b103      	cbz	r3, 80131ca <_lseek_r+0x1e>
 80131c8:	6023      	str	r3, [r4, #0]
 80131ca:	bd38      	pop	{r3, r4, r5, pc}
 80131cc:	20002da4 	.word	0x20002da4

080131d0 <_read_r>:
 80131d0:	b538      	push	{r3, r4, r5, lr}
 80131d2:	4d07      	ldr	r5, [pc, #28]	; (80131f0 <_read_r+0x20>)
 80131d4:	4604      	mov	r4, r0
 80131d6:	4608      	mov	r0, r1
 80131d8:	4611      	mov	r1, r2
 80131da:	2200      	movs	r2, #0
 80131dc:	602a      	str	r2, [r5, #0]
 80131de:	461a      	mov	r2, r3
 80131e0:	f7f3 f9a8 	bl	8006534 <_read>
 80131e4:	1c43      	adds	r3, r0, #1
 80131e6:	d102      	bne.n	80131ee <_read_r+0x1e>
 80131e8:	682b      	ldr	r3, [r5, #0]
 80131ea:	b103      	cbz	r3, 80131ee <_read_r+0x1e>
 80131ec:	6023      	str	r3, [r4, #0]
 80131ee:	bd38      	pop	{r3, r4, r5, pc}
 80131f0:	20002da4 	.word	0x20002da4

080131f4 <_init>:
 80131f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131f6:	bf00      	nop
 80131f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131fa:	bc08      	pop	{r3}
 80131fc:	469e      	mov	lr, r3
 80131fe:	4770      	bx	lr

08013200 <_fini>:
 8013200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013202:	bf00      	nop
 8013204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013206:	bc08      	pop	{r3}
 8013208:	469e      	mov	lr, r3
 801320a:	4770      	bx	lr
