
BMSv1.0_Unit_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c704  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  0800c894  0800c894  0001c894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d28c  0800d28c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800d28c  0800d28c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d28c  0800d28c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d28c  0800d28c  0001d28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d290  0800d290  0001d290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800d294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00004984  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a0c  20004a0c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188ec  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003695  00000000  00000000  000389a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  0003c040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001038  00000000  00000000  0003d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ee4  00000000  00000000  0003e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188fc  00000000  00000000  000420fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b95a5  00000000  00000000  0005a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00113f9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d4c  00000000  00000000  00113ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c87c 	.word	0x0800c87c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c87c 	.word	0x0800c87c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <SELECT+0x1c>)
 8000a68:	f002 ffd0 	bl	8003a0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 fe43 	bl	80026f8 <HAL_Delay>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	48000400 	.word	0x48000400

08000a7c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <DESELECT+0x1c>)
 8000a88:	f002 ffc0 	bl	8003a0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 fe33 	bl	80026f8 <HAL_Delay>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000aa6:	bf00      	nop
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <SPI_TxByte+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d1f8      	bne.n	8000aa8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ab6:	1df9      	adds	r1, r7, #7
 8000ab8:	2364      	movs	r3, #100	; 0x64
 8000aba:	2201      	movs	r2, #1
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <SPI_TxByte+0x30>)
 8000abe:	f004 fefc 	bl	80058ba <HAL_SPI_Transmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200002f4 	.word	0x200002f4

08000ad0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000adc:	bf00      	nop
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <SPI_TxBuffer+0x30>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d1f8      	bne.n	8000ade <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <SPI_TxBuffer+0x30>)
 8000af4:	f004 fee1 	bl	80058ba <HAL_SPI_Transmit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200002f4 	.word	0x200002f4

08000b04 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000b0a:	23ff      	movs	r3, #255	; 0xff
 8000b0c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b0e:	bf00      	nop
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <SPI_RxByte+0x34>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d1f8      	bne.n	8000b10 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000b1e:	1dba      	adds	r2, r7, #6
 8000b20:	1df9      	adds	r1, r7, #7
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SPI_RxByte+0x34>)
 8000b2a:	f005 f834 	bl	8005b96 <HAL_SPI_TransmitReceive>

	return data;
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200002f4 	.word	0x200002f4

08000b3c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000b44:	f7ff ffde 	bl	8000b04 <SPI_RxByte>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	701a      	strb	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <SD_ReadyWait+0x30>)
 8000b60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b64:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000b66:	f7ff ffcd 	bl	8000b04 <SPI_RxByte>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2bff      	cmp	r3, #255	; 0xff
 8000b72:	d004      	beq.n	8000b7e <SD_ReadyWait+0x26>
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SD_ReadyWait+0x30>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f3      	bne.n	8000b66 <SD_ReadyWait+0xe>

	return res;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000298e 	.word	0x2000298e

08000b8c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000b92:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b96:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000b98:	f7ff ff70 	bl	8000a7c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	e005      	b.n	8000bae <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ba2:	20ff      	movs	r0, #255	; 0xff
 8000ba4:	f7ff ff7a 	bl	8000a9c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3301      	adds	r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2b09      	cmp	r3, #9
 8000bb2:	ddf6      	ble.n	8000ba2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000bb4:	f7ff ff52 	bl	8000a5c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000bb8:	2340      	movs	r3, #64	; 0x40
 8000bba:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000bcc:	2395      	movs	r3, #149	; 0x95
 8000bce:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2106      	movs	r1, #6
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff7b 	bl	8000ad0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000bda:	e002      	b.n	8000be2 <SD_PowerOn+0x56>
	{
		cnt--;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000be2:	f7ff ff8f 	bl	8000b04 <SPI_RxByte>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d002      	beq.n	8000bf2 <SD_PowerOn+0x66>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f4      	bne.n	8000bdc <SD_PowerOn+0x50>
	}

	DESELECT();
 8000bf2:	f7ff ff43 	bl	8000a7c <DESELECT>
	SPI_TxByte(0XFF);
 8000bf6:	20ff      	movs	r0, #255	; 0xff
 8000bf8:	f7ff ff50 	bl	8000a9c <SPI_TxByte>

	PowerFlag = 1;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <SD_PowerOn+0x80>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000a5 	.word	0x200000a5

08000c10 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <SD_PowerOff+0x14>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	200000a5 	.word	0x200000a5

08000c28 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <SD_CheckPower+0x14>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200000a5 	.word	0x200000a5

08000c40 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <SD_RxDataBlock+0x5c>)
 8000c4c:	22c8      	movs	r2, #200	; 0xc8
 8000c4e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000c50:	f7ff ff58 	bl	8000b04 <SPI_RxByte>
 8000c54:	4603      	mov	r3, r0
 8000c56:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d104      	bne.n	8000c68 <SD_RxDataBlock+0x28>
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <SD_RxDataBlock+0x5c>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f3      	bne.n	8000c50 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2bfe      	cmp	r3, #254	; 0xfe
 8000c6c:	d001      	beq.n	8000c72 <SD_RxDataBlock+0x32>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e00f      	b.n	8000c92 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5f 	bl	8000b3c <SPI_RxBytePtr>
	} while(len--);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	603a      	str	r2, [r7, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f4      	bne.n	8000c72 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000c88:	f7ff ff3c 	bl	8000b04 <SPI_RxByte>
	SPI_RxByte();
 8000c8c:	f7ff ff3a 	bl	8000b04 <SPI_RxByte>

	return TRUE;
 8000c90:	2301      	movs	r3, #1
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20002990 	.word	0x20002990

08000ca0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000cb0:	f7ff ff52 	bl	8000b58 <SD_ReadyWait>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d001      	beq.n	8000cbe <SD_TxDataBlock+0x1e>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e02f      	b.n	8000d1e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff feeb 	bl	8000a9c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2bfd      	cmp	r3, #253	; 0xfd
 8000cca:	d020      	beq.n	8000d0e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fefd 	bl	8000ad0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000cd6:	f7ff ff15 	bl	8000b04 <SPI_RxByte>
		SPI_RxByte();
 8000cda:	f7ff ff13 	bl	8000b04 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000cde:	e00b      	b.n	8000cf8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ce0:	f7ff ff10 	bl	8000b04 <SPI_RxByte>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d006      	beq.n	8000d00 <SD_TxDataBlock+0x60>
			i++;
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	2b40      	cmp	r3, #64	; 0x40
 8000cfc:	d9f0      	bls.n	8000ce0 <SD_TxDataBlock+0x40>
 8000cfe:	e000      	b.n	8000d02 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000d00:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000d02:	bf00      	nop
 8000d04:	f7ff fefe 	bl	8000b04 <SPI_RxByte>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0fa      	beq.n	8000d04 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	d101      	bne.n	8000d1c <SD_TxDataBlock+0x7c>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	6039      	str	r1, [r7, #0]
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000d32:	f7ff ff11 	bl	8000b58 <SD_ReadyWait>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2bff      	cmp	r3, #255	; 0xff
 8000d3a:	d001      	beq.n	8000d40 <SD_SendCmd+0x1a>
 8000d3c:	23ff      	movs	r3, #255	; 0xff
 8000d3e:	e042      	b.n	8000dc6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff feaa 	bl	8000a9c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	0e1b      	lsrs	r3, r3, #24
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fea4 	bl	8000a9c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fe9e 	bl	8000a9c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fe98 	bl	8000a9c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe93 	bl	8000a9c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b40      	cmp	r3, #64	; 0x40
 8000d7a:	d102      	bne.n	8000d82 <SD_SendCmd+0x5c>
 8000d7c:	2395      	movs	r3, #149	; 0x95
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e007      	b.n	8000d92 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b48      	cmp	r3, #72	; 0x48
 8000d86:	d102      	bne.n	8000d8e <SD_SendCmd+0x68>
 8000d88:	2387      	movs	r3, #135	; 0x87
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e001      	b.n	8000d92 <SD_SendCmd+0x6c>
	else crc = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe81 	bl	8000a9c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b4c      	cmp	r3, #76	; 0x4c
 8000d9e:	d101      	bne.n	8000da4 <SD_SendCmd+0x7e>
 8000da0:	f7ff feb0 	bl	8000b04 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000da4:	230a      	movs	r3, #10
 8000da6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000da8:	f7ff feac 	bl	8000b04 <SPI_RxByte>
 8000dac:	4603      	mov	r3, r0
 8000dae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000db0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	da05      	bge.n	8000dc4 <SD_SendCmd+0x9e>
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	73bb      	strb	r3, [r7, #14]
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f1      	bne.n	8000da8 <SD_SendCmd+0x82>

	return res;
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SD_disk_initialize+0x14>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e0d6      	b.n	8000f92 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000de4:	4b6d      	ldr	r3, [pc, #436]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <SD_disk_initialize+0x2a>
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	e0cb      	b.n	8000f92 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000dfa:	f7ff fec7 	bl	8000b8c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000dfe:	f7ff fe2d 	bl	8000a5c <SELECT>

	/* check disk type */
	type = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000e06:	2100      	movs	r1, #0
 8000e08:	2040      	movs	r0, #64	; 0x40
 8000e0a:	f7ff ff8c 	bl	8000d26 <SD_SendCmd>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	f040 80a6 	bne.w	8000f62 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000e16:	4b62      	ldr	r3, [pc, #392]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e1c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e22:	2048      	movs	r0, #72	; 0x48
 8000e24:	f7ff ff7f 	bl	8000d26 <SD_SendCmd>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d158      	bne.n	8000ee0 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e00c      	b.n	8000e4e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000e34:	7bfc      	ldrb	r4, [r7, #15]
 8000e36:	f7ff fe65 	bl	8000b04 <SPI_RxByte>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4423      	add	r3, r4
 8000e44:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d9ef      	bls.n	8000e34 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	f040 8083 	bne.w	8000f62 <SD_disk_initialize+0x192>
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	2baa      	cmp	r3, #170	; 0xaa
 8000e60:	d17f      	bne.n	8000f62 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000e62:	2100      	movs	r1, #0
 8000e64:	2077      	movs	r0, #119	; 0x77
 8000e66:	f7ff ff5e 	bl	8000d26 <SD_SendCmd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d807      	bhi.n	8000e80 <SD_disk_initialize+0xb0>
 8000e70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e74:	2069      	movs	r0, #105	; 0x69
 8000e76:	f7ff ff56 	bl	8000d26 <SD_SendCmd>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1eb      	bne.n	8000e62 <SD_disk_initialize+0x92>
 8000e8a:	e000      	b.n	8000e8e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000e8c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d064      	beq.n	8000f62 <SD_disk_initialize+0x192>
 8000e98:	2100      	movs	r1, #0
 8000e9a:	207a      	movs	r0, #122	; 0x7a
 8000e9c:	f7ff ff43 	bl	8000d26 <SD_SendCmd>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d15d      	bne.n	8000f62 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e00c      	b.n	8000ec6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000eac:	7bfc      	ldrb	r4, [r7, #15]
 8000eae:	f7ff fe29 	bl	8000b04 <SPI_RxByte>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4423      	add	r3, r4
 8000ebc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d9ef      	bls.n	8000eac <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ecc:	7a3b      	ldrb	r3, [r7, #8]
 8000ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SD_disk_initialize+0x10a>
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	e000      	b.n	8000edc <SD_disk_initialize+0x10c>
 8000eda:	2304      	movs	r3, #4
 8000edc:	73bb      	strb	r3, [r7, #14]
 8000ede:	e040      	b.n	8000f62 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2077      	movs	r0, #119	; 0x77
 8000ee4:	f7ff ff1f 	bl	8000d26 <SD_SendCmd>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d808      	bhi.n	8000f00 <SD_disk_initialize+0x130>
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2069      	movs	r0, #105	; 0x69
 8000ef2:	f7ff ff18 	bl	8000d26 <SD_SendCmd>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d801      	bhi.n	8000f00 <SD_disk_initialize+0x130>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e000      	b.n	8000f02 <SD_disk_initialize+0x132>
 8000f00:	2301      	movs	r3, #1
 8000f02:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d10e      	bne.n	8000f28 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2077      	movs	r0, #119	; 0x77
 8000f0e:	f7ff ff0a 	bl	8000d26 <SD_SendCmd>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d80e      	bhi.n	8000f36 <SD_disk_initialize+0x166>
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2069      	movs	r0, #105	; 0x69
 8000f1c:	f7ff ff03 	bl	8000d26 <SD_SendCmd>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d107      	bne.n	8000f36 <SD_disk_initialize+0x166>
 8000f26:	e00d      	b.n	8000f44 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2041      	movs	r0, #65	; 0x41
 8000f2c:	f7ff fefb 	bl	8000d26 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e1      	bne.n	8000f04 <SD_disk_initialize+0x134>
 8000f40:	e000      	b.n	8000f44 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000f42:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <SD_disk_initialize+0x18e>
 8000f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f52:	2050      	movs	r0, #80	; 0x50
 8000f54:	f7ff fee7 	bl	8000d26 <SD_SendCmd>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SD_disk_initialize+0x192>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <SD_disk_initialize+0x1d4>)
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000f68:	f7ff fd88 	bl	8000a7c <DESELECT>
	SPI_RxByte();
 8000f6c:	f7ff fdca 	bl	8000b04 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d008      	beq.n	8000f88 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e001      	b.n	8000f8c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000f88:	f7ff fe42 	bl	8000c10 <SD_PowerOff>
	}

	return Stat;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20002990 	.word	0x20002990
 8000fa4:	200000a4 	.word	0x200000a4

08000fa8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SD_disk_status+0x14>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e002      	b.n	8000fc2 <SD_disk_status+0x1a>
	return Stat;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SD_disk_status+0x28>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <SD_disk_read+0x1c>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <SD_disk_read+0x20>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e051      	b.n	8001098 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <SD_disk_read+0xcc>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SD_disk_read+0x32>
 8001002:	2303      	movs	r3, #3
 8001004:	e048      	b.n	8001098 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <SD_disk_read+0xd0>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <SD_disk_read+0x44>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	025b      	lsls	r3, r3, #9
 8001016:	607b      	str	r3, [r7, #4]

	SELECT();
 8001018:	f7ff fd20 	bl	8000a5c <SELECT>

	if (count == 1)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d111      	bne.n	8001046 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	2051      	movs	r0, #81	; 0x51
 8001026:	f7ff fe7e 	bl	8000d26 <SD_SendCmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d129      	bne.n	8001084 <SD_disk_read+0xb0>
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f7ff fe03 	bl	8000c40 <SD_RxDataBlock>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d021      	beq.n	8001084 <SD_disk_read+0xb0>
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	e01e      	b.n	8001084 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	2052      	movs	r0, #82	; 0x52
 800104a:	f7ff fe6c 	bl	8000d26 <SD_SendCmd>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d117      	bne.n	8001084 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	68b8      	ldr	r0, [r7, #8]
 800105a:	f7ff fdf1 	bl	8000c40 <SD_RxDataBlock>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <SD_disk_read+0xa6>
				buff += 512;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800106a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1ed      	bne.n	8001054 <SD_disk_read+0x80>
 8001078:	e000      	b.n	800107c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800107a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800107c:	2100      	movs	r1, #0
 800107e:	204c      	movs	r0, #76	; 0x4c
 8001080:	f7ff fe51 	bl	8000d26 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001084:	f7ff fcfa 	bl	8000a7c <DESELECT>
	SPI_RxByte();
 8001088:	f7ff fd3c 	bl	8000b04 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2db      	uxtb	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	200000a4 	.word	0x200000a4

080010a8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <SD_disk_write+0x1c>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <SD_disk_write+0x20>
 80010c4:	2304      	movs	r3, #4
 80010c6:	e06b      	b.n	80011a0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <SD_disk_write+0x100>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SD_disk_write+0x32>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e062      	b.n	80011a0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <SD_disk_write+0x100>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SD_disk_write+0x44>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e059      	b.n	80011a0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <SD_disk_write+0x104>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <SD_disk_write+0x56>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	607b      	str	r3, [r7, #4]

	SELECT();
 80010fe:	f7ff fcad 	bl	8000a5c <SELECT>

	if (count == 1)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d110      	bne.n	800112a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	2058      	movs	r0, #88	; 0x58
 800110c:	f7ff fe0b 	bl	8000d26 <SD_SendCmd>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13a      	bne.n	800118c <SD_disk_write+0xe4>
 8001116:	21fe      	movs	r1, #254	; 0xfe
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f7ff fdc1 	bl	8000ca0 <SD_TxDataBlock>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d033      	beq.n	800118c <SD_disk_write+0xe4>
			count = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	e030      	b.n	800118c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SD_disk_write+0x104>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001136:	2100      	movs	r1, #0
 8001138:	2077      	movs	r0, #119	; 0x77
 800113a:	f7ff fdf4 	bl	8000d26 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	2057      	movs	r0, #87	; 0x57
 8001142:	f7ff fdf0 	bl	8000d26 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2059      	movs	r0, #89	; 0x59
 800114a:	f7ff fdec 	bl	8000d26 <SD_SendCmd>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d11b      	bne.n	800118c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001154:	21fc      	movs	r1, #252	; 0xfc
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f7ff fda2 	bl	8000ca0 <SD_TxDataBlock>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00a      	beq.n	8001178 <SD_disk_write+0xd0>
				buff += 512;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001168:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1ee      	bne.n	8001154 <SD_disk_write+0xac>
 8001176:	e000      	b.n	800117a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001178:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800117a:	21fd      	movs	r1, #253	; 0xfd
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fd8f 	bl	8000ca0 <SD_TxDataBlock>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <SD_disk_write+0xe4>
			{
				count = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800118c:	f7ff fc76 	bl	8000a7c <DESELECT>
	SPI_RxByte();
 8001190:	f7ff fcb8 	bl	8000b04 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2db      	uxtb	r3, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	200000a4 	.word	0x200000a4

080011b0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	603a      	str	r2, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	460b      	mov	r3, r1
 80011be:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SD_disk_ioctl+0x1e>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e115      	b.n	80013fa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d124      	bne.n	8001224 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d012      	beq.n	8001208 <SD_disk_ioctl+0x58>
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	dc1a      	bgt.n	800121c <SD_disk_ioctl+0x6c>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <SD_disk_ioctl+0x40>
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d006      	beq.n	80011fc <SD_disk_ioctl+0x4c>
 80011ee:	e015      	b.n	800121c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80011f0:	f7ff fd0e 	bl	8000c10 <SD_PowerOff>
			res = RES_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011fa:	e0fc      	b.n	80013f6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80011fc:	f7ff fcc6 	bl	8000b8c <SD_PowerOn>
			res = RES_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001206:	e0f6      	b.n	80013f6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	1c5c      	adds	r4, r3, #1
 800120c:	f7ff fd0c 	bl	8000c28 <SD_CheckPower>
 8001210:	4603      	mov	r3, r0
 8001212:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800121a:	e0ec      	b.n	80013f6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800121c:	2304      	movs	r3, #4
 800121e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001222:	e0e8      	b.n	80013f6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001224:	4b77      	ldr	r3, [pc, #476]	; (8001404 <SD_disk_ioctl+0x254>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SD_disk_ioctl+0x86>
 8001232:	2303      	movs	r3, #3
 8001234:	e0e1      	b.n	80013fa <SD_disk_ioctl+0x24a>

		SELECT();
 8001236:	f7ff fc11 	bl	8000a5c <SELECT>

		switch (ctrl)
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	2b0d      	cmp	r3, #13
 800123e:	f200 80cb 	bhi.w	80013d8 <SD_disk_ioctl+0x228>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <SD_disk_ioctl+0x98>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001343 	.word	0x08001343
 800124c:	08001281 	.word	0x08001281
 8001250:	08001333 	.word	0x08001333
 8001254:	080013d9 	.word	0x080013d9
 8001258:	080013d9 	.word	0x080013d9
 800125c:	080013d9 	.word	0x080013d9
 8001260:	080013d9 	.word	0x080013d9
 8001264:	080013d9 	.word	0x080013d9
 8001268:	080013d9 	.word	0x080013d9
 800126c:	080013d9 	.word	0x080013d9
 8001270:	080013d9 	.word	0x080013d9
 8001274:	08001355 	.word	0x08001355
 8001278:	08001379 	.word	0x08001379
 800127c:	0800139d 	.word	0x0800139d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001280:	2100      	movs	r1, #0
 8001282:	2049      	movs	r0, #73	; 0x49
 8001284:	f7ff fd4f 	bl	8000d26 <SD_SendCmd>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80a8 	bne.w	80013e0 <SD_disk_ioctl+0x230>
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2110      	movs	r1, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fcd2 	bl	8000c40 <SD_RxDataBlock>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 809e 	beq.w	80013e0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80012a4:	7b3b      	ldrb	r3, [r7, #12]
 80012a6:	099b      	lsrs	r3, r3, #6
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10e      	bne.n	80012cc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80012ae:	7d7b      	ldrb	r3, [r7, #21]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	7d3b      	ldrb	r3, [r7, #20]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80012c2:	8bfb      	ldrh	r3, [r7, #30]
 80012c4:	029a      	lsls	r2, r3, #10
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e02e      	b.n	800132a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012cc:	7c7b      	ldrb	r3, [r7, #17]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	7dbb      	ldrb	r3, [r7, #22]
 80012d6:	09db      	lsrs	r3, r3, #7
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	7d7b      	ldrb	r3, [r7, #21]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f003 0306 	and.w	r3, r3, #6
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3302      	adds	r3, #2
 80012f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80012f4:	7d3b      	ldrb	r3, [r7, #20]
 80012f6:	099b      	lsrs	r3, r3, #6
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	7cfb      	ldrb	r3, [r7, #19]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	b29b      	uxth	r3, r3
 8001304:	4413      	add	r3, r2
 8001306:	b29a      	uxth	r2, r3
 8001308:	7cbb      	ldrb	r3, [r7, #18]
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	b29b      	uxth	r3, r3
 800130e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001312:	b29b      	uxth	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	3301      	adds	r3, #1
 800131a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800131c:	8bfa      	ldrh	r2, [r7, #30]
 800131e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001322:	3b09      	subs	r3, #9
 8001324:	409a      	lsls	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001330:	e056      	b.n	80013e0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001340:	e055      	b.n	80013ee <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001342:	f7ff fc09 	bl	8000b58 <SD_ReadyWait>
 8001346:	4603      	mov	r3, r0
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d14b      	bne.n	80013e4 <SD_disk_ioctl+0x234>
 800134c:	2300      	movs	r3, #0
 800134e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001352:	e047      	b.n	80013e4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001354:	2100      	movs	r1, #0
 8001356:	2049      	movs	r0, #73	; 0x49
 8001358:	f7ff fce5 	bl	8000d26 <SD_SendCmd>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d142      	bne.n	80013e8 <SD_disk_ioctl+0x238>
 8001362:	2110      	movs	r1, #16
 8001364:	6a38      	ldr	r0, [r7, #32]
 8001366:	f7ff fc6b 	bl	8000c40 <SD_RxDataBlock>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d03b      	beq.n	80013e8 <SD_disk_ioctl+0x238>
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001376:	e037      	b.n	80013e8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001378:	2100      	movs	r1, #0
 800137a:	204a      	movs	r0, #74	; 0x4a
 800137c:	f7ff fcd3 	bl	8000d26 <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d132      	bne.n	80013ec <SD_disk_ioctl+0x23c>
 8001386:	2110      	movs	r1, #16
 8001388:	6a38      	ldr	r0, [r7, #32]
 800138a:	f7ff fc59 	bl	8000c40 <SD_RxDataBlock>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d02b      	beq.n	80013ec <SD_disk_ioctl+0x23c>
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800139a:	e027      	b.n	80013ec <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800139c:	2100      	movs	r1, #0
 800139e:	207a      	movs	r0, #122	; 0x7a
 80013a0:	f7ff fcc1 	bl	8000d26 <SD_SendCmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d116      	bne.n	80013d8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013b0:	e00b      	b.n	80013ca <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80013b2:	6a3c      	ldr	r4, [r7, #32]
 80013b4:	1c63      	adds	r3, r4, #1
 80013b6:	623b      	str	r3, [r7, #32]
 80013b8:	f7ff fba4 	bl	8000b04 <SPI_RxByte>
 80013bc:	4603      	mov	r3, r0
 80013be:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80013c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013c4:	3301      	adds	r3, #1
 80013c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d9ef      	bls.n	80013b2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80013d8:	2304      	movs	r3, #4
 80013da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013de:	e006      	b.n	80013ee <SD_disk_ioctl+0x23e>
			break;
 80013e0:	bf00      	nop
 80013e2:	e004      	b.n	80013ee <SD_disk_ioctl+0x23e>
			break;
 80013e4:	bf00      	nop
 80013e6:	e002      	b.n	80013ee <SD_disk_ioctl+0x23e>
			break;
 80013e8:	bf00      	nop
 80013ea:	e000      	b.n	80013ee <SD_disk_ioctl+0x23e>
			break;
 80013ec:	bf00      	nop
		}

		DESELECT();
 80013ee:	f7ff fb45 	bl	8000a7c <DESELECT>
		SPI_RxByte();
 80013f2:	f7ff fb87 	bl	8000b04 <SPI_RxByte>
	}

	return res;
 80013f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	372c      	adds	r7, #44	; 0x2c
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000

08001408 <bufsize>:
uint8_t SPI1_pRxData[8];


/*******************************************************************************/
int bufsize (char *buf)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001414:	e002      	b.n	800141c <bufsize+0x14>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f6      	bne.n	8001416 <bufsize+0xe>
	return i;
 8001428:	68fb      	ldr	r3, [r7, #12]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <clear_buffer>:

void clear_buffer (void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	e007      	b.n	8001454 <clear_buffer+0x1c>
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <clear_buffer+0x34>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3301      	adds	r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	dbf3      	blt.n	8001444 <clear_buffer+0xc>
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200013e4 	.word	0x200013e4

08001470 <send_uart>:

void send_uart (char *string)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7fe fea9 	bl	80001d0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	b29a      	uxth	r2, r3
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <send_uart+0x2c>)
 800148e:	f004 ff47 	bl	8006320 <HAL_UART_Transmit>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000188c 	.word	0x2000188c

080014a0 <write_to_csvfile>:

void write_to_csvfile (void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af04      	add	r7, sp, #16

		  dummy_timer += 1;
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <write_to_csvfile+0xcc>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <write_to_csvfile+0xcc>)
 80014b0:	701a      	strb	r2, [r3, #0]
		  dummy_cell_votlages += 1;
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <write_to_csvfile+0xd0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <write_to_csvfile+0xd0>)
 80014bc:	701a      	strb	r2, [r3, #0]
		  dummy_pack_voltage += 11;
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <write_to_csvfile+0xd4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	330b      	adds	r3, #11
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <write_to_csvfile+0xd4>)
 80014c8:	701a      	strb	r2, [r3, #0]
		  dummy_pack_current += 1;
 80014ca:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <write_to_csvfile+0xd8>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <write_to_csvfile+0xd8>)
 80014d4:	701a      	strb	r2, [r3, #0]
		  dummy_temperature += 5;
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <write_to_csvfile+0xdc>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3305      	adds	r3, #5
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <write_to_csvfile+0xdc>)
 80014e0:	701a      	strb	r2, [r3, #0]

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80014e2:	2203      	movs	r2, #3
 80014e4:	4926      	ldr	r1, [pc, #152]	; (8001580 <write_to_csvfile+0xe0>)
 80014e6:	4827      	ldr	r0, [pc, #156]	; (8001584 <write_to_csvfile+0xe4>)
 80014e8:	f008 ff0c 	bl	800a304 <f_open>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <write_to_csvfile+0xe8>)
 80014f2:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <write_to_csvfile+0xe4>)
 80014f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fa:	330c      	adds	r3, #12
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4820      	ldr	r0, [pc, #128]	; (8001584 <write_to_csvfile+0xe4>)
 8001502:	f009 ffcb 	bl	800b49c <f_lseek>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <write_to_csvfile+0xe8>)
 800150c:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%d,%d,%d,%d,%d\r\n", dummy_timer, dummy_cell_votlages, dummy_pack_voltage, dummy_pack_current, dummy_temperature);
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <write_to_csvfile+0xcc>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <write_to_csvfile+0xd0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461c      	mov	r4, r3
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <write_to_csvfile+0xd4>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <write_to_csvfile+0xd8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <write_to_csvfile+0xdc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	9101      	str	r1, [sp, #4]
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	4623      	mov	r3, r4
 8001532:	4602      	mov	r2, r0
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <write_to_csvfile+0xec>)
 8001536:	4816      	ldr	r0, [pc, #88]	; (8001590 <write_to_csvfile+0xf0>)
 8001538:	f00a fe3a 	bl	800c1b0 <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800153c:	4814      	ldr	r0, [pc, #80]	; (8001590 <write_to_csvfile+0xf0>)
 800153e:	f7ff ff63 	bl	8001408 <bufsize>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <write_to_csvfile+0xf4>)
 8001548:	4911      	ldr	r1, [pc, #68]	; (8001590 <write_to_csvfile+0xf0>)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <write_to_csvfile+0xe4>)
 800154c:	f009 fc2a 	bl	800ada4 <f_write>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <write_to_csvfile+0xe8>)
 8001556:	701a      	strb	r2, [r3, #0]
		  //send_uart(buffer);
		  f_close (&fil);
 8001558:	480a      	ldr	r0, [pc, #40]	; (8001584 <write_to_csvfile+0xe4>)
 800155a:	f009 ff74 	bl	800b446 <f_close>

		  clear_buffer();
 800155e:	f7ff ff6b 	bl	8001438 <clear_buffer>
}
 8001562:	bf00      	nop
 8001564:	3704      	adds	r7, #4
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	bf00      	nop
 800156c:	200013d4 	.word	0x200013d4
 8001570:	2000298c 	.word	0x2000298c
 8001574:	200002f0 	.word	0x200002f0
 8001578:	20001950 	.word	0x20001950
 800157c:	20001810 	.word	0x20001810
 8001580:	0800c894 	.word	0x0800c894
 8001584:	20001960 	.word	0x20001960
 8001588:	2000181c 	.word	0x2000181c
 800158c:	0800c8a0 	.word	0x0800c8a0
 8001590:	200013e4 	.word	0x200013e4
 8001594:	2000180c 	.word	0x2000180c

08001598 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f001 fbae 	bl	8002d08 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2 )
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d102      	bne.n	80015ba <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		CAN_data_checkFlag = 1;
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
	}
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20001884 	.word	0x20001884
 80015c8:	20001934 	.word	0x20001934
 80015cc:	200000ac 	.word	0x200000ac

080015d0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, uart_rx_data, 4);
 80015d8:	2204      	movs	r2, #4
 80015da:	4905      	ldr	r1, [pc, #20]	; (80015f0 <HAL_UART_RxCpltCallback+0x20>)
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_UART_RxCpltCallback+0x24>)
 80015de:	f004 ff33 	bl	8006448 <HAL_UART_Receive_IT>
  uart_rx_flag = 1;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_UART_RxCpltCallback+0x28>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20001954 	.word	0x20001954
 80015f4:	2000188c 	.word	0x2000188c
 80015f8:	200000a8 	.word	0x200000a8

080015fc <set_time>:



void set_time(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001610:	2300      	movs	r3, #0
 8001612:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 8001614:	2300      	movs	r3, #0
 8001616:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x53;
 8001618:	2353      	movs	r3, #83	; 0x53
 800161a:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 800161c:	2300      	movs	r3, #0
 800161e:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	4812      	ldr	r0, [pc, #72]	; (8001678 <set_time+0x7c>)
 8001630:	f003 fdc5 	bl	80051be <HAL_RTC_SetTime>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <set_time+0x42>
	  {
	    Error_Handler();
 800163a:	f000 fdab 	bl	8002194 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800163e:	2303      	movs	r3, #3
 8001640:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JUNE;
 8001642:	2306      	movs	r3, #6
 8001644:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x22;
 8001646:	2322      	movs	r3, #34	; 0x22
 8001648:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x22;
 800164a:	2322      	movs	r3, #34	; 0x22
 800164c:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <set_time+0x7c>)
 8001656:	f003 fecd 	bl	80053f4 <HAL_RTC_SetDate>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <set_time+0x68>
	  {
	    Error_Handler();
 8001660:	f000 fd98 	bl	8002194 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 8001664:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001668:	2101      	movs	r1, #1
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <set_time+0x7c>)
 800166c:	f004 f848 	bl	8005700 <HAL_RTCEx_BKUPWrite>

	  /* USER CODE END RTC_Init 2 */
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200017e4 	.word	0x200017e4

0800167c <get_time>:


void get_time(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001682:	463b      	mov	r3, r7
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4817      	ldr	r0, [pc, #92]	; (80016e8 <get_time+0x6c>)
 800168a:	f003 fe55 	bl	8005338 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2200      	movs	r2, #0
 8001694:	4619      	mov	r1, r3
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <get_time+0x6c>)
 8001698:	f003 ff53 	bl	8005542 <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf(buffer,"Time is: %02d:%02d:%02d\r\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800169c:	783b      	ldrb	r3, [r7, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	787b      	ldrb	r3, [r7, #1]
 80016a2:	4619      	mov	r1, r3
 80016a4:	78bb      	ldrb	r3, [r7, #2]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	460b      	mov	r3, r1
 80016aa:	4910      	ldr	r1, [pc, #64]	; (80016ec <get_time+0x70>)
 80016ac:	4810      	ldr	r0, [pc, #64]	; (80016f0 <get_time+0x74>)
 80016ae:	f00a fd7f 	bl	800c1b0 <siprintf>
 send_uart(buffer);
 80016b2:	480f      	ldr	r0, [pc, #60]	; (80016f0 <get_time+0x74>)
 80016b4:	f7ff fedc 	bl	8001470 <send_uart>
 clear_buffer();
 80016b8:	f7ff febe 	bl	8001438 <clear_buffer>
/* Display date Format: dd-mm-yy */
 sprintf(buffer,"Date is : %02d-%02d-%2d\r\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 80016bc:	7dbb      	ldrb	r3, [r7, #22]
 80016be:	461a      	mov	r2, r3
 80016c0:	7d7b      	ldrb	r3, [r7, #21]
 80016c2:	4619      	mov	r1, r3
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	460b      	mov	r3, r1
 80016ce:	4909      	ldr	r1, [pc, #36]	; (80016f4 <get_time+0x78>)
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <get_time+0x74>)
 80016d2:	f00a fd6d 	bl	800c1b0 <siprintf>
 send_uart(buffer);
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <get_time+0x74>)
 80016d8:	f7ff feca 	bl	8001470 <send_uart>
 clear_buffer();
 80016dc:	f7ff feac 	bl	8001438 <clear_buffer>
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200017e4 	.word	0x200017e4
 80016ec:	0800c8b4 	.word	0x0800c8b4
 80016f0:	200013e4 	.word	0x200013e4
 80016f4:	0800c8d0 	.word	0x0800c8d0

080016f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //interrupt callback function for Charger detect
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI5 (PB5 Pin)
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	2b20      	cmp	r3, #32
 8001706:	d119      	bne.n	800173c <HAL_GPIO_EXTI_Callback+0x44>
    {
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8001708:	2120      	movs	r1, #32
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <HAL_GPIO_EXTI_Callback+0x4c>)
 800170c:	f002 f966 	bl	80039dc <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_GPIO_EXTI_Callback+0x32>
    	{
    		sprintf(buffer, "Charger detected\r\n");
 8001716:	490c      	ldr	r1, [pc, #48]	; (8001748 <HAL_GPIO_EXTI_Callback+0x50>)
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <HAL_GPIO_EXTI_Callback+0x54>)
 800171a:	f00a fd49 	bl	800c1b0 <siprintf>
    		send_uart(buffer);
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <HAL_GPIO_EXTI_Callback+0x54>)
 8001720:	f7ff fea6 	bl	8001470 <send_uart>
    		clear_buffer();
 8001724:	f7ff fe88 	bl	8001438 <clear_buffer>
    		sprintf(buffer, "Charger has been disconnected\r\n");
    		send_uart(buffer);
    		clear_buffer();
    	}
    }
}
 8001728:	e008      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x44>
    		sprintf(buffer, "Charger has been disconnected\r\n");
 800172a:	4909      	ldr	r1, [pc, #36]	; (8001750 <HAL_GPIO_EXTI_Callback+0x58>)
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <HAL_GPIO_EXTI_Callback+0x54>)
 800172e:	f00a fd3f 	bl	800c1b0 <siprintf>
    		send_uart(buffer);
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <HAL_GPIO_EXTI_Callback+0x54>)
 8001734:	f7ff fe9c 	bl	8001470 <send_uart>
    		clear_buffer();
 8001738:	f7ff fe7e 	bl	8001438 <clear_buffer>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	48000400 	.word	0x48000400
 8001748:	0800c8ec 	.word	0x0800c8ec
 800174c:	200013e4 	.word	0x200013e4
 8001750:	0800c900 	.word	0x0800c900

08001754 <wakeup_idle>:

void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af02      	add	r7, sp, #8
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e019      	b.n	8001798 <wakeup_idle+0x44>
	{
		SPI1_pTxData[0] = 0xFF;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <wakeup_idle+0x58>)
 8001766:	22ff      	movs	r2, #255	; 0xff
 8001768:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2110      	movs	r1, #16
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f002 f94b 	bl	8003a0c <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1,SPI1_pTxData, SPI1_pRxData, 8,SPI1_TIMEOUT);//Guarantees the isoSPI will be in ready mode
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2308      	movs	r3, #8
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <wakeup_idle+0x5c>)
 800177e:	490b      	ldr	r1, [pc, #44]	; (80017ac <wakeup_idle+0x58>)
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <wakeup_idle+0x60>)
 8001782:	f004 fa08 	bl	8005b96 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2110      	movs	r1, #16
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f002 f93d 	bl	8003a0c <HAL_GPIO_WritePin>
	for (int i =0; i<total_ic; i++)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3301      	adds	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbe1      	blt.n	8001764 <wakeup_idle+0x10>
	}
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200013d8 	.word	0x200013d8
 80017b0:	20001914 	.word	0x20001914
 80017b4:	20001820 	.word	0x20001820

080017b8 <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e014      	b.n	80017f2 <wakeup_sleep+0x3a>
	{
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2110      	movs	r1, #16
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f002 f91c 	bl	8003a0c <HAL_GPIO_WritePin>
		HAL_Delay(0.3); // Guarantees the LTC681x will be in standby
 80017d4:	2000      	movs	r0, #0
 80017d6:	f000 ff8f 	bl	80026f8 <HAL_Delay>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	2110      	movs	r1, #16
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f002 f913 	bl	8003a0c <HAL_GPIO_WritePin>
		HAL_Delay(0.01);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 ff86 	bl	80026f8 <HAL_Delay>
	for (int i =0; i<total_ic; i++)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbe6      	blt.n	80017c8 <wakeup_sleep+0x10>
	}
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <sd_init>:

void sd_init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	  //mount SD card and check SD card mounting status
	  fresult = f_mount(&fs, "/", 1);
 8001808:	2201      	movs	r2, #1
 800180a:	49b4      	ldr	r1, [pc, #720]	; (8001adc <sd_init+0x2d8>)
 800180c:	48b4      	ldr	r0, [pc, #720]	; (8001ae0 <sd_init+0x2dc>)
 800180e:	f008 fd2f 	bl	800a270 <f_mount>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4bb3      	ldr	r3, [pc, #716]	; (8001ae4 <sd_init+0x2e0>)
 8001818:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK)
 800181a:	4bb2      	ldr	r3, [pc, #712]	; (8001ae4 <sd_init+0x2e0>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <sd_init+0x26>
	  	{
	  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001822:	48b1      	ldr	r0, [pc, #708]	; (8001ae8 <sd_init+0x2e4>)
 8001824:	f7ff fe24 	bl	8001470 <send_uart>
 8001828:	e002      	b.n	8001830 <sd_init+0x2c>

	  	}
	  	else
	  	{
	  		send_uart("SD CARD mounted successfully...\r\n");
 800182a:	48b0      	ldr	r0, [pc, #704]	; (8001aec <sd_init+0x2e8>)
 800182c:	f7ff fe20 	bl	8001470 <send_uart>
	  	}

	  	/*************** Card capacity details ********************/

	  	/* Check free space */
	  	f_getfree("", &fre_clust, &pfs);
 8001830:	4aaf      	ldr	r2, [pc, #700]	; (8001af0 <sd_init+0x2ec>)
 8001832:	49b0      	ldr	r1, [pc, #704]	; (8001af4 <sd_init+0x2f0>)
 8001834:	48b0      	ldr	r0, [pc, #704]	; (8001af8 <sd_init+0x2f4>)
 8001836:	f00a f965 	bl	800bb04 <f_getfree>

	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800183a:	4bad      	ldr	r3, [pc, #692]	; (8001af0 <sd_init+0x2ec>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001842:	3314      	adds	r3, #20
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1e9a      	subs	r2, r3, #2
 8001848:	4ba9      	ldr	r3, [pc, #676]	; (8001af0 <sd_init+0x2ec>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001850:	3302      	adds	r3, #2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	fb03 f302 	mul.w	r3, r3, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe53 	bl	8000504 <__aeabi_ui2d>
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4ba6      	ldr	r3, [pc, #664]	; (8001afc <sd_init+0x2f8>)
 8001864:	f7fe fec8 	bl	80005f8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f8d4 	bl	8000a1c <__aeabi_d2uiz>
 8001874:	4603      	mov	r3, r0
 8001876:	4aa2      	ldr	r2, [pc, #648]	; (8001b00 <sd_init+0x2fc>)
 8001878:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 800187a:	4ba1      	ldr	r3, [pc, #644]	; (8001b00 <sd_init+0x2fc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	49a0      	ldr	r1, [pc, #640]	; (8001b04 <sd_init+0x300>)
 8001882:	48a1      	ldr	r0, [pc, #644]	; (8001b08 <sd_init+0x304>)
 8001884:	f00a fc94 	bl	800c1b0 <siprintf>
	  	send_uart(buffer);
 8001888:	489f      	ldr	r0, [pc, #636]	; (8001b08 <sd_init+0x304>)
 800188a:	f7ff fdf1 	bl	8001470 <send_uart>
	  	clear_buffer();
 800188e:	f7ff fdd3 	bl	8001438 <clear_buffer>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001892:	4b97      	ldr	r3, [pc, #604]	; (8001af0 <sd_init+0x2ec>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189a:	3302      	adds	r3, #2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b94      	ldr	r3, [pc, #592]	; (8001af4 <sd_init+0x2f0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fb03 f302 	mul.w	r3, r3, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe2b 	bl	8000504 <__aeabi_ui2d>
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4b92      	ldr	r3, [pc, #584]	; (8001afc <sd_init+0x2f8>)
 80018b4:	f7fe fea0 	bl	80005f8 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f8ac 	bl	8000a1c <__aeabi_d2uiz>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a91      	ldr	r2, [pc, #580]	; (8001b0c <sd_init+0x308>)
 80018c8:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 80018ca:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <sd_init+0x308>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	498f      	ldr	r1, [pc, #572]	; (8001b10 <sd_init+0x30c>)
 80018d2:	488d      	ldr	r0, [pc, #564]	; (8001b08 <sd_init+0x304>)
 80018d4:	f00a fc6c 	bl	800c1b0 <siprintf>
	  	send_uart(buffer);
 80018d8:	488b      	ldr	r0, [pc, #556]	; (8001b08 <sd_init+0x304>)
 80018da:	f7ff fdc9 	bl	8001470 <send_uart>
	  	clear_buffer();
 80018de:	f7ff fdab 	bl	8001438 <clear_buffer>


	  	/************* The following operation is using PUTS and GETS *********************/

	  	/* Open file to write/ create a file if it doesn't exist */
	    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80018e2:	2213      	movs	r2, #19
 80018e4:	498b      	ldr	r1, [pc, #556]	; (8001b14 <sd_init+0x310>)
 80018e6:	488c      	ldr	r0, [pc, #560]	; (8001b18 <sd_init+0x314>)
 80018e8:	f008 fd0c 	bl	800a304 <f_open>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <sd_init+0x2e0>)
 80018f2:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 80018f4:	4988      	ldr	r1, [pc, #544]	; (8001b18 <sd_init+0x314>)
 80018f6:	4889      	ldr	r0, [pc, #548]	; (8001b1c <sd_init+0x318>)
 80018f8:	f00a fa60 	bl	800bdbc <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 80018fc:	4886      	ldr	r0, [pc, #536]	; (8001b18 <sd_init+0x314>)
 80018fe:	f009 fda2 	bl	800b446 <f_close>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b77      	ldr	r3, [pc, #476]	; (8001ae4 <sd_init+0x2e0>)
 8001908:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 800190a:	4b76      	ldr	r3, [pc, #472]	; (8001ae4 <sd_init+0x2e0>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <sd_init+0x114>
	  	{
	  		send_uart ("File1.txt created and the data is written \r\n");
 8001912:	4883      	ldr	r0, [pc, #524]	; (8001b20 <sd_init+0x31c>)
 8001914:	f7ff fdac 	bl	8001470 <send_uart>
	  	}

	  	/* Open file to read */
	  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8001918:	2201      	movs	r2, #1
 800191a:	497e      	ldr	r1, [pc, #504]	; (8001b14 <sd_init+0x310>)
 800191c:	487e      	ldr	r0, [pc, #504]	; (8001b18 <sd_init+0x314>)
 800191e:	f008 fcf1 	bl	800a304 <f_open>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <sd_init+0x2e0>)
 8001928:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	f_gets(buffer, f_size(&fil), &fil);
 800192a:	4b7b      	ldr	r3, [pc, #492]	; (8001b18 <sd_init+0x314>)
 800192c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001930:	330c      	adds	r3, #12
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a78      	ldr	r2, [pc, #480]	; (8001b18 <sd_init+0x314>)
 8001936:	4619      	mov	r1, r3
 8001938:	4873      	ldr	r0, [pc, #460]	; (8001b08 <sd_init+0x304>)
 800193a:	f00a f9c5 	bl	800bcc8 <f_gets>

	  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 800193e:	4879      	ldr	r0, [pc, #484]	; (8001b24 <sd_init+0x320>)
 8001940:	f7ff fd96 	bl	8001470 <send_uart>
	  	send_uart(buffer);
 8001944:	4870      	ldr	r0, [pc, #448]	; (8001b08 <sd_init+0x304>)
 8001946:	f7ff fd93 	bl	8001470 <send_uart>
	  	send_uart("\r\n");
 800194a:	4877      	ldr	r0, [pc, #476]	; (8001b28 <sd_init+0x324>)
 800194c:	f7ff fd90 	bl	8001470 <send_uart>
	  	/* Close file */
	  	f_close(&fil);
 8001950:	4871      	ldr	r0, [pc, #452]	; (8001b18 <sd_init+0x314>)
 8001952:	f009 fd78 	bl	800b446 <f_close>
	  	clear_buffer();
 8001956:	f7ff fd6f 	bl	8001438 <clear_buffer>
	  	/**************** The following operation is using f_write and f_read **************************/

	  	/* Create second file with read write access and open it */
	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800195a:	220a      	movs	r2, #10
 800195c:	4973      	ldr	r1, [pc, #460]	; (8001b2c <sd_init+0x328>)
 800195e:	486e      	ldr	r0, [pc, #440]	; (8001b18 <sd_init+0x314>)
 8001960:	f008 fcd0 	bl	800a304 <f_open>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <sd_init+0x2e0>)
 800196a:	701a      	strb	r2, [r3, #0]

	  	/* Writing text */
	  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 800196c:	4a66      	ldr	r2, [pc, #408]	; (8001b08 <sd_init+0x304>)
 800196e:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <sd_init+0x32c>)
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	2351      	movs	r3, #81	; 0x51
 8001976:	461a      	mov	r2, r3
 8001978:	f00a fb4a 	bl	800c010 <memcpy>

	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800197c:	4862      	ldr	r0, [pc, #392]	; (8001b08 <sd_init+0x304>)
 800197e:	f7ff fd43 	bl	8001408 <bufsize>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b6b      	ldr	r3, [pc, #428]	; (8001b34 <sd_init+0x330>)
 8001988:	495f      	ldr	r1, [pc, #380]	; (8001b08 <sd_init+0x304>)
 800198a:	4863      	ldr	r0, [pc, #396]	; (8001b18 <sd_init+0x314>)
 800198c:	f009 fa0a 	bl	800ada4 <f_write>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <sd_init+0x2e0>)
 8001996:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 8001998:	4b52      	ldr	r3, [pc, #328]	; (8001ae4 <sd_init+0x2e0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <sd_init+0x1a2>
	  	{
	  		send_uart ("File2.txt created and the data is written \r\n");
 80019a0:	4865      	ldr	r0, [pc, #404]	; (8001b38 <sd_init+0x334>)
 80019a2:	f7ff fd65 	bl	8001470 <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 80019a6:	485c      	ldr	r0, [pc, #368]	; (8001b18 <sd_init+0x314>)
 80019a8:	f009 fd4d 	bl	800b446 <f_close>
	  	// clearing buffer to show that result obtained is from the file
	  	clear_buffer();
 80019ac:	f7ff fd44 	bl	8001438 <clear_buffer>
	  	/* Open second file to read */
	  	fresult = f_open(&fil, "file2.txt", FA_READ);
 80019b0:	2201      	movs	r2, #1
 80019b2:	495e      	ldr	r1, [pc, #376]	; (8001b2c <sd_init+0x328>)
 80019b4:	4858      	ldr	r0, [pc, #352]	; (8001b18 <sd_init+0x314>)
 80019b6:	f008 fca5 	bl	800a304 <f_open>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <sd_init+0x2e0>)
 80019c0:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK){
 80019c2:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <sd_init+0x2e0>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <sd_init+0x1cc>
	  		send_uart ("file2.txt is open and the data is shown below\r\n");
 80019ca:	485c      	ldr	r0, [pc, #368]	; (8001b3c <sd_init+0x338>)
 80019cc:	f7ff fd50 	bl	8001470 <send_uart>
	  	}

	  	/* Read data from the file
	  	 * Please see the function details for the arguments */
	  	f_read (&fil, buffer, f_size(&fil), &br);
 80019d0:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <sd_init+0x314>)
 80019d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d6:	330c      	adds	r3, #12
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <sd_init+0x33c>)
 80019dc:	494a      	ldr	r1, [pc, #296]	; (8001b08 <sd_init+0x304>)
 80019de:	484e      	ldr	r0, [pc, #312]	; (8001b18 <sd_init+0x314>)
 80019e0:	f008 ffca 	bl	800a978 <f_read>
	  	send_uart(buffer);
 80019e4:	4848      	ldr	r0, [pc, #288]	; (8001b08 <sd_init+0x304>)
 80019e6:	f7ff fd43 	bl	8001470 <send_uart>
	  	send_uart("\r\n");
 80019ea:	484f      	ldr	r0, [pc, #316]	; (8001b28 <sd_init+0x324>)
 80019ec:	f7ff fd40 	bl	8001470 <send_uart>

	  	/* Close file */
	  	f_close(&fil);
 80019f0:	4849      	ldr	r0, [pc, #292]	; (8001b18 <sd_init+0x314>)
 80019f2:	f009 fd28 	bl	800b446 <f_close>

	  	clear_buffer();
 80019f6:	f7ff fd1f 	bl	8001438 <clear_buffer>


	  	/*********************UPDATING an existing file ***************************/

	  	/* Open the file with write access */
	  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80019fa:	2203      	movs	r2, #3
 80019fc:	494b      	ldr	r1, [pc, #300]	; (8001b2c <sd_init+0x328>)
 80019fe:	4846      	ldr	r0, [pc, #280]	; (8001b18 <sd_init+0x314>)
 8001a00:	f008 fc80 	bl	800a304 <f_open>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <sd_init+0x2e0>)
 8001a0a:	701a      	strb	r2, [r3, #0]

	  	/* Move to offset to the end of the file */
	  	fresult = f_lseek(&fil, f_size(&fil));
 8001a0c:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <sd_init+0x314>)
 8001a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a12:	330c      	adds	r3, #12
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	483f      	ldr	r0, [pc, #252]	; (8001b18 <sd_init+0x314>)
 8001a1a:	f009 fd3f 	bl	800b49c <f_lseek>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <sd_init+0x2e0>)
 8001a24:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <sd_init+0x2e0>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <sd_init+0x230>
	  	{
	  		send_uart ("About to update the file2.txt\r\n");
 8001a2e:	4845      	ldr	r0, [pc, #276]	; (8001b44 <sd_init+0x340>)
 8001a30:	f7ff fd1e 	bl	8001470 <send_uart>
	  	}

	  	/* write the string to the file */
	  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8001a34:	4938      	ldr	r1, [pc, #224]	; (8001b18 <sd_init+0x314>)
 8001a36:	4844      	ldr	r0, [pc, #272]	; (8001b48 <sd_init+0x344>)
 8001a38:	f00a f9c0 	bl	800bdbc <f_puts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <sd_init+0x2e0>)
 8001a42:	701a      	strb	r2, [r3, #0]
	  	f_close (&fil);
 8001a44:	4834      	ldr	r0, [pc, #208]	; (8001b18 <sd_init+0x314>)
 8001a46:	f009 fcfe 	bl	800b446 <f_close>
	  	clear_buffer();
 8001a4a:	f7ff fcf5 	bl	8001438 <clear_buffer>

	  	/* Open to read the file */
	  	fresult = f_open (&fil, "file2.txt", FA_READ);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4936      	ldr	r1, [pc, #216]	; (8001b2c <sd_init+0x328>)
 8001a52:	4831      	ldr	r0, [pc, #196]	; (8001b18 <sd_init+0x314>)
 8001a54:	f008 fc56 	bl	800a304 <f_open>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <sd_init+0x2e0>)
 8001a5e:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <sd_init+0x314>)
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	330c      	adds	r3, #12
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <sd_init+0x33c>)
 8001a6c:	4926      	ldr	r1, [pc, #152]	; (8001b08 <sd_init+0x304>)
 8001a6e:	482a      	ldr	r0, [pc, #168]	; (8001b18 <sd_init+0x314>)
 8001a70:	f008 ff82 	bl	800a978 <f_read>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <sd_init+0x2e0>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <sd_init+0x2e0>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_init+0x292>
	  	{
	  		send_uart ("Below is the data from updated file2.txt\r\n");
 8001a84:	4831      	ldr	r0, [pc, #196]	; (8001b4c <sd_init+0x348>)
 8001a86:	f7ff fcf3 	bl	8001470 <send_uart>
	  		send_uart(buffer);
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_init+0x304>)
 8001a8c:	f7ff fcf0 	bl	8001470 <send_uart>
	  		send_uart("\r\n");
 8001a90:	4825      	ldr	r0, [pc, #148]	; (8001b28 <sd_init+0x324>)
 8001a92:	f7ff fced 	bl	8001470 <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 8001a96:	4820      	ldr	r0, [pc, #128]	; (8001b18 <sd_init+0x314>)
 8001a98:	f009 fcd5 	bl	800b446 <f_close>

	  	clear_buffer();
 8001a9c:	f7ff fccc 	bl	8001438 <clear_buffer>


	  	/*Create csv file to log random data*/
	  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001aa0:	2213      	movs	r2, #19
 8001aa2:	492b      	ldr	r1, [pc, #172]	; (8001b50 <sd_init+0x34c>)
 8001aa4:	481c      	ldr	r0, [pc, #112]	; (8001b18 <sd_init+0x314>)
 8001aa6:	f008 fc2d 	bl	800a304 <f_open>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <sd_init+0x2e0>)
 8001ab0:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("Timer(s), Cell_Voltages, Pack_Voltage, Pack_Current, Temperature\r\n ", &fil);
 8001ab2:	4919      	ldr	r1, [pc, #100]	; (8001b18 <sd_init+0x314>)
 8001ab4:	4827      	ldr	r0, [pc, #156]	; (8001b54 <sd_init+0x350>)
 8001ab6:	f00a f981 	bl	800bdbc <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 8001aba:	4817      	ldr	r0, [pc, #92]	; (8001b18 <sd_init+0x314>)
 8001abc:	f009 fcc3 	bl	800b446 <f_close>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <sd_init+0x2e0>)
 8001ac6:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <sd_init+0x2e0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <sd_init+0x2d2>
	  	{
	  		send_uart ("File3.csv created and header is written \r\n");
 8001ad0:	4821      	ldr	r0, [pc, #132]	; (8001b58 <sd_init+0x354>)
 8001ad2:	f7ff fccd 	bl	8001470 <send_uart>
	//  	if (fresult == FR_OK)
	//  	{
	//  		send_uart ("SD CARD UNMOUNTED successfully...\r\n");
	//  	}

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800c920 	.word	0x0800c920
 8001ae0:	20000378 	.word	0x20000378
 8001ae4:	2000181c 	.word	0x2000181c
 8001ae8:	0800c924 	.word	0x0800c924
 8001aec:	0800c948 	.word	0x0800c948
 8001af0:	20001818 	.word	0x20001818
 8001af4:	200002ec 	.word	0x200002ec
 8001af8:	0800c96c 	.word	0x0800c96c
 8001afc:	3fe00000 	.word	0x3fe00000
 8001b00:	20001910 	.word	0x20001910
 8001b04:	0800c970 	.word	0x0800c970
 8001b08:	200013e4 	.word	0x200013e4
 8001b0c:	200013e0 	.word	0x200013e0
 8001b10:	0800c98c 	.word	0x0800c98c
 8001b14:	0800c9a8 	.word	0x0800c9a8
 8001b18:	20001960 	.word	0x20001960
 8001b1c:	0800c9b4 	.word	0x0800c9b4
 8001b20:	0800c9f8 	.word	0x0800c9f8
 8001b24:	0800ca28 	.word	0x0800ca28
 8001b28:	0800ca68 	.word	0x0800ca68
 8001b2c:	0800ca6c 	.word	0x0800ca6c
 8001b30:	0800ca78 	.word	0x0800ca78
 8001b34:	2000180c 	.word	0x2000180c
 8001b38:	0800cacc 	.word	0x0800cacc
 8001b3c:	0800cafc 	.word	0x0800cafc
 8001b40:	200013d0 	.word	0x200013d0
 8001b44:	0800cb2c 	.word	0x0800cb2c
 8001b48:	0800cb4c 	.word	0x0800cb4c
 8001b4c:	0800cb80 	.word	0x0800cb80
 8001b50:	0800c894 	.word	0x0800c894
 8001b54:	0800cbac 	.word	0x0800cbac
 8001b58:	0800cbf0 	.word	0x0800cbf0

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b62:	f000 fd63 	bl	800262c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b66:	f000 f8c7 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6a:	f000 fa91 	bl	8002090 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b6e:	f000 fa5f 	bl	8002030 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001b72:	f000 fa1f 	bl	8001fb4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001b76:	f005 fdd9 	bl	800772c <MX_FATFS_Init>
  MX_CAN_Init();
 8001b7a:	f000 f929 	bl	8001dd0 <MX_CAN_Init>
  MX_RTC_Init();
 8001b7e:	f000 f97b 	bl	8001e78 <MX_RTC_Init>
  MX_SPI1_Init();
 8001b82:	f000 f9d9 	bl	8001f38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  //HAL_Delay(250);

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 8001b86:	494d      	ldr	r1, [pc, #308]	; (8001cbc <main+0x160>)
 8001b88:	484d      	ldr	r0, [pc, #308]	; (8001cc0 <main+0x164>)
 8001b8a:	f00a fb11 	bl	800c1b0 <siprintf>
  send_uart(buffer);
 8001b8e:	484c      	ldr	r0, [pc, #304]	; (8001cc0 <main+0x164>)
 8001b90:	f7ff fc6e 	bl	8001470 <send_uart>
  clear_buffer();
 8001b94:	f7ff fc50 	bl	8001438 <clear_buffer>

  if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0x32F2)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <main+0x168>)
 8001b9c:	f003 fdca 	bl	8005734 <HAL_RTCEx_BKUPRead>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d001      	beq.n	8001bae <main+0x52>
  	  {
	  	  set_time(); //set RTC init value
 8001baa:	f7ff fd27 	bl	80015fc <set_time>
  	  }

  sd_init();
 8001bae:	f7ff fe29 	bl	8001804 <sd_init>

  /*CAN Initializations*/
  HAL_CAN_Start(&hcan);
 8001bb2:	4845      	ldr	r0, [pc, #276]	; (8001cc8 <main+0x16c>)
 8001bb4:	f000 ff89 	bl	8002aca <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //using FIFO0 for RX callback reception
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4843      	ldr	r0, [pc, #268]	; (8001cc8 <main+0x16c>)
 8001bbc:	f001 f9b6 	bl	8002f2c <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; //data
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <main+0x170>)
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <main+0x170>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <main+0x170>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  //id
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <main+0x170>)
 8001bd4:	f240 4246 	movw	r2, #1094	; 0x446
 8001bd8:	601a      	str	r2, [r3, #0]
  //populate data to Txdata bytes
  TxData[0] = 11;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <main+0x174>)
 8001bdc:	220b      	movs	r2, #11
 8001bde:	701a      	strb	r2, [r3, #0]
  TxData[1] = 100;
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <main+0x174>)
 8001be2:	2264      	movs	r2, #100	; 0x64
 8001be4:	705a      	strb	r2, [r3, #1]
  //send CAN message // TO DO:check CAN message reception on BluePill
  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);

  /*UART2 Interrupt*/
  HAL_UART_Receive_IT (&huart2, uart_rx_data, 4); //set interrupt for uart rx
 8001be6:	2204      	movs	r2, #4
 8001be8:	493a      	ldr	r1, [pc, #232]	; (8001cd4 <main+0x178>)
 8001bea:	483b      	ldr	r0, [pc, #236]	; (8001cd8 <main+0x17c>)
 8001bec:	f004 fc2c 	bl	8006448 <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf6:	4839      	ldr	r0, [pc, #228]	; (8001cdc <main+0x180>)
 8001bf8:	f001 ff08 	bl	8003a0c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c00:	f000 fd7a 	bl	80026f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); //turn OFF precharge relay
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c0a:	4834      	ldr	r0, [pc, #208]	; (8001cdc <main+0x180>)
 8001c0c:	f001 fefe 	bl	8003a0c <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8001c10:	20fa      	movs	r0, #250	; 0xfa
 8001c12:	f000 fd71 	bl	80026f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET); //turn ON HV+ contactor
 8001c16:	2201      	movs	r2, #1
 8001c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c1c:	482f      	ldr	r0, [pc, #188]	; (8001cdc <main+0x180>)
 8001c1e:	f001 fef5 	bl	8003a0c <HAL_GPIO_WritePin>

  	//TO DO:add LTC6811 library files/use driverSWLTC6804 functions
  wakeup_sleep(1);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff fdc8 	bl	80017b8 <wakeup_sleep>
  //HAL_Delay(10);
  wakeup_idle(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff fd93 	bl	8001754 <wakeup_idle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Receive (&huart2, Rx_data, 4, 1000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8001c2e:	2108      	movs	r1, #8
 8001c30:	482a      	ldr	r0, [pc, #168]	; (8001cdc <main+0x180>)
 8001c32:	f001 ff03 	bl	8003a3c <HAL_GPIO_TogglePin>
	  write_to_csvfile();
 8001c36:	f7ff fc33 	bl	80014a0 <write_to_csvfile>
	  HAL_Delay(250);
 8001c3a:	20fa      	movs	r0, #250	; 0xfa
 8001c3c:	f000 fd5c 	bl	80026f8 <HAL_Delay>
	  //send CAN message // TO DO:check CAN message reception on BluePill
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <main+0x184>)
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <main+0x174>)
 8001c44:	4921      	ldr	r1, [pc, #132]	; (8001ccc <main+0x170>)
 8001c46:	4820      	ldr	r0, [pc, #128]	; (8001cc8 <main+0x16c>)
 8001c48:	f000 ff83 	bl	8002b52 <HAL_CAN_AddTxMessage>
	  wakeup_idle(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff fd81 	bl	8001754 <wakeup_idle>

	  if(CAN_data_checkFlag) //check if CAN RX flag is set in HAL_CAN_RxFifo0MsgPendingCallback
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <main+0x188>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d010      	beq.n	8001c7c <main+0x120>
	  {
		  sprintf(buffer, "CAN Message values received is:%d, %d\r\n", RxData[0], RxData[1]);
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <main+0x18c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <main+0x18c>)
 8001c62:	785b      	ldrb	r3, [r3, #1]
 8001c64:	4921      	ldr	r1, [pc, #132]	; (8001cec <main+0x190>)
 8001c66:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <main+0x164>)
 8001c68:	f00a faa2 	bl	800c1b0 <siprintf>
		  send_uart(buffer);
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <main+0x164>)
 8001c6e:	f7ff fbff 	bl	8001470 <send_uart>
		  clear_buffer();
 8001c72:	f7ff fbe1 	bl	8001438 <clear_buffer>
		  CAN_data_checkFlag = 0;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <main+0x188>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
		  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	  }

	  if(uart_rx_flag)
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <main+0x194>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <main+0x154>
	  {
		  sprintf(buffer, "RX Message is: %c, %c, %c\r\n", uart_rx_data[0], uart_rx_data[1], uart_rx_data[2]);
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <main+0x178>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <main+0x178>)
 8001c8c:	785b      	ldrb	r3, [r3, #1]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <main+0x178>)
 8001c92:	789b      	ldrb	r3, [r3, #2]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	460b      	mov	r3, r1
 8001c98:	4916      	ldr	r1, [pc, #88]	; (8001cf4 <main+0x198>)
 8001c9a:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <main+0x164>)
 8001c9c:	f00a fa88 	bl	800c1b0 <siprintf>
		  send_uart(buffer);
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <main+0x164>)
 8001ca2:	f7ff fbe5 	bl	8001470 <send_uart>
		  clear_buffer();
 8001ca6:	f7ff fbc7 	bl	8001438 <clear_buffer>
		  uart_rx_flag = 0;
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <main+0x194>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

	  }

	  get_time();  //print RTC
 8001cb0:	f7ff fce4 	bl	800167c <get_time>
	  HAL_Delay(250);
 8001cb4:	20fa      	movs	r0, #250	; 0xfa
 8001cb6:	f000 fd1f 	bl	80026f8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8001cba:	e7b8      	b.n	8001c2e <main+0xd2>
 8001cbc:	0800cc1c 	.word	0x0800cc1c
 8001cc0:	200013e4 	.word	0x200013e4
 8001cc4:	200017e4 	.word	0x200017e4
 8001cc8:	200013a8 	.word	0x200013a8
 8001ccc:	2000191c 	.word	0x2000191c
 8001cd0:	20001804 	.word	0x20001804
 8001cd4:	20001954 	.word	0x20001954
 8001cd8:	2000188c 	.word	0x2000188c
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	20001814 	.word	0x20001814
 8001ce4:	200000ac 	.word	0x200000ac
 8001ce8:	20001884 	.word	0x20001884
 8001cec:	0800cc44 	.word	0x0800cc44
 8001cf0:	200000a8 	.word	0x200000a8
 8001cf4:	0800cc6c 	.word	0x0800cc6c

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b09e      	sub	sp, #120	; 0x78
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d02:	2228      	movs	r2, #40	; 0x28
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00a f990 	bl	800c02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	223c      	movs	r2, #60	; 0x3c
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00a f982 	bl	800c02c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d28:	f001 feba 	bl	8003aa0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <SystemClock_Config+0xd0>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a25      	ldr	r2, [pc, #148]	; (8001dc8 <SystemClock_Config+0xd0>)
 8001d32:	f023 0318 	bic.w	r3, r3, #24
 8001d36:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001d38:	2305      	movs	r3, #5
 8001d3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d40:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d46:	2301      	movs	r3, #1
 8001d48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d56:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d5c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d62:	4618      	mov	r0, r3
 8001d64:	f001 feac 	bl	8003ac0 <HAL_RCC_OscConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001d6e:	f000 fa11 	bl	8002194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d72:	230f      	movs	r3, #15
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d76:	2302      	movs	r3, #2
 8001d78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fd9e 	bl	80048d0 <HAL_RCC_ClockConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d9a:	f000 f9fb 	bl	8002194 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <SystemClock_Config+0xd4>)
 8001da0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001daa:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 ffc4 	bl	8004d3c <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001dba:	f000 f9eb 	bl	8002194 <Error_Handler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3778      	adds	r7, #120	; 0x78
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	00010002 	.word	0x00010002

08001dd0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <MX_CAN_Init+0xa4>)
 8001dda:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001dde:	2212      	movs	r2, #18
 8001de0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001df0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001df4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001e20:	4813      	ldr	r0, [pc, #76]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001e22:	f000 fc8d 	bl	8002740 <HAL_CAN_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001e2c:	f000 f9b2 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //CAN filter settings
  CAN_FilterTypeDef canfilterConfig;

  canfilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
  canfilterConfig.FilterBank = 11;
 8001e34:	230b      	movs	r3, #11
 8001e36:	617b      	str	r3, [r7, #20]
  canfilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  canfilterConfig.FilterIdHigh = 0x103<<5;
 8001e3c:	f242 0360 	movw	r3, #8288	; 0x2060
 8001e40:	603b      	str	r3, [r7, #0]
  canfilterConfig.FilterIdLow = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  canfilterConfig.FilterMaskIdHigh = 0x103<<5;
 8001e46:	f242 0360 	movw	r3, #8288	; 0x2060
 8001e4a:	60bb      	str	r3, [r7, #8]
  canfilterConfig.FilterMaskIdLow = 0x0000;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  canfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
  canfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e54:	2301      	movs	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
  canfilterConfig.SlaveStartFilterBank = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterConfig);
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <MX_CAN_Init+0xa0>)
 8001e62:	f000 fd68 	bl	8002936 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200013a8 	.word	0x200013a8
 8001e74:	40006400 	.word	0x40006400

08001e78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001e92:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <MX_RTC_Init+0xbc>)
 8001e94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001e9e:	227f      	movs	r2, #127	; 0x7f
 8001ea0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001ea4:	22ff      	movs	r2, #255	; 0xff
 8001ea6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eba:	481d      	ldr	r0, [pc, #116]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001ebc:	f003 f8ee 	bl	800509c <HAL_RTC_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ec6:	f000 f965 	bl	8002194 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x23;
 8001ece:	2323      	movs	r3, #35	; 0x23
 8001ed0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4812      	ldr	r0, [pc, #72]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001ee6:	f003 f96a 	bl	80051be <HAL_RTC_SetTime>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001ef0:	f000 f950 	bl	8002194 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8001ef8:	2306      	movs	r3, #6
 8001efa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8001efc:	2322      	movs	r3, #34	; 0x22
 8001efe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001f00:	2322      	movs	r3, #34	; 0x22
 8001f02:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f04:	463b      	mov	r3, r7
 8001f06:	2201      	movs	r2, #1
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4809      	ldr	r0, [pc, #36]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001f0c:	f003 fa72 	bl	80053f4 <HAL_RTC_SetDate>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f16:	f000 f93d 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 8001f1a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <MX_RTC_Init+0xb8>)
 8001f22:	f003 fbed 	bl	8005700 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200017e4 	.word	0x200017e4
 8001f34:	40002800 	.word	0x40002800

08001f38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <MX_SPI1_Init+0x78>)
 8001f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f6e:	2238      	movs	r2, #56	; 0x38
 8001f70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f86:	2207      	movs	r2, #7
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_SPI1_Init+0x74>)
 8001f98:	f003 fbe4 	bl	8005764 <HAL_SPI_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001fa2:	f000 f8f7 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20001820 	.word	0x20001820
 8001fb0:	40013000 	.word	0x40013000

08001fb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <MX_SPI2_Init+0x74>)
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <MX_SPI2_Init+0x78>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_SPI2_Init+0x74>)
 8001fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <MX_SPI2_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <MX_SPI2_Init+0x74>)
 8001fce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_SPI2_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <MX_SPI2_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_SPI2_Init+0x74>)
 8001fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_SPI2_Init+0x74>)
 8001fea:	2208      	movs	r2, #8
 8001fec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_SPI2_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_SPI2_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_SPI2_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_SPI2_Init+0x74>)
 8002002:	2207      	movs	r2, #7
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <MX_SPI2_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_SPI2_Init+0x74>)
 800200e:	2208      	movs	r2, #8
 8002010:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_SPI2_Init+0x74>)
 8002014:	f003 fba6 	bl	8005764 <HAL_SPI_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800201e:	f000 f8b9 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200002f4 	.word	0x200002f4
 800202c:	40003800 	.word	0x40003800

08002030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <MX_USART2_UART_Init+0x58>)
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <MX_USART2_UART_Init+0x5c>)
 8002038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203a:	4b13      	ldr	r3, [pc, #76]	; (8002088 <MX_USART2_UART_Init+0x58>)
 800203c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_USART2_UART_Init+0x58>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_USART2_UART_Init+0x58>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_USART2_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_USART2_UART_Init+0x58>)
 8002056:	220c      	movs	r2, #12
 8002058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_USART2_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_USART2_UART_Init+0x58>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_USART2_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_USART2_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_USART2_UART_Init+0x58>)
 8002074:	f004 f906 	bl	8006284 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800207e:	f000 f889 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000188c 	.word	0x2000188c
 800208c:	40004400 	.word	0x40004400

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <MX_GPIO_Init+0xfc>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4a38      	ldr	r2, [pc, #224]	; (800218c <MX_GPIO_Init+0xfc>)
 80020ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020b0:	6153      	str	r3, [r2, #20]
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <MX_GPIO_Init+0xfc>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <MX_GPIO_Init+0xfc>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	4a32      	ldr	r2, [pc, #200]	; (800218c <MX_GPIO_Init+0xfc>)
 80020c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c8:	6153      	str	r3, [r2, #20]
 80020ca:	4b30      	ldr	r3, [pc, #192]	; (800218c <MX_GPIO_Init+0xfc>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <MX_GPIO_Init+0xfc>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4a2c      	ldr	r2, [pc, #176]	; (800218c <MX_GPIO_Init+0xfc>)
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	6153      	str	r3, [r2, #20]
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <MX_GPIO_Init+0xfc>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <MX_GPIO_Init+0xfc>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4a26      	ldr	r2, [pc, #152]	; (800218c <MX_GPIO_Init+0xfc>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6153      	str	r3, [r2, #20]
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <MX_GPIO_Init+0xfc>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2110      	movs	r1, #16
 800210a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210e:	f001 fc7d 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f641 4108 	movw	r1, #7176	; 0x1c08
 8002118:	481d      	ldr	r0, [pc, #116]	; (8002190 <MX_GPIO_Init+0x100>)
 800211a:	f001 fc77 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800211e:	2310      	movs	r3, #16
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f001 fad6 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 800213c:	f641 4308 	movw	r3, #7176	; 0x1c08
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	480e      	ldr	r0, [pc, #56]	; (8002190 <MX_GPIO_Init+0x100>)
 8002156:	f001 fac7 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800215a:	2320      	movs	r3, #32
 800215c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800215e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <MX_GPIO_Init+0x100>)
 8002170:	f001 faba 	bl	80036e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	2017      	movs	r0, #23
 800217a:	f001 fa08 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800217e:	2017      	movs	r0, #23
 8002180:	f001 fa21 	bl	80035c6 <HAL_NVIC_EnableIRQ>

}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	48000400 	.word	0x48000400

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219c:	e7fe      	b.n	800219c <Error_Handler+0x8>
	...

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_MspInit+0x44>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_MspInit+0x44>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6193      	str	r3, [r2, #24]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_MspInit+0x44>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_MspInit+0x44>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_MspInit+0x44>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	61d3      	str	r3, [r2, #28]
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_MspInit+0x44>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000

080021e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_CAN_MspInit+0x90>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d131      	bne.n	800226e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_CAN_MspInit+0x94>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a1b      	ldr	r2, [pc, #108]	; (800227c <HAL_CAN_MspInit+0x94>)
 8002210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_CAN_MspInit+0x94>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <HAL_CAN_MspInit+0x94>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_CAN_MspInit+0x94>)
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	6153      	str	r3, [r2, #20]
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_CAN_MspInit+0x94>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800223a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800224c:	2309      	movs	r3, #9
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225a:	f001 fa45 	bl	80036e8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2014      	movs	r0, #20
 8002264:	f001 f993 	bl	800358e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002268:	2014      	movs	r0, #20
 800226a:	f001 f9ac 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40006400 	.word	0x40006400
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_RTC_MspInit+0x44>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d111      	bne.n	80022b6 <HAL_RTC_MspInit+0x36>
 8002292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002296:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022a0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_RTC_MspInit+0x48>)
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2301      	movs	r3, #1
 80022b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40002800 	.word	0x40002800
 80022c8:	10908100 	.word	0x10908100

080022cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_SPI_MspInit+0xdc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d129      	bne.n	8002342 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	4a2e      	ldr	r2, [pc, #184]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 80022f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022f8:	6193      	str	r3, [r2, #24]
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4a28      	ldr	r2, [pc, #160]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	6153      	str	r3, [r2, #20]
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800231e:	23e0      	movs	r3, #224	; 0xe0
 8002320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800232e:	2305      	movs	r3, #5
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	4619      	mov	r1, r3
 8002338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233c:	f001 f9d4 	bl	80036e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002340:	e02d      	b.n	800239e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_SPI_MspInit+0xe4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d128      	bne.n	800239e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 8002352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	4a10      	ldr	r2, [pc, #64]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 800236a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236e:	6153      	str	r3, [r2, #20]
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_SPI_MspInit+0xe0>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800237c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800238e:	2305      	movs	r3, #5
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	4619      	mov	r1, r3
 8002398:	4806      	ldr	r0, [pc, #24]	; (80023b4 <HAL_SPI_MspInit+0xe8>)
 800239a:	f001 f9a5 	bl	80036e8 <HAL_GPIO_Init>
}
 800239e:	bf00      	nop
 80023a0:	3730      	adds	r7, #48	; 0x30
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40013000 	.word	0x40013000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40003800 	.word	0x40003800
 80023b4:	48000400 	.word	0x48000400

080023b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_UART_MspInit+0x8c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d130      	bne.n	800243c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_UART_MspInit+0x90>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a1a      	ldr	r2, [pc, #104]	; (8002448 <HAL_UART_MspInit+0x90>)
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	61d3      	str	r3, [r2, #28]
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_UART_MspInit+0x90>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_UART_MspInit+0x90>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_UART_MspInit+0x90>)
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	6153      	str	r3, [r2, #20]
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_UART_MspInit+0x90>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800240a:	230c      	movs	r3, #12
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800241a:	2307      	movs	r3, #7
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002428:	f001 f95e 	bl	80036e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	2026      	movs	r0, #38	; 0x26
 8002432:	f001 f8ac 	bl	800358e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002436:	2026      	movs	r0, #38	; 0x26
 8002438:	f001 f8c5 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800243c:	bf00      	nop
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40004400 	.word	0x40004400
 8002448:	40021000 	.word	0x40021000

0800244c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <SDTimer_Handler+0x40>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <SDTimer_Handler+0x1c>
    Timer1--;
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <SDTimer_Handler+0x40>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <SDTimer_Handler+0x40>)
 8002466:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <SDTimer_Handler+0x44>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <SDTimer_Handler+0x34>
    Timer2--;
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <SDTimer_Handler+0x44>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SDTimer_Handler+0x44>)
 800247e:	801a      	strh	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20002990 	.word	0x20002990
 8002490:	2000298e 	.word	0x2000298e

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <NMI_Handler+0x4>

0800249a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <HardFault_Handler+0x4>

080024a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <MemManage_Handler+0x4>

080024a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <BusFault_Handler+0x4>

080024ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <UsageFault_Handler+0x4>

080024b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <SysTick_Handler+0x30>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <SysTick_Handler+0x30>)
 80024ec:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <SysTick_Handler+0x30>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d904      	bls.n	8002502 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <SysTick_Handler+0x30>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80024fe:	f7ff ffa5 	bl	800244c <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002502:	f000 f8d9 	bl	80026b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200000b0 	.word	0x200000b0

08002510 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002516:	f000 fd2f 	bl	8002f78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200013a8 	.word	0x200013a8

08002524 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002528:	2020      	movs	r0, #32
 800252a:	f001 faa1 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <USART2_IRQHandler+0x10>)
 800253a:	f003 ffd3 	bl	80064e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000188c 	.word	0x2000188c

08002548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <_sbrk+0x5c>)
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <_sbrk+0x60>)
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_sbrk+0x64>)
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <_sbrk+0x68>)
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002578:	f009 fd20 	bl	800bfbc <__errno>
 800257c:	4603      	mov	r3, r0
 800257e:	220c      	movs	r2, #12
 8002580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e009      	b.n	800259c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <_sbrk+0x64>)
 8002598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	2000a000 	.word	0x2000a000
 80025a8:	00000400 	.word	0x00000400
 80025ac:	200000b4 	.word	0x200000b4
 80025b0:	20004a10 	.word	0x20004a10

080025b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <SystemInit+0x20>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <SystemInit+0x20>)
 80025c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025dc:	480d      	ldr	r0, [pc, #52]	; (8002614 <LoopForever+0x6>)
  ldr r1, =_edata
 80025de:	490e      	ldr	r1, [pc, #56]	; (8002618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <LoopForever+0xe>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e4:	e002      	b.n	80025ec <LoopCopyDataInit>

080025e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ea:	3304      	adds	r3, #4

080025ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f0:	d3f9      	bcc.n	80025e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025f4:	4c0b      	ldr	r4, [pc, #44]	; (8002624 <LoopForever+0x16>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f8:	e001      	b.n	80025fe <LoopFillZerobss>

080025fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025fc:	3204      	adds	r2, #4

080025fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002600:	d3fb      	bcc.n	80025fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002602:	f7ff ffd7 	bl	80025b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002606:	f009 fcdf 	bl	800bfc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800260a:	f7ff faa7 	bl	8001b5c <main>

0800260e <LoopForever>:

LoopForever:
    b LoopForever
 800260e:	e7fe      	b.n	800260e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002610:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002618:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800261c:	0800d294 	.word	0x0800d294
  ldr r2, =_sbss
 8002620:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002624:	20004a0c 	.word	0x20004a0c

08002628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC1_2_IRQHandler>
	...

0800262c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_Init+0x28>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a07      	ldr	r2, [pc, #28]	; (8002654 <HAL_Init+0x28>)
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800263c:	2003      	movs	r0, #3
 800263e:	f000 ff9b 	bl	8003578 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002642:	200f      	movs	r0, #15
 8002644:	f000 f808 	bl	8002658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002648:	f7ff fdaa 	bl	80021a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40022000 	.word	0x40022000

08002658 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x54>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_InitTick+0x58>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f000 ffb3 	bl	80035e2 <HAL_SYSTICK_Config>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00e      	b.n	80026a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b0f      	cmp	r3, #15
 800268a:	d80a      	bhi.n	80026a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800268c:	2200      	movs	r2, #0
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f000 ff7b 	bl	800358e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002698:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <HAL_InitTick+0x5c>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e000      	b.n	80026a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000004 	.word	0x20000004
 80026b0:	2000000c 	.word	0x2000000c
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x20>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_IncTick+0x24>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_IncTick+0x24>)
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000000c 	.word	0x2000000c
 80026dc:	20002994 	.word	0x20002994

080026e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <HAL_GetTick+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20002994 	.word	0x20002994

080026f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff ffee 	bl	80026e0 <HAL_GetTick>
 8002704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d005      	beq.n	800271e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_Delay+0x44>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800271e:	bf00      	nop
 8002720:	f7ff ffde 	bl	80026e0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	429a      	cmp	r2, r3
 800272e:	d8f7      	bhi.n	8002720 <HAL_Delay+0x28>
  {
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000000c 	.word	0x2000000c

08002740 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0ed      	b.n	800292e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fd42 	bl	80021e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002774:	f7ff ffb4 	bl	80026e0 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800277a:	e012      	b.n	80027a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800277c:	f7ff ffb0 	bl	80026e0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b0a      	cmp	r3, #10
 8002788:	d90b      	bls.n	80027a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2205      	movs	r2, #5
 800279a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0c5      	b.n	800292e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0e5      	beq.n	800277c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0202 	bic.w	r2, r2, #2
 80027be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c0:	f7ff ff8e 	bl	80026e0 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027c6:	e012      	b.n	80027ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027c8:	f7ff ff8a 	bl	80026e0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b0a      	cmp	r3, #10
 80027d4:	d90b      	bls.n	80027ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2205      	movs	r2, #5
 80027e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e09f      	b.n	800292e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7e1b      	ldrb	r3, [r3, #24]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d108      	bne.n	8002816 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e007      	b.n	8002826 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7e5b      	ldrb	r3, [r3, #25]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d108      	bne.n	8002840 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e007      	b.n	8002850 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e9b      	ldrb	r3, [r3, #26]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d108      	bne.n	800286a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e007      	b.n	800287a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0220 	bic.w	r2, r2, #32
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7edb      	ldrb	r3, [r3, #27]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0210 	bic.w	r2, r2, #16
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e007      	b.n	80028a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0210 	orr.w	r2, r2, #16
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7f1b      	ldrb	r3, [r3, #28]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d108      	bne.n	80028be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e007      	b.n	80028ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0208 	bic.w	r2, r2, #8
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7f5b      	ldrb	r3, [r3, #29]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0204 	orr.w	r2, r2, #4
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e007      	b.n	80028f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0204 	bic.w	r2, r2, #4
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	ea42 0103 	orr.w	r1, r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002936:	b480      	push	{r7}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d003      	beq.n	800295c <HAL_CAN_ConfigFilter+0x26>
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	2b02      	cmp	r3, #2
 8002958:	f040 80aa 	bne.w	8002ab0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2201      	movs	r2, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d123      	bne.n	80029de <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43db      	mvns	r3, r3
 80029a0:	401a      	ands	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3248      	adds	r2, #72	; 0x48
 80029be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029d4:	6979      	ldr	r1, [r7, #20]
 80029d6:	3348      	adds	r3, #72	; 0x48
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d122      	bne.n	8002a2c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3248      	adds	r2, #72	; 0x48
 8002a0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a22:	6979      	ldr	r1, [r7, #20]
 8002a24:	3348      	adds	r3, #72	; 0x48
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a46:	e007      	b.n	8002a58 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a72:	e007      	b.n	8002a84 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aa2:	f023 0201 	bic.w	r2, r3, #1
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e006      	b.n	8002abe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d12e      	bne.n	8002b3c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002af6:	f7ff fdf3 	bl	80026e0 <HAL_GetTick>
 8002afa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002afc:	e012      	b.n	8002b24 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002afe:	f7ff fdef 	bl	80026e0 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b0a      	cmp	r3, #10
 8002b0a:	d90b      	bls.n	8002b24 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e012      	b.n	8002b4a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e5      	bne.n	8002afe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e006      	b.n	8002b4a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b089      	sub	sp, #36	; 0x24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b66:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b70:	7ffb      	ldrb	r3, [r7, #31]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d003      	beq.n	8002b7e <HAL_CAN_AddTxMessage+0x2c>
 8002b76:	7ffb      	ldrb	r3, [r7, #31]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	f040 80b8 	bne.w	8002cee <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a0 	beq.w	8002cde <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	0e1b      	lsrs	r3, r3, #24
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d907      	bls.n	8002bbe <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e09e      	b.n	8002cfc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	6809      	ldr	r1, [r1, #0]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3318      	adds	r3, #24
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	440b      	add	r3, r1
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e00f      	b.n	8002c0c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bf6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c00:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3318      	adds	r3, #24
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	440b      	add	r3, r1
 8002c0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3318      	adds	r3, #24
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	7d1b      	ldrb	r3, [r3, #20]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d111      	bne.n	8002c4c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3318      	adds	r3, #24
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	3304      	adds	r3, #4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	6811      	ldr	r1, [r2, #0]
 8002c3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3318      	adds	r3, #24
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	440b      	add	r3, r1
 8002c48:	3304      	adds	r3, #4
 8002c4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3307      	adds	r3, #7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	061a      	lsls	r2, r3, #24
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3306      	adds	r3, #6
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	041b      	lsls	r3, r3, #16
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3305      	adds	r3, #5
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	4313      	orrs	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3204      	adds	r2, #4
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	4610      	mov	r0, r2
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	6811      	ldr	r1, [r2, #0]
 8002c74:	ea43 0200 	orr.w	r2, r3, r0
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3303      	adds	r3, #3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	061a      	lsls	r2, r3, #24
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3302      	adds	r3, #2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	6811      	ldr	r1, [r2, #0]
 8002caa:	ea43 0200 	orr.w	r2, r3, r0
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002cb8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4413      	add	r3, r2
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	6811      	ldr	r1, [r2, #0]
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3318      	adds	r3, #24
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	440b      	add	r3, r1
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e00e      	b.n	8002cfc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e006      	b.n	8002cfc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3724      	adds	r7, #36	; 0x24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d003      	beq.n	8002d2c <HAL_CAN_GetRxMessage+0x24>
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	f040 80f3 	bne.w	8002f12 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d116      	bne.n	8002d6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0e7      	b.n	8002f20 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0d8      	b.n	8002f20 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	331b      	adds	r3, #27
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	4413      	add	r3, r2
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0204 	and.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10c      	bne.n	8002da6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	331b      	adds	r3, #27
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	4413      	add	r3, r2
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0d5b      	lsrs	r3, r3, #21
 8002d9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e00b      	b.n	8002dbe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	331b      	adds	r3, #27
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4413      	add	r3, r2
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	331b      	adds	r3, #27
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	4413      	add	r3, r2
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0202 	and.w	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	331b      	adds	r3, #27
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	3304      	adds	r3, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	331b      	adds	r3, #27
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	3304      	adds	r3, #4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0a1a      	lsrs	r2, r3, #8
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0c1a      	lsrs	r2, r3, #16
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	3302      	adds	r3, #2
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0e1a      	lsrs	r2, r3, #24
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	3303      	adds	r3, #3
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	3304      	adds	r3, #4
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0a1a      	lsrs	r2, r3, #8
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	3305      	adds	r3, #5
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0c1a      	lsrs	r2, r3, #16
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e1a      	lsrs	r2, r3, #24
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	3307      	adds	r3, #7
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d108      	bne.n	8002efe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0220 	orr.w	r2, r2, #32
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	e007      	b.n	8002f0e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0220 	orr.w	r2, r2, #32
 8002f0c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e006      	b.n	8002f20 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
  }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f3c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d002      	beq.n	8002f4a <HAL_CAN_ActivateNotification+0x1e>
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d109      	bne.n	8002f5e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6959      	ldr	r1, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e006      	b.n	8002f6c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d07c      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d023      	beq.n	8003010 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f983 	bl	80032e6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002fe0:	e016      	b.n	8003010 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff4:	e00c      	b.n	8003010 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	e002      	b.n	8003010 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f989 	bl	8003322 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d024      	beq.n	8003064 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003022:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f963 	bl	80032fa <HAL_CAN_TxMailbox1CompleteCallback>
 8003034:	e016      	b.n	8003064 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	e00c      	b.n	8003064 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
 800305c:	e002      	b.n	8003064 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f969 	bl	8003336 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d024      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003076:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f943 	bl	800330e <HAL_CAN_TxMailbox2CompleteCallback>
 8003088:	e016      	b.n	80030b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	e00c      	b.n	80030b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	e002      	b.n	80030b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f949 	bl	800334a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2210      	movs	r2, #16
 80030da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d006      	beq.n	80030fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2208      	movs	r2, #8
 80030f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f930 	bl	800335e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fa3e 	bl	8001598 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003136:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2210      	movs	r2, #16
 800313e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2208      	movs	r2, #8
 800315a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f912 	bl	8003386 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8f9 	bl	8003372 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2210      	movs	r2, #16
 800319a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8fc 	bl	800339a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d006      	beq.n	80031c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2208      	movs	r2, #8
 80031bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8f5 	bl	80033ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d07b      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d072      	beq.n	80032be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003232:	2b00      	cmp	r3, #0
 8003234:	d043      	beq.n	80032be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800323c:	2b00      	cmp	r3, #0
 800323e:	d03e      	beq.n	80032be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003246:	2b60      	cmp	r3, #96	; 0x60
 8003248:	d02b      	beq.n	80032a2 <HAL_CAN_IRQHandler+0x32a>
 800324a:	2b60      	cmp	r3, #96	; 0x60
 800324c:	d82e      	bhi.n	80032ac <HAL_CAN_IRQHandler+0x334>
 800324e:	2b50      	cmp	r3, #80	; 0x50
 8003250:	d022      	beq.n	8003298 <HAL_CAN_IRQHandler+0x320>
 8003252:	2b50      	cmp	r3, #80	; 0x50
 8003254:	d82a      	bhi.n	80032ac <HAL_CAN_IRQHandler+0x334>
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d019      	beq.n	800328e <HAL_CAN_IRQHandler+0x316>
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d826      	bhi.n	80032ac <HAL_CAN_IRQHandler+0x334>
 800325e:	2b30      	cmp	r3, #48	; 0x30
 8003260:	d010      	beq.n	8003284 <HAL_CAN_IRQHandler+0x30c>
 8003262:	2b30      	cmp	r3, #48	; 0x30
 8003264:	d822      	bhi.n	80032ac <HAL_CAN_IRQHandler+0x334>
 8003266:	2b10      	cmp	r3, #16
 8003268:	d002      	beq.n	8003270 <HAL_CAN_IRQHandler+0x2f8>
 800326a:	2b20      	cmp	r3, #32
 800326c:	d005      	beq.n	800327a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800326e:	e01d      	b.n	80032ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	f043 0308 	orr.w	r3, r3, #8
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003278:	e019      	b.n	80032ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	f043 0310 	orr.w	r3, r3, #16
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003282:	e014      	b.n	80032ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	f043 0320 	orr.w	r3, r3, #32
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800328c:	e00f      	b.n	80032ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003296:	e00a      	b.n	80032ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032a0:	e005      	b.n	80032ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032aa:	e000      	b.n	80032ae <HAL_CAN_IRQHandler+0x336>
            break;
 80032ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2204      	movs	r2, #4
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f872 	bl	80033c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80032de:	bf00      	nop
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <__NVIC_SetPriorityGrouping+0x44>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f4:	4013      	ands	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340a:	4a04      	ldr	r2, [pc, #16]	; (800341c <__NVIC_SetPriorityGrouping+0x44>)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <__NVIC_GetPriorityGrouping+0x18>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 0307 	and.w	r3, r3, #7
}
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	2b00      	cmp	r3, #0
 800344c:	db0b      	blt.n	8003466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4907      	ldr	r1, [pc, #28]	; (8003474 <__NVIC_EnableIRQ+0x38>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000e100 	.word	0xe000e100

08003478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db0a      	blt.n	80034a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	490c      	ldr	r1, [pc, #48]	; (80034c4 <__NVIC_SetPriority+0x4c>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	440b      	add	r3, r1
 800349c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a0:	e00a      	b.n	80034b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4908      	ldr	r1, [pc, #32]	; (80034c8 <__NVIC_SetPriority+0x50>)
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	3b04      	subs	r3, #4
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	440b      	add	r3, r1
 80034b6:	761a      	strb	r2, [r3, #24]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000e100 	.word	0xe000e100
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	bf28      	it	cs
 80034ea:	2304      	movcs	r3, #4
 80034ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d902      	bls.n	80034fc <NVIC_EncodePriority+0x30>
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3b03      	subs	r3, #3
 80034fa:	e000      	b.n	80034fe <NVIC_EncodePriority+0x32>
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	401a      	ands	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003514:	f04f 31ff 	mov.w	r1, #4294967295
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	43d9      	mvns	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	4313      	orrs	r3, r2
         );
}
 8003526:	4618      	mov	r0, r3
 8003528:	3724      	adds	r7, #36	; 0x24
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3b01      	subs	r3, #1
 8003540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003544:	d301      	bcc.n	800354a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003546:	2301      	movs	r3, #1
 8003548:	e00f      	b.n	800356a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <SysTick_Config+0x40>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003552:	210f      	movs	r1, #15
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	f7ff ff8e 	bl	8003478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <SysTick_Config+0x40>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <SysTick_Config+0x40>)
 8003564:	2207      	movs	r2, #7
 8003566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	e000e010 	.word	0xe000e010

08003578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff29 	bl	80033d8 <__NVIC_SetPriorityGrouping>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a0:	f7ff ff3e 	bl	8003420 <__NVIC_GetPriorityGrouping>
 80035a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7ff ff8e 	bl	80034cc <NVIC_EncodePriority>
 80035b0:	4602      	mov	r2, r0
 80035b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff5d 	bl	8003478 <__NVIC_SetPriority>
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff31 	bl	800343c <__NVIC_EnableIRQ>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ffa2 	bl	8003534 <SysTick_Config>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003608:	2b02      	cmp	r3, #2
 800360a:	d008      	beq.n	800361e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2204      	movs	r2, #4
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e020      	b.n	8003660 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 020e 	bic.w	r2, r2, #14
 800362c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	2101      	movs	r1, #1
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800367e:	2b02      	cmp	r3, #2
 8003680:	d005      	beq.n	800368e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2204      	movs	r2, #4
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e027      	b.n	80036de <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 020e 	bic.w	r2, r2, #14
 800369c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
    } 
  }
  return status;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f6:	e154      	b.n	80039a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8146 	beq.w	800399c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d005      	beq.n	8003728 <HAL_GPIO_Init+0x40>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d130      	bne.n	800378a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375e:	2201      	movs	r2, #1
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0201 	and.w	r2, r3, #1
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b03      	cmp	r3, #3
 8003794:	d017      	beq.n	80037c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2203      	movs	r2, #3
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d123      	bne.n	800381a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	08da      	lsrs	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3208      	adds	r2, #8
 80037da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	220f      	movs	r2, #15
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	2203      	movs	r2, #3
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0203 	and.w	r2, r3, #3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80a0 	beq.w	800399c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385c:	4b58      	ldr	r3, [pc, #352]	; (80039c0 <HAL_GPIO_Init+0x2d8>)
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4a57      	ldr	r2, [pc, #348]	; (80039c0 <HAL_GPIO_Init+0x2d8>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6193      	str	r3, [r2, #24]
 8003868:	4b55      	ldr	r3, [pc, #340]	; (80039c0 <HAL_GPIO_Init+0x2d8>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003874:	4a53      	ldr	r2, [pc, #332]	; (80039c4 <HAL_GPIO_Init+0x2dc>)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	220f      	movs	r2, #15
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800389e:	d019      	beq.n	80038d4 <HAL_GPIO_Init+0x1ec>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a49      	ldr	r2, [pc, #292]	; (80039c8 <HAL_GPIO_Init+0x2e0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_GPIO_Init+0x1e8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a48      	ldr	r2, [pc, #288]	; (80039cc <HAL_GPIO_Init+0x2e4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00d      	beq.n	80038cc <HAL_GPIO_Init+0x1e4>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a47      	ldr	r2, [pc, #284]	; (80039d0 <HAL_GPIO_Init+0x2e8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0x1e0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <HAL_GPIO_Init+0x2ec>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_GPIO_Init+0x1dc>
 80038c0:	2304      	movs	r3, #4
 80038c2:	e008      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038c4:	2305      	movs	r3, #5
 80038c6:	e006      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038c8:	2303      	movs	r3, #3
 80038ca:	e004      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_GPIO_Init+0x1ee>
 80038d4:	2300      	movs	r3, #0
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	f002 0203 	and.w	r2, r2, #3
 80038dc:	0092      	lsls	r2, r2, #2
 80038de:	4093      	lsls	r3, r2
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038e6:	4937      	ldr	r1, [pc, #220]	; (80039c4 <HAL_GPIO_Init+0x2dc>)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	3302      	adds	r3, #2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f4:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003918:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800391e:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003942:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003948:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800396c:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003972:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003996:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <HAL_GPIO_Init+0x2f0>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	3301      	adds	r3, #1
 80039a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f47f aea3 	bne.w	80036f8 <HAL_GPIO_Init+0x10>
  }
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40010000 	.word	0x40010000
 80039c8:	48000400 	.word	0x48000400
 80039cc:	48000800 	.word	0x48000800
 80039d0:	48000c00 	.word	0x48000c00
 80039d4:	48001000 	.word	0x48001000
 80039d8:	40010400 	.word	0x40010400

080039dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	887b      	ldrh	r3, [r7, #2]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e001      	b.n	80039fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a1c:	787b      	ldrb	r3, [r7, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	041a      	lsls	r2, r3, #16
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43d9      	mvns	r1, r3
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd fe32 	bl	80016f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40010400 	.word	0x40010400

08003aa0 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aae:	6013      	str	r3, [r2, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40007000 	.word	0x40007000

08003ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f000 bef4 	b.w	80048c2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 816a 	beq.w	8003dbe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003aea:	4bb3      	ldr	r3, [pc, #716]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d00c      	beq.n	8003b10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003af6:	4bb0      	ldr	r3, [pc, #704]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d159      	bne.n	8003bb6 <HAL_RCC_OscConfig+0xf6>
 8003b02:	4bad      	ldr	r3, [pc, #692]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d152      	bne.n	8003bb6 <HAL_RCC_OscConfig+0xf6>
 8003b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b14:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003b24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_OscConfig+0x82>
 8003b3c:	4b9e      	ldr	r3, [pc, #632]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	e015      	b.n	8003b6e <HAL_RCC_OscConfig+0xae>
 8003b42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b46:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b5a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b5e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003b6a:	4b93      	ldr	r3, [pc, #588]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b72:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b76:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b7a:	fa92 f2a2 	rbit	r2, r2
 8003b7e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b82:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b86:	fab2 f282 	clz	r2, r2
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	f042 0220 	orr.w	r2, r2, #32
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f002 021f 	and.w	r2, r2, #31
 8003b96:	2101      	movs	r1, #1
 8003b98:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 810c 	beq.w	8003dbc <HAL_RCC_OscConfig+0x2fc>
 8003ba4:	1d3b      	adds	r3, r7, #4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 8106 	bne.w	8003dbc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f000 be86 	b.w	80048c2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	1d3b      	adds	r3, r7, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x110>
 8003bc2:	4b7d      	ldr	r3, [pc, #500]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a7c      	ldr	r2, [pc, #496]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e030      	b.n	8003c32 <HAL_RCC_OscConfig+0x172>
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x134>
 8003bda:	4b77      	ldr	r3, [pc, #476]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a76      	ldr	r2, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b74      	ldr	r3, [pc, #464]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a73      	ldr	r2, [pc, #460]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e01e      	b.n	8003c32 <HAL_RCC_OscConfig+0x172>
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x15a>
 8003c00:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a6c      	ldr	r2, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a69      	ldr	r2, [pc, #420]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e00b      	b.n	8003c32 <HAL_RCC_OscConfig+0x172>
 8003c1a:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a66      	ldr	r2, [pc, #408]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a63      	ldr	r2, [pc, #396]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c32:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	f023 020f 	bic.w	r2, r3, #15
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	495d      	ldr	r1, [pc, #372]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d059      	beq.n	8003d04 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fd46 	bl	80026e0 <HAL_GetTick>
 8003c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5a:	f7fe fd41 	bl	80026e0 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d902      	bls.n	8003c70 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	f000 be29 	b.w	80048c2 <HAL_RCC_OscConfig+0xe02>
 8003c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c74:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c84:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c88:	fab3 f383 	clz	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x1e2>
 8003c9c:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	e015      	b.n	8003cce <HAL_RCC_OscConfig+0x20e>
 8003ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003cbe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cd2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003cd6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003cda:	fa92 f2a2 	rbit	r2, r2
 8003cde:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003ce2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ce6:	fab2 f282 	clz	r2, r2
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	f042 0220 	orr.w	r2, r2, #32
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	f002 021f 	and.w	r2, r2, #31
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ab      	beq.n	8003c5a <HAL_RCC_OscConfig+0x19a>
 8003d02:	e05c      	b.n	8003dbe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe fcec 	bl	80026e0 <HAL_GetTick>
 8003d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d0e:	f7fe fce7 	bl	80026e0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d902      	bls.n	8003d24 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	f000 bdcf 	b.w	80048c2 <HAL_RCC_OscConfig+0xe02>
 8003d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d28:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003d38:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3c:	fab3 f383 	clz	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d102      	bne.n	8003d56 <HAL_RCC_OscConfig+0x296>
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	e015      	b.n	8003d82 <HAL_RCC_OscConfig+0x2c2>
 8003d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d5a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d72:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <HAL_RCC_OscConfig+0x2f8>)
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d86:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d8a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d8e:	fa92 f2a2 	rbit	r2, r2
 8003d92:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d96:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d9a:	fab2 f282 	clz	r2, r2
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	f042 0220 	orr.w	r2, r2, #32
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f002 021f 	and.w	r2, r2, #31
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f202 	lsl.w	r2, r1, r2
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ab      	bne.n	8003d0e <HAL_RCC_OscConfig+0x24e>
 8003db6:	e002      	b.n	8003dbe <HAL_RCC_OscConfig+0x2fe>
 8003db8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 816f 	beq.w	80040ac <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003dce:	4bd0      	ldr	r3, [pc, #832]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003dda:	4bcd      	ldr	r3, [pc, #820]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d16c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x400>
 8003de6:	4bca      	ldr	r3, [pc, #808]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d166      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x400>
 8003df2:	2302      	movs	r3, #2
 8003df4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003e04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d102      	bne.n	8003e22 <HAL_RCC_OscConfig+0x362>
 8003e1c:	4bbc      	ldr	r3, [pc, #752]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	e013      	b.n	8003e4a <HAL_RCC_OscConfig+0x38a>
 8003e22:	2302      	movs	r3, #2
 8003e24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e34:	2302      	movs	r3, #2
 8003e36:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003e46:	4bb2      	ldr	r3, [pc, #712]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003e50:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e54:	fa92 f2a2 	rbit	r2, r2
 8003e58:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003e5c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e60:	fab2 f282 	clz	r2, r2
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	f042 0220 	orr.w	r2, r2, #32
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	f002 021f 	and.w	r2, r2, #31
 8003e70:	2101      	movs	r1, #1
 8003e72:	fa01 f202 	lsl.w	r2, r1, r2
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <HAL_RCC_OscConfig+0x3cc>
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f000 bd1b 	b.w	80048c2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4ba0      	ldr	r3, [pc, #640]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	21f8      	movs	r1, #248	; 0xf8
 8003e9c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003ea4:	fa91 f1a1 	rbit	r1, r1
 8003ea8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003eac:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003eb0:	fab1 f181 	clz	r1, r1
 8003eb4:	b2c9      	uxtb	r1, r1
 8003eb6:	408b      	lsls	r3, r1
 8003eb8:	4995      	ldr	r1, [pc, #596]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ebe:	e0f5      	b.n	80040ac <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8085 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x516>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003ede:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fbf2 	bl	80026e0 <HAL_GetTick>
 8003efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f02:	f7fe fbed 	bl	80026e0 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	f000 bcd5 	b.w	80048c2 <HAL_RCC_OscConfig+0xe02>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003f2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d102      	bne.n	8003f48 <HAL_RCC_OscConfig+0x488>
 8003f42:	4b73      	ldr	r3, [pc, #460]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	e013      	b.n	8003f70 <HAL_RCC_OscConfig+0x4b0>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f6c:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2202      	movs	r2, #2
 8003f72:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f76:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f7a:	fa92 f2a2 	rbit	r2, r2
 8003f7e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f82:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f86:	fab2 f282 	clz	r2, r2
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	f042 0220 	orr.w	r2, r2, #32
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f002 021f 	and.w	r2, r2, #31
 8003f96:	2101      	movs	r1, #1
 8003f98:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0af      	beq.n	8003f02 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b5b      	ldr	r3, [pc, #364]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	21f8      	movs	r1, #248	; 0xf8
 8003fb2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003fba:	fa91 f1a1 	rbit	r1, r1
 8003fbe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003fc2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003fc6:	fab1 f181 	clz	r1, r1
 8003fca:	b2c9      	uxtb	r1, r1
 8003fcc:	408b      	lsls	r3, r1
 8003fce:	4950      	ldr	r1, [pc, #320]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	e06a      	b.n	80040ac <HAL_RCC_OscConfig+0x5ec>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003fe8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fec:	fab3 f383 	clz	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ff6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2300      	movs	r3, #0
 8004000:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe fb6d 	bl	80026e0 <HAL_GetTick>
 8004006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400a:	e00a      	b.n	8004022 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400c:	f7fe fb68 	bl	80026e0 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d902      	bls.n	8004022 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	f000 bc50 	b.w	80048c2 <HAL_RCC_OscConfig+0xe02>
 8004022:	2302      	movs	r3, #2
 8004024:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800402c:	fa93 f3a3 	rbit	r3, r3
 8004030:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d102      	bne.n	8004052 <HAL_RCC_OscConfig+0x592>
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	e013      	b.n	800407a <HAL_RCC_OscConfig+0x5ba>
 8004052:	2302      	movs	r3, #2
 8004054:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800405c:	fa93 f3a3 	rbit	r3, r3
 8004060:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004064:	2302      	movs	r3, #2
 8004066:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800406a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCC_OscConfig+0x650>)
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2202      	movs	r2, #2
 800407c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004080:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004084:	fa92 f2a2 	rbit	r2, r2
 8004088:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800408c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004090:	fab2 f282 	clz	r2, r2
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	f042 0220 	orr.w	r2, r2, #32
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	f002 021f 	and.w	r2, r2, #31
 80040a0:	2101      	movs	r1, #1
 80040a2:	fa01 f202 	lsl.w	r2, r1, r2
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1af      	bne.n	800400c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80da 	beq.w	8004270 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040bc:	1d3b      	adds	r3, r7, #4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d069      	beq.n	800419a <HAL_RCC_OscConfig+0x6da>
 80040c6:	2301      	movs	r3, #1
 80040c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80040d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_OscConfig+0x654>)
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	461a      	mov	r2, r3
 80040ec:	2301      	movs	r3, #1
 80040ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f0:	f7fe faf6 	bl	80026e0 <HAL_GetTick>
 80040f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f8:	e00e      	b.n	8004118 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fa:	f7fe faf1 	bl	80026e0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d906      	bls.n	8004118 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e3d9      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	10908120 	.word	0x10908120
 8004118:	2302      	movs	r3, #2
 800411a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004122:	fa93 f3a3 	rbit	r3, r3
 8004126:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800412a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800412e:	2202      	movs	r2, #2
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	fa93 f2a3 	rbit	r2, r3
 800413c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004146:	2202      	movs	r2, #2
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	fa93 f2a3 	rbit	r2, r3
 8004154:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004158:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415a:	4ba5      	ldr	r3, [pc, #660]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 800415c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004162:	2102      	movs	r1, #2
 8004164:	6019      	str	r1, [r3, #0]
 8004166:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	fa93 f1a3 	rbit	r1, r3
 8004170:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004174:	6019      	str	r1, [r3, #0]
  return result;
 8004176:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0b0      	beq.n	80040fa <HAL_RCC_OscConfig+0x63a>
 8004198:	e06a      	b.n	8004270 <HAL_RCC_OscConfig+0x7b0>
 800419a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f2a3 	rbit	r2, r3
 80041ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041b0:	601a      	str	r2, [r3, #0]
  return result;
 80041b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	4b8c      	ldr	r3, [pc, #560]	; (80043f4 <HAL_RCC_OscConfig+0x934>)
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	461a      	mov	r2, r3
 80041c8:	2300      	movs	r3, #0
 80041ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041cc:	f7fe fa88 	bl	80026e0 <HAL_GetTick>
 80041d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d4:	e009      	b.n	80041ea <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d6:	f7fe fa83 	bl	80026e0 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e36b      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
 80041ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041ee:	2202      	movs	r2, #2
 80041f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	fa93 f2a3 	rbit	r2, r3
 80041fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004206:	2202      	movs	r2, #2
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	fa93 f2a3 	rbit	r2, r3
 8004214:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800421e:	2202      	movs	r2, #2
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	fa93 f2a3 	rbit	r2, r3
 800422c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004230:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004232:	4b6f      	ldr	r3, [pc, #444]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004236:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800423a:	2102      	movs	r1, #2
 800423c:	6019      	str	r1, [r3, #0]
 800423e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	fa93 f1a3 	rbit	r1, r3
 8004248:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800424c:	6019      	str	r1, [r3, #0]
  return result;
 800424e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2101      	movs	r1, #1
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1b2      	bne.n	80041d6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8158 	beq.w	8004530 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004280:	2300      	movs	r3, #0
 8004282:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004286:	4b5a      	ldr	r3, [pc, #360]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d112      	bne.n	80042b8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	4b57      	ldr	r3, [pc, #348]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4a56      	ldr	r2, [pc, #344]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429c:	61d3      	str	r3, [r2, #28]
 800429e:	4b54      	ldr	r3, [pc, #336]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f107 0308 	add.w	r3, r7, #8
 80042b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_RCC_OscConfig+0x938>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11a      	bne.n	80042fa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c4:	4b4c      	ldr	r3, [pc, #304]	; (80043f8 <HAL_RCC_OscConfig+0x938>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a4b      	ldr	r2, [pc, #300]	; (80043f8 <HAL_RCC_OscConfig+0x938>)
 80042ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d0:	f7fe fa06 	bl	80026e0 <HAL_GetTick>
 80042d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	e009      	b.n	80042ee <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042da:	f7fe fa01 	bl	80026e0 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e2e9      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ee:	4b42      	ldr	r3, [pc, #264]	; (80043f8 <HAL_RCC_OscConfig+0x938>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0ef      	beq.n	80042da <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d106      	bne.n	8004312 <HAL_RCC_OscConfig+0x852>
 8004304:	4b3a      	ldr	r3, [pc, #232]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	4a39      	ldr	r2, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6213      	str	r3, [r2, #32]
 8004310:	e02f      	b.n	8004372 <HAL_RCC_OscConfig+0x8b2>
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10c      	bne.n	8004336 <HAL_RCC_OscConfig+0x876>
 800431c:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	4a33      	ldr	r2, [pc, #204]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	6213      	str	r3, [r2, #32]
 8004328:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 800432e:	f023 0304 	bic.w	r3, r3, #4
 8004332:	6213      	str	r3, [r2, #32]
 8004334:	e01d      	b.n	8004372 <HAL_RCC_OscConfig+0x8b2>
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b05      	cmp	r3, #5
 800433e:	d10c      	bne.n	800435a <HAL_RCC_OscConfig+0x89a>
 8004340:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004346:	f043 0304 	orr.w	r3, r3, #4
 800434a:	6213      	str	r3, [r2, #32]
 800434c:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6213      	str	r3, [r2, #32]
 8004358:	e00b      	b.n	8004372 <HAL_RCC_OscConfig+0x8b2>
 800435a:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6213      	str	r3, [r2, #32]
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d06b      	beq.n	8004454 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437c:	f7fe f9b0 	bl	80026e0 <HAL_GetTick>
 8004380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	e00b      	b.n	800439e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe f9ab 	bl	80026e0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	; 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e291      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
 800439e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80043a2:	2202      	movs	r2, #2
 80043a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	fa93 f2a3 	rbit	r2, r3
 80043b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043ba:	2202      	movs	r2, #2
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	fa93 f2a3 	rbit	r2, r3
 80043c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80043cc:	601a      	str	r2, [r3, #0]
  return result;
 80043ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80043d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d109      	bne.n	80043fc <HAL_RCC_OscConfig+0x93c>
 80043e8:	4b01      	ldr	r3, [pc, #4]	; (80043f0 <HAL_RCC_OscConfig+0x930>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	e014      	b.n	8004418 <HAL_RCC_OscConfig+0x958>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	10908120 	.word	0x10908120
 80043f8:	40007000 	.word	0x40007000
 80043fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004400:	2202      	movs	r2, #2
 8004402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	fa93 f2a3 	rbit	r2, r3
 800440e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	4bbb      	ldr	r3, [pc, #748]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800441c:	2102      	movs	r1, #2
 800441e:	6011      	str	r1, [r2, #0]
 8004420:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	fa92 f1a2 	rbit	r1, r2
 800442a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800442e:	6011      	str	r1, [r2, #0]
  return result;
 8004430:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	fab2 f282 	clz	r2, r2
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f002 021f 	and.w	r2, r2, #31
 8004446:	2101      	movs	r1, #1
 8004448:	fa01 f202 	lsl.w	r2, r1, r2
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d099      	beq.n	8004386 <HAL_RCC_OscConfig+0x8c6>
 8004452:	e063      	b.n	800451c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004454:	f7fe f944 	bl	80026e0 <HAL_GetTick>
 8004458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445c:	e00b      	b.n	8004476 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fe f93f 	bl	80026e0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	; 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e225      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
 8004476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800447a:	2202      	movs	r2, #2
 800447c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	fa93 f2a3 	rbit	r2, r3
 8004488:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004492:	2202      	movs	r2, #2
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	fa93 f2a3 	rbit	r2, r3
 80044a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80044a4:	601a      	str	r2, [r3, #0]
  return result;
 80044a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80044aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ac:	fab3 f383 	clz	r3, r3
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f043 0302 	orr.w	r3, r3, #2
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d102      	bne.n	80044c6 <HAL_RCC_OscConfig+0xa06>
 80044c0:	4b90      	ldr	r3, [pc, #576]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	e00d      	b.n	80044e2 <HAL_RCC_OscConfig+0xa22>
 80044c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044ca:	2202      	movs	r2, #2
 80044cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	fa93 f2a3 	rbit	r2, r3
 80044d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	4b89      	ldr	r3, [pc, #548]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80044e6:	2102      	movs	r1, #2
 80044e8:	6011      	str	r1, [r2, #0]
 80044ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	fa92 f1a2 	rbit	r1, r2
 80044f4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80044f8:	6011      	str	r1, [r2, #0]
  return result;
 80044fa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	fab2 f282 	clz	r2, r2
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	f002 021f 	and.w	r2, r2, #31
 8004510:	2101      	movs	r1, #1
 8004512:	fa01 f202 	lsl.w	r2, r1, r2
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1a0      	bne.n	800445e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800451c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004520:	2b01      	cmp	r3, #1
 8004522:	d105      	bne.n	8004530 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004524:	4b77      	ldr	r3, [pc, #476]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4a76      	ldr	r2, [pc, #472]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 800452a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004530:	1d3b      	adds	r3, r7, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 81c2 	beq.w	80048c0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800453c:	4b71      	ldr	r3, [pc, #452]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b08      	cmp	r3, #8
 8004546:	f000 819c 	beq.w	8004882 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	2b02      	cmp	r3, #2
 8004552:	f040 8114 	bne.w	800477e <HAL_RCC_OscConfig+0xcbe>
 8004556:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800455a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800455e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fa93 f2a3 	rbit	r2, r3
 800456a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800456e:	601a      	str	r2, [r3, #0]
  return result;
 8004570:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004574:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004580:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fe f8a8 	bl	80026e0 <HAL_GetTick>
 8004590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004594:	e009      	b.n	80045aa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004596:	f7fe f8a3 	bl	80026e0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e18b      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
 80045aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045c2:	601a      	str	r2, [r3, #0]
  return result;
 80045c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d102      	bne.n	80045e4 <HAL_RCC_OscConfig+0xb24>
 80045de:	4b49      	ldr	r3, [pc, #292]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	e01b      	b.n	800461c <HAL_RCC_OscConfig+0xb5c>
 80045e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	fa93 f2a3 	rbit	r2, r3
 80045f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	fa93 f2a3 	rbit	r2, r3
 8004612:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	4b3a      	ldr	r3, [pc, #232]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004620:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004624:	6011      	str	r1, [r2, #0]
 8004626:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	fa92 f1a2 	rbit	r1, r2
 8004630:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004634:	6011      	str	r1, [r2, #0]
  return result;
 8004636:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	fab2 f282 	clz	r2, r2
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	f042 0220 	orr.w	r2, r2, #32
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f002 021f 	and.w	r2, r2, #31
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f202 	lsl.w	r2, r1, r2
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d19e      	bne.n	8004596 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004658:	4b2a      	ldr	r3, [pc, #168]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	430b      	orrs	r3, r1
 800466e:	4925      	ldr	r1, [pc, #148]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800467c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fa93 f2a3 	rbit	r2, r3
 8004688:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800468c:	601a      	str	r2, [r3, #0]
  return result;
 800468e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004692:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800469e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	461a      	mov	r2, r3
 80046a6:	2301      	movs	r3, #1
 80046a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fe f819 	bl	80026e0 <HAL_GetTick>
 80046ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b2:	e009      	b.n	80046c8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe f814 	bl	80026e0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0fc      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
 80046c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	fa93 f2a3 	rbit	r2, r3
 80046dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046e0:	601a      	str	r2, [r3, #0]
  return result;
 80046e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <HAL_RCC_OscConfig+0xc48>
 80046fc:	4b01      	ldr	r3, [pc, #4]	; (8004704 <HAL_RCC_OscConfig+0xc44>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	e01e      	b.n	8004740 <HAL_RCC_OscConfig+0xc80>
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000
 8004708:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800470c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	fa93 f2a3 	rbit	r2, r3
 800471c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	fa93 f2a3 	rbit	r2, r3
 8004736:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	4b63      	ldr	r3, [pc, #396]	; (80048cc <HAL_RCC_OscConfig+0xe0c>)
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004744:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004748:	6011      	str	r1, [r2, #0]
 800474a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	fa92 f1a2 	rbit	r1, r2
 8004754:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004758:	6011      	str	r1, [r2, #0]
  return result;
 800475a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	fab2 f282 	clz	r2, r2
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	f042 0220 	orr.w	r2, r2, #32
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	f002 021f 	and.w	r2, r2, #31
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f202 	lsl.w	r2, r1, r2
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d09b      	beq.n	80046b4 <HAL_RCC_OscConfig+0xbf4>
 800477c:	e0a0      	b.n	80048c0 <HAL_RCC_OscConfig+0xe00>
 800477e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004782:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	fa93 f2a3 	rbit	r2, r3
 8004792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004796:	601a      	str	r2, [r3, #0]
  return result;
 8004798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800479c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	461a      	mov	r2, r3
 80047b0:	2300      	movs	r3, #0
 80047b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fd ff94 	bl	80026e0 <HAL_GetTick>
 80047b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047bc:	e009      	b.n	80047d2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047be:	f7fd ff8f 	bl	80026e0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e077      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
 80047d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	fa93 f2a3 	rbit	r2, r3
 80047e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ea:	601a      	str	r2, [r3, #0]
  return result;
 80047ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d102      	bne.n	800480c <HAL_RCC_OscConfig+0xd4c>
 8004806:	4b31      	ldr	r3, [pc, #196]	; (80048cc <HAL_RCC_OscConfig+0xe0c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	e01b      	b.n	8004844 <HAL_RCC_OscConfig+0xd84>
 800480c:	f107 0320 	add.w	r3, r7, #32
 8004810:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	f107 0320 	add.w	r3, r7, #32
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fa93 f2a3 	rbit	r2, r3
 8004820:	f107 031c 	add.w	r3, r7, #28
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f107 0318 	add.w	r3, r7, #24
 800482a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f107 0318 	add.w	r3, r7, #24
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	fa93 f2a3 	rbit	r2, r3
 800483a:	f107 0314 	add.w	r3, r7, #20
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	4b22      	ldr	r3, [pc, #136]	; (80048cc <HAL_RCC_OscConfig+0xe0c>)
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f107 0210 	add.w	r2, r7, #16
 8004848:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800484c:	6011      	str	r1, [r2, #0]
 800484e:	f107 0210 	add.w	r2, r7, #16
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	fa92 f1a2 	rbit	r1, r2
 8004858:	f107 020c 	add.w	r2, r7, #12
 800485c:	6011      	str	r1, [r2, #0]
  return result;
 800485e:	f107 020c 	add.w	r2, r7, #12
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	fab2 f282 	clz	r2, r2
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	f042 0220 	orr.w	r2, r2, #32
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	f002 021f 	and.w	r2, r2, #31
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f202 	lsl.w	r2, r1, r2
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d19e      	bne.n	80047be <HAL_RCC_OscConfig+0xcfe>
 8004880:	e01e      	b.n	80048c0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004882:	1d3b      	adds	r3, r7, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e018      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <HAL_RCC_OscConfig+0xe0c>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004898:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800489c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048a0:	1d3b      	adds	r3, r7, #4
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d108      	bne.n	80048bc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b09e      	sub	sp, #120	; 0x78
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e162      	b.n	8004bae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e8:	4b90      	ldr	r3, [pc, #576]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d910      	bls.n	8004918 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b8d      	ldr	r3, [pc, #564]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 0207 	bic.w	r2, r3, #7
 80048fe:	498b      	ldr	r1, [pc, #556]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b89      	ldr	r3, [pc, #548]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e14a      	b.n	8004bae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004924:	4b82      	ldr	r3, [pc, #520]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	497f      	ldr	r1, [pc, #508]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004932:	4313      	orrs	r3, r2
 8004934:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80dc 	beq.w	8004afc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d13c      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xf6>
 800494c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004950:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004954:	fa93 f3a3 	rbit	r3, r3
 8004958:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800495a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d102      	bne.n	8004976 <HAL_RCC_ClockConfig+0xa6>
 8004970:	4b6f      	ldr	r3, [pc, #444]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	e00f      	b.n	8004996 <HAL_RCC_ClockConfig+0xc6>
 8004976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800497a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	667b      	str	r3, [r7, #100]	; 0x64
 8004984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004988:	663b      	str	r3, [r7, #96]	; 0x60
 800498a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800498c:	fa93 f3a3 	rbit	r3, r3
 8004990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004992:	4b67      	ldr	r3, [pc, #412]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800499a:	65ba      	str	r2, [r7, #88]	; 0x58
 800499c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800499e:	fa92 f2a2 	rbit	r2, r2
 80049a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80049a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049a6:	fab2 f282 	clz	r2, r2
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	f042 0220 	orr.w	r2, r2, #32
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	f002 021f 	and.w	r2, r2, #31
 80049b6:	2101      	movs	r1, #1
 80049b8:	fa01 f202 	lsl.w	r2, r1, r2
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d17b      	bne.n	8004aba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0f3      	b.n	8004bae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d13c      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x178>
 80049ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80049dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d102      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x128>
 80049f2:	4b4f      	ldr	r3, [pc, #316]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	e00f      	b.n	8004a18 <HAL_RCC_ClockConfig+0x148>
 80049f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a00:	fa93 f3a3 	rbit	r3, r3
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
 8004a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a14:	4b46      	ldr	r3, [pc, #280]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a20:	fa92 f2a2 	rbit	r2, r2
 8004a24:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a28:	fab2 f282 	clz	r2, r2
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	f042 0220 	orr.w	r2, r2, #32
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	f002 021f 	and.w	r2, r2, #31
 8004a38:	2101      	movs	r1, #1
 8004a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d13a      	bne.n	8004aba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0b2      	b.n	8004bae <HAL_RCC_ClockConfig+0x2de>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	fa93 f3a3 	rbit	r3, r3
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d102      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x1a0>
 8004a6a:	4b31      	ldr	r3, [pc, #196]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	e00d      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1bc>
 8004a70:	2302      	movs	r3, #2
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	623b      	str	r3, [r7, #32]
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	61ba      	str	r2, [r7, #24]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	fa92 f2a2 	rbit	r2, r2
 8004a96:	617a      	str	r2, [r7, #20]
  return result;
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	fab2 f282 	clz	r2, r2
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	f042 0220 	orr.w	r2, r2, #32
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	f002 021f 	and.w	r2, r2, #31
 8004aaa:	2101      	movs	r1, #1
 8004aac:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e079      	b.n	8004bae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aba:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f023 0203 	bic.w	r2, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	491a      	ldr	r1, [pc, #104]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004acc:	f7fd fe08 	bl	80026e0 <HAL_GetTick>
 8004ad0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	e00a      	b.n	8004aea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad4:	f7fd fe04 	bl	80026e0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e061      	b.n	8004bae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 020c 	and.w	r2, r3, #12
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d1eb      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d214      	bcs.n	8004b34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 0207 	bic.w	r2, r3, #7
 8004b12:	4906      	ldr	r1, [pc, #24]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e040      	b.n	8004bae <HAL_RCC_ClockConfig+0x2de>
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	491a      	ldr	r1, [pc, #104]	; (8004bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5e:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4912      	ldr	r1, [pc, #72]	; (8004bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b72:	f000 f829 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8004b76:	4601      	mov	r1, r0
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b80:	22f0      	movs	r2, #240	; 0xf0
 8004b82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	fa92 f2a2 	rbit	r2, r2
 8004b8a:	60fa      	str	r2, [r7, #12]
  return result;
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	fab2 f282 	clz	r2, r2
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	40d3      	lsrs	r3, r2
 8004b96:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x2ec>)
 8004b98:	5cd3      	ldrb	r3, [r2, r3]
 8004b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b9e:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <HAL_RCC_ClockConfig+0x2f0>)
 8004ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <HAL_RCC_ClockConfig+0x2f4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fd fd56 	bl	8002658 <HAL_InitTick>
  
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3778      	adds	r7, #120	; 0x78
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	0800ccd0 	.word	0x0800ccd0
 8004bc0:	20000004 	.word	0x20000004
 8004bc4:	20000008 	.word	0x20000008

08004bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b08b      	sub	sp, #44	; 0x2c
 8004bcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d002      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_GetSysClockFreq+0x36>
 8004bf6:	e03c      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bf8:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bfa:	623b      	str	r3, [r7, #32]
      break;
 8004bfc:	e03c      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	fa92 f2a2 	rbit	r2, r2
 8004c10:	607a      	str	r2, [r7, #4]
  return result;
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	fab2 f282 	clz	r2, r2
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	40d3      	lsrs	r3, r2
 8004c1c:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c22:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	220f      	movs	r2, #15
 8004c2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	fa92 f2a2 	rbit	r2, r2
 8004c34:	60fa      	str	r2, [r7, #12]
  return result;
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	fab2 f282 	clz	r2, r2
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	40d3      	lsrs	r3, r2
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c50:	4a0e      	ldr	r2, [pc, #56]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	e004      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	623b      	str	r3, [r7, #32]
      break;
 8004c70:	e002      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c74:	623b      	str	r3, [r7, #32]
      break;
 8004c76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c78:	6a3b      	ldr	r3, [r7, #32]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	372c      	adds	r7, #44	; 0x2c
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	007a1200 	.word	0x007a1200
 8004c90:	0800cce8 	.word	0x0800cce8
 8004c94:	0800ccf8 	.word	0x0800ccf8
 8004c98:	003d0900 	.word	0x003d0900

08004c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000004 	.word	0x20000004

08004cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cba:	f7ff ffef 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cc8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ccc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	fa92 f2a2 	rbit	r2, r2
 8004cd4:	603a      	str	r2, [r7, #0]
  return result;
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	fab2 f282 	clz	r2, r2
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	40d3      	lsrs	r3, r2
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ce2:	5cd3      	ldrb	r3, [r2, r3]
 8004ce4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800cce0 	.word	0x0800cce0

08004cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004cfe:	f7ff ffcd 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004d02:	4601      	mov	r1, r0
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d0c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004d10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	fa92 f2a2 	rbit	r2, r2
 8004d18:	603a      	str	r2, [r7, #0]
  return result;
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	fab2 f282 	clz	r2, r2
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	40d3      	lsrs	r3, r2
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d26:	5cd3      	ldrb	r3, [r2, r3]
 8004d28:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	0800cce0 	.word	0x0800cce0

08004d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b092      	sub	sp, #72	; 0x48
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80d4 	beq.w	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d60:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10e      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6c:	4b4b      	ldr	r3, [pc, #300]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	4a4a      	ldr	r2, [pc, #296]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d76:	61d3      	str	r3, [r2, #28]
 8004d78:	4b48      	ldr	r3, [pc, #288]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b45      	ldr	r3, [pc, #276]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d118      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d96:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a41      	ldr	r2, [pc, #260]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da2:	f7fd fc9d 	bl	80026e0 <HAL_GetTick>
 8004da6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	e008      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004daa:	f7fd fc99 	bl	80026e0 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b64      	cmp	r3, #100	; 0x64
 8004db6:	d901      	bls.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e169      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbc:	4b38      	ldr	r3, [pc, #224]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dc8:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8084 	beq.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d07c      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004de8:	4b2c      	ldr	r3, [pc, #176]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e02:	fab3 f383 	clz	r3, r3
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	461a      	mov	r2, r3
 8004e12:	2301      	movs	r3, #1
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	fa93 f3a3 	rbit	r3, r3
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e26:	fab3 f383 	clz	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	461a      	mov	r2, r3
 8004e36:	2300      	movs	r3, #0
 8004e38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e3a:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d04b      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4a:	f7fd fc49 	bl	80026e0 <HAL_GetTick>
 8004e4e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fd fc45 	bl	80026e0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e113      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
 8004e74:	2302      	movs	r3, #2
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	fa93 f3a3 	rbit	r3, r3
 8004e7e:	61fb      	str	r3, [r7, #28]
  return result;
 8004e80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f043 0302 	orr.w	r3, r3, #2
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d108      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004e96:	4b01      	ldr	r3, [pc, #4]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	e00d      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	10908100 	.word	0x10908100
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	4b78      	ldr	r3, [pc, #480]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2202      	movs	r2, #2
 8004eba:	613a      	str	r2, [r7, #16]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	fa92 f2a2 	rbit	r2, r2
 8004ec2:	60fa      	str	r2, [r7, #12]
  return result;
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	fab2 f282 	clz	r2, r2
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	f002 021f 	and.w	r2, r2, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0b7      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ee2:	4b6d      	ldr	r3, [pc, #436]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	496a      	ldr	r1, [pc, #424]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efc:	4b66      	ldr	r3, [pc, #408]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	4a65      	ldr	r2, [pc, #404]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f14:	4b60      	ldr	r3, [pc, #384]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	f023 0203 	bic.w	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	495d      	ldr	r1, [pc, #372]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f32:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4956      	ldr	r1, [pc, #344]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f50:	4b51      	ldr	r3, [pc, #324]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	494e      	ldr	r1, [pc, #312]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f023 0210 	bic.w	r2, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	4947      	ldr	r1, [pc, #284]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f8c:	4b42      	ldr	r3, [pc, #264]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	493f      	ldr	r1, [pc, #252]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004faa:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	f023 0220 	bic.w	r2, r3, #32
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	4938      	ldr	r1, [pc, #224]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fc8:	4b33      	ldr	r3, [pc, #204]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	4930      	ldr	r1, [pc, #192]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	4929      	ldr	r1, [pc, #164]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4921      	ldr	r1, [pc, #132]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005022:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	491a      	ldr	r1, [pc, #104]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005030:	4313      	orrs	r3, r2
 8005032:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005040:	4b15      	ldr	r3, [pc, #84]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	4912      	ldr	r1, [pc, #72]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d008      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800505e:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	490b      	ldr	r1, [pc, #44]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	4903      	ldr	r1, [pc, #12]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800508a:	4313      	orrs	r3, r2
 800508c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3748      	adds	r7, #72	; 0x48
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000

0800509c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e083      	b.n	80051b6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	7f5b      	ldrb	r3, [r3, #29]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd f8de 	bl	8002280 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	22ca      	movs	r2, #202	; 0xca
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2253      	movs	r2, #83	; 0x53
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 faa8 	bl	8005630 <RTC_EnterInitMode>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	22ff      	movs	r2, #255	; 0xff
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2204      	movs	r2, #4
 80050f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e05e      	b.n	80051b6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6899      	ldr	r1, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6919      	ldr	r1, [r3, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	041a      	lsls	r2, r3, #16
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005156:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10e      	bne.n	8005184 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa3a 	bl	80055e0 <HAL_RTC_WaitForSynchro>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	22ff      	movs	r2, #255	; 0xff
 8005178:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2204      	movs	r2, #4
 800517e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e018      	b.n	80051b6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005192:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	22ff      	movs	r2, #255	; 0xff
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051be:	b590      	push	{r4, r7, lr}
 80051c0:	b087      	sub	sp, #28
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	7f1b      	ldrb	r3, [r3, #28]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_RTC_SetTime+0x1c>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e0aa      	b.n	8005330 <HAL_RTC_SetTime+0x172>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2202      	movs	r2, #2
 80051e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d126      	bne.n	800523a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fa3f 	bl	8005688 <RTC_ByteToBcd2>
 800520a:	4603      	mov	r3, r0
 800520c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fa38 	bl	8005688 <RTC_ByteToBcd2>
 8005218:	4603      	mov	r3, r0
 800521a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800521c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	789b      	ldrb	r3, [r3, #2]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fa30 	bl	8005688 <RTC_ByteToBcd2>
 8005228:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800522a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	78db      	ldrb	r3, [r3, #3]
 8005232:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e018      	b.n	800526c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800525a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005260:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	78db      	ldrb	r3, [r3, #3]
 8005266:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	22ca      	movs	r2, #202	; 0xca
 8005272:	625a      	str	r2, [r3, #36]	; 0x24
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2253      	movs	r2, #83	; 0x53
 800527a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f9d7 	bl	8005630 <RTC_EnterInitMode>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	22ff      	movs	r2, #255	; 0xff
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2204      	movs	r2, #4
 8005294:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e047      	b.n	8005330 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80052aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80052ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6899      	ldr	r1, [r3, #8]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d111      	bne.n	800531a <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f972 	bl	80055e0 <HAL_RTC_WaitForSynchro>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	22ff      	movs	r2, #255	; 0xff
 8005308:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2204      	movs	r2, #4
 800530e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e00a      	b.n	8005330 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	22ff      	movs	r2, #255	; 0xff
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800532e:	2300      	movs	r3, #0
  }
}
 8005330:	4618      	mov	r0, r3
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	bd90      	pop	{r4, r7, pc}

08005338 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800536a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800536e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	0a1b      	lsrs	r3, r3, #8
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d11a      	bne.n	80053ea <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f983 	bl	80056c4 <RTC_Bcd2ToByte>
 80053be:	4603      	mov	r3, r0
 80053c0:	461a      	mov	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	785b      	ldrb	r3, [r3, #1]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f97a 	bl	80056c4 <RTC_Bcd2ToByte>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	789b      	ldrb	r3, [r3, #2]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 f971 	bl	80056c4 <RTC_Bcd2ToByte>
 80053e2:	4603      	mov	r3, r0
 80053e4:	461a      	mov	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	7f1b      	ldrb	r3, [r3, #28]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_RTC_SetDate+0x1c>
 800540c:	2302      	movs	r3, #2
 800540e:	e094      	b.n	800553a <HAL_RTC_SetDate+0x146>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2202      	movs	r2, #2
 800541a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10e      	bne.n	8005440 <HAL_RTC_SetDate+0x4c>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	b2db      	uxtb	r3, r3
 8005438:	330a      	adds	r3, #10
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11c      	bne.n	8005480 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	78db      	ldrb	r3, [r3, #3]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f91c 	bl	8005688 <RTC_ByteToBcd2>
 8005450:	4603      	mov	r3, r0
 8005452:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f915 	bl	8005688 <RTC_ByteToBcd2>
 800545e:	4603      	mov	r3, r0
 8005460:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005462:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	789b      	ldrb	r3, [r3, #2]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f90d 	bl	8005688 <RTC_ByteToBcd2>
 800546e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005470:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e00e      	b.n	800549e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	78db      	ldrb	r3, [r3, #3]
 8005484:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800548c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005492:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	22ca      	movs	r2, #202	; 0xca
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2253      	movs	r2, #83	; 0x53
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f8be 	bl	8005630 <RTC_EnterInitMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	22ff      	movs	r2, #255	; 0xff
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2204      	movs	r2, #4
 80054c6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e033      	b.n	800553a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d111      	bne.n	8005524 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f86d 	bl	80055e0 <HAL_RTC_WaitForSynchro>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	22ff      	movs	r2, #255	; 0xff
 8005512:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2204      	movs	r2, #4
 8005518:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e00a      	b.n	800553a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	22ff      	movs	r2, #255	; 0xff
 800552a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005538:	2300      	movs	r3, #0
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd90      	pop	{r4, r7, pc}

08005542 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800555c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005560:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	0c1b      	lsrs	r3, r3, #16
 8005566:	b2da      	uxtb	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	b2da      	uxtb	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	0b5b      	lsrs	r3, r3, #13
 800558e:	b2db      	uxtb	r3, r3
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	b2da      	uxtb	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d11a      	bne.n	80055d6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	78db      	ldrb	r3, [r3, #3]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 f88d 	bl	80056c4 <RTC_Bcd2ToByte>
 80055aa:	4603      	mov	r3, r0
 80055ac:	461a      	mov	r2, r3
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f884 	bl	80056c4 <RTC_Bcd2ToByte>
 80055bc:	4603      	mov	r3, r0
 80055be:	461a      	mov	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	789b      	ldrb	r3, [r3, #2]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 f87b 	bl	80056c4 <RTC_Bcd2ToByte>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055fa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80055fc:	f7fd f870 	bl	80026e0 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005602:	e009      	b.n	8005618 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005604:	f7fd f86c 	bl	80026e0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005612:	d901      	bls.n	8005618 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e007      	b.n	8005628 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0ee      	beq.n	8005604 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d119      	bne.n	800567e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f04f 32ff 	mov.w	r2, #4294967295
 8005652:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005654:	f7fd f844 	bl	80026e0 <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800565a:	e009      	b.n	8005670 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800565c:	f7fd f840 	bl	80026e0 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800566a:	d901      	bls.n	8005670 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e007      	b.n	8005680 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ee      	beq.n	800565c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005696:	e005      	b.n	80056a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3301      	adds	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	3b0a      	subs	r3, #10
 80056a2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	2b09      	cmp	r3, #9
 80056a8:	d8f6      	bhi.n	8005698 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b2db      	uxtb	r3, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	b2db      	uxtb	r3, r3
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3350      	adds	r3, #80	; 0x50
 8005716:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	601a      	str	r2, [r3, #0]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3350      	adds	r3, #80	; 0x50
 8005748:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e09d      	b.n	80058b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d108      	bne.n	8005790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005786:	d009      	beq.n	800579c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	61da      	str	r2, [r3, #28]
 800578e:	e005      	b.n	800579c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc fd88 	bl	80022cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057dc:	d902      	bls.n	80057e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	e002      	b.n	80057ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80057f2:	d007      	beq.n	8005804 <HAL_SPI_Init+0xa0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005846:	ea42 0103 	orr.w	r1, r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	0c1b      	lsrs	r3, r3, #16
 8005860:	f003 0204 	and.w	r2, r3, #4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005880:	ea42 0103 	orr.w	r1, r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b088      	sub	sp, #32
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_SPI_Transmit+0x22>
 80058d8:	2302      	movs	r3, #2
 80058da:	e158      	b.n	8005b8e <HAL_SPI_Transmit+0x2d4>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058e4:	f7fc fefc 	bl	80026e0 <HAL_GetTick>
 80058e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d002      	beq.n	8005900 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058fa:	2302      	movs	r3, #2
 80058fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058fe:	e13d      	b.n	8005b7c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_SPI_Transmit+0x52>
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005910:	e134      	b.n	8005b7c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2203      	movs	r2, #3
 8005916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	88fa      	ldrh	r2, [r7, #6]
 8005930:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595c:	d10f      	bne.n	800597e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800597c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d007      	beq.n	800599c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800599a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059a4:	d94b      	bls.n	8005a3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_SPI_Transmit+0xfa>
 80059ae:	8afb      	ldrh	r3, [r7, #22]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d13e      	bne.n	8005a32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	1c9a      	adds	r2, r3, #2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059d8:	e02b      	b.n	8005a32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d112      	bne.n	8005a0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	881a      	ldrh	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	1c9a      	adds	r2, r3, #2
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a0c:	e011      	b.n	8005a32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a0e:	f7fc fe67 	bl	80026e0 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d803      	bhi.n	8005a26 <HAL_SPI_Transmit+0x16c>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_Transmit+0x172>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a30:	e0a4      	b.n	8005b7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ce      	bne.n	80059da <HAL_SPI_Transmit+0x120>
 8005a3c:	e07c      	b.n	8005b38 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_Transmit+0x192>
 8005a46:	8afb      	ldrh	r3, [r7, #22]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d170      	bne.n	8005b2e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d912      	bls.n	8005a7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	881a      	ldrh	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	1c9a      	adds	r2, r3, #2
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b02      	subs	r3, #2
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a7a:	e058      	b.n	8005b2e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005aa2:	e044      	b.n	8005b2e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d12b      	bne.n	8005b0a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d912      	bls.n	8005ae2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b02      	subs	r3, #2
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae0:	e025      	b.n	8005b2e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b08:	e011      	b.n	8005b2e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b0a:	f7fc fde9 	bl	80026e0 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d803      	bhi.n	8005b22 <HAL_SPI_Transmit+0x268>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b20:	d102      	bne.n	8005b28 <HAL_SPI_Transmit+0x26e>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b2c:	e026      	b.n	8005b7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1b5      	bne.n	8005aa4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fb5b 	bl	80061f8 <SPI_EndRxTxTransaction>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b56:	2300      	movs	r3, #0
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e000      	b.n	8005b7c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08a      	sub	sp, #40	; 0x28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_SPI_TransmitReceive+0x26>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e1fb      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x41e>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc4:	f7fc fd8c 	bl	80026e0 <HAL_GetTick>
 8005bc8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bd0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005bd8:	887b      	ldrh	r3, [r7, #2]
 8005bda:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005be0:	7efb      	ldrb	r3, [r7, #27]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d00e      	beq.n	8005c04 <HAL_SPI_TransmitReceive+0x6e>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bec:	d106      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x66>
 8005bf6:	7efb      	ldrb	r3, [r7, #27]
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d003      	beq.n	8005c04 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c02:	e1cd      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x80>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x80>
 8005c10:	887b      	ldrh	r3, [r7, #2]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c1c:	e1c0      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d003      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2205      	movs	r2, #5
 8005c2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	887a      	ldrh	r2, [r7, #2]
 8005c42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	887a      	ldrh	r2, [r7, #2]
 8005c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	887a      	ldrh	r2, [r7, #2]
 8005c58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c74:	d802      	bhi.n	8005c7c <HAL_SPI_TransmitReceive+0xe6>
 8005c76:	8a3b      	ldrh	r3, [r7, #16]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d908      	bls.n	8005c8e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c8a:	605a      	str	r2, [r3, #4]
 8005c8c:	e007      	b.n	8005c9e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c9c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d007      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc4:	d97c      	bls.n	8005dc0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_SPI_TransmitReceive+0x13e>
 8005cce:	8a7b      	ldrh	r3, [r7, #18]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d169      	bne.n	8005da8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	881a      	ldrh	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	1c9a      	adds	r2, r3, #2
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf8:	e056      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d11b      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x1aa>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x1aa>
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d113      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	881a      	ldrh	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d11c      	bne.n	8005d88 <HAL_SPI_TransmitReceive+0x1f2>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d016      	beq.n	8005d88 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	b292      	uxth	r2, r2
 8005d66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	1c9a      	adds	r2, r3, #2
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d84:	2301      	movs	r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d88:	f7fc fcaa 	bl	80026e0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d807      	bhi.n	8005da8 <HAL_SPI_TransmitReceive+0x212>
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d003      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005da6:	e0fb      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1a3      	bne.n	8005cfa <HAL_SPI_TransmitReceive+0x164>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d19d      	bne.n	8005cfa <HAL_SPI_TransmitReceive+0x164>
 8005dbe:	e0df      	b.n	8005f80 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_SPI_TransmitReceive+0x23a>
 8005dc8:	8a7b      	ldrh	r3, [r7, #18]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	f040 80cb 	bne.w	8005f66 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d912      	bls.n	8005e00 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	881a      	ldrh	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b02      	subs	r3, #2
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dfe:	e0b2      	b.n	8005f66 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e26:	e09e      	b.n	8005f66 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d134      	bne.n	8005ea0 <HAL_SPI_TransmitReceive+0x30a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02f      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x30a>
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d12c      	bne.n	8005ea0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d912      	bls.n	8005e76 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	881a      	ldrh	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	1c9a      	adds	r2, r3, #2
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b02      	subs	r3, #2
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e74:	e012      	b.n	8005e9c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	330c      	adds	r3, #12
 8005e80:	7812      	ldrb	r2, [r2, #0]
 8005e82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d148      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x3aa>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d042      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d923      	bls.n	8005f0e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	b292      	uxth	r2, r2
 8005ed2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b02      	subs	r3, #2
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d81f      	bhi.n	8005f3c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f0a:	605a      	str	r2, [r3, #4]
 8005f0c:	e016      	b.n	8005f3c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f103 020c 	add.w	r2, r3, #12
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f40:	f7fc fbce 	bl	80026e0 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d803      	bhi.n	8005f58 <HAL_SPI_TransmitReceive+0x3c2>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d102      	bne.n	8005f5e <HAL_SPI_TransmitReceive+0x3c8>
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d103      	bne.n	8005f66 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f64:	e01c      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f47f af5b 	bne.w	8005e28 <HAL_SPI_TransmitReceive+0x292>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f47f af54 	bne.w	8005e28 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f937 	bl	80061f8 <SPI_EndRxTxTransaction>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d006      	beq.n	8005f9e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	661a      	str	r2, [r3, #96]	; 0x60
 8005f9c:	e000      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005f9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	; 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fcc:	f7fc fb88 	bl	80026e0 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	4413      	add	r3, r2
 8005fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fdc:	f7fc fb80 	bl	80026e0 <HAL_GetTick>
 8005fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fe2:	4b39      	ldr	r3, [pc, #228]	; (80060c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	015b      	lsls	r3, r3, #5
 8005fe8:	0d1b      	lsrs	r3, r3, #20
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	fb02 f303 	mul.w	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ff2:	e054      	b.n	800609e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d050      	beq.n	800609e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ffc:	f7fc fb70 	bl	80026e0 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	429a      	cmp	r2, r3
 800600a:	d902      	bls.n	8006012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d13d      	bne.n	800608e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800602a:	d111      	bne.n	8006050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006034:	d004      	beq.n	8006040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603e:	d107      	bne.n	8006050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006058:	d10f      	bne.n	800607a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e017      	b.n	80060be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3b01      	subs	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	bf0c      	ite	eq
 80060ae:	2301      	moveq	r3, #1
 80060b0:	2300      	movne	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d19b      	bne.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000004 	.word	0x20000004

080060cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060de:	f7fc faff 	bl	80026e0 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	4413      	add	r3, r2
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80060ee:	f7fc faf7 	bl	80026e0 <HAL_GetTick>
 80060f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060fc:	4b3d      	ldr	r3, [pc, #244]	; (80061f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	00da      	lsls	r2, r3, #3
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	0d1b      	lsrs	r3, r3, #20
 800610c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006114:	e060      	b.n	80061d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800611c:	d107      	bne.n	800612e <SPI_WaitFifoStateUntilTimeout+0x62>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800612c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d050      	beq.n	80061d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006136:	f7fc fad3 	bl	80026e0 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	429a      	cmp	r2, r3
 8006144:	d902      	bls.n	800614c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d13d      	bne.n	80061c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800615a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006164:	d111      	bne.n	800618a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616e:	d004      	beq.n	800617a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006178:	d107      	bne.n	800618a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006188:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006192:	d10f      	bne.n	80061b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e010      	b.n	80061ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4013      	ands	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d196      	bne.n	8006116 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3728      	adds	r7, #40	; 0x28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000004 	.word	0x20000004

080061f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2200      	movs	r2, #0
 800620c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff ff5b 	bl	80060cc <SPI_WaitFifoStateUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006220:	f043 0220 	orr.w	r2, r3, #32
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e027      	b.n	800627c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	2180      	movs	r1, #128	; 0x80
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fec0 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e014      	b.n	800627c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff ff34 	bl	80060cc <SPI_WaitFifoStateUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e000      	b.n	800627c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e040      	b.n	8006318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fc f886 	bl	80023b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2224      	movs	r2, #36	; 0x24
 80062b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fc0c 	bl	8006ae0 <UART_SetConfig>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e022      	b.n	8006318 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fdd4 	bl	8006e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fe5b 	bl	8006fcc <UART_CheckIdleState>
 8006316:	4603      	mov	r3, r0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	; 0x28
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006334:	2b20      	cmp	r3, #32
 8006336:	f040 8082 	bne.w	800643e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_UART_Transmit+0x26>
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e07a      	b.n	8006440 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_UART_Transmit+0x38>
 8006354:	2302      	movs	r3, #2
 8006356:	e073      	b.n	8006440 <HAL_UART_Transmit+0x120>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2221      	movs	r2, #33	; 0x21
 800636c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800636e:	f7fc f9b7 	bl	80026e0 <HAL_GetTick>
 8006372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	88fa      	ldrh	r2, [r7, #6]
 8006380:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638c:	d108      	bne.n	80063a0 <HAL_UART_Transmit+0x80>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	e003      	b.n	80063a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063b0:	e02d      	b.n	800640e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2200      	movs	r2, #0
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fe4e 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e039      	b.n	8006440 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	881a      	ldrh	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063de:	b292      	uxth	r2, r2
 80063e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	3302      	adds	r3, #2
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e008      	b.n	80063fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	b292      	uxth	r2, r2
 80063f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	3301      	adds	r3, #1
 80063fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1cb      	bne.n	80063b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	2140      	movs	r1, #64	; 0x40
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fe1a 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e005      	b.n	8006440 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e000      	b.n	8006440 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800643e:	2302      	movs	r3, #2
  }
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645a:	2b20      	cmp	r3, #32
 800645c:	d13d      	bne.n	80064da <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_Receive_IT+0x22>
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e036      	b.n	80064dc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_UART_Receive_IT+0x34>
 8006478:	2302      	movs	r3, #2
 800647a:	e02f      	b.n	80064dc <HAL_UART_Receive_IT+0x94>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d018      	beq.n	80064ca <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	613b      	str	r3, [r7, #16]
   return(result);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	623b      	str	r3, [r7, #32]
 80064b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	69f9      	ldr	r1, [r7, #28]
 80064bc:	6a3a      	ldr	r2, [r7, #32]
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e6      	bne.n	8006498 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	461a      	mov	r2, r3
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fe89 	bl	80071e8 <UART_Start_Receive_IT>
 80064d6:	4603      	mov	r3, r0
 80064d8:	e000      	b.n	80064dc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064da:	2302      	movs	r3, #2
  }
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3728      	adds	r7, #40	; 0x28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b0ba      	sub	sp, #232	; 0xe8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800650a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800650e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006512:	4013      	ands	r3, r2
 8006514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d115      	bne.n	800654c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 82a3 	beq.w	8006a88 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
      }
      return;
 800654a:	e29d      	b.n	8006a88 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800654c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8117 	beq.w	8006784 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006562:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006566:	4b85      	ldr	r3, [pc, #532]	; (800677c <HAL_UART_IRQHandler+0x298>)
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 810a 	beq.w	8006784 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d011      	beq.n	80065a0 <HAL_UART_IRQHandler+0xbc>
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2201      	movs	r2, #1
 800658e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006596:	f043 0201 	orr.w	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d011      	beq.n	80065d0 <HAL_UART_IRQHandler+0xec>
 80065ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2202      	movs	r2, #2
 80065be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c6:	f043 0204 	orr.w	r2, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d011      	beq.n	8006600 <HAL_UART_IRQHandler+0x11c>
 80065dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2204      	movs	r2, #4
 80065ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f6:	f043 0202 	orr.w	r2, r3, #2
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d017      	beq.n	800663c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2208      	movs	r2, #8
 800662a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006632:	f043 0208 	orr.w	r2, r3, #8
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006644:	2b00      	cmp	r3, #0
 8006646:	d012      	beq.n	800666e <HAL_UART_IRQHandler+0x18a>
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00c      	beq.n	800666e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8209 	beq.w	8006a8c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d005      	beq.n	80066c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d04f      	beq.n	8006766 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fe26 	bl	8007318 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b40      	cmp	r3, #64	; 0x40
 80066d8:	d141      	bne.n	800675e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800670a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800671e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1d9      	bne.n	80066da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672a:	2b00      	cmp	r3, #0
 800672c:	d013      	beq.n	8006756 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	4a13      	ldr	r2, [pc, #76]	; (8006780 <HAL_UART_IRQHandler+0x29c>)
 8006734:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	4618      	mov	r0, r3
 800673c:	f7fc ff96 	bl	800366c <HAL_DMA_Abort_IT>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d017      	beq.n	8006776 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	e00f      	b.n	8006776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9ac 	bl	8006ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	e00b      	b.n	8006776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9a8 	bl	8006ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	e007      	b.n	8006776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9a4 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006774:	e18a      	b.n	8006a8c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006776:	bf00      	nop
    return;
 8006778:	e188      	b.n	8006a8c <HAL_UART_IRQHandler+0x5a8>
 800677a:	bf00      	nop
 800677c:	04000120 	.word	0x04000120
 8006780:	080073df 	.word	0x080073df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006788:	2b01      	cmp	r3, #1
 800678a:	f040 8143 	bne.w	8006a14 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 813c 	beq.w	8006a14 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8135 	beq.w	8006a14 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2210      	movs	r2, #16
 80067b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	f040 80b1 	bne.w	8006924 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 815c 	beq.w	8006a90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067e2:	429a      	cmp	r2, r3
 80067e4:	f080 8154 	bcs.w	8006a90 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b20      	cmp	r3, #32
 80067fa:	f000 8085 	beq.w	8006908 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800681a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800682c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006834:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1da      	bne.n	80067fe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3308      	adds	r3, #8
 800684e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800685a:	f023 0301 	bic.w	r3, r3, #1
 800685e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800686c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006870:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006874:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800687e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e1      	bne.n	8006848 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3308      	adds	r3, #8
 800688a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3308      	adds	r3, #8
 80068a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e3      	bne.n	8006884 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d8:	f023 0310 	bic.w	r3, r3, #16
 80068dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e4      	bne.n	80068c8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	4618      	mov	r0, r3
 8006904:	f7fc fe79 	bl	80035fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006914:	b29b      	uxth	r3, r3
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	b29b      	uxth	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f8d3 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006922:	e0b5      	b.n	8006a90 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006930:	b29b      	uxth	r3, r3
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 80a7 	beq.w	8006a94 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006946:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80a2 	beq.w	8006a94 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800695e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006972:	647b      	str	r3, [r7, #68]	; 0x44
 8006974:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e4      	bne.n	8006950 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	623b      	str	r3, [r7, #32]
   return(result);
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069aa:	633a      	str	r2, [r7, #48]	; 0x30
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e3      	bne.n	8006986 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 0310 	bic.w	r3, r3, #16
 80069e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	69b9      	ldr	r1, [r7, #24]
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e4      	bne.n	80069d0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f85b 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a12:	e03f      	b.n	8006a94 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00e      	beq.n	8006a3e <HAL_UART_IRQHandler+0x55a>
 8006a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fe6d 	bl	8007716 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a3c:	e02d      	b.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01c      	beq.n	8006a98 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
    }
    return;
 8006a66:	e017      	b.n	8006a98 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d012      	beq.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00c      	beq.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fcc2 	bl	800740a <UART_EndTransmit_IT>
    return;
 8006a86:	e008      	b.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006a88:	bf00      	nop
 8006a8a:	e006      	b.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8006a8c:	bf00      	nop
 8006a8e:	e004      	b.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006a90:	bf00      	nop
 8006a92:	e002      	b.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006a94:	bf00      	nop
 8006a96:	e000      	b.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8006a98:	bf00      	nop
  }

}
 8006a9a:	37e8      	adds	r7, #232	; 0xe8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b0e:	f023 030c 	bic.w	r3, r3, #12
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	6979      	ldr	r1, [r7, #20]
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4aae      	ldr	r2, [pc, #696]	; (8006e14 <UART_SetConfig+0x334>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d120      	bne.n	8006ba2 <UART_SetConfig+0xc2>
 8006b60:	4bad      	ldr	r3, [pc, #692]	; (8006e18 <UART_SetConfig+0x338>)
 8006b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d817      	bhi.n	8006b9c <UART_SetConfig+0xbc>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x94>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006b91 	.word	0x08006b91
 8006b7c:	08006b97 	.word	0x08006b97
 8006b80:	08006b8b 	.word	0x08006b8b
 8006b84:	2301      	movs	r3, #1
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e0b5      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e0b2      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006b90:	2304      	movs	r3, #4
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e0af      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006b96:	2308      	movs	r3, #8
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e0ac      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e0a9      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a9d      	ldr	r2, [pc, #628]	; (8006e1c <UART_SetConfig+0x33c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d124      	bne.n	8006bf6 <UART_SetConfig+0x116>
 8006bac:	4b9a      	ldr	r3, [pc, #616]	; (8006e18 <UART_SetConfig+0x338>)
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bb8:	d011      	beq.n	8006bde <UART_SetConfig+0xfe>
 8006bba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bbe:	d817      	bhi.n	8006bf0 <UART_SetConfig+0x110>
 8006bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bc4:	d011      	beq.n	8006bea <UART_SetConfig+0x10a>
 8006bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bca:	d811      	bhi.n	8006bf0 <UART_SetConfig+0x110>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <UART_SetConfig+0xf8>
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd4:	d006      	beq.n	8006be4 <UART_SetConfig+0x104>
 8006bd6:	e00b      	b.n	8006bf0 <UART_SetConfig+0x110>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e08b      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006bde:	2302      	movs	r3, #2
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e088      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006be4:	2304      	movs	r3, #4
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e085      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006bea:	2308      	movs	r3, #8
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e082      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e07f      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a89      	ldr	r2, [pc, #548]	; (8006e20 <UART_SetConfig+0x340>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d124      	bne.n	8006c4a <UART_SetConfig+0x16a>
 8006c00:	4b85      	ldr	r3, [pc, #532]	; (8006e18 <UART_SetConfig+0x338>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006c08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c0c:	d011      	beq.n	8006c32 <UART_SetConfig+0x152>
 8006c0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c12:	d817      	bhi.n	8006c44 <UART_SetConfig+0x164>
 8006c14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c18:	d011      	beq.n	8006c3e <UART_SetConfig+0x15e>
 8006c1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c1e:	d811      	bhi.n	8006c44 <UART_SetConfig+0x164>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <UART_SetConfig+0x14c>
 8006c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c28:	d006      	beq.n	8006c38 <UART_SetConfig+0x158>
 8006c2a:	e00b      	b.n	8006c44 <UART_SetConfig+0x164>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e061      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c32:	2302      	movs	r3, #2
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e05e      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e05b      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c3e:	2308      	movs	r3, #8
 8006c40:	77fb      	strb	r3, [r7, #31]
 8006c42:	e058      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c44:	2310      	movs	r3, #16
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e055      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a75      	ldr	r2, [pc, #468]	; (8006e24 <UART_SetConfig+0x344>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d124      	bne.n	8006c9e <UART_SetConfig+0x1be>
 8006c54:	4b70      	ldr	r3, [pc, #448]	; (8006e18 <UART_SetConfig+0x338>)
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c60:	d011      	beq.n	8006c86 <UART_SetConfig+0x1a6>
 8006c62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c66:	d817      	bhi.n	8006c98 <UART_SetConfig+0x1b8>
 8006c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c6c:	d011      	beq.n	8006c92 <UART_SetConfig+0x1b2>
 8006c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c72:	d811      	bhi.n	8006c98 <UART_SetConfig+0x1b8>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <UART_SetConfig+0x1a0>
 8006c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7c:	d006      	beq.n	8006c8c <UART_SetConfig+0x1ac>
 8006c7e:	e00b      	b.n	8006c98 <UART_SetConfig+0x1b8>
 8006c80:	2300      	movs	r3, #0
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e037      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c86:	2302      	movs	r3, #2
 8006c88:	77fb      	strb	r3, [r7, #31]
 8006c8a:	e034      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e031      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c92:	2308      	movs	r3, #8
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e02e      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e02b      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a61      	ldr	r2, [pc, #388]	; (8006e28 <UART_SetConfig+0x348>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d124      	bne.n	8006cf2 <UART_SetConfig+0x212>
 8006ca8:	4b5b      	ldr	r3, [pc, #364]	; (8006e18 <UART_SetConfig+0x338>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006cb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cb4:	d011      	beq.n	8006cda <UART_SetConfig+0x1fa>
 8006cb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cba:	d817      	bhi.n	8006cec <UART_SetConfig+0x20c>
 8006cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cc0:	d011      	beq.n	8006ce6 <UART_SetConfig+0x206>
 8006cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cc6:	d811      	bhi.n	8006cec <UART_SetConfig+0x20c>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <UART_SetConfig+0x1f4>
 8006ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cd0:	d006      	beq.n	8006ce0 <UART_SetConfig+0x200>
 8006cd2:	e00b      	b.n	8006cec <UART_SetConfig+0x20c>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e00d      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	77fb      	strb	r3, [r7, #31]
 8006cde:	e00a      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e007      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e004      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006cec:	2310      	movs	r3, #16
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e001      	b.n	8006cf6 <UART_SetConfig+0x216>
 8006cf2:	2310      	movs	r3, #16
 8006cf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cfe:	d15c      	bne.n	8006dba <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006d00:	7ffb      	ldrb	r3, [r7, #31]
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d827      	bhi.n	8006d56 <UART_SetConfig+0x276>
 8006d06:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <UART_SetConfig+0x22c>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d39 	.word	0x08006d39
 8006d14:	08006d41 	.word	0x08006d41
 8006d18:	08006d57 	.word	0x08006d57
 8006d1c:	08006d47 	.word	0x08006d47
 8006d20:	08006d57 	.word	0x08006d57
 8006d24:	08006d57 	.word	0x08006d57
 8006d28:	08006d57 	.word	0x08006d57
 8006d2c:	08006d4f 	.word	0x08006d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d30:	f7fd ffc0 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8006d34:	61b8      	str	r0, [r7, #24]
        break;
 8006d36:	e013      	b.n	8006d60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d38:	f7fd ffde 	bl	8004cf8 <HAL_RCC_GetPCLK2Freq>
 8006d3c:	61b8      	str	r0, [r7, #24]
        break;
 8006d3e:	e00f      	b.n	8006d60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d40:	4b3a      	ldr	r3, [pc, #232]	; (8006e2c <UART_SetConfig+0x34c>)
 8006d42:	61bb      	str	r3, [r7, #24]
        break;
 8006d44:	e00c      	b.n	8006d60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d46:	f7fd ff3f 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8006d4a:	61b8      	str	r0, [r7, #24]
        break;
 8006d4c:	e008      	b.n	8006d60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d52:	61bb      	str	r3, [r7, #24]
        break;
 8006d54:	e004      	b.n	8006d60 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 8085 	beq.w	8006e72 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	005a      	lsls	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	441a      	add	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b0f      	cmp	r3, #15
 8006d84:	d916      	bls.n	8006db4 <UART_SetConfig+0x2d4>
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8c:	d212      	bcs.n	8006db4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f023 030f 	bic.w	r3, r3, #15
 8006d96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	89fb      	ldrh	r3, [r7, #14]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	89fa      	ldrh	r2, [r7, #14]
 8006db0:	60da      	str	r2, [r3, #12]
 8006db2:	e05e      	b.n	8006e72 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	77bb      	strb	r3, [r7, #30]
 8006db8:	e05b      	b.n	8006e72 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dba:	7ffb      	ldrb	r3, [r7, #31]
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d837      	bhi.n	8006e30 <UART_SetConfig+0x350>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <UART_SetConfig+0x2e8>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006df5 	.word	0x08006df5
 8006dd0:	08006dfd 	.word	0x08006dfd
 8006dd4:	08006e31 	.word	0x08006e31
 8006dd8:	08006e03 	.word	0x08006e03
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006e31 	.word	0x08006e31
 8006de4:	08006e31 	.word	0x08006e31
 8006de8:	08006e0b 	.word	0x08006e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dec:	f7fd ff62 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8006df0:	61b8      	str	r0, [r7, #24]
        break;
 8006df2:	e022      	b.n	8006e3a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df4:	f7fd ff80 	bl	8004cf8 <HAL_RCC_GetPCLK2Freq>
 8006df8:	61b8      	str	r0, [r7, #24]
        break;
 8006dfa:	e01e      	b.n	8006e3a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <UART_SetConfig+0x34c>)
 8006dfe:	61bb      	str	r3, [r7, #24]
        break;
 8006e00:	e01b      	b.n	8006e3a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e02:	f7fd fee1 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8006e06:	61b8      	str	r0, [r7, #24]
        break;
 8006e08:	e017      	b.n	8006e3a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e0e:	61bb      	str	r3, [r7, #24]
        break;
 8006e10:	e013      	b.n	8006e3a <UART_SetConfig+0x35a>
 8006e12:	bf00      	nop
 8006e14:	40013800 	.word	0x40013800
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	40004400 	.word	0x40004400
 8006e20:	40004800 	.word	0x40004800
 8006e24:	40004c00 	.word	0x40004c00
 8006e28:	40005000 	.word	0x40005000
 8006e2c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	77bb      	strb	r3, [r7, #30]
        break;
 8006e38:	bf00      	nop
    }

    if (pclk != 0U)
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d018      	beq.n	8006e72 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	085a      	lsrs	r2, r3, #1
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	441a      	add	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b0f      	cmp	r3, #15
 8006e5a:	d908      	bls.n	8006e6e <UART_SetConfig+0x38e>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e62:	d204      	bcs.n	8006e6e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	60da      	str	r2, [r3, #12]
 8006e6c:	e001      	b.n	8006e72 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e7e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01a      	beq.n	8006f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f86:	d10a      	bne.n	8006f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fdc:	f7fb fb80 	bl	80026e0 <HAL_GetTick>
 8006fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d10e      	bne.n	800700e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f82d 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e023      	b.n	8007056 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b04      	cmp	r3, #4
 800701a:	d10e      	bne.n	800703a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800701c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f817 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e00d      	b.n	8007056 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b09c      	sub	sp, #112	; 0x70
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	603b      	str	r3, [r7, #0]
 800706a:	4613      	mov	r3, r2
 800706c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706e:	e0a5      	b.n	80071bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	f000 80a1 	beq.w	80071bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707a:	f7fb fb31 	bl	80026e0 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007086:	429a      	cmp	r2, r3
 8007088:	d302      	bcc.n	8007090 <UART_WaitOnFlagUntilTimeout+0x32>
 800708a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800708c:	2b00      	cmp	r3, #0
 800708e:	d13e      	bne.n	800710e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070a4:	667b      	str	r3, [r7, #100]	; 0x64
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e6      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	663b      	str	r3, [r7, #96]	; 0x60
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e5      	bne.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e067      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d04f      	beq.n	80071bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712a:	d147      	bne.n	80071bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007134:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800714a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
 8007156:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800715a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e6      	bne.n	8007136 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	613b      	str	r3, [r7, #16]
   return(result);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f023 0301 	bic.w	r3, r3, #1
 800717e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007188:	623a      	str	r2, [r7, #32]
 800718a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	69f9      	ldr	r1, [r7, #28]
 800718e:	6a3a      	ldr	r2, [r7, #32]
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	61bb      	str	r3, [r7, #24]
   return(result);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e010      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69da      	ldr	r2, [r3, #28]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	4013      	ands	r3, r2
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	bf0c      	ite	eq
 80071cc:	2301      	moveq	r3, #1
 80071ce:	2300      	movne	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	f43f af4a 	beq.w	8007070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3770      	adds	r7, #112	; 0x70
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b091      	sub	sp, #68	; 0x44
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	88fa      	ldrh	r2, [r7, #6]
 8007200:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721a:	d10e      	bne.n	800723a <UART_Start_Receive_IT+0x52>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <UART_Start_Receive_IT+0x48>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f240 12ff 	movw	r2, #511	; 0x1ff
 800722a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800722e:	e01a      	b.n	8007266 <UART_Start_Receive_IT+0x7e>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	22ff      	movs	r2, #255	; 0xff
 8007234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007238:	e015      	b.n	8007266 <UART_Start_Receive_IT+0x7e>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10d      	bne.n	800725e <UART_Start_Receive_IT+0x76>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d104      	bne.n	8007254 <UART_Start_Receive_IT+0x6c>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	22ff      	movs	r2, #255	; 0xff
 800724e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007252:	e008      	b.n	8007266 <UART_Start_Receive_IT+0x7e>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	227f      	movs	r2, #127	; 0x7f
 8007258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800725c:	e003      	b.n	8007266 <UART_Start_Receive_IT+0x7e>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2222      	movs	r2, #34	; 0x22
 8007272:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007294:	637a      	str	r2, [r7, #52]	; 0x34
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800729a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b0:	d107      	bne.n	80072c2 <UART_Start_Receive_IT+0xda>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d103      	bne.n	80072c2 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4a14      	ldr	r2, [pc, #80]	; (8007310 <UART_Start_Receive_IT+0x128>)
 80072be:	665a      	str	r2, [r3, #100]	; 0x64
 80072c0:	e002      	b.n	80072c8 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a13      	ldr	r2, [pc, #76]	; (8007314 <UART_Start_Receive_IT+0x12c>)
 80072c6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	613b      	str	r3, [r7, #16]
   return(result);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	623b      	str	r3, [r7, #32]
 80072f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	69f9      	ldr	r1, [r7, #28]
 80072f4:	6a3a      	ldr	r2, [r7, #32]
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e6      	bne.n	80072d0 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3744      	adds	r7, #68	; 0x44
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	080075bb 	.word	0x080075bb
 8007314:	0800745f 	.word	0x0800745f

08007318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b095      	sub	sp, #84	; 0x54
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733e:	643b      	str	r3, [r7, #64]	; 0x40
 8007340:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e6      	bne.n	8007320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	61fb      	str	r3, [r7, #28]
   return(result);
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	64bb      	str	r3, [r7, #72]	; 0x48
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738a:	2b01      	cmp	r3, #1
 800738c:	d118      	bne.n	80073c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	60bb      	str	r3, [r7, #8]
   return(result);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f023 0310 	bic.w	r3, r3, #16
 80073a2:	647b      	str	r3, [r7, #68]	; 0x44
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6979      	ldr	r1, [r7, #20]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80073d2:	bf00      	nop
 80073d4:	3754      	adds	r7, #84	; 0x54
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f7ff fb59 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6979      	ldr	r1, [r7, #20]
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	613b      	str	r3, [r7, #16]
   return(result);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e6      	bne.n	8007412 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fb25 	bl	8006aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007456:	bf00      	nop
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b096      	sub	sp, #88	; 0x58
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800746c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007474:	2b22      	cmp	r3, #34	; 0x22
 8007476:	f040 8094 	bne.w	80075a2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007480:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007484:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007488:	b2d9      	uxtb	r1, r3
 800748a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800748e:	b2da      	uxtb	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007494:	400a      	ands	r2, r1
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d177      	bne.n	80075b2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d6:	653b      	str	r3, [r7, #80]	; 0x50
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074e0:	647b      	str	r3, [r7, #68]	; 0x44
 80074e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e6      	bne.n	80074c2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3308      	adds	r3, #8
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	623b      	str	r3, [r7, #32]
   return(result);
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3308      	adds	r3, #8
 8007512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007514:	633a      	str	r2, [r7, #48]	; 0x30
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800751a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e5      	bne.n	80074f4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007538:	2b01      	cmp	r3, #1
 800753a:	d12e      	bne.n	800759a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0310 	bic.w	r3, r3, #16
 8007556:	64bb      	str	r3, [r7, #72]	; 0x48
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	69b9      	ldr	r1, [r7, #24]
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	617b      	str	r3, [r7, #20]
   return(result);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e6      	bne.n	8007542 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	f003 0310 	and.w	r3, r3, #16
 800757e:	2b10      	cmp	r3, #16
 8007580:	d103      	bne.n	800758a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2210      	movs	r2, #16
 8007588:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fa98 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007598:	e00b      	b.n	80075b2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7fa f818 	bl	80015d0 <HAL_UART_RxCpltCallback>
}
 80075a0:	e007      	b.n	80075b2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	699a      	ldr	r2, [r3, #24]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0208 	orr.w	r2, r2, #8
 80075b0:	619a      	str	r2, [r3, #24]
}
 80075b2:	bf00      	nop
 80075b4:	3758      	adds	r7, #88	; 0x58
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b096      	sub	sp, #88	; 0x58
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d0:	2b22      	cmp	r3, #34	; 0x22
 80075d2:	f040 8094 	bne.w	80076fe <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075e6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075ee:	4013      	ands	r3, r2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	1c9a      	adds	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d177      	bne.n	800770e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763c:	643b      	str	r3, [r7, #64]	; 0x40
 800763e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f023 0301 	bic.w	r3, r3, #1
 8007666:	64bb      	str	r3, [r7, #72]	; 0x48
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3308      	adds	r3, #8
 800766e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007670:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e5      	bne.n	8007650 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2220      	movs	r2, #32
 8007688:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007694:	2b01      	cmp	r3, #1
 8007696:	d12e      	bne.n	80076f6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	647b      	str	r3, [r7, #68]	; 0x44
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076bc:	61bb      	str	r3, [r7, #24]
 80076be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6979      	ldr	r1, [r7, #20]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	613b      	str	r3, [r7, #16]
   return(result);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e6      	bne.n	800769e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b10      	cmp	r3, #16
 80076dc:	d103      	bne.n	80076e6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2210      	movs	r2, #16
 80076e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff f9ea 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076f4:	e00b      	b.n	800770e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7f9 ff6a 	bl	80015d0 <HAL_UART_RxCpltCallback>
}
 80076fc:	e007      	b.n	800770e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	699a      	ldr	r2, [r3, #24]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0208 	orr.w	r2, r2, #8
 800770c:	619a      	str	r2, [r3, #24]
}
 800770e:	bf00      	nop
 8007710:	3758      	adds	r7, #88	; 0x58
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007730:	4904      	ldr	r1, [pc, #16]	; (8007744 <MX_FATFS_Init+0x18>)
 8007732:	4805      	ldr	r0, [pc, #20]	; (8007748 <MX_FATFS_Init+0x1c>)
 8007734:	f004 fbc8 	bl	800bec8 <FATFS_LinkDriver>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	4b03      	ldr	r3, [pc, #12]	; (800774c <MX_FATFS_Init+0x20>)
 800773e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007740:	bf00      	nop
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20002998 	.word	0x20002998
 8007748:	20000010 	.word	0x20000010
 800774c:	2000299c 	.word	0x2000299c

08007750 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007754:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007756:	4618      	mov	r0, r3
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	4618      	mov	r0, r3
 800776e:	f7f9 fb2f 	bl	8000dd0 <SD_disk_initialize>
 8007772:	4603      	mov	r3, r0
 8007774:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	4603      	mov	r3, r0
 8007786:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	4618      	mov	r0, r3
 800778c:	f7f9 fc0c 	bl	8000fa8 <SD_disk_status>
 8007790:	4603      	mov	r3, r0
 8007792:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80077ac:	7bf8      	ldrb	r0, [r7, #15]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	f7f9 fc0e 	bl	8000fd4 <SD_disk_read>
 80077b8:	4603      	mov	r3, r0
 80077ba:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80077d4:	7bf8      	ldrb	r0, [r7, #15]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	68b9      	ldr	r1, [r7, #8]
 80077dc:	f7f9 fc64 	bl	80010a8 <SD_disk_write>
 80077e0:	4603      	mov	r3, r0
 80077e2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	603a      	str	r2, [r7, #0]
 80077f6:	71fb      	strb	r3, [r7, #7]
 80077f8:	460b      	mov	r3, r1
 80077fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	79b9      	ldrb	r1, [r7, #6]
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f7f9 fcd4 	bl	80011b0 <SD_disk_ioctl>
 8007808:	4603      	mov	r3, r0
 800780a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	4a08      	ldr	r2, [pc, #32]	; (8007844 <disk_status+0x30>)
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	79fa      	ldrb	r2, [r7, #7]
 800782c:	4905      	ldr	r1, [pc, #20]	; (8007844 <disk_status+0x30>)
 800782e:	440a      	add	r2, r1
 8007830:	7a12      	ldrb	r2, [r2, #8]
 8007832:	4610      	mov	r0, r2
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
  return stat;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	200002d8 	.word	0x200002d8

08007848 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	4a0d      	ldr	r2, [pc, #52]	; (8007890 <disk_initialize+0x48>)
 800785a:	5cd3      	ldrb	r3, [r2, r3]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d111      	bne.n	8007884 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	4a0b      	ldr	r2, [pc, #44]	; (8007890 <disk_initialize+0x48>)
 8007864:	2101      	movs	r1, #1
 8007866:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	4a09      	ldr	r2, [pc, #36]	; (8007890 <disk_initialize+0x48>)
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	79fa      	ldrb	r2, [r7, #7]
 8007876:	4906      	ldr	r1, [pc, #24]	; (8007890 <disk_initialize+0x48>)
 8007878:	440a      	add	r2, r1
 800787a:	7a12      	ldrb	r2, [r2, #8]
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	200002d8 	.word	0x200002d8

08007894 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007894:	b590      	push	{r4, r7, lr}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	4a0a      	ldr	r2, [pc, #40]	; (80078d0 <disk_read+0x3c>)
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	689c      	ldr	r4, [r3, #8]
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	4a07      	ldr	r2, [pc, #28]	; (80078d0 <disk_read+0x3c>)
 80078b4:	4413      	add	r3, r2
 80078b6:	7a18      	ldrb	r0, [r3, #8]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	47a0      	blx	r4
 80078c0:	4603      	mov	r3, r0
 80078c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	200002d8 	.word	0x200002d8

080078d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	4a0a      	ldr	r2, [pc, #40]	; (8007910 <disk_write+0x3c>)
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68dc      	ldr	r4, [r3, #12]
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	4a07      	ldr	r2, [pc, #28]	; (8007910 <disk_write+0x3c>)
 80078f4:	4413      	add	r3, r2
 80078f6:	7a18      	ldrb	r0, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	47a0      	blx	r4
 8007900:	4603      	mov	r3, r0
 8007902:	75fb      	strb	r3, [r7, #23]
  return res;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	bd90      	pop	{r4, r7, pc}
 800790e:	bf00      	nop
 8007910:	200002d8 	.word	0x200002d8

08007914 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	603a      	str	r2, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
 8007920:	460b      	mov	r3, r1
 8007922:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <disk_ioctl+0x38>)
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	79fa      	ldrb	r2, [r7, #7]
 8007932:	4906      	ldr	r1, [pc, #24]	; (800794c <disk_ioctl+0x38>)
 8007934:	440a      	add	r2, r1
 8007936:	7a10      	ldrb	r0, [r2, #8]
 8007938:	79b9      	ldrb	r1, [r7, #6]
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	4798      	blx	r3
 800793e:	4603      	mov	r3, r0
 8007940:	73fb      	strb	r3, [r7, #15]
  return res;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200002d8 	.word	0x200002d8

08007950 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007964:	e007      	b.n	8007976 <mem_cpy+0x26>
		*d++ = *s++;
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	1c53      	adds	r3, r2, #1
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	1c59      	adds	r1, r3, #1
 8007970:	6179      	str	r1, [r7, #20]
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	1e5a      	subs	r2, r3, #1
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f2      	bne.n	8007966 <mem_cpy+0x16>
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800798e:	b480      	push	{r7}
 8007990:	b087      	sub	sp, #28
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800799e:	e005      	b.n	80079ac <mem_set+0x1e>
		*d++ = (BYTE)val;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	617a      	str	r2, [r7, #20]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f4      	bne.n	80079a0 <mem_set+0x12>
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80079c4:	b480      	push	{r7}
 80079c6:	b089      	sub	sp, #36	; 0x24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80079dc:	bf00      	nop
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	1e5a      	subs	r2, r3, #1
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00d      	beq.n	8007a04 <mem_cmp+0x40>
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	61fa      	str	r2, [r7, #28]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	61ba      	str	r2, [r7, #24]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	1acb      	subs	r3, r1, r3
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0ec      	beq.n	80079de <mem_cmp+0x1a>
	return r;
 8007a04:	697b      	ldr	r3, [r7, #20]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3724      	adds	r7, #36	; 0x24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007a1c:	e002      	b.n	8007a24 <chk_chr+0x12>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3301      	adds	r3, #1
 8007a22:	607b      	str	r3, [r7, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <chk_chr+0x26>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d1f2      	bne.n	8007a1e <chk_chr+0xc>
	return *str;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	e03d      	b.n	8007ad8 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8007a5c:	4932      	ldr	r1, [pc, #200]	; (8007b28 <chk_lock+0xe0>)
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4613      	mov	r3, r2
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d02e      	beq.n	8007ace <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007a70:	492d      	ldr	r1, [pc, #180]	; (8007b28 <chk_lock+0xe0>)
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4613      	mov	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d122      	bne.n	8007ad2 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8007a8c:	4926      	ldr	r1, [pc, #152]	; (8007b28 <chk_lock+0xe0>)
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4613      	mov	r3, r2
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d112      	bne.n	8007ad2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8007aac:	491e      	ldr	r1, [pc, #120]	; (8007b28 <chk_lock+0xe0>)
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	3308      	adds	r3, #8
 8007abc:	881a      	ldrh	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac4:	3306      	adds	r3, #6
 8007ac6:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d102      	bne.n	8007ad2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8007acc:	e007      	b.n	8007ade <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d9be      	bls.n	8007a5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d109      	bne.n	8007af8 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <chk_lock+0xa8>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d101      	bne.n	8007af4 <chk_lock+0xac>
 8007af0:	2300      	movs	r3, #0
 8007af2:	e013      	b.n	8007b1c <chk_lock+0xd4>
 8007af4:	2312      	movs	r3, #18
 8007af6:	e011      	b.n	8007b1c <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10b      	bne.n	8007b16 <chk_lock+0xce>
 8007afe:	490a      	ldr	r1, [pc, #40]	; (8007b28 <chk_lock+0xe0>)
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4613      	mov	r3, r2
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	330a      	adds	r3, #10
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b14:	d101      	bne.n	8007b1a <chk_lock+0xd2>
 8007b16:	2310      	movs	r3, #16
 8007b18:	e000      	b.n	8007b1c <chk_lock+0xd4>
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	200000c0 	.word	0x200000c0

08007b2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b32:	2300      	movs	r3, #0
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	e002      	b.n	8007b3e <enq_lock+0x12>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	607b      	str	r3, [r7, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d809      	bhi.n	8007b58 <enq_lock+0x2c>
 8007b44:	490a      	ldr	r1, [pc, #40]	; (8007b70 <enq_lock+0x44>)
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	440b      	add	r3, r1
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1ef      	bne.n	8007b38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	bf14      	ite	ne
 8007b5e:	2301      	movne	r3, #1
 8007b60:	2300      	moveq	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	200000c0 	.word	0x200000c0

08007b74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	e030      	b.n	8007be6 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8007b84:	495b      	ldr	r1, [pc, #364]	; (8007cf4 <inc_lock+0x180>)
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d11f      	bne.n	8007be0 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8007ba0:	4954      	ldr	r1, [pc, #336]	; (8007cf4 <inc_lock+0x180>)
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	3304      	adds	r3, #4
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb8:	3308      	adds	r3, #8
 8007bba:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d10f      	bne.n	8007be0 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8007bc0:	494c      	ldr	r1, [pc, #304]	; (8007cf4 <inc_lock+0x180>)
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	3308      	adds	r3, #8
 8007bd0:	881a      	ldrh	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd8:	3306      	adds	r3, #6
 8007bda:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d006      	beq.n	8007bee <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d9cb      	bls.n	8007b84 <inc_lock+0x10>
 8007bec:	e000      	b.n	8007bf0 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8007bee:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d14a      	bne.n	8007c8c <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	e002      	b.n	8007c02 <inc_lock+0x8e>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d809      	bhi.n	8007c1c <inc_lock+0xa8>
 8007c08:	493a      	ldr	r1, [pc, #232]	; (8007cf4 <inc_lock+0x180>)
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1ef      	bne.n	8007bfc <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d101      	bne.n	8007c26 <inc_lock+0xb2>
 8007c22:	2300      	movs	r3, #0
 8007c24:	e05f      	b.n	8007ce6 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	4831      	ldr	r0, [pc, #196]	; (8007cf4 <inc_lock+0x180>)
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4613      	mov	r3, r2
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4403      	add	r3, r0
 8007c3c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c44:	3308      	adds	r3, #8
 8007c46:	6819      	ldr	r1, [r3, #0]
 8007c48:	482a      	ldr	r0, [pc, #168]	; (8007cf4 <inc_lock+0x180>)
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4403      	add	r3, r0
 8007c56:	3304      	adds	r3, #4
 8007c58:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c60:	3306      	adds	r3, #6
 8007c62:	8818      	ldrh	r0, [r3, #0]
 8007c64:	4923      	ldr	r1, [pc, #140]	; (8007cf4 <inc_lock+0x180>)
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	3308      	adds	r3, #8
 8007c74:	4602      	mov	r2, r0
 8007c76:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c78:	491e      	ldr	r1, [pc, #120]	; (8007cf4 <inc_lock+0x180>)
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	330a      	adds	r3, #10
 8007c88:	2200      	movs	r2, #0
 8007c8a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00c      	beq.n	8007cac <inc_lock+0x138>
 8007c92:	4918      	ldr	r1, [pc, #96]	; (8007cf4 <inc_lock+0x180>)
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4613      	mov	r3, r2
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	330a      	adds	r3, #10
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <inc_lock+0x138>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e01c      	b.n	8007ce6 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <inc_lock+0x156>
 8007cb2:	4910      	ldr	r1, [pc, #64]	; (8007cf4 <inc_lock+0x180>)
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	330a      	adds	r3, #10
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b299      	uxth	r1, r3
 8007cc8:	e001      	b.n	8007cce <inc_lock+0x15a>
 8007cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cce:	4809      	ldr	r0, [pc, #36]	; (8007cf4 <inc_lock+0x180>)
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4403      	add	r3, r0
 8007cdc:	330a      	adds	r3, #10
 8007cde:	460a      	mov	r2, r1
 8007ce0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	200000c0 	.word	0x200000c0

08007cf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	607b      	str	r3, [r7, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d82e      	bhi.n	8007d6a <dec_lock+0x72>
		n = Files[i].ctr;
 8007d0c:	491b      	ldr	r1, [pc, #108]	; (8007d7c <dec_lock+0x84>)
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	4613      	mov	r3, r2
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	330a      	adds	r3, #10
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d20:	89fb      	ldrh	r3, [r7, #14]
 8007d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d26:	d101      	bne.n	8007d2c <dec_lock+0x34>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007d2c:	89fb      	ldrh	r3, [r7, #14]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <dec_lock+0x40>
 8007d32:	89fb      	ldrh	r3, [r7, #14]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d38:	4910      	ldr	r1, [pc, #64]	; (8007d7c <dec_lock+0x84>)
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	440b      	add	r3, r1
 8007d46:	330a      	adds	r3, #10
 8007d48:	89fa      	ldrh	r2, [r7, #14]
 8007d4a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d4c:	89fb      	ldrh	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d108      	bne.n	8007d64 <dec_lock+0x6c>
 8007d52:	490a      	ldr	r1, [pc, #40]	; (8007d7c <dec_lock+0x84>)
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	4613      	mov	r3, r2
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	737b      	strb	r3, [r7, #13]
 8007d68:	e001      	b.n	8007d6e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d6e:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200000c0 	.word	0x200000c0

08007d80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	e016      	b.n	8007dbc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d8e:	4910      	ldr	r1, [pc, #64]	; (8007dd0 <clear_lock+0x50>)
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	4613      	mov	r3, r2
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d108      	bne.n	8007db6 <clear_lock+0x36>
 8007da4:	490a      	ldr	r1, [pc, #40]	; (8007dd0 <clear_lock+0x50>)
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4613      	mov	r3, r2
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3301      	adds	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d9e5      	bls.n	8007d8e <clear_lock+0xe>
	}
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	200000c0 	.word	0x200000c0

08007dd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de6:	3304      	adds	r3, #4
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d047      	beq.n	8007e7e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007df4:	330c      	adds	r3, #12
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e00:	3301      	adds	r3, #1
 8007e02:	7818      	ldrb	r0, [r3, #0]
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	2301      	movs	r3, #1
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	f7ff fd63 	bl	80078d4 <disk_write>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <sync_window+0x46>
			res = FR_DISK_ERR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	e031      	b.n	8007e7e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e20:	3304      	adds	r3, #4
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	1ad2      	subs	r2, r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e38:	3318      	adds	r3, #24
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d21e      	bcs.n	8007e7e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e46:	3303      	adds	r3, #3
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	e014      	b.n	8007e78 <sync_window+0xa4>
					wsect += fs->fsize;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e54:	3318      	adds	r3, #24
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e64:	3301      	adds	r3, #1
 8007e66:	7818      	ldrb	r0, [r3, #0]
 8007e68:	6879      	ldr	r1, [r7, #4]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	f7ff fd31 	bl	80078d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d8e7      	bhi.n	8007e4e <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d01f      	beq.n	8007ee6 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff ff94 	bl	8007dd4 <sync_window>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d117      	bne.n	8007ee6 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	7818      	ldrb	r0, [r3, #0]
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	f7ff fce5 	bl	8007894 <disk_read>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d004      	beq.n	8007eda <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff ff6b 	bl	8007dd4 <sync_window>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f040 80bd 	bne.w	8008084 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	f040 80a7 	bne.w	8008066 <sync_fs+0x176>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f1e:	3305      	adds	r3, #5
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	f040 809f 	bne.w	8008066 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f30:	330a      	adds	r3, #10
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	2100      	movs	r1, #0
 8007f38:	f7ff fd29 	bl	800798e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2255      	movs	r2, #85	; 0x55
 8007f40:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	22aa      	movs	r2, #170	; 0xaa
 8007f48:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2252      	movs	r2, #82	; 0x52
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2252      	movs	r2, #82	; 0x52
 8007f56:	705a      	strb	r2, [r3, #1]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2261      	movs	r2, #97	; 0x61
 8007f5c:	709a      	strb	r2, [r3, #2]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2241      	movs	r2, #65	; 0x41
 8007f62:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2272      	movs	r2, #114	; 0x72
 8007f68:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2272      	movs	r2, #114	; 0x72
 8007f70:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2241      	movs	r2, #65	; 0x41
 8007f78:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2261      	movs	r2, #97	; 0x61
 8007f80:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8a:	3310      	adds	r3, #16
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9c:	3310      	adds	r3, #16
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	0a1b      	lsrs	r3, r3, #8
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb4:	3310      	adds	r3, #16
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc8:	3310      	adds	r3, #16
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	0e1b      	lsrs	r3, r3, #24
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fdc:	330c      	adds	r3, #12
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fee:	330c      	adds	r3, #12
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	0a1b      	lsrs	r3, r3, #8
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008006:	330c      	adds	r3, #12
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	0c1b      	lsrs	r3, r3, #16
 800800c:	b2da      	uxtb	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801a:	330c      	adds	r3, #12
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	0e1b      	lsrs	r3, r3, #24
 8008020:	b2da      	uxtb	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800802e:	331c      	adds	r3, #28
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800803a:	330c      	adds	r3, #12
 800803c:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008044:	3301      	adds	r3, #1
 8008046:	7818      	ldrb	r0, [r3, #0]
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008050:	330c      	adds	r3, #12
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	2301      	movs	r3, #1
 8008056:	f7ff fc3d 	bl	80078d4 <disk_write>
			fs->fsi_flag = 0;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008060:	3305      	adds	r3, #5
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	3301      	adds	r3, #1
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2200      	movs	r2, #0
 8008072:	2100      	movs	r1, #0
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff fc4d 	bl	8007914 <disk_ioctl>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <sync_fs+0x194>
			res = FR_DISK_ERR;
 8008080:	2301      	movs	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	3b02      	subs	r3, #2
 800809c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a4:	3314      	adds	r3, #20
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3b02      	subs	r3, #2
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d301      	bcc.n	80080b4 <clust2sect+0x26>
 80080b0:	2300      	movs	r3, #0
 80080b2:	e00e      	b.n	80080d2 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ba:	3302      	adds	r3, #2
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	fb03 f202 	mul.w	r2, r3, r2
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080cc:	3308      	adds	r3, #8
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4413      	add	r3, r2
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b086      	sub	sp, #24
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d907      	bls.n	80080fe <get_fat+0x20>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f4:	3314      	adds	r3, #20
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d302      	bcc.n	8008104 <get_fat+0x26>
		val = 1;	/* Internal error */
 80080fe:	2301      	movs	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e0ec      	b.n	80082de <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008104:	f04f 33ff 	mov.w	r3, #4294967295
 8008108:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b03      	cmp	r3, #3
 8008114:	f000 809e 	beq.w	8008254 <get_fat+0x176>
 8008118:	2b03      	cmp	r3, #3
 800811a:	f300 80d6 	bgt.w	80082ca <get_fat+0x1ec>
 800811e:	2b01      	cmp	r3, #1
 8008120:	d002      	beq.n	8008128 <get_fat+0x4a>
 8008122:	2b02      	cmp	r3, #2
 8008124:	d063      	beq.n	80081ee <get_fat+0x110>
 8008126:	e0d0      	b.n	80082ca <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	085b      	lsrs	r3, r3, #1
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008144:	330a      	adds	r3, #10
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	4619      	mov	r1, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008150:	4413      	add	r3, r2
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff fe97 	bl	8007e88 <move_window>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	f040 80b7 	bne.w	80082d0 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	60fa      	str	r2, [r7, #12]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800816e:	320a      	adds	r2, #10
 8008170:	8812      	ldrh	r2, [r2, #0]
 8008172:	fbb3 f1f2 	udiv	r1, r3, r2
 8008176:	fb02 f201 	mul.w	r2, r2, r1
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	5cd3      	ldrb	r3, [r2, r3]
 8008180:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008190:	330a      	adds	r3, #10
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	4619      	mov	r1, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	fbb3 f3f1 	udiv	r3, r3, r1
 800819c:	4413      	add	r3, r2
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fe71 	bl	8007e88 <move_window>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f040 8093 	bne.w	80082d4 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b4:	330a      	adds	r3, #10
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80081c0:	fb02 f201 	mul.w	r2, r2, r1
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	5cd3      	ldrb	r3, [r2, r3]
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	461a      	mov	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <get_fat+0x106>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	091b      	lsrs	r3, r3, #4
 80081e2:	e002      	b.n	80081ea <get_fat+0x10c>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081ea:	617b      	str	r3, [r7, #20]
			break;
 80081ec:	e077      	b.n	80082de <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fc:	330a      	adds	r3, #10
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	b29b      	uxth	r3, r3
 8008204:	4619      	mov	r1, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	fbb3 f3f1 	udiv	r3, r3, r1
 800820c:	4413      	add	r3, r2
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fe39 	bl	8007e88 <move_window>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d15d      	bne.n	80082d8 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	005a      	lsls	r2, r3, #1
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008226:	330a      	adds	r3, #10
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	fbb2 f1f3 	udiv	r1, r2, r3
 800822e:	fb03 f301 	mul.w	r3, r3, r1
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	4413      	add	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	3301      	adds	r3, #1
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	b21a      	sxth	r2, r3
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	b21b      	sxth	r3, r3
 800824a:	4313      	orrs	r3, r2
 800824c:	b21b      	sxth	r3, r3
 800824e:	b29b      	uxth	r3, r3
 8008250:	617b      	str	r3, [r7, #20]
			break;
 8008252:	e044      	b.n	80082de <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008262:	330a      	adds	r3, #10
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	b29b      	uxth	r3, r3
 800826a:	4619      	mov	r1, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008272:	4413      	add	r3, r2
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fe06 	bl	8007e88 <move_window>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d12c      	bne.n	80082dc <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	009a      	lsls	r2, r3, #2
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800828c:	330a      	adds	r3, #10
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	fbb2 f1f3 	udiv	r1, r2, r3
 8008294:	fb03 f301 	mul.w	r3, r3, r1
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	3303      	adds	r3, #3
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	061a      	lsls	r2, r3, #24
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3302      	adds	r3, #2
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	041b      	lsls	r3, r3, #16
 80082b0:	4313      	orrs	r3, r2
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	3201      	adds	r2, #1
 80082b6:	7812      	ldrb	r2, [r2, #0]
 80082b8:	0212      	lsls	r2, r2, #8
 80082ba:	4313      	orrs	r3, r2
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	7812      	ldrb	r2, [r2, #0]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80082c6:	617b      	str	r3, [r7, #20]
			break;
 80082c8:	e009      	b.n	80082de <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 80082ca:	2301      	movs	r3, #1
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	e006      	b.n	80082de <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082d0:	bf00      	nop
 80082d2:	e004      	b.n	80082de <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082d4:	bf00      	nop
 80082d6:	e002      	b.n	80082de <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80082d8:	bf00      	nop
 80082da:	e000      	b.n	80082de <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80082dc:	bf00      	nop
		}
	}

	return val;
 80082de:	697b      	ldr	r3, [r7, #20]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d907      	bls.n	800830a <put_fat+0x22>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008300:	3314      	adds	r3, #20
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <put_fat+0x28>
		res = FR_INT_ERR;
 800830a:	2302      	movs	r3, #2
 800830c:	77fb      	strb	r3, [r7, #31]
 800830e:	e146      	b.n	800859e <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b03      	cmp	r3, #3
 800831a:	f000 80d9 	beq.w	80084d0 <put_fat+0x1e8>
 800831e:	2b03      	cmp	r3, #3
 8008320:	f300 8133 	bgt.w	800858a <put_fat+0x2a2>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d003      	beq.n	8008330 <put_fat+0x48>
 8008328:	2b02      	cmp	r3, #2
 800832a:	f000 8095 	beq.w	8008458 <put_fat+0x170>
 800832e:	e12c      	b.n	800858a <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	085b      	lsrs	r3, r3, #1
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4413      	add	r3, r2
 800833c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834c:	330a      	adds	r3, #10
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	4619      	mov	r1, r3
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	fbb3 f3f1 	udiv	r3, r3, r1
 8008358:	4413      	add	r3, r2
 800835a:	4619      	mov	r1, r3
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff fd93 	bl	8007e88 <move_window>
 8008362:	4603      	mov	r3, r0
 8008364:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008366:	7ffb      	ldrb	r3, [r7, #31]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f040 8111 	bne.w	8008590 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	617a      	str	r2, [r7, #20]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800837a:	320a      	adds	r2, #10
 800837c:	8812      	ldrh	r2, [r2, #0]
 800837e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008382:	fb02 f201 	mul.w	r2, r2, r1
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4413      	add	r3, r2
 800838c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00d      	beq.n	80083b4 <put_fat+0xcc>
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	b25b      	sxtb	r3, r3
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	b25a      	sxtb	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	b25b      	sxtb	r3, r3
 80083ac:	4313      	orrs	r3, r2
 80083ae:	b25b      	sxtb	r3, r3
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e001      	b.n	80083b8 <put_fat+0xd0>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c2:	3304      	adds	r3, #4
 80083c4:	2201      	movs	r2, #1
 80083c6:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d6:	330a      	adds	r3, #10
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	4619      	mov	r1, r3
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	fbb3 f3f1 	udiv	r3, r3, r1
 80083e2:	4413      	add	r3, r2
 80083e4:	4619      	mov	r1, r3
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff fd4e 	bl	8007e88 <move_window>
 80083ec:	4603      	mov	r3, r0
 80083ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083f0:	7ffb      	ldrb	r3, [r7, #31]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 80ce 	bne.w	8008594 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fe:	330a      	adds	r3, #10
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	fbb3 f1f2 	udiv	r1, r3, r2
 800840a:	fb02 f201 	mul.w	r2, r2, r1
 800840e:	1a9b      	subs	r3, r3, r2
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <put_fat+0x140>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	091b      	lsrs	r3, r3, #4
 8008424:	b2db      	uxtb	r3, r3
 8008426:	e00e      	b.n	8008446 <put_fat+0x15e>
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b25b      	sxtb	r3, r3
 800842e:	f023 030f 	bic.w	r3, r3, #15
 8008432:	b25a      	sxtb	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	0a1b      	lsrs	r3, r3, #8
 8008438:	b25b      	sxtb	r3, r3
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	b25b      	sxtb	r3, r3
 8008440:	4313      	orrs	r3, r2
 8008442:	b25b      	sxtb	r3, r3
 8008444:	b2db      	uxtb	r3, r3
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008450:	3304      	adds	r3, #4
 8008452:	2201      	movs	r2, #1
 8008454:	701a      	strb	r2, [r3, #0]
			break;
 8008456:	e0a2      	b.n	800859e <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008466:	330a      	adds	r3, #10
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	085b      	lsrs	r3, r3, #1
 800846c:	b29b      	uxth	r3, r3
 800846e:	4619      	mov	r1, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	fbb3 f3f1 	udiv	r3, r3, r1
 8008476:	4413      	add	r3, r2
 8008478:	4619      	mov	r1, r3
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f7ff fd04 	bl	8007e88 <move_window>
 8008480:	4603      	mov	r3, r0
 8008482:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008484:	7ffb      	ldrb	r3, [r7, #31]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f040 8086 	bne.w	8008598 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	005a      	lsls	r2, r3, #1
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008496:	330a      	adds	r3, #10
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	fbb2 f1f3 	udiv	r1, r2, r3
 800849e:	fb03 f301 	mul.w	r3, r3, r1
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	0a1b      	lsrs	r3, r3, #8
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	3301      	adds	r3, #1
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c8:	3304      	adds	r3, #4
 80084ca:	2201      	movs	r2, #1
 80084cc:	701a      	strb	r2, [r3, #0]
			break;
 80084ce:	e066      	b.n	800859e <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084de:	330a      	adds	r3, #10
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	089b      	lsrs	r3, r3, #2
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	4619      	mov	r1, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ee:	4413      	add	r3, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff fcc8 	bl	8007e88 <move_window>
 80084f8:	4603      	mov	r3, r0
 80084fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084fc:	7ffb      	ldrb	r3, [r7, #31]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d14c      	bne.n	800859c <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	009a      	lsls	r2, r3, #2
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850c:	330a      	adds	r3, #10
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	fbb2 f1f3 	udiv	r1, r2, r3
 8008514:	fb03 f301 	mul.w	r3, r3, r1
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4413      	add	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	3303      	adds	r3, #3
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	061a      	lsls	r2, r3, #24
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	3302      	adds	r3, #2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	041b      	lsls	r3, r3, #16
 8008530:	4313      	orrs	r3, r2
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	3201      	adds	r2, #1
 8008536:	7812      	ldrb	r2, [r2, #0]
 8008538:	0212      	lsls	r2, r2, #8
 800853a:	4313      	orrs	r3, r2
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	7812      	ldrb	r2, [r2, #0]
 8008540:	4313      	orrs	r3, r2
 8008542:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	4313      	orrs	r3, r2
 800854a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	b2da      	uxtb	r2, r3
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	b29b      	uxth	r3, r3
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	b29a      	uxth	r2, r3
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	3301      	adds	r3, #1
 8008560:	b2d2      	uxtb	r2, r2
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	0c1a      	lsrs	r2, r3, #16
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	3302      	adds	r3, #2
 800856c:	b2d2      	uxtb	r2, r2
 800856e:	701a      	strb	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	0e1a      	lsrs	r2, r3, #24
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	3303      	adds	r3, #3
 8008578:	b2d2      	uxtb	r2, r2
 800857a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008582:	3304      	adds	r3, #4
 8008584:	2201      	movs	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
			break;
 8008588:	e009      	b.n	800859e <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800858a:	2302      	movs	r3, #2
 800858c:	77fb      	strb	r3, [r7, #31]
 800858e:	e006      	b.n	800859e <put_fat+0x2b6>
			if (res != FR_OK) break;
 8008590:	bf00      	nop
 8008592:	e004      	b.n	800859e <put_fat+0x2b6>
			if (res != FR_OK) break;
 8008594:	bf00      	nop
 8008596:	e002      	b.n	800859e <put_fat+0x2b6>
			if (res != FR_OK) break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <put_fat+0x2b6>
			if (res != FR_OK) break;
 800859c:	bf00      	nop
		}
	}

	return res;
 800859e:	7ffb      	ldrb	r3, [r7, #31]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3720      	adds	r7, #32
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d907      	bls.n	80085c8 <remove_chain+0x20>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085be:	3314      	adds	r3, #20
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d302      	bcc.n	80085ce <remove_chain+0x26>
		res = FR_INT_ERR;
 80085c8:	2302      	movs	r3, #2
 80085ca:	73fb      	strb	r3, [r7, #15]
 80085cc:	e04f      	b.n	800866e <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80085d2:	e040      	b.n	8008656 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff fd81 	bl	80080de <get_fat>
 80085dc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d041      	beq.n	8008668 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d102      	bne.n	80085f0 <remove_chain+0x48>
 80085ea:	2302      	movs	r3, #2
 80085ec:	73fb      	strb	r3, [r7, #15]
 80085ee:	e03e      	b.n	800866e <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d102      	bne.n	80085fe <remove_chain+0x56>
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
 80085fc:	e037      	b.n	800866e <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80085fe:	2200      	movs	r2, #0
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff fe70 	bl	80082e8 <put_fat>
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d12c      	bne.n	800866c <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008618:	3310      	adds	r3, #16
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008620:	d017      	beq.n	8008652 <remove_chain+0xaa>
				fs->free_clust++;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008628:	3310      	adds	r3, #16
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008634:	3310      	adds	r3, #16
 8008636:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800863e:	3305      	adds	r3, #5
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f043 0301 	orr.w	r3, r3, #1
 8008646:	b2da      	uxtb	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800864e:	3305      	adds	r3, #5
 8008650:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800865c:	3314      	adds	r3, #20
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d3b6      	bcc.n	80085d4 <remove_chain+0x2c>
 8008666:	e002      	b.n	800866e <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8008668:	bf00      	nop
 800866a:	e000      	b.n	800866e <remove_chain+0xc6>
			if (res != FR_OK) break;
 800866c:	bf00      	nop
		}
	}

	return res;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d113      	bne.n	80086b0 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868e:	330c      	adds	r3, #12
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d007      	beq.n	80086aa <create_chain+0x32>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a0:	3314      	adds	r3, #20
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d31e      	bcc.n	80086e8 <create_chain+0x70>
 80086aa:	2301      	movs	r3, #1
 80086ac:	613b      	str	r3, [r7, #16]
 80086ae:	e01b      	b.n	80086e8 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff fd13 	bl	80080de <get_fat>
 80086b8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d801      	bhi.n	80086c4 <create_chain+0x4c>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e086      	b.n	80087d2 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ca:	d101      	bne.n	80086d0 <create_chain+0x58>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	e080      	b.n	80087d2 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d6:	3314      	adds	r3, #20
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d201      	bcs.n	80086e4 <create_chain+0x6c>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	e076      	b.n	80087d2 <create_chain+0x15a>
		scl = clst;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	3301      	adds	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f8:	3314      	adds	r3, #20
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d307      	bcc.n	8008712 <create_chain+0x9a>
			ncl = 2;
 8008702:	2302      	movs	r3, #2
 8008704:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	429a      	cmp	r2, r3
 800870c:	d901      	bls.n	8008712 <create_chain+0x9a>
 800870e:	2300      	movs	r3, #0
 8008710:	e05f      	b.n	80087d2 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8008712:	6979      	ldr	r1, [r7, #20]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff fce2 	bl	80080de <get_fat>
 800871a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00e      	beq.n	8008740 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d002      	beq.n	8008730 <create_chain+0xb8>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <create_chain+0xbc>
			return cs;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	e04e      	b.n	80087d2 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	429a      	cmp	r2, r3
 800873a:	d1d7      	bne.n	80086ec <create_chain+0x74>
 800873c:	2300      	movs	r3, #0
 800873e:	e048      	b.n	80087d2 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8008740:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8008742:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008746:	6979      	ldr	r1, [r7, #20]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fdcd 	bl	80082e8 <put_fat>
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d109      	bne.n	800876c <create_chain+0xf4>
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d006      	beq.n	800876c <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fdc0 	bl	80082e8 <put_fat>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d126      	bne.n	80087c0 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008778:	330c      	adds	r3, #12
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008784:	3310      	adds	r3, #16
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878c:	d020      	beq.n	80087d0 <create_chain+0x158>
			fs->free_clust--;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008794:	3310      	adds	r3, #16
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	1e5a      	subs	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a0:	3310      	adds	r3, #16
 80087a2:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087aa:	3305      	adds	r3, #5
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ba:	3305      	adds	r3, #5
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	e007      	b.n	80087d0 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d102      	bne.n	80087cc <create_chain+0x154>
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ca:	e000      	b.n	80087ce <create_chain+0x156>
 80087cc:	2301      	movs	r3, #1
 80087ce:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80087d0:	697b      	ldr	r3, [r7, #20]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80087da:	b480      	push	{r7}
 80087dc:	b087      	sub	sp, #28
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80087ea:	3304      	adds	r3, #4
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3304      	adds	r3, #4
 80087f0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087fe:	330a      	adds	r3, #10
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	fbb3 f2f2 	udiv	r2, r3, r2
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008816:	3302      	adds	r3, #2
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	fbb2 f3f3 	udiv	r3, r2, r3
 800881e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	1d1a      	adds	r2, r3, #4
 8008824:	613a      	str	r2, [r7, #16]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <clmt_clust+0x5a>
 8008830:	2300      	movs	r3, #0
 8008832:	e010      	b.n	8008856 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	429a      	cmp	r2, r3
 800883a:	d307      	bcc.n	800884c <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	3304      	adds	r3, #4
 8008848:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800884a:	e7e9      	b.n	8008820 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800884c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4413      	add	r3, r2
}
 8008856:	4618      	mov	r0, r3
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b086      	sub	sp, #24
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008876:	3306      	adds	r3, #6
 8008878:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008880:	3308      	adds	r3, #8
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d00a      	beq.n	80088a2 <dir_sdi+0x40>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008898:	3314      	adds	r3, #20
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d301      	bcc.n	80088a6 <dir_sdi+0x44>
		return FR_INT_ERR;
 80088a2:	2302      	movs	r3, #2
 80088a4:	e0b4      	b.n	8008a10 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d111      	bne.n	80088d0 <dir_sdi+0x6e>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d108      	bne.n	80088d0 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80088ca:	3304      	adds	r3, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d117      	bne.n	8008906 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e2:	3308      	adds	r3, #8
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d301      	bcc.n	80088f2 <dir_sdi+0x90>
			return FR_INT_ERR;
 80088ee:	2302      	movs	r3, #2
 80088f0:	e08e      	b.n	8008a10 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80088fe:	3304      	adds	r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	613b      	str	r3, [r7, #16]
 8008904:	e046      	b.n	8008994 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008912:	330a      	adds	r3, #10
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	b29b      	uxth	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008928:	3302      	adds	r3, #2
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	fb03 f302 	mul.w	r3, r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8008932:	e022      	b.n	800897a <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6979      	ldr	r1, [r7, #20]
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff fbcd 	bl	80080de <get_fat>
 8008944:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894c:	d101      	bne.n	8008952 <dir_sdi+0xf0>
 800894e:	2301      	movs	r3, #1
 8008950:	e05e      	b.n	8008a10 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d90a      	bls.n	800896e <dir_sdi+0x10c>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008964:	3314      	adds	r3, #20
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	429a      	cmp	r2, r3
 800896c:	d301      	bcc.n	8008972 <dir_sdi+0x110>
				return FR_INT_ERR;
 800896e:	2302      	movs	r3, #2
 8008970:	e04e      	b.n	8008a10 <dir_sdi+0x1ae>
			idx -= ic;
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	429a      	cmp	r2, r3
 8008980:	d2d8      	bcs.n	8008934 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6979      	ldr	r1, [r7, #20]
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff fb7e 	bl	800808e <clust2sect>
 8008992:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800899a:	330c      	adds	r3, #12
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <dir_sdi+0x148>
 80089a6:	2302      	movs	r3, #2
 80089a8:	e032      	b.n	8008a10 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b6:	330a      	adds	r3, #10
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	095b      	lsrs	r3, r3, #5
 80089bc:	b29b      	uxth	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	441a      	add	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d0:	3310      	adds	r3, #16
 80089d2:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ea:	330a      	adds	r3, #10
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80089fa:	fb02 f201 	mul.w	r2, r2, r1
 80089fe:	1a9b      	subs	r3, r3, r2
 8008a00:	015b      	lsls	r3, r3, #5
 8008a02:	18c2      	adds	r2, r0, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0a:	3314      	adds	r3, #20
 8008a0c:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a28:	3306      	adds	r3, #6
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d006      	beq.n	8008a46 <dir_next+0x2e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3e:	3310      	adds	r3, #16
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <dir_next+0x32>
		return FR_NO_FILE;
 8008a46:	2304      	movs	r3, #4
 8008a48:	e144      	b.n	8008cd4 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a56:	330a      	adds	r3, #10
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	461a      	mov	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a66:	fb02 f201 	mul.w	r2, r2, r1
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f040 810c 	bne.w	8008c8a <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a78:	3310      	adds	r3, #16
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a84:	3310      	adds	r3, #16
 8008a86:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a8e:	330c      	adds	r3, #12
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10e      	bne.n	8008ab4 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	f0c0 80ed 	bcc.w	8008c8a <dir_next+0x272>
				return FR_NO_FILE;
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	e10f      	b.n	8008cd4 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac0:	330a      	adds	r3, #10
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	095b      	lsrs	r3, r3, #5
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008adc:	3302      	adds	r3, #2
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 80d0 	bne.w	8008c8a <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af8:	330c      	adds	r3, #12
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f7ff faed 	bl	80080de <get_fat>
 8008b04:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d801      	bhi.n	8008b10 <dir_next+0xf8>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e0e1      	b.n	8008cd4 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b16:	d101      	bne.n	8008b1c <dir_next+0x104>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e0db      	b.n	8008cd4 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b28:	3314      	adds	r3, #20
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	f0c0 8097 	bcc.w	8008c62 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <dir_next+0x126>
 8008b3a:	2304      	movs	r3, #4
 8008b3c:	e0ca      	b.n	8008cd4 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7ff fd90 	bl	8008678 <create_chain>
 8008b58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <dir_next+0x14c>
 8008b60:	2307      	movs	r3, #7
 8008b62:	e0b7      	b.n	8008cd4 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d101      	bne.n	8008b6e <dir_next+0x156>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	e0b2      	b.n	8008cd4 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d101      	bne.n	8008b7a <dir_next+0x162>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e0ac      	b.n	8008cd4 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff f926 	bl	8007dd4 <sync_window>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <dir_next+0x17a>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e0a0      	b.n	8008cd4 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba8:	330a      	adds	r3, #10
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	2100      	movs	r1, #0
 8008bb0:	f7fe feed 	bl	800798e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc2:	681c      	ldr	r4, [r3, #0]
 8008bc4:	6979      	ldr	r1, [r7, #20]
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7ff fa61 	bl	800808e <clust2sect>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8008bd2:	330c      	adds	r3, #12
 8008bd4:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	e024      	b.n	8008c26 <dir_next+0x20e>
						dp->fs->wflag = 1;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be8:	3304      	adds	r3, #4
 8008bea:	2201      	movs	r2, #1
 8008bec:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff f8ec 	bl	8007dd4 <sync_window>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <dir_next+0x1ee>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e066      	b.n	8008cd4 <dir_next+0x2bc>
						dp->fs->winsect++;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8008c12:	330c      	adds	r3, #12
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	1c59      	adds	r1, r3, #1
 8008c18:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	3301      	adds	r3, #1
 8008c24:	613b      	str	r3, [r7, #16]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c32:	3302      	adds	r3, #2
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d3ce      	bcc.n	8008bdc <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008c4a:	330c      	adds	r3, #12
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	1a8a      	subs	r2, r1, r2
 8008c5a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008c5e:	330c      	adds	r3, #12
 8008c60:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c68:	330c      	adds	r3, #12
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6979      	ldr	r1, [r7, #20]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff fa08 	bl	800808e <clust2sect>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c86:	3310      	adds	r3, #16
 8008c88:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c94:	3306      	adds	r3, #6
 8008c96:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cae:	330a      	adds	r3, #10
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cbe:	fb02 f201 	mul.w	r2, r2, r1
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	015b      	lsls	r3, r3, #5
 8008cc6:	18c2      	adds	r2, r0, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cce:	3314      	adds	r3, #20
 8008cd0:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd90      	pop	{r4, r7, pc}

08008cdc <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff fdba 	bl	8008862 <dir_sdi>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d138      	bne.n	8008d6a <dir_alloc+0x8e>
		n = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d0a:	3310      	adds	r3, #16
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4610      	mov	r0, r2
 8008d12:	f7ff f8b9 	bl	8007e88 <move_window>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d123      	bne.n	8008d68 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d26:	3314      	adds	r3, #20
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2be5      	cmp	r3, #229	; 0xe5
 8008d2e:	d007      	beq.n	8008d40 <dir_alloc+0x64>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d36:	3314      	adds	r3, #20
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3301      	adds	r3, #1
 8008d44:	60bb      	str	r3, [r7, #8]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d102      	bne.n	8008d54 <dir_alloc+0x78>
 8008d4e:	e00c      	b.n	8008d6a <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008d50:	2300      	movs	r3, #0
 8008d52:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008d54:	2101      	movs	r1, #1
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff fe5e 	bl	8008a18 <dir_next>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0ca      	beq.n	8008cfc <dir_alloc+0x20>
 8008d66:	e000      	b.n	8008d6a <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8008d68:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d101      	bne.n	8008d74 <dir_alloc+0x98>
 8008d70:	2307      	movs	r3, #7
 8008d72:	73fb      	strb	r3, [r7, #15]
	return res;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	331b      	adds	r3, #27
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	b21a      	sxth	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	331a      	adds	r3, #26
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	b21b      	sxth	r3, r3
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	b21b      	sxth	r3, r3
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d10f      	bne.n	8008dce <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	3315      	adds	r3, #21
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	b21a      	sxth	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	b21b      	sxth	r3, r3
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	b21b      	sxth	r3, r3
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	041b      	lsls	r3, r3, #16
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

	return cl;
 8008dce:	68fb      	ldr	r3, [r7, #12]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	331a      	adds	r3, #26
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	b2d2      	uxtb	r2, r2
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	331b      	adds	r3, #27
 8008dfc:	b2d2      	uxtb	r2, r2
 8008dfe:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	0c1a      	lsrs	r2, r3, #16
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3314      	adds	r3, #20
 8008e08:	b2d2      	uxtb	r2, r2
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3315      	adds	r3, #21
 8008e1a:	b2d2      	uxtb	r2, r2
 8008e1c:	701a      	strb	r2, [r3, #0]
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
	...

08008e2c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e3e:	1e5a      	subs	r2, r3, #1
 8008e40:	4613      	mov	r3, r2
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	613b      	str	r3, [r7, #16]
 8008e50:	2301      	movs	r3, #1
 8008e52:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8008e54:	4a2b      	ldr	r2, [pc, #172]	; (8008f04 <cmp_lfn+0xd8>)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	4413      	add	r3, r2
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	4413      	add	r3, r2
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	b21a      	sxth	r2, r3
 8008e68:	4926      	ldr	r1, [pc, #152]	; (8008f04 <cmp_lfn+0xd8>)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	440b      	add	r3, r1
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	440b      	add	r3, r1
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	b21b      	sxth	r3, r3
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	b21b      	sxth	r3, r3
 8008e7e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8008e80:	89fb      	ldrh	r3, [r7, #14]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d019      	beq.n	8008eba <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8008e86:	89bb      	ldrh	r3, [r7, #12]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f003 f869 	bl	800bf60 <ff_wtoupper>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2bfe      	cmp	r3, #254	; 0xfe
 8008e96:	d80e      	bhi.n	8008eb6 <cmp_lfn+0x8a>
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	617a      	str	r2, [r7, #20]
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f003 f85a 	bl	800bf60 <ff_wtoupper>
 8008eac:	4603      	mov	r3, r0
 8008eae:	461a      	mov	r2, r3
 8008eb0:	89fb      	ldrh	r3, [r7, #14]
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d008      	beq.n	8008ec8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e01f      	b.n	8008efa <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8008eba:	89bb      	ldrh	r3, [r7, #12]
 8008ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d001      	beq.n	8008ec8 <cmp_lfn+0x9c>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	e018      	b.n	8008efa <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b0c      	cmp	r3, #12
 8008ed2:	d9bf      	bls.n	8008e54 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <cmp_lfn+0xcc>
 8008ee0:	89fb      	ldrh	r3, [r7, #14]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d008      	beq.n	8008ef8 <cmp_lfn+0xcc>
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	4413      	add	r3, r2
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <cmp_lfn+0xcc>
		return 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e000      	b.n	8008efa <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8008ef8:	2301      	movs	r3, #1
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	0800cd88 	.word	0x0800cd88

08008f08 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b089      	sub	sp, #36	; 0x24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4611      	mov	r1, r2
 8008f14:	461a      	mov	r2, r3
 8008f16:	460b      	mov	r3, r1
 8008f18:	71fb      	strb	r3, [r7, #7]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	330d      	adds	r3, #13
 8008f22:	79ba      	ldrb	r2, [r7, #6]
 8008f24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	330b      	adds	r3, #11
 8008f2a:	220f      	movs	r2, #15
 8008f2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	330c      	adds	r3, #12
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	331a      	adds	r3, #26
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	331b      	adds	r3, #27
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	1e5a      	subs	r2, r3, #1
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	4413      	add	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	82fb      	strh	r3, [r7, #22]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008f5e:	8afb      	ldrh	r3, [r7, #22]
 8008f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d007      	beq.n	8008f78 <fit_lfn+0x70>
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	61fa      	str	r2, [r7, #28]
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008f78:	4a1d      	ldr	r2, [pc, #116]	; (8008ff0 <fit_lfn+0xe8>)
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	4413      	add	r3, r2
 8008f86:	8afa      	ldrh	r2, [r7, #22]
 8008f88:	b2d2      	uxtb	r2, r2
 8008f8a:	701a      	strb	r2, [r3, #0]
 8008f8c:	8afb      	ldrh	r3, [r7, #22]
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	b299      	uxth	r1, r3
 8008f92:	4a17      	ldr	r2, [pc, #92]	; (8008ff0 <fit_lfn+0xe8>)
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	4413      	add	r3, r2
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	b2ca      	uxtb	r2, r1
 8008fa2:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8008fa4:	8afb      	ldrh	r3, [r7, #22]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d102      	bne.n	8008fb0 <fit_lfn+0xa8>
 8008faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	61bb      	str	r3, [r7, #24]
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b0c      	cmp	r3, #12
 8008fba:	d9d0      	bls.n	8008f5e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8008fbc:	8afb      	ldrh	r3, [r7, #22]
 8008fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d006      	beq.n	8008fd4 <fit_lfn+0xcc>
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <fit_lfn+0xd4>
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fda:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	79fa      	ldrb	r2, [r7, #7]
 8008fe0:	701a      	strb	r2, [r3, #0]
}
 8008fe2:	bf00      	nop
 8008fe4:	3724      	adds	r7, #36	; 0x24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	0800cd88 	.word	0x0800cd88

08008ff4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08c      	sub	sp, #48	; 0x30
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009002:	220b      	movs	r2, #11
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f7fe fca2 	bl	8007950 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b05      	cmp	r3, #5
 8009010:	d92b      	bls.n	800906a <gen_numname+0x76>
		sr = seq;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009016:	e022      	b.n	800905e <gen_numname+0x6a>
			wc = *lfn++;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	1c9a      	adds	r2, r3, #2
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009022:	2300      	movs	r3, #0
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
 8009026:	e017      	b.n	8009058 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	005a      	lsls	r2, r3, #1
 800902c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	4413      	add	r3, r2
 8009034:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <gen_numname+0x5e>
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800904c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009050:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	3301      	adds	r3, #1
 8009056:	62bb      	str	r3, [r7, #40]	; 0x28
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	2b0f      	cmp	r3, #15
 800905c:	d9e4      	bls.n	8009028 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1d8      	bne.n	8009018 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800906a:	2307      	movs	r3, #7
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	f003 030f 	and.w	r3, r3, #15
 8009076:	b2db      	uxtb	r3, r3
 8009078:	3330      	adds	r3, #48	; 0x30
 800907a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800907e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009082:	2b39      	cmp	r3, #57	; 0x39
 8009084:	d904      	bls.n	8009090 <gen_numname+0x9c>
 8009086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800908a:	3307      	adds	r3, #7
 800908c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	1e5a      	subs	r2, r3, #1
 8009094:	62ba      	str	r2, [r7, #40]	; 0x28
 8009096:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800909a:	4413      	add	r3, r2
 800909c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80090a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	091b      	lsrs	r3, r3, #4
 80090a8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1de      	bne.n	800906e <gen_numname+0x7a>
	ns[i] = '~';
 80090b0:	f107 0214 	add.w	r2, r7, #20
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	4413      	add	r3, r2
 80090b8:	227e      	movs	r2, #126	; 0x7e
 80090ba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80090bc:	2300      	movs	r3, #0
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
 80090c0:	e002      	b.n	80090c8 <gen_numname+0xd4>
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	3301      	adds	r3, #1
 80090c6:	627b      	str	r3, [r7, #36]	; 0x24
 80090c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d205      	bcs.n	80090dc <gen_numname+0xe8>
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	4413      	add	r3, r2
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d1f2      	bne.n	80090c2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b07      	cmp	r3, #7
 80090e0:	d808      	bhi.n	80090f4 <gen_numname+0x100>
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80090e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80090ec:	4413      	add	r3, r2
 80090ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80090f2:	e000      	b.n	80090f6 <gen_numname+0x102>
 80090f4:	2120      	movs	r1, #32
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	627a      	str	r2, [r7, #36]	; 0x24
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	4413      	add	r3, r2
 8009100:	460a      	mov	r2, r1
 8009102:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	2b07      	cmp	r3, #7
 8009108:	d9e8      	bls.n	80090dc <gen_numname+0xe8>
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	3730      	adds	r7, #48	; 0x30
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009120:	230b      	movs	r3, #11
 8009122:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	b2da      	uxtb	r2, r3
 8009128:	0852      	lsrs	r2, r2, #1
 800912a:	01db      	lsls	r3, r3, #7
 800912c:	4313      	orrs	r3, r2
 800912e:	b2da      	uxtb	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	1c59      	adds	r1, r3, #1
 8009134:	6079      	str	r1, [r7, #4]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	4413      	add	r3, r2
 800913a:	73fb      	strb	r3, [r7, #15]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	3b01      	subs	r3, #1
 8009140:	60bb      	str	r3, [r7, #8]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1ed      	bne.n	8009124 <sum_sfn+0x10>
	return sum;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b086      	sub	sp, #24
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800915e:	2100      	movs	r1, #0
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff fb7e 	bl	8008862 <dir_sdi>
 8009166:	4603      	mov	r3, r0
 8009168:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <dir_find+0x1e>
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	e0c1      	b.n	80092f8 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009174:	23ff      	movs	r3, #255	; 0xff
 8009176:	753b      	strb	r3, [r7, #20]
 8009178:	7d3b      	ldrb	r3, [r7, #20]
 800917a:	757b      	strb	r3, [r7, #21]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009182:	3304      	adds	r3, #4
 8009184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009188:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009198:	3310      	adds	r3, #16
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7fe fe72 	bl	8007e88 <move_window>
 80091a4:	4603      	mov	r3, r0
 80091a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f040 809e 	bne.w	80092ec <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b6:	3314      	adds	r3, #20
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80091c2:	7dbb      	ldrb	r3, [r7, #22]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <dir_find+0x78>
 80091c8:	2304      	movs	r3, #4
 80091ca:	75fb      	strb	r3, [r7, #23]
 80091cc:	e093      	b.n	80092f6 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	330b      	adds	r3, #11
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091d8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80091da:	7dbb      	ldrb	r3, [r7, #22]
 80091dc:	2be5      	cmp	r3, #229	; 0xe5
 80091de:	d007      	beq.n	80091f0 <dir_find+0x9a>
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	f003 0308 	and.w	r3, r3, #8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00c      	beq.n	8009204 <dir_find+0xae>
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b0f      	cmp	r3, #15
 80091ee:	d009      	beq.n	8009204 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80091f0:	23ff      	movs	r3, #255	; 0xff
 80091f2:	757b      	strb	r3, [r7, #21]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80091fa:	3304      	adds	r3, #4
 80091fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009200:	801a      	strh	r2, [r3, #0]
 8009202:	e068      	b.n	80092d6 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	2b0f      	cmp	r3, #15
 8009208:	d139      	bne.n	800927e <dir_find+0x128>
				if (dp->lfn) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d05f      	beq.n	80092d6 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009216:	7dbb      	ldrb	r3, [r7, #22]
 8009218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d012      	beq.n	8009246 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	7b5b      	ldrb	r3, [r3, #13]
 8009224:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8009226:	7dbb      	ldrb	r3, [r7, #22]
 8009228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922c:	75bb      	strb	r3, [r7, #22]
 800922e:	7dbb      	ldrb	r3, [r7, #22]
 8009230:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009238:	3306      	adds	r3, #6
 800923a:	881a      	ldrh	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009242:	3304      	adds	r3, #4
 8009244:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009246:	7dba      	ldrb	r2, [r7, #22]
 8009248:	7d7b      	ldrb	r3, [r7, #21]
 800924a:	429a      	cmp	r2, r3
 800924c:	d114      	bne.n	8009278 <dir_find+0x122>
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	330d      	adds	r3, #13
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	7d3a      	ldrb	r2, [r7, #20]
 8009256:	429a      	cmp	r2, r3
 8009258:	d10e      	bne.n	8009278 <dir_find+0x122>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6939      	ldr	r1, [r7, #16]
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fde1 	bl	8008e2c <cmp_lfn>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <dir_find+0x122>
 8009270:	7d7b      	ldrb	r3, [r7, #21]
 8009272:	3b01      	subs	r3, #1
 8009274:	b2db      	uxtb	r3, r3
 8009276:	e000      	b.n	800927a <dir_find+0x124>
 8009278:	23ff      	movs	r3, #255	; 0xff
 800927a:	757b      	strb	r3, [r7, #21]
 800927c:	e02b      	b.n	80092d6 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800927e:	7d7b      	ldrb	r3, [r7, #21]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d107      	bne.n	8009294 <dir_find+0x13e>
 8009284:	6938      	ldr	r0, [r7, #16]
 8009286:	f7ff ff45 	bl	8009114 <sum_sfn>
 800928a:	4603      	mov	r3, r0
 800928c:	461a      	mov	r2, r3
 800928e:	7d3b      	ldrb	r3, [r7, #20]
 8009290:	4293      	cmp	r3, r2
 8009292:	d02d      	beq.n	80092f0 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929a:	3318      	adds	r3, #24
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	330b      	adds	r3, #11
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10c      	bne.n	80092c4 <dir_find+0x16e>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b0:	3318      	adds	r3, #24
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	220b      	movs	r2, #11
 80092b6:	4619      	mov	r1, r3
 80092b8:	6938      	ldr	r0, [r7, #16]
 80092ba:	f7fe fb83 	bl	80079c4 <mem_cmp>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d017      	beq.n	80092f4 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80092c4:	23ff      	movs	r3, #255	; 0xff
 80092c6:	757b      	strb	r3, [r7, #21]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80092ce:	3304      	adds	r3, #4
 80092d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092d4:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80092d6:	2100      	movs	r1, #0
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff fb9d 	bl	8008a18 <dir_next>
 80092de:	4603      	mov	r3, r0
 80092e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f43f af50 	beq.w	800918a <dir_find+0x34>
 80092ea:	e004      	b.n	80092f6 <dir_find+0x1a0>
		if (res != FR_OK) break;
 80092ec:	bf00      	nop
 80092ee:	e002      	b.n	80092f6 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80092f0:	bf00      	nop
 80092f2:	e000      	b.n	80092f6 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80092f4:	bf00      	nop

	return res;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08c      	sub	sp, #48	; 0x30
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930e:	3318      	adds	r3, #24
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	623b      	str	r3, [r7, #32]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800931e:	f107 030c 	add.w	r3, r7, #12
 8009322:	220c      	movs	r2, #12
 8009324:	6a39      	ldr	r1, [r7, #32]
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe fb12 	bl	8007950 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d039      	beq.n	80093aa <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	330b      	adds	r3, #11
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 8009348:	2301      	movs	r3, #1
 800934a:	62bb      	str	r3, [r7, #40]	; 0x28
 800934c:	e013      	b.n	8009376 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800934e:	f107 010c 	add.w	r1, r7, #12
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	69fa      	ldr	r2, [r7, #28]
 8009356:	6a38      	ldr	r0, [r7, #32]
 8009358:	f7ff fe4c 	bl	8008ff4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7ff fefa 	bl	8009156 <dir_find>
 8009362:	4603      	mov	r3, r0
 8009364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800936c:	2b00      	cmp	r3, #0
 800936e:	d106      	bne.n	800937e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	3301      	adds	r3, #1
 8009374:	62bb      	str	r3, [r7, #40]	; 0x28
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	2b63      	cmp	r3, #99	; 0x63
 800937a:	d9e8      	bls.n	800934e <dir_register+0x4e>
 800937c:	e000      	b.n	8009380 <dir_register+0x80>
			if (res != FR_OK) break;
 800937e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	2b64      	cmp	r3, #100	; 0x64
 8009384:	d101      	bne.n	800938a <dir_register+0x8a>
 8009386:	2307      	movs	r3, #7
 8009388:	e0e3      	b.n	8009552 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800938a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800938e:	2b04      	cmp	r3, #4
 8009390:	d002      	beq.n	8009398 <dir_register+0x98>
 8009392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009396:	e0dc      	b.n	8009552 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	330b      	adds	r3, #11
 800939c:	7dfa      	ldrb	r2, [r7, #23]
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d014      	beq.n	80093de <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80093b4:	2300      	movs	r3, #0
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093b8:	e002      	b.n	80093c0 <dir_register+0xc0>
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	3301      	adds	r3, #1
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	69fa      	ldr	r2, [r7, #28]
 80093c6:	4413      	add	r3, r2
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1f5      	bne.n	80093ba <dir_register+0xba>
		nent = (n + 25) / 13;
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	3319      	adds	r3, #25
 80093d2:	4a62      	ldr	r2, [pc, #392]	; (800955c <dir_register+0x25c>)
 80093d4:	fba2 2303 	umull	r2, r3, r2, r3
 80093d8:	089b      	lsrs	r3, r3, #2
 80093da:	627b      	str	r3, [r7, #36]	; 0x24
 80093dc:	e001      	b.n	80093e2 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80093de:	2301      	movs	r3, #1
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80093e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff fc79 	bl	8008cdc <dir_alloc>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80093f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d160      	bne.n	80094ba <dir_register+0x1ba>
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	3b01      	subs	r3, #1
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	2b00      	cmp	r3, #0
 8009402:	d05a      	beq.n	80094ba <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800940a:	3306      	adds	r3, #6
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff fa23 	bl	8008862 <dir_sdi>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009426:	2b00      	cmp	r3, #0
 8009428:	d147      	bne.n	80094ba <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009430:	3318      	adds	r3, #24
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4618      	mov	r0, r3
 8009436:	f7ff fe6d 	bl	8009114 <sum_sfn>
 800943a:	4603      	mov	r3, r0
 800943c:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944c:	3310      	adds	r3, #16
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7fe fd18 	bl	8007e88 <move_window>
 8009458:	4603      	mov	r3, r0
 800945a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800945e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009462:	2b00      	cmp	r3, #0
 8009464:	d128      	bne.n	80094b8 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009474:	3314      	adds	r3, #20
 8009476:	6819      	ldr	r1, [r3, #0]
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	b2da      	uxtb	r2, r3
 800947c:	7efb      	ldrb	r3, [r7, #27]
 800947e:	f7ff fd43 	bl	8008f08 <fit_lfn>
				dp->fs->wflag = 1;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800948e:	3304      	adds	r3, #4
 8009490:	2201      	movs	r2, #1
 8009492:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8009494:	2100      	movs	r1, #0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff fabe 	bl	8008a18 <dir_next>
 800949c:	4603      	mov	r3, r0
 800949e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80094a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d107      	bne.n	80094ba <dir_register+0x1ba>
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	3b01      	subs	r3, #1
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1c3      	bne.n	800943e <dir_register+0x13e>
 80094b6:	e000      	b.n	80094ba <dir_register+0x1ba>
				if (res != FR_OK) break;
 80094b8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80094ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d145      	bne.n	800954e <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d0:	3310      	adds	r3, #16
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7fe fcd6 	bl	8007e88 <move_window>
 80094dc:	4603      	mov	r3, r0
 80094de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80094e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d131      	bne.n	800954e <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f0:	3314      	adds	r3, #20
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2220      	movs	r2, #32
 80094f6:	2100      	movs	r1, #0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fe fa48 	bl	800798e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009504:	3314      	adds	r3, #20
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800950e:	3318      	adds	r3, #24
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	220b      	movs	r2, #11
 8009514:	4619      	mov	r1, r3
 8009516:	f7fe fa1b 	bl	8007950 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009520:	3318      	adds	r3, #24
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	330b      	adds	r3, #11
 8009526:	781a      	ldrb	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952e:	3314      	adds	r3, #20
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	330c      	adds	r3, #12
 8009534:	f002 0218 	and.w	r2, r2, #24
 8009538:	b2d2      	uxtb	r2, r2
 800953a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009548:	3304      	adds	r3, #4
 800954a:	2201      	movs	r2, #1
 800954c:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800954e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009552:	4618      	mov	r0, r3
 8009554:	3730      	adds	r7, #48	; 0x30
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	4ec4ec4f 	.word	0x4ec4ec4f

08009560 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08a      	sub	sp, #40	; 0x28
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	613b      	str	r3, [r7, #16]
 8009570:	e002      	b.n	8009578 <create_name+0x18>
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	3301      	adds	r3, #1
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	2b2f      	cmp	r3, #47	; 0x2f
 800957e:	d0f8      	beq.n	8009572 <create_name+0x12>
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b5c      	cmp	r3, #92	; 0x5c
 8009586:	d0f4      	beq.n	8009572 <create_name+0x12>
	lfn = dp->lfn;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	61ba      	str	r2, [r7, #24]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	4413      	add	r3, r2
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80095a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095aa:	2b1f      	cmp	r3, #31
 80095ac:	d92f      	bls.n	800960e <create_name+0xae>
 80095ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095b0:	2b2f      	cmp	r3, #47	; 0x2f
 80095b2:	d02c      	beq.n	800960e <create_name+0xae>
 80095b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095b6:	2b5c      	cmp	r3, #92	; 0x5c
 80095b8:	d029      	beq.n	800960e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2bfe      	cmp	r3, #254	; 0xfe
 80095be:	d901      	bls.n	80095c4 <create_name+0x64>
			return FR_INVALID_NAME;
 80095c0:	2306      	movs	r3, #6
 80095c2:	e18b      	b.n	80098dc <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80095c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80095ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095cc:	2101      	movs	r1, #1
 80095ce:	4618      	mov	r0, r3
 80095d0:	f002 fc8a 	bl	800bee8 <ff_convert>
 80095d4:	4603      	mov	r3, r0
 80095d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80095d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <create_name+0x82>
 80095de:	2306      	movs	r3, #6
 80095e0:	e17c      	b.n	80098dc <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80095e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e4:	2b7f      	cmp	r3, #127	; 0x7f
 80095e6:	d809      	bhi.n	80095fc <create_name+0x9c>
 80095e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095ea:	4619      	mov	r1, r3
 80095ec:	488f      	ldr	r0, [pc, #572]	; (800982c <create_name+0x2cc>)
 80095ee:	f7fe fa10 	bl	8007a12 <chk_chr>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <create_name+0x9c>
			return FR_INVALID_NAME;
 80095f8:	2306      	movs	r3, #6
 80095fa:	e16f      	b.n	80098dc <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	1c5a      	adds	r2, r3, #1
 8009600:	617a      	str	r2, [r7, #20]
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800960a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800960c:	e7c5      	b.n	800959a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	441a      	add	r2, r3
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800961a:	2b1f      	cmp	r3, #31
 800961c:	d801      	bhi.n	8009622 <create_name+0xc2>
 800961e:	2304      	movs	r3, #4
 8009620:	e000      	b.n	8009624 <create_name+0xc4>
 8009622:	2300      	movs	r3, #0
 8009624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8009628:	e011      	b.n	800964e <create_name+0xee>
		w = lfn[di - 1];
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009630:	3b01      	subs	r3, #1
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800963c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800963e:	2b20      	cmp	r3, #32
 8009640:	d002      	beq.n	8009648 <create_name+0xe8>
 8009642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009644:	2b2e      	cmp	r3, #46	; 0x2e
 8009646:	d106      	bne.n	8009656 <create_name+0xf6>
		di--;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	3b01      	subs	r3, #1
 800964c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1ea      	bne.n	800962a <create_name+0xca>
 8009654:	e000      	b.n	8009658 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8009656:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <create_name+0x102>
 800965e:	2306      	movs	r3, #6
 8009660:	e13c      	b.n	80098dc <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	2200      	movs	r2, #0
 800966c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009674:	3318      	adds	r3, #24
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	220b      	movs	r2, #11
 800967a:	2120      	movs	r1, #32
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe f986 	bl	800798e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009682:	2300      	movs	r3, #0
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	e002      	b.n	800968e <create_name+0x12e>
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	3301      	adds	r3, #1
 800968c:	61bb      	str	r3, [r7, #24]
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	2b20      	cmp	r3, #32
 800969a:	d0f5      	beq.n	8009688 <create_name+0x128>
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	2b2e      	cmp	r3, #46	; 0x2e
 80096a8:	d0ee      	beq.n	8009688 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d009      	beq.n	80096c4 <create_name+0x164>
 80096b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b4:	f043 0303 	orr.w	r3, r3, #3
 80096b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80096bc:	e002      	b.n	80096c4 <create_name+0x164>
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <create_name+0x17e>
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096d0:	3b01      	subs	r3, #1
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	2b2e      	cmp	r3, #46	; 0x2e
 80096dc:	d1ef      	bne.n	80096be <create_name+0x15e>

	b = i = 0; ni = 8;
 80096de:	2300      	movs	r3, #0
 80096e0:	623b      	str	r3, [r7, #32]
 80096e2:	2300      	movs	r3, #0
 80096e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80096e8:	2308      	movs	r3, #8
 80096ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	61ba      	str	r2, [r7, #24]
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4413      	add	r3, r2
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80096fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 8092 	beq.w	8009828 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009706:	2b20      	cmp	r3, #32
 8009708:	d006      	beq.n	8009718 <create_name+0x1b8>
 800970a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800970c:	2b2e      	cmp	r3, #46	; 0x2e
 800970e:	d10a      	bne.n	8009726 <create_name+0x1c6>
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	429a      	cmp	r2, r3
 8009716:	d006      	beq.n	8009726 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8009718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800971c:	f043 0303 	orr.w	r3, r3, #3
 8009720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009724:	e07f      	b.n	8009826 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009726:	6a3a      	ldr	r2, [r7, #32]
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	429a      	cmp	r2, r3
 800972c:	d203      	bcs.n	8009736 <create_name+0x1d6>
 800972e:	69ba      	ldr	r2, [r7, #24]
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	429a      	cmp	r2, r3
 8009734:	d123      	bne.n	800977e <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	2b0b      	cmp	r3, #11
 800973a:	d106      	bne.n	800974a <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800973c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009740:	f043 0303 	orr.w	r3, r3, #3
 8009744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009748:	e077      	b.n	800983a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	429a      	cmp	r2, r3
 8009750:	d005      	beq.n	800975e <create_name+0x1fe>
 8009752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009756:	f043 0303 	orr.w	r3, r3, #3
 800975a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800975e:	69ba      	ldr	r2, [r7, #24]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	429a      	cmp	r2, r3
 8009764:	d868      	bhi.n	8009838 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	2308      	movs	r3, #8
 800976c:	623b      	str	r3, [r7, #32]
 800976e:	230b      	movs	r3, #11
 8009770:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009772:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800977c:	e053      	b.n	8009826 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800977e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009780:	2b7f      	cmp	r3, #127	; 0x7f
 8009782:	d914      	bls.n	80097ae <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009786:	2100      	movs	r1, #0
 8009788:	4618      	mov	r0, r3
 800978a:	f002 fbad 	bl	800bee8 <ff_convert>
 800978e:	4603      	mov	r3, r0
 8009790:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <create_name+0x242>
 8009798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800979a:	3b80      	subs	r3, #128	; 0x80
 800979c:	4a24      	ldr	r2, [pc, #144]	; (8009830 <create_name+0x2d0>)
 800979e:	5cd3      	ldrb	r3, [r2, r3]
 80097a0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80097a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097a6:	f043 0302 	orr.w	r3, r3, #2
 80097aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80097ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <create_name+0x264>
 80097b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097b6:	4619      	mov	r1, r3
 80097b8:	481e      	ldr	r0, [pc, #120]	; (8009834 <create_name+0x2d4>)
 80097ba:	f7fe f92a 	bl	8007a12 <chk_chr>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d008      	beq.n	80097d6 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80097c4:	235f      	movs	r3, #95	; 0x5f
 80097c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80097c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097cc:	f043 0303 	orr.w	r3, r3, #3
 80097d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097d4:	e01b      	b.n	800980e <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80097d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097d8:	2b40      	cmp	r3, #64	; 0x40
 80097da:	d909      	bls.n	80097f0 <create_name+0x290>
 80097dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097de:	2b5a      	cmp	r3, #90	; 0x5a
 80097e0:	d806      	bhi.n	80097f0 <create_name+0x290>
					b |= 2;
 80097e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097e6:	f043 0302 	orr.w	r3, r3, #2
 80097ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80097ee:	e00e      	b.n	800980e <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80097f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097f2:	2b60      	cmp	r3, #96	; 0x60
 80097f4:	d90b      	bls.n	800980e <create_name+0x2ae>
 80097f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097f8:	2b7a      	cmp	r3, #122	; 0x7a
 80097fa:	d808      	bhi.n	800980e <create_name+0x2ae>
						b |= 1; w -= 0x20;
 80097fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800980a:	3b20      	subs	r3, #32
 800980c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009814:	3318      	adds	r3, #24
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	1c59      	adds	r1, r3, #1
 800981c:	6239      	str	r1, [r7, #32]
 800981e:	4413      	add	r3, r2
 8009820:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009822:	b2d2      	uxtb	r2, r2
 8009824:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8009826:	e761      	b.n	80096ec <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8009828:	bf00      	nop
 800982a:	e006      	b.n	800983a <create_name+0x2da>
 800982c:	0800cc88 	.word	0x0800cc88
 8009830:	0800cd08 	.word	0x0800cd08
 8009834:	0800cc94 	.word	0x0800cc94
			if (si > di) break;			/* No extension */
 8009838:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009840:	3318      	adds	r3, #24
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2be5      	cmp	r3, #229	; 0xe5
 8009848:	d106      	bne.n	8009858 <create_name+0x2f8>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009850:	3318      	adds	r3, #24
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2205      	movs	r2, #5
 8009856:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	2b08      	cmp	r3, #8
 800985c:	d104      	bne.n	8009868 <create_name+0x308>
 800985e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8009868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800986c:	f003 030c 	and.w	r3, r3, #12
 8009870:	2b0c      	cmp	r3, #12
 8009872:	d005      	beq.n	8009880 <create_name+0x320>
 8009874:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	2b03      	cmp	r3, #3
 800987e:	d105      	bne.n	800988c <create_name+0x32c>
		cf |= NS_LFN;
 8009880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009884:	f043 0302 	orr.w	r3, r3, #2
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800988c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009890:	f003 0302 	and.w	r3, r3, #2
 8009894:	2b00      	cmp	r3, #0
 8009896:	d117      	bne.n	80098c8 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800989c:	f003 0303 	and.w	r3, r3, #3
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d105      	bne.n	80098b0 <create_name+0x350>
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a8:	f043 0310 	orr.w	r3, r3, #16
 80098ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80098b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098b4:	f003 030c 	and.w	r3, r3, #12
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d105      	bne.n	80098c8 <create_name+0x368>
 80098bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c0:	f043 0308 	orr.w	r3, r3, #8
 80098c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ce:	3318      	adds	r3, #24
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330b      	adds	r3, #11
 80098d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80098d8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80098da:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3728      	adds	r7, #40	; 0x28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b2f      	cmp	r3, #47	; 0x2f
 80098f4:	d003      	beq.n	80098fe <follow_path+0x1a>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b5c      	cmp	r3, #92	; 0x5c
 80098fc:	d102      	bne.n	8009904 <follow_path+0x20>
		path++;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	3301      	adds	r3, #1
 8009902:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990a:	3308      	adds	r3, #8
 800990c:	2200      	movs	r2, #0
 800990e:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b1f      	cmp	r3, #31
 8009916:	d80c      	bhi.n	8009932 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8009918:	2100      	movs	r1, #0
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fe ffa1 	bl	8008862 <dir_sdi>
 8009920:	4603      	mov	r3, r0
 8009922:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800992a:	3314      	adds	r3, #20
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	e04c      	b.n	80099cc <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009932:	463b      	mov	r3, r7
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff fe12 	bl	8009560 <create_name>
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d13d      	bne.n	80099c2 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff fc05 	bl	8009156 <dir_find>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009956:	3318      	adds	r3, #24
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	7adb      	ldrb	r3, [r3, #11]
 800995c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00a      	beq.n	800997a <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	2b04      	cmp	r3, #4
 8009968:	d12d      	bne.n	80099c6 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800996a:	7bbb      	ldrb	r3, [r7, #14]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b00      	cmp	r3, #0
 8009972:	d128      	bne.n	80099c6 <follow_path+0xe2>
 8009974:	2305      	movs	r3, #5
 8009976:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8009978:	e025      	b.n	80099c6 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d122      	bne.n	80099ca <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800998a:	3314      	adds	r3, #20
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	330b      	adds	r3, #11
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	f003 0310 	and.w	r3, r3, #16
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800999e:	2305      	movs	r3, #5
 80099a0:	73fb      	strb	r3, [r7, #15]
 80099a2:	e013      	b.n	80099cc <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68b9      	ldr	r1, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff f9e5 	bl	8008d7e <ld_clust>
 80099b4:	4602      	mov	r2, r0
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099bc:	3308      	adds	r3, #8
 80099be:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80099c0:	e7b7      	b.n	8009932 <follow_path+0x4e>
			if (res != FR_OK) break;
 80099c2:	bf00      	nop
 80099c4:	e002      	b.n	80099cc <follow_path+0xe8>
				break;
 80099c6:	bf00      	nop
 80099c8:	e000      	b.n	80099cc <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80099ca:	bf00      	nop
		}
	}

	return res;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b087      	sub	sp, #28
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80099de:	f04f 33ff 	mov.w	r3, #4294967295
 80099e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d031      	beq.n	8009a50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	617b      	str	r3, [r7, #20]
 80099f2:	e002      	b.n	80099fa <get_ldnumber+0x24>
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	3301      	adds	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b1f      	cmp	r3, #31
 8009a00:	d903      	bls.n	8009a0a <get_ldnumber+0x34>
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b3a      	cmp	r3, #58	; 0x3a
 8009a08:	d1f4      	bne.n	80099f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b3a      	cmp	r3, #58	; 0x3a
 8009a10:	d11c      	bne.n	8009a4c <get_ldnumber+0x76>
			tp = *path;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	60fa      	str	r2, [r7, #12]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	3b30      	subs	r3, #48	; 0x30
 8009a22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b09      	cmp	r3, #9
 8009a28:	d80e      	bhi.n	8009a48 <get_ldnumber+0x72>
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d10a      	bne.n	8009a48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d107      	bne.n	8009a48 <get_ldnumber+0x72>
					vol = (int)i;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	e002      	b.n	8009a52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009a50:	693b      	ldr	r3, [r7, #16]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
	...

08009a60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a70:	3304      	adds	r3, #4
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009a7c:	330c      	adds	r3, #12
 8009a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a82:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7fe f9fe 	bl	8007e88 <move_window>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <check_fs+0x36>
		return 3;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e04a      	b.n	8009b2c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	b21a      	sxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009aaa:	b21b      	sxth	r3, r3
 8009aac:	4313      	orrs	r3, r2
 8009aae:	b21b      	sxth	r3, r3
 8009ab0:	4a20      	ldr	r2, [pc, #128]	; (8009b34 <check_fs+0xd4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d001      	beq.n	8009aba <check_fs+0x5a>
		return 2;
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e038      	b.n	8009b2c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3336      	adds	r3, #54	; 0x36
 8009abe:	3303      	adds	r3, #3
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	061a      	lsls	r2, r3, #24
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3336      	adds	r3, #54	; 0x36
 8009ac8:	3302      	adds	r3, #2
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	041b      	lsls	r3, r3, #16
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	3236      	adds	r2, #54	; 0x36
 8009ad4:	3201      	adds	r2, #1
 8009ad6:	7812      	ldrb	r2, [r2, #0]
 8009ad8:	0212      	lsls	r2, r2, #8
 8009ada:	4313      	orrs	r3, r2
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ae8:	4a13      	ldr	r2, [pc, #76]	; (8009b38 <check_fs+0xd8>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d101      	bne.n	8009af2 <check_fs+0x92>
		return 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	e01c      	b.n	8009b2c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3352      	adds	r3, #82	; 0x52
 8009af6:	3303      	adds	r3, #3
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	061a      	lsls	r2, r3, #24
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3352      	adds	r3, #82	; 0x52
 8009b00:	3302      	adds	r3, #2
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	041b      	lsls	r3, r3, #16
 8009b06:	4313      	orrs	r3, r2
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	3252      	adds	r2, #82	; 0x52
 8009b0c:	3201      	adds	r2, #1
 8009b0e:	7812      	ldrb	r2, [r2, #0]
 8009b10:	0212      	lsls	r2, r2, #8
 8009b12:	4313      	orrs	r3, r2
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b20:	4a05      	ldr	r2, [pc, #20]	; (8009b38 <check_fs+0xd8>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d101      	bne.n	8009b2a <check_fs+0xca>
		return 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e000      	b.n	8009b2c <check_fs+0xcc>

	return 1;
 8009b2a:	2301      	movs	r3, #1
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	ffffaa55 	.word	0xffffaa55
 8009b38:	00544146 	.word	0x00544146

08009b3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b096      	sub	sp, #88	; 0x58
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009b50:	68b8      	ldr	r0, [r7, #8]
 8009b52:	f7ff ff40 	bl	80099d6 <get_ldnumber>
 8009b56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	da01      	bge.n	8009b62 <find_volume+0x26>
 8009b5e:	230b      	movs	r3, #11
 8009b60:	e33c      	b.n	800a1dc <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009b62:	4ab3      	ldr	r2, [pc, #716]	; (8009e30 <find_volume+0x2f4>)
 8009b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <find_volume+0x3a>
 8009b72:	230c      	movs	r3, #12
 8009b74:	e332      	b.n	800a1dc <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b7a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01d      	beq.n	8009bc4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b8e:	3301      	adds	r3, #1
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fd fe3e 	bl	8007814 <disk_status>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009b9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10c      	bne.n	8009bc4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009baa:	79fb      	ldrb	r3, [r7, #7]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d007      	beq.n	8009bc0 <find_volume+0x84>
 8009bb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8009bbc:	230a      	movs	r3, #10
 8009bbe:	e30d      	b.n	800a1dc <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e30b      	b.n	800a1dc <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bca:	2200      	movs	r2, #0
 8009bcc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd8:	3301      	adds	r3, #1
 8009bda:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009be2:	3301      	adds	r3, #1
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fd fe2e 	bl	8007848 <disk_initialize>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e2ec      	b.n	800a1dc <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d007      	beq.n	8009c18 <find_volume+0xdc>
 8009c08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8009c14:	230a      	movs	r3, #10
 8009c16:	e2e1      	b.n	800a1dc <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8009c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1e:	3301      	adds	r3, #1
 8009c20:	7818      	ldrb	r0, [r3, #0]
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c28:	330a      	adds	r3, #10
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	2102      	movs	r1, #2
 8009c2e:	f7fd fe71 	bl	8007914 <disk_ioctl>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10f      	bne.n	8009c58 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8009c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c3e:	330a      	adds	r3, #10
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c46:	d307      	bcc.n	8009c58 <find_volume+0x11c>
 8009c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4e:	330a      	adds	r3, #10
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c56:	d901      	bls.n	8009c5c <find_volume+0x120>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e2bf      	b.n	800a1dc <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009c60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c64:	f7ff fefc 	bl	8009a60 <check_fs>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009c6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d155      	bne.n	8009d22 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009c76:	2300      	movs	r3, #0
 8009c78:	643b      	str	r3, [r7, #64]	; 0x40
 8009c7a:	e029      	b.n	8009cd0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c80:	011b      	lsls	r3, r3, #4
 8009c82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009c86:	4413      	add	r3, r2
 8009c88:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d012      	beq.n	8009cba <find_volume+0x17e>
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	330b      	adds	r3, #11
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	061a      	lsls	r2, r3, #24
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	330a      	adds	r3, #10
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	041b      	lsls	r3, r3, #16
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca8:	3209      	adds	r2, #9
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	0212      	lsls	r2, r2, #8
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb2:	3208      	adds	r2, #8
 8009cb4:	7812      	ldrb	r2, [r2, #0]
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	e000      	b.n	8009cbc <find_volume+0x180>
 8009cba:	2200      	movs	r2, #0
 8009cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009cc4:	440b      	add	r3, r1
 8009cc6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ccc:	3301      	adds	r3, #1
 8009cce:	643b      	str	r3, [r7, #64]	; 0x40
 8009cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d9d2      	bls.n	8009c7c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <find_volume+0x1aa>
 8009ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009cee:	4413      	add	r3, r2
 8009cf0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009cf4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <find_volume+0x1cc>
 8009cfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d00:	f7ff feae 	bl	8009a60 <check_fs>
 8009d04:	4603      	mov	r3, r0
 8009d06:	e000      	b.n	8009d0a <find_volume+0x1ce>
 8009d08:	2302      	movs	r3, #2
 8009d0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d005      	beq.n	8009d22 <find_volume+0x1e6>
 8009d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d18:	3301      	adds	r3, #1
 8009d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d9e1      	bls.n	8009ce6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009d22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d101      	bne.n	8009d2e <find_volume+0x1f2>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e256      	b.n	800a1dc <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009d2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <find_volume+0x1fe>
 8009d36:	230d      	movs	r3, #13
 8009d38:	e250      	b.n	800a1dc <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3c:	7b1b      	ldrb	r3, [r3, #12]
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	b21a      	sxth	r2, r3
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	7adb      	ldrb	r3, [r3, #11]
 8009d46:	b21b      	sxth	r3, r3
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	b21a      	sxth	r2, r3
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d52:	330a      	adds	r3, #10
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	b21b      	sxth	r3, r3
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d001      	beq.n	8009d60 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8009d5c:	230d      	movs	r3, #13
 8009d5e:	e23d      	b.n	800a1dc <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d62:	7ddb      	ldrb	r3, [r3, #23]
 8009d64:	021b      	lsls	r3, r3, #8
 8009d66:	b21a      	sxth	r2, r3
 8009d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6a:	7d9b      	ldrb	r3, [r3, #22]
 8009d6c:	b21b      	sxth	r3, r3
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	b21b      	sxth	r3, r3
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d112      	bne.n	8009da2 <find_volume+0x266>
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009d82:	061a      	lsls	r2, r3, #24
 8009d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d86:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009d8a:	041b      	lsls	r3, r3, #16
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d90:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8009d94:	0212      	lsls	r2, r2, #8
 8009d96:	4313      	orrs	r3, r2
 8009d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d9a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8009da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da8:	3318      	adds	r3, #24
 8009daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dac:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db0:	7c1a      	ldrb	r2, [r3, #16]
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db8:	3303      	adds	r3, #3
 8009dba:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc2:	3303      	adds	r3, #3
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d008      	beq.n	8009ddc <find_volume+0x2a0>
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dd0:	3303      	adds	r3, #3
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d001      	beq.n	8009ddc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8009dd8:	230d      	movs	r3, #13
 8009dda:	e1ff      	b.n	800a1dc <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de2:	3303      	adds	r3, #3
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
 8009dee:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	7b5a      	ldrb	r2, [r3, #13]
 8009df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dfa:	3302      	adds	r3, #2
 8009dfc:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e04:	3302      	adds	r3, #2
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00e      	beq.n	8009e2a <find_volume+0x2ee>
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e12:	3302      	adds	r3, #2
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e1e:	3302      	adds	r3, #2
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	4013      	ands	r3, r2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8009e2a:	230d      	movs	r3, #13
 8009e2c:	e1d6      	b.n	800a1dc <find_volume+0x6a0>
 8009e2e:	bf00      	nop
 8009e30:	200000b8 	.word	0x200000b8

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	7c9b      	ldrb	r3, [r3, #18]
 8009e38:	021b      	lsls	r3, r3, #8
 8009e3a:	b21a      	sxth	r2, r3
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3e:	7c5b      	ldrb	r3, [r3, #17]
 8009e40:	b21b      	sxth	r3, r3
 8009e42:	4313      	orrs	r3, r2
 8009e44:	b21b      	sxth	r3, r3
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e4e:	3308      	adds	r3, #8
 8009e50:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e58:	3308      	adds	r3, #8
 8009e5a:	881a      	ldrh	r2, [r3, #0]
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e62:	330a      	adds	r3, #10
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	095b      	lsrs	r3, r3, #5
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e6e:	fb03 f301 	mul.w	r3, r3, r1
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8009e7a:	230d      	movs	r3, #13
 8009e7c:	e1ae      	b.n	800a1dc <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	7d1b      	ldrb	r3, [r3, #20]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	b21a      	sxth	r2, r3
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	7cdb      	ldrb	r3, [r3, #19]
 8009e8a:	b21b      	sxth	r3, r3
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	b21b      	sxth	r3, r3
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d112      	bne.n	8009ec0 <find_volume+0x384>
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009ea0:	061a      	lsls	r2, r3, #24
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009ea8:	041b      	lsls	r3, r3, #16
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8009eb2:	0212      	lsls	r2, r2, #8
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eb8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	7bdb      	ldrb	r3, [r3, #15]
 8009ec4:	021b      	lsls	r3, r3, #8
 8009ec6:	b21a      	sxth	r2, r3
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	7b9b      	ldrb	r3, [r3, #14]
 8009ecc:	b21b      	sxth	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	b21b      	sxth	r3, r3
 8009ed2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <find_volume+0x3a2>
 8009eda:	230d      	movs	r3, #13
 8009edc:	e17e      	b.n	800a1dc <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009ede:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee2:	441a      	add	r2, r3
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eea:	3308      	adds	r3, #8
 8009eec:	8819      	ldrh	r1, [r3, #0]
 8009eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef4:	330a      	adds	r3, #10
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	095b      	lsrs	r3, r3, #5
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	4413      	add	r3, r2
 8009f04:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d201      	bcs.n	8009f12 <find_volume+0x3d6>
 8009f0e:	230d      	movs	r3, #13
 8009f10:	e164      	b.n	800a1dc <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	1ad2      	subs	r2, r2, r3
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1e:	3302      	adds	r3, #2
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <find_volume+0x3f6>
 8009f2e:	230d      	movs	r3, #13
 8009f30:	e154      	b.n	800a1dc <find_volume+0x6a0>
	fmt = FS_FAT12;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d902      	bls.n	8009f48 <find_volume+0x40c>
 8009f42:	2302      	movs	r3, #2
 8009f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d902      	bls.n	8009f58 <find_volume+0x41c>
 8009f52:	2303      	movs	r3, #3
 8009f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	1c9a      	adds	r2, r3, #2
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f62:	3314      	adds	r3, #20
 8009f64:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8009f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6c:	331c      	adds	r3, #28
 8009f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f70:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009f72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f76:	441a      	add	r2, r3
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009f7e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8009f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	441a      	add	r2, r3
 8009f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f88:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8009f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f94:	2b03      	cmp	r3, #3
 8009f96:	d127      	bne.n	8009fe8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <find_volume+0x46e>
 8009fa6:	230d      	movs	r3, #13
 8009fa8:	e118      	b.n	800a1dc <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009fb0:	061a      	lsls	r2, r3, #24
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009fb8:	041b      	lsls	r3, r3, #16
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fbe:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009fc2:	0212      	lsls	r2, r2, #8
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fc8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fde:	3314      	adds	r3, #20
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe6:	e030      	b.n	800a04a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fee:	3308      	adds	r3, #8
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <find_volume+0x4be>
 8009ff6:	230d      	movs	r3, #13
 8009ff8:	e0f0      	b.n	800a1dc <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a004:	441a      	add	r2, r3
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a00c:	3304      	adds	r3, #4
 800a00e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a014:	2b02      	cmp	r3, #2
 800a016:	d106      	bne.n	800a026 <find_volume+0x4ea>
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a01e:	3314      	adds	r3, #20
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	e010      	b.n	800a048 <find_volume+0x50c>
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02c:	3314      	adds	r3, #20
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	4613      	mov	r3, r2
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	4413      	add	r3, r2
 800a036:	085a      	lsrs	r2, r3, #1
 800a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03e:	3314      	adds	r3, #20
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800a048:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a050:	3318      	adds	r3, #24
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a05a:	330a      	adds	r3, #10
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	4619      	mov	r1, r3
 800a060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a062:	440b      	add	r3, r1
 800a064:	1e59      	subs	r1, r3, #1
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06c:	330a      	adds	r3, #10
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	fbb1 f3f3 	udiv	r3, r1, r3
 800a074:	429a      	cmp	r2, r3
 800a076:	d201      	bcs.n	800a07c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800a078:	230d      	movs	r3, #13
 800a07a:	e0af      	b.n	800a1dc <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a082:	3310      	adds	r3, #16
 800a084:	f04f 32ff 	mov.w	r2, #4294967295
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a090:	3310      	adds	r3, #16
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09a:	330c      	adds	r3, #12
 800a09c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a4:	3305      	adds	r3, #5
 800a0a6:	2280      	movs	r2, #128	; 0x80
 800a0a8:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a0aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d17d      	bne.n	800a1ae <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0b8:	021b      	lsls	r3, r3, #8
 800a0ba:	b21a      	sxth	r2, r3
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0c2:	b21b      	sxth	r3, r3
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	b21b      	sxth	r3, r3
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d170      	bne.n	800a1ae <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0d4:	f7fd fed8 	bl	8007e88 <move_window>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d167      	bne.n	800a1ae <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e4:	3305      	adds	r3, #5
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ec:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800a0f0:	021b      	lsls	r3, r3, #8
 800a0f2:	b21a      	sxth	r2, r3
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a0fa:	b21b      	sxth	r3, r3
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	b21b      	sxth	r3, r3
 800a100:	4a38      	ldr	r2, [pc, #224]	; (800a1e4 <find_volume+0x6a8>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d153      	bne.n	800a1ae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	78db      	ldrb	r3, [r3, #3]
 800a10a:	061a      	lsls	r2, r3, #24
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	789b      	ldrb	r3, [r3, #2]
 800a110:	041b      	lsls	r3, r3, #16
 800a112:	4313      	orrs	r3, r2
 800a114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a116:	7852      	ldrb	r2, [r2, #1]
 800a118:	0212      	lsls	r2, r2, #8
 800a11a:	4313      	orrs	r3, r2
 800a11c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a11e:	7812      	ldrb	r2, [r2, #0]
 800a120:	4313      	orrs	r3, r2
 800a122:	4a31      	ldr	r2, [pc, #196]	; (800a1e8 <find_volume+0x6ac>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d142      	bne.n	800a1ae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800a12e:	061a      	lsls	r2, r3, #24
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800a136:	041b      	lsls	r3, r3, #16
 800a138:	4313      	orrs	r3, r2
 800a13a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a13c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800a140:	0212      	lsls	r2, r2, #8
 800a142:	4313      	orrs	r3, r2
 800a144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a146:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800a14a:	4313      	orrs	r3, r2
 800a14c:	4a27      	ldr	r2, [pc, #156]	; (800a1ec <find_volume+0x6b0>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d12d      	bne.n	800a1ae <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800a158:	061a      	lsls	r2, r3, #24
 800a15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800a160:	041b      	lsls	r3, r3, #16
 800a162:	4313      	orrs	r3, r2
 800a164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a166:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800a16a:	0212      	lsls	r2, r2, #8
 800a16c:	4313      	orrs	r3, r2
 800a16e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a170:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800a174:	431a      	orrs	r2, r3
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a17c:	3310      	adds	r3, #16
 800a17e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800a186:	061a      	lsls	r2, r3, #24
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800a18e:	041b      	lsls	r3, r3, #16
 800a190:	4313      	orrs	r3, r2
 800a192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a194:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800a198:	0212      	lsls	r2, r2, #8
 800a19a:	4313      	orrs	r3, r2
 800a19c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a19e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1aa:	330c      	adds	r3, #12
 800a1ac:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a1b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800a1ba:	4b0d      	ldr	r3, [pc, #52]	; (800a1f0 <find_volume+0x6b4>)
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	4b0b      	ldr	r3, [pc, #44]	; (800a1f0 <find_volume+0x6b4>)
 800a1c4:	801a      	strh	r2, [r3, #0]
 800a1c6:	4b0a      	ldr	r3, [pc, #40]	; (800a1f0 <find_volume+0x6b4>)
 800a1c8:	881a      	ldrh	r2, [r3, #0]
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d0:	3306      	adds	r3, #6
 800a1d2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a1d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1d6:	f7fd fdd3 	bl	8007d80 <clear_lock>
#endif

	return FR_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3758      	adds	r7, #88	; 0x58
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	ffffaa55 	.word	0xffffaa55
 800a1e8:	41615252 	.word	0x41615252
 800a1ec:	61417272 	.word	0x61417272
 800a1f0:	200000bc 	.word	0x200000bc

0800a1f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d02d      	beq.n	800a262 <validate+0x6e>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d027      	beq.n	800a262 <validate+0x6e>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d01e      	beq.n	800a262 <validate+0x6e>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a230:	3306      	adds	r3, #6
 800a232:	881a      	ldrh	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a23a:	3304      	adds	r3, #4
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d10f      	bne.n	800a262 <validate+0x6e>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a24e:	3301      	adds	r3, #1
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	4618      	mov	r0, r3
 800a254:	f7fd fade 	bl	8007814 <disk_status>
 800a258:	4603      	mov	r3, r0
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <validate+0x72>
		return FR_INVALID_OBJECT;
 800a262:	2309      	movs	r3, #9
 800a264:	e000      	b.n	800a268 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	4613      	mov	r3, r2
 800a27c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a282:	f107 0310 	add.w	r3, r7, #16
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff fba5 	bl	80099d6 <get_ldnumber>
 800a28c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	2b00      	cmp	r3, #0
 800a292:	da01      	bge.n	800a298 <f_mount+0x28>
 800a294:	230b      	movs	r3, #11
 800a296:	e02f      	b.n	800a2f8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a298:	4a19      	ldr	r2, [pc, #100]	; (800a300 <f_mount+0x90>)
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d007      	beq.n	800a2b8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800a2a8:	69b8      	ldr	r0, [r7, #24]
 800a2aa:	f7fd fd69 	bl	8007d80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d004      	beq.n	800a2c8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	490d      	ldr	r1, [pc, #52]	; (800a300 <f_mount+0x90>)
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <f_mount+0x6e>
 800a2d8:	79fb      	ldrb	r3, [r7, #7]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d001      	beq.n	800a2e2 <f_mount+0x72>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e00a      	b.n	800a2f8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a2e2:	f107 0108 	add.w	r1, r7, #8
 800a2e6:	f107 030c 	add.w	r3, r7, #12
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff fc25 	bl	8009b3c <find_volume>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3720      	adds	r7, #32
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	200000b8 	.word	0x200000b8

0800a304 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	f107 0318 	add.w	r3, r7, #24
 800a312:	3b0c      	subs	r3, #12
 800a314:	6018      	str	r0, [r3, #0]
 800a316:	f107 0318 	add.w	r3, r7, #24
 800a31a:	3b10      	subs	r3, #16
 800a31c:	6019      	str	r1, [r3, #0]
 800a31e:	f107 0318 	add.w	r3, r7, #24
 800a322:	3b11      	subs	r3, #17
 800a324:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a326:	f107 0318 	add.w	r3, r7, #24
 800a32a:	3b0c      	subs	r3, #12
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <f_open+0x32>
 800a332:	2309      	movs	r3, #9
 800a334:	e319      	b.n	800a96a <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800a336:	f107 0318 	add.w	r3, r7, #24
 800a33a:	3b0c      	subs	r3, #12
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a346:	f107 0318 	add.w	r3, r7, #24
 800a34a:	3b11      	subs	r3, #17
 800a34c:	f107 0218 	add.w	r2, r7, #24
 800a350:	3a11      	subs	r2, #17
 800a352:	7812      	ldrb	r2, [r2, #0]
 800a354:	f002 021f 	and.w	r2, r2, #31
 800a358:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a35a:	f107 0318 	add.w	r3, r7, #24
 800a35e:	3b11      	subs	r3, #17
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	f107 0118 	add.w	r1, r7, #24
 800a36c:	3910      	subs	r1, #16
 800a36e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a372:	3b18      	subs	r3, #24
 800a374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff fbdf 	bl	8009b3c <find_volume>
 800a37e:	4603      	mov	r3, r0
 800a380:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a384:	f102 0217 	add.w	r2, r2, #23
 800a388:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a38a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a38e:	f103 0317 	add.w	r3, r3, #23
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	f040 82e3 	bne.w	800a960 <f_open+0x65c>
		INIT_BUF(dj);
 800a39a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a39e:	3b18      	subs	r3, #24
 800a3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a4:	3318      	adds	r3, #24
 800a3a6:	f107 0218 	add.w	r2, r7, #24
 800a3aa:	3a04      	subs	r2, #4
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3b2:	3b18      	subs	r3, #24
 800a3b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a3b8:	4ad1      	ldr	r2, [pc, #836]	; (800a700 <f_open+0x3fc>)
 800a3ba:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a3bc:	f107 0318 	add.w	r3, r7, #24
 800a3c0:	3b10      	subs	r3, #16
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3c8:	3b18      	subs	r3, #24
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff fa89 	bl	80098e4 <follow_path>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a3d8:	f102 0217 	add.w	r2, r2, #23
 800a3dc:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800a3de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3e2:	3b18      	subs	r3, #24
 800a3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e8:	3314      	adds	r3, #20
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a3f0:	f102 0210 	add.w	r2, r2, #16
 800a3f4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a3f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a3fa:	f103 0317 	add.w	r3, r3, #23
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d126      	bne.n	800a452 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800a404:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a408:	f103 0310 	add.w	r3, r3, #16
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800a412:	2306      	movs	r3, #6
 800a414:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a418:	f102 0217 	add.w	r2, r2, #23
 800a41c:	7013      	strb	r3, [r2, #0]
 800a41e:	e018      	b.n	800a452 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a420:	f107 0318 	add.w	r3, r7, #24
 800a424:	3b11      	subs	r3, #17
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	f023 0301 	bic.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf14      	ite	ne
 800a430:	2301      	movne	r3, #1
 800a432:	2300      	moveq	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a43c:	3b18      	subs	r3, #24
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f7fd fb01 	bl	8007a48 <chk_lock>
 800a446:	4603      	mov	r3, r0
 800a448:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a44c:	f102 0217 	add.w	r2, r2, #23
 800a450:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a452:	f107 0318 	add.w	r3, r7, #24
 800a456:	3b11      	subs	r3, #17
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	f003 031c 	and.w	r3, r3, #28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 8150 	beq.w	800a704 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800a464:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a468:	f103 0317 	add.w	r3, r3, #23
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d030      	beq.n	800a4d4 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a472:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a476:	f103 0317 	add.w	r3, r3, #23
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	d112      	bne.n	800a4a6 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a480:	f7fd fb54 	bl	8007b2c <enq_lock>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d007      	beq.n	800a49a <f_open+0x196>
 800a48a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a48e:	3b18      	subs	r3, #24
 800a490:	4618      	mov	r0, r3
 800a492:	f7fe ff35 	bl	8009300 <dir_register>
 800a496:	4603      	mov	r3, r0
 800a498:	e000      	b.n	800a49c <f_open+0x198>
 800a49a:	2312      	movs	r3, #18
 800a49c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a4a0:	f102 0217 	add.w	r2, r2, #23
 800a4a4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a4a6:	f107 0318 	add.w	r3, r7, #24
 800a4aa:	3b11      	subs	r3, #17
 800a4ac:	f107 0218 	add.w	r2, r7, #24
 800a4b0:	3a11      	subs	r2, #17
 800a4b2:	7812      	ldrb	r2, [r2, #0]
 800a4b4:	f042 0208 	orr.w	r2, r2, #8
 800a4b8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800a4ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a4be:	3b18      	subs	r3, #24
 800a4c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c4:	3314      	adds	r3, #20
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a4cc:	f102 0210 	add.w	r2, r2, #16
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e01f      	b.n	800a514 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a4d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a4d8:	f103 0310 	add.w	r3, r3, #16
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330b      	adds	r3, #11
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	f003 0311 	and.w	r3, r3, #17
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d006      	beq.n	800a4f8 <f_open+0x1f4>
					res = FR_DENIED;
 800a4ea:	2307      	movs	r3, #7
 800a4ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a4f0:	f102 0217 	add.w	r2, r2, #23
 800a4f4:	7013      	strb	r3, [r2, #0]
 800a4f6:	e00d      	b.n	800a514 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a4f8:	f107 0318 	add.w	r3, r7, #24
 800a4fc:	3b11      	subs	r3, #17
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	f003 0304 	and.w	r3, r3, #4
 800a504:	2b00      	cmp	r3, #0
 800a506:	d005      	beq.n	800a514 <f_open+0x210>
						res = FR_EXIST;
 800a508:	2308      	movs	r3, #8
 800a50a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a50e:	f102 0217 	add.w	r2, r2, #23
 800a512:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a514:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a518:	f103 0317 	add.w	r3, r3, #23
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f040 8122 	bne.w	800a768 <f_open+0x464>
 800a524:	f107 0318 	add.w	r3, r7, #24
 800a528:	3b11      	subs	r3, #17
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8119 	beq.w	800a768 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800a536:	f7fd f90b 	bl	8007750 <get_fattime>
 800a53a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a53e:	f103 030c 	add.w	r3, r3, #12
 800a542:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a544:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a548:	f103 0310 	add.w	r3, r3, #16
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	330e      	adds	r3, #14
 800a550:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a554:	f102 020c 	add.w	r2, r2, #12
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	b2d2      	uxtb	r2, r2
 800a55c:	701a      	strb	r2, [r3, #0]
 800a55e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a562:	f103 030c 	add.w	r3, r3, #12
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	b29b      	uxth	r3, r3
 800a56a:	0a1b      	lsrs	r3, r3, #8
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a572:	f103 0310 	add.w	r3, r3, #16
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	330f      	adds	r3, #15
 800a57a:	b2d2      	uxtb	r2, r2
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a582:	f103 030c 	add.w	r3, r3, #12
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	0c1a      	lsrs	r2, r3, #16
 800a58a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a58e:	f103 0310 	add.w	r3, r3, #16
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3310      	adds	r3, #16
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a59e:	f103 030c 	add.w	r3, r3, #12
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	0e1a      	lsrs	r2, r3, #24
 800a5a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5aa:	f103 0310 	add.w	r3, r3, #16
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3311      	adds	r3, #17
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a5b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5ba:	f103 0310 	add.w	r3, r3, #16
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	330b      	adds	r3, #11
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a5c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5ca:	f103 0310 	add.w	r3, r3, #16
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	331c      	adds	r3, #28
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5da:	f103 0310 	add.w	r3, r3, #16
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	331d      	adds	r3, #29
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
 800a5e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5ea:	f103 0310 	add.w	r3, r3, #16
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	331e      	adds	r3, #30
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5fa:	f103 0310 	add.w	r3, r3, #16
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	331f      	adds	r3, #31
 800a602:	2200      	movs	r2, #0
 800a604:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a606:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a60a:	3b18      	subs	r3, #24
 800a60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a616:	f102 0210 	add.w	r2, r2, #16
 800a61a:	6811      	ldr	r1, [r2, #0]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fe fbae 	bl	8008d7e <ld_clust>
 800a622:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a626:	f103 0308 	add.w	r3, r3, #8
 800a62a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800a62c:	2100      	movs	r1, #0
 800a62e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a632:	f103 0310 	add.w	r3, r3, #16
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	f7fe fbd0 	bl	8008ddc <st_clust>
				dj.fs->wflag = 1;
 800a63c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a640:	3b18      	subs	r3, #24
 800a642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64c:	3304      	adds	r3, #4
 800a64e:	2201      	movs	r2, #1
 800a650:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800a652:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a656:	f103 0308 	add.w	r3, r3, #8
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 8083 	beq.w	800a768 <f_open+0x464>
					dw = dj.fs->winsect;
 800a662:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a666:	3b18      	subs	r3, #24
 800a668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a672:	330c      	adds	r3, #12
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a67a:	f102 020c 	add.w	r2, r2, #12
 800a67e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800a680:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a684:	3b18      	subs	r3, #24
 800a686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a690:	f102 0208 	add.w	r2, r2, #8
 800a694:	6811      	ldr	r1, [r2, #0]
 800a696:	4618      	mov	r0, r3
 800a698:	f7fd ff86 	bl	80085a8 <remove_chain>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a6a2:	f102 0217 	add.w	r2, r2, #23
 800a6a6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800a6a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a6ac:	f103 0317 	add.w	r3, r3, #23
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d158      	bne.n	800a768 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a6b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a6ba:	3b18      	subs	r3, #24
 800a6bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a6c6:	f102 0208 	add.w	r2, r2, #8
 800a6ca:	6812      	ldr	r2, [r2, #0]
 800a6cc:	3a01      	subs	r2, #1
 800a6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d2:	330c      	adds	r3, #12
 800a6d4:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800a6d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a6da:	3b18      	subs	r3, #24
 800a6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a6e6:	f102 020c 	add.w	r2, r2, #12
 800a6ea:	6811      	ldr	r1, [r2, #0]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fd fbcb 	bl	8007e88 <move_window>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a6f8:	f102 0217 	add.w	r2, r2, #23
 800a6fc:	7013      	strb	r3, [r2, #0]
 800a6fe:	e033      	b.n	800a768 <f_open+0x464>
 800a700:	200000d8 	.word	0x200000d8
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800a704:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a708:	f103 0317 	add.w	r3, r3, #23
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d12a      	bne.n	800a768 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a712:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a716:	f103 0310 	add.w	r3, r3, #16
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	330b      	adds	r3, #11
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	f003 0310 	and.w	r3, r3, #16
 800a724:	2b00      	cmp	r3, #0
 800a726:	d006      	beq.n	800a736 <f_open+0x432>
					res = FR_NO_FILE;
 800a728:	2304      	movs	r3, #4
 800a72a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a72e:	f102 0217 	add.w	r2, r2, #23
 800a732:	7013      	strb	r3, [r2, #0]
 800a734:	e018      	b.n	800a768 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a736:	f107 0318 	add.w	r3, r7, #24
 800a73a:	3b11      	subs	r3, #17
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d010      	beq.n	800a768 <f_open+0x464>
 800a746:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a74a:	f103 0310 	add.w	r3, r3, #16
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	330b      	adds	r3, #11
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <f_open+0x464>
						res = FR_DENIED;
 800a75c:	2307      	movs	r3, #7
 800a75e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a762:	f102 0217 	add.w	r2, r2, #23
 800a766:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800a768:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a76c:	f103 0317 	add.w	r3, r3, #23
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d15b      	bne.n	800a82e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a776:	f107 0318 	add.w	r3, r7, #24
 800a77a:	3b11      	subs	r3, #17
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	f003 0308 	and.w	r3, r3, #8
 800a782:	2b00      	cmp	r3, #0
 800a784:	d009      	beq.n	800a79a <f_open+0x496>
				mode |= FA__WRITTEN;
 800a786:	f107 0318 	add.w	r3, r7, #24
 800a78a:	3b11      	subs	r3, #17
 800a78c:	f107 0218 	add.w	r2, r7, #24
 800a790:	3a11      	subs	r2, #17
 800a792:	7812      	ldrb	r2, [r2, #0]
 800a794:	f042 0220 	orr.w	r2, r2, #32
 800a798:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a79a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a79e:	3b18      	subs	r3, #24
 800a7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a7aa:	330c      	adds	r3, #12
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	f107 0318 	add.w	r3, r7, #24
 800a7b2:	3b0c      	subs	r3, #12
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ba:	331c      	adds	r3, #28
 800a7bc:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800a7be:	f107 0318 	add.w	r3, r7, #24
 800a7c2:	3b0c      	subs	r3, #12
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a7ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a7ce:	f102 0210 	add.w	r2, r2, #16
 800a7d2:	6812      	ldr	r2, [r2, #0]
 800a7d4:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7d6:	f107 0318 	add.w	r3, r7, #24
 800a7da:	3b11      	subs	r3, #17
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	f023 0301 	bic.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bf14      	ite	ne
 800a7e6:	2301      	movne	r3, #1
 800a7e8:	2300      	moveq	r3, #0
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a7f2:	3b18      	subs	r3, #24
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fd f9bc 	bl	8007b74 <inc_lock>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	f107 0318 	add.w	r3, r7, #24
 800a802:	3b0c      	subs	r3, #12
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a80a:	3308      	adds	r3, #8
 800a80c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800a80e:	f107 0318 	add.w	r3, r7, #24
 800a812:	3b0c      	subs	r3, #12
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a81a:	3308      	adds	r3, #8
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d105      	bne.n	800a82e <f_open+0x52a>
 800a822:	2302      	movs	r3, #2
 800a824:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a828:	f102 0217 	add.w	r2, r2, #23
 800a82c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800a82e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a832:	f103 0317 	add.w	r3, r3, #23
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f040 8091 	bne.w	800a960 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800a83e:	f107 0318 	add.w	r3, r7, #24
 800a842:	3b0c      	subs	r3, #12
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a84a:	3306      	adds	r3, #6
 800a84c:	f107 0218 	add.w	r2, r7, #24
 800a850:	3a11      	subs	r2, #17
 800a852:	7812      	ldrb	r2, [r2, #0]
 800a854:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800a856:	f107 0318 	add.w	r3, r7, #24
 800a85a:	3b0c      	subs	r3, #12
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a862:	3307      	adds	r3, #7
 800a864:	2200      	movs	r2, #0
 800a866:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a868:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a86c:	3b18      	subs	r3, #24
 800a86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a878:	f102 0210 	add.w	r2, r2, #16
 800a87c:	6811      	ldr	r1, [r2, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fa7d 	bl	8008d7e <ld_clust>
 800a884:	4602      	mov	r2, r0
 800a886:	f107 0318 	add.w	r3, r7, #24
 800a88a:	3b0c      	subs	r3, #12
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a892:	3310      	adds	r3, #16
 800a894:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a896:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a89a:	f103 0310 	add.w	r3, r3, #16
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	331f      	adds	r3, #31
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	061a      	lsls	r2, r3, #24
 800a8a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a8aa:	f103 0310 	add.w	r3, r3, #16
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	331e      	adds	r3, #30
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	041b      	lsls	r3, r3, #16
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a8bc:	f102 0210 	add.w	r2, r2, #16
 800a8c0:	6812      	ldr	r2, [r2, #0]
 800a8c2:	321d      	adds	r2, #29
 800a8c4:	7812      	ldrb	r2, [r2, #0]
 800a8c6:	0212      	lsls	r2, r2, #8
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a8ce:	f102 0210 	add.w	r2, r2, #16
 800a8d2:	6812      	ldr	r2, [r2, #0]
 800a8d4:	321c      	adds	r2, #28
 800a8d6:	7812      	ldrb	r2, [r2, #0]
 800a8d8:	431a      	orrs	r2, r3
 800a8da:	f107 0318 	add.w	r3, r7, #24
 800a8de:	3b0c      	subs	r3, #12
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e6:	330c      	adds	r3, #12
 800a8e8:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800a8ea:	f107 0318 	add.w	r3, r7, #24
 800a8ee:	3b0c      	subs	r3, #12
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f6:	3308      	adds	r3, #8
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800a8fc:	f107 0318 	add.w	r3, r7, #24
 800a900:	3b0c      	subs	r3, #12
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a908:	3318      	adds	r3, #24
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800a90e:	f107 0318 	add.w	r3, r7, #24
 800a912:	3b0c      	subs	r3, #12
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a91a:	3304      	adds	r3, #4
 800a91c:	2200      	movs	r2, #0
 800a91e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800a920:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a924:	3b18      	subs	r3, #24
 800a926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	f107 0318 	add.w	r3, r7, #24
 800a930:	3b0c      	subs	r3, #12
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a938:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800a93a:	f107 0318 	add.w	r3, r7, #24
 800a93e:	3b0c      	subs	r3, #12
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a94c:	3306      	adds	r3, #6
 800a94e:	881a      	ldrh	r2, [r3, #0]
 800a950:	f107 0318 	add.w	r3, r7, #24
 800a954:	3b0c      	subs	r3, #12
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a95c:	3304      	adds	r3, #4
 800a95e:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800a960:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a964:	f103 0317 	add.w	r3, r3, #23
 800a968:	781b      	ldrb	r3, [r3, #0]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop

0800a978 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08c      	sub	sp, #48	; 0x30
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f7ff fc2f 	bl	800a1f4 <validate>
 800a996:	4603      	mov	r3, r0
 800a998:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a99a:	7ffb      	ldrb	r3, [r7, #31]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <f_read+0x2c>
 800a9a0:	7ffb      	ldrb	r3, [r7, #31]
 800a9a2:	e1fb      	b.n	800ad9c <f_read+0x424>
	if (fp->err)								/* Check error */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9aa:	3307      	adds	r3, #7
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d005      	beq.n	800a9be <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b8:	3307      	adds	r3, #7
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	e1ee      	b.n	800ad9c <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9c4:	3306      	adds	r3, #6
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a9d0:	2307      	movs	r3, #7
 800a9d2:	e1e3      	b.n	800ad9c <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9da:	330c      	adds	r3, #12
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	f240 81ce 	bls.w	800ad92 <f_read+0x41a>
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a9fa:	e1ca      	b.n	800ad92 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa02:	3308      	adds	r3, #8
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa12:	330a      	adds	r3, #10
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa1a:	fb03 f301 	mul.w	r3, r3, r1
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 8160 	bne.w	800ace6 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa3c:	330a      	adds	r3, #10
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa52:	3302      	adds	r3, #2
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d14a      	bne.n	800aafa <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d106      	bne.n	800aa80 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa78:	3310      	adds	r3, #16
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa7e:	e01f      	b.n	800aac0 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aa86:	3304      	adds	r3, #4
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00a      	beq.n	800aaa4 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa94:	3308      	adds	r3, #8
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7fd fe9d 	bl	80087da <clmt_clust>
 800aaa0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aaa2:	e00d      	b.n	800aac0 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aab2:	3314      	adds	r3, #20
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4619      	mov	r1, r3
 800aab8:	4610      	mov	r0, r2
 800aaba:	f7fd fb10 	bl	80080de <get_fat>
 800aabe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d807      	bhi.n	800aad6 <f_read+0x15e>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aacc:	3307      	adds	r3, #7
 800aace:	2202      	movs	r2, #2
 800aad0:	701a      	strb	r2, [r3, #0]
 800aad2:	2302      	movs	r3, #2
 800aad4:	e162      	b.n	800ad9c <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aadc:	d107      	bne.n	800aaee <f_read+0x176>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae4:	3307      	adds	r3, #7
 800aae6:	2201      	movs	r2, #1
 800aae8:	701a      	strb	r2, [r3, #0]
 800aaea:	2301      	movs	r3, #1
 800aaec:	e156      	b.n	800ad9c <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf4:	3314      	adds	r3, #20
 800aaf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaf8:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab08:	3314      	adds	r3, #20
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7fd fabd 	bl	800808e <clust2sect>
 800ab14:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d107      	bne.n	800ab2c <f_read+0x1b4>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab22:	3307      	adds	r3, #7
 800ab24:	2202      	movs	r2, #2
 800ab26:	701a      	strb	r2, [r3, #0]
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e137      	b.n	800ad9c <f_read+0x424>
			sect += csect;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4413      	add	r3, r2
 800ab32:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab40:	330a      	adds	r3, #10
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	461a      	mov	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d070      	beq.n	800ac36 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800ab54:	7dfa      	ldrb	r2, [r7, #23]
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	441a      	add	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab66:	3302      	adds	r3, #2
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d90b      	bls.n	800ab86 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7a:	3302      	adds	r3, #2
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab92:	3301      	adds	r3, #1
 800ab94:	7818      	ldrb	r0, [r3, #0]
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	6a39      	ldr	r1, [r7, #32]
 800ab9c:	f7fc fe7a 	bl	8007894 <disk_read>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d007      	beq.n	800abb6 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abac:	3307      	adds	r3, #7
 800abae:	2201      	movs	r2, #1
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	2301      	movs	r3, #1
 800abb4:	e0f2      	b.n	800ad9c <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbc:	3306      	adds	r3, #6
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d028      	beq.n	800ac1a <f_read+0x2a2>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abce:	3318      	adds	r3, #24
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd8:	429a      	cmp	r2, r3
 800abda:	d91e      	bls.n	800ac1a <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe2:	3318      	adds	r3, #24
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	1ad2      	subs	r2, r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf6:	330a      	adds	r3, #10
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	fb03 f302 	mul.w	r3, r3, r2
 800abfe:	6a3a      	ldr	r2, [r7, #32]
 800ac00:	18d0      	adds	r0, r2, r3
 800ac02:	68f9      	ldr	r1, [r7, #12]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac10:	330a      	adds	r3, #10
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	f7fc fe9b 	bl	8007950 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac26:	330a      	adds	r3, #10
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	fb02 f303 	mul.w	r3, r2, r3
 800ac32:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800ac34:	e093      	b.n	800ad5e <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac3c:	3318      	adds	r3, #24
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d049      	beq.n	800acda <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4c:	3306      	adds	r3, #6
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d028      	beq.n	800acaa <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac64:	3301      	adds	r3, #1
 800ac66:	7818      	ldrb	r0, [r3, #0]
 800ac68:	68f9      	ldr	r1, [r7, #12]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac70:	3318      	adds	r3, #24
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	2301      	movs	r3, #1
 800ac76:	f7fc fe2d 	bl	80078d4 <disk_write>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d007      	beq.n	800ac90 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac86:	3307      	adds	r3, #7
 800ac88:	2201      	movs	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e085      	b.n	800ad9c <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac96:	3306      	adds	r3, #6
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca6:	3306      	adds	r3, #6
 800aca8:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb6:	3301      	adds	r3, #1
 800acb8:	7818      	ldrb	r0, [r3, #0]
 800acba:	68f9      	ldr	r1, [r7, #12]
 800acbc:	2301      	movs	r3, #1
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	f7fc fde8 	bl	8007894 <disk_read>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d007      	beq.n	800acda <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd0:	3307      	adds	r3, #7
 800acd2:	2201      	movs	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	2301      	movs	r3, #1
 800acd8:	e060      	b.n	800ad9c <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace0:	3318      	adds	r3, #24
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf2:	330a      	adds	r3, #10
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	4618      	mov	r0, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acfe:	3308      	adds	r3, #8
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad0e:	330a      	adds	r3, #10
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad16:	fb03 f301 	mul.w	r3, r3, r1
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	1ac3      	subs	r3, r0, r3
 800ad1e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800ad20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d901      	bls.n	800ad2c <f_read+0x3b4>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad32:	3308      	adds	r3, #8
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad42:	330a      	adds	r3, #10
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad4a:	fb03 f301 	mul.w	r3, r3, r1
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad56:	4619      	mov	r1, r3
 800ad58:	6a38      	ldr	r0, [r7, #32]
 800ad5a:	f7fc fdf9 	bl	8007950 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ad5e:	6a3a      	ldr	r2, [r7, #32]
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	4413      	add	r3, r2
 800ad64:	623b      	str	r3, [r7, #32]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	441a      	add	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad84:	441a      	add	r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f47f ae31 	bne.w	800a9fc <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3730      	adds	r7, #48	; 0x30
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08a      	sub	sp, #40	; 0x28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
 800adb0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff fa19 	bl	800a1f4 <validate>
 800adc2:	4603      	mov	r3, r0
 800adc4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <f_write+0x2c>
 800adcc:	7dfb      	ldrb	r3, [r7, #23]
 800adce:	e258      	b.n	800b282 <f_write+0x4de>
	if (fp->err)							/* Check error */
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800add6:	3307      	adds	r3, #7
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d005      	beq.n	800adea <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade4:	3307      	adds	r3, #7
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	e24b      	b.n	800b282 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adf0:	3306      	adds	r3, #6
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800adfc:	2307      	movs	r3, #7
 800adfe:	e240      	b.n	800b282 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae06:	3308      	adds	r3, #8
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	441a      	add	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae14:	3308      	adds	r3, #8
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	f080 8208 	bcs.w	800b22e <f_write+0x48a>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800ae22:	e204      	b.n	800b22e <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae2a:	3308      	adds	r3, #8
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae3a:	330a      	adds	r3, #10
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae42:	fb03 f301 	mul.w	r3, r3, r1
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f040 818d 	bne.w	800b168 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae54:	3308      	adds	r3, #8
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae64:	330a      	adds	r3, #10
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7a:	3302      	adds	r3, #2
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	4013      	ands	r3, r2
 800ae84:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800ae86:	7dbb      	ldrb	r3, [r7, #22]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d167      	bne.n	800af5c <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae92:	3308      	adds	r3, #8
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d112      	bne.n	800aec0 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea0:	3310      	adds	r3, #16
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d129      	bne.n	800af00 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fd fbde 	bl	8008678 <create_chain>
 800aebc:	6278      	str	r0, [r7, #36]	; 0x24
 800aebe:	e01f      	b.n	800af00 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aec6:	3304      	adds	r3, #4
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00a      	beq.n	800aee4 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed4:	3308      	adds	r3, #8
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4619      	mov	r1, r3
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f7fd fc7d 	bl	80087da <clmt_clust>
 800aee0:	6278      	str	r0, [r7, #36]	; 0x24
 800aee2:	e00d      	b.n	800af00 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef2:	3314      	adds	r3, #20
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4619      	mov	r1, r3
 800aef8:	4610      	mov	r0, r2
 800aefa:	f7fd fbbd 	bl	8008678 <create_chain>
 800aefe:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 8198 	beq.w	800b238 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d107      	bne.n	800af1e <f_write+0x17a>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af14:	3307      	adds	r3, #7
 800af16:	2202      	movs	r2, #2
 800af18:	701a      	strb	r2, [r3, #0]
 800af1a:	2302      	movs	r3, #2
 800af1c:	e1b1      	b.n	800b282 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d107      	bne.n	800af36 <f_write+0x192>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af2c:	3307      	adds	r3, #7
 800af2e:	2201      	movs	r2, #1
 800af30:	701a      	strb	r2, [r3, #0]
 800af32:	2301      	movs	r3, #1
 800af34:	e1a5      	b.n	800b282 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af3c:	3314      	adds	r3, #20
 800af3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af40:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af48:	3310      	adds	r3, #16
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d105      	bne.n	800af5c <f_write+0x1b8>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af56:	3310      	adds	r3, #16
 800af58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af5a:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af62:	3306      	adds	r3, #6
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d028      	beq.n	800afc0 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af7a:	3301      	adds	r3, #1
 800af7c:	7818      	ldrb	r0, [r3, #0]
 800af7e:	68f9      	ldr	r1, [r7, #12]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af86:	3318      	adds	r3, #24
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	2301      	movs	r3, #1
 800af8c:	f7fc fca2 	bl	80078d4 <disk_write>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d007      	beq.n	800afa6 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af9c:	3307      	adds	r3, #7
 800af9e:	2201      	movs	r2, #1
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	2301      	movs	r3, #1
 800afa4:	e16d      	b.n	800b282 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afac:	3306      	adds	r3, #6
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afbc:	3306      	adds	r3, #6
 800afbe:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afce:	3314      	adds	r3, #20
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f7fd f85a 	bl	800808e <clust2sect>
 800afda:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d107      	bne.n	800aff2 <f_write+0x24e>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe8:	3307      	adds	r3, #7
 800afea:	2202      	movs	r2, #2
 800afec:	701a      	strb	r2, [r3, #0]
 800afee:	2302      	movs	r3, #2
 800aff0:	e147      	b.n	800b282 <f_write+0x4de>
			sect += csect;
 800aff2:	7dbb      	ldrb	r3, [r7, #22]
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	4413      	add	r3, r2
 800aff8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b006:	330a      	adds	r3, #10
 800b008:	881b      	ldrh	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b012:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d074      	beq.n	800b104 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b01a:	7dba      	ldrb	r2, [r7, #22]
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	441a      	add	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b02c:	3302      	adds	r3, #2
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	429a      	cmp	r2, r3
 800b032:	d90b      	bls.n	800b04c <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b040:	3302      	adds	r3, #2
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	461a      	mov	r2, r3
 800b046:	7dbb      	ldrb	r3, [r7, #22]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b058:	3301      	adds	r3, #1
 800b05a:	7818      	ldrb	r0, [r3, #0]
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	69b9      	ldr	r1, [r7, #24]
 800b062:	f7fc fc37 	bl	80078d4 <disk_write>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d007      	beq.n	800b07c <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b072:	3307      	adds	r3, #7
 800b074:	2201      	movs	r2, #1
 800b076:	701a      	strb	r2, [r3, #0]
 800b078:	2301      	movs	r3, #1
 800b07a:	e102      	b.n	800b282 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b082:	3318      	adds	r3, #24
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	69fa      	ldr	r2, [r7, #28]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d92b      	bls.n	800b0e8 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b098:	3318      	adds	r3, #24
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	1ad2      	subs	r2, r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ac:	330a      	adds	r3, #10
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	fb03 f302 	mul.w	r3, r3, r2
 800b0b4:	69ba      	ldr	r2, [r7, #24]
 800b0b6:	18d1      	adds	r1, r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c4:	330a      	adds	r3, #10
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	f7fc fc41 	bl	8007950 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d4:	3306      	adds	r3, #6
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e4:	3306      	adds	r3, #6
 800b0e6:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0f4:	330a      	adds	r3, #10
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	fb02 f303 	mul.w	r3, r2, r3
 800b100:	623b      	str	r3, [r7, #32]
				continue;
 800b102:	e07a      	b.n	800b1fa <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b10a:	3318      	adds	r3, #24
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	429a      	cmp	r2, r3
 800b112:	d023      	beq.n	800b15c <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b11a:	3308      	adds	r3, #8
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b124:	330c      	adds	r3, #12
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d217      	bcs.n	800b15c <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b138:	3301      	adds	r3, #1
 800b13a:	7818      	ldrb	r0, [r3, #0]
 800b13c:	68f9      	ldr	r1, [r7, #12]
 800b13e:	2301      	movs	r3, #1
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	f7fc fba7 	bl	8007894 <disk_read>
 800b146:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d007      	beq.n	800b15c <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b152:	3307      	adds	r3, #7
 800b154:	2201      	movs	r2, #1
 800b156:	701a      	strb	r2, [r3, #0]
 800b158:	2301      	movs	r3, #1
 800b15a:	e092      	b.n	800b282 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b162:	3318      	adds	r3, #24
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b174:	330a      	adds	r3, #10
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	4618      	mov	r0, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b180:	3308      	adds	r3, #8
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b190:	330a      	adds	r3, #10
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	fbb2 f1f3 	udiv	r1, r2, r3
 800b198:	fb03 f301 	mul.w	r3, r3, r1
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	1ac3      	subs	r3, r0, r3
 800b1a0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800b1a2:	6a3a      	ldr	r2, [r7, #32]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d901      	bls.n	800b1ae <f_write+0x40a>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1c4:	330a      	adds	r3, #10
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1cc:	fb03 f301 	mul.w	r3, r3, r1
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	6a3a      	ldr	r2, [r7, #32]
 800b1d8:	69b9      	ldr	r1, [r7, #24]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fc fbb8 	bl	8007950 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e6:	3306      	adds	r3, #6
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f6:	3306      	adds	r3, #6
 800b1f8:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800b1fa:	69ba      	ldr	r2, [r7, #24]
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	4413      	add	r3, r2
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b208:	3308      	adds	r3, #8
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	441a      	add	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b216:	3308      	adds	r3, #8
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	441a      	add	r2, r3
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f47f adf7 	bne.w	800ae24 <f_write+0x80>
 800b236:	e000      	b.n	800b23a <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b238:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b240:	3308      	adds	r3, #8
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b24a:	330c      	adds	r3, #12
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d909      	bls.n	800b266 <f_write+0x4c2>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b258:	3308      	adds	r3, #8
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b262:	330c      	adds	r3, #12
 800b264:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b26c:	3306      	adds	r3, #6
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f043 0320 	orr.w	r3, r3, #32
 800b274:	b2da      	uxtb	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b27c:	3306      	adds	r3, #6
 800b27e:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3728      	adds	r7, #40	; 0x28
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b086      	sub	sp, #24
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7fe ffae 	bl	800a1f4 <validate>
 800b298:	4603      	mov	r3, r0
 800b29a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f040 80cc 	bne.w	800b43c <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2aa:	3306      	adds	r3, #6
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	f003 0320 	and.w	r3, r3, #32
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f000 80c2 	beq.w	800b43c <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2be:	3306      	adds	r3, #6
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d022      	beq.n	800b310 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	7818      	ldrb	r0, [r3, #0]
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2e2:	3318      	adds	r3, #24
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	f7fc faf4 	bl	80078d4 <disk_write>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e0a3      	b.n	800b43e <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2fc:	3306      	adds	r3, #6
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b304:	b2da      	uxtb	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b30c:	3306      	adds	r3, #6
 800b30e:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b31e:	331c      	adds	r3, #28
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4619      	mov	r1, r3
 800b324:	4610      	mov	r0, r2
 800b326:	f7fc fdaf 	bl	8007e88 <move_window>
 800b32a:	4603      	mov	r3, r0
 800b32c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800b32e:	7dfb      	ldrb	r3, [r7, #23]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f040 8083 	bne.w	800b43c <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	330b      	adds	r3, #11
 800b344:	781a      	ldrb	r2, [r3, #0]
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	330b      	adds	r3, #11
 800b34a:	f042 0220 	orr.w	r2, r2, #32
 800b34e:	b2d2      	uxtb	r2, r2
 800b350:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b358:	330c      	adds	r3, #12
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	331c      	adds	r3, #28
 800b360:	b2d2      	uxtb	r2, r2
 800b362:	701a      	strb	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b36a:	330c      	adds	r3, #12
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	b29b      	uxth	r3, r3
 800b370:	0a1b      	lsrs	r3, r3, #8
 800b372:	b29a      	uxth	r2, r3
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	331d      	adds	r3, #29
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b382:	330c      	adds	r3, #12
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	0c1a      	lsrs	r2, r3, #16
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	331e      	adds	r3, #30
 800b38c:	b2d2      	uxtb	r2, r2
 800b38e:	701a      	strb	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b396:	330c      	adds	r3, #12
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	0e1a      	lsrs	r2, r3, #24
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	331f      	adds	r3, #31
 800b3a0:	b2d2      	uxtb	r2, r2
 800b3a2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3aa:	3310      	adds	r3, #16
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6938      	ldr	r0, [r7, #16]
 800b3b2:	f7fd fd13 	bl	8008ddc <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800b3b6:	f7fc f9cb 	bl	8007750 <get_fattime>
 800b3ba:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	3316      	adds	r3, #22
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	b2d2      	uxtb	r2, r2
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	0a1b      	lsrs	r3, r3, #8
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	3317      	adds	r3, #23
 800b3d2:	b2d2      	uxtb	r2, r2
 800b3d4:	701a      	strb	r2, [r3, #0]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	0c1a      	lsrs	r2, r3, #16
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	3318      	adds	r3, #24
 800b3de:	b2d2      	uxtb	r2, r2
 800b3e0:	701a      	strb	r2, [r3, #0]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	0e1a      	lsrs	r2, r3, #24
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	3319      	adds	r3, #25
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	3312      	adds	r3, #18
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	3313      	adds	r3, #19
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b404:	3306      	adds	r3, #6
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	f023 0320 	bic.w	r3, r3, #32
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b414:	3306      	adds	r3, #6
 800b416:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b424:	3304      	adds	r3, #4
 800b426:	2201      	movs	r2, #1
 800b428:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4618      	mov	r0, r3
 800b434:	f7fc fd5c 	bl	8007ef0 <sync_fs>
 800b438:	4603      	mov	r3, r0
 800b43a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b084      	sub	sp, #16
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7ff ff1b 	bl	800b28a <f_sync>
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b458:	7bfb      	ldrb	r3, [r7, #15]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d119      	bne.n	800b492 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7fe fec8 	bl	800a1f4 <validate>
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d111      	bne.n	800b492 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b474:	3308      	adds	r3, #8
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fc fc3d 	bl	8007cf8 <dec_lock>
 800b47e:	4603      	mov	r3, r0
 800b480:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b482:	7bfb      	ldrb	r3, [r7, #15]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d104      	bne.n	800b492 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b48e:	2200      	movs	r2, #0
 800b490:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b090      	sub	sp, #64	; 0x40
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7fe fea4 	bl	800a1f4 <validate>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b4b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <f_lseek+0x24>
 800b4ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b4be:	e31d      	b.n	800bafc <f_lseek+0x660>
	if (fp->err)						/* Check error */
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4c6:	3307      	adds	r3, #7
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d005      	beq.n	800b4da <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4d4:	3307      	adds	r3, #7
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	e310      	b.n	800bafc <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 813c 	beq.w	800b762 <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f0:	d172      	bne.n	800b5d8 <f_lseek+0x13c>
			tbl = fp->cltbl;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	1d1a      	adds	r2, r3, #4
 800b502:	627a      	str	r2, [r7, #36]	; 0x24
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	2302      	movs	r3, #2
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b512:	3310      	adds	r3, #16
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d049      	beq.n	800b5b2 <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	613b      	str	r3, [r7, #16]
 800b522:	2300      	movs	r3, #0
 800b524:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b528:	3302      	adds	r3, #2
 800b52a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	3301      	adds	r3, #1
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b540:	4618      	mov	r0, r3
 800b542:	f7fc fdcc 	bl	80080de <get_fat>
 800b546:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d807      	bhi.n	800b55e <f_lseek+0xc2>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b554:	3307      	adds	r3, #7
 800b556:	2202      	movs	r2, #2
 800b558:	701a      	strb	r2, [r3, #0]
 800b55a:	2302      	movs	r3, #2
 800b55c:	e2ce      	b.n	800bafc <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d107      	bne.n	800b576 <f_lseek+0xda>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b56c:	3307      	adds	r3, #7
 800b56e:	2201      	movs	r2, #1
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	2301      	movs	r3, #1
 800b574:	e2c2      	b.n	800bafc <f_lseek+0x660>
					} while (cl == pcl + 1);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3301      	adds	r3, #1
 800b57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d0d5      	beq.n	800b52c <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	429a      	cmp	r2, r3
 800b586:	d809      	bhi.n	800b59c <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	1d1a      	adds	r2, r3, #4
 800b58c:	627a      	str	r2, [r7, #36]	; 0x24
 800b58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b594:	1d1a      	adds	r2, r3, #4
 800b596:	627a      	str	r2, [r7, #36]	; 0x24
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a8:	3314      	adds	r3, #20
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d3b5      	bcc.n	800b51e <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5be:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800b5c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d803      	bhi.n	800b5d0 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	e293      	b.n	800baf8 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b5d0:	2311      	movs	r3, #17
 800b5d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b5d6:	e28f      	b.n	800baf8 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5de:	330c      	adds	r3, #12
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d905      	bls.n	800b5f4 <f_lseek+0x158>
				ofs = fp->fsize;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ee:	330c      	adds	r3, #12
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	601a      	str	r2, [r3, #0]
			if (ofs) {
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 8278 	beq.w	800baf8 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7fd f8e3 	bl	80087da <clmt_clust>
 800b614:	4602      	mov	r2, r0
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b61c:	3314      	adds	r3, #20
 800b61e:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b62e:	3314      	adds	r3, #20
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4619      	mov	r1, r3
 800b634:	4610      	mov	r0, r2
 800b636:	f7fc fd2a 	bl	800808e <clust2sect>
 800b63a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d107      	bne.n	800b652 <f_lseek+0x1b6>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b648:	3307      	adds	r3, #7
 800b64a:	2202      	movs	r2, #2
 800b64c:	701a      	strb	r2, [r3, #0]
 800b64e:	2302      	movs	r3, #2
 800b650:	e254      	b.n	800bafc <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	1e5a      	subs	r2, r3, #1
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b662:	330a      	adds	r3, #10
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	fbb2 f2f3 	udiv	r2, r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b676:	3302      	adds	r3, #2
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	4013      	ands	r3, r2
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	4413      	add	r3, r2
 800b682:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b68a:	3308      	adds	r3, #8
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b69a:	330a      	adds	r3, #10
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6a2:	fb03 f301 	mul.w	r3, r3, r1
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 8225 	beq.w	800baf8 <f_lseek+0x65c>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6b4:	3318      	adds	r3, #24
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	69ba      	ldr	r2, [r7, #24]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	f000 821c 	beq.w	800baf8 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c6:	3306      	adds	r3, #6
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d028      	beq.n	800b724 <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6de:	3301      	adds	r3, #1
 800b6e0:	7818      	ldrb	r0, [r3, #0]
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ea:	3318      	adds	r3, #24
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f7fc f8f0 	bl	80078d4 <disk_write>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d007      	beq.n	800b70a <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b700:	3307      	adds	r3, #7
 800b702:	2201      	movs	r2, #1
 800b704:	701a      	strb	r2, [r3, #0]
 800b706:	2301      	movs	r3, #1
 800b708:	e1f8      	b.n	800bafc <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b710:	3306      	adds	r3, #6
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b720:	3306      	adds	r3, #6
 800b722:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b730:	3301      	adds	r3, #1
 800b732:	7818      	ldrb	r0, [r3, #0]
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	2301      	movs	r3, #1
 800b738:	69ba      	ldr	r2, [r7, #24]
 800b73a:	f7fc f8ab 	bl	8007894 <disk_read>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b74a:	3307      	adds	r3, #7
 800b74c:	2201      	movs	r2, #1
 800b74e:	701a      	strb	r2, [r3, #0]
 800b750:	2301      	movs	r3, #1
 800b752:	e1d3      	b.n	800bafc <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b75a:	3318      	adds	r3, #24
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	e1ca      	b.n	800baf8 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b768:	330c      	adds	r3, #12
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d90e      	bls.n	800b790 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b778:	3306      	adds	r3, #6
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	f003 0302 	and.w	r3, r3, #2
 800b780:	2b00      	cmp	r3, #0
 800b782:	d105      	bne.n	800b790 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b78a:	330c      	adds	r3, #12
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b796:	3308      	adds	r3, #8
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b79c:	2300      	movs	r3, #0
 800b79e:	637b      	str	r3, [r7, #52]	; 0x34
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7aa:	601a      	str	r2, [r3, #0]
		if (ofs) {
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8113 	beq.w	800b9da <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7c0:	3302      	adds	r3, #2
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d2:	330a      	adds	r3, #10
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	fb03 f302 	mul.w	r3, r3, r2
 800b7da:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d024      	beq.n	800b82c <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	1e5a      	subs	r2, r3, #1
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	1e59      	subs	r1, r3, #1
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d318      	bcc.n	800b82c <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b7fa:	6a3b      	ldr	r3, [r7, #32]
 800b7fc:	1e5a      	subs	r2, r3, #1
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	425b      	negs	r3, r3
 800b802:	401a      	ands	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b80a:	3308      	adds	r3, #8
 800b80c:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b814:	3308      	adds	r3, #8
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	683a      	ldr	r2, [r7, #0]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b824:	3314      	adds	r3, #20
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	63bb      	str	r3, [r7, #56]	; 0x38
 800b82a:	e034      	b.n	800b896 <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b832:	3310      	adds	r3, #16
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d125      	bne.n	800b88a <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2100      	movs	r1, #0
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fc ff15 	bl	8008678 <create_chain>
 800b84e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	2b01      	cmp	r3, #1
 800b854:	d107      	bne.n	800b866 <f_lseek+0x3ca>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b85c:	3307      	adds	r3, #7
 800b85e:	2202      	movs	r2, #2
 800b860:	701a      	strb	r2, [r3, #0]
 800b862:	2302      	movs	r3, #2
 800b864:	e14a      	b.n	800bafc <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86c:	d107      	bne.n	800b87e <f_lseek+0x3e2>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b874:	3307      	adds	r3, #7
 800b876:	2201      	movs	r2, #1
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	2301      	movs	r3, #1
 800b87c:	e13e      	b.n	800bafc <f_lseek+0x660>
					fp->sclust = clst;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b884:	3310      	adds	r3, #16
 800b886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b888:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b890:	3314      	adds	r3, #20
 800b892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b894:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 809e 	beq.w	800b9da <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 800b89e:	e058      	b.n	800b952 <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a6:	3306      	adds	r3, #6
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00e      	beq.n	800b8d0 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fc fedb 	bl	8008678 <create_chain>
 800b8c2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10b      	bne.n	800b8e2 <f_lseek+0x446>
							ofs = bcs; break;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	603b      	str	r3, [r7, #0]
 800b8ce:	e044      	b.n	800b95a <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fc fbff 	bl	80080de <get_fat>
 800b8e0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e8:	d107      	bne.n	800b8fa <f_lseek+0x45e>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f0:	3307      	adds	r3, #7
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	701a      	strb	r2, [r3, #0]
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e100      	b.n	800bafc <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d90a      	bls.n	800b916 <f_lseek+0x47a>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b90c:	3314      	adds	r3, #20
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b912:	429a      	cmp	r2, r3
 800b914:	d307      	bcc.n	800b926 <f_lseek+0x48a>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91c:	3307      	adds	r3, #7
 800b91e:	2202      	movs	r2, #2
 800b920:	701a      	strb	r2, [r3, #0]
 800b922:	2302      	movs	r3, #2
 800b924:	e0ea      	b.n	800bafc <f_lseek+0x660>
					fp->clust = clst;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b92c:	3314      	adds	r3, #20
 800b92e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b930:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b938:	3308      	adds	r3, #8
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	441a      	add	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b946:	3308      	adds	r3, #8
 800b948:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	429a      	cmp	r2, r3
 800b958:	d8a2      	bhi.n	800b8a0 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b960:	3308      	adds	r3, #8
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	441a      	add	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b96e:	3308      	adds	r3, #8
 800b970:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b97e:	330a      	adds	r3, #10
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	fbb3 f1f2 	udiv	r1, r3, r2
 800b98a:	fb02 f201 	mul.w	r2, r2, r1
 800b98e:	1a9b      	subs	r3, r3, r2
 800b990:	2b00      	cmp	r3, #0
 800b992:	d022      	beq.n	800b9da <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fc fb75 	bl	800808e <clust2sect>
 800b9a4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d107      	bne.n	800b9bc <f_lseek+0x520>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b2:	3307      	adds	r3, #7
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	701a      	strb	r2, [r3, #0]
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e09f      	b.n	800bafc <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c8:	330a      	adds	r3, #10
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9d6:	4413      	add	r3, r2
 800b9d8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f0:	330a      	adds	r3, #10
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b9f8:	fb03 f301 	mul.w	r3, r3, r1
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d057      	beq.n	800bab2 <f_lseek+0x616>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba08:	3318      	adds	r3, #24
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d04f      	beq.n	800bab2 <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba18:	3306      	adds	r3, #6
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d028      	beq.n	800ba76 <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba30:	3301      	adds	r3, #1
 800ba32:	7818      	ldrb	r0, [r3, #0]
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba3c:	3318      	adds	r3, #24
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	2301      	movs	r3, #1
 800ba42:	f7fb ff47 	bl	80078d4 <disk_write>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d007      	beq.n	800ba5c <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba52:	3307      	adds	r3, #7
 800ba54:	2201      	movs	r2, #1
 800ba56:	701a      	strb	r2, [r3, #0]
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e04f      	b.n	800bafc <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba62:	3306      	adds	r3, #6
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba72:	3306      	adds	r3, #6
 800ba74:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba82:	3301      	adds	r3, #1
 800ba84:	7818      	ldrb	r0, [r3, #0]
 800ba86:	6879      	ldr	r1, [r7, #4]
 800ba88:	2301      	movs	r3, #1
 800ba8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba8c:	f7fb ff02 	bl	8007894 <disk_read>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d007      	beq.n	800baa6 <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba9c:	3307      	adds	r3, #7
 800ba9e:	2201      	movs	r2, #1
 800baa0:	701a      	strb	r2, [r3, #0]
 800baa2:	2301      	movs	r3, #1
 800baa4:	e02a      	b.n	800bafc <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baac:	3318      	adds	r3, #24
 800baae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bab0:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab8:	3308      	adds	r3, #8
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bac2:	330c      	adds	r3, #12
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d916      	bls.n	800baf8 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bad0:	3308      	adds	r3, #8
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bada:	330c      	adds	r3, #12
 800badc:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae4:	3306      	adds	r3, #6
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f043 0320 	orr.w	r3, r3, #32
 800baec:	b2da      	uxtb	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf4:	3306      	adds	r3, #6
 800baf6:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800baf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3740      	adds	r7, #64	; 0x40
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08e      	sub	sp, #56	; 0x38
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800bb10:	f107 030c 	add.w	r3, r7, #12
 800bb14:	2200      	movs	r2, #0
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7fe f80f 	bl	8009b3c <find_volume>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800bb2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f040 80c4 	bne.w	800bcbc <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb3a:	3310      	adds	r3, #16
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb44:	3314      	adds	r3, #20
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3b02      	subs	r3, #2
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d807      	bhi.n	800bb5e <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb54:	3310      	adds	r3, #16
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	e0ae      	b.n	800bcbc <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800bb6c:	7efb      	ldrb	r3, [r7, #27]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d127      	bne.n	800bbc2 <f_getfree+0xbe>
				clst = 2;
 800bb72:	2302      	movs	r3, #2
 800bb74:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800bb76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb78:	69f8      	ldr	r0, [r7, #28]
 800bb7a:	f7fc fab0 	bl	80080de <get_fat>
 800bb7e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb86:	d103      	bne.n	800bb90 <f_getfree+0x8c>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb8e:	e07f      	b.n	800bc90 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d103      	bne.n	800bb9e <f_getfree+0x9a>
 800bb96:	2302      	movs	r3, #2
 800bb98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb9c:	e078      	b.n	800bc90 <f_getfree+0x18c>
					if (stat == 0) n++;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <f_getfree+0xa6>
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	3301      	adds	r3, #1
 800bba8:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800bbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbac:	3301      	adds	r3, #1
 800bbae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb6:	3314      	adds	r3, #20
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d3da      	bcc.n	800bb76 <f_getfree+0x72>
 800bbc0:	e066      	b.n	800bc90 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc8:	3314      	adds	r3, #20
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	627b      	str	r3, [r7, #36]	; 0x24
 800bbdc:	2300      	movs	r3, #0
 800bbde:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d115      	bne.n	800bc12 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800bbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	62ba      	str	r2, [r7, #40]	; 0x28
 800bbec:	4619      	mov	r1, r3
 800bbee:	69f8      	ldr	r0, [r7, #28]
 800bbf0:	f7fc f94a 	bl	8007e88 <move_window>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800bbfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d145      	bne.n	800bc8e <f_getfree+0x18a>
						p = fs->win.d8;
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0c:	330a      	adds	r3, #10
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800bc12:	7efb      	ldrb	r3, [r7, #27]
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d115      	bne.n	800bc44 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	021b      	lsls	r3, r3, #8
 800bc20:	b21a      	sxth	r2, r3
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	b21b      	sxth	r3, r3
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	b21b      	sxth	r3, r3
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <f_getfree+0x132>
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	3301      	adds	r3, #1
 800bc34:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	3302      	adds	r3, #2
 800bc3a:	623b      	str	r3, [r7, #32]
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	3b02      	subs	r3, #2
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
 800bc42:	e01d      	b.n	800bc80 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800bc44:	6a3b      	ldr	r3, [r7, #32]
 800bc46:	3303      	adds	r3, #3
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	061a      	lsls	r2, r3, #24
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	3302      	adds	r3, #2
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	041b      	lsls	r3, r3, #16
 800bc54:	4313      	orrs	r3, r2
 800bc56:	6a3a      	ldr	r2, [r7, #32]
 800bc58:	3201      	adds	r2, #1
 800bc5a:	7812      	ldrb	r2, [r2, #0]
 800bc5c:	0212      	lsls	r2, r2, #8
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	6a3a      	ldr	r2, [r7, #32]
 800bc62:	7812      	ldrb	r2, [r2, #0]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <f_getfree+0x170>
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	3301      	adds	r3, #1
 800bc72:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	3304      	adds	r3, #4
 800bc78:	623b      	str	r3, [r7, #32]
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	3b04      	subs	r3, #4
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	3b01      	subs	r3, #1
 800bc84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1a9      	bne.n	800bbe0 <f_getfree+0xdc>
 800bc8c:	e000      	b.n	800bc90 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800bc8e:	bf00      	nop
			}
			fs->free_clust = n;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc96:	3310      	adds	r3, #16
 800bc98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc9a:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bca2:	3305      	adds	r3, #5
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	f043 0301 	orr.w	r3, r3, #1
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcb2:	3305      	adds	r3, #5
 800bcb4:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcba:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800bcbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3738      	adds	r7, #56	; 0x38
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
	int n = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800bcdc:	e01b      	b.n	800bd16 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800bcde:	f107 0310 	add.w	r3, r7, #16
 800bce2:	f107 0114 	add.w	r1, r7, #20
 800bce6:	2201      	movs	r2, #1
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7fe fe45 	bl	800a978 <f_read>
		if (rc != 1) break;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d116      	bne.n	800bd22 <f_gets+0x5a>
		c = s[0];
 800bcf4:	7d3b      	ldrb	r3, [r7, #20]
 800bcf6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	2b0d      	cmp	r3, #13
 800bcfc:	d100      	bne.n	800bd00 <f_gets+0x38>
 800bcfe:	e00a      	b.n	800bd16 <f_gets+0x4e>
		*p++ = c;
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	61ba      	str	r2, [r7, #24]
 800bd06:	7dfa      	ldrb	r2, [r7, #23]
 800bd08:	701a      	strb	r2, [r3, #0]
		n++;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	2b0a      	cmp	r3, #10
 800bd14:	d007      	beq.n	800bd26 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	69fa      	ldr	r2, [r7, #28]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	dbde      	blt.n	800bcde <f_gets+0x16>
 800bd20:	e002      	b.n	800bd28 <f_gets+0x60>
		if (rc != 1) break;
 800bd22:	bf00      	nop
 800bd24:	e000      	b.n	800bd28 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800bd26:	bf00      	nop
	}
	*p = 0;
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <f_gets+0x70>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	e000      	b.n	800bd3a <f_gets+0x72>
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3720      	adds	r7, #32
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b084      	sub	sp, #16
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800bd4e:	78fb      	ldrb	r3, [r7, #3]
 800bd50:	2b0a      	cmp	r3, #10
 800bd52:	d103      	bne.n	800bd5c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800bd54:	210d      	movs	r1, #13
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7ff fff3 	bl	800bd42 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	db25      	blt.n	800bdb4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	60fa      	str	r2, [r7, #12]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	4413      	add	r3, r2
 800bd72:	78fa      	ldrb	r2, [r7, #3]
 800bd74:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2b3c      	cmp	r3, #60	; 0x3c
 800bd7a:	dd12      	ble.n	800bda2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6818      	ldr	r0, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f103 010c 	add.w	r1, r3, #12
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	f107 0308 	add.w	r3, r7, #8
 800bd8c:	f7ff f80a 	bl	800ada4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d101      	bne.n	800bd9c <putc_bfd+0x5a>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	e001      	b.n	800bda0 <putc_bfd+0x5e>
 800bd9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bda0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	609a      	str	r2, [r3, #8]
 800bdb2:	e000      	b.n	800bdb6 <putc_bfd+0x74>
	if (i < 0) return;
 800bdb4:	bf00      	nop
}
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800bdbc:	b590      	push	{r4, r7, lr}
 800bdbe:	b097      	sub	sp, #92	; 0x5c
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	613b      	str	r3, [r7, #16]
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800bdd2:	e009      	b.n	800bde8 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	607a      	str	r2, [r7, #4]
 800bdda:	781a      	ldrb	r2, [r3, #0]
 800bddc:	f107 030c 	add.w	r3, r7, #12
 800bde0:	4611      	mov	r1, r2
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff ffad 	bl	800bd42 <putc_bfd>
	while (*str)			/* Put the string */
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1f1      	bne.n	800bdd4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	db15      	blt.n	800be22 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	461c      	mov	r4, r3
 800bdfc:	f107 0208 	add.w	r2, r7, #8
 800be00:	f107 030c 	add.w	r3, r7, #12
 800be04:	f103 010c 	add.w	r1, r3, #12
 800be08:	4613      	mov	r3, r2
 800be0a:	4622      	mov	r2, r4
 800be0c:	f7fe ffca 	bl	800ada4 <f_write>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d105      	bne.n	800be22 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d101      	bne.n	800be22 <f_puts+0x66>
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	e001      	b.n	800be26 <f_puts+0x6a>
	return EOF;
 800be22:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be26:	4618      	mov	r0, r3
 800be28:	375c      	adds	r7, #92	; 0x5c
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd90      	pop	{r4, r7, pc}
	...

0800be30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	4613      	mov	r3, r2
 800be3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be3e:	2301      	movs	r3, #1
 800be40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800be46:	4b1f      	ldr	r3, [pc, #124]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be48:	7a5b      	ldrb	r3, [r3, #9]
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d831      	bhi.n	800beb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be50:	4b1c      	ldr	r3, [pc, #112]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be52:	7a5b      	ldrb	r3, [r3, #9]
 800be54:	b2db      	uxtb	r3, r3
 800be56:	461a      	mov	r2, r3
 800be58:	4b1a      	ldr	r3, [pc, #104]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be5a:	2100      	movs	r1, #0
 800be5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800be5e:	4b19      	ldr	r3, [pc, #100]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be60:	7a5b      	ldrb	r3, [r3, #9]
 800be62:	b2db      	uxtb	r3, r3
 800be64:	4a17      	ldr	r2, [pc, #92]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800be6e:	4b15      	ldr	r3, [pc, #84]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be70:	7a5b      	ldrb	r3, [r3, #9]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	461a      	mov	r2, r3
 800be76:	4b13      	ldr	r3, [pc, #76]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be78:	4413      	add	r3, r2
 800be7a:	79fa      	ldrb	r2, [r7, #7]
 800be7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be7e:	4b11      	ldr	r3, [pc, #68]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be80:	7a5b      	ldrb	r3, [r3, #9]
 800be82:	b2db      	uxtb	r3, r3
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	b2d1      	uxtb	r1, r2
 800be88:	4a0e      	ldr	r2, [pc, #56]	; (800bec4 <FATFS_LinkDriverEx+0x94>)
 800be8a:	7251      	strb	r1, [r2, #9]
 800be8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be8e:	7dbb      	ldrb	r3, [r7, #22]
 800be90:	3330      	adds	r3, #48	; 0x30
 800be92:	b2da      	uxtb	r2, r3
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	3301      	adds	r3, #1
 800be9c:	223a      	movs	r2, #58	; 0x3a
 800be9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	3302      	adds	r3, #2
 800bea4:	222f      	movs	r2, #47	; 0x2f
 800bea6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	3303      	adds	r3, #3
 800beac:	2200      	movs	r2, #0
 800beae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800beb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	200002d8 	.word	0x200002d8

0800bec8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bed2:	2200      	movs	r2, #0
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff ffaa 	bl	800be30 <FATFS_LinkDriverEx>
 800bedc:	4603      	mov	r3, r0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	6039      	str	r1, [r7, #0]
 800bef2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bef4:	88fb      	ldrh	r3, [r7, #6]
 800bef6:	2b7f      	cmp	r3, #127	; 0x7f
 800bef8:	d802      	bhi.n	800bf00 <ff_convert+0x18>
		c = chr;
 800befa:	88fb      	ldrh	r3, [r7, #6]
 800befc:	81fb      	strh	r3, [r7, #14]
 800befe:	e025      	b.n	800bf4c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00b      	beq.n	800bf1e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bf06:	88fb      	ldrh	r3, [r7, #6]
 800bf08:	2bff      	cmp	r3, #255	; 0xff
 800bf0a:	d805      	bhi.n	800bf18 <ff_convert+0x30>
 800bf0c:	88fb      	ldrh	r3, [r7, #6]
 800bf0e:	3b80      	subs	r3, #128	; 0x80
 800bf10:	4a12      	ldr	r2, [pc, #72]	; (800bf5c <ff_convert+0x74>)
 800bf12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf16:	e000      	b.n	800bf1a <ff_convert+0x32>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	81fb      	strh	r3, [r7, #14]
 800bf1c:	e016      	b.n	800bf4c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800bf1e:	2300      	movs	r3, #0
 800bf20:	81fb      	strh	r3, [r7, #14]
 800bf22:	e009      	b.n	800bf38 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bf24:	89fb      	ldrh	r3, [r7, #14]
 800bf26:	4a0d      	ldr	r2, [pc, #52]	; (800bf5c <ff_convert+0x74>)
 800bf28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2c:	88fa      	ldrh	r2, [r7, #6]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d006      	beq.n	800bf40 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bf32:	89fb      	ldrh	r3, [r7, #14]
 800bf34:	3301      	adds	r3, #1
 800bf36:	81fb      	strh	r3, [r7, #14]
 800bf38:	89fb      	ldrh	r3, [r7, #14]
 800bf3a:	2b7f      	cmp	r3, #127	; 0x7f
 800bf3c:	d9f2      	bls.n	800bf24 <ff_convert+0x3c>
 800bf3e:	e000      	b.n	800bf42 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bf40:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bf42:	89fb      	ldrh	r3, [r7, #14]
 800bf44:	3380      	adds	r3, #128	; 0x80
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bf4c:	89fb      	ldrh	r3, [r7, #14]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	0800cd98 	.word	0x0800cd98

0800bf60 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60fb      	str	r3, [r7, #12]
 800bf6e:	e002      	b.n	800bf76 <ff_wtoupper+0x16>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3301      	adds	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
 800bf76:	4a0f      	ldr	r2, [pc, #60]	; (800bfb4 <ff_wtoupper+0x54>)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d006      	beq.n	800bf90 <ff_wtoupper+0x30>
 800bf82:	4a0c      	ldr	r2, [pc, #48]	; (800bfb4 <ff_wtoupper+0x54>)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf8a:	88fa      	ldrh	r2, [r7, #6]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d1ef      	bne.n	800bf70 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800bf90:	4a08      	ldr	r2, [pc, #32]	; (800bfb4 <ff_wtoupper+0x54>)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d004      	beq.n	800bfa6 <ff_wtoupper+0x46>
 800bf9c:	4a06      	ldr	r2, [pc, #24]	; (800bfb8 <ff_wtoupper+0x58>)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfa4:	e000      	b.n	800bfa8 <ff_wtoupper+0x48>
 800bfa6:	88fb      	ldrh	r3, [r7, #6]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	0800ce98 	.word	0x0800ce98
 800bfb8:	0800d078 	.word	0x0800d078

0800bfbc <__errno>:
 800bfbc:	4b01      	ldr	r3, [pc, #4]	; (800bfc4 <__errno+0x8>)
 800bfbe:	6818      	ldr	r0, [r3, #0]
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	20000024 	.word	0x20000024

0800bfc8 <__libc_init_array>:
 800bfc8:	b570      	push	{r4, r5, r6, lr}
 800bfca:	4d0d      	ldr	r5, [pc, #52]	; (800c000 <__libc_init_array+0x38>)
 800bfcc:	4c0d      	ldr	r4, [pc, #52]	; (800c004 <__libc_init_array+0x3c>)
 800bfce:	1b64      	subs	r4, r4, r5
 800bfd0:	10a4      	asrs	r4, r4, #2
 800bfd2:	2600      	movs	r6, #0
 800bfd4:	42a6      	cmp	r6, r4
 800bfd6:	d109      	bne.n	800bfec <__libc_init_array+0x24>
 800bfd8:	4d0b      	ldr	r5, [pc, #44]	; (800c008 <__libc_init_array+0x40>)
 800bfda:	4c0c      	ldr	r4, [pc, #48]	; (800c00c <__libc_init_array+0x44>)
 800bfdc:	f000 fc4e 	bl	800c87c <_init>
 800bfe0:	1b64      	subs	r4, r4, r5
 800bfe2:	10a4      	asrs	r4, r4, #2
 800bfe4:	2600      	movs	r6, #0
 800bfe6:	42a6      	cmp	r6, r4
 800bfe8:	d105      	bne.n	800bff6 <__libc_init_array+0x2e>
 800bfea:	bd70      	pop	{r4, r5, r6, pc}
 800bfec:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff0:	4798      	blx	r3
 800bff2:	3601      	adds	r6, #1
 800bff4:	e7ee      	b.n	800bfd4 <__libc_init_array+0xc>
 800bff6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bffa:	4798      	blx	r3
 800bffc:	3601      	adds	r6, #1
 800bffe:	e7f2      	b.n	800bfe6 <__libc_init_array+0x1e>
 800c000:	0800d28c 	.word	0x0800d28c
 800c004:	0800d28c 	.word	0x0800d28c
 800c008:	0800d28c 	.word	0x0800d28c
 800c00c:	0800d290 	.word	0x0800d290

0800c010 <memcpy>:
 800c010:	440a      	add	r2, r1
 800c012:	4291      	cmp	r1, r2
 800c014:	f100 33ff 	add.w	r3, r0, #4294967295
 800c018:	d100      	bne.n	800c01c <memcpy+0xc>
 800c01a:	4770      	bx	lr
 800c01c:	b510      	push	{r4, lr}
 800c01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c022:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c026:	4291      	cmp	r1, r2
 800c028:	d1f9      	bne.n	800c01e <memcpy+0xe>
 800c02a:	bd10      	pop	{r4, pc}

0800c02c <memset>:
 800c02c:	4402      	add	r2, r0
 800c02e:	4603      	mov	r3, r0
 800c030:	4293      	cmp	r3, r2
 800c032:	d100      	bne.n	800c036 <memset+0xa>
 800c034:	4770      	bx	lr
 800c036:	f803 1b01 	strb.w	r1, [r3], #1
 800c03a:	e7f9      	b.n	800c030 <memset+0x4>

0800c03c <_free_r>:
 800c03c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c03e:	2900      	cmp	r1, #0
 800c040:	d048      	beq.n	800c0d4 <_free_r+0x98>
 800c042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c046:	9001      	str	r0, [sp, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f1a1 0404 	sub.w	r4, r1, #4
 800c04e:	bfb8      	it	lt
 800c050:	18e4      	addlt	r4, r4, r3
 800c052:	f000 f8cd 	bl	800c1f0 <__malloc_lock>
 800c056:	4a20      	ldr	r2, [pc, #128]	; (800c0d8 <_free_r+0x9c>)
 800c058:	9801      	ldr	r0, [sp, #4]
 800c05a:	6813      	ldr	r3, [r2, #0]
 800c05c:	4615      	mov	r5, r2
 800c05e:	b933      	cbnz	r3, 800c06e <_free_r+0x32>
 800c060:	6063      	str	r3, [r4, #4]
 800c062:	6014      	str	r4, [r2, #0]
 800c064:	b003      	add	sp, #12
 800c066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c06a:	f000 b8c7 	b.w	800c1fc <__malloc_unlock>
 800c06e:	42a3      	cmp	r3, r4
 800c070:	d90b      	bls.n	800c08a <_free_r+0x4e>
 800c072:	6821      	ldr	r1, [r4, #0]
 800c074:	1862      	adds	r2, r4, r1
 800c076:	4293      	cmp	r3, r2
 800c078:	bf04      	itt	eq
 800c07a:	681a      	ldreq	r2, [r3, #0]
 800c07c:	685b      	ldreq	r3, [r3, #4]
 800c07e:	6063      	str	r3, [r4, #4]
 800c080:	bf04      	itt	eq
 800c082:	1852      	addeq	r2, r2, r1
 800c084:	6022      	streq	r2, [r4, #0]
 800c086:	602c      	str	r4, [r5, #0]
 800c088:	e7ec      	b.n	800c064 <_free_r+0x28>
 800c08a:	461a      	mov	r2, r3
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	b10b      	cbz	r3, 800c094 <_free_r+0x58>
 800c090:	42a3      	cmp	r3, r4
 800c092:	d9fa      	bls.n	800c08a <_free_r+0x4e>
 800c094:	6811      	ldr	r1, [r2, #0]
 800c096:	1855      	adds	r5, r2, r1
 800c098:	42a5      	cmp	r5, r4
 800c09a:	d10b      	bne.n	800c0b4 <_free_r+0x78>
 800c09c:	6824      	ldr	r4, [r4, #0]
 800c09e:	4421      	add	r1, r4
 800c0a0:	1854      	adds	r4, r2, r1
 800c0a2:	42a3      	cmp	r3, r4
 800c0a4:	6011      	str	r1, [r2, #0]
 800c0a6:	d1dd      	bne.n	800c064 <_free_r+0x28>
 800c0a8:	681c      	ldr	r4, [r3, #0]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	6053      	str	r3, [r2, #4]
 800c0ae:	4421      	add	r1, r4
 800c0b0:	6011      	str	r1, [r2, #0]
 800c0b2:	e7d7      	b.n	800c064 <_free_r+0x28>
 800c0b4:	d902      	bls.n	800c0bc <_free_r+0x80>
 800c0b6:	230c      	movs	r3, #12
 800c0b8:	6003      	str	r3, [r0, #0]
 800c0ba:	e7d3      	b.n	800c064 <_free_r+0x28>
 800c0bc:	6825      	ldr	r5, [r4, #0]
 800c0be:	1961      	adds	r1, r4, r5
 800c0c0:	428b      	cmp	r3, r1
 800c0c2:	bf04      	itt	eq
 800c0c4:	6819      	ldreq	r1, [r3, #0]
 800c0c6:	685b      	ldreq	r3, [r3, #4]
 800c0c8:	6063      	str	r3, [r4, #4]
 800c0ca:	bf04      	itt	eq
 800c0cc:	1949      	addeq	r1, r1, r5
 800c0ce:	6021      	streq	r1, [r4, #0]
 800c0d0:	6054      	str	r4, [r2, #4]
 800c0d2:	e7c7      	b.n	800c064 <_free_r+0x28>
 800c0d4:	b003      	add	sp, #12
 800c0d6:	bd30      	pop	{r4, r5, pc}
 800c0d8:	200002e4 	.word	0x200002e4

0800c0dc <_malloc_r>:
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	1ccd      	adds	r5, r1, #3
 800c0e0:	f025 0503 	bic.w	r5, r5, #3
 800c0e4:	3508      	adds	r5, #8
 800c0e6:	2d0c      	cmp	r5, #12
 800c0e8:	bf38      	it	cc
 800c0ea:	250c      	movcc	r5, #12
 800c0ec:	2d00      	cmp	r5, #0
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	db01      	blt.n	800c0f6 <_malloc_r+0x1a>
 800c0f2:	42a9      	cmp	r1, r5
 800c0f4:	d903      	bls.n	800c0fe <_malloc_r+0x22>
 800c0f6:	230c      	movs	r3, #12
 800c0f8:	6033      	str	r3, [r6, #0]
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0fe:	f000 f877 	bl	800c1f0 <__malloc_lock>
 800c102:	4921      	ldr	r1, [pc, #132]	; (800c188 <_malloc_r+0xac>)
 800c104:	680a      	ldr	r2, [r1, #0]
 800c106:	4614      	mov	r4, r2
 800c108:	b99c      	cbnz	r4, 800c132 <_malloc_r+0x56>
 800c10a:	4f20      	ldr	r7, [pc, #128]	; (800c18c <_malloc_r+0xb0>)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	b923      	cbnz	r3, 800c11a <_malloc_r+0x3e>
 800c110:	4621      	mov	r1, r4
 800c112:	4630      	mov	r0, r6
 800c114:	f000 f83c 	bl	800c190 <_sbrk_r>
 800c118:	6038      	str	r0, [r7, #0]
 800c11a:	4629      	mov	r1, r5
 800c11c:	4630      	mov	r0, r6
 800c11e:	f000 f837 	bl	800c190 <_sbrk_r>
 800c122:	1c43      	adds	r3, r0, #1
 800c124:	d123      	bne.n	800c16e <_malloc_r+0x92>
 800c126:	230c      	movs	r3, #12
 800c128:	6033      	str	r3, [r6, #0]
 800c12a:	4630      	mov	r0, r6
 800c12c:	f000 f866 	bl	800c1fc <__malloc_unlock>
 800c130:	e7e3      	b.n	800c0fa <_malloc_r+0x1e>
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	1b5b      	subs	r3, r3, r5
 800c136:	d417      	bmi.n	800c168 <_malloc_r+0x8c>
 800c138:	2b0b      	cmp	r3, #11
 800c13a:	d903      	bls.n	800c144 <_malloc_r+0x68>
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	441c      	add	r4, r3
 800c140:	6025      	str	r5, [r4, #0]
 800c142:	e004      	b.n	800c14e <_malloc_r+0x72>
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	42a2      	cmp	r2, r4
 800c148:	bf0c      	ite	eq
 800c14a:	600b      	streq	r3, [r1, #0]
 800c14c:	6053      	strne	r3, [r2, #4]
 800c14e:	4630      	mov	r0, r6
 800c150:	f000 f854 	bl	800c1fc <__malloc_unlock>
 800c154:	f104 000b 	add.w	r0, r4, #11
 800c158:	1d23      	adds	r3, r4, #4
 800c15a:	f020 0007 	bic.w	r0, r0, #7
 800c15e:	1ac2      	subs	r2, r0, r3
 800c160:	d0cc      	beq.n	800c0fc <_malloc_r+0x20>
 800c162:	1a1b      	subs	r3, r3, r0
 800c164:	50a3      	str	r3, [r4, r2]
 800c166:	e7c9      	b.n	800c0fc <_malloc_r+0x20>
 800c168:	4622      	mov	r2, r4
 800c16a:	6864      	ldr	r4, [r4, #4]
 800c16c:	e7cc      	b.n	800c108 <_malloc_r+0x2c>
 800c16e:	1cc4      	adds	r4, r0, #3
 800c170:	f024 0403 	bic.w	r4, r4, #3
 800c174:	42a0      	cmp	r0, r4
 800c176:	d0e3      	beq.n	800c140 <_malloc_r+0x64>
 800c178:	1a21      	subs	r1, r4, r0
 800c17a:	4630      	mov	r0, r6
 800c17c:	f000 f808 	bl	800c190 <_sbrk_r>
 800c180:	3001      	adds	r0, #1
 800c182:	d1dd      	bne.n	800c140 <_malloc_r+0x64>
 800c184:	e7cf      	b.n	800c126 <_malloc_r+0x4a>
 800c186:	bf00      	nop
 800c188:	200002e4 	.word	0x200002e4
 800c18c:	200002e8 	.word	0x200002e8

0800c190 <_sbrk_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d06      	ldr	r5, [pc, #24]	; (800c1ac <_sbrk_r+0x1c>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	f7f6 f9d4 	bl	8002548 <_sbrk>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_sbrk_r+0x1a>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_sbrk_r+0x1a>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	200049fc 	.word	0x200049fc

0800c1b0 <siprintf>:
 800c1b0:	b40e      	push	{r1, r2, r3}
 800c1b2:	b500      	push	{lr}
 800c1b4:	b09c      	sub	sp, #112	; 0x70
 800c1b6:	ab1d      	add	r3, sp, #116	; 0x74
 800c1b8:	9002      	str	r0, [sp, #8]
 800c1ba:	9006      	str	r0, [sp, #24]
 800c1bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1c0:	4809      	ldr	r0, [pc, #36]	; (800c1e8 <siprintf+0x38>)
 800c1c2:	9107      	str	r1, [sp, #28]
 800c1c4:	9104      	str	r1, [sp, #16]
 800c1c6:	4909      	ldr	r1, [pc, #36]	; (800c1ec <siprintf+0x3c>)
 800c1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1cc:	9105      	str	r1, [sp, #20]
 800c1ce:	6800      	ldr	r0, [r0, #0]
 800c1d0:	9301      	str	r3, [sp, #4]
 800c1d2:	a902      	add	r1, sp, #8
 800c1d4:	f000 f874 	bl	800c2c0 <_svfiprintf_r>
 800c1d8:	9b02      	ldr	r3, [sp, #8]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	b01c      	add	sp, #112	; 0x70
 800c1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e4:	b003      	add	sp, #12
 800c1e6:	4770      	bx	lr
 800c1e8:	20000024 	.word	0x20000024
 800c1ec:	ffff0208 	.word	0xffff0208

0800c1f0 <__malloc_lock>:
 800c1f0:	4801      	ldr	r0, [pc, #4]	; (800c1f8 <__malloc_lock+0x8>)
 800c1f2:	f000 baf9 	b.w	800c7e8 <__retarget_lock_acquire_recursive>
 800c1f6:	bf00      	nop
 800c1f8:	20004a04 	.word	0x20004a04

0800c1fc <__malloc_unlock>:
 800c1fc:	4801      	ldr	r0, [pc, #4]	; (800c204 <__malloc_unlock+0x8>)
 800c1fe:	f000 baf4 	b.w	800c7ea <__retarget_lock_release_recursive>
 800c202:	bf00      	nop
 800c204:	20004a04 	.word	0x20004a04

0800c208 <__ssputs_r>:
 800c208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c20c:	688e      	ldr	r6, [r1, #8]
 800c20e:	429e      	cmp	r6, r3
 800c210:	4682      	mov	sl, r0
 800c212:	460c      	mov	r4, r1
 800c214:	4690      	mov	r8, r2
 800c216:	461f      	mov	r7, r3
 800c218:	d838      	bhi.n	800c28c <__ssputs_r+0x84>
 800c21a:	898a      	ldrh	r2, [r1, #12]
 800c21c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c220:	d032      	beq.n	800c288 <__ssputs_r+0x80>
 800c222:	6825      	ldr	r5, [r4, #0]
 800c224:	6909      	ldr	r1, [r1, #16]
 800c226:	eba5 0901 	sub.w	r9, r5, r1
 800c22a:	6965      	ldr	r5, [r4, #20]
 800c22c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c234:	3301      	adds	r3, #1
 800c236:	444b      	add	r3, r9
 800c238:	106d      	asrs	r5, r5, #1
 800c23a:	429d      	cmp	r5, r3
 800c23c:	bf38      	it	cc
 800c23e:	461d      	movcc	r5, r3
 800c240:	0553      	lsls	r3, r2, #21
 800c242:	d531      	bpl.n	800c2a8 <__ssputs_r+0xa0>
 800c244:	4629      	mov	r1, r5
 800c246:	f7ff ff49 	bl	800c0dc <_malloc_r>
 800c24a:	4606      	mov	r6, r0
 800c24c:	b950      	cbnz	r0, 800c264 <__ssputs_r+0x5c>
 800c24e:	230c      	movs	r3, #12
 800c250:	f8ca 3000 	str.w	r3, [sl]
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c25a:	81a3      	strh	r3, [r4, #12]
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c264:	6921      	ldr	r1, [r4, #16]
 800c266:	464a      	mov	r2, r9
 800c268:	f7ff fed2 	bl	800c010 <memcpy>
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	6126      	str	r6, [r4, #16]
 800c27a:	6165      	str	r5, [r4, #20]
 800c27c:	444e      	add	r6, r9
 800c27e:	eba5 0509 	sub.w	r5, r5, r9
 800c282:	6026      	str	r6, [r4, #0]
 800c284:	60a5      	str	r5, [r4, #8]
 800c286:	463e      	mov	r6, r7
 800c288:	42be      	cmp	r6, r7
 800c28a:	d900      	bls.n	800c28e <__ssputs_r+0x86>
 800c28c:	463e      	mov	r6, r7
 800c28e:	4632      	mov	r2, r6
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	4641      	mov	r1, r8
 800c294:	f000 faaa 	bl	800c7ec <memmove>
 800c298:	68a3      	ldr	r3, [r4, #8]
 800c29a:	6822      	ldr	r2, [r4, #0]
 800c29c:	1b9b      	subs	r3, r3, r6
 800c29e:	4432      	add	r2, r6
 800c2a0:	60a3      	str	r3, [r4, #8]
 800c2a2:	6022      	str	r2, [r4, #0]
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	e7db      	b.n	800c260 <__ssputs_r+0x58>
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	f000 fab9 	bl	800c820 <_realloc_r>
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d1e1      	bne.n	800c278 <__ssputs_r+0x70>
 800c2b4:	6921      	ldr	r1, [r4, #16]
 800c2b6:	4650      	mov	r0, sl
 800c2b8:	f7ff fec0 	bl	800c03c <_free_r>
 800c2bc:	e7c7      	b.n	800c24e <__ssputs_r+0x46>
	...

0800c2c0 <_svfiprintf_r>:
 800c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	4698      	mov	r8, r3
 800c2c6:	898b      	ldrh	r3, [r1, #12]
 800c2c8:	061b      	lsls	r3, r3, #24
 800c2ca:	b09d      	sub	sp, #116	; 0x74
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	4614      	mov	r4, r2
 800c2d2:	d50e      	bpl.n	800c2f2 <_svfiprintf_r+0x32>
 800c2d4:	690b      	ldr	r3, [r1, #16]
 800c2d6:	b963      	cbnz	r3, 800c2f2 <_svfiprintf_r+0x32>
 800c2d8:	2140      	movs	r1, #64	; 0x40
 800c2da:	f7ff feff 	bl	800c0dc <_malloc_r>
 800c2de:	6028      	str	r0, [r5, #0]
 800c2e0:	6128      	str	r0, [r5, #16]
 800c2e2:	b920      	cbnz	r0, 800c2ee <_svfiprintf_r+0x2e>
 800c2e4:	230c      	movs	r3, #12
 800c2e6:	603b      	str	r3, [r7, #0]
 800c2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ec:	e0d1      	b.n	800c492 <_svfiprintf_r+0x1d2>
 800c2ee:	2340      	movs	r3, #64	; 0x40
 800c2f0:	616b      	str	r3, [r5, #20]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2f6:	2320      	movs	r3, #32
 800c2f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c300:	2330      	movs	r3, #48	; 0x30
 800c302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c4ac <_svfiprintf_r+0x1ec>
 800c306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c30a:	f04f 0901 	mov.w	r9, #1
 800c30e:	4623      	mov	r3, r4
 800c310:	469a      	mov	sl, r3
 800c312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c316:	b10a      	cbz	r2, 800c31c <_svfiprintf_r+0x5c>
 800c318:	2a25      	cmp	r2, #37	; 0x25
 800c31a:	d1f9      	bne.n	800c310 <_svfiprintf_r+0x50>
 800c31c:	ebba 0b04 	subs.w	fp, sl, r4
 800c320:	d00b      	beq.n	800c33a <_svfiprintf_r+0x7a>
 800c322:	465b      	mov	r3, fp
 800c324:	4622      	mov	r2, r4
 800c326:	4629      	mov	r1, r5
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff ff6d 	bl	800c208 <__ssputs_r>
 800c32e:	3001      	adds	r0, #1
 800c330:	f000 80aa 	beq.w	800c488 <_svfiprintf_r+0x1c8>
 800c334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c336:	445a      	add	r2, fp
 800c338:	9209      	str	r2, [sp, #36]	; 0x24
 800c33a:	f89a 3000 	ldrb.w	r3, [sl]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 80a2 	beq.w	800c488 <_svfiprintf_r+0x1c8>
 800c344:	2300      	movs	r3, #0
 800c346:	f04f 32ff 	mov.w	r2, #4294967295
 800c34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c34e:	f10a 0a01 	add.w	sl, sl, #1
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	9307      	str	r3, [sp, #28]
 800c356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c35a:	931a      	str	r3, [sp, #104]	; 0x68
 800c35c:	4654      	mov	r4, sl
 800c35e:	2205      	movs	r2, #5
 800c360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c364:	4851      	ldr	r0, [pc, #324]	; (800c4ac <_svfiprintf_r+0x1ec>)
 800c366:	f7f3 ff3b 	bl	80001e0 <memchr>
 800c36a:	9a04      	ldr	r2, [sp, #16]
 800c36c:	b9d8      	cbnz	r0, 800c3a6 <_svfiprintf_r+0xe6>
 800c36e:	06d0      	lsls	r0, r2, #27
 800c370:	bf44      	itt	mi
 800c372:	2320      	movmi	r3, #32
 800c374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c378:	0711      	lsls	r1, r2, #28
 800c37a:	bf44      	itt	mi
 800c37c:	232b      	movmi	r3, #43	; 0x2b
 800c37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c382:	f89a 3000 	ldrb.w	r3, [sl]
 800c386:	2b2a      	cmp	r3, #42	; 0x2a
 800c388:	d015      	beq.n	800c3b6 <_svfiprintf_r+0xf6>
 800c38a:	9a07      	ldr	r2, [sp, #28]
 800c38c:	4654      	mov	r4, sl
 800c38e:	2000      	movs	r0, #0
 800c390:	f04f 0c0a 	mov.w	ip, #10
 800c394:	4621      	mov	r1, r4
 800c396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c39a:	3b30      	subs	r3, #48	; 0x30
 800c39c:	2b09      	cmp	r3, #9
 800c39e:	d94e      	bls.n	800c43e <_svfiprintf_r+0x17e>
 800c3a0:	b1b0      	cbz	r0, 800c3d0 <_svfiprintf_r+0x110>
 800c3a2:	9207      	str	r2, [sp, #28]
 800c3a4:	e014      	b.n	800c3d0 <_svfiprintf_r+0x110>
 800c3a6:	eba0 0308 	sub.w	r3, r0, r8
 800c3aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	46a2      	mov	sl, r4
 800c3b4:	e7d2      	b.n	800c35c <_svfiprintf_r+0x9c>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	1d19      	adds	r1, r3, #4
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	9103      	str	r1, [sp, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bfbb      	ittet	lt
 800c3c2:	425b      	neglt	r3, r3
 800c3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c8:	9307      	strge	r3, [sp, #28]
 800c3ca:	9307      	strlt	r3, [sp, #28]
 800c3cc:	bfb8      	it	lt
 800c3ce:	9204      	strlt	r2, [sp, #16]
 800c3d0:	7823      	ldrb	r3, [r4, #0]
 800c3d2:	2b2e      	cmp	r3, #46	; 0x2e
 800c3d4:	d10c      	bne.n	800c3f0 <_svfiprintf_r+0x130>
 800c3d6:	7863      	ldrb	r3, [r4, #1]
 800c3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c3da:	d135      	bne.n	800c448 <_svfiprintf_r+0x188>
 800c3dc:	9b03      	ldr	r3, [sp, #12]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	9203      	str	r2, [sp, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bfb8      	it	lt
 800c3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3ec:	3402      	adds	r4, #2
 800c3ee:	9305      	str	r3, [sp, #20]
 800c3f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4bc <_svfiprintf_r+0x1fc>
 800c3f4:	7821      	ldrb	r1, [r4, #0]
 800c3f6:	2203      	movs	r2, #3
 800c3f8:	4650      	mov	r0, sl
 800c3fa:	f7f3 fef1 	bl	80001e0 <memchr>
 800c3fe:	b140      	cbz	r0, 800c412 <_svfiprintf_r+0x152>
 800c400:	2340      	movs	r3, #64	; 0x40
 800c402:	eba0 000a 	sub.w	r0, r0, sl
 800c406:	fa03 f000 	lsl.w	r0, r3, r0
 800c40a:	9b04      	ldr	r3, [sp, #16]
 800c40c:	4303      	orrs	r3, r0
 800c40e:	3401      	adds	r4, #1
 800c410:	9304      	str	r3, [sp, #16]
 800c412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c416:	4826      	ldr	r0, [pc, #152]	; (800c4b0 <_svfiprintf_r+0x1f0>)
 800c418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c41c:	2206      	movs	r2, #6
 800c41e:	f7f3 fedf 	bl	80001e0 <memchr>
 800c422:	2800      	cmp	r0, #0
 800c424:	d038      	beq.n	800c498 <_svfiprintf_r+0x1d8>
 800c426:	4b23      	ldr	r3, [pc, #140]	; (800c4b4 <_svfiprintf_r+0x1f4>)
 800c428:	bb1b      	cbnz	r3, 800c472 <_svfiprintf_r+0x1b2>
 800c42a:	9b03      	ldr	r3, [sp, #12]
 800c42c:	3307      	adds	r3, #7
 800c42e:	f023 0307 	bic.w	r3, r3, #7
 800c432:	3308      	adds	r3, #8
 800c434:	9303      	str	r3, [sp, #12]
 800c436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c438:	4433      	add	r3, r6
 800c43a:	9309      	str	r3, [sp, #36]	; 0x24
 800c43c:	e767      	b.n	800c30e <_svfiprintf_r+0x4e>
 800c43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c442:	460c      	mov	r4, r1
 800c444:	2001      	movs	r0, #1
 800c446:	e7a5      	b.n	800c394 <_svfiprintf_r+0xd4>
 800c448:	2300      	movs	r3, #0
 800c44a:	3401      	adds	r4, #1
 800c44c:	9305      	str	r3, [sp, #20]
 800c44e:	4619      	mov	r1, r3
 800c450:	f04f 0c0a 	mov.w	ip, #10
 800c454:	4620      	mov	r0, r4
 800c456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c45a:	3a30      	subs	r2, #48	; 0x30
 800c45c:	2a09      	cmp	r2, #9
 800c45e:	d903      	bls.n	800c468 <_svfiprintf_r+0x1a8>
 800c460:	2b00      	cmp	r3, #0
 800c462:	d0c5      	beq.n	800c3f0 <_svfiprintf_r+0x130>
 800c464:	9105      	str	r1, [sp, #20]
 800c466:	e7c3      	b.n	800c3f0 <_svfiprintf_r+0x130>
 800c468:	fb0c 2101 	mla	r1, ip, r1, r2
 800c46c:	4604      	mov	r4, r0
 800c46e:	2301      	movs	r3, #1
 800c470:	e7f0      	b.n	800c454 <_svfiprintf_r+0x194>
 800c472:	ab03      	add	r3, sp, #12
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	462a      	mov	r2, r5
 800c478:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <_svfiprintf_r+0x1f8>)
 800c47a:	a904      	add	r1, sp, #16
 800c47c:	4638      	mov	r0, r7
 800c47e:	f3af 8000 	nop.w
 800c482:	1c42      	adds	r2, r0, #1
 800c484:	4606      	mov	r6, r0
 800c486:	d1d6      	bne.n	800c436 <_svfiprintf_r+0x176>
 800c488:	89ab      	ldrh	r3, [r5, #12]
 800c48a:	065b      	lsls	r3, r3, #25
 800c48c:	f53f af2c 	bmi.w	800c2e8 <_svfiprintf_r+0x28>
 800c490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c492:	b01d      	add	sp, #116	; 0x74
 800c494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c498:	ab03      	add	r3, sp, #12
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	462a      	mov	r2, r5
 800c49e:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <_svfiprintf_r+0x1f8>)
 800c4a0:	a904      	add	r1, sp, #16
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	f000 f87a 	bl	800c59c <_printf_i>
 800c4a8:	e7eb      	b.n	800c482 <_svfiprintf_r+0x1c2>
 800c4aa:	bf00      	nop
 800c4ac:	0800d258 	.word	0x0800d258
 800c4b0:	0800d262 	.word	0x0800d262
 800c4b4:	00000000 	.word	0x00000000
 800c4b8:	0800c209 	.word	0x0800c209
 800c4bc:	0800d25e 	.word	0x0800d25e

0800c4c0 <_printf_common>:
 800c4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c4:	4616      	mov	r6, r2
 800c4c6:	4699      	mov	r9, r3
 800c4c8:	688a      	ldr	r2, [r1, #8]
 800c4ca:	690b      	ldr	r3, [r1, #16]
 800c4cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	bfb8      	it	lt
 800c4d4:	4613      	movlt	r3, r2
 800c4d6:	6033      	str	r3, [r6, #0]
 800c4d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4dc:	4607      	mov	r7, r0
 800c4de:	460c      	mov	r4, r1
 800c4e0:	b10a      	cbz	r2, 800c4e6 <_printf_common+0x26>
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	6033      	str	r3, [r6, #0]
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	0699      	lsls	r1, r3, #26
 800c4ea:	bf42      	ittt	mi
 800c4ec:	6833      	ldrmi	r3, [r6, #0]
 800c4ee:	3302      	addmi	r3, #2
 800c4f0:	6033      	strmi	r3, [r6, #0]
 800c4f2:	6825      	ldr	r5, [r4, #0]
 800c4f4:	f015 0506 	ands.w	r5, r5, #6
 800c4f8:	d106      	bne.n	800c508 <_printf_common+0x48>
 800c4fa:	f104 0a19 	add.w	sl, r4, #25
 800c4fe:	68e3      	ldr	r3, [r4, #12]
 800c500:	6832      	ldr	r2, [r6, #0]
 800c502:	1a9b      	subs	r3, r3, r2
 800c504:	42ab      	cmp	r3, r5
 800c506:	dc26      	bgt.n	800c556 <_printf_common+0x96>
 800c508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c50c:	1e13      	subs	r3, r2, #0
 800c50e:	6822      	ldr	r2, [r4, #0]
 800c510:	bf18      	it	ne
 800c512:	2301      	movne	r3, #1
 800c514:	0692      	lsls	r2, r2, #26
 800c516:	d42b      	bmi.n	800c570 <_printf_common+0xb0>
 800c518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c51c:	4649      	mov	r1, r9
 800c51e:	4638      	mov	r0, r7
 800c520:	47c0      	blx	r8
 800c522:	3001      	adds	r0, #1
 800c524:	d01e      	beq.n	800c564 <_printf_common+0xa4>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	68e5      	ldr	r5, [r4, #12]
 800c52a:	6832      	ldr	r2, [r6, #0]
 800c52c:	f003 0306 	and.w	r3, r3, #6
 800c530:	2b04      	cmp	r3, #4
 800c532:	bf08      	it	eq
 800c534:	1aad      	subeq	r5, r5, r2
 800c536:	68a3      	ldr	r3, [r4, #8]
 800c538:	6922      	ldr	r2, [r4, #16]
 800c53a:	bf0c      	ite	eq
 800c53c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c540:	2500      	movne	r5, #0
 800c542:	4293      	cmp	r3, r2
 800c544:	bfc4      	itt	gt
 800c546:	1a9b      	subgt	r3, r3, r2
 800c548:	18ed      	addgt	r5, r5, r3
 800c54a:	2600      	movs	r6, #0
 800c54c:	341a      	adds	r4, #26
 800c54e:	42b5      	cmp	r5, r6
 800c550:	d11a      	bne.n	800c588 <_printf_common+0xc8>
 800c552:	2000      	movs	r0, #0
 800c554:	e008      	b.n	800c568 <_printf_common+0xa8>
 800c556:	2301      	movs	r3, #1
 800c558:	4652      	mov	r2, sl
 800c55a:	4649      	mov	r1, r9
 800c55c:	4638      	mov	r0, r7
 800c55e:	47c0      	blx	r8
 800c560:	3001      	adds	r0, #1
 800c562:	d103      	bne.n	800c56c <_printf_common+0xac>
 800c564:	f04f 30ff 	mov.w	r0, #4294967295
 800c568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c56c:	3501      	adds	r5, #1
 800c56e:	e7c6      	b.n	800c4fe <_printf_common+0x3e>
 800c570:	18e1      	adds	r1, r4, r3
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	2030      	movs	r0, #48	; 0x30
 800c576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c57a:	4422      	add	r2, r4
 800c57c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c584:	3302      	adds	r3, #2
 800c586:	e7c7      	b.n	800c518 <_printf_common+0x58>
 800c588:	2301      	movs	r3, #1
 800c58a:	4622      	mov	r2, r4
 800c58c:	4649      	mov	r1, r9
 800c58e:	4638      	mov	r0, r7
 800c590:	47c0      	blx	r8
 800c592:	3001      	adds	r0, #1
 800c594:	d0e6      	beq.n	800c564 <_printf_common+0xa4>
 800c596:	3601      	adds	r6, #1
 800c598:	e7d9      	b.n	800c54e <_printf_common+0x8e>
	...

0800c59c <_printf_i>:
 800c59c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	4691      	mov	r9, r2
 800c5a4:	7e27      	ldrb	r7, [r4, #24]
 800c5a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c5a8:	2f78      	cmp	r7, #120	; 0x78
 800c5aa:	4680      	mov	r8, r0
 800c5ac:	469a      	mov	sl, r3
 800c5ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5b2:	d807      	bhi.n	800c5c4 <_printf_i+0x28>
 800c5b4:	2f62      	cmp	r7, #98	; 0x62
 800c5b6:	d80a      	bhi.n	800c5ce <_printf_i+0x32>
 800c5b8:	2f00      	cmp	r7, #0
 800c5ba:	f000 80d8 	beq.w	800c76e <_printf_i+0x1d2>
 800c5be:	2f58      	cmp	r7, #88	; 0x58
 800c5c0:	f000 80a3 	beq.w	800c70a <_printf_i+0x16e>
 800c5c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c5c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5cc:	e03a      	b.n	800c644 <_printf_i+0xa8>
 800c5ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5d2:	2b15      	cmp	r3, #21
 800c5d4:	d8f6      	bhi.n	800c5c4 <_printf_i+0x28>
 800c5d6:	a001      	add	r0, pc, #4	; (adr r0, 800c5dc <_printf_i+0x40>)
 800c5d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c5dc:	0800c635 	.word	0x0800c635
 800c5e0:	0800c649 	.word	0x0800c649
 800c5e4:	0800c5c5 	.word	0x0800c5c5
 800c5e8:	0800c5c5 	.word	0x0800c5c5
 800c5ec:	0800c5c5 	.word	0x0800c5c5
 800c5f0:	0800c5c5 	.word	0x0800c5c5
 800c5f4:	0800c649 	.word	0x0800c649
 800c5f8:	0800c5c5 	.word	0x0800c5c5
 800c5fc:	0800c5c5 	.word	0x0800c5c5
 800c600:	0800c5c5 	.word	0x0800c5c5
 800c604:	0800c5c5 	.word	0x0800c5c5
 800c608:	0800c755 	.word	0x0800c755
 800c60c:	0800c679 	.word	0x0800c679
 800c610:	0800c737 	.word	0x0800c737
 800c614:	0800c5c5 	.word	0x0800c5c5
 800c618:	0800c5c5 	.word	0x0800c5c5
 800c61c:	0800c777 	.word	0x0800c777
 800c620:	0800c5c5 	.word	0x0800c5c5
 800c624:	0800c679 	.word	0x0800c679
 800c628:	0800c5c5 	.word	0x0800c5c5
 800c62c:	0800c5c5 	.word	0x0800c5c5
 800c630:	0800c73f 	.word	0x0800c73f
 800c634:	680b      	ldr	r3, [r1, #0]
 800c636:	1d1a      	adds	r2, r3, #4
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	600a      	str	r2, [r1, #0]
 800c63c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c644:	2301      	movs	r3, #1
 800c646:	e0a3      	b.n	800c790 <_printf_i+0x1f4>
 800c648:	6825      	ldr	r5, [r4, #0]
 800c64a:	6808      	ldr	r0, [r1, #0]
 800c64c:	062e      	lsls	r6, r5, #24
 800c64e:	f100 0304 	add.w	r3, r0, #4
 800c652:	d50a      	bpl.n	800c66a <_printf_i+0xce>
 800c654:	6805      	ldr	r5, [r0, #0]
 800c656:	600b      	str	r3, [r1, #0]
 800c658:	2d00      	cmp	r5, #0
 800c65a:	da03      	bge.n	800c664 <_printf_i+0xc8>
 800c65c:	232d      	movs	r3, #45	; 0x2d
 800c65e:	426d      	negs	r5, r5
 800c660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c664:	485e      	ldr	r0, [pc, #376]	; (800c7e0 <_printf_i+0x244>)
 800c666:	230a      	movs	r3, #10
 800c668:	e019      	b.n	800c69e <_printf_i+0x102>
 800c66a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c66e:	6805      	ldr	r5, [r0, #0]
 800c670:	600b      	str	r3, [r1, #0]
 800c672:	bf18      	it	ne
 800c674:	b22d      	sxthne	r5, r5
 800c676:	e7ef      	b.n	800c658 <_printf_i+0xbc>
 800c678:	680b      	ldr	r3, [r1, #0]
 800c67a:	6825      	ldr	r5, [r4, #0]
 800c67c:	1d18      	adds	r0, r3, #4
 800c67e:	6008      	str	r0, [r1, #0]
 800c680:	0628      	lsls	r0, r5, #24
 800c682:	d501      	bpl.n	800c688 <_printf_i+0xec>
 800c684:	681d      	ldr	r5, [r3, #0]
 800c686:	e002      	b.n	800c68e <_printf_i+0xf2>
 800c688:	0669      	lsls	r1, r5, #25
 800c68a:	d5fb      	bpl.n	800c684 <_printf_i+0xe8>
 800c68c:	881d      	ldrh	r5, [r3, #0]
 800c68e:	4854      	ldr	r0, [pc, #336]	; (800c7e0 <_printf_i+0x244>)
 800c690:	2f6f      	cmp	r7, #111	; 0x6f
 800c692:	bf0c      	ite	eq
 800c694:	2308      	moveq	r3, #8
 800c696:	230a      	movne	r3, #10
 800c698:	2100      	movs	r1, #0
 800c69a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c69e:	6866      	ldr	r6, [r4, #4]
 800c6a0:	60a6      	str	r6, [r4, #8]
 800c6a2:	2e00      	cmp	r6, #0
 800c6a4:	bfa2      	ittt	ge
 800c6a6:	6821      	ldrge	r1, [r4, #0]
 800c6a8:	f021 0104 	bicge.w	r1, r1, #4
 800c6ac:	6021      	strge	r1, [r4, #0]
 800c6ae:	b90d      	cbnz	r5, 800c6b4 <_printf_i+0x118>
 800c6b0:	2e00      	cmp	r6, #0
 800c6b2:	d04d      	beq.n	800c750 <_printf_i+0x1b4>
 800c6b4:	4616      	mov	r6, r2
 800c6b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6ba:	fb03 5711 	mls	r7, r3, r1, r5
 800c6be:	5dc7      	ldrb	r7, [r0, r7]
 800c6c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6c4:	462f      	mov	r7, r5
 800c6c6:	42bb      	cmp	r3, r7
 800c6c8:	460d      	mov	r5, r1
 800c6ca:	d9f4      	bls.n	800c6b6 <_printf_i+0x11a>
 800c6cc:	2b08      	cmp	r3, #8
 800c6ce:	d10b      	bne.n	800c6e8 <_printf_i+0x14c>
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	07df      	lsls	r7, r3, #31
 800c6d4:	d508      	bpl.n	800c6e8 <_printf_i+0x14c>
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	6861      	ldr	r1, [r4, #4]
 800c6da:	4299      	cmp	r1, r3
 800c6dc:	bfde      	ittt	le
 800c6de:	2330      	movle	r3, #48	; 0x30
 800c6e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6e8:	1b92      	subs	r2, r2, r6
 800c6ea:	6122      	str	r2, [r4, #16]
 800c6ec:	f8cd a000 	str.w	sl, [sp]
 800c6f0:	464b      	mov	r3, r9
 800c6f2:	aa03      	add	r2, sp, #12
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	f7ff fee2 	bl	800c4c0 <_printf_common>
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d14c      	bne.n	800c79a <_printf_i+0x1fe>
 800c700:	f04f 30ff 	mov.w	r0, #4294967295
 800c704:	b004      	add	sp, #16
 800c706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c70a:	4835      	ldr	r0, [pc, #212]	; (800c7e0 <_printf_i+0x244>)
 800c70c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	680e      	ldr	r6, [r1, #0]
 800c714:	061f      	lsls	r7, r3, #24
 800c716:	f856 5b04 	ldr.w	r5, [r6], #4
 800c71a:	600e      	str	r6, [r1, #0]
 800c71c:	d514      	bpl.n	800c748 <_printf_i+0x1ac>
 800c71e:	07d9      	lsls	r1, r3, #31
 800c720:	bf44      	itt	mi
 800c722:	f043 0320 	orrmi.w	r3, r3, #32
 800c726:	6023      	strmi	r3, [r4, #0]
 800c728:	b91d      	cbnz	r5, 800c732 <_printf_i+0x196>
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	f023 0320 	bic.w	r3, r3, #32
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	2310      	movs	r3, #16
 800c734:	e7b0      	b.n	800c698 <_printf_i+0xfc>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	f043 0320 	orr.w	r3, r3, #32
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	2378      	movs	r3, #120	; 0x78
 800c740:	4828      	ldr	r0, [pc, #160]	; (800c7e4 <_printf_i+0x248>)
 800c742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c746:	e7e3      	b.n	800c710 <_printf_i+0x174>
 800c748:	065e      	lsls	r6, r3, #25
 800c74a:	bf48      	it	mi
 800c74c:	b2ad      	uxthmi	r5, r5
 800c74e:	e7e6      	b.n	800c71e <_printf_i+0x182>
 800c750:	4616      	mov	r6, r2
 800c752:	e7bb      	b.n	800c6cc <_printf_i+0x130>
 800c754:	680b      	ldr	r3, [r1, #0]
 800c756:	6826      	ldr	r6, [r4, #0]
 800c758:	6960      	ldr	r0, [r4, #20]
 800c75a:	1d1d      	adds	r5, r3, #4
 800c75c:	600d      	str	r5, [r1, #0]
 800c75e:	0635      	lsls	r5, r6, #24
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	d501      	bpl.n	800c768 <_printf_i+0x1cc>
 800c764:	6018      	str	r0, [r3, #0]
 800c766:	e002      	b.n	800c76e <_printf_i+0x1d2>
 800c768:	0671      	lsls	r1, r6, #25
 800c76a:	d5fb      	bpl.n	800c764 <_printf_i+0x1c8>
 800c76c:	8018      	strh	r0, [r3, #0]
 800c76e:	2300      	movs	r3, #0
 800c770:	6123      	str	r3, [r4, #16]
 800c772:	4616      	mov	r6, r2
 800c774:	e7ba      	b.n	800c6ec <_printf_i+0x150>
 800c776:	680b      	ldr	r3, [r1, #0]
 800c778:	1d1a      	adds	r2, r3, #4
 800c77a:	600a      	str	r2, [r1, #0]
 800c77c:	681e      	ldr	r6, [r3, #0]
 800c77e:	6862      	ldr	r2, [r4, #4]
 800c780:	2100      	movs	r1, #0
 800c782:	4630      	mov	r0, r6
 800c784:	f7f3 fd2c 	bl	80001e0 <memchr>
 800c788:	b108      	cbz	r0, 800c78e <_printf_i+0x1f2>
 800c78a:	1b80      	subs	r0, r0, r6
 800c78c:	6060      	str	r0, [r4, #4]
 800c78e:	6863      	ldr	r3, [r4, #4]
 800c790:	6123      	str	r3, [r4, #16]
 800c792:	2300      	movs	r3, #0
 800c794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c798:	e7a8      	b.n	800c6ec <_printf_i+0x150>
 800c79a:	6923      	ldr	r3, [r4, #16]
 800c79c:	4632      	mov	r2, r6
 800c79e:	4649      	mov	r1, r9
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	47d0      	blx	sl
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d0ab      	beq.n	800c700 <_printf_i+0x164>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	079b      	lsls	r3, r3, #30
 800c7ac:	d413      	bmi.n	800c7d6 <_printf_i+0x23a>
 800c7ae:	68e0      	ldr	r0, [r4, #12]
 800c7b0:	9b03      	ldr	r3, [sp, #12]
 800c7b2:	4298      	cmp	r0, r3
 800c7b4:	bfb8      	it	lt
 800c7b6:	4618      	movlt	r0, r3
 800c7b8:	e7a4      	b.n	800c704 <_printf_i+0x168>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4632      	mov	r2, r6
 800c7be:	4649      	mov	r1, r9
 800c7c0:	4640      	mov	r0, r8
 800c7c2:	47d0      	blx	sl
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	d09b      	beq.n	800c700 <_printf_i+0x164>
 800c7c8:	3501      	adds	r5, #1
 800c7ca:	68e3      	ldr	r3, [r4, #12]
 800c7cc:	9903      	ldr	r1, [sp, #12]
 800c7ce:	1a5b      	subs	r3, r3, r1
 800c7d0:	42ab      	cmp	r3, r5
 800c7d2:	dcf2      	bgt.n	800c7ba <_printf_i+0x21e>
 800c7d4:	e7eb      	b.n	800c7ae <_printf_i+0x212>
 800c7d6:	2500      	movs	r5, #0
 800c7d8:	f104 0619 	add.w	r6, r4, #25
 800c7dc:	e7f5      	b.n	800c7ca <_printf_i+0x22e>
 800c7de:	bf00      	nop
 800c7e0:	0800d269 	.word	0x0800d269
 800c7e4:	0800d27a 	.word	0x0800d27a

0800c7e8 <__retarget_lock_acquire_recursive>:
 800c7e8:	4770      	bx	lr

0800c7ea <__retarget_lock_release_recursive>:
 800c7ea:	4770      	bx	lr

0800c7ec <memmove>:
 800c7ec:	4288      	cmp	r0, r1
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	eb01 0402 	add.w	r4, r1, r2
 800c7f4:	d902      	bls.n	800c7fc <memmove+0x10>
 800c7f6:	4284      	cmp	r4, r0
 800c7f8:	4623      	mov	r3, r4
 800c7fa:	d807      	bhi.n	800c80c <memmove+0x20>
 800c7fc:	1e43      	subs	r3, r0, #1
 800c7fe:	42a1      	cmp	r1, r4
 800c800:	d008      	beq.n	800c814 <memmove+0x28>
 800c802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c80a:	e7f8      	b.n	800c7fe <memmove+0x12>
 800c80c:	4402      	add	r2, r0
 800c80e:	4601      	mov	r1, r0
 800c810:	428a      	cmp	r2, r1
 800c812:	d100      	bne.n	800c816 <memmove+0x2a>
 800c814:	bd10      	pop	{r4, pc}
 800c816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c81e:	e7f7      	b.n	800c810 <memmove+0x24>

0800c820 <_realloc_r>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	4607      	mov	r7, r0
 800c824:	4614      	mov	r4, r2
 800c826:	460e      	mov	r6, r1
 800c828:	b921      	cbnz	r1, 800c834 <_realloc_r+0x14>
 800c82a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c82e:	4611      	mov	r1, r2
 800c830:	f7ff bc54 	b.w	800c0dc <_malloc_r>
 800c834:	b922      	cbnz	r2, 800c840 <_realloc_r+0x20>
 800c836:	f7ff fc01 	bl	800c03c <_free_r>
 800c83a:	4625      	mov	r5, r4
 800c83c:	4628      	mov	r0, r5
 800c83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c840:	f000 f814 	bl	800c86c <_malloc_usable_size_r>
 800c844:	42a0      	cmp	r0, r4
 800c846:	d20f      	bcs.n	800c868 <_realloc_r+0x48>
 800c848:	4621      	mov	r1, r4
 800c84a:	4638      	mov	r0, r7
 800c84c:	f7ff fc46 	bl	800c0dc <_malloc_r>
 800c850:	4605      	mov	r5, r0
 800c852:	2800      	cmp	r0, #0
 800c854:	d0f2      	beq.n	800c83c <_realloc_r+0x1c>
 800c856:	4631      	mov	r1, r6
 800c858:	4622      	mov	r2, r4
 800c85a:	f7ff fbd9 	bl	800c010 <memcpy>
 800c85e:	4631      	mov	r1, r6
 800c860:	4638      	mov	r0, r7
 800c862:	f7ff fbeb 	bl	800c03c <_free_r>
 800c866:	e7e9      	b.n	800c83c <_realloc_r+0x1c>
 800c868:	4635      	mov	r5, r6
 800c86a:	e7e7      	b.n	800c83c <_realloc_r+0x1c>

0800c86c <_malloc_usable_size_r>:
 800c86c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c870:	1f18      	subs	r0, r3, #4
 800c872:	2b00      	cmp	r3, #0
 800c874:	bfbc      	itt	lt
 800c876:	580b      	ldrlt	r3, [r1, r0]
 800c878:	18c0      	addlt	r0, r0, r3
 800c87a:	4770      	bx	lr

0800c87c <_init>:
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87e:	bf00      	nop
 800c880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c882:	bc08      	pop	{r3}
 800c884:	469e      	mov	lr, r3
 800c886:	4770      	bx	lr

0800c888 <_fini>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	bf00      	nop
 800c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88e:	bc08      	pop	{r3}
 800c890:	469e      	mov	lr, r3
 800c892:	4770      	bx	lr
