
BMSv1.0_Unit_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  0800c840  0800c840  0001c840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d238  0800d238  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800d238  0800d238  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d238  0800d238  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d238  0800d238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d23c  0800d23c  0001d23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800d240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00004984  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a0c  20004a0c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188bd  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003695  00000000  00000000  00038975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0003c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001030  00000000  00000000  0003d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ee4  00000000  00000000  0003e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188ea  00000000  00000000  000420bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b959d  00000000  00000000  0005a9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00113f43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d30  00000000  00000000  00113f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c828 	.word	0x0800c828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c828 	.word	0x0800c828

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <SELECT+0x1c>)
 8000a68:	f002 ffa6 	bl	80039b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 fe19 	bl	80026a4 <HAL_Delay>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	48000400 	.word	0x48000400

08000a7c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <DESELECT+0x1c>)
 8000a88:	f002 ff96 	bl	80039b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 fe09 	bl	80026a4 <HAL_Delay>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000aa6:	bf00      	nop
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <SPI_TxByte+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d1f8      	bne.n	8000aa8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ab6:	1df9      	adds	r1, r7, #7
 8000ab8:	2364      	movs	r3, #100	; 0x64
 8000aba:	2201      	movs	r2, #1
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <SPI_TxByte+0x30>)
 8000abe:	f004 fed2 	bl	8005866 <HAL_SPI_Transmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200002f4 	.word	0x200002f4

08000ad0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000adc:	bf00      	nop
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <SPI_TxBuffer+0x30>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d1f8      	bne.n	8000ade <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <SPI_TxBuffer+0x30>)
 8000af4:	f004 feb7 	bl	8005866 <HAL_SPI_Transmit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200002f4 	.word	0x200002f4

08000b04 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000b0a:	23ff      	movs	r3, #255	; 0xff
 8000b0c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b0e:	bf00      	nop
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <SPI_RxByte+0x34>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d1f8      	bne.n	8000b10 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000b1e:	1dba      	adds	r2, r7, #6
 8000b20:	1df9      	adds	r1, r7, #7
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SPI_RxByte+0x34>)
 8000b2a:	f005 f80a 	bl	8005b42 <HAL_SPI_TransmitReceive>

	return data;
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200002f4 	.word	0x200002f4

08000b3c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000b44:	f7ff ffde 	bl	8000b04 <SPI_RxByte>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	701a      	strb	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <SD_ReadyWait+0x30>)
 8000b60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b64:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000b66:	f7ff ffcd 	bl	8000b04 <SPI_RxByte>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2bff      	cmp	r3, #255	; 0xff
 8000b72:	d004      	beq.n	8000b7e <SD_ReadyWait+0x26>
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SD_ReadyWait+0x30>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f3      	bne.n	8000b66 <SD_ReadyWait+0xe>

	return res;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000298e 	.word	0x2000298e

08000b8c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000b92:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b96:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000b98:	f7ff ff70 	bl	8000a7c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	e005      	b.n	8000bae <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ba2:	20ff      	movs	r0, #255	; 0xff
 8000ba4:	f7ff ff7a 	bl	8000a9c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3301      	adds	r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2b09      	cmp	r3, #9
 8000bb2:	ddf6      	ble.n	8000ba2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000bb4:	f7ff ff52 	bl	8000a5c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000bb8:	2340      	movs	r3, #64	; 0x40
 8000bba:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000bcc:	2395      	movs	r3, #149	; 0x95
 8000bce:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2106      	movs	r1, #6
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff7b 	bl	8000ad0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000bda:	e002      	b.n	8000be2 <SD_PowerOn+0x56>
	{
		cnt--;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000be2:	f7ff ff8f 	bl	8000b04 <SPI_RxByte>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d002      	beq.n	8000bf2 <SD_PowerOn+0x66>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f4      	bne.n	8000bdc <SD_PowerOn+0x50>
	}

	DESELECT();
 8000bf2:	f7ff ff43 	bl	8000a7c <DESELECT>
	SPI_TxByte(0XFF);
 8000bf6:	20ff      	movs	r0, #255	; 0xff
 8000bf8:	f7ff ff50 	bl	8000a9c <SPI_TxByte>

	PowerFlag = 1;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <SD_PowerOn+0x80>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000a5 	.word	0x200000a5

08000c10 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <SD_PowerOff+0x14>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	200000a5 	.word	0x200000a5

08000c28 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <SD_CheckPower+0x14>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200000a5 	.word	0x200000a5

08000c40 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <SD_RxDataBlock+0x5c>)
 8000c4c:	22c8      	movs	r2, #200	; 0xc8
 8000c4e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000c50:	f7ff ff58 	bl	8000b04 <SPI_RxByte>
 8000c54:	4603      	mov	r3, r0
 8000c56:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d104      	bne.n	8000c68 <SD_RxDataBlock+0x28>
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <SD_RxDataBlock+0x5c>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f3      	bne.n	8000c50 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2bfe      	cmp	r3, #254	; 0xfe
 8000c6c:	d001      	beq.n	8000c72 <SD_RxDataBlock+0x32>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e00f      	b.n	8000c92 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5f 	bl	8000b3c <SPI_RxBytePtr>
	} while(len--);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	603a      	str	r2, [r7, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f4      	bne.n	8000c72 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000c88:	f7ff ff3c 	bl	8000b04 <SPI_RxByte>
	SPI_RxByte();
 8000c8c:	f7ff ff3a 	bl	8000b04 <SPI_RxByte>

	return TRUE;
 8000c90:	2301      	movs	r3, #1
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20002990 	.word	0x20002990

08000ca0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000cb0:	f7ff ff52 	bl	8000b58 <SD_ReadyWait>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d001      	beq.n	8000cbe <SD_TxDataBlock+0x1e>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e02f      	b.n	8000d1e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff feeb 	bl	8000a9c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2bfd      	cmp	r3, #253	; 0xfd
 8000cca:	d020      	beq.n	8000d0e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fefd 	bl	8000ad0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000cd6:	f7ff ff15 	bl	8000b04 <SPI_RxByte>
		SPI_RxByte();
 8000cda:	f7ff ff13 	bl	8000b04 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000cde:	e00b      	b.n	8000cf8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ce0:	f7ff ff10 	bl	8000b04 <SPI_RxByte>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d006      	beq.n	8000d00 <SD_TxDataBlock+0x60>
			i++;
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	2b40      	cmp	r3, #64	; 0x40
 8000cfc:	d9f0      	bls.n	8000ce0 <SD_TxDataBlock+0x40>
 8000cfe:	e000      	b.n	8000d02 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000d00:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000d02:	bf00      	nop
 8000d04:	f7ff fefe 	bl	8000b04 <SPI_RxByte>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0fa      	beq.n	8000d04 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	d101      	bne.n	8000d1c <SD_TxDataBlock+0x7c>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	6039      	str	r1, [r7, #0]
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000d32:	f7ff ff11 	bl	8000b58 <SD_ReadyWait>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2bff      	cmp	r3, #255	; 0xff
 8000d3a:	d001      	beq.n	8000d40 <SD_SendCmd+0x1a>
 8000d3c:	23ff      	movs	r3, #255	; 0xff
 8000d3e:	e042      	b.n	8000dc6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff feaa 	bl	8000a9c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	0e1b      	lsrs	r3, r3, #24
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fea4 	bl	8000a9c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fe9e 	bl	8000a9c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fe98 	bl	8000a9c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe93 	bl	8000a9c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b40      	cmp	r3, #64	; 0x40
 8000d7a:	d102      	bne.n	8000d82 <SD_SendCmd+0x5c>
 8000d7c:	2395      	movs	r3, #149	; 0x95
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e007      	b.n	8000d92 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b48      	cmp	r3, #72	; 0x48
 8000d86:	d102      	bne.n	8000d8e <SD_SendCmd+0x68>
 8000d88:	2387      	movs	r3, #135	; 0x87
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e001      	b.n	8000d92 <SD_SendCmd+0x6c>
	else crc = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe81 	bl	8000a9c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b4c      	cmp	r3, #76	; 0x4c
 8000d9e:	d101      	bne.n	8000da4 <SD_SendCmd+0x7e>
 8000da0:	f7ff feb0 	bl	8000b04 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000da4:	230a      	movs	r3, #10
 8000da6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000da8:	f7ff feac 	bl	8000b04 <SPI_RxByte>
 8000dac:	4603      	mov	r3, r0
 8000dae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000db0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	da05      	bge.n	8000dc4 <SD_SendCmd+0x9e>
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	73bb      	strb	r3, [r7, #14]
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f1      	bne.n	8000da8 <SD_SendCmd+0x82>

	return res;
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SD_disk_initialize+0x14>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e0d6      	b.n	8000f92 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000de4:	4b6d      	ldr	r3, [pc, #436]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <SD_disk_initialize+0x2a>
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	e0cb      	b.n	8000f92 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000dfa:	f7ff fec7 	bl	8000b8c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000dfe:	f7ff fe2d 	bl	8000a5c <SELECT>

	/* check disk type */
	type = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000e06:	2100      	movs	r1, #0
 8000e08:	2040      	movs	r0, #64	; 0x40
 8000e0a:	f7ff ff8c 	bl	8000d26 <SD_SendCmd>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	f040 80a6 	bne.w	8000f62 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000e16:	4b62      	ldr	r3, [pc, #392]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e1c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e22:	2048      	movs	r0, #72	; 0x48
 8000e24:	f7ff ff7f 	bl	8000d26 <SD_SendCmd>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d158      	bne.n	8000ee0 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e00c      	b.n	8000e4e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000e34:	7bfc      	ldrb	r4, [r7, #15]
 8000e36:	f7ff fe65 	bl	8000b04 <SPI_RxByte>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4423      	add	r3, r4
 8000e44:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d9ef      	bls.n	8000e34 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	f040 8083 	bne.w	8000f62 <SD_disk_initialize+0x192>
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	2baa      	cmp	r3, #170	; 0xaa
 8000e60:	d17f      	bne.n	8000f62 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000e62:	2100      	movs	r1, #0
 8000e64:	2077      	movs	r0, #119	; 0x77
 8000e66:	f7ff ff5e 	bl	8000d26 <SD_SendCmd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d807      	bhi.n	8000e80 <SD_disk_initialize+0xb0>
 8000e70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e74:	2069      	movs	r0, #105	; 0x69
 8000e76:	f7ff ff56 	bl	8000d26 <SD_SendCmd>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1eb      	bne.n	8000e62 <SD_disk_initialize+0x92>
 8000e8a:	e000      	b.n	8000e8e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000e8c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d064      	beq.n	8000f62 <SD_disk_initialize+0x192>
 8000e98:	2100      	movs	r1, #0
 8000e9a:	207a      	movs	r0, #122	; 0x7a
 8000e9c:	f7ff ff43 	bl	8000d26 <SD_SendCmd>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d15d      	bne.n	8000f62 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e00c      	b.n	8000ec6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000eac:	7bfc      	ldrb	r4, [r7, #15]
 8000eae:	f7ff fe29 	bl	8000b04 <SPI_RxByte>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4423      	add	r3, r4
 8000ebc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d9ef      	bls.n	8000eac <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ecc:	7a3b      	ldrb	r3, [r7, #8]
 8000ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SD_disk_initialize+0x10a>
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	e000      	b.n	8000edc <SD_disk_initialize+0x10c>
 8000eda:	2304      	movs	r3, #4
 8000edc:	73bb      	strb	r3, [r7, #14]
 8000ede:	e040      	b.n	8000f62 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2077      	movs	r0, #119	; 0x77
 8000ee4:	f7ff ff1f 	bl	8000d26 <SD_SendCmd>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d808      	bhi.n	8000f00 <SD_disk_initialize+0x130>
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2069      	movs	r0, #105	; 0x69
 8000ef2:	f7ff ff18 	bl	8000d26 <SD_SendCmd>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d801      	bhi.n	8000f00 <SD_disk_initialize+0x130>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e000      	b.n	8000f02 <SD_disk_initialize+0x132>
 8000f00:	2301      	movs	r3, #1
 8000f02:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d10e      	bne.n	8000f28 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2077      	movs	r0, #119	; 0x77
 8000f0e:	f7ff ff0a 	bl	8000d26 <SD_SendCmd>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d80e      	bhi.n	8000f36 <SD_disk_initialize+0x166>
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2069      	movs	r0, #105	; 0x69
 8000f1c:	f7ff ff03 	bl	8000d26 <SD_SendCmd>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d107      	bne.n	8000f36 <SD_disk_initialize+0x166>
 8000f26:	e00d      	b.n	8000f44 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2041      	movs	r0, #65	; 0x41
 8000f2c:	f7ff fefb 	bl	8000d26 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e1      	bne.n	8000f04 <SD_disk_initialize+0x134>
 8000f40:	e000      	b.n	8000f44 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000f42:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <SD_disk_initialize+0x18e>
 8000f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f52:	2050      	movs	r0, #80	; 0x50
 8000f54:	f7ff fee7 	bl	8000d26 <SD_SendCmd>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SD_disk_initialize+0x192>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <SD_disk_initialize+0x1d4>)
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000f68:	f7ff fd88 	bl	8000a7c <DESELECT>
	SPI_RxByte();
 8000f6c:	f7ff fdca 	bl	8000b04 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d008      	beq.n	8000f88 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e001      	b.n	8000f8c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000f88:	f7ff fe42 	bl	8000c10 <SD_PowerOff>
	}

	return Stat;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20002990 	.word	0x20002990
 8000fa4:	200000a4 	.word	0x200000a4

08000fa8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SD_disk_status+0x14>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e002      	b.n	8000fc2 <SD_disk_status+0x1a>
	return Stat;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SD_disk_status+0x28>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <SD_disk_read+0x1c>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <SD_disk_read+0x20>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e051      	b.n	8001098 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <SD_disk_read+0xcc>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SD_disk_read+0x32>
 8001002:	2303      	movs	r3, #3
 8001004:	e048      	b.n	8001098 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <SD_disk_read+0xd0>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <SD_disk_read+0x44>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	025b      	lsls	r3, r3, #9
 8001016:	607b      	str	r3, [r7, #4]

	SELECT();
 8001018:	f7ff fd20 	bl	8000a5c <SELECT>

	if (count == 1)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d111      	bne.n	8001046 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	2051      	movs	r0, #81	; 0x51
 8001026:	f7ff fe7e 	bl	8000d26 <SD_SendCmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d129      	bne.n	8001084 <SD_disk_read+0xb0>
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f7ff fe03 	bl	8000c40 <SD_RxDataBlock>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d021      	beq.n	8001084 <SD_disk_read+0xb0>
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	e01e      	b.n	8001084 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	2052      	movs	r0, #82	; 0x52
 800104a:	f7ff fe6c 	bl	8000d26 <SD_SendCmd>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d117      	bne.n	8001084 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	68b8      	ldr	r0, [r7, #8]
 800105a:	f7ff fdf1 	bl	8000c40 <SD_RxDataBlock>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <SD_disk_read+0xa6>
				buff += 512;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800106a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1ed      	bne.n	8001054 <SD_disk_read+0x80>
 8001078:	e000      	b.n	800107c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800107a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800107c:	2100      	movs	r1, #0
 800107e:	204c      	movs	r0, #76	; 0x4c
 8001080:	f7ff fe51 	bl	8000d26 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001084:	f7ff fcfa 	bl	8000a7c <DESELECT>
	SPI_RxByte();
 8001088:	f7ff fd3c 	bl	8000b04 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2db      	uxtb	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	200000a4 	.word	0x200000a4

080010a8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <SD_disk_write+0x1c>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <SD_disk_write+0x20>
 80010c4:	2304      	movs	r3, #4
 80010c6:	e06b      	b.n	80011a0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <SD_disk_write+0x100>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SD_disk_write+0x32>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e062      	b.n	80011a0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <SD_disk_write+0x100>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SD_disk_write+0x44>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e059      	b.n	80011a0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <SD_disk_write+0x104>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <SD_disk_write+0x56>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	607b      	str	r3, [r7, #4]

	SELECT();
 80010fe:	f7ff fcad 	bl	8000a5c <SELECT>

	if (count == 1)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d110      	bne.n	800112a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	2058      	movs	r0, #88	; 0x58
 800110c:	f7ff fe0b 	bl	8000d26 <SD_SendCmd>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13a      	bne.n	800118c <SD_disk_write+0xe4>
 8001116:	21fe      	movs	r1, #254	; 0xfe
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f7ff fdc1 	bl	8000ca0 <SD_TxDataBlock>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d033      	beq.n	800118c <SD_disk_write+0xe4>
			count = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	e030      	b.n	800118c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SD_disk_write+0x104>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001136:	2100      	movs	r1, #0
 8001138:	2077      	movs	r0, #119	; 0x77
 800113a:	f7ff fdf4 	bl	8000d26 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	2057      	movs	r0, #87	; 0x57
 8001142:	f7ff fdf0 	bl	8000d26 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2059      	movs	r0, #89	; 0x59
 800114a:	f7ff fdec 	bl	8000d26 <SD_SendCmd>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d11b      	bne.n	800118c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001154:	21fc      	movs	r1, #252	; 0xfc
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f7ff fda2 	bl	8000ca0 <SD_TxDataBlock>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00a      	beq.n	8001178 <SD_disk_write+0xd0>
				buff += 512;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001168:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1ee      	bne.n	8001154 <SD_disk_write+0xac>
 8001176:	e000      	b.n	800117a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001178:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800117a:	21fd      	movs	r1, #253	; 0xfd
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fd8f 	bl	8000ca0 <SD_TxDataBlock>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <SD_disk_write+0xe4>
			{
				count = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800118c:	f7ff fc76 	bl	8000a7c <DESELECT>
	SPI_RxByte();
 8001190:	f7ff fcb8 	bl	8000b04 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2db      	uxtb	r3, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	200000a4 	.word	0x200000a4

080011b0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	603a      	str	r2, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	460b      	mov	r3, r1
 80011be:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SD_disk_ioctl+0x1e>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e115      	b.n	80013fa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d124      	bne.n	8001224 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d012      	beq.n	8001208 <SD_disk_ioctl+0x58>
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	dc1a      	bgt.n	800121c <SD_disk_ioctl+0x6c>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <SD_disk_ioctl+0x40>
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d006      	beq.n	80011fc <SD_disk_ioctl+0x4c>
 80011ee:	e015      	b.n	800121c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80011f0:	f7ff fd0e 	bl	8000c10 <SD_PowerOff>
			res = RES_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011fa:	e0fc      	b.n	80013f6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80011fc:	f7ff fcc6 	bl	8000b8c <SD_PowerOn>
			res = RES_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001206:	e0f6      	b.n	80013f6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	1c5c      	adds	r4, r3, #1
 800120c:	f7ff fd0c 	bl	8000c28 <SD_CheckPower>
 8001210:	4603      	mov	r3, r0
 8001212:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800121a:	e0ec      	b.n	80013f6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800121c:	2304      	movs	r3, #4
 800121e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001222:	e0e8      	b.n	80013f6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001224:	4b77      	ldr	r3, [pc, #476]	; (8001404 <SD_disk_ioctl+0x254>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SD_disk_ioctl+0x86>
 8001232:	2303      	movs	r3, #3
 8001234:	e0e1      	b.n	80013fa <SD_disk_ioctl+0x24a>

		SELECT();
 8001236:	f7ff fc11 	bl	8000a5c <SELECT>

		switch (ctrl)
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	2b0d      	cmp	r3, #13
 800123e:	f200 80cb 	bhi.w	80013d8 <SD_disk_ioctl+0x228>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <SD_disk_ioctl+0x98>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001343 	.word	0x08001343
 800124c:	08001281 	.word	0x08001281
 8001250:	08001333 	.word	0x08001333
 8001254:	080013d9 	.word	0x080013d9
 8001258:	080013d9 	.word	0x080013d9
 800125c:	080013d9 	.word	0x080013d9
 8001260:	080013d9 	.word	0x080013d9
 8001264:	080013d9 	.word	0x080013d9
 8001268:	080013d9 	.word	0x080013d9
 800126c:	080013d9 	.word	0x080013d9
 8001270:	080013d9 	.word	0x080013d9
 8001274:	08001355 	.word	0x08001355
 8001278:	08001379 	.word	0x08001379
 800127c:	0800139d 	.word	0x0800139d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001280:	2100      	movs	r1, #0
 8001282:	2049      	movs	r0, #73	; 0x49
 8001284:	f7ff fd4f 	bl	8000d26 <SD_SendCmd>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80a8 	bne.w	80013e0 <SD_disk_ioctl+0x230>
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2110      	movs	r1, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fcd2 	bl	8000c40 <SD_RxDataBlock>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 809e 	beq.w	80013e0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80012a4:	7b3b      	ldrb	r3, [r7, #12]
 80012a6:	099b      	lsrs	r3, r3, #6
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10e      	bne.n	80012cc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80012ae:	7d7b      	ldrb	r3, [r7, #21]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	7d3b      	ldrb	r3, [r7, #20]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80012c2:	8bfb      	ldrh	r3, [r7, #30]
 80012c4:	029a      	lsls	r2, r3, #10
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e02e      	b.n	800132a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012cc:	7c7b      	ldrb	r3, [r7, #17]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	7dbb      	ldrb	r3, [r7, #22]
 80012d6:	09db      	lsrs	r3, r3, #7
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	7d7b      	ldrb	r3, [r7, #21]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f003 0306 	and.w	r3, r3, #6
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3302      	adds	r3, #2
 80012f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80012f4:	7d3b      	ldrb	r3, [r7, #20]
 80012f6:	099b      	lsrs	r3, r3, #6
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	7cfb      	ldrb	r3, [r7, #19]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	b29b      	uxth	r3, r3
 8001304:	4413      	add	r3, r2
 8001306:	b29a      	uxth	r2, r3
 8001308:	7cbb      	ldrb	r3, [r7, #18]
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	b29b      	uxth	r3, r3
 800130e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001312:	b29b      	uxth	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	3301      	adds	r3, #1
 800131a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800131c:	8bfa      	ldrh	r2, [r7, #30]
 800131e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001322:	3b09      	subs	r3, #9
 8001324:	409a      	lsls	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001330:	e056      	b.n	80013e0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001340:	e055      	b.n	80013ee <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001342:	f7ff fc09 	bl	8000b58 <SD_ReadyWait>
 8001346:	4603      	mov	r3, r0
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d14b      	bne.n	80013e4 <SD_disk_ioctl+0x234>
 800134c:	2300      	movs	r3, #0
 800134e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001352:	e047      	b.n	80013e4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001354:	2100      	movs	r1, #0
 8001356:	2049      	movs	r0, #73	; 0x49
 8001358:	f7ff fce5 	bl	8000d26 <SD_SendCmd>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d142      	bne.n	80013e8 <SD_disk_ioctl+0x238>
 8001362:	2110      	movs	r1, #16
 8001364:	6a38      	ldr	r0, [r7, #32]
 8001366:	f7ff fc6b 	bl	8000c40 <SD_RxDataBlock>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d03b      	beq.n	80013e8 <SD_disk_ioctl+0x238>
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001376:	e037      	b.n	80013e8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001378:	2100      	movs	r1, #0
 800137a:	204a      	movs	r0, #74	; 0x4a
 800137c:	f7ff fcd3 	bl	8000d26 <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d132      	bne.n	80013ec <SD_disk_ioctl+0x23c>
 8001386:	2110      	movs	r1, #16
 8001388:	6a38      	ldr	r0, [r7, #32]
 800138a:	f7ff fc59 	bl	8000c40 <SD_RxDataBlock>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d02b      	beq.n	80013ec <SD_disk_ioctl+0x23c>
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800139a:	e027      	b.n	80013ec <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800139c:	2100      	movs	r1, #0
 800139e:	207a      	movs	r0, #122	; 0x7a
 80013a0:	f7ff fcc1 	bl	8000d26 <SD_SendCmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d116      	bne.n	80013d8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013b0:	e00b      	b.n	80013ca <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80013b2:	6a3c      	ldr	r4, [r7, #32]
 80013b4:	1c63      	adds	r3, r4, #1
 80013b6:	623b      	str	r3, [r7, #32]
 80013b8:	f7ff fba4 	bl	8000b04 <SPI_RxByte>
 80013bc:	4603      	mov	r3, r0
 80013be:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80013c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013c4:	3301      	adds	r3, #1
 80013c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d9ef      	bls.n	80013b2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80013d8:	2304      	movs	r3, #4
 80013da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013de:	e006      	b.n	80013ee <SD_disk_ioctl+0x23e>
			break;
 80013e0:	bf00      	nop
 80013e2:	e004      	b.n	80013ee <SD_disk_ioctl+0x23e>
			break;
 80013e4:	bf00      	nop
 80013e6:	e002      	b.n	80013ee <SD_disk_ioctl+0x23e>
			break;
 80013e8:	bf00      	nop
 80013ea:	e000      	b.n	80013ee <SD_disk_ioctl+0x23e>
			break;
 80013ec:	bf00      	nop
		}

		DESELECT();
 80013ee:	f7ff fb45 	bl	8000a7c <DESELECT>
		SPI_RxByte();
 80013f2:	f7ff fb87 	bl	8000b04 <SPI_RxByte>
	}

	return res;
 80013f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	372c      	adds	r7, #44	; 0x2c
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000

08001408 <bufsize>:
uint8_t SPI1_pRxData[8];


/*******************************************************************************/
int bufsize (char *buf)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001414:	e002      	b.n	800141c <bufsize+0x14>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f6      	bne.n	8001416 <bufsize+0xe>
	return i;
 8001428:	68fb      	ldr	r3, [r7, #12]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <clear_buffer>:

void clear_buffer (void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	e007      	b.n	8001454 <clear_buffer+0x1c>
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <clear_buffer+0x34>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3301      	adds	r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	dbf3      	blt.n	8001444 <clear_buffer+0xc>
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200013e4 	.word	0x200013e4

08001470 <send_uart>:

void send_uart (char *string)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7fe fea9 	bl	80001d0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	b29a      	uxth	r2, r3
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <send_uart+0x2c>)
 800148e:	f004 ff1d 	bl	80062cc <HAL_UART_Transmit>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000188c 	.word	0x2000188c

080014a0 <write_to_csvfile>:

void write_to_csvfile (void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af04      	add	r7, sp, #16

		  dummy_timer =+ 1;
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <write_to_csvfile+0xac>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
		  dummy_cell_votlages =+ 0.3;
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <write_to_csvfile+0xb0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
		  dummy_pack_voltage =+ 11;
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <write_to_csvfile+0xb4>)
 80014b4:	220b      	movs	r2, #11
 80014b6:	701a      	strb	r2, [r3, #0]
		  dummy_pack_current =+ 0.5;
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <write_to_csvfile+0xb8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
		  dummy_temperature =+ 5;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <write_to_csvfile+0xbc>)
 80014c0:	2205      	movs	r2, #5
 80014c2:	701a      	strb	r2, [r3, #0]

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80014c4:	2203      	movs	r2, #3
 80014c6:	4926      	ldr	r1, [pc, #152]	; (8001560 <write_to_csvfile+0xc0>)
 80014c8:	4826      	ldr	r0, [pc, #152]	; (8001564 <write_to_csvfile+0xc4>)
 80014ca:	f008 fef1 	bl	800a2b0 <f_open>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <write_to_csvfile+0xc8>)
 80014d4:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <write_to_csvfile+0xc4>)
 80014d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014dc:	330c      	adds	r3, #12
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <write_to_csvfile+0xc4>)
 80014e4:	f009 ffb0 	bl	800b448 <f_lseek>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <write_to_csvfile+0xc8>)
 80014ee:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%d,%d,%d,%d,%d\r\n", dummy_timer, dummy_cell_votlages, dummy_pack_voltage, dummy_pack_current, dummy_temperature);
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <write_to_csvfile+0xac>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <write_to_csvfile+0xb0>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461c      	mov	r4, r3
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <write_to_csvfile+0xb4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <write_to_csvfile+0xb8>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <write_to_csvfile+0xbc>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	9101      	str	r1, [sp, #4]
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	4623      	mov	r3, r4
 8001514:	4602      	mov	r2, r0
 8001516:	4915      	ldr	r1, [pc, #84]	; (800156c <write_to_csvfile+0xcc>)
 8001518:	4815      	ldr	r0, [pc, #84]	; (8001570 <write_to_csvfile+0xd0>)
 800151a:	f00a fe1f 	bl	800c15c <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <write_to_csvfile+0xd0>)
 8001520:	f7ff ff72 	bl	8001408 <bufsize>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <write_to_csvfile+0xd4>)
 800152a:	4911      	ldr	r1, [pc, #68]	; (8001570 <write_to_csvfile+0xd0>)
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <write_to_csvfile+0xc4>)
 800152e:	f009 fc0f 	bl	800ad50 <f_write>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <write_to_csvfile+0xc8>)
 8001538:	701a      	strb	r2, [r3, #0]
		  //send_uart(buffer);
		  f_close (&fil);
 800153a:	480a      	ldr	r0, [pc, #40]	; (8001564 <write_to_csvfile+0xc4>)
 800153c:	f009 ff59 	bl	800b3f2 <f_close>

		  clear_buffer();
 8001540:	f7ff ff7a 	bl	8001438 <clear_buffer>
}
 8001544:	bf00      	nop
 8001546:	3704      	adds	r7, #4
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	200013d4 	.word	0x200013d4
 8001550:	2000298c 	.word	0x2000298c
 8001554:	200002f0 	.word	0x200002f0
 8001558:	20001950 	.word	0x20001950
 800155c:	20001810 	.word	0x20001810
 8001560:	0800c840 	.word	0x0800c840
 8001564:	20001960 	.word	0x20001960
 8001568:	2000181c 	.word	0x2000181c
 800156c:	0800c84c 	.word	0x0800c84c
 8001570:	200013e4 	.word	0x200013e4
 8001574:	2000180c 	.word	0x2000180c

08001578 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f001 fb94 	bl	8002cb4 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2 )
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d102      	bne.n	800159a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		CAN_data_checkFlag = 1;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
	}
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20001884 	.word	0x20001884
 80015a8:	20001934 	.word	0x20001934
 80015ac:	200000a8 	.word	0x200000a8

080015b0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, uart_rx_data, 4);
 80015b8:	2204      	movs	r2, #4
 80015ba:	4905      	ldr	r1, [pc, #20]	; (80015d0 <HAL_UART_RxCpltCallback+0x20>)
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_UART_RxCpltCallback+0x24>)
 80015be:	f004 ff19 	bl	80063f4 <HAL_UART_Receive_IT>
  uart_rx_flag = 1;
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_UART_RxCpltCallback+0x28>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20001954 	.word	0x20001954
 80015d4:	2000188c 	.word	0x2000188c
 80015d8:	200000ac 	.word	0x200000ac

080015dc <set_time>:



void set_time(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x53;
 80015f8:	2353      	movs	r3, #83	; 0x53
 80015fa:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	4812      	ldr	r0, [pc, #72]	; (8001658 <set_time+0x7c>)
 8001610:	f003 fdab 	bl	800516a <HAL_RTC_SetTime>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <set_time+0x42>
	  {
	    Error_Handler();
 800161a:	f000 fd91 	bl	8002140 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800161e:	2303      	movs	r3, #3
 8001620:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JUNE;
 8001622:	2306      	movs	r3, #6
 8001624:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x22;
 8001626:	2322      	movs	r3, #34	; 0x22
 8001628:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x22;
 800162a:	2322      	movs	r3, #34	; 0x22
 800162c:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800162e:	463b      	mov	r3, r7
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <set_time+0x7c>)
 8001636:	f003 feb3 	bl	80053a0 <HAL_RTC_SetDate>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <set_time+0x68>
	  {
	    Error_Handler();
 8001640:	f000 fd7e 	bl	8002140 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 8001644:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001648:	2101      	movs	r1, #1
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <set_time+0x7c>)
 800164c:	f004 f82e 	bl	80056ac <HAL_RTCEx_BKUPWrite>

	  /* USER CODE END RTC_Init 2 */
}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200017e4 	.word	0x200017e4

0800165c <get_time>:


void get_time(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4817      	ldr	r0, [pc, #92]	; (80016c8 <get_time+0x6c>)
 800166a:	f003 fe3b 	bl	80052e4 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	4814      	ldr	r0, [pc, #80]	; (80016c8 <get_time+0x6c>)
 8001678:	f003 ff39 	bl	80054ee <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf(buffer,"Time is: %02d:%02d:%02d\r\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800167c:	783b      	ldrb	r3, [r7, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	4619      	mov	r1, r3
 8001684:	78bb      	ldrb	r3, [r7, #2]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	460b      	mov	r3, r1
 800168a:	4910      	ldr	r1, [pc, #64]	; (80016cc <get_time+0x70>)
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <get_time+0x74>)
 800168e:	f00a fd65 	bl	800c15c <siprintf>
 send_uart(buffer);
 8001692:	480f      	ldr	r0, [pc, #60]	; (80016d0 <get_time+0x74>)
 8001694:	f7ff feec 	bl	8001470 <send_uart>
 clear_buffer();
 8001698:	f7ff fece 	bl	8001438 <clear_buffer>
/* Display date Format: dd-mm-yy */
 sprintf(buffer,"Date is : %02d-%02d-%2d\r\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800169c:	7dbb      	ldrb	r3, [r7, #22]
 800169e:	461a      	mov	r2, r3
 80016a0:	7d7b      	ldrb	r3, [r7, #21]
 80016a2:	4619      	mov	r1, r3
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	460b      	mov	r3, r1
 80016ae:	4909      	ldr	r1, [pc, #36]	; (80016d4 <get_time+0x78>)
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <get_time+0x74>)
 80016b2:	f00a fd53 	bl	800c15c <siprintf>
 send_uart(buffer);
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <get_time+0x74>)
 80016b8:	f7ff feda 	bl	8001470 <send_uart>
 clear_buffer();
 80016bc:	f7ff febc 	bl	8001438 <clear_buffer>
}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200017e4 	.word	0x200017e4
 80016cc:	0800c860 	.word	0x0800c860
 80016d0:	200013e4 	.word	0x200013e4
 80016d4:	0800c87c 	.word	0x0800c87c

080016d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //interrupt callback function for Charger detect
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI5 (PB5 Pin)
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2b20      	cmp	r3, #32
 80016e6:	d119      	bne.n	800171c <HAL_GPIO_EXTI_Callback+0x44>
    {
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80016e8:	2120      	movs	r1, #32
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <HAL_GPIO_EXTI_Callback+0x4c>)
 80016ec:	f002 f94c 	bl	8003988 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_GPIO_EXTI_Callback+0x32>
    	{
    		sprintf(buffer, "Charger detected\r\n");
 80016f6:	490c      	ldr	r1, [pc, #48]	; (8001728 <HAL_GPIO_EXTI_Callback+0x50>)
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <HAL_GPIO_EXTI_Callback+0x54>)
 80016fa:	f00a fd2f 	bl	800c15c <siprintf>
    		send_uart(buffer);
 80016fe:	480b      	ldr	r0, [pc, #44]	; (800172c <HAL_GPIO_EXTI_Callback+0x54>)
 8001700:	f7ff feb6 	bl	8001470 <send_uart>
    		clear_buffer();
 8001704:	f7ff fe98 	bl	8001438 <clear_buffer>
    		sprintf(buffer, "Charger has been disconnected\r\n");
    		send_uart(buffer);
    		clear_buffer();
    	}
    }
}
 8001708:	e008      	b.n	800171c <HAL_GPIO_EXTI_Callback+0x44>
    		sprintf(buffer, "Charger has been disconnected\r\n");
 800170a:	4909      	ldr	r1, [pc, #36]	; (8001730 <HAL_GPIO_EXTI_Callback+0x58>)
 800170c:	4807      	ldr	r0, [pc, #28]	; (800172c <HAL_GPIO_EXTI_Callback+0x54>)
 800170e:	f00a fd25 	bl	800c15c <siprintf>
    		send_uart(buffer);
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <HAL_GPIO_EXTI_Callback+0x54>)
 8001714:	f7ff feac 	bl	8001470 <send_uart>
    		clear_buffer();
 8001718:	f7ff fe8e 	bl	8001438 <clear_buffer>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	48000400 	.word	0x48000400
 8001728:	0800c898 	.word	0x0800c898
 800172c:	200013e4 	.word	0x200013e4
 8001730:	0800c8ac 	.word	0x0800c8ac

08001734 <wakeup_idle>:

void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e019      	b.n	8001778 <wakeup_idle+0x44>
	{
		SPI1_pTxData[0] = 0xFF;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <wakeup_idle+0x58>)
 8001746:	22ff      	movs	r2, #255	; 0xff
 8001748:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2110      	movs	r1, #16
 800174e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001752:	f002 f931 	bl	80039b8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, &SPI1_pTxData, &SPI1_pRxData, 8,SPI1_TIMEOUT);//Guarantees the isoSPI will be in ready mode
 8001756:	2364      	movs	r3, #100	; 0x64
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2308      	movs	r3, #8
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <wakeup_idle+0x5c>)
 800175e:	490b      	ldr	r1, [pc, #44]	; (800178c <wakeup_idle+0x58>)
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <wakeup_idle+0x60>)
 8001762:	f004 f9ee 	bl	8005b42 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2110      	movs	r1, #16
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f002 f923 	bl	80039b8 <HAL_GPIO_WritePin>
	for (int i =0; i<total_ic; i++)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbe1      	blt.n	8001744 <wakeup_idle+0x10>
	}
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200013d8 	.word	0x200013d8
 8001790:	20001914 	.word	0x20001914
 8001794:	20001820 	.word	0x20001820

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179e:	f000 ff1b 	bl	80025d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a2:	f000 fa7f 	bl	8001ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a6:	f000 fc49 	bl	800203c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017aa:	f000 fc17 	bl	8001fdc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80017ae:	f000 fbd7 	bl	8001f60 <MX_SPI2_Init>
  MX_FATFS_Init();
 80017b2:	f005 ff91 	bl	80076d8 <MX_FATFS_Init>
  MX_CAN_Init();
 80017b6:	f000 fae1 	bl	8001d7c <MX_CAN_Init>
  MX_RTC_Init();
 80017ba:	f000 fb33 	bl	8001e24 <MX_RTC_Init>
  MX_SPI1_Init();
 80017be:	f000 fb91 	bl	8001ee4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  HAL_Delay(250);
 80017c2:	20fa      	movs	r0, #250	; 0xfa
 80017c4:	f000 ff6e 	bl	80026a4 <HAL_Delay>

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 80017c8:	4921      	ldr	r1, [pc, #132]	; (8001850 <main+0xb8>)
 80017ca:	4822      	ldr	r0, [pc, #136]	; (8001854 <main+0xbc>)
 80017cc:	f00a fcc6 	bl	800c15c <siprintf>
  send_uart(buffer);
 80017d0:	4820      	ldr	r0, [pc, #128]	; (8001854 <main+0xbc>)
 80017d2:	f7ff fe4d 	bl	8001470 <send_uart>
  clear_buffer();
 80017d6:	f7ff fe2f 	bl	8001438 <clear_buffer>

  if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0x32F2)
 80017da:	2101      	movs	r1, #1
 80017dc:	481e      	ldr	r0, [pc, #120]	; (8001858 <main+0xc0>)
 80017de:	f003 ff7f 	bl	80056e0 <HAL_RTCEx_BKUPRead>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d001      	beq.n	80017f0 <main+0x58>
  	  {
	  	  set_time(); //set RTC init value
 80017ec:	f7ff fef6 	bl	80015dc <set_time>
  	  }

  /*CAN Initializations*/
  HAL_CAN_Start(&hcan);
 80017f0:	481a      	ldr	r0, [pc, #104]	; (800185c <main+0xc4>)
 80017f2:	f001 f940 	bl	8002a76 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //using FIFO0 for RX callback reception
 80017f6:	2102      	movs	r1, #2
 80017f8:	4818      	ldr	r0, [pc, #96]	; (800185c <main+0xc4>)
 80017fa:	f001 fb6d 	bl	8002ed8 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; //data
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <main+0xc8>)
 8001800:	2202      	movs	r2, #2
 8001802:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <main+0xc8>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <main+0xc8>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  //id
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <main+0xc8>)
 8001812:	f240 4246 	movw	r2, #1094	; 0x446
 8001816:	601a      	str	r2, [r3, #0]

  //populate data to Txdata bytes
  TxData[0] = 11;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <main+0xcc>)
 800181a:	220b      	movs	r2, #11
 800181c:	701a      	strb	r2, [r3, #0]
  TxData[1] = 100;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <main+0xcc>)
 8001820:	2264      	movs	r2, #100	; 0x64
 8001822:	705a      	strb	r2, [r3, #1]
  //send CAN message // TO DO:check CAN message reception on BluePill
  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);

  HAL_UART_Receive_IT (&huart2, uart_rx_data, 4); //set interrupt for uart rx
 8001824:	2204      	movs	r2, #4
 8001826:	4910      	ldr	r1, [pc, #64]	; (8001868 <main+0xd0>)
 8001828:	4810      	ldr	r0, [pc, #64]	; (800186c <main+0xd4>)
 800182a:	f004 fde3 	bl	80063f4 <HAL_UART_Receive_IT>

  //mount SD card and check SD card mounting status
  fresult = f_mount(&fs, "/", 1);
 800182e:	2201      	movs	r2, #1
 8001830:	490f      	ldr	r1, [pc, #60]	; (8001870 <main+0xd8>)
 8001832:	4810      	ldr	r0, [pc, #64]	; (8001874 <main+0xdc>)
 8001834:	f008 fcf2 	bl	800a21c <f_mount>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <main+0xe0>)
 800183e:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK)
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <main+0xe0>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01b      	beq.n	8001880 <main+0xe8>
  	{
  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <main+0xe4>)
 800184a:	f7ff fe11 	bl	8001470 <send_uart>
 800184e:	e01a      	b.n	8001886 <main+0xee>
 8001850:	0800c8cc 	.word	0x0800c8cc
 8001854:	200013e4 	.word	0x200013e4
 8001858:	200017e4 	.word	0x200017e4
 800185c:	200013a8 	.word	0x200013a8
 8001860:	2000191c 	.word	0x2000191c
 8001864:	20001804 	.word	0x20001804
 8001868:	20001954 	.word	0x20001954
 800186c:	2000188c 	.word	0x2000188c
 8001870:	0800c8f4 	.word	0x0800c8f4
 8001874:	20000378 	.word	0x20000378
 8001878:	2000181c 	.word	0x2000181c
 800187c:	0800c8f8 	.word	0x0800c8f8

  	}
  	else
  	{
  		send_uart("SD CARD mounted successfully...\r\n");
 8001880:	48bc      	ldr	r0, [pc, #752]	; (8001b74 <main+0x3dc>)
 8001882:	f7ff fdf5 	bl	8001470 <send_uart>
  	}

  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 8001886:	4abc      	ldr	r2, [pc, #752]	; (8001b78 <main+0x3e0>)
 8001888:	49bc      	ldr	r1, [pc, #752]	; (8001b7c <main+0x3e4>)
 800188a:	48bd      	ldr	r0, [pc, #756]	; (8001b80 <main+0x3e8>)
 800188c:	f00a f910 	bl	800bab0 <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001890:	4bb9      	ldr	r3, [pc, #740]	; (8001b78 <main+0x3e0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001898:	3314      	adds	r3, #20
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	1e9a      	subs	r2, r3, #2
 800189e:	4bb6      	ldr	r3, [pc, #728]	; (8001b78 <main+0x3e0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a6:	3302      	adds	r3, #2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	fb03 f302 	mul.w	r3, r3, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe28 	bl	8000504 <__aeabi_ui2d>
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4bb2      	ldr	r3, [pc, #712]	; (8001b84 <main+0x3ec>)
 80018ba:	f7fe fe9d 	bl	80005f8 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f8a9 	bl	8000a1c <__aeabi_d2uiz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4aae      	ldr	r2, [pc, #696]	; (8001b88 <main+0x3f0>)
 80018ce:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 80018d0:	4bad      	ldr	r3, [pc, #692]	; (8001b88 <main+0x3f0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	49ad      	ldr	r1, [pc, #692]	; (8001b8c <main+0x3f4>)
 80018d8:	48ad      	ldr	r0, [pc, #692]	; (8001b90 <main+0x3f8>)
 80018da:	f00a fc3f 	bl	800c15c <siprintf>
  	send_uart(buffer);
 80018de:	48ac      	ldr	r0, [pc, #688]	; (8001b90 <main+0x3f8>)
 80018e0:	f7ff fdc6 	bl	8001470 <send_uart>
  	clear_buffer();
 80018e4:	f7ff fda8 	bl	8001438 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80018e8:	4ba3      	ldr	r3, [pc, #652]	; (8001b78 <main+0x3e0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f0:	3302      	adds	r3, #2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4ba1      	ldr	r3, [pc, #644]	; (8001b7c <main+0x3e4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	fb03 f302 	mul.w	r3, r3, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe00 	bl	8000504 <__aeabi_ui2d>
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b9e      	ldr	r3, [pc, #632]	; (8001b84 <main+0x3ec>)
 800190a:	f7fe fe75 	bl	80005f8 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f881 	bl	8000a1c <__aeabi_d2uiz>
 800191a:	4603      	mov	r3, r0
 800191c:	4a9d      	ldr	r2, [pc, #628]	; (8001b94 <main+0x3fc>)
 800191e:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 8001920:	4b9c      	ldr	r3, [pc, #624]	; (8001b94 <main+0x3fc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	499c      	ldr	r1, [pc, #624]	; (8001b98 <main+0x400>)
 8001928:	4899      	ldr	r0, [pc, #612]	; (8001b90 <main+0x3f8>)
 800192a:	f00a fc17 	bl	800c15c <siprintf>
  	send_uart(buffer);
 800192e:	4898      	ldr	r0, [pc, #608]	; (8001b90 <main+0x3f8>)
 8001930:	f7ff fd9e 	bl	8001470 <send_uart>
  	clear_buffer();
 8001934:	f7ff fd80 	bl	8001438 <clear_buffer>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001938:	2213      	movs	r2, #19
 800193a:	4998      	ldr	r1, [pc, #608]	; (8001b9c <main+0x404>)
 800193c:	4898      	ldr	r0, [pc, #608]	; (8001ba0 <main+0x408>)
 800193e:	f008 fcb7 	bl	800a2b0 <f_open>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b97      	ldr	r3, [pc, #604]	; (8001ba4 <main+0x40c>)
 8001948:	701a      	strb	r2, [r3, #0]
  	/* Writing text */
  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 800194a:	4995      	ldr	r1, [pc, #596]	; (8001ba0 <main+0x408>)
 800194c:	4896      	ldr	r0, [pc, #600]	; (8001ba8 <main+0x410>)
 800194e:	f00a fa0b 	bl	800bd68 <f_puts>
  	/* Close file */
  	fresult = f_close(&fil);
 8001952:	4893      	ldr	r0, [pc, #588]	; (8001ba0 <main+0x408>)
 8001954:	f009 fd4d 	bl	800b3f2 <f_close>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <main+0x40c>)
 800195e:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)
 8001960:	4b90      	ldr	r3, [pc, #576]	; (8001ba4 <main+0x40c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <main+0x1d6>
  	{
  		send_uart ("File1.txt created and the data is written \r\n");
 8001968:	4890      	ldr	r0, [pc, #576]	; (8001bac <main+0x414>)
 800196a:	f7ff fd81 	bl	8001470 <send_uart>
  	}

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 800196e:	2201      	movs	r2, #1
 8001970:	498a      	ldr	r1, [pc, #552]	; (8001b9c <main+0x404>)
 8001972:	488b      	ldr	r0, [pc, #556]	; (8001ba0 <main+0x408>)
 8001974:	f008 fc9c 	bl	800a2b0 <f_open>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <main+0x40c>)
 800197e:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 8001980:	4b87      	ldr	r3, [pc, #540]	; (8001ba0 <main+0x408>)
 8001982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001986:	330c      	adds	r3, #12
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a85      	ldr	r2, [pc, #532]	; (8001ba0 <main+0x408>)
 800198c:	4619      	mov	r1, r3
 800198e:	4880      	ldr	r0, [pc, #512]	; (8001b90 <main+0x3f8>)
 8001990:	f00a f970 	bl	800bc74 <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 8001994:	4886      	ldr	r0, [pc, #536]	; (8001bb0 <main+0x418>)
 8001996:	f7ff fd6b 	bl	8001470 <send_uart>
  	send_uart(buffer);
 800199a:	487d      	ldr	r0, [pc, #500]	; (8001b90 <main+0x3f8>)
 800199c:	f7ff fd68 	bl	8001470 <send_uart>
  	send_uart("\r\n");
 80019a0:	4884      	ldr	r0, [pc, #528]	; (8001bb4 <main+0x41c>)
 80019a2:	f7ff fd65 	bl	8001470 <send_uart>
  	/* Close file */
  	f_close(&fil);
 80019a6:	487e      	ldr	r0, [pc, #504]	; (8001ba0 <main+0x408>)
 80019a8:	f009 fd23 	bl	800b3f2 <f_close>
  	clear_buffer();
 80019ac:	f7ff fd44 	bl	8001438 <clear_buffer>
  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80019b0:	220a      	movs	r2, #10
 80019b2:	4981      	ldr	r1, [pc, #516]	; (8001bb8 <main+0x420>)
 80019b4:	487a      	ldr	r0, [pc, #488]	; (8001ba0 <main+0x408>)
 80019b6:	f008 fc7b 	bl	800a2b0 <f_open>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <main+0x40c>)
 80019c0:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 80019c2:	4a73      	ldr	r2, [pc, #460]	; (8001b90 <main+0x3f8>)
 80019c4:	4b7d      	ldr	r3, [pc, #500]	; (8001bbc <main+0x424>)
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	2351      	movs	r3, #81	; 0x51
 80019cc:	461a      	mov	r2, r3
 80019ce:	f00a faf5 	bl	800bfbc <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80019d2:	486f      	ldr	r0, [pc, #444]	; (8001b90 <main+0x3f8>)
 80019d4:	f7ff fd18 	bl	8001408 <bufsize>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <main+0x428>)
 80019de:	496c      	ldr	r1, [pc, #432]	; (8001b90 <main+0x3f8>)
 80019e0:	486f      	ldr	r0, [pc, #444]	; (8001ba0 <main+0x408>)
 80019e2:	f009 f9b5 	bl	800ad50 <f_write>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <main+0x40c>)
 80019ec:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <main+0x40c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <main+0x264>
  	{
  		send_uart ("File2.txt created and the data is written \r\n");
 80019f6:	4873      	ldr	r0, [pc, #460]	; (8001bc4 <main+0x42c>)
 80019f8:	f7ff fd3a 	bl	8001470 <send_uart>
  	}

  	/* Close file */
  	f_close(&fil);
 80019fc:	4868      	ldr	r0, [pc, #416]	; (8001ba0 <main+0x408>)
 80019fe:	f009 fcf8 	bl	800b3f2 <f_close>
  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 8001a02:	f7ff fd19 	bl	8001438 <clear_buffer>
  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 8001a06:	2201      	movs	r2, #1
 8001a08:	496b      	ldr	r1, [pc, #428]	; (8001bb8 <main+0x420>)
 8001a0a:	4865      	ldr	r0, [pc, #404]	; (8001ba0 <main+0x408>)
 8001a0c:	f008 fc50 	bl	800a2b0 <f_open>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b63      	ldr	r3, [pc, #396]	; (8001ba4 <main+0x40c>)
 8001a16:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK){
 8001a18:	4b62      	ldr	r3, [pc, #392]	; (8001ba4 <main+0x40c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <main+0x28e>
  		send_uart ("file2.txt is open and the data is shown below\r\n");
 8001a20:	4869      	ldr	r0, [pc, #420]	; (8001bc8 <main+0x430>)
 8001a22:	f7ff fd25 	bl	8001470 <send_uart>
  	}

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 8001a26:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <main+0x408>)
 8001a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2c:	330c      	adds	r3, #12
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <main+0x434>)
 8001a32:	4957      	ldr	r1, [pc, #348]	; (8001b90 <main+0x3f8>)
 8001a34:	485a      	ldr	r0, [pc, #360]	; (8001ba0 <main+0x408>)
 8001a36:	f008 ff75 	bl	800a924 <f_read>
  	send_uart(buffer);
 8001a3a:	4855      	ldr	r0, [pc, #340]	; (8001b90 <main+0x3f8>)
 8001a3c:	f7ff fd18 	bl	8001470 <send_uart>
  	send_uart("\r\n");
 8001a40:	485c      	ldr	r0, [pc, #368]	; (8001bb4 <main+0x41c>)
 8001a42:	f7ff fd15 	bl	8001470 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001a46:	4856      	ldr	r0, [pc, #344]	; (8001ba0 <main+0x408>)
 8001a48:	f009 fcd3 	bl	800b3f2 <f_close>

  	clear_buffer();
 8001a4c:	f7ff fcf4 	bl	8001438 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8001a50:	2203      	movs	r2, #3
 8001a52:	4959      	ldr	r1, [pc, #356]	; (8001bb8 <main+0x420>)
 8001a54:	4852      	ldr	r0, [pc, #328]	; (8001ba0 <main+0x408>)
 8001a56:	f008 fc2b 	bl	800a2b0 <f_open>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b51      	ldr	r3, [pc, #324]	; (8001ba4 <main+0x40c>)
 8001a60:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 8001a62:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <main+0x408>)
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	330c      	adds	r3, #12
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	484c      	ldr	r0, [pc, #304]	; (8001ba0 <main+0x408>)
 8001a70:	f009 fcea 	bl	800b448 <f_lseek>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <main+0x40c>)
 8001a7a:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)
 8001a7c:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <main+0x40c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <main+0x2f2>
  	{
  		send_uart ("About to update the file2.txt\r\n");
 8001a84:	4852      	ldr	r0, [pc, #328]	; (8001bd0 <main+0x438>)
 8001a86:	f7ff fcf3 	bl	8001470 <send_uart>
  	}

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8001a8a:	4945      	ldr	r1, [pc, #276]	; (8001ba0 <main+0x408>)
 8001a8c:	4851      	ldr	r0, [pc, #324]	; (8001bd4 <main+0x43c>)
 8001a8e:	f00a f96b 	bl	800bd68 <f_puts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <main+0x40c>)
 8001a98:	701a      	strb	r2, [r3, #0]
  	f_close (&fil);
 8001a9a:	4841      	ldr	r0, [pc, #260]	; (8001ba0 <main+0x408>)
 8001a9c:	f009 fca9 	bl	800b3f2 <f_close>
  	clear_buffer();
 8001aa0:	f7ff fcca 	bl	8001438 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4944      	ldr	r1, [pc, #272]	; (8001bb8 <main+0x420>)
 8001aa8:	483d      	ldr	r0, [pc, #244]	; (8001ba0 <main+0x408>)
 8001aaa:	f008 fc01 	bl	800a2b0 <f_open>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <main+0x40c>)
 8001ab4:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <main+0x408>)
 8001ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abc:	330c      	adds	r3, #12
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <main+0x434>)
 8001ac2:	4933      	ldr	r1, [pc, #204]	; (8001b90 <main+0x3f8>)
 8001ac4:	4836      	ldr	r0, [pc, #216]	; (8001ba0 <main+0x408>)
 8001ac6:	f008 ff2d 	bl	800a924 <f_read>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <main+0x40c>)
 8001ad0:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <main+0x40c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d108      	bne.n	8001aec <main+0x354>
  	{
  		send_uart ("Below is the data from updated file2.txt\r\n");
 8001ada:	483f      	ldr	r0, [pc, #252]	; (8001bd8 <main+0x440>)
 8001adc:	f7ff fcc8 	bl	8001470 <send_uart>
  		send_uart(buffer);
 8001ae0:	482b      	ldr	r0, [pc, #172]	; (8001b90 <main+0x3f8>)
 8001ae2:	f7ff fcc5 	bl	8001470 <send_uart>
  		send_uart("\r\n");
 8001ae6:	4833      	ldr	r0, [pc, #204]	; (8001bb4 <main+0x41c>)
 8001ae8:	f7ff fcc2 	bl	8001470 <send_uart>
  	}

  	/* Close file */
  	f_close(&fil);
 8001aec:	482c      	ldr	r0, [pc, #176]	; (8001ba0 <main+0x408>)
 8001aee:	f009 fc80 	bl	800b3f2 <f_close>

  	clear_buffer();
 8001af2:	f7ff fca1 	bl	8001438 <clear_buffer>


  	/*Create csv file to log random data*/
  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001af6:	2213      	movs	r2, #19
 8001af8:	4938      	ldr	r1, [pc, #224]	; (8001bdc <main+0x444>)
 8001afa:	4829      	ldr	r0, [pc, #164]	; (8001ba0 <main+0x408>)
 8001afc:	f008 fbd8 	bl	800a2b0 <f_open>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <main+0x40c>)
 8001b06:	701a      	strb	r2, [r3, #0]
  	/* Writing text */
  	f_puts("Timer(s), Cell_Voltages, Pack_Voltage, Pack_Current, Temperature\r\n ", &fil);
 8001b08:	4925      	ldr	r1, [pc, #148]	; (8001ba0 <main+0x408>)
 8001b0a:	4835      	ldr	r0, [pc, #212]	; (8001be0 <main+0x448>)
 8001b0c:	f00a f92c 	bl	800bd68 <f_puts>
  	/* Close file */
  	fresult = f_close(&fil);
 8001b10:	4823      	ldr	r0, [pc, #140]	; (8001ba0 <main+0x408>)
 8001b12:	f009 fc6e 	bl	800b3f2 <f_close>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <main+0x40c>)
 8001b1c:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <main+0x40c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <main+0x394>
  	{
  		send_uart ("File3.csv created and header is written \r\n");
 8001b26:	482f      	ldr	r0, [pc, #188]	; (8001be4 <main+0x44c>)
 8001b28:	f7ff fca2 	bl	8001470 <send_uart>
//  	{
//  		send_uart ("SD CARD UNMOUNTED successfully...\r\n");
//  	}


  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b32:	482d      	ldr	r0, [pc, #180]	; (8001be8 <main+0x450>)
 8001b34:	f001 ff40 	bl	80039b8 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8001b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3c:	f000 fdb2 	bl	80026a4 <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); //turn OFF precharge relay
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b46:	4828      	ldr	r0, [pc, #160]	; (8001be8 <main+0x450>)
 8001b48:	f001 ff36 	bl	80039b8 <HAL_GPIO_WritePin>
  	HAL_Delay(250);
 8001b4c:	20fa      	movs	r0, #250	; 0xfa
 8001b4e:	f000 fda9 	bl	80026a4 <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET); //turn ON HV+ contactor
 8001b52:	2201      	movs	r2, #1
 8001b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b58:	4823      	ldr	r0, [pc, #140]	; (8001be8 <main+0x450>)
 8001b5a:	f001 ff2d 	bl	80039b8 <HAL_GPIO_WritePin>

  	//TO DO:add LTC6811 library files/use driverSWLTC6804 functions
  	wakeup_idle(2);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f7ff fde8 	bl	8001734 <wakeup_idle>
  	HAL_Delay(10);
 8001b64:	200a      	movs	r0, #10
 8001b66:	f000 fd9d 	bl	80026a4 <HAL_Delay>
  	wakeup_idle(2);
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f7ff fde2 	bl	8001734 <wakeup_idle>
 8001b70:	e03c      	b.n	8001bec <main+0x454>
 8001b72:	bf00      	nop
 8001b74:	0800c91c 	.word	0x0800c91c
 8001b78:	20001818 	.word	0x20001818
 8001b7c:	200002ec 	.word	0x200002ec
 8001b80:	0800c940 	.word	0x0800c940
 8001b84:	3fe00000 	.word	0x3fe00000
 8001b88:	20001910 	.word	0x20001910
 8001b8c:	0800c944 	.word	0x0800c944
 8001b90:	200013e4 	.word	0x200013e4
 8001b94:	200013e0 	.word	0x200013e0
 8001b98:	0800c960 	.word	0x0800c960
 8001b9c:	0800c97c 	.word	0x0800c97c
 8001ba0:	20001960 	.word	0x20001960
 8001ba4:	2000181c 	.word	0x2000181c
 8001ba8:	0800c988 	.word	0x0800c988
 8001bac:	0800c9cc 	.word	0x0800c9cc
 8001bb0:	0800c9fc 	.word	0x0800c9fc
 8001bb4:	0800ca3c 	.word	0x0800ca3c
 8001bb8:	0800ca40 	.word	0x0800ca40
 8001bbc:	0800ca4c 	.word	0x0800ca4c
 8001bc0:	2000180c 	.word	0x2000180c
 8001bc4:	0800caa0 	.word	0x0800caa0
 8001bc8:	0800cad0 	.word	0x0800cad0
 8001bcc:	200013d0 	.word	0x200013d0
 8001bd0:	0800cb00 	.word	0x0800cb00
 8001bd4:	0800cb20 	.word	0x0800cb20
 8001bd8:	0800cb54 	.word	0x0800cb54
 8001bdc:	0800c840 	.word	0x0800c840
 8001be0:	0800cb80 	.word	0x0800cb80
 8001be4:	0800cbc4 	.word	0x0800cbc4
 8001be8:	48000400 	.word	0x48000400
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Receive (&huart2, Rx_data, 4, 1000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8001bec:	2108      	movs	r1, #8
 8001bee:	4821      	ldr	r0, [pc, #132]	; (8001c74 <main+0x4dc>)
 8001bf0:	f001 fefa 	bl	80039e8 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11); //toggle precharge relay
	  //HAL_UART_Transmit(&huart2,char_data,sizeof(char_data),10);
	  write_to_csvfile();
 8001bf4:	f7ff fc54 	bl	80014a0 <write_to_csvfile>
	  HAL_Delay(250);
 8001bf8:	20fa      	movs	r0, #250	; 0xfa
 8001bfa:	f000 fd53 	bl	80026a4 <HAL_Delay>
	  //send CAN message // TO DO:check CAN message reception on BluePill
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <main+0x4e0>)
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <main+0x4e4>)
 8001c02:	491f      	ldr	r1, [pc, #124]	; (8001c80 <main+0x4e8>)
 8001c04:	481f      	ldr	r0, [pc, #124]	; (8001c84 <main+0x4ec>)
 8001c06:	f000 ff7a 	bl	8002afe <HAL_CAN_AddTxMessage>

	  if(CAN_data_checkFlag) //check if CAN RX flag is set in HAL_CAN_RxFifo0MsgPendingCallback
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <main+0x4f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d010      	beq.n	8001c34 <main+0x49c>
	  {
		  sprintf(buffer, "CAN Message values received is:%d, %d\r\n", RxData[0], RxData[1]);
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <main+0x4f4>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <main+0x4f4>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	491c      	ldr	r1, [pc, #112]	; (8001c90 <main+0x4f8>)
 8001c1e:	481d      	ldr	r0, [pc, #116]	; (8001c94 <main+0x4fc>)
 8001c20:	f00a fa9c 	bl	800c15c <siprintf>
		  send_uart(buffer);
 8001c24:	481b      	ldr	r0, [pc, #108]	; (8001c94 <main+0x4fc>)
 8001c26:	f7ff fc23 	bl	8001470 <send_uart>
		  clear_buffer();
 8001c2a:	f7ff fc05 	bl	8001438 <clear_buffer>
		  CAN_data_checkFlag = 0;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <main+0x4f0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
		  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	  }

	  if(uart_rx_flag)
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <main+0x500>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d015      	beq.n	8001c68 <main+0x4d0>
	  {
		  sprintf(buffer, "RX Message is: %c, %c, %c\r\n", uart_rx_data[0], uart_rx_data[1], uart_rx_data[2]);
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <main+0x504>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <main+0x504>)
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <main+0x504>)
 8001c4a:	789b      	ldrb	r3, [r3, #2]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4913      	ldr	r1, [pc, #76]	; (8001ca0 <main+0x508>)
 8001c52:	4810      	ldr	r0, [pc, #64]	; (8001c94 <main+0x4fc>)
 8001c54:	f00a fa82 	bl	800c15c <siprintf>
		  send_uart(buffer);
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <main+0x4fc>)
 8001c5a:	f7ff fc09 	bl	8001470 <send_uart>
		  clear_buffer();
 8001c5e:	f7ff fbeb 	bl	8001438 <clear_buffer>
		  uart_rx_flag = 0;
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <main+0x500>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

	  }

	  get_time();  //print RTC
 8001c68:	f7ff fcf8 	bl	800165c <get_time>
	  HAL_Delay(250);
 8001c6c:	20fa      	movs	r0, #250	; 0xfa
 8001c6e:	f000 fd19 	bl	80026a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 8001c72:	e7bb      	b.n	8001bec <main+0x454>
 8001c74:	48000400 	.word	0x48000400
 8001c78:	20001814 	.word	0x20001814
 8001c7c:	20001804 	.word	0x20001804
 8001c80:	2000191c 	.word	0x2000191c
 8001c84:	200013a8 	.word	0x200013a8
 8001c88:	200000a8 	.word	0x200000a8
 8001c8c:	20001884 	.word	0x20001884
 8001c90:	0800cbf0 	.word	0x0800cbf0
 8001c94:	200013e4 	.word	0x200013e4
 8001c98:	200000ac 	.word	0x200000ac
 8001c9c:	20001954 	.word	0x20001954
 8001ca0:	0800cc18 	.word	0x0800cc18

08001ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b09e      	sub	sp, #120	; 0x78
 8001ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001caa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cae:	2228      	movs	r2, #40	; 0x28
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f00a f990 	bl	800bfd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	463b      	mov	r3, r7
 8001cca:	223c      	movs	r2, #60	; 0x3c
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00a f982 	bl	800bfd8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cd4:	f001 feba 	bl	8003a4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <SystemClock_Config+0xd0>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <SystemClock_Config+0xd0>)
 8001cde:	f023 0318 	bic.w	r3, r3, #24
 8001ce2:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001ce4:	2305      	movs	r3, #5
 8001ce6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d02:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d04:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d08:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 feac 	bl	8003a6c <HAL_RCC_OscConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001d1a:	f000 fa11 	bl	8002140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1e:	230f      	movs	r3, #15
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d22:	2302      	movs	r3, #2
 8001d24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 fd9e 	bl	800487c <HAL_RCC_ClockConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d46:	f000 f9fb 	bl	8002140 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <SystemClock_Config+0xd4>)
 8001d4c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d56:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d58:	463b      	mov	r3, r7
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 ffc4 	bl	8004ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d66:	f000 f9eb 	bl	8002140 <Error_Handler>
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3778      	adds	r7, #120	; 0x78
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	00010002 	.word	0x00010002

08001d7c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001d84:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <MX_CAN_Init+0xa4>)
 8001d86:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001d8a:	2212      	movs	r2, #18
 8001d8c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001d9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001da0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001dcc:	4813      	ldr	r0, [pc, #76]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001dce:	f000 fc8d 	bl	80026ec <HAL_CAN_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001dd8:	f000 f9b2 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //CAN filter settings
  CAN_FilterTypeDef canfilterConfig;

  canfilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	623b      	str	r3, [r7, #32]
  canfilterConfig.FilterBank = 11;
 8001de0:	230b      	movs	r3, #11
 8001de2:	617b      	str	r3, [r7, #20]
  canfilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
  canfilterConfig.FilterIdHigh = 0x103<<5;
 8001de8:	f242 0360 	movw	r3, #8288	; 0x2060
 8001dec:	603b      	str	r3, [r7, #0]
  canfilterConfig.FilterIdLow = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  canfilterConfig.FilterMaskIdHigh = 0x103<<5;
 8001df2:	f242 0360 	movw	r3, #8288	; 0x2060
 8001df6:	60bb      	str	r3, [r7, #8]
  canfilterConfig.FilterMaskIdLow = 0x0000;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  canfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  canfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
  canfilterConfig.SlaveStartFilterBank = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterConfig);
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <MX_CAN_Init+0xa0>)
 8001e0e:	f000 fd68 	bl	80028e2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200013a8 	.word	0x200013a8
 8001e20:	40006400 	.word	0x40006400

08001e24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <MX_RTC_Init+0xbc>)
 8001e40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e4a:	227f      	movs	r2, #127	; 0x7f
 8001e4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e50:	22ff      	movs	r2, #255	; 0xff
 8001e52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e66:	481d      	ldr	r0, [pc, #116]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e68:	f003 f8ee 	bl	8005048 <HAL_RTC_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e72:	f000 f965 	bl	8002140 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x23;
 8001e7a:	2323      	movs	r3, #35	; 0x23
 8001e7c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4812      	ldr	r0, [pc, #72]	; (8001edc <MX_RTC_Init+0xb8>)
 8001e92:	f003 f96a 	bl	800516a <HAL_RTC_SetTime>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001e9c:	f000 f950 	bl	8002140 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8001ea8:	2322      	movs	r3, #34	; 0x22
 8001eaa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001eac:	2322      	movs	r3, #34	; 0x22
 8001eae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <MX_RTC_Init+0xb8>)
 8001eb8:	f003 fa72 	bl	80053a0 <HAL_RTC_SetDate>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001ec2:	f000 f93d 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 8001ec6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <MX_RTC_Init+0xb8>)
 8001ece:	f003 fbed 	bl	80056ac <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200017e4 	.word	0x200017e4
 8001ee0:	40002800 	.word	0x40002800

08001ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <MX_SPI1_Init+0x78>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001efe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f06:	2202      	movs	r2, #2
 8001f08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f1a:	2238      	movs	r2, #56	; 0x38
 8001f1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f32:	2207      	movs	r2, #7
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f44:	f003 fbe4 	bl	8005710 <HAL_SPI_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f4e:	f000 f8f7 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20001820 	.word	0x20001820
 8001f5c:	40013000 	.word	0x40013000

08001f60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <MX_SPI2_Init+0x78>)
 8001f68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f7e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f92:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f96:	2208      	movs	r2, #8
 8001f98:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001fae:	2207      	movs	r2, #7
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001fba:	2208      	movs	r2, #8
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_SPI2_Init+0x74>)
 8001fc0:	f003 fba6 	bl	8005710 <HAL_SPI_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001fca:	f000 f8b9 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200002f4 	.word	0x200002f4
 8001fd8:	40003800 	.word	0x40003800

08001fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <MX_USART2_UART_Init+0x5c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002020:	f004 f906 	bl	8006230 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800202a:	f000 f889 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000188c 	.word	0x2000188c
 8002038:	40004400 	.word	0x40004400

0800203c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <MX_GPIO_Init+0xfc>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4a38      	ldr	r2, [pc, #224]	; (8002138 <MX_GPIO_Init+0xfc>)
 8002058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800205c:	6153      	str	r3, [r2, #20]
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <MX_GPIO_Init+0xfc>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <MX_GPIO_Init+0xfc>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4a32      	ldr	r2, [pc, #200]	; (8002138 <MX_GPIO_Init+0xfc>)
 8002070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002074:	6153      	str	r3, [r2, #20]
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <MX_GPIO_Init+0xfc>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <MX_GPIO_Init+0xfc>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <MX_GPIO_Init+0xfc>)
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	6153      	str	r3, [r2, #20]
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <MX_GPIO_Init+0xfc>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <MX_GPIO_Init+0xfc>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4a26      	ldr	r2, [pc, #152]	; (8002138 <MX_GPIO_Init+0xfc>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6153      	str	r3, [r2, #20]
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <MX_GPIO_Init+0xfc>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2110      	movs	r1, #16
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ba:	f001 fc7d 	bl	80039b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f641 4108 	movw	r1, #7176	; 0x1c08
 80020c4:	481d      	ldr	r0, [pc, #116]	; (800213c <MX_GPIO_Init+0x100>)
 80020c6:	f001 fc77 	bl	80039b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020ca:	2310      	movs	r3, #16
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	f001 fad6 	bl	8003694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 80020e8:	f641 4308 	movw	r3, #7176	; 0x1c08
 80020ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	480e      	ldr	r0, [pc, #56]	; (800213c <MX_GPIO_Init+0x100>)
 8002102:	f001 fac7 	bl	8003694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002106:	2320      	movs	r3, #32
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800210a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <MX_GPIO_Init+0x100>)
 800211c:	f001 faba 	bl	8003694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	2017      	movs	r0, #23
 8002126:	f001 fa08 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800212a:	2017      	movs	r0, #23
 800212c:	f001 fa21 	bl	8003572 <HAL_NVIC_EnableIRQ>

}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	48000400 	.word	0x48000400

08002140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002144:	b672      	cpsid	i
}
 8002146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002148:	e7fe      	b.n	8002148 <Error_Handler+0x8>
	...

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_MspInit+0x44>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_MspInit+0x44>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6193      	str	r3, [r2, #24]
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_MspInit+0x44>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_MspInit+0x44>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_MspInit+0x44>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_MspInit+0x44>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000

08002194 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <HAL_CAN_MspInit+0x90>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d131      	bne.n	800221a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_CAN_MspInit+0x94>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_CAN_MspInit+0x94>)
 80021bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c0:	61d3      	str	r3, [r2, #28]
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_CAN_MspInit+0x94>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_CAN_MspInit+0x94>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_CAN_MspInit+0x94>)
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	6153      	str	r3, [r2, #20]
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_CAN_MspInit+0x94>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80021f8:	2309      	movs	r3, #9
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f001 fa45 	bl	8003694 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2014      	movs	r0, #20
 8002210:	f001 f993 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002214:	2014      	movs	r0, #20
 8002216:	f001 f9ac 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40006400 	.word	0x40006400
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_RTC_MspInit+0x44>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d111      	bne.n	8002262 <HAL_RTC_MspInit+0x36>
 800223e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002242:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800224c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <HAL_RTC_MspInit+0x48>)
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	461a      	mov	r2, r3
 800225e:	2301      	movs	r3, #1
 8002260:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40002800 	.word	0x40002800
 8002274:	10908100 	.word	0x10908100

08002278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <HAL_SPI_MspInit+0xdc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d129      	bne.n	80022ee <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800229a:	4b2f      	ldr	r3, [pc, #188]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 80022a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a4:	6193      	str	r3, [r2, #24]
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	6153      	str	r3, [r2, #20]
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022ca:	23e0      	movs	r3, #224	; 0xe0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022da:	2305      	movs	r3, #5
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e8:	f001 f9d4 	bl	8003694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022ec:	e02d      	b.n	800234a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_SPI_MspInit+0xe4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d128      	bne.n	800234a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 80022fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002302:	61d3      	str	r3, [r2, #28]
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 8002316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231a:	6153      	str	r3, [r2, #20]
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_SPI_MspInit+0xe0>)
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002328:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800233a:	2305      	movs	r3, #5
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	4806      	ldr	r0, [pc, #24]	; (8002360 <HAL_SPI_MspInit+0xe8>)
 8002346:	f001 f9a5 	bl	8003694 <HAL_GPIO_Init>
}
 800234a:	bf00      	nop
 800234c:	3730      	adds	r7, #48	; 0x30
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40013000 	.word	0x40013000
 8002358:	40021000 	.word	0x40021000
 800235c:	40003800 	.word	0x40003800
 8002360:	48000400 	.word	0x48000400

08002364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_UART_MspInit+0x8c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d130      	bne.n	80023e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_UART_MspInit+0x90>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_UART_MspInit+0x90>)
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_UART_MspInit+0x90>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x90>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_UART_MspInit+0x90>)
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	6153      	str	r3, [r2, #20]
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_UART_MspInit+0x90>)
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023b6:	230c      	movs	r3, #12
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c6:	2307      	movs	r3, #7
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d4:	f001 f95e 	bl	8003694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	2026      	movs	r0, #38	; 0x26
 80023de:	f001 f8ac 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023e2:	2026      	movs	r0, #38	; 0x26
 80023e4:	f001 f8c5 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40004400 	.word	0x40004400
 80023f4:	40021000 	.word	0x40021000

080023f8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <SDTimer_Handler+0x40>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <SDTimer_Handler+0x1c>
    Timer1--;
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <SDTimer_Handler+0x40>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <SDTimer_Handler+0x40>)
 8002412:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <SDTimer_Handler+0x44>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <SDTimer_Handler+0x34>
    Timer2--;
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <SDTimer_Handler+0x44>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <SDTimer_Handler+0x44>)
 800242a:	801a      	strh	r2, [r3, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20002990 	.word	0x20002990
 800243c:	2000298e 	.word	0x2000298e

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <NMI_Handler+0x4>

08002446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <HardFault_Handler+0x4>

0800244c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <MemManage_Handler+0x4>

08002452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <UsageFault_Handler+0x4>

0800245e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <SysTick_Handler+0x30>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3301      	adds	r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <SysTick_Handler+0x30>)
 8002498:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <SysTick_Handler+0x30>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b09      	cmp	r3, #9
 80024a2:	d904      	bls.n	80024ae <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SysTick_Handler+0x30>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80024aa:	f7ff ffa5 	bl	80023f8 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ae:	f000 f8d9 	bl	8002664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200000b0 	.word	0x200000b0

080024bc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80024c2:	f000 fd2f 	bl	8002f24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200013a8 	.word	0x200013a8

080024d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80024d4:	2020      	movs	r0, #32
 80024d6:	f001 faa1 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <USART2_IRQHandler+0x10>)
 80024e6:	f003 ffd3 	bl	8006490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000188c 	.word	0x2000188c

080024f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <_sbrk+0x5c>)
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <_sbrk+0x60>)
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <_sbrk+0x64>)
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <_sbrk+0x68>)
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	429a      	cmp	r2, r3
 8002522:	d207      	bcs.n	8002534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002524:	f009 fd20 	bl	800bf68 <__errno>
 8002528:	4603      	mov	r3, r0
 800252a:	220c      	movs	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	e009      	b.n	8002548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <_sbrk+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <_sbrk+0x64>)
 8002544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	2000a000 	.word	0x2000a000
 8002554:	00000400 	.word	0x00000400
 8002558:	200000b4 	.word	0x200000b4
 800255c:	20004a10 	.word	0x20004a10

08002560 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <SystemInit+0x20>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <SystemInit+0x20>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002588:	480d      	ldr	r0, [pc, #52]	; (80025c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800258a:	490e      	ldr	r1, [pc, #56]	; (80025c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <LoopForever+0xe>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002590:	e002      	b.n	8002598 <LoopCopyDataInit>

08002592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002596:	3304      	adds	r3, #4

08002598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800259c:	d3f9      	bcc.n	8002592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259e:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80025a0:	4c0b      	ldr	r4, [pc, #44]	; (80025d0 <LoopForever+0x16>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a4:	e001      	b.n	80025aa <LoopFillZerobss>

080025a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a8:	3204      	adds	r2, #4

080025aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ae:	f7ff ffd7 	bl	8002560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b2:	f009 fcdf 	bl	800bf74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025b6:	f7ff f8ef 	bl	8001798 <main>

080025ba <LoopForever>:

LoopForever:
    b LoopForever
 80025ba:	e7fe      	b.n	80025ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025bc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80025c8:	0800d240 	.word	0x0800d240
  ldr r2, =_sbss
 80025cc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80025d0:	20004a0c 	.word	0x20004a0c

080025d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC1_2_IRQHandler>
	...

080025d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_Init+0x28>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_Init+0x28>)
 80025e2:	f043 0310 	orr.w	r3, r3, #16
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e8:	2003      	movs	r0, #3
 80025ea:	f000 ff9b 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ee:	200f      	movs	r0, #15
 80025f0:	f000 f808 	bl	8002604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f4:	f7ff fdaa 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000

08002604 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_InitTick+0x54>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_InitTick+0x58>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261a:	fbb3 f3f1 	udiv	r3, r3, r1
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f000 ffb3 	bl	800358e <HAL_SYSTICK_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e00e      	b.n	8002650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b0f      	cmp	r3, #15
 8002636:	d80a      	bhi.n	800264e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002638:	2200      	movs	r2, #0
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f000 ff7b 	bl	800353a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002644:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_InitTick+0x5c>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000004 	.word	0x20000004
 800265c:	2000000c 	.word	0x2000000c
 8002660:	20000008 	.word	0x20000008

08002664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_IncTick+0x20>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_IncTick+0x24>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4413      	add	r3, r2
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_IncTick+0x24>)
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	2000000c 	.word	0x2000000c
 8002688:	20002994 	.word	0x20002994

0800268c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_GetTick+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20002994 	.word	0x20002994

080026a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ac:	f7ff ffee 	bl	800268c <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d005      	beq.n	80026ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_Delay+0x44>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80026ca:	bf00      	nop
 80026cc:	f7ff ffde 	bl	800268c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d8f7      	bhi.n	80026cc <HAL_Delay+0x28>
  {
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000000c 	.word	0x2000000c

080026ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0ed      	b.n	80028da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fd42 	bl	8002194 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002720:	f7ff ffb4 	bl	800268c <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002726:	e012      	b.n	800274e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002728:	f7ff ffb0 	bl	800268c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b0a      	cmp	r3, #10
 8002734:	d90b      	bls.n	800274e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2205      	movs	r2, #5
 8002746:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0c5      	b.n	80028da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0e5      	beq.n	8002728 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0202 	bic.w	r2, r2, #2
 800276a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800276c:	f7ff ff8e 	bl	800268c <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002772:	e012      	b.n	800279a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002774:	f7ff ff8a 	bl	800268c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b0a      	cmp	r3, #10
 8002780:	d90b      	bls.n	800279a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2205      	movs	r2, #5
 8002792:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e09f      	b.n	80028da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e5      	bne.n	8002774 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7e1b      	ldrb	r3, [r3, #24]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d108      	bne.n	80027c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e007      	b.n	80027d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7e5b      	ldrb	r3, [r3, #25]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d108      	bne.n	80027ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e007      	b.n	80027fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7e9b      	ldrb	r3, [r3, #26]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d108      	bne.n	8002816 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e007      	b.n	8002826 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0220 	bic.w	r2, r2, #32
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7edb      	ldrb	r3, [r3, #27]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d108      	bne.n	8002840 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0210 	bic.w	r2, r2, #16
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e007      	b.n	8002850 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0210 	orr.w	r2, r2, #16
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7f1b      	ldrb	r3, [r3, #28]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d108      	bne.n	800286a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0208 	orr.w	r2, r2, #8
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e007      	b.n	800287a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0208 	bic.w	r2, r2, #8
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7f5b      	ldrb	r3, [r3, #29]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0204 	orr.w	r2, r2, #4
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e007      	b.n	80028a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0204 	bic.w	r2, r2, #4
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	ea42 0103 	orr.w	r1, r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d003      	beq.n	8002908 <HAL_CAN_ConfigFilter+0x26>
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b02      	cmp	r3, #2
 8002904:	f040 80aa 	bne.w	8002a5c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2201      	movs	r2, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d123      	bne.n	800298a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43db      	mvns	r3, r3
 800294c:	401a      	ands	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002964:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3248      	adds	r2, #72	; 0x48
 800296a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800297e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002980:	6979      	ldr	r1, [r7, #20]
 8002982:	3348      	adds	r3, #72	; 0x48
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d122      	bne.n	80029d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	431a      	orrs	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3248      	adds	r2, #72	; 0x48
 80029b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029ce:	6979      	ldr	r1, [r7, #20]
 80029d0:	3348      	adds	r3, #72	; 0x48
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029f2:	e007      	b.n	8002a04 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a1e:	e007      	b.n	8002a30 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a4e:	f023 0201 	bic.w	r2, r3, #1
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e006      	b.n	8002a6a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d12e      	bne.n	8002ae8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa2:	f7ff fdf3 	bl	800268c <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002aa8:	e012      	b.n	8002ad0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aaa:	f7ff fdef 	bl	800268c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b0a      	cmp	r3, #10
 8002ab6:	d90b      	bls.n	8002ad0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e012      	b.n	8002af6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e5      	bne.n	8002aaa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e006      	b.n	8002af6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b089      	sub	sp, #36	; 0x24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b12:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b1c:	7ffb      	ldrb	r3, [r7, #31]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d003      	beq.n	8002b2a <HAL_CAN_AddTxMessage+0x2c>
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	f040 80b8 	bne.w	8002c9a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a0 	beq.w	8002c8a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	0e1b      	lsrs	r3, r3, #24
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d907      	bls.n	8002b6a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e09e      	b.n	8002ca8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	6809      	ldr	r1, [r1, #0]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3318      	adds	r3, #24
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	440b      	add	r3, r1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e00f      	b.n	8002bb8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002bac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3318      	adds	r3, #24
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	440b      	add	r3, r1
 8002bb6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3318      	adds	r3, #24
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3304      	adds	r3, #4
 8002bca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	7d1b      	ldrb	r3, [r3, #20]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d111      	bne.n	8002bf8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3318      	adds	r3, #24
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	6811      	ldr	r1, [r2, #0]
 8002be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3318      	adds	r3, #24
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3307      	adds	r3, #7
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	061a      	lsls	r2, r3, #24
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3306      	adds	r3, #6
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3305      	adds	r3, #5
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	4313      	orrs	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	3204      	adds	r2, #4
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	6811      	ldr	r1, [r2, #0]
 8002c20:	ea43 0200 	orr.w	r2, r3, r0
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	440b      	add	r3, r1
 8002c2a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3303      	adds	r3, #3
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	061a      	lsls	r2, r3, #24
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3301      	adds	r3, #1
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	4610      	mov	r0, r2
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	6811      	ldr	r1, [r2, #0]
 8002c56:	ea43 0200 	orr.w	r2, r3, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	440b      	add	r3, r1
 8002c60:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3318      	adds	r3, #24
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6811      	ldr	r1, [r2, #0]
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3318      	adds	r3, #24
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	440b      	add	r3, r1
 8002c84:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e00e      	b.n	8002ca8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e006      	b.n	8002ca8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
  }
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3724      	adds	r7, #36	; 0x24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d003      	beq.n	8002cd8 <HAL_CAN_GetRxMessage+0x24>
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	f040 80f3 	bne.w	8002ebe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10e      	bne.n	8002cfc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d116      	bne.n	8002d1a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0e7      	b.n	8002ecc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d107      	bne.n	8002d1a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0d8      	b.n	8002ecc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	331b      	adds	r3, #27
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	4413      	add	r3, r2
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0204 	and.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10c      	bne.n	8002d52 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	331b      	adds	r3, #27
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4413      	add	r3, r2
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0d5b      	lsrs	r3, r3, #21
 8002d48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e00b      	b.n	8002d6a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	331b      	adds	r3, #27
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	4413      	add	r3, r2
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	331b      	adds	r3, #27
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	4413      	add	r3, r2
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0202 	and.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	331b      	adds	r3, #27
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	331b      	adds	r3, #27
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	331b      	adds	r3, #27
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	0a1a      	lsrs	r2, r3, #8
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	3301      	adds	r3, #1
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0c1a      	lsrs	r2, r3, #16
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0e1a      	lsrs	r2, r3, #24
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	3303      	adds	r3, #3
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0a1a      	lsrs	r2, r3, #8
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	3305      	adds	r3, #5
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0c1a      	lsrs	r2, r3, #16
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3306      	adds	r3, #6
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e1a      	lsrs	r2, r3, #24
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	3307      	adds	r3, #7
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d108      	bne.n	8002eaa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0220 	orr.w	r2, r2, #32
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	e007      	b.n	8002eba <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e006      	b.n	8002ecc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d002      	beq.n	8002ef6 <HAL_CAN_ActivateNotification+0x1e>
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d109      	bne.n	8002f0a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6959      	ldr	r1, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e006      	b.n	8002f18 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d07c      	beq.n	8003064 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d023      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f983 	bl	8003292 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f8c:	e016      	b.n	8002fbc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa0:	e00c      	b.n	8002fbc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	e002      	b.n	8002fbc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f989 	bl	80032ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d024      	beq.n	8003010 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f963 	bl	80032a6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fe0:	e016      	b.n	8003010 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff4:	e00c      	b.n	8003010 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	e002      	b.n	8003010 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f969 	bl	80032e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d024      	beq.n	8003064 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003022:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f943 	bl	80032ba <HAL_CAN_TxMailbox2CompleteCallback>
 8003034:	e016      	b.n	8003064 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	e00c      	b.n	8003064 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
 800305c:	e002      	b.n	8003064 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f949 	bl	80032f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2210      	movs	r2, #16
 8003086:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2208      	movs	r2, #8
 80030a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f930 	bl	800330a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe fa58 	bl	8001578 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2210      	movs	r2, #16
 80030ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f912 	bl	8003332 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8f9 	bl	800331e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2210      	movs	r2, #16
 8003146:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8fc 	bl	8003346 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2208      	movs	r2, #8
 8003168:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8f5 	bl	800335a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d07b      	beq.n	8003272 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d072      	beq.n	800326a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	f043 0302 	orr.w	r3, r3, #2
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	f043 0304 	orr.w	r3, r3, #4
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d043      	beq.n	800326a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d03e      	beq.n	800326a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031f2:	2b60      	cmp	r3, #96	; 0x60
 80031f4:	d02b      	beq.n	800324e <HAL_CAN_IRQHandler+0x32a>
 80031f6:	2b60      	cmp	r3, #96	; 0x60
 80031f8:	d82e      	bhi.n	8003258 <HAL_CAN_IRQHandler+0x334>
 80031fa:	2b50      	cmp	r3, #80	; 0x50
 80031fc:	d022      	beq.n	8003244 <HAL_CAN_IRQHandler+0x320>
 80031fe:	2b50      	cmp	r3, #80	; 0x50
 8003200:	d82a      	bhi.n	8003258 <HAL_CAN_IRQHandler+0x334>
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d019      	beq.n	800323a <HAL_CAN_IRQHandler+0x316>
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d826      	bhi.n	8003258 <HAL_CAN_IRQHandler+0x334>
 800320a:	2b30      	cmp	r3, #48	; 0x30
 800320c:	d010      	beq.n	8003230 <HAL_CAN_IRQHandler+0x30c>
 800320e:	2b30      	cmp	r3, #48	; 0x30
 8003210:	d822      	bhi.n	8003258 <HAL_CAN_IRQHandler+0x334>
 8003212:	2b10      	cmp	r3, #16
 8003214:	d002      	beq.n	800321c <HAL_CAN_IRQHandler+0x2f8>
 8003216:	2b20      	cmp	r3, #32
 8003218:	d005      	beq.n	8003226 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800321a:	e01d      	b.n	8003258 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003224:	e019      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	f043 0310 	orr.w	r3, r3, #16
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800322e:	e014      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	f043 0320 	orr.w	r3, r3, #32
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003238:	e00f      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003242:	e00a      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800324c:	e005      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003256:	e000      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            break;
 8003258:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003268:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2204      	movs	r2, #4
 8003270:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f872 	bl	800336e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800328a:	bf00      	nop
 800328c:	3728      	adds	r7, #40	; 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <__NVIC_EnableIRQ+0x38>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f0:	d301      	bcc.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00f      	b.n	8003516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <SysTick_Config+0x40>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	210f      	movs	r1, #15
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f7ff ff8e 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x40>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x40>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff29 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff ff3e 	bl	80033cc <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ff8e 	bl	8003478 <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5d 	bl	8003424 <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff31 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ffa2 	bl	80034e0 <SysTick_Config>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d008      	beq.n	80035ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2204      	movs	r2, #4
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e020      	b.n	800360c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 020e 	bic.w	r2, r2, #14
 80035d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	2101      	movs	r1, #1
 80035f4:	fa01 f202 	lsl.w	r2, r1, r2
 80035f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800362a:	2b02      	cmp	r3, #2
 800362c:	d005      	beq.n	800363a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2204      	movs	r2, #4
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e027      	b.n	800368a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 020e 	bic.w	r2, r2, #14
 8003648:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	4798      	blx	r3
    } 
  }
  return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a2:	e154      	b.n	800394e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	4013      	ands	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8146 	beq.w	8003948 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d005      	beq.n	80036d4 <HAL_GPIO_Init+0x40>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d130      	bne.n	8003736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	2203      	movs	r2, #3
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800370a:	2201      	movs	r2, #1
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 0201 	and.w	r2, r3, #1
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b03      	cmp	r3, #3
 8003740:	d017      	beq.n	8003772 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2203      	movs	r2, #3
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d123      	bne.n	80037c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3208      	adds	r2, #8
 8003786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	220f      	movs	r2, #15
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	6939      	ldr	r1, [r7, #16]
 80037c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	2203      	movs	r2, #3
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0203 	and.w	r2, r3, #3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80a0 	beq.w	8003948 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003808:	4b58      	ldr	r3, [pc, #352]	; (800396c <HAL_GPIO_Init+0x2d8>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	4a57      	ldr	r2, [pc, #348]	; (800396c <HAL_GPIO_Init+0x2d8>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6193      	str	r3, [r2, #24]
 8003814:	4b55      	ldr	r3, [pc, #340]	; (800396c <HAL_GPIO_Init+0x2d8>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003820:	4a53      	ldr	r2, [pc, #332]	; (8003970 <HAL_GPIO_Init+0x2dc>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	3302      	adds	r3, #2
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	220f      	movs	r2, #15
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800384a:	d019      	beq.n	8003880 <HAL_GPIO_Init+0x1ec>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a49      	ldr	r2, [pc, #292]	; (8003974 <HAL_GPIO_Init+0x2e0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <HAL_GPIO_Init+0x1e8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a48      	ldr	r2, [pc, #288]	; (8003978 <HAL_GPIO_Init+0x2e4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00d      	beq.n	8003878 <HAL_GPIO_Init+0x1e4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a47      	ldr	r2, [pc, #284]	; (800397c <HAL_GPIO_Init+0x2e8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <HAL_GPIO_Init+0x1e0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a46      	ldr	r2, [pc, #280]	; (8003980 <HAL_GPIO_Init+0x2ec>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d101      	bne.n	8003870 <HAL_GPIO_Init+0x1dc>
 800386c:	2304      	movs	r3, #4
 800386e:	e008      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003870:	2305      	movs	r3, #5
 8003872:	e006      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003874:	2303      	movs	r3, #3
 8003876:	e004      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003878:	2302      	movs	r3, #2
 800387a:	e002      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003880:	2300      	movs	r3, #0
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	f002 0203 	and.w	r2, r2, #3
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	4093      	lsls	r3, r2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003892:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_GPIO_Init+0x2dc>)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a0:	4b38      	ldr	r3, [pc, #224]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038c4:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038ca:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038ee:	4a25      	ldr	r2, [pc, #148]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003918:	4a1a      	ldr	r2, [pc, #104]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f aea3 	bne.w	80036a4 <HAL_GPIO_Init+0x10>
  }
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40021000 	.word	0x40021000
 8003970:	40010000 	.word	0x40010000
 8003974:	48000400 	.word	0x48000400
 8003978:	48000800 	.word	0x48000800
 800397c:	48000c00 	.word	0x48000c00
 8003980:	48001000 	.word	0x48001000
 8003984:	40010400 	.word	0x40010400

08003988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
 80039a4:	e001      	b.n	80039aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
 80039c4:	4613      	mov	r3, r2
 80039c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c8:	787b      	ldrb	r3, [r7, #1]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039d4:	e002      	b.n	80039dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	041a      	lsls	r2, r3, #16
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43d9      	mvns	r1, r3
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	400b      	ands	r3, r1
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	619a      	str	r2, [r3, #24]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fe4c 	bl	80016d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40010400 	.word	0x40010400

08003a4c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5a:	6013      	str	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40007000 	.word	0x40007000

08003a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f000 bef4 	b.w	800486e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 816a 	beq.w	8003d6a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a96:	4bb3      	ldr	r3, [pc, #716]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d00c      	beq.n	8003abc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aa2:	4bb0      	ldr	r3, [pc, #704]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d159      	bne.n	8003b62 <HAL_RCC_OscConfig+0xf6>
 8003aae:	4bad      	ldr	r3, [pc, #692]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aba:	d152      	bne.n	8003b62 <HAL_RCC_OscConfig+0xf6>
 8003abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003ad0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	fab3 f383 	clz	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d102      	bne.n	8003aee <HAL_RCC_OscConfig+0x82>
 8003ae8:	4b9e      	ldr	r3, [pc, #632]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	e015      	b.n	8003b1a <HAL_RCC_OscConfig+0xae>
 8003aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b06:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b0a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003b16:	4b93      	ldr	r3, [pc, #588]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b1e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b22:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b26:	fa92 f2a2 	rbit	r2, r2
 8003b2a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b2e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b32:	fab2 f282 	clz	r2, r2
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	f042 0220 	orr.w	r2, r2, #32
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	f002 021f 	and.w	r2, r2, #31
 8003b42:	2101      	movs	r1, #1
 8003b44:	fa01 f202 	lsl.w	r2, r1, r2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 810c 	beq.w	8003d68 <HAL_RCC_OscConfig+0x2fc>
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 8106 	bne.w	8003d68 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f000 be86 	b.w	800486e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCC_OscConfig+0x110>
 8003b6e:	4b7d      	ldr	r3, [pc, #500]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7c      	ldr	r2, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e030      	b.n	8003bde <HAL_RCC_OscConfig+0x172>
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x134>
 8003b86:	4b77      	ldr	r3, [pc, #476]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a76      	ldr	r2, [pc, #472]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b74      	ldr	r3, [pc, #464]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a73      	ldr	r2, [pc, #460]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e01e      	b.n	8003bde <HAL_RCC_OscConfig+0x172>
 8003ba0:	1d3b      	adds	r3, r7, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x15a>
 8003bac:	4b6d      	ldr	r3, [pc, #436]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a6c      	ldr	r2, [pc, #432]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	e00b      	b.n	8003bde <HAL_RCC_OscConfig+0x172>
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a66      	ldr	r2, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bde:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f023 020f 	bic.w	r2, r3, #15
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	495d      	ldr	r1, [pc, #372]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d059      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fd46 	bl	800268c <HAL_GetTick>
 8003c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c06:	f7fe fd41 	bl	800268c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d902      	bls.n	8003c1c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	f000 be29 	b.w	800486e <HAL_RCC_OscConfig+0xe02>
 8003c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c20:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c34:	fab3 f383 	clz	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d102      	bne.n	8003c4e <HAL_RCC_OscConfig+0x1e2>
 8003c48:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	e015      	b.n	8003c7a <HAL_RCC_OscConfig+0x20e>
 8003c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c52:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c66:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c6a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c76:	4b3b      	ldr	r3, [pc, #236]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c7e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c82:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c86:	fa92 f2a2 	rbit	r2, r2
 8003c8a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c8e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c92:	fab2 f282 	clz	r2, r2
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	f042 0220 	orr.w	r2, r2, #32
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f002 021f 	and.w	r2, r2, #31
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ab      	beq.n	8003c06 <HAL_RCC_OscConfig+0x19a>
 8003cae:	e05c      	b.n	8003d6a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe fcec 	bl	800268c <HAL_GetTick>
 8003cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cba:	f7fe fce7 	bl	800268c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d902      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	f000 bdcf 	b.w	800486e <HAL_RCC_OscConfig+0xe02>
 8003cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cd4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003ce4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_OscConfig+0x296>
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	e015      	b.n	8003d2e <HAL_RCC_OscConfig+0x2c2>
 8003d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d06:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d1e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_RCC_OscConfig+0x2f8>)
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d32:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d36:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d3a:	fa92 f2a2 	rbit	r2, r2
 8003d3e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d42:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d46:	fab2 f282 	clz	r2, r2
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f042 0220 	orr.w	r2, r2, #32
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	f002 021f 	and.w	r2, r2, #31
 8003d56:	2101      	movs	r1, #1
 8003d58:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ab      	bne.n	8003cba <HAL_RCC_OscConfig+0x24e>
 8003d62:	e002      	b.n	8003d6a <HAL_RCC_OscConfig+0x2fe>
 8003d64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 816f 	beq.w	8004058 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d7a:	4bd0      	ldr	r3, [pc, #832]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d86:	4bcd      	ldr	r3, [pc, #820]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d16c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x400>
 8003d92:	4bca      	ldr	r3, [pc, #808]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d166      	bne.n	8003e6c <HAL_RCC_OscConfig+0x400>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003da8:	fa93 f3a3 	rbit	r3, r3
 8003dac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003db0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d102      	bne.n	8003dce <HAL_RCC_OscConfig+0x362>
 8003dc8:	4bbc      	ldr	r3, [pc, #752]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	e013      	b.n	8003df6 <HAL_RCC_OscConfig+0x38a>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003de0:	2302      	movs	r3, #2
 8003de2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003de6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003df2:	4bb2      	ldr	r3, [pc, #712]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2202      	movs	r2, #2
 8003df8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003dfc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e00:	fa92 f2a2 	rbit	r2, r2
 8003e04:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003e08:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e0c:	fab2 f282 	clz	r2, r2
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	f042 0220 	orr.w	r2, r2, #32
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	f002 021f 	and.w	r2, r2, #31
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_RCC_OscConfig+0x3cc>
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d002      	beq.n	8003e38 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f000 bd1b 	b.w	800486e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e38:	4ba0      	ldr	r3, [pc, #640]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	21f8      	movs	r1, #248	; 0xf8
 8003e48:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e50:	fa91 f1a1 	rbit	r1, r1
 8003e54:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003e58:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003e5c:	fab1 f181 	clz	r1, r1
 8003e60:	b2c9      	uxtb	r1, r1
 8003e62:	408b      	lsls	r3, r1
 8003e64:	4995      	ldr	r1, [pc, #596]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	e0f5      	b.n	8004058 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8085 	beq.w	8003f82 <HAL_RCC_OscConfig+0x516>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fbf2 	bl	800268c <HAL_GetTick>
 8003ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eae:	f7fe fbed 	bl	800268c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	f000 bcd5 	b.w	800486e <HAL_RCC_OscConfig+0xe02>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003ed6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x488>
 8003eee:	4b73      	ldr	r3, [pc, #460]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	e013      	b.n	8003f1c <HAL_RCC_OscConfig+0x4b0>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f06:	2302      	movs	r3, #2
 8003f08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f18:	4b68      	ldr	r3, [pc, #416]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f26:	fa92 f2a2 	rbit	r2, r2
 8003f2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f32:	fab2 f282 	clz	r2, r2
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	f042 0220 	orr.w	r2, r2, #32
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	f002 021f 	and.w	r2, r2, #31
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f202 	lsl.w	r2, r1, r2
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0af      	beq.n	8003eae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	4b5b      	ldr	r3, [pc, #364]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	21f8      	movs	r1, #248	; 0xf8
 8003f5e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f66:	fa91 f1a1 	rbit	r1, r1
 8003f6a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003f6e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f72:	fab1 f181 	clz	r1, r1
 8003f76:	b2c9      	uxtb	r1, r1
 8003f78:	408b      	lsls	r3, r1
 8003f7a:	4950      	ldr	r1, [pc, #320]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e06a      	b.n	8004058 <HAL_RCC_OscConfig+0x5ec>
 8003f82:	2301      	movs	r3, #1
 8003f84:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2300      	movs	r3, #0
 8003fac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fe fb6d 	bl	800268c <HAL_GetTick>
 8003fb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb8:	f7fe fb68 	bl	800268c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d902      	bls.n	8003fce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	f000 bc50 	b.w	800486e <HAL_RCC_OscConfig+0xe02>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe4:	fab3 f383 	clz	r3, r3
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <HAL_RCC_OscConfig+0x592>
 8003ff8:	4b30      	ldr	r3, [pc, #192]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	e013      	b.n	8004026 <HAL_RCC_OscConfig+0x5ba>
 8003ffe:	2302      	movs	r3, #2
 8004000:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004008:	fa93 f3a3 	rbit	r3, r3
 800400c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004010:	2302      	movs	r3, #2
 8004012:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004016:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004022:	4b26      	ldr	r3, [pc, #152]	; (80040bc <HAL_RCC_OscConfig+0x650>)
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2202      	movs	r2, #2
 8004028:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800402c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004030:	fa92 f2a2 	rbit	r2, r2
 8004034:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004038:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800403c:	fab2 f282 	clz	r2, r2
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	f042 0220 	orr.w	r2, r2, #32
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	f002 021f 	and.w	r2, r2, #31
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f202 	lsl.w	r2, r1, r2
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1af      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80da 	beq.w	800421c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004068:	1d3b      	adds	r3, r7, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d069      	beq.n	8004146 <HAL_RCC_OscConfig+0x6da>
 8004072:	2301      	movs	r3, #1
 8004074:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004084:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004088:	fab3 f383 	clz	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_OscConfig+0x654>)
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	461a      	mov	r2, r3
 8004098:	2301      	movs	r3, #1
 800409a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409c:	f7fe faf6 	bl	800268c <HAL_GetTick>
 80040a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a4:	e00e      	b.n	80040c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a6:	f7fe faf1 	bl	800268c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d906      	bls.n	80040c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e3d9      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	10908120 	.word	0x10908120
 80040c4:	2302      	movs	r3, #2
 80040c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040da:	2202      	movs	r2, #2
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	fa93 f2a3 	rbit	r2, r3
 80040e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040f2:	2202      	movs	r2, #2
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	fa93 f2a3 	rbit	r2, r3
 8004100:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004104:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	4ba5      	ldr	r3, [pc, #660]	; (800439c <HAL_RCC_OscConfig+0x930>)
 8004108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800410e:	2102      	movs	r1, #2
 8004110:	6019      	str	r1, [r3, #0]
 8004112:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	fa93 f1a3 	rbit	r1, r3
 800411c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004120:	6019      	str	r1, [r3, #0]
  return result;
 8004122:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2101      	movs	r1, #1
 800413a:	fa01 f303 	lsl.w	r3, r1, r3
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0b0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x63a>
 8004144:	e06a      	b.n	800421c <HAL_RCC_OscConfig+0x7b0>
 8004146:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	fa93 f2a3 	rbit	r2, r3
 8004158:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800415c:	601a      	str	r2, [r3, #0]
  return result;
 800415e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004162:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	4b8c      	ldr	r3, [pc, #560]	; (80043a0 <HAL_RCC_OscConfig+0x934>)
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	2300      	movs	r3, #0
 8004176:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004178:	f7fe fa88 	bl	800268c <HAL_GetTick>
 800417c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	e009      	b.n	8004196 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004182:	f7fe fa83 	bl	800268c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e36b      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
 8004196:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800419a:	2202      	movs	r2, #2
 800419c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	fa93 f2a3 	rbit	r2, r3
 80041a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041b2:	2202      	movs	r2, #2
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	fa93 f2a3 	rbit	r2, r3
 80041c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041ca:	2202      	movs	r2, #2
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	fa93 f2a3 	rbit	r2, r3
 80041d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041de:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80041e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041e6:	2102      	movs	r1, #2
 80041e8:	6019      	str	r1, [r3, #0]
 80041ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	fa93 f1a3 	rbit	r1, r3
 80041f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041f8:	6019      	str	r1, [r3, #0]
  return result;
 80041fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1b2      	bne.n	8004182 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8158 	beq.w	80044dc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b5a      	ldr	r3, [pc, #360]	; (800439c <HAL_RCC_OscConfig+0x930>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d112      	bne.n	8004264 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	4b57      	ldr	r3, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x930>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a56      	ldr	r2, [pc, #344]	; (800439c <HAL_RCC_OscConfig+0x930>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004248:	61d3      	str	r3, [r2, #28]
 800424a:	4b54      	ldr	r3, [pc, #336]	; (800439c <HAL_RCC_OscConfig+0x930>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004264:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <HAL_RCC_OscConfig+0x938>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11a      	bne.n	80042a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004270:	4b4c      	ldr	r3, [pc, #304]	; (80043a4 <HAL_RCC_OscConfig+0x938>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a4b      	ldr	r2, [pc, #300]	; (80043a4 <HAL_RCC_OscConfig+0x938>)
 8004276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427c:	f7fe fa06 	bl	800268c <HAL_GetTick>
 8004280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	e009      	b.n	800429a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fe fa01 	bl	800268c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e2e9      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <HAL_RCC_OscConfig+0x938>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ef      	beq.n	8004286 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d106      	bne.n	80042be <HAL_RCC_OscConfig+0x852>
 80042b0:	4b3a      	ldr	r3, [pc, #232]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4a39      	ldr	r2, [pc, #228]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	6213      	str	r3, [r2, #32]
 80042bc:	e02f      	b.n	800431e <HAL_RCC_OscConfig+0x8b2>
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10c      	bne.n	80042e2 <HAL_RCC_OscConfig+0x876>
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4a33      	ldr	r2, [pc, #204]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6213      	str	r3, [r2, #32]
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	4a30      	ldr	r2, [pc, #192]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6213      	str	r3, [r2, #32]
 80042e0:	e01d      	b.n	800431e <HAL_RCC_OscConfig+0x8b2>
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d10c      	bne.n	8004306 <HAL_RCC_OscConfig+0x89a>
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4a2a      	ldr	r2, [pc, #168]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	6213      	str	r3, [r2, #32]
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4a27      	ldr	r2, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x930>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6213      	str	r3, [r2, #32]
 8004304:	e00b      	b.n	800431e <HAL_RCC_OscConfig+0x8b2>
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <HAL_RCC_OscConfig+0x930>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a24      	ldr	r2, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x930>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6213      	str	r3, [r2, #32]
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <HAL_RCC_OscConfig+0x930>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4a21      	ldr	r2, [pc, #132]	; (800439c <HAL_RCC_OscConfig+0x930>)
 8004318:	f023 0304 	bic.w	r3, r3, #4
 800431c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d06b      	beq.n	8004400 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004328:	f7fe f9b0 	bl	800268c <HAL_GetTick>
 800432c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004330:	e00b      	b.n	800434a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fe f9ab 	bl	800268c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e291      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
 800434a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800434e:	2202      	movs	r2, #2
 8004350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	fa93 f2a3 	rbit	r2, r3
 800435c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004366:	2202      	movs	r2, #2
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	fa93 f2a3 	rbit	r2, r3
 8004374:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004378:	601a      	str	r2, [r3, #0]
  return result;
 800437a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800437e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f043 0302 	orr.w	r3, r3, #2
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d109      	bne.n	80043a8 <HAL_RCC_OscConfig+0x93c>
 8004394:	4b01      	ldr	r3, [pc, #4]	; (800439c <HAL_RCC_OscConfig+0x930>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	e014      	b.n	80043c4 <HAL_RCC_OscConfig+0x958>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	10908120 	.word	0x10908120
 80043a4:	40007000 	.word	0x40007000
 80043a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80043ac:	2202      	movs	r2, #2
 80043ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	fa93 f2a3 	rbit	r2, r3
 80043ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	4bbb      	ldr	r3, [pc, #748]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80043c8:	2102      	movs	r1, #2
 80043ca:	6011      	str	r1, [r2, #0]
 80043cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	fa92 f1a2 	rbit	r1, r2
 80043d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80043da:	6011      	str	r1, [r2, #0]
  return result;
 80043dc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	fab2 f282 	clz	r2, r2
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	f002 021f 	and.w	r2, r2, #31
 80043f2:	2101      	movs	r1, #1
 80043f4:	fa01 f202 	lsl.w	r2, r1, r2
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d099      	beq.n	8004332 <HAL_RCC_OscConfig+0x8c6>
 80043fe:	e063      	b.n	80044c8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004400:	f7fe f944 	bl	800268c <HAL_GetTick>
 8004404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004408:	e00b      	b.n	8004422 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fe f93f 	bl	800268c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e225      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
 8004422:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004426:	2202      	movs	r2, #2
 8004428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	fa93 f2a3 	rbit	r2, r3
 8004434:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800443e:	2202      	movs	r2, #2
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	fa93 f2a3 	rbit	r2, r3
 800444c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004450:	601a      	str	r2, [r3, #0]
  return result;
 8004452:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004456:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004458:	fab3 f383 	clz	r3, r3
 800445c:	b2db      	uxtb	r3, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f043 0302 	orr.w	r3, r3, #2
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d102      	bne.n	8004472 <HAL_RCC_OscConfig+0xa06>
 800446c:	4b90      	ldr	r3, [pc, #576]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	e00d      	b.n	800448e <HAL_RCC_OscConfig+0xa22>
 8004472:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004476:	2202      	movs	r2, #2
 8004478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	fa93 f2a3 	rbit	r2, r3
 8004484:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	4b89      	ldr	r3, [pc, #548]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004492:	2102      	movs	r1, #2
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	fa92 f1a2 	rbit	r1, r2
 80044a0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80044a4:	6011      	str	r1, [r2, #0]
  return result;
 80044a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	fab2 f282 	clz	r2, r2
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	f002 021f 	and.w	r2, r2, #31
 80044bc:	2101      	movs	r1, #1
 80044be:	fa01 f202 	lsl.w	r2, r1, r2
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1a0      	bne.n	800440a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4a76      	ldr	r2, [pc, #472]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 81c2 	beq.w	800486c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e8:	4b71      	ldr	r3, [pc, #452]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	f000 819c 	beq.w	800482e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f6:	1d3b      	adds	r3, r7, #4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f040 8114 	bne.w	800472a <HAL_RCC_OscConfig+0xcbe>
 8004502:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004506:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800450a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	fa93 f2a3 	rbit	r2, r3
 8004516:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800451a:	601a      	str	r2, [r3, #0]
  return result;
 800451c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004520:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800452c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	461a      	mov	r2, r3
 8004534:	2300      	movs	r3, #0
 8004536:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fe f8a8 	bl	800268c <HAL_GetTick>
 800453c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004540:	e009      	b.n	8004556 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004542:	f7fe f8a3 	bl	800268c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e18b      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
 8004556:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800455a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800455e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fa93 f2a3 	rbit	r2, r3
 800456a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800456e:	601a      	str	r2, [r3, #0]
  return result;
 8004570:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004574:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	d102      	bne.n	8004590 <HAL_RCC_OscConfig+0xb24>
 800458a:	4b49      	ldr	r3, [pc, #292]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	e01b      	b.n	80045c8 <HAL_RCC_OscConfig+0xb5c>
 8004590:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	fa93 f2a3 	rbit	r2, r3
 80045a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80045ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	4b3a      	ldr	r3, [pc, #232]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045d0:	6011      	str	r1, [r2, #0]
 80045d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	fa92 f1a2 	rbit	r1, r2
 80045dc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045e0:	6011      	str	r1, [r2, #0]
  return result;
 80045e2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d19e      	bne.n	8004542 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004604:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	430b      	orrs	r3, r1
 800461a:	4925      	ldr	r1, [pc, #148]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
 8004620:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004624:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	fa93 f2a3 	rbit	r2, r3
 8004634:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004638:	601a      	str	r2, [r3, #0]
  return result;
 800463a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800463e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800464a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	461a      	mov	r2, r3
 8004652:	2301      	movs	r3, #1
 8004654:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fe f819 	bl	800268c <HAL_GetTick>
 800465a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800465e:	e009      	b.n	8004674 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004660:	f7fe f814 	bl	800268c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e0fc      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
 8004674:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800467c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fa93 f2a3 	rbit	r2, r3
 8004688:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800468c:	601a      	str	r2, [r3, #0]
  return result;
 800468e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004692:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <HAL_RCC_OscConfig+0xc48>
 80046a8:	4b01      	ldr	r3, [pc, #4]	; (80046b0 <HAL_RCC_OscConfig+0xc44>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	e01e      	b.n	80046ec <HAL_RCC_OscConfig+0xc80>
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	fa93 f2a3 	rbit	r2, r3
 80046c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f2a3 	rbit	r2, r3
 80046e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	4b63      	ldr	r3, [pc, #396]	; (8004878 <HAL_RCC_OscConfig+0xe0c>)
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	fa92 f1a2 	rbit	r1, r2
 8004700:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004704:	6011      	str	r1, [r2, #0]
  return result;
 8004706:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	fab2 f282 	clz	r2, r2
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	f042 0220 	orr.w	r2, r2, #32
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	f002 021f 	and.w	r2, r2, #31
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f202 	lsl.w	r2, r1, r2
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d09b      	beq.n	8004660 <HAL_RCC_OscConfig+0xbf4>
 8004728:	e0a0      	b.n	800486c <HAL_RCC_OscConfig+0xe00>
 800472a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800472e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	fa93 f2a3 	rbit	r2, r3
 800473e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004742:	601a      	str	r2, [r3, #0]
  return result;
 8004744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004748:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004754:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fd ff94 	bl	800268c <HAL_GetTick>
 8004764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004768:	e009      	b.n	800477e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476a:	f7fd ff8f 	bl	800268c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e077      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
 800477e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	fa93 f2a3 	rbit	r2, r3
 8004792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004796:	601a      	str	r2, [r3, #0]
  return result;
 8004798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d102      	bne.n	80047b8 <HAL_RCC_OscConfig+0xd4c>
 80047b2:	4b31      	ldr	r3, [pc, #196]	; (8004878 <HAL_RCC_OscConfig+0xe0c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	e01b      	b.n	80047f0 <HAL_RCC_OscConfig+0xd84>
 80047b8:	f107 0320 	add.w	r3, r7, #32
 80047bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f107 0320 	add.w	r3, r7, #32
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	fa93 f2a3 	rbit	r2, r3
 80047cc:	f107 031c 	add.w	r3, r7, #28
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f107 0318 	add.w	r3, r7, #24
 80047d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f107 0318 	add.w	r3, r7, #24
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	fa93 f2a3 	rbit	r2, r3
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_RCC_OscConfig+0xe0c>)
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f107 0210 	add.w	r2, r7, #16
 80047f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047f8:	6011      	str	r1, [r2, #0]
 80047fa:	f107 0210 	add.w	r2, r7, #16
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	fa92 f1a2 	rbit	r1, r2
 8004804:	f107 020c 	add.w	r2, r7, #12
 8004808:	6011      	str	r1, [r2, #0]
  return result;
 800480a:	f107 020c 	add.w	r2, r7, #12
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	fab2 f282 	clz	r2, r2
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	f042 0220 	orr.w	r2, r2, #32
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	f002 021f 	and.w	r2, r2, #31
 8004820:	2101      	movs	r1, #1
 8004822:	fa01 f202 	lsl.w	r2, r1, r2
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d19e      	bne.n	800476a <HAL_RCC_OscConfig+0xcfe>
 800482c:	e01e      	b.n	800486c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e018      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800483c:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <HAL_RCC_OscConfig+0xe0c>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004844:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800484c:	1d3b      	adds	r3, r7, #4
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	429a      	cmp	r2, r3
 8004854:	d108      	bne.n	8004868 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004856:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800485a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b09e      	sub	sp, #120	; 0x78
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e162      	b.n	8004b5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004894:	4b90      	ldr	r3, [pc, #576]	; (8004ad8 <HAL_RCC_ClockConfig+0x25c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d910      	bls.n	80048c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b8d      	ldr	r3, [pc, #564]	; (8004ad8 <HAL_RCC_ClockConfig+0x25c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 0207 	bic.w	r2, r3, #7
 80048aa:	498b      	ldr	r1, [pc, #556]	; (8004ad8 <HAL_RCC_ClockConfig+0x25c>)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b89      	ldr	r3, [pc, #548]	; (8004ad8 <HAL_RCC_ClockConfig+0x25c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e14a      	b.n	8004b5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b82      	ldr	r3, [pc, #520]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	497f      	ldr	r1, [pc, #508]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80dc 	beq.w	8004aa8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d13c      	bne.n	8004972 <HAL_RCC_ClockConfig+0xf6>
 80048f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <HAL_RCC_ClockConfig+0xa6>
 800491c:	4b6f      	ldr	r3, [pc, #444]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	e00f      	b.n	8004942 <HAL_RCC_ClockConfig+0xc6>
 8004922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004926:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	667b      	str	r3, [r7, #100]	; 0x64
 8004930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004934:	663b      	str	r3, [r7, #96]	; 0x60
 8004936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004938:	fa93 f3a3 	rbit	r3, r3
 800493c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800493e:	4b67      	ldr	r3, [pc, #412]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004946:	65ba      	str	r2, [r7, #88]	; 0x58
 8004948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800494a:	fa92 f2a2 	rbit	r2, r2
 800494e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004952:	fab2 f282 	clz	r2, r2
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	f042 0220 	orr.w	r2, r2, #32
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	f002 021f 	and.w	r2, r2, #31
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f202 	lsl.w	r2, r1, r2
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d17b      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0f3      	b.n	8004b5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d13c      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x178>
 800497a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800497e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498a:	fab3 f383 	clz	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d102      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 800499e:	4b4f      	ldr	r3, [pc, #316]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	e00f      	b.n	80049c4 <HAL_RCC_ClockConfig+0x148>
 80049a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	647b      	str	r3, [r7, #68]	; 0x44
 80049b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c0:	4b46      	ldr	r3, [pc, #280]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80049ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049cc:	fa92 f2a2 	rbit	r2, r2
 80049d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80049d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049d4:	fab2 f282 	clz	r2, r2
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	f042 0220 	orr.w	r2, r2, #32
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	f002 021f 	and.w	r2, r2, #31
 80049e4:	2101      	movs	r1, #1
 80049e6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d13a      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0b2      	b.n	8004b5a <HAL_RCC_ClockConfig+0x2de>
 80049f4:	2302      	movs	r3, #2
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d102      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x1a0>
 8004a16:	4b31      	ldr	r3, [pc, #196]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	e00d      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1bc>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
 8004a28:	2302      	movs	r3, #2
 8004a2a:	623b      	str	r3, [r7, #32]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	4b29      	ldr	r3, [pc, #164]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	2202      	movs	r2, #2
 8004a3a:	61ba      	str	r2, [r7, #24]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	fa92 f2a2 	rbit	r2, r2
 8004a42:	617a      	str	r2, [r7, #20]
  return result;
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	fab2 f282 	clz	r2, r2
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	f042 0220 	orr.w	r2, r2, #32
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	f002 021f 	and.w	r2, r2, #31
 8004a56:	2101      	movs	r1, #1
 8004a58:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e079      	b.n	8004b5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	491a      	ldr	r1, [pc, #104]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a78:	f7fd fe08 	bl	800268c <HAL_GetTick>
 8004a7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fd fe04 	bl	800268c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e061      	b.n	8004b5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_RCC_ClockConfig+0x260>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 020c 	and.w	r2, r3, #12
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d1eb      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x25c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d214      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <HAL_RCC_ClockConfig+0x25c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 0207 	bic.w	r2, r3, #7
 8004abe:	4906      	ldr	r1, [pc, #24]	; (8004ad8 <HAL_RCC_ClockConfig+0x25c>)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <HAL_RCC_ClockConfig+0x25c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e040      	b.n	8004b5a <HAL_RCC_ClockConfig+0x2de>
 8004ad8:	40022000 	.word	0x40022000
 8004adc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <HAL_RCC_ClockConfig+0x2e8>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	491a      	ldr	r1, [pc, #104]	; (8004b64 <HAL_RCC_ClockConfig+0x2e8>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0a:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <HAL_RCC_ClockConfig+0x2e8>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4912      	ldr	r1, [pc, #72]	; (8004b64 <HAL_RCC_ClockConfig+0x2e8>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b1e:	f000 f829 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8004b22:	4601      	mov	r1, r0
 8004b24:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <HAL_RCC_ClockConfig+0x2e8>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2c:	22f0      	movs	r2, #240	; 0xf0
 8004b2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	fa92 f2a2 	rbit	r2, r2
 8004b36:	60fa      	str	r2, [r7, #12]
  return result;
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	fab2 f282 	clz	r2, r2
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	40d3      	lsrs	r3, r2
 8004b42:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <HAL_RCC_ClockConfig+0x2ec>)
 8004b44:	5cd3      	ldrb	r3, [r2, r3]
 8004b46:	fa21 f303 	lsr.w	r3, r1, r3
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <HAL_RCC_ClockConfig+0x2f0>)
 8004b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_RCC_ClockConfig+0x2f4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fd56 	bl	8002604 <HAL_InitTick>
  
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3778      	adds	r7, #120	; 0x78
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	0800cc7c 	.word	0x0800cc7c
 8004b6c:	20000004 	.word	0x20000004
 8004b70:	20000008 	.word	0x20000008

08004b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b08b      	sub	sp, #44	; 0x2c
 8004b78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	2300      	movs	r3, #0
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b8e:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x36>
 8004ba2:	e03c      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ba4:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ba6:	623b      	str	r3, [r7, #32]
      break;
 8004ba8:	e03c      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004bb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004bb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	fa92 f2a2 	rbit	r2, r2
 8004bbc:	607a      	str	r2, [r7, #4]
  return result;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	fab2 f282 	clz	r2, r2
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	40d3      	lsrs	r3, r2
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004bca:	5cd3      	ldrb	r3, [r2, r3]
 8004bcc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004bce:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	220f      	movs	r2, #15
 8004bd8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	fa92 f2a2 	rbit	r2, r2
 8004be0:	60fa      	str	r2, [r7, #12]
  return result;
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	fab2 f282 	clz	r2, r2
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	40d3      	lsrs	r3, r2
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004bfc:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0c:	e004      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	623b      	str	r3, [r7, #32]
      break;
 8004c1c:	e002      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c20:	623b      	str	r3, [r7, #32]
      break;
 8004c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c24:	6a3b      	ldr	r3, [r7, #32]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	372c      	adds	r7, #44	; 0x2c
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	007a1200 	.word	0x007a1200
 8004c3c:	0800cc94 	.word	0x0800cc94
 8004c40:	0800cca4 	.word	0x0800cca4
 8004c44:	003d0900 	.word	0x003d0900

08004c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000004 	.word	0x20000004

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004c66:	f7ff ffef 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c74:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	fa92 f2a2 	rbit	r2, r2
 8004c80:	603a      	str	r2, [r7, #0]
  return result;
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	fab2 f282 	clz	r2, r2
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	40d3      	lsrs	r3, r2
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c8e:	5cd3      	ldrb	r3, [r2, r3]
 8004c90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	0800cc8c 	.word	0x0800cc8c

08004ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004caa:	f7ff ffcd 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004cae:	4601      	mov	r1, r0
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004cb8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	fa92 f2a2 	rbit	r2, r2
 8004cc4:	603a      	str	r2, [r7, #0]
  return result;
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	fab2 f282 	clz	r2, r2
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	40d3      	lsrs	r3, r2
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004cd2:	5cd3      	ldrb	r3, [r2, r3]
 8004cd4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	0800cc8c 	.word	0x0800cc8c

08004ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b092      	sub	sp, #72	; 0x48
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80d4 	beq.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d0c:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10e      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d18:	4b4b      	ldr	r3, [pc, #300]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	4a4a      	ldr	r2, [pc, #296]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d22:	61d3      	str	r3, [r2, #28]
 8004d24:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d36:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d118      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d42:	4b42      	ldr	r3, [pc, #264]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a41      	ldr	r2, [pc, #260]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4e:	f7fd fc9d 	bl	800268c <HAL_GetTick>
 8004d52:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	e008      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d56:	f7fd fc99 	bl	800268c <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b64      	cmp	r3, #100	; 0x64
 8004d62:	d901      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e169      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d68:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d74:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8084 	beq.w	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d07c      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d94:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004da2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	4b26      	ldr	r3, [pc, #152]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	fa93 f3a3 	rbit	r3, r3
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	2300      	movs	r3, #0
 8004de4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004de6:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d04b      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df6:	f7fd fc49 	bl	800268c <HAL_GetTick>
 8004dfa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fd fc45 	bl	800268c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e113      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004e14:	2302      	movs	r3, #2
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	2302      	movs	r3, #2
 8004e22:	623b      	str	r3, [r7, #32]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	fa93 f3a3 	rbit	r3, r3
 8004e2a:	61fb      	str	r3, [r7, #28]
  return result;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	fab3 f383 	clz	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d108      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004e42:	4b01      	ldr	r3, [pc, #4]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	e00d      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	10908100 	.word	0x10908100
 8004e54:	2302      	movs	r3, #2
 8004e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	4b78      	ldr	r3, [pc, #480]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2202      	movs	r2, #2
 8004e66:	613a      	str	r2, [r7, #16]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	fa92 f2a2 	rbit	r2, r2
 8004e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	fab2 f282 	clz	r2, r2
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	f002 021f 	and.w	r2, r2, #31
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f202 	lsl.w	r2, r1, r2
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0b7      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e8e:	4b6d      	ldr	r3, [pc, #436]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	496a      	ldr	r1, [pc, #424]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea8:	4b66      	ldr	r3, [pc, #408]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	4a65      	ldr	r2, [pc, #404]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ec0:	4b60      	ldr	r3, [pc, #384]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	f023 0203 	bic.w	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	495d      	ldr	r1, [pc, #372]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ede:	4b59      	ldr	r3, [pc, #356]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	4956      	ldr	r1, [pc, #344]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004efc:	4b51      	ldr	r3, [pc, #324]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	494e      	ldr	r1, [pc, #312]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f1a:	4b4a      	ldr	r3, [pc, #296]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	f023 0210 	bic.w	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	4947      	ldr	r1, [pc, #284]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f38:	4b42      	ldr	r3, [pc, #264]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	493f      	ldr	r1, [pc, #252]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f56:	4b3b      	ldr	r3, [pc, #236]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f023 0220 	bic.w	r2, r3, #32
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	4938      	ldr	r1, [pc, #224]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f74:	4b33      	ldr	r3, [pc, #204]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	4930      	ldr	r1, [pc, #192]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f92:	4b2c      	ldr	r3, [pc, #176]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	4929      	ldr	r1, [pc, #164]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fb0:	4b24      	ldr	r3, [pc, #144]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	4921      	ldr	r1, [pc, #132]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d008      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fce:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	491a      	ldr	r1, [pc, #104]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004fec:	4b15      	ldr	r3, [pc, #84]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	4912      	ldr	r1, [pc, #72]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800500a:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	490b      	ldr	r1, [pc, #44]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	4903      	ldr	r1, [pc, #12]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005036:	4313      	orrs	r3, r2
 8005038:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3748      	adds	r7, #72	; 0x48
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000

08005048 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e083      	b.n	8005162 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7f5b      	ldrb	r3, [r3, #29]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fd f8de 	bl	800222c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	22ca      	movs	r2, #202	; 0xca
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2253      	movs	r2, #83	; 0x53
 8005084:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 faa8 	bl	80055dc <RTC_EnterInitMode>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	22ff      	movs	r2, #255	; 0xff
 8005098:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2204      	movs	r2, #4
 800509e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e05e      	b.n	8005162 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6899      	ldr	r1, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68d2      	ldr	r2, [r2, #12]
 80050de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6919      	ldr	r1, [r3, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	041a      	lsls	r2, r3, #16
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005102:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10e      	bne.n	8005130 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa3a 	bl	800558c <HAL_RTC_WaitForSynchro>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	22ff      	movs	r2, #255	; 0xff
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2204      	movs	r2, #4
 800512a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e018      	b.n	8005162 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800513e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	22ff      	movs	r2, #255	; 0xff
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005160:	2300      	movs	r3, #0
  }
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800516a:	b590      	push	{r4, r7, lr}
 800516c:	b087      	sub	sp, #28
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	7f1b      	ldrb	r3, [r3, #28]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_RTC_SetTime+0x1c>
 8005182:	2302      	movs	r3, #2
 8005184:	e0aa      	b.n	80052dc <HAL_RTC_SetTime+0x172>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2202      	movs	r2, #2
 8005190:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d126      	bne.n	80051e6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2200      	movs	r2, #0
 80051aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fa3f 	bl	8005634 <RTC_ByteToBcd2>
 80051b6:	4603      	mov	r3, r0
 80051b8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa38 	bl	8005634 <RTC_ByteToBcd2>
 80051c4:	4603      	mov	r3, r0
 80051c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051c8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	789b      	ldrb	r3, [r3, #2]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fa30 	bl	8005634 <RTC_ByteToBcd2>
 80051d4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80051d6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e018      	b.n	8005218 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005206:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800520c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	78db      	ldrb	r3, [r3, #3]
 8005212:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	22ca      	movs	r2, #202	; 0xca
 800521e:	625a      	str	r2, [r3, #36]	; 0x24
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2253      	movs	r2, #83	; 0x53
 8005226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f9d7 	bl	80055dc <RTC_EnterInitMode>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	22ff      	movs	r2, #255	; 0xff
 800523a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2204      	movs	r2, #4
 8005240:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e047      	b.n	80052dc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005256:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800525a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800526a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6899      	ldr	r1, [r3, #8]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	431a      	orrs	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005292:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d111      	bne.n	80052c6 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f972 	bl	800558c <HAL_RTC_WaitForSynchro>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	22ff      	movs	r2, #255	; 0xff
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2204      	movs	r2, #4
 80052ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e00a      	b.n	80052dc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	22ff      	movs	r2, #255	; 0xff
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd90      	pop	{r4, r7, pc}

080052e4 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005316:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800531a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005326:	b2da      	uxtb	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	0a1b      	lsrs	r3, r3, #8
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005336:	b2da      	uxtb	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d11a      	bne.n	8005396 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f983 	bl	8005670 <RTC_Bcd2ToByte>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f97a 	bl	8005670 <RTC_Bcd2ToByte>
 800537c:	4603      	mov	r3, r0
 800537e:	461a      	mov	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	789b      	ldrb	r3, [r3, #2]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f971 	bl	8005670 <RTC_Bcd2ToByte>
 800538e:	4603      	mov	r3, r0
 8005390:	461a      	mov	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	7f1b      	ldrb	r3, [r3, #28]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_RTC_SetDate+0x1c>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e094      	b.n	80054e6 <HAL_RTC_SetDate+0x146>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2202      	movs	r2, #2
 80053c6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <HAL_RTC_SetDate+0x4c>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	330a      	adds	r3, #10
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11c      	bne.n	800542c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f91c 	bl	8005634 <RTC_ByteToBcd2>
 80053fc:	4603      	mov	r3, r0
 80053fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	4618      	mov	r0, r3
 8005406:	f000 f915 	bl	8005634 <RTC_ByteToBcd2>
 800540a:	4603      	mov	r3, r0
 800540c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800540e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	789b      	ldrb	r3, [r3, #2]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f90d 	bl	8005634 <RTC_ByteToBcd2>
 800541a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800541c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e00e      	b.n	800544a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	78db      	ldrb	r3, [r3, #3]
 8005430:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005438:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800543e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	22ca      	movs	r2, #202	; 0xca
 8005450:	625a      	str	r2, [r3, #36]	; 0x24
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2253      	movs	r2, #83	; 0x53
 8005458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f8be 	bl	80055dc <RTC_EnterInitMode>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2204      	movs	r2, #4
 8005472:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e033      	b.n	80054e6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800548c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800549c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f86d 	bl	800558c <HAL_RTC_WaitForSynchro>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2204      	movs	r2, #4
 80054c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e00a      	b.n	80054e6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
  }
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd90      	pop	{r4, r7, pc}

080054ee <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005508:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800550c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	0a1b      	lsrs	r3, r3, #8
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 031f 	and.w	r3, r3, #31
 8005522:	b2da      	uxtb	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	0b5b      	lsrs	r3, r3, #13
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11a      	bne.n	8005582 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	78db      	ldrb	r3, [r3, #3]
 8005550:	4618      	mov	r0, r3
 8005552:	f000 f88d 	bl	8005670 <RTC_Bcd2ToByte>
 8005556:	4603      	mov	r3, r0
 8005558:	461a      	mov	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f884 	bl	8005670 <RTC_Bcd2ToByte>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	789b      	ldrb	r3, [r3, #2]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f87b 	bl	8005670 <RTC_Bcd2ToByte>
 800557a:	4603      	mov	r3, r0
 800557c:	461a      	mov	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80055a8:	f7fd f870 	bl	800268c <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80055ae:	e009      	b.n	80055c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055b0:	f7fd f86c 	bl	800268c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055be:	d901      	bls.n	80055c4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e007      	b.n	80055d4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0ee      	beq.n	80055b0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d119      	bne.n	800562a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f04f 32ff 	mov.w	r2, #4294967295
 80055fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005600:	f7fd f844 	bl	800268c <HAL_GetTick>
 8005604:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005606:	e009      	b.n	800561c <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005608:	f7fd f840 	bl	800268c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005616:	d901      	bls.n	800561c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e007      	b.n	800562c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0ee      	beq.n	8005608 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005642:	e005      	b.n	8005650 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3301      	adds	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	3b0a      	subs	r3, #10
 800564e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	2b09      	cmp	r3, #9
 8005654:	d8f6      	bhi.n	8005644 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	b2da      	uxtb	r2, r3
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	4313      	orrs	r3, r2
 8005662:	b2db      	uxtb	r3, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	4413      	add	r3, r2
 800569e:	b2db      	uxtb	r3, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3350      	adds	r3, #80	; 0x50
 80056c2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3350      	adds	r3, #80	; 0x50
 80056f4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e09d      	b.n	800585e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005732:	d009      	beq.n	8005748 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	61da      	str	r2, [r3, #28]
 800573a:	e005      	b.n	8005748 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fc fd88 	bl	8002278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005788:	d902      	bls.n	8005790 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e002      	b.n	8005796 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005794:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800579e:	d007      	beq.n	80057b0 <HAL_SPI_Init+0xa0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	ea42 0103 	orr.w	r1, r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	0c1b      	lsrs	r3, r3, #16
 800580c:	f003 0204 	and.w	r2, r3, #4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800582c:	ea42 0103 	orr.w	r1, r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b088      	sub	sp, #32
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_SPI_Transmit+0x22>
 8005884:	2302      	movs	r3, #2
 8005886:	e158      	b.n	8005b3a <HAL_SPI_Transmit+0x2d4>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005890:	f7fc fefc 	bl	800268c <HAL_GetTick>
 8005894:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005896:	88fb      	ldrh	r3, [r7, #6]
 8005898:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058a6:	2302      	movs	r3, #2
 80058a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058aa:	e13d      	b.n	8005b28 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Transmit+0x52>
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058bc:	e134      	b.n	8005b28 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2203      	movs	r2, #3
 80058c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	88fa      	ldrh	r2, [r7, #6]
 80058d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005908:	d10f      	bne.n	800592a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005918:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005928:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d007      	beq.n	8005948 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005946:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005950:	d94b      	bls.n	80059ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_SPI_Transmit+0xfa>
 800595a:	8afb      	ldrh	r3, [r7, #22]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d13e      	bne.n	80059de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	881a      	ldrh	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005984:	e02b      	b.n	80059de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d112      	bne.n	80059ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	881a      	ldrh	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	1c9a      	adds	r2, r3, #2
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059b8:	e011      	b.n	80059de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ba:	f7fc fe67 	bl	800268c <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d803      	bhi.n	80059d2 <HAL_SPI_Transmit+0x16c>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_Transmit+0x172>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059dc:	e0a4      	b.n	8005b28 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1ce      	bne.n	8005986 <HAL_SPI_Transmit+0x120>
 80059e8:	e07c      	b.n	8005ae4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_SPI_Transmit+0x192>
 80059f2:	8afb      	ldrh	r3, [r7, #22]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d170      	bne.n	8005ada <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d912      	bls.n	8005a28 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	881a      	ldrh	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b02      	subs	r3, #2
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a26:	e058      	b.n	8005ada <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	7812      	ldrb	r2, [r2, #0]
 8005a34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a4e:	e044      	b.n	8005ada <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d12b      	bne.n	8005ab6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d912      	bls.n	8005a8e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	881a      	ldrh	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	1c9a      	adds	r2, r3, #2
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b02      	subs	r3, #2
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a8c:	e025      	b.n	8005ada <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ab4:	e011      	b.n	8005ada <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab6:	f7fc fde9 	bl	800268c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d803      	bhi.n	8005ace <HAL_SPI_Transmit+0x268>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d102      	bne.n	8005ad4 <HAL_SPI_Transmit+0x26e>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ad8:	e026      	b.n	8005b28 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1b5      	bne.n	8005a50 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fb5b 	bl	80061a4 <SPI_EndRxTxTransaction>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e000      	b.n	8005b28 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08a      	sub	sp, #40	; 0x28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b50:	2301      	movs	r3, #1
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x26>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e1fb      	b.n	8005f60 <HAL_SPI_TransmitReceive+0x41e>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b70:	f7fc fd8c 	bl	800268c <HAL_GetTick>
 8005b74:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b7c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b84:	887b      	ldrh	r3, [r7, #2]
 8005b86:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005b88:	887b      	ldrh	r3, [r7, #2]
 8005b8a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b8c:	7efb      	ldrb	r3, [r7, #27]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d00e      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x6e>
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b98:	d106      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x66>
 8005ba2:	7efb      	ldrb	r3, [r7, #27]
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d003      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005bae:	e1cd      	b.n	8005f4c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x80>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x80>
 8005bbc:	887b      	ldrh	r3, [r7, #2]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d103      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005bc8:	e1c0      	b.n	8005f4c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d003      	beq.n	8005bde <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2205      	movs	r2, #5
 8005bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	887a      	ldrh	r2, [r7, #2]
 8005bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	887a      	ldrh	r2, [r7, #2]
 8005bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	887a      	ldrh	r2, [r7, #2]
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	887a      	ldrh	r2, [r7, #2]
 8005c0a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c20:	d802      	bhi.n	8005c28 <HAL_SPI_TransmitReceive+0xe6>
 8005c22:	8a3b      	ldrh	r3, [r7, #16]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d908      	bls.n	8005c3a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	e007      	b.n	8005c4a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c48:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d007      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c70:	d97c      	bls.n	8005d6c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x13e>
 8005c7a:	8a7b      	ldrh	r3, [r7, #18]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d169      	bne.n	8005d54 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	881a      	ldrh	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	1c9a      	adds	r2, r3, #2
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca4:	e056      	b.n	8005d54 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d11b      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x1aa>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d016      	beq.n	8005cec <HAL_SPI_TransmitReceive+0x1aa>
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d113      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	881a      	ldrh	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	1c9a      	adds	r2, r3, #2
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d11c      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x1f2>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d016      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	b292      	uxth	r2, r2
 8005d12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	1c9a      	adds	r2, r3, #2
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d30:	2301      	movs	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d34:	f7fc fcaa 	bl	800268c <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d807      	bhi.n	8005d54 <HAL_SPI_TransmitReceive+0x212>
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d003      	beq.n	8005d54 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d52:	e0fb      	b.n	8005f4c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1a3      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x164>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d19d      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x164>
 8005d6a:	e0df      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x23a>
 8005d74:	8a7b      	ldrh	r3, [r7, #18]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	f040 80cb 	bne.w	8005f12 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d912      	bls.n	8005dac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	881a      	ldrh	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	1c9a      	adds	r2, r3, #2
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b02      	subs	r3, #2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005daa:	e0b2      	b.n	8005f12 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd2:	e09e      	b.n	8005f12 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d134      	bne.n	8005e4c <HAL_SPI_TransmitReceive+0x30a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02f      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x30a>
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d12c      	bne.n	8005e4c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d912      	bls.n	8005e22 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	881a      	ldrh	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	1c9a      	adds	r2, r3, #2
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b02      	subs	r3, #2
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e20:	e012      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d148      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x3aa>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d042      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d923      	bls.n	8005eba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	b292      	uxth	r2, r2
 8005e7e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	1c9a      	adds	r2, r3, #2
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b02      	subs	r3, #2
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d81f      	bhi.n	8005ee8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005eb6:	605a      	str	r2, [r3, #4]
 8005eb8:	e016      	b.n	8005ee8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f103 020c 	add.w	r2, r3, #12
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	7812      	ldrb	r2, [r2, #0]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eec:	f7fc fbce 	bl	800268c <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d803      	bhi.n	8005f04 <HAL_SPI_TransmitReceive+0x3c2>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d102      	bne.n	8005f0a <HAL_SPI_TransmitReceive+0x3c8>
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f10:	e01c      	b.n	8005f4c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f47f af5b 	bne.w	8005dd4 <HAL_SPI_TransmitReceive+0x292>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f47f af54 	bne.w	8005dd4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f937 	bl	80061a4 <SPI_EndRxTxTransaction>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d006      	beq.n	8005f4a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60
 8005f48:	e000      	b.n	8005f4c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005f4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3728      	adds	r7, #40	; 0x28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f78:	f7fc fb88 	bl	800268c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	4413      	add	r3, r2
 8005f86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f88:	f7fc fb80 	bl	800268c <HAL_GetTick>
 8005f8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f8e:	4b39      	ldr	r3, [pc, #228]	; (8006074 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	015b      	lsls	r3, r3, #5
 8005f94:	0d1b      	lsrs	r3, r3, #20
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	fb02 f303 	mul.w	r3, r2, r3
 8005f9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f9e:	e054      	b.n	800604a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d050      	beq.n	800604a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fa8:	f7fc fb70 	bl	800268c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d902      	bls.n	8005fbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d13d      	bne.n	800603a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd6:	d111      	bne.n	8005ffc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe0:	d004      	beq.n	8005fec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fea:	d107      	bne.n	8005ffc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006004:	d10f      	bne.n	8006026 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006024:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e017      	b.n	800606a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	3b01      	subs	r3, #1
 8006048:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4013      	ands	r3, r2
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	429a      	cmp	r2, r3
 8006058:	bf0c      	ite	eq
 800605a:	2301      	moveq	r3, #1
 800605c:	2300      	movne	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	429a      	cmp	r2, r3
 8006066:	d19b      	bne.n	8005fa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000004 	.word	0x20000004

08006078 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800608a:	f7fc faff 	bl	800268c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	4413      	add	r3, r2
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800609a:	f7fc faf7 	bl	800268c <HAL_GetTick>
 800609e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060a8:	4b3d      	ldr	r3, [pc, #244]	; (80061a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00da      	lsls	r2, r3, #3
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	0d1b      	lsrs	r3, r3, #20
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060c0:	e060      	b.n	8006184 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060c8:	d107      	bne.n	80060da <SPI_WaitFifoStateUntilTimeout+0x62>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d104      	bne.n	80060da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d050      	beq.n	8006184 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060e2:	f7fc fad3 	bl	800268c <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d902      	bls.n	80060f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d13d      	bne.n	8006174 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006106:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006110:	d111      	bne.n	8006136 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611a:	d004      	beq.n	8006126 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006124:	d107      	bne.n	8006136 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006134:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613e:	d10f      	bne.n	8006160 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800615e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e010      	b.n	8006196 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	3b01      	subs	r3, #1
 8006182:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4013      	ands	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d196      	bne.n	80060c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3728      	adds	r7, #40	; 0x28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000004 	.word	0x20000004

080061a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff ff5b 	bl	8006078 <SPI_WaitFifoStateUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061cc:	f043 0220 	orr.w	r2, r3, #32
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e027      	b.n	8006228 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2200      	movs	r2, #0
 80061e0:	2180      	movs	r1, #128	; 0x80
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff fec0 	bl	8005f68 <SPI_WaitFlagStateUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e014      	b.n	8006228 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2200      	movs	r2, #0
 8006206:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f7ff ff34 	bl	8006078 <SPI_WaitFifoStateUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621a:	f043 0220 	orr.w	r2, r3, #32
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e000      	b.n	8006228 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e040      	b.n	80062c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fc f886 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	; 0x24
 800625c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fc0c 	bl	8006a8c <UART_SetConfig>
 8006274:	4603      	mov	r3, r0
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e022      	b.n	80062c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fdd4 	bl	8006e34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800629a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fe5b 	bl	8006f78 <UART_CheckIdleState>
 80062c2:	4603      	mov	r3, r0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	; 0x28
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	f040 8082 	bne.w	80063ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_UART_Transmit+0x26>
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e07a      	b.n	80063ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_UART_Transmit+0x38>
 8006300:	2302      	movs	r3, #2
 8006302:	e073      	b.n	80063ec <HAL_UART_Transmit+0x120>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2221      	movs	r2, #33	; 0x21
 8006318:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800631a:	f7fc f9b7 	bl	800268c <HAL_GetTick>
 800631e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006338:	d108      	bne.n	800634c <HAL_UART_Transmit+0x80>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	e003      	b.n	8006354 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800635c:	e02d      	b.n	80063ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2200      	movs	r2, #0
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fe4e 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e039      	b.n	80063ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	881a      	ldrh	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800638a:	b292      	uxth	r2, r2
 800638c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	3302      	adds	r3, #2
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	e008      	b.n	80063a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	781a      	ldrb	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	b292      	uxth	r2, r2
 80063a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	3301      	adds	r3, #1
 80063a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1cb      	bne.n	800635e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2140      	movs	r1, #64	; 0x40
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fe1a 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e005      	b.n	80063ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006406:	2b20      	cmp	r3, #32
 8006408:	d13d      	bne.n	8006486 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <HAL_UART_Receive_IT+0x22>
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e036      	b.n	8006488 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_UART_Receive_IT+0x34>
 8006424:	2302      	movs	r3, #2
 8006426:	e02f      	b.n	8006488 <HAL_UART_Receive_IT+0x94>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d018      	beq.n	8006476 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	613b      	str	r3, [r7, #16]
   return(result);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	69f9      	ldr	r1, [r7, #28]
 8006468:	6a3a      	ldr	r2, [r7, #32]
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e6      	bne.n	8006444 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	461a      	mov	r2, r3
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fe89 	bl	8007194 <UART_Start_Receive_IT>
 8006482:	4603      	mov	r3, r0
 8006484:	e000      	b.n	8006488 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006486:	2302      	movs	r3, #2
  }
}
 8006488:	4618      	mov	r0, r3
 800648a:	3728      	adds	r7, #40	; 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b0ba      	sub	sp, #232	; 0xe8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80064be:	4013      	ands	r3, r2
 80064c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d115      	bne.n	80064f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00f      	beq.n	80064f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d009      	beq.n	80064f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 82a3 	beq.w	8006a34 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
      }
      return;
 80064f6:	e29d      	b.n	8006a34 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8117 	beq.w	8006730 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800650e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006512:	4b85      	ldr	r3, [pc, #532]	; (8006728 <HAL_UART_IRQHandler+0x298>)
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 810a 	beq.w	8006730 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800651c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d011      	beq.n	800654c <HAL_UART_IRQHandler+0xbc>
 8006528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2201      	movs	r2, #1
 800653a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006542:	f043 0201 	orr.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d011      	beq.n	800657c <HAL_UART_IRQHandler+0xec>
 8006558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2202      	movs	r2, #2
 800656a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006572:	f043 0204 	orr.w	r2, r3, #4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d011      	beq.n	80065ac <HAL_UART_IRQHandler+0x11c>
 8006588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2204      	movs	r2, #4
 800659a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a2:	f043 0202 	orr.w	r2, r3, #2
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d017      	beq.n	80065e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d105      	bne.n	80065d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2208      	movs	r2, #8
 80065d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065de:	f043 0208 	orr.w	r2, r3, #8
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d012      	beq.n	800661a <HAL_UART_IRQHandler+0x18a>
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00c      	beq.n	800661a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006610:	f043 0220 	orr.w	r2, r3, #32
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8209 	beq.w	8006a38 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00d      	beq.n	800664e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006654:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d005      	beq.n	8006672 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800666e:	2b00      	cmp	r3, #0
 8006670:	d04f      	beq.n	8006712 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fe26 	bl	80072c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d141      	bne.n	800670a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800669c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1d9      	bne.n	8006686 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d013      	beq.n	8006702 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066de:	4a13      	ldr	r2, [pc, #76]	; (800672c <HAL_UART_IRQHandler+0x29c>)
 80066e0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fc ff96 	bl	8003618 <HAL_DMA_Abort_IT>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d017      	beq.n	8006722 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	e00f      	b.n	8006722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f9ac 	bl	8006a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006708:	e00b      	b.n	8006722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9a8 	bl	8006a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	e007      	b.n	8006722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f9a4 	bl	8006a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006720:	e18a      	b.n	8006a38 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006722:	bf00      	nop
    return;
 8006724:	e188      	b.n	8006a38 <HAL_UART_IRQHandler+0x5a8>
 8006726:	bf00      	nop
 8006728:	04000120 	.word	0x04000120
 800672c:	0800738b 	.word	0x0800738b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	2b01      	cmp	r3, #1
 8006736:	f040 8143 	bne.w	80069c0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 813c 	beq.w	80069c0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8135 	beq.w	80069c0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2210      	movs	r2, #16
 800675c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	f040 80b1 	bne.w	80068d0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800677a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 815c 	beq.w	8006a3c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800678a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800678e:	429a      	cmp	r2, r3
 8006790:	f080 8154 	bcs.w	8006a3c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800679a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	f000 8085 	beq.w	80068b4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067d8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1da      	bne.n	80067aa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3308      	adds	r3, #8
 80067fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006806:	f023 0301 	bic.w	r3, r3, #1
 800680a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006818:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800681c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006820:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800682a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e1      	bne.n	80067f4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006854:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006856:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800685a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e3      	bne.n	8006830 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006884:	f023 0310 	bic.w	r3, r3, #16
 8006888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006896:	65bb      	str	r3, [r7, #88]	; 0x58
 8006898:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800689c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e4      	bne.n	8006874 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fc fe79 	bl	80035a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f8d3 	bl	8006a74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068ce:	e0b5      	b.n	8006a3c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80a7 	beq.w	8006a40 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80068f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80a2 	beq.w	8006a40 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800690a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800691e:	647b      	str	r3, [r7, #68]	; 0x44
 8006920:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e4      	bne.n	80068fc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	623b      	str	r3, [r7, #32]
   return(result);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006956:	633a      	str	r2, [r7, #48]	; 0x30
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e3      	bne.n	8006932 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	60fb      	str	r3, [r7, #12]
   return(result);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 0310 	bic.w	r3, r3, #16
 8006990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	69b9      	ldr	r1, [r7, #24]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	617b      	str	r3, [r7, #20]
   return(result);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e4      	bne.n	800697c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f85b 	bl	8006a74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069be:	e03f      	b.n	8006a40 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00e      	beq.n	80069ea <HAL_UART_IRQHandler+0x55a>
 80069cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fe6d 	bl	80076c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069e8:	e02d      	b.n	8006a46 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00e      	beq.n	8006a14 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d01c      	beq.n	8006a44 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
    }
    return;
 8006a12:	e017      	b.n	8006a44 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d012      	beq.n	8006a46 <HAL_UART_IRQHandler+0x5b6>
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00c      	beq.n	8006a46 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fcc2 	bl	80073b6 <UART_EndTransmit_IT>
    return;
 8006a32:	e008      	b.n	8006a46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006a34:	bf00      	nop
 8006a36:	e006      	b.n	8006a46 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006a38:	bf00      	nop
 8006a3a:	e004      	b.n	8006a46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006a3c:	bf00      	nop
 8006a3e:	e002      	b.n	8006a46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006a44:	bf00      	nop
  }

}
 8006a46:	37e8      	adds	r7, #232	; 0xe8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006aba:	f023 030c 	bic.w	r3, r3, #12
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4aae      	ldr	r2, [pc, #696]	; (8006dc0 <UART_SetConfig+0x334>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d120      	bne.n	8006b4e <UART_SetConfig+0xc2>
 8006b0c:	4bad      	ldr	r3, [pc, #692]	; (8006dc4 <UART_SetConfig+0x338>)
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d817      	bhi.n	8006b48 <UART_SetConfig+0xbc>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <UART_SetConfig+0x94>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b3d 	.word	0x08006b3d
 8006b28:	08006b43 	.word	0x08006b43
 8006b2c:	08006b37 	.word	0x08006b37
 8006b30:	2301      	movs	r3, #1
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e0b5      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b36:	2302      	movs	r3, #2
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e0b2      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e0af      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b42:	2308      	movs	r3, #8
 8006b44:	77fb      	strb	r3, [r7, #31]
 8006b46:	e0ac      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e0a9      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a9d      	ldr	r2, [pc, #628]	; (8006dc8 <UART_SetConfig+0x33c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d124      	bne.n	8006ba2 <UART_SetConfig+0x116>
 8006b58:	4b9a      	ldr	r3, [pc, #616]	; (8006dc4 <UART_SetConfig+0x338>)
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b64:	d011      	beq.n	8006b8a <UART_SetConfig+0xfe>
 8006b66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b6a:	d817      	bhi.n	8006b9c <UART_SetConfig+0x110>
 8006b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b70:	d011      	beq.n	8006b96 <UART_SetConfig+0x10a>
 8006b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b76:	d811      	bhi.n	8006b9c <UART_SetConfig+0x110>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <UART_SetConfig+0xf8>
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b80:	d006      	beq.n	8006b90 <UART_SetConfig+0x104>
 8006b82:	e00b      	b.n	8006b9c <UART_SetConfig+0x110>
 8006b84:	2300      	movs	r3, #0
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e08b      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e088      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b90:	2304      	movs	r3, #4
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e085      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b96:	2308      	movs	r3, #8
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e082      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e07f      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a89      	ldr	r2, [pc, #548]	; (8006dcc <UART_SetConfig+0x340>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d124      	bne.n	8006bf6 <UART_SetConfig+0x16a>
 8006bac:	4b85      	ldr	r3, [pc, #532]	; (8006dc4 <UART_SetConfig+0x338>)
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006bb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006bb8:	d011      	beq.n	8006bde <UART_SetConfig+0x152>
 8006bba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006bbe:	d817      	bhi.n	8006bf0 <UART_SetConfig+0x164>
 8006bc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bc4:	d011      	beq.n	8006bea <UART_SetConfig+0x15e>
 8006bc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bca:	d811      	bhi.n	8006bf0 <UART_SetConfig+0x164>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <UART_SetConfig+0x14c>
 8006bd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bd4:	d006      	beq.n	8006be4 <UART_SetConfig+0x158>
 8006bd6:	e00b      	b.n	8006bf0 <UART_SetConfig+0x164>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e061      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006bde:	2302      	movs	r3, #2
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e05e      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006be4:	2304      	movs	r3, #4
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e05b      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006bea:	2308      	movs	r3, #8
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e058      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e055      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a75      	ldr	r2, [pc, #468]	; (8006dd0 <UART_SetConfig+0x344>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d124      	bne.n	8006c4a <UART_SetConfig+0x1be>
 8006c00:	4b70      	ldr	r3, [pc, #448]	; (8006dc4 <UART_SetConfig+0x338>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c0c:	d011      	beq.n	8006c32 <UART_SetConfig+0x1a6>
 8006c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c12:	d817      	bhi.n	8006c44 <UART_SetConfig+0x1b8>
 8006c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c18:	d011      	beq.n	8006c3e <UART_SetConfig+0x1b2>
 8006c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c1e:	d811      	bhi.n	8006c44 <UART_SetConfig+0x1b8>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <UART_SetConfig+0x1a0>
 8006c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c28:	d006      	beq.n	8006c38 <UART_SetConfig+0x1ac>
 8006c2a:	e00b      	b.n	8006c44 <UART_SetConfig+0x1b8>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e037      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c32:	2302      	movs	r3, #2
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e034      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e031      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c3e:	2308      	movs	r3, #8
 8006c40:	77fb      	strb	r3, [r7, #31]
 8006c42:	e02e      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c44:	2310      	movs	r3, #16
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e02b      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a61      	ldr	r2, [pc, #388]	; (8006dd4 <UART_SetConfig+0x348>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d124      	bne.n	8006c9e <UART_SetConfig+0x212>
 8006c54:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <UART_SetConfig+0x338>)
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006c5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c60:	d011      	beq.n	8006c86 <UART_SetConfig+0x1fa>
 8006c62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c66:	d817      	bhi.n	8006c98 <UART_SetConfig+0x20c>
 8006c68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c6c:	d011      	beq.n	8006c92 <UART_SetConfig+0x206>
 8006c6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c72:	d811      	bhi.n	8006c98 <UART_SetConfig+0x20c>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <UART_SetConfig+0x1f4>
 8006c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c7c:	d006      	beq.n	8006c8c <UART_SetConfig+0x200>
 8006c7e:	e00b      	b.n	8006c98 <UART_SetConfig+0x20c>
 8006c80:	2300      	movs	r3, #0
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e00d      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c86:	2302      	movs	r3, #2
 8006c88:	77fb      	strb	r3, [r7, #31]
 8006c8a:	e00a      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e007      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c92:	2308      	movs	r3, #8
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e004      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e001      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006caa:	d15c      	bne.n	8006d66 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006cac:	7ffb      	ldrb	r3, [r7, #31]
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d827      	bhi.n	8006d02 <UART_SetConfig+0x276>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0x22c>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ced 	.word	0x08006ced
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006d03 	.word	0x08006d03
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f7fd ffc0 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8006ce0:	61b8      	str	r0, [r7, #24]
        break;
 8006ce2:	e013      	b.n	8006d0c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fd ffde 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	61b8      	str	r0, [r7, #24]
        break;
 8006cea:	e00f      	b.n	8006d0c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b3a      	ldr	r3, [pc, #232]	; (8006dd8 <UART_SetConfig+0x34c>)
 8006cee:	61bb      	str	r3, [r7, #24]
        break;
 8006cf0:	e00c      	b.n	8006d0c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fd ff3f 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8006cf6:	61b8      	str	r0, [r7, #24]
        break;
 8006cf8:	e008      	b.n	8006d0c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	61bb      	str	r3, [r7, #24]
        break;
 8006d00:	e004      	b.n	8006d0c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	77bb      	strb	r3, [r7, #30]
        break;
 8006d0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8085 	beq.w	8006e1e <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	005a      	lsls	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	085b      	lsrs	r3, r3, #1
 8006d1e:	441a      	add	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	d916      	bls.n	8006d60 <UART_SetConfig+0x2d4>
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d38:	d212      	bcs.n	8006d60 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f023 030f 	bic.w	r3, r3, #15
 8006d42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	89fb      	ldrh	r3, [r7, #14]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	89fa      	ldrh	r2, [r7, #14]
 8006d5c:	60da      	str	r2, [r3, #12]
 8006d5e:	e05e      	b.n	8006e1e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	77bb      	strb	r3, [r7, #30]
 8006d64:	e05b      	b.n	8006e1e <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d66:	7ffb      	ldrb	r3, [r7, #31]
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d837      	bhi.n	8006ddc <UART_SetConfig+0x350>
 8006d6c:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <UART_SetConfig+0x2e8>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006d99 	.word	0x08006d99
 8006d78:	08006da1 	.word	0x08006da1
 8006d7c:	08006da9 	.word	0x08006da9
 8006d80:	08006ddd 	.word	0x08006ddd
 8006d84:	08006daf 	.word	0x08006daf
 8006d88:	08006ddd 	.word	0x08006ddd
 8006d8c:	08006ddd 	.word	0x08006ddd
 8006d90:	08006ddd 	.word	0x08006ddd
 8006d94:	08006db7 	.word	0x08006db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d98:	f7fd ff62 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8006d9c:	61b8      	str	r0, [r7, #24]
        break;
 8006d9e:	e022      	b.n	8006de6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da0:	f7fd ff80 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8006da4:	61b8      	str	r0, [r7, #24]
        break;
 8006da6:	e01e      	b.n	8006de6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da8:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <UART_SetConfig+0x34c>)
 8006daa:	61bb      	str	r3, [r7, #24]
        break;
 8006dac:	e01b      	b.n	8006de6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dae:	f7fd fee1 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8006db2:	61b8      	str	r0, [r7, #24]
        break;
 8006db4:	e017      	b.n	8006de6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dba:	61bb      	str	r3, [r7, #24]
        break;
 8006dbc:	e013      	b.n	8006de6 <UART_SetConfig+0x35a>
 8006dbe:	bf00      	nop
 8006dc0:	40013800 	.word	0x40013800
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	40004400 	.word	0x40004400
 8006dcc:	40004800 	.word	0x40004800
 8006dd0:	40004c00 	.word	0x40004c00
 8006dd4:	40005000 	.word	0x40005000
 8006dd8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	77bb      	strb	r3, [r7, #30]
        break;
 8006de4:	bf00      	nop
    }

    if (pclk != 0U)
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d018      	beq.n	8006e1e <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	085a      	lsrs	r2, r3, #1
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	441a      	add	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2b0f      	cmp	r3, #15
 8006e06:	d908      	bls.n	8006e1a <UART_SetConfig+0x38e>
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0e:	d204      	bcs.n	8006e1a <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	60da      	str	r2, [r3, #12]
 8006e18:	e001      	b.n	8006e1e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e2a:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f32:	d10a      	bne.n	8006f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f88:	f7fb fb80 	bl	800268c <HAL_GetTick>
 8006f8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d10e      	bne.n	8006fba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f82d 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e023      	b.n	8007002 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d10e      	bne.n	8006fe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f817 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e00d      	b.n	8007002 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b09c      	sub	sp, #112	; 0x70
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701a:	e0a5      	b.n	8007168 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007022:	f000 80a1 	beq.w	8007168 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007026:	f7fb fb31 	bl	800268c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007032:	429a      	cmp	r2, r3
 8007034:	d302      	bcc.n	800703c <UART_WaitOnFlagUntilTimeout+0x32>
 8007036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007038:	2b00      	cmp	r3, #0
 800703a:	d13e      	bne.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800704a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007050:	667b      	str	r3, [r7, #100]	; 0x64
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800705a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800705c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e6      	bne.n	800703c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	663b      	str	r3, [r7, #96]	; 0x60
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800708e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007090:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800709c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2220      	movs	r2, #32
 80070a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e067      	b.n	800718a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d04f      	beq.n	8007168 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d6:	d147      	bne.n	8007168 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
 8007102:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e6      	bne.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	613b      	str	r3, [r7, #16]
   return(result);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f023 0301 	bic.w	r3, r3, #1
 800712a:	66bb      	str	r3, [r7, #104]	; 0x68
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007134:	623a      	str	r2, [r7, #32]
 8007136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	69f9      	ldr	r1, [r7, #28]
 800713a:	6a3a      	ldr	r2, [r7, #32]
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	61bb      	str	r3, [r7, #24]
   return(result);
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e5      	bne.n	8007114 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e010      	b.n	800718a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69da      	ldr	r2, [r3, #28]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	4013      	ands	r3, r2
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	429a      	cmp	r2, r3
 8007176:	bf0c      	ite	eq
 8007178:	2301      	moveq	r3, #1
 800717a:	2300      	movne	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	429a      	cmp	r2, r3
 8007184:	f43f af4a 	beq.w	800701c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3770      	adds	r7, #112	; 0x70
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007194:	b480      	push	{r7}
 8007196:	b091      	sub	sp, #68	; 0x44
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	88fa      	ldrh	r2, [r7, #6]
 80071b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c6:	d10e      	bne.n	80071e6 <UART_Start_Receive_IT+0x52>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <UART_Start_Receive_IT+0x48>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071da:	e01a      	b.n	8007212 <UART_Start_Receive_IT+0x7e>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	22ff      	movs	r2, #255	; 0xff
 80071e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071e4:	e015      	b.n	8007212 <UART_Start_Receive_IT+0x7e>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10d      	bne.n	800720a <UART_Start_Receive_IT+0x76>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d104      	bne.n	8007200 <UART_Start_Receive_IT+0x6c>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	22ff      	movs	r2, #255	; 0xff
 80071fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071fe:	e008      	b.n	8007212 <UART_Start_Receive_IT+0x7e>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	227f      	movs	r2, #127	; 0x7f
 8007204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007208:	e003      	b.n	8007212 <UART_Start_Receive_IT+0x7e>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2222      	movs	r2, #34	; 0x22
 800721e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3308      	adds	r3, #8
 8007226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007240:	637a      	str	r2, [r7, #52]	; 0x34
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e5      	bne.n	8007220 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725c:	d107      	bne.n	800726e <UART_Start_Receive_IT+0xda>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a14      	ldr	r2, [pc, #80]	; (80072bc <UART_Start_Receive_IT+0x128>)
 800726a:	665a      	str	r2, [r3, #100]	; 0x64
 800726c:	e002      	b.n	8007274 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a13      	ldr	r2, [pc, #76]	; (80072c0 <UART_Start_Receive_IT+0x12c>)
 8007272:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	613b      	str	r3, [r7, #16]
   return(result);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007290:	63bb      	str	r3, [r7, #56]	; 0x38
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	623b      	str	r3, [r7, #32]
 800729c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	69f9      	ldr	r1, [r7, #28]
 80072a0:	6a3a      	ldr	r2, [r7, #32]
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e6      	bne.n	800727c <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3744      	adds	r7, #68	; 0x44
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	08007567 	.word	0x08007567
 80072c0:	0800740b 	.word	0x0800740b

080072c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b095      	sub	sp, #84	; 0x54
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ea:	643b      	str	r3, [r7, #64]	; 0x40
 80072ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e6      	bne.n	80072cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	61fb      	str	r3, [r7, #28]
   return(result);
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	64bb      	str	r3, [r7, #72]	; 0x48
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3308      	adds	r3, #8
 800731c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800731e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e5      	bne.n	80072fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007336:	2b01      	cmp	r3, #1
 8007338:	d118      	bne.n	800736c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	60bb      	str	r3, [r7, #8]
   return(result);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f023 0310 	bic.w	r3, r3, #16
 800734e:	647b      	str	r3, [r7, #68]	; 0x44
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6979      	ldr	r1, [r7, #20]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	613b      	str	r3, [r7, #16]
   return(result);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e6      	bne.n	800733a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800737e:	bf00      	nop
 8007380:	3754      	adds	r7, #84	; 0x54
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff fb59 	bl	8006a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b088      	sub	sp, #32
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d2:	61fb      	str	r3, [r7, #28]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6979      	ldr	r1, [r7, #20]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e6      	bne.n	80073be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fb25 	bl	8006a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007402:	bf00      	nop
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b096      	sub	sp, #88	; 0x58
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007418:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007420:	2b22      	cmp	r3, #34	; 0x22
 8007422:	f040 8094 	bne.w	800754e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800742c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007430:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007434:	b2d9      	uxtb	r1, r3
 8007436:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800743a:	b2da      	uxtb	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007440:	400a      	ands	r2, r1
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d177      	bne.n	800755e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007482:	653b      	str	r3, [r7, #80]	; 0x50
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800748c:	647b      	str	r3, [r7, #68]	; 0x44
 800748e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3308      	adds	r3, #8
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	623b      	str	r3, [r7, #32]
   return(result);
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074c0:	633a      	str	r2, [r7, #48]	; 0x30
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e5      	bne.n	80074a0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d12e      	bne.n	8007546 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0310 	bic.w	r3, r3, #16
 8007502:	64bb      	str	r3, [r7, #72]	; 0x48
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	69b9      	ldr	r1, [r7, #24]
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	617b      	str	r3, [r7, #20]
   return(result);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e6      	bne.n	80074ee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	f003 0310 	and.w	r3, r3, #16
 800752a:	2b10      	cmp	r3, #16
 800752c:	d103      	bne.n	8007536 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2210      	movs	r2, #16
 8007534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff fa98 	bl	8006a74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007544:	e00b      	b.n	800755e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fa f832 	bl	80015b0 <HAL_UART_RxCpltCallback>
}
 800754c:	e007      	b.n	800755e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	699a      	ldr	r2, [r3, #24]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0208 	orr.w	r2, r2, #8
 800755c:	619a      	str	r2, [r3, #24]
}
 800755e:	bf00      	nop
 8007560:	3758      	adds	r7, #88	; 0x58
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b096      	sub	sp, #88	; 0x58
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007574:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800757c:	2b22      	cmp	r3, #34	; 0x22
 800757e:	f040 8094 	bne.w	80076aa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007588:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007592:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007596:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800759a:	4013      	ands	r3, r2
 800759c:	b29a      	uxth	r2, r3
 800759e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	1c9a      	adds	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d177      	bne.n	80076ba <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e8:	643b      	str	r3, [r7, #64]	; 0x40
 80075ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3308      	adds	r3, #8
 8007602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	61fb      	str	r3, [r7, #28]
   return(result);
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	64bb      	str	r3, [r7, #72]	; 0x48
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800761c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800761e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e5      	bne.n	80075fc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007640:	2b01      	cmp	r3, #1
 8007642:	d12e      	bne.n	80076a2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60bb      	str	r3, [r7, #8]
   return(result);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	647b      	str	r3, [r7, #68]	; 0x44
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6979      	ldr	r1, [r7, #20]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	613b      	str	r3, [r7, #16]
   return(result);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2b10      	cmp	r3, #16
 8007688:	d103      	bne.n	8007692 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2210      	movs	r2, #16
 8007690:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff f9ea 	bl	8006a74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076a0:	e00b      	b.n	80076ba <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7f9 ff84 	bl	80015b0 <HAL_UART_RxCpltCallback>
}
 80076a8:	e007      	b.n	80076ba <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699a      	ldr	r2, [r3, #24]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0208 	orr.w	r2, r2, #8
 80076b8:	619a      	str	r2, [r3, #24]
}
 80076ba:	bf00      	nop
 80076bc:	3758      	adds	r7, #88	; 0x58
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80076dc:	4904      	ldr	r1, [pc, #16]	; (80076f0 <MX_FATFS_Init+0x18>)
 80076de:	4805      	ldr	r0, [pc, #20]	; (80076f4 <MX_FATFS_Init+0x1c>)
 80076e0:	f004 fbc8 	bl	800be74 <FATFS_LinkDriver>
 80076e4:	4603      	mov	r3, r0
 80076e6:	461a      	mov	r2, r3
 80076e8:	4b03      	ldr	r3, [pc, #12]	; (80076f8 <MX_FATFS_Init+0x20>)
 80076ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80076ec:	bf00      	nop
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20002998 	.word	0x20002998
 80076f4:	20000010 	.word	0x20000010
 80076f8:	2000299c 	.word	0x2000299c

080076fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007700:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007702:	4618      	mov	r0, r3
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	4618      	mov	r0, r3
 800771a:	f7f9 fb59 	bl	8000dd0 <SD_disk_initialize>
 800771e:	4603      	mov	r3, r0
 8007720:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	4603      	mov	r3, r0
 8007732:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	4618      	mov	r0, r3
 8007738:	f7f9 fc36 	bl	8000fa8 <SD_disk_status>
 800773c:	4603      	mov	r3, r0
 800773e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	4603      	mov	r3, r0
 8007756:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8007758:	7bf8      	ldrb	r0, [r7, #15]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	68b9      	ldr	r1, [r7, #8]
 8007760:	f7f9 fc38 	bl	8000fd4 <SD_disk_read>
 8007764:	4603      	mov	r3, r0
 8007766:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8007780:	7bf8      	ldrb	r0, [r7, #15]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	f7f9 fc8e 	bl	80010a8 <SD_disk_write>
 800778c:	4603      	mov	r3, r0
 800778e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	603a      	str	r2, [r7, #0]
 80077a2:	71fb      	strb	r3, [r7, #7]
 80077a4:	460b      	mov	r3, r1
 80077a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	79b9      	ldrb	r1, [r7, #6]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7f9 fcfe 	bl	80011b0 <SD_disk_ioctl>
 80077b4:	4603      	mov	r3, r0
 80077b6:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <disk_status+0x30>)
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	79fa      	ldrb	r2, [r7, #7]
 80077d8:	4905      	ldr	r1, [pc, #20]	; (80077f0 <disk_status+0x30>)
 80077da:	440a      	add	r2, r1
 80077dc:	7a12      	ldrb	r2, [r2, #8]
 80077de:	4610      	mov	r0, r2
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200002d8 	.word	0x200002d8

080077f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	4a0d      	ldr	r2, [pc, #52]	; (800783c <disk_initialize+0x48>)
 8007806:	5cd3      	ldrb	r3, [r2, r3]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d111      	bne.n	8007830 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800780c:	79fb      	ldrb	r3, [r7, #7]
 800780e:	4a0b      	ldr	r2, [pc, #44]	; (800783c <disk_initialize+0x48>)
 8007810:	2101      	movs	r1, #1
 8007812:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	4a09      	ldr	r2, [pc, #36]	; (800783c <disk_initialize+0x48>)
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	79fa      	ldrb	r2, [r7, #7]
 8007822:	4906      	ldr	r1, [pc, #24]	; (800783c <disk_initialize+0x48>)
 8007824:	440a      	add	r2, r1
 8007826:	7a12      	ldrb	r2, [r2, #8]
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200002d8 	.word	0x200002d8

08007840 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007840:	b590      	push	{r4, r7, lr}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	4a0a      	ldr	r2, [pc, #40]	; (800787c <disk_read+0x3c>)
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	689c      	ldr	r4, [r3, #8]
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	4a07      	ldr	r2, [pc, #28]	; (800787c <disk_read+0x3c>)
 8007860:	4413      	add	r3, r2
 8007862:	7a18      	ldrb	r0, [r3, #8]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	47a0      	blx	r4
 800786c:	4603      	mov	r3, r0
 800786e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	bd90      	pop	{r4, r7, pc}
 800787a:	bf00      	nop
 800787c:	200002d8 	.word	0x200002d8

08007880 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007880:	b590      	push	{r4, r7, lr}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	607a      	str	r2, [r7, #4]
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <disk_write+0x3c>)
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68dc      	ldr	r4, [r3, #12]
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	4a07      	ldr	r2, [pc, #28]	; (80078bc <disk_write+0x3c>)
 80078a0:	4413      	add	r3, r2
 80078a2:	7a18      	ldrb	r0, [r3, #8]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	47a0      	blx	r4
 80078ac:	4603      	mov	r3, r0
 80078ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd90      	pop	{r4, r7, pc}
 80078ba:	bf00      	nop
 80078bc:	200002d8 	.word	0x200002d8

080078c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	603a      	str	r2, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
 80078cc:	460b      	mov	r3, r1
 80078ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	4a09      	ldr	r2, [pc, #36]	; (80078f8 <disk_ioctl+0x38>)
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	79fa      	ldrb	r2, [r7, #7]
 80078de:	4906      	ldr	r1, [pc, #24]	; (80078f8 <disk_ioctl+0x38>)
 80078e0:	440a      	add	r2, r1
 80078e2:	7a10      	ldrb	r0, [r2, #8]
 80078e4:	79b9      	ldrb	r1, [r7, #6]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	200002d8 	.word	0x200002d8

080078fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007910:	e007      	b.n	8007922 <mem_cpy+0x26>
		*d++ = *s++;
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	1c53      	adds	r3, r2, #1
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	1c59      	adds	r1, r3, #1
 800791c:	6179      	str	r1, [r7, #20]
 800791e:	7812      	ldrb	r2, [r2, #0]
 8007920:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	1e5a      	subs	r2, r3, #1
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f2      	bne.n	8007912 <mem_cpy+0x16>
}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800793a:	b480      	push	{r7}
 800793c:	b087      	sub	sp, #28
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800794a:	e005      	b.n	8007958 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	617a      	str	r2, [r7, #20]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	1e5a      	subs	r2, r3, #1
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f4      	bne.n	800794c <mem_set+0x12>
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8007970:	b480      	push	{r7}
 8007972:	b089      	sub	sp, #36	; 0x24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	61fb      	str	r3, [r7, #28]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8007988:	bf00      	nop
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	1e5a      	subs	r2, r3, #1
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00d      	beq.n	80079b0 <mem_cmp+0x40>
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	61fa      	str	r2, [r7, #28]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	4619      	mov	r1, r3
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	61ba      	str	r2, [r7, #24]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	1acb      	subs	r3, r1, r3
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0ec      	beq.n	800798a <mem_cmp+0x1a>
	return r;
 80079b0:	697b      	ldr	r3, [r7, #20]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3724      	adds	r7, #36	; 0x24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80079c8:	e002      	b.n	80079d0 <chk_chr+0x12>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3301      	adds	r3, #1
 80079ce:	607b      	str	r3, [r7, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <chk_chr+0x26>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d1f2      	bne.n	80079ca <chk_chr+0xc>
	return *str;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	781b      	ldrb	r3, [r3, #0]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80079fe:	2300      	movs	r3, #0
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e03d      	b.n	8007a84 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8007a08:	4932      	ldr	r1, [pc, #200]	; (8007ad4 <chk_lock+0xe0>)
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d02e      	beq.n	8007a7a <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007a1c:	492d      	ldr	r1, [pc, #180]	; (8007ad4 <chk_lock+0xe0>)
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4613      	mov	r3, r2
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d122      	bne.n	8007a7e <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8007a38:	4926      	ldr	r1, [pc, #152]	; (8007ad4 <chk_lock+0xe0>)
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3304      	adds	r3, #4
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a50:	3308      	adds	r3, #8
 8007a52:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d112      	bne.n	8007a7e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8007a58:	491e      	ldr	r1, [pc, #120]	; (8007ad4 <chk_lock+0xe0>)
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	3308      	adds	r3, #8
 8007a68:	881a      	ldrh	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a70:	3306      	adds	r3, #6
 8007a72:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d102      	bne.n	8007a7e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8007a78:	e007      	b.n	8007a8a <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d9be      	bls.n	8007a08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d109      	bne.n	8007aa4 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <chk_lock+0xa8>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d101      	bne.n	8007aa0 <chk_lock+0xac>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	e013      	b.n	8007ac8 <chk_lock+0xd4>
 8007aa0:	2312      	movs	r3, #18
 8007aa2:	e011      	b.n	8007ac8 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10b      	bne.n	8007ac2 <chk_lock+0xce>
 8007aaa:	490a      	ldr	r1, [pc, #40]	; (8007ad4 <chk_lock+0xe0>)
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	330a      	adds	r3, #10
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac0:	d101      	bne.n	8007ac6 <chk_lock+0xd2>
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	e000      	b.n	8007ac8 <chk_lock+0xd4>
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	200000c0 	.word	0x200000c0

08007ad8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	607b      	str	r3, [r7, #4]
 8007ae2:	e002      	b.n	8007aea <enq_lock+0x12>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	607b      	str	r3, [r7, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d809      	bhi.n	8007b04 <enq_lock+0x2c>
 8007af0:	490a      	ldr	r1, [pc, #40]	; (8007b1c <enq_lock+0x44>)
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	4613      	mov	r3, r2
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	440b      	add	r3, r1
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1ef      	bne.n	8007ae4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	200000c0 	.word	0x200000c0

08007b20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	e030      	b.n	8007b92 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8007b30:	495b      	ldr	r1, [pc, #364]	; (8007ca0 <inc_lock+0x180>)
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4613      	mov	r3, r2
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d11f      	bne.n	8007b8c <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8007b4c:	4954      	ldr	r1, [pc, #336]	; (8007ca0 <inc_lock+0x180>)
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4613      	mov	r3, r2
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b64:	3308      	adds	r3, #8
 8007b66:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d10f      	bne.n	8007b8c <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8007b6c:	494c      	ldr	r1, [pc, #304]	; (8007ca0 <inc_lock+0x180>)
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4613      	mov	r3, r2
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	440b      	add	r3, r1
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	881a      	ldrh	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b84:	3306      	adds	r3, #6
 8007b86:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d006      	beq.n	8007b9a <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d9cb      	bls.n	8007b30 <inc_lock+0x10>
 8007b98:	e000      	b.n	8007b9c <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8007b9a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d14a      	bne.n	8007c38 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e002      	b.n	8007bae <inc_lock+0x8e>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3301      	adds	r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d809      	bhi.n	8007bc8 <inc_lock+0xa8>
 8007bb4:	493a      	ldr	r1, [pc, #232]	; (8007ca0 <inc_lock+0x180>)
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1ef      	bne.n	8007ba8 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d101      	bne.n	8007bd2 <inc_lock+0xb2>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e05f      	b.n	8007c92 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd8:	6819      	ldr	r1, [r3, #0]
 8007bda:	4831      	ldr	r0, [pc, #196]	; (8007ca0 <inc_lock+0x180>)
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4613      	mov	r3, r2
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4403      	add	r3, r0
 8007be8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	6819      	ldr	r1, [r3, #0]
 8007bf4:	482a      	ldr	r0, [pc, #168]	; (8007ca0 <inc_lock+0x180>)
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4403      	add	r3, r0
 8007c02:	3304      	adds	r3, #4
 8007c04:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c0c:	3306      	adds	r3, #6
 8007c0e:	8818      	ldrh	r0, [r3, #0]
 8007c10:	4923      	ldr	r1, [pc, #140]	; (8007ca0 <inc_lock+0x180>)
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4613      	mov	r3, r2
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	3308      	adds	r3, #8
 8007c20:	4602      	mov	r2, r0
 8007c22:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c24:	491e      	ldr	r1, [pc, #120]	; (8007ca0 <inc_lock+0x180>)
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	330a      	adds	r3, #10
 8007c34:	2200      	movs	r2, #0
 8007c36:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <inc_lock+0x138>
 8007c3e:	4918      	ldr	r1, [pc, #96]	; (8007ca0 <inc_lock+0x180>)
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4613      	mov	r3, r2
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	440b      	add	r3, r1
 8007c4c:	330a      	adds	r3, #10
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <inc_lock+0x138>
 8007c54:	2300      	movs	r3, #0
 8007c56:	e01c      	b.n	8007c92 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10b      	bne.n	8007c76 <inc_lock+0x156>
 8007c5e:	4910      	ldr	r1, [pc, #64]	; (8007ca0 <inc_lock+0x180>)
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4613      	mov	r3, r2
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	330a      	adds	r3, #10
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	b299      	uxth	r1, r3
 8007c74:	e001      	b.n	8007c7a <inc_lock+0x15a>
 8007c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c7a:	4809      	ldr	r0, [pc, #36]	; (8007ca0 <inc_lock+0x180>)
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4403      	add	r3, r0
 8007c88:	330a      	adds	r3, #10
 8007c8a:	460a      	mov	r2, r1
 8007c8c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	200000c0 	.word	0x200000c0

08007ca4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	607b      	str	r3, [r7, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d82e      	bhi.n	8007d16 <dec_lock+0x72>
		n = Files[i].ctr;
 8007cb8:	491b      	ldr	r1, [pc, #108]	; (8007d28 <dec_lock+0x84>)
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	330a      	adds	r3, #10
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007ccc:	89fb      	ldrh	r3, [r7, #14]
 8007cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd2:	d101      	bne.n	8007cd8 <dec_lock+0x34>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007cd8:	89fb      	ldrh	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <dec_lock+0x40>
 8007cde:	89fb      	ldrh	r3, [r7, #14]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007ce4:	4910      	ldr	r1, [pc, #64]	; (8007d28 <dec_lock+0x84>)
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	330a      	adds	r3, #10
 8007cf4:	89fa      	ldrh	r2, [r7, #14]
 8007cf6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007cf8:	89fb      	ldrh	r3, [r7, #14]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d108      	bne.n	8007d10 <dec_lock+0x6c>
 8007cfe:	490a      	ldr	r1, [pc, #40]	; (8007d28 <dec_lock+0x84>)
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	737b      	strb	r3, [r7, #13]
 8007d14:	e001      	b.n	8007d1a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d16:	2302      	movs	r3, #2
 8007d18:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d1a:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	200000c0 	.word	0x200000c0

08007d2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	e016      	b.n	8007d68 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d3a:	4910      	ldr	r1, [pc, #64]	; (8007d7c <clear_lock+0x50>)
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d108      	bne.n	8007d62 <clear_lock+0x36>
 8007d50:	490a      	ldr	r1, [pc, #40]	; (8007d7c <clear_lock+0x50>)
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4613      	mov	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	2200      	movs	r2, #0
 8007d60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d9e5      	bls.n	8007d3a <clear_lock+0xe>
	}
}
 8007d6e:	bf00      	nop
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200000c0 	.word	0x200000c0

08007d80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d92:	3304      	adds	r3, #4
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d047      	beq.n	8007e2a <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007da0:	330c      	adds	r3, #12
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dac:	3301      	adds	r3, #1
 8007dae:	7818      	ldrb	r0, [r3, #0]
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	2301      	movs	r3, #1
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	f7ff fd63 	bl	8007880 <disk_write>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <sync_window+0x46>
			res = FR_DISK_ERR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
 8007dc4:	e031      	b.n	8007e2a <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dcc:	3304      	adds	r3, #4
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	1ad2      	subs	r2, r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de4:	3318      	adds	r3, #24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d21e      	bcs.n	8007e2a <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df2:	3303      	adds	r3, #3
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	e014      	b.n	8007e24 <sync_window+0xa4>
					wsect += fs->fsize;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e00:	3318      	adds	r3, #24
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4413      	add	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e10:	3301      	adds	r3, #1
 8007e12:	7818      	ldrb	r0, [r3, #0]
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	2301      	movs	r3, #1
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	f7ff fd31 	bl	8007880 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d8e7      	bhi.n	8007dfa <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007e48:	330c      	adds	r3, #12
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d01f      	beq.n	8007e92 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff ff94 	bl	8007d80 <sync_window>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d117      	bne.n	8007e92 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e68:	3301      	adds	r3, #1
 8007e6a:	7818      	ldrb	r0, [r3, #0]
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	2301      	movs	r3, #1
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	f7ff fce5 	bl	8007840 <disk_read>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d004      	beq.n	8007e86 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007e8c:	330c      	adds	r3, #12
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff6b 	bl	8007d80 <sync_window>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f040 80bd 	bne.w	8008030 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	f040 80a7 	bne.w	8008012 <sync_fs+0x176>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eca:	3305      	adds	r3, #5
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	f040 809f 	bne.w	8008012 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007edc:	330a      	adds	r3, #10
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	f7ff fd29 	bl	800793a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2255      	movs	r2, #85	; 0x55
 8007eec:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	22aa      	movs	r2, #170	; 0xaa
 8007ef4:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2252      	movs	r2, #82	; 0x52
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2252      	movs	r2, #82	; 0x52
 8007f02:	705a      	strb	r2, [r3, #1]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2261      	movs	r2, #97	; 0x61
 8007f08:	709a      	strb	r2, [r3, #2]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2241      	movs	r2, #65	; 0x41
 8007f0e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2272      	movs	r2, #114	; 0x72
 8007f14:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2272      	movs	r2, #114	; 0x72
 8007f1c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2241      	movs	r2, #65	; 0x41
 8007f24:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2261      	movs	r2, #97	; 0x61
 8007f2c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f36:	3310      	adds	r3, #16
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f48:	3310      	adds	r3, #16
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	0a1b      	lsrs	r3, r3, #8
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f60:	3310      	adds	r3, #16
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	0c1b      	lsrs	r3, r3, #16
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f74:	3310      	adds	r3, #16
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	0e1b      	lsrs	r3, r3, #24
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f88:	330c      	adds	r3, #12
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc6:	330c      	adds	r3, #12
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	0e1b      	lsrs	r3, r3, #24
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fda:	331c      	adds	r3, #28
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	7818      	ldrb	r0, [r3, #0]
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	2301      	movs	r3, #1
 8008002:	f7ff fc3d 	bl	8007880 <disk_write>
			fs->fsi_flag = 0;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800c:	3305      	adds	r3, #5
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008018:	3301      	adds	r3, #1
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fc4d 	bl	80078c0 <disk_ioctl>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800802c:	2301      	movs	r3, #1
 800802e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	3b02      	subs	r3, #2
 8008048:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008050:	3314      	adds	r3, #20
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3b02      	subs	r3, #2
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d301      	bcc.n	8008060 <clust2sect+0x26>
 800805c:	2300      	movs	r3, #0
 800805e:	e00e      	b.n	800807e <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008066:	3302      	adds	r3, #2
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	fb03 f202 	mul.w	r2, r3, r2
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008078:	3308      	adds	r3, #8
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4413      	add	r3, r2
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b086      	sub	sp, #24
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d907      	bls.n	80080aa <get_fat+0x20>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a0:	3314      	adds	r3, #20
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d302      	bcc.n	80080b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80080aa:	2301      	movs	r3, #1
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	e0ec      	b.n	800828a <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295
 80080b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b03      	cmp	r3, #3
 80080c0:	f000 809e 	beq.w	8008200 <get_fat+0x176>
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	f300 80d6 	bgt.w	8008276 <get_fat+0x1ec>
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d002      	beq.n	80080d4 <get_fat+0x4a>
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d063      	beq.n	800819a <get_fat+0x110>
 80080d2:	e0d0      	b.n	8008276 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	085b      	lsrs	r3, r3, #1
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f0:	330a      	adds	r3, #10
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80080fc:	4413      	add	r3, r2
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fe97 	bl	8007e34 <move_window>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	f040 80b7 	bne.w	800827c <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	60fa      	str	r2, [r7, #12]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800811a:	320a      	adds	r2, #10
 800811c:	8812      	ldrh	r2, [r2, #0]
 800811e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008122:	fb02 f201 	mul.w	r2, r2, r1
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	5cd3      	ldrb	r3, [r2, r3]
 800812c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800813c:	330a      	adds	r3, #10
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	fbb3 f3f1 	udiv	r3, r3, r1
 8008148:	4413      	add	r3, r2
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fe71 	bl	8007e34 <move_window>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 8093 	bne.w	8008280 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008160:	330a      	adds	r3, #10
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	fbb3 f1f2 	udiv	r1, r3, r2
 800816c:	fb02 f201 	mul.w	r2, r2, r1
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	5cd3      	ldrb	r3, [r2, r3]
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	461a      	mov	r2, r3
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4313      	orrs	r3, r2
 800817e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <get_fat+0x106>
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	091b      	lsrs	r3, r3, #4
 800818e:	e002      	b.n	8008196 <get_fat+0x10c>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008196:	617b      	str	r3, [r7, #20]
			break;
 8008198:	e077      	b.n	800828a <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a8:	330a      	adds	r3, #10
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	085b      	lsrs	r3, r3, #1
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	4619      	mov	r1, r3
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80081b8:	4413      	add	r3, r2
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff fe39 	bl	8007e34 <move_window>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d15d      	bne.n	8008284 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	005a      	lsls	r2, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d2:	330a      	adds	r3, #10
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80081da:	fb03 f301 	mul.w	r3, r3, r1
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	4413      	add	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	3301      	adds	r3, #1
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	b21a      	sxth	r2, r3
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	b21b      	sxth	r3, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	b21b      	sxth	r3, r3
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	617b      	str	r3, [r7, #20]
			break;
 80081fe:	e044      	b.n	800828a <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820e:	330a      	adds	r3, #10
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	089b      	lsrs	r3, r3, #2
 8008214:	b29b      	uxth	r3, r3
 8008216:	4619      	mov	r1, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	fbb3 f3f1 	udiv	r3, r3, r1
 800821e:	4413      	add	r3, r2
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff fe06 	bl	8007e34 <move_window>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d12c      	bne.n	8008288 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	009a      	lsls	r2, r3, #2
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008238:	330a      	adds	r3, #10
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008240:	fb03 f301 	mul.w	r3, r3, r1
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	3303      	adds	r3, #3
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	061a      	lsls	r2, r3, #24
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3302      	adds	r3, #2
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	041b      	lsls	r3, r3, #16
 800825c:	4313      	orrs	r3, r2
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	3201      	adds	r2, #1
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	0212      	lsls	r2, r2, #8
 8008266:	4313      	orrs	r3, r2
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	7812      	ldrb	r2, [r2, #0]
 800826c:	4313      	orrs	r3, r2
 800826e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008272:	617b      	str	r3, [r7, #20]
			break;
 8008274:	e009      	b.n	800828a <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8008276:	2301      	movs	r3, #1
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	e006      	b.n	800828a <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800827c:	bf00      	nop
 800827e:	e004      	b.n	800828a <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008280:	bf00      	nop
 8008282:	e002      	b.n	800828a <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008284:	bf00      	nop
 8008286:	e000      	b.n	800828a <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008288:	bf00      	nop
		}
	}

	return val;
 800828a:	697b      	ldr	r3, [r7, #20]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d907      	bls.n	80082b6 <put_fat+0x22>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ac:	3314      	adds	r3, #20
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <put_fat+0x28>
		res = FR_INT_ERR;
 80082b6:	2302      	movs	r3, #2
 80082b8:	77fb      	strb	r3, [r7, #31]
 80082ba:	e146      	b.n	800854a <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	f000 80d9 	beq.w	800847c <put_fat+0x1e8>
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	f300 8133 	bgt.w	8008536 <put_fat+0x2a2>
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d003      	beq.n	80082dc <put_fat+0x48>
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	f000 8095 	beq.w	8008404 <put_fat+0x170>
 80082da:	e12c      	b.n	8008536 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4413      	add	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f8:	330a      	adds	r3, #10
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	4619      	mov	r1, r3
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	fbb3 f3f1 	udiv	r3, r3, r1
 8008304:	4413      	add	r3, r2
 8008306:	4619      	mov	r1, r3
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fd93 	bl	8007e34 <move_window>
 800830e:	4603      	mov	r3, r0
 8008310:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008312:	7ffb      	ldrb	r3, [r7, #31]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f040 8111 	bne.w	800853c <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	617a      	str	r2, [r7, #20]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008326:	320a      	adds	r2, #10
 8008328:	8812      	ldrh	r2, [r2, #0]
 800832a:	fbb3 f1f2 	udiv	r1, r3, r2
 800832e:	fb02 f201 	mul.w	r2, r2, r1
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00d      	beq.n	8008360 <put_fat+0xcc>
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	b25b      	sxtb	r3, r3
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	b25a      	sxtb	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	011b      	lsls	r3, r3, #4
 8008356:	b25b      	sxtb	r3, r3
 8008358:	4313      	orrs	r3, r2
 800835a:	b25b      	sxtb	r3, r3
 800835c:	b2db      	uxtb	r3, r3
 800835e:	e001      	b.n	8008364 <put_fat+0xd0>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836e:	3304      	adds	r3, #4
 8008370:	2201      	movs	r2, #1
 8008372:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008382:	330a      	adds	r3, #10
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	4619      	mov	r1, r3
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	fbb3 f3f1 	udiv	r3, r3, r1
 800838e:	4413      	add	r3, r2
 8008390:	4619      	mov	r1, r3
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fd4e 	bl	8007e34 <move_window>
 8008398:	4603      	mov	r3, r0
 800839a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800839c:	7ffb      	ldrb	r3, [r7, #31]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 80ce 	bne.w	8008540 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083aa:	330a      	adds	r3, #10
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80083b6:	fb02 f201 	mul.w	r2, r2, r1
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <put_fat+0x140>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	091b      	lsrs	r3, r3, #4
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	e00e      	b.n	80083f2 <put_fat+0x15e>
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	b25b      	sxtb	r3, r3
 80083da:	f023 030f 	bic.w	r3, r3, #15
 80083de:	b25a      	sxtb	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	0a1b      	lsrs	r3, r3, #8
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	b25b      	sxtb	r3, r3
 80083ec:	4313      	orrs	r3, r2
 80083ee:	b25b      	sxtb	r3, r3
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fc:	3304      	adds	r3, #4
 80083fe:	2201      	movs	r2, #1
 8008400:	701a      	strb	r2, [r3, #0]
			break;
 8008402:	e0a2      	b.n	800854a <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008412:	330a      	adds	r3, #10
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	b29b      	uxth	r3, r3
 800841a:	4619      	mov	r1, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008422:	4413      	add	r3, r2
 8008424:	4619      	mov	r1, r3
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7ff fd04 	bl	8007e34 <move_window>
 800842c:	4603      	mov	r3, r0
 800842e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008430:	7ffb      	ldrb	r3, [r7, #31]
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 8086 	bne.w	8008544 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	005a      	lsls	r2, r3, #1
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008442:	330a      	adds	r3, #10
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	fbb2 f1f3 	udiv	r1, r2, r3
 800844a:	fb03 f301 	mul.w	r3, r3, r1
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	b2da      	uxtb	r2, r3
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	b29b      	uxth	r3, r3
 8008462:	0a1b      	lsrs	r3, r3, #8
 8008464:	b29a      	uxth	r2, r3
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	3301      	adds	r3, #1
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008474:	3304      	adds	r3, #4
 8008476:	2201      	movs	r2, #1
 8008478:	701a      	strb	r2, [r3, #0]
			break;
 800847a:	e066      	b.n	800854a <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848a:	330a      	adds	r3, #10
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	089b      	lsrs	r3, r3, #2
 8008490:	b29b      	uxth	r3, r3
 8008492:	4619      	mov	r1, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	fbb3 f3f1 	udiv	r3, r3, r1
 800849a:	4413      	add	r3, r2
 800849c:	4619      	mov	r1, r3
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7ff fcc8 	bl	8007e34 <move_window>
 80084a4:	4603      	mov	r3, r0
 80084a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084a8:	7ffb      	ldrb	r3, [r7, #31]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d14c      	bne.n	8008548 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	009a      	lsls	r2, r3, #2
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b8:	330a      	adds	r3, #10
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80084c0:	fb03 f301 	mul.w	r3, r3, r1
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	3303      	adds	r3, #3
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	061a      	lsls	r2, r3, #24
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	3302      	adds	r3, #2
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	4313      	orrs	r3, r2
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	3201      	adds	r2, #1
 80084e2:	7812      	ldrb	r2, [r2, #0]
 80084e4:	0212      	lsls	r2, r2, #8
 80084e6:	4313      	orrs	r3, r2
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	7812      	ldrb	r2, [r2, #0]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	701a      	strb	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	b29b      	uxth	r3, r3
 8008504:	0a1b      	lsrs	r3, r3, #8
 8008506:	b29a      	uxth	r2, r3
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	3301      	adds	r3, #1
 800850c:	b2d2      	uxtb	r2, r2
 800850e:	701a      	strb	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	0c1a      	lsrs	r2, r3, #16
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	3302      	adds	r3, #2
 8008518:	b2d2      	uxtb	r2, r2
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	0e1a      	lsrs	r2, r3, #24
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	3303      	adds	r3, #3
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852e:	3304      	adds	r3, #4
 8008530:	2201      	movs	r2, #1
 8008532:	701a      	strb	r2, [r3, #0]
			break;
 8008534:	e009      	b.n	800854a <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8008536:	2302      	movs	r3, #2
 8008538:	77fb      	strb	r3, [r7, #31]
 800853a:	e006      	b.n	800854a <put_fat+0x2b6>
			if (res != FR_OK) break;
 800853c:	bf00      	nop
 800853e:	e004      	b.n	800854a <put_fat+0x2b6>
			if (res != FR_OK) break;
 8008540:	bf00      	nop
 8008542:	e002      	b.n	800854a <put_fat+0x2b6>
			if (res != FR_OK) break;
 8008544:	bf00      	nop
 8008546:	e000      	b.n	800854a <put_fat+0x2b6>
			if (res != FR_OK) break;
 8008548:	bf00      	nop
		}
	}

	return res;
 800854a:	7ffb      	ldrb	r3, [r7, #31]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3720      	adds	r7, #32
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d907      	bls.n	8008574 <remove_chain+0x20>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800856a:	3314      	adds	r3, #20
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d302      	bcc.n	800857a <remove_chain+0x26>
		res = FR_INT_ERR;
 8008574:	2302      	movs	r3, #2
 8008576:	73fb      	strb	r3, [r7, #15]
 8008578:	e04f      	b.n	800861a <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800857e:	e040      	b.n	8008602 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff fd81 	bl	800808a <get_fat>
 8008588:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d041      	beq.n	8008614 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d102      	bne.n	800859c <remove_chain+0x48>
 8008596:	2302      	movs	r3, #2
 8008598:	73fb      	strb	r3, [r7, #15]
 800859a:	e03e      	b.n	800861a <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d102      	bne.n	80085aa <remove_chain+0x56>
 80085a4:	2301      	movs	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]
 80085a8:	e037      	b.n	800861a <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80085aa:	2200      	movs	r2, #0
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff fe70 	bl	8008294 <put_fat>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d12c      	bne.n	8008618 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c4:	3310      	adds	r3, #16
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085cc:	d017      	beq.n	80085fe <remove_chain+0xaa>
				fs->free_clust++;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d4:	3310      	adds	r3, #16
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e0:	3310      	adds	r3, #16
 80085e2:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ea:	3305      	adds	r3, #5
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085fa:	3305      	adds	r3, #5
 80085fc:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008608:	3314      	adds	r3, #20
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d3b6      	bcc.n	8008580 <remove_chain+0x2c>
 8008612:	e002      	b.n	800861a <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8008614:	bf00      	nop
 8008616:	e000      	b.n	800861a <remove_chain+0xc6>
			if (res != FR_OK) break;
 8008618:	bf00      	nop
		}
	}

	return res;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d113      	bne.n	800865c <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800863a:	330c      	adds	r3, #12
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d007      	beq.n	8008656 <create_chain+0x32>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800864c:	3314      	adds	r3, #20
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	429a      	cmp	r2, r3
 8008654:	d31e      	bcc.n	8008694 <create_chain+0x70>
 8008656:	2301      	movs	r3, #1
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	e01b      	b.n	8008694 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff fd13 	bl	800808a <get_fat>
 8008664:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d801      	bhi.n	8008670 <create_chain+0x4c>
 800866c:	2301      	movs	r3, #1
 800866e:	e086      	b.n	800877e <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008676:	d101      	bne.n	800867c <create_chain+0x58>
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	e080      	b.n	800877e <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008682:	3314      	adds	r3, #20
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	429a      	cmp	r2, r3
 800868a:	d201      	bcs.n	8008690 <create_chain+0x6c>
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	e076      	b.n	800877e <create_chain+0x15a>
		scl = clst;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	3301      	adds	r3, #1
 800869c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a4:	3314      	adds	r3, #20
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d307      	bcc.n	80086be <create_chain+0x9a>
			ncl = 2;
 80086ae:	2302      	movs	r3, #2
 80086b0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d901      	bls.n	80086be <create_chain+0x9a>
 80086ba:	2300      	movs	r3, #0
 80086bc:	e05f      	b.n	800877e <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80086be:	6979      	ldr	r1, [r7, #20]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff fce2 	bl	800808a <get_fat>
 80086c6:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00e      	beq.n	80086ec <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d4:	d002      	beq.n	80086dc <create_chain+0xb8>
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <create_chain+0xbc>
			return cs;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	e04e      	b.n	800877e <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d1d7      	bne.n	8008698 <create_chain+0x74>
 80086e8:	2300      	movs	r3, #0
 80086ea:	e048      	b.n	800877e <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80086ec:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80086ee:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80086f2:	6979      	ldr	r1, [r7, #20]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fdcd 	bl	8008294 <put_fat>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <create_chain+0xf4>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff fdc0 	bl	8008294 <put_fat>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d126      	bne.n	800876c <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008724:	330c      	adds	r3, #12
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008730:	3310      	adds	r3, #16
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008738:	d020      	beq.n	800877c <create_chain+0x158>
			fs->free_clust--;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008740:	3310      	adds	r3, #16
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	1e5a      	subs	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874c:	3310      	adds	r3, #16
 800874e:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008756:	3305      	adds	r3, #5
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	b2da      	uxtb	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008766:	3305      	adds	r3, #5
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e007      	b.n	800877c <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d102      	bne.n	8008778 <create_chain+0x154>
 8008772:	f04f 33ff 	mov.w	r3, #4294967295
 8008776:	e000      	b.n	800877a <create_chain+0x156>
 8008778:	2301      	movs	r3, #1
 800877a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800877c:	697b      	ldr	r3, [r7, #20]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8008786:	b480      	push	{r7}
 8008788:	b087      	sub	sp, #28
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008796:	3304      	adds	r3, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3304      	adds	r3, #4
 800879c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087aa:	330a      	adds	r3, #10
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c2:	3302      	adds	r3, #2
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	1d1a      	adds	r2, r3, #4
 80087d0:	613a      	str	r2, [r7, #16]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <clmt_clust+0x5a>
 80087dc:	2300      	movs	r3, #0
 80087de:	e010      	b.n	8008802 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d307      	bcc.n	80087f8 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	3304      	adds	r3, #4
 80087f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80087f6:	e7e9      	b.n	80087cc <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 80087f8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
}
 8008802:	4618      	mov	r0, r3
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008822:	3306      	adds	r3, #6
 8008824:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800882c:	3308      	adds	r3, #8
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d00a      	beq.n	800884e <dir_sdi+0x40>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008844:	3314      	adds	r3, #20
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	429a      	cmp	r2, r3
 800884c:	d301      	bcc.n	8008852 <dir_sdi+0x44>
		return FR_INT_ERR;
 800884e:	2302      	movs	r3, #2
 8008850:	e0b4      	b.n	80089bc <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d111      	bne.n	800887c <dir_sdi+0x6e>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b03      	cmp	r3, #3
 8008868:	d108      	bne.n	800887c <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008876:	3304      	adds	r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d117      	bne.n	80088b2 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800888e:	3308      	adds	r3, #8
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	4293      	cmp	r3, r2
 8008898:	d301      	bcc.n	800889e <dir_sdi+0x90>
			return FR_INT_ERR;
 800889a:	2302      	movs	r3, #2
 800889c:	e08e      	b.n	80089bc <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80088aa:	3304      	adds	r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	e046      	b.n	8008940 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088be:	330a      	adds	r3, #10
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	095b      	lsrs	r3, r3, #5
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d4:	3302      	adds	r3, #2
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	fb03 f302 	mul.w	r3, r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80088de:	e022      	b.n	8008926 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6979      	ldr	r1, [r7, #20]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fbcd 	bl	800808a <get_fat>
 80088f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d101      	bne.n	80088fe <dir_sdi+0xf0>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e05e      	b.n	80089bc <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d90a      	bls.n	800891a <dir_sdi+0x10c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008910:	3314      	adds	r3, #20
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	429a      	cmp	r2, r3
 8008918:	d301      	bcc.n	800891e <dir_sdi+0x110>
				return FR_INT_ERR;
 800891a:	2302      	movs	r3, #2
 800891c:	e04e      	b.n	80089bc <dir_sdi+0x1ae>
			idx -= ic;
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	429a      	cmp	r2, r3
 800892c:	d2d8      	bcs.n	80088e0 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6979      	ldr	r1, [r7, #20]
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff fb7e 	bl	800803a <clust2sect>
 800893e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008946:	330c      	adds	r3, #12
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <dir_sdi+0x148>
 8008952:	2302      	movs	r3, #2
 8008954:	e032      	b.n	80089bc <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008962:	330a      	adds	r3, #10
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	095b      	lsrs	r3, r3, #5
 8008968:	b29b      	uxth	r3, r3
 800896a:	461a      	mov	r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	441a      	add	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897c:	3310      	adds	r3, #16
 800897e:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008996:	330a      	adds	r3, #10
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	095b      	lsrs	r3, r3, #5
 800899c:	b29b      	uxth	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80089a6:	fb02 f201 	mul.w	r2, r2, r1
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	015b      	lsls	r3, r3, #5
 80089ae:	18c2      	adds	r2, r0, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b6:	3314      	adds	r3, #20
 80089b8:	601a      	str	r2, [r3, #0]

	return FR_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d4:	3306      	adds	r3, #6
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d006      	beq.n	80089f2 <dir_next+0x2e>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ea:	3310      	adds	r3, #16
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <dir_next+0x32>
		return FR_NO_FILE;
 80089f2:	2304      	movs	r3, #4
 80089f4:	e144      	b.n	8008c80 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a02:	330a      	adds	r3, #10
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	095b      	lsrs	r3, r3, #5
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a12:	fb02 f201 	mul.w	r2, r2, r1
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 810c 	bne.w	8008c36 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a24:	3310      	adds	r3, #16
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a30:	3310      	adds	r3, #16
 8008a32:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3a:	330c      	adds	r3, #12
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10e      	bne.n	8008a60 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4e:	3308      	adds	r3, #8
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	f0c0 80ed 	bcc.w	8008c36 <dir_next+0x272>
				return FR_NO_FILE;
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	e10f      	b.n	8008c80 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6c:	330a      	adds	r3, #10
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	095b      	lsrs	r3, r3, #5
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	461a      	mov	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a88:	3302      	adds	r3, #2
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 80d0 	bne.w	8008c36 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	f7ff faed 	bl	800808a <get_fat>
 8008ab0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d801      	bhi.n	8008abc <dir_next+0xf8>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e0e1      	b.n	8008c80 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d101      	bne.n	8008ac8 <dir_next+0x104>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e0db      	b.n	8008c80 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	f0c0 8097 	bcc.w	8008c0e <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <dir_next+0x126>
 8008ae6:	2304      	movs	r3, #4
 8008ae8:	e0ca      	b.n	8008c80 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af8:	330c      	adds	r3, #12
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f7ff fd90 	bl	8008624 <create_chain>
 8008b04:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <dir_next+0x14c>
 8008b0c:	2307      	movs	r3, #7
 8008b0e:	e0b7      	b.n	8008c80 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <dir_next+0x156>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e0b2      	b.n	8008c80 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b20:	d101      	bne.n	8008b26 <dir_next+0x162>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e0ac      	b.n	8008c80 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff f926 	bl	8007d80 <sync_window>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <dir_next+0x17a>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e0a0      	b.n	8008c80 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b54:	330a      	adds	r3, #10
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	f7fe feed 	bl	800793a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b6e:	681c      	ldr	r4, [r3, #0]
 8008b70:	6979      	ldr	r1, [r7, #20]
 8008b72:	4610      	mov	r0, r2
 8008b74:	f7ff fa61 	bl	800803a <clust2sect>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8008b7e:	330c      	adds	r3, #12
 8008b80:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008b82:	2300      	movs	r3, #0
 8008b84:	613b      	str	r3, [r7, #16]
 8008b86:	e024      	b.n	8008bd2 <dir_next+0x20e>
						dp->fs->wflag = 1;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b94:	3304      	adds	r3, #4
 8008b96:	2201      	movs	r2, #1
 8008b98:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff f8ec 	bl	8007d80 <sync_window>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <dir_next+0x1ee>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e066      	b.n	8008c80 <dir_next+0x2bc>
						dp->fs->winsect++;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8008bbe:	330c      	adds	r3, #12
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	1c59      	adds	r1, r3, #1
 8008bc4:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8008bc8:	330c      	adds	r3, #12
 8008bca:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bde:	3302      	adds	r3, #2
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d3ce      	bcc.n	8008b88 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008bf6:	330c      	adds	r3, #12
 8008bf8:	6819      	ldr	r1, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	1a8a      	subs	r2, r1, r2
 8008c06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c14:	330c      	adds	r3, #12
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6979      	ldr	r1, [r7, #20]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff fa08 	bl	800803a <clust2sect>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c32:	3310      	adds	r3, #16
 8008c34:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c40:	3306      	adds	r3, #6
 8008c42:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c5a:	330a      	adds	r3, #10
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	461a      	mov	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c6a:	fb02 f201 	mul.w	r2, r2, r1
 8008c6e:	1a9b      	subs	r3, r3, r2
 8008c70:	015b      	lsls	r3, r3, #5
 8008c72:	18c2      	adds	r2, r0, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7a:	3314      	adds	r3, #20
 8008c7c:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd90      	pop	{r4, r7, pc}

08008c88 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008c92:	2100      	movs	r1, #0
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff fdba 	bl	800880e <dir_sdi>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d138      	bne.n	8008d16 <dir_alloc+0x8e>
		n = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb6:	3310      	adds	r3, #16
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7ff f8b9 	bl	8007e34 <move_window>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d123      	bne.n	8008d14 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd2:	3314      	adds	r3, #20
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2be5      	cmp	r3, #229	; 0xe5
 8008cda:	d007      	beq.n	8008cec <dir_alloc+0x64>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce2:	3314      	adds	r3, #20
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d107      	bne.n	8008cfc <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60bb      	str	r3, [r7, #8]
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d102      	bne.n	8008d00 <dir_alloc+0x78>
 8008cfa:	e00c      	b.n	8008d16 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008d00:	2101      	movs	r1, #1
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff fe5e 	bl	80089c4 <dir_next>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0ca      	beq.n	8008ca8 <dir_alloc+0x20>
 8008d12:	e000      	b.n	8008d16 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8008d14:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d101      	bne.n	8008d20 <dir_alloc+0x98>
 8008d1c:	2307      	movs	r3, #7
 8008d1e:	73fb      	strb	r3, [r7, #15]
	return res;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	331b      	adds	r3, #27
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	021b      	lsls	r3, r3, #8
 8008d3c:	b21a      	sxth	r2, r3
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	331a      	adds	r3, #26
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	b21b      	sxth	r3, r3
 8008d46:	4313      	orrs	r3, r2
 8008d48:	b21b      	sxth	r3, r3
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d10f      	bne.n	8008d7a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	3315      	adds	r3, #21
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	b21a      	sxth	r2, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	3314      	adds	r3, #20
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	b21b      	sxth	r3, r3
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	b21b      	sxth	r3, r3
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	041b      	lsls	r3, r3, #16
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

	return cl;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	331a      	adds	r3, #26
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	0a1b      	lsrs	r3, r3, #8
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	331b      	adds	r3, #27
 8008da8:	b2d2      	uxtb	r2, r2
 8008daa:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	0c1a      	lsrs	r2, r3, #16
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3314      	adds	r3, #20
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	0c1b      	lsrs	r3, r3, #16
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	0a1b      	lsrs	r3, r3, #8
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3315      	adds	r3, #21
 8008dc6:	b2d2      	uxtb	r2, r2
 8008dc8:	701a      	strb	r2, [r3, #0]
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
	...

08008dd8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dea:	1e5a      	subs	r2, r3, #1
 8008dec:	4613      	mov	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8008e00:	4a2b      	ldr	r2, [pc, #172]	; (8008eb0 <cmp_lfn+0xd8>)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	4413      	add	r3, r2
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	b21a      	sxth	r2, r3
 8008e14:	4926      	ldr	r1, [pc, #152]	; (8008eb0 <cmp_lfn+0xd8>)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	440b      	add	r3, r1
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	440b      	add	r3, r1
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	b21b      	sxth	r3, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	b21b      	sxth	r3, r3
 8008e2a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8008e2c:	89fb      	ldrh	r3, [r7, #14]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d019      	beq.n	8008e66 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8008e32:	89bb      	ldrh	r3, [r7, #12]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f003 f869 	bl	800bf0c <ff_wtoupper>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2bfe      	cmp	r3, #254	; 0xfe
 8008e42:	d80e      	bhi.n	8008e62 <cmp_lfn+0x8a>
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	617a      	str	r2, [r7, #20]
 8008e4a:	005b      	lsls	r3, r3, #1
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4413      	add	r3, r2
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f003 f85a 	bl	800bf0c <ff_wtoupper>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	89fb      	ldrh	r3, [r7, #14]
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d008      	beq.n	8008e74 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8008e62:	2300      	movs	r3, #0
 8008e64:	e01f      	b.n	8008ea6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8008e66:	89bb      	ldrh	r3, [r7, #12]
 8008e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d001      	beq.n	8008e74 <cmp_lfn+0x9c>
 8008e70:	2300      	movs	r3, #0
 8008e72:	e018      	b.n	8008ea6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	3301      	adds	r3, #1
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b0c      	cmp	r3, #12
 8008e7e:	d9bf      	bls.n	8008e00 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <cmp_lfn+0xcc>
 8008e8c:	89fb      	ldrh	r3, [r7, #14]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d008      	beq.n	8008ea4 <cmp_lfn+0xcc>
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	4413      	add	r3, r2
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <cmp_lfn+0xcc>
		return 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e000      	b.n	8008ea6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8008ea4:	2301      	movs	r3, #1
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	0800cd34 	.word	0x0800cd34

08008eb4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b089      	sub	sp, #36	; 0x24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	71fb      	strb	r3, [r7, #7]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	330d      	adds	r3, #13
 8008ece:	79ba      	ldrb	r2, [r7, #6]
 8008ed0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	330b      	adds	r3, #11
 8008ed6:	220f      	movs	r2, #15
 8008ed8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	330c      	adds	r3, #12
 8008ede:	2200      	movs	r2, #0
 8008ee0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	331a      	adds	r3, #26
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	331b      	adds	r3, #27
 8008eee:	2200      	movs	r2, #0
 8008ef0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	1e5a      	subs	r2, r3, #1
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	82fb      	strh	r3, [r7, #22]
 8008f06:	2300      	movs	r3, #0
 8008f08:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008f0a:	8afb      	ldrh	r3, [r7, #22]
 8008f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d007      	beq.n	8008f24 <fit_lfn+0x70>
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	61fa      	str	r2, [r7, #28]
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008f24:	4a1d      	ldr	r2, [pc, #116]	; (8008f9c <fit_lfn+0xe8>)
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	4413      	add	r3, r2
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4413      	add	r3, r2
 8008f32:	8afa      	ldrh	r2, [r7, #22]
 8008f34:	b2d2      	uxtb	r2, r2
 8008f36:	701a      	strb	r2, [r3, #0]
 8008f38:	8afb      	ldrh	r3, [r7, #22]
 8008f3a:	0a1b      	lsrs	r3, r3, #8
 8008f3c:	b299      	uxth	r1, r3
 8008f3e:	4a17      	ldr	r2, [pc, #92]	; (8008f9c <fit_lfn+0xe8>)
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	4413      	add	r3, r2
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	3301      	adds	r3, #1
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	b2ca      	uxtb	r2, r1
 8008f4e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8008f50:	8afb      	ldrh	r3, [r7, #22]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d102      	bne.n	8008f5c <fit_lfn+0xa8>
 8008f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f5a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	61bb      	str	r3, [r7, #24]
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	2b0c      	cmp	r3, #12
 8008f66:	d9d0      	bls.n	8008f0a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8008f68:	8afb      	ldrh	r3, [r7, #22]
 8008f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d006      	beq.n	8008f80 <fit_lfn+0xcc>
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <fit_lfn+0xd4>
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f86:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	79fa      	ldrb	r2, [r7, #7]
 8008f8c:	701a      	strb	r2, [r3, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	3724      	adds	r7, #36	; 0x24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	0800cd34 	.word	0x0800cd34

08008fa0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08c      	sub	sp, #48	; 0x30
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008fae:	220b      	movs	r2, #11
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7fe fca2 	bl	80078fc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b05      	cmp	r3, #5
 8008fbc:	d92b      	bls.n	8009016 <gen_numname+0x76>
		sr = seq;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008fc2:	e022      	b.n	800900a <gen_numname+0x6a>
			wc = *lfn++;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	1c9a      	adds	r2, r3, #2
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008fce:	2300      	movs	r3, #0
 8008fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fd2:	e017      	b.n	8009004 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	005a      	lsls	r2, r3, #1
 8008fd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	4413      	add	r3, r2
 8008fe0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008fe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <gen_numname+0x5e>
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008ff8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008ffc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	3301      	adds	r3, #1
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	2b0f      	cmp	r3, #15
 8009008:	d9e4      	bls.n	8008fd4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1d8      	bne.n	8008fc4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009016:	2307      	movs	r3, #7
 8009018:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	b2db      	uxtb	r3, r3
 8009024:	3330      	adds	r3, #48	; 0x30
 8009026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800902a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800902e:	2b39      	cmp	r3, #57	; 0x39
 8009030:	d904      	bls.n	800903c <gen_numname+0x9c>
 8009032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009036:	3307      	adds	r3, #7
 8009038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	1e5a      	subs	r2, r3, #1
 8009040:	62ba      	str	r2, [r7, #40]	; 0x28
 8009042:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009046:	4413      	add	r3, r2
 8009048:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800904c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	091b      	lsrs	r3, r3, #4
 8009054:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1de      	bne.n	800901a <gen_numname+0x7a>
	ns[i] = '~';
 800905c:	f107 0214 	add.w	r2, r7, #20
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	4413      	add	r3, r2
 8009064:	227e      	movs	r2, #126	; 0x7e
 8009066:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009068:	2300      	movs	r3, #0
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
 800906c:	e002      	b.n	8009074 <gen_numname+0xd4>
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	3301      	adds	r3, #1
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
 8009074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	429a      	cmp	r2, r3
 800907a:	d205      	bcs.n	8009088 <gen_numname+0xe8>
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	4413      	add	r3, r2
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b20      	cmp	r3, #32
 8009086:	d1f2      	bne.n	800906e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	2b07      	cmp	r3, #7
 800908c:	d808      	bhi.n	80090a0 <gen_numname+0x100>
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	62ba      	str	r2, [r7, #40]	; 0x28
 8009094:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009098:	4413      	add	r3, r2
 800909a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800909e:	e000      	b.n	80090a2 <gen_numname+0x102>
 80090a0:	2120      	movs	r1, #32
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	627a      	str	r2, [r7, #36]	; 0x24
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4413      	add	r3, r2
 80090ac:	460a      	mov	r2, r1
 80090ae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	2b07      	cmp	r3, #7
 80090b4:	d9e8      	bls.n	8009088 <gen_numname+0xe8>
}
 80090b6:	bf00      	nop
 80090b8:	bf00      	nop
 80090ba:	3730      	adds	r7, #48	; 0x30
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80090cc:	230b      	movs	r3, #11
 80090ce:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	0852      	lsrs	r2, r2, #1
 80090d6:	01db      	lsls	r3, r3, #7
 80090d8:	4313      	orrs	r3, r2
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	1c59      	adds	r1, r3, #1
 80090e0:	6079      	str	r1, [r7, #4]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	4413      	add	r3, r2
 80090e6:	73fb      	strb	r3, [r7, #15]
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	60bb      	str	r3, [r7, #8]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1ed      	bne.n	80090d0 <sum_sfn+0x10>
	return sum;
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800910a:	2100      	movs	r1, #0
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff fb7e 	bl	800880e <dir_sdi>
 8009112:	4603      	mov	r3, r0
 8009114:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <dir_find+0x1e>
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	e0c1      	b.n	80092a4 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009120:	23ff      	movs	r3, #255	; 0xff
 8009122:	753b      	strb	r3, [r7, #20]
 8009124:	7d3b      	ldrb	r3, [r7, #20]
 8009126:	757b      	strb	r3, [r7, #21]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800912e:	3304      	adds	r3, #4
 8009130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009134:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009144:	3310      	adds	r3, #16
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f7fe fe72 	bl	8007e34 <move_window>
 8009150:	4603      	mov	r3, r0
 8009152:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009154:	7dfb      	ldrb	r3, [r7, #23]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f040 809e 	bne.w	8009298 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009162:	3314      	adds	r3, #20
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800916e:	7dbb      	ldrb	r3, [r7, #22]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d102      	bne.n	800917a <dir_find+0x78>
 8009174:	2304      	movs	r3, #4
 8009176:	75fb      	strb	r3, [r7, #23]
 8009178:	e093      	b.n	80092a2 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	330b      	adds	r3, #11
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009184:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009186:	7dbb      	ldrb	r3, [r7, #22]
 8009188:	2be5      	cmp	r3, #229	; 0xe5
 800918a:	d007      	beq.n	800919c <dir_find+0x9a>
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	f003 0308 	and.w	r3, r3, #8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00c      	beq.n	80091b0 <dir_find+0xae>
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	2b0f      	cmp	r3, #15
 800919a:	d009      	beq.n	80091b0 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800919c:	23ff      	movs	r3, #255	; 0xff
 800919e:	757b      	strb	r3, [r7, #21]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80091a6:	3304      	adds	r3, #4
 80091a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091ac:	801a      	strh	r2, [r3, #0]
 80091ae:	e068      	b.n	8009282 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b0f      	cmp	r3, #15
 80091b4:	d139      	bne.n	800922a <dir_find+0x128>
				if (dp->lfn) {
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d05f      	beq.n	8009282 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80091c2:	7dbb      	ldrb	r3, [r7, #22]
 80091c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d012      	beq.n	80091f2 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	7b5b      	ldrb	r3, [r3, #13]
 80091d0:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80091d2:	7dbb      	ldrb	r3, [r7, #22]
 80091d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d8:	75bb      	strb	r3, [r7, #22]
 80091da:	7dbb      	ldrb	r3, [r7, #22]
 80091dc:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e4:	3306      	adds	r3, #6
 80091e6:	881a      	ldrh	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80091ee:	3304      	adds	r3, #4
 80091f0:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80091f2:	7dba      	ldrb	r2, [r7, #22]
 80091f4:	7d7b      	ldrb	r3, [r7, #21]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d114      	bne.n	8009224 <dir_find+0x122>
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	330d      	adds	r3, #13
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	7d3a      	ldrb	r2, [r7, #20]
 8009202:	429a      	cmp	r2, r3
 8009204:	d10e      	bne.n	8009224 <dir_find+0x122>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6939      	ldr	r1, [r7, #16]
 8009210:	4618      	mov	r0, r3
 8009212:	f7ff fde1 	bl	8008dd8 <cmp_lfn>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <dir_find+0x122>
 800921c:	7d7b      	ldrb	r3, [r7, #21]
 800921e:	3b01      	subs	r3, #1
 8009220:	b2db      	uxtb	r3, r3
 8009222:	e000      	b.n	8009226 <dir_find+0x124>
 8009224:	23ff      	movs	r3, #255	; 0xff
 8009226:	757b      	strb	r3, [r7, #21]
 8009228:	e02b      	b.n	8009282 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800922a:	7d7b      	ldrb	r3, [r7, #21]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d107      	bne.n	8009240 <dir_find+0x13e>
 8009230:	6938      	ldr	r0, [r7, #16]
 8009232:	f7ff ff45 	bl	80090c0 <sum_sfn>
 8009236:	4603      	mov	r3, r0
 8009238:	461a      	mov	r2, r3
 800923a:	7d3b      	ldrb	r3, [r7, #20]
 800923c:	4293      	cmp	r3, r2
 800923e:	d02d      	beq.n	800929c <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009246:	3318      	adds	r3, #24
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	330b      	adds	r3, #11
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10c      	bne.n	8009270 <dir_find+0x16e>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925c:	3318      	adds	r3, #24
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	220b      	movs	r2, #11
 8009262:	4619      	mov	r1, r3
 8009264:	6938      	ldr	r0, [r7, #16]
 8009266:	f7fe fb83 	bl	8007970 <mem_cmp>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d017      	beq.n	80092a0 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009270:	23ff      	movs	r3, #255	; 0xff
 8009272:	757b      	strb	r3, [r7, #21]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800927a:	3304      	adds	r3, #4
 800927c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009280:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8009282:	2100      	movs	r1, #0
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff fb9d 	bl	80089c4 <dir_next>
 800928a:	4603      	mov	r3, r0
 800928c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f43f af50 	beq.w	8009136 <dir_find+0x34>
 8009296:	e004      	b.n	80092a2 <dir_find+0x1a0>
		if (res != FR_OK) break;
 8009298:	bf00      	nop
 800929a:	e002      	b.n	80092a2 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800929c:	bf00      	nop
 800929e:	e000      	b.n	80092a2 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80092a0:	bf00      	nop

	return res;
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08c      	sub	sp, #48	; 0x30
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ba:	3318      	adds	r3, #24
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	623b      	str	r3, [r7, #32]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80092ca:	f107 030c 	add.w	r3, r7, #12
 80092ce:	220c      	movs	r2, #12
 80092d0:	6a39      	ldr	r1, [r7, #32]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fb12 	bl	80078fc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d039      	beq.n	8009356 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	330b      	adds	r3, #11
 80092e6:	2200      	movs	r2, #0
 80092e8:	701a      	strb	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 80092f4:	2301      	movs	r3, #1
 80092f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80092f8:	e013      	b.n	8009322 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80092fa:	f107 010c 	add.w	r1, r7, #12
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	69fa      	ldr	r2, [r7, #28]
 8009302:	6a38      	ldr	r0, [r7, #32]
 8009304:	f7ff fe4c 	bl	8008fa0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff fefa 	bl	8009102 <dir_find>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009318:	2b00      	cmp	r3, #0
 800931a:	d106      	bne.n	800932a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	3301      	adds	r3, #1
 8009320:	62bb      	str	r3, [r7, #40]	; 0x28
 8009322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009324:	2b63      	cmp	r3, #99	; 0x63
 8009326:	d9e8      	bls.n	80092fa <dir_register+0x4e>
 8009328:	e000      	b.n	800932c <dir_register+0x80>
			if (res != FR_OK) break;
 800932a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	2b64      	cmp	r3, #100	; 0x64
 8009330:	d101      	bne.n	8009336 <dir_register+0x8a>
 8009332:	2307      	movs	r3, #7
 8009334:	e0e3      	b.n	80094fe <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800933a:	2b04      	cmp	r3, #4
 800933c:	d002      	beq.n	8009344 <dir_register+0x98>
 800933e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009342:	e0dc      	b.n	80094fe <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	330b      	adds	r3, #11
 8009348:	7dfa      	ldrb	r2, [r7, #23]
 800934a:	701a      	strb	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009352:	69fa      	ldr	r2, [r7, #28]
 8009354:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d014      	beq.n	800938a <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8009360:	2300      	movs	r3, #0
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
 8009364:	e002      	b.n	800936c <dir_register+0xc0>
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	3301      	adds	r3, #1
 800936a:	62bb      	str	r3, [r7, #40]	; 0x28
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	005b      	lsls	r3, r3, #1
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	4413      	add	r3, r2
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1f5      	bne.n	8009366 <dir_register+0xba>
		nent = (n + 25) / 13;
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	3319      	adds	r3, #25
 800937e:	4a62      	ldr	r2, [pc, #392]	; (8009508 <dir_register+0x25c>)
 8009380:	fba2 2303 	umull	r2, r3, r2, r3
 8009384:	089b      	lsrs	r3, r3, #2
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
 8009388:	e001      	b.n	800938e <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800938a:	2301      	movs	r3, #1
 800938c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800938e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff fc79 	bl	8008c88 <dir_alloc>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800939c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d160      	bne.n	8009466 <dir_register+0x1ba>
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	3b01      	subs	r3, #1
 80093a8:	627b      	str	r3, [r7, #36]	; 0x24
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d05a      	beq.n	8009466 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b6:	3306      	adds	r3, #6
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7ff fa23 	bl	800880e <dir_sdi>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80093ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d147      	bne.n	8009466 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093dc:	3318      	adds	r3, #24
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fe6d 	bl	80090c0 <sum_sfn>
 80093e6:	4603      	mov	r3, r0
 80093e8:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f8:	3310      	adds	r3, #16
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4619      	mov	r1, r3
 80093fe:	4610      	mov	r0, r2
 8009400:	f7fe fd18 	bl	8007e34 <move_window>
 8009404:	4603      	mov	r3, r0
 8009406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800940a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800940e:	2b00      	cmp	r3, #0
 8009410:	d128      	bne.n	8009464 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009420:	3314      	adds	r3, #20
 8009422:	6819      	ldr	r1, [r3, #0]
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	b2da      	uxtb	r2, r3
 8009428:	7efb      	ldrb	r3, [r7, #27]
 800942a:	f7ff fd43 	bl	8008eb4 <fit_lfn>
				dp->fs->wflag = 1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943a:	3304      	adds	r3, #4
 800943c:	2201      	movs	r2, #1
 800943e:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8009440:	2100      	movs	r1, #0
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff fabe 	bl	80089c4 <dir_next>
 8009448:	4603      	mov	r3, r0
 800944a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800944e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009452:	2b00      	cmp	r3, #0
 8009454:	d107      	bne.n	8009466 <dir_register+0x1ba>
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	3b01      	subs	r3, #1
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1c3      	bne.n	80093ea <dir_register+0x13e>
 8009462:	e000      	b.n	8009466 <dir_register+0x1ba>
				if (res != FR_OK) break;
 8009464:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800946a:	2b00      	cmp	r3, #0
 800946c:	d145      	bne.n	80094fa <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800947c:	3310      	adds	r3, #16
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f7fe fcd6 	bl	8007e34 <move_window>
 8009488:	4603      	mov	r3, r0
 800948a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800948e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009492:	2b00      	cmp	r3, #0
 8009494:	d131      	bne.n	80094fa <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800949c:	3314      	adds	r3, #20
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2220      	movs	r2, #32
 80094a2:	2100      	movs	r1, #0
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe fa48 	bl	800793a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b0:	3314      	adds	r3, #20
 80094b2:	6818      	ldr	r0, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ba:	3318      	adds	r3, #24
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	220b      	movs	r2, #11
 80094c0:	4619      	mov	r1, r3
 80094c2:	f7fe fa1b 	bl	80078fc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094cc:	3318      	adds	r3, #24
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	330b      	adds	r3, #11
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094da:	3314      	adds	r3, #20
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	330c      	adds	r3, #12
 80094e0:	f002 0218 	and.w	r2, r2, #24
 80094e4:	b2d2      	uxtb	r2, r2
 80094e6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f4:	3304      	adds	r3, #4
 80094f6:	2201      	movs	r2, #1
 80094f8:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 80094fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3730      	adds	r7, #48	; 0x30
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	4ec4ec4f 	.word	0x4ec4ec4f

0800950c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	; 0x28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	613b      	str	r3, [r7, #16]
 800951c:	e002      	b.n	8009524 <create_name+0x18>
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	3301      	adds	r3, #1
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b2f      	cmp	r3, #47	; 0x2f
 800952a:	d0f8      	beq.n	800951e <create_name+0x12>
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b5c      	cmp	r3, #92	; 0x5c
 8009532:	d0f4      	beq.n	800951e <create_name+0x12>
	lfn = dp->lfn;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	61ba      	str	r2, [r7, #24]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	4413      	add	r3, r2
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8009554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009556:	2b1f      	cmp	r3, #31
 8009558:	d92f      	bls.n	80095ba <create_name+0xae>
 800955a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800955c:	2b2f      	cmp	r3, #47	; 0x2f
 800955e:	d02c      	beq.n	80095ba <create_name+0xae>
 8009560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009562:	2b5c      	cmp	r3, #92	; 0x5c
 8009564:	d029      	beq.n	80095ba <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2bfe      	cmp	r3, #254	; 0xfe
 800956a:	d901      	bls.n	8009570 <create_name+0x64>
			return FR_INVALID_NAME;
 800956c:	2306      	movs	r3, #6
 800956e:	e18b      	b.n	8009888 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009572:	b2db      	uxtb	r3, r3
 8009574:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009578:	2101      	movs	r1, #1
 800957a:	4618      	mov	r0, r3
 800957c:	f002 fc8a 	bl	800be94 <ff_convert>
 8009580:	4603      	mov	r3, r0
 8009582:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <create_name+0x82>
 800958a:	2306      	movs	r3, #6
 800958c:	e17c      	b.n	8009888 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800958e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009590:	2b7f      	cmp	r3, #127	; 0x7f
 8009592:	d809      	bhi.n	80095a8 <create_name+0x9c>
 8009594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009596:	4619      	mov	r1, r3
 8009598:	488f      	ldr	r0, [pc, #572]	; (80097d8 <create_name+0x2cc>)
 800959a:	f7fe fa10 	bl	80079be <chk_chr>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <create_name+0x9c>
			return FR_INVALID_NAME;
 80095a4:	2306      	movs	r3, #6
 80095a6:	e16f      	b.n	8009888 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	617a      	str	r2, [r7, #20]
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	4413      	add	r3, r2
 80095b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80095b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80095b8:	e7c5      	b.n	8009546 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	441a      	add	r2, r3
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80095c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c6:	2b1f      	cmp	r3, #31
 80095c8:	d801      	bhi.n	80095ce <create_name+0xc2>
 80095ca:	2304      	movs	r3, #4
 80095cc:	e000      	b.n	80095d0 <create_name+0xc4>
 80095ce:	2300      	movs	r3, #0
 80095d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80095d4:	e011      	b.n	80095fa <create_name+0xee>
		w = lfn[di - 1];
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80095dc:	3b01      	subs	r3, #1
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	4413      	add	r3, r2
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80095e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d002      	beq.n	80095f4 <create_name+0xe8>
 80095ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095f0:	2b2e      	cmp	r3, #46	; 0x2e
 80095f2:	d106      	bne.n	8009602 <create_name+0xf6>
		di--;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1ea      	bne.n	80095d6 <create_name+0xca>
 8009600:	e000      	b.n	8009604 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8009602:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <create_name+0x102>
 800960a:	2306      	movs	r3, #6
 800960c:	e13c      	b.n	8009888 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	4413      	add	r3, r2
 8009616:	2200      	movs	r2, #0
 8009618:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009620:	3318      	adds	r3, #24
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	220b      	movs	r2, #11
 8009626:	2120      	movs	r1, #32
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe f986 	bl	800793a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800962e:	2300      	movs	r3, #0
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	e002      	b.n	800963a <create_name+0x12e>
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	3301      	adds	r3, #1
 8009638:	61bb      	str	r3, [r7, #24]
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	005b      	lsls	r3, r3, #1
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	2b20      	cmp	r3, #32
 8009646:	d0f5      	beq.n	8009634 <create_name+0x128>
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	2b2e      	cmp	r3, #46	; 0x2e
 8009654:	d0ee      	beq.n	8009634 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d009      	beq.n	8009670 <create_name+0x164>
 800965c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009660:	f043 0303 	orr.w	r3, r3, #3
 8009664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009668:	e002      	b.n	8009670 <create_name+0x164>
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	3b01      	subs	r3, #1
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <create_name+0x17e>
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800967c:	3b01      	subs	r3, #1
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	2b2e      	cmp	r3, #46	; 0x2e
 8009688:	d1ef      	bne.n	800966a <create_name+0x15e>

	b = i = 0; ni = 8;
 800968a:	2300      	movs	r3, #0
 800968c:	623b      	str	r3, [r7, #32]
 800968e:	2300      	movs	r3, #0
 8009690:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009694:	2308      	movs	r3, #8
 8009696:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	61ba      	str	r2, [r7, #24]
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80096a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8092 	beq.w	80097d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80096b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d006      	beq.n	80096c4 <create_name+0x1b8>
 80096b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096b8:	2b2e      	cmp	r3, #46	; 0x2e
 80096ba:	d10a      	bne.n	80096d2 <create_name+0x1c6>
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d006      	beq.n	80096d2 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c8:	f043 0303 	orr.w	r3, r3, #3
 80096cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096d0:	e07f      	b.n	80097d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80096d2:	6a3a      	ldr	r2, [r7, #32]
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d203      	bcs.n	80096e2 <create_name+0x1d6>
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d123      	bne.n	800972a <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	2b0b      	cmp	r3, #11
 80096e6:	d106      	bne.n	80096f6 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 80096e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ec:	f043 0303 	orr.w	r3, r3, #3
 80096f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096f4:	e077      	b.n	80097e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d005      	beq.n	800970a <create_name+0x1fe>
 80096fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009702:	f043 0303 	orr.w	r3, r3, #3
 8009706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	429a      	cmp	r2, r3
 8009710:	d868      	bhi.n	80097e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	61bb      	str	r3, [r7, #24]
 8009716:	2308      	movs	r3, #8
 8009718:	623b      	str	r3, [r7, #32]
 800971a:	230b      	movs	r3, #11
 800971c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800971e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009728:	e053      	b.n	80097d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800972a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800972c:	2b7f      	cmp	r3, #127	; 0x7f
 800972e:	d914      	bls.n	800975a <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f002 fbad 	bl	800be94 <ff_convert>
 800973a:	4603      	mov	r3, r0
 800973c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800973e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <create_name+0x242>
 8009744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009746:	3b80      	subs	r3, #128	; 0x80
 8009748:	4a24      	ldr	r2, [pc, #144]	; (80097dc <create_name+0x2d0>)
 800974a:	5cd3      	ldrb	r3, [r2, r3]
 800974c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800974e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009752:	f043 0302 	orr.w	r3, r3, #2
 8009756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800975a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	d007      	beq.n	8009770 <create_name+0x264>
 8009760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009762:	4619      	mov	r1, r3
 8009764:	481e      	ldr	r0, [pc, #120]	; (80097e0 <create_name+0x2d4>)
 8009766:	f7fe f92a 	bl	80079be <chk_chr>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009770:	235f      	movs	r3, #95	; 0x5f
 8009772:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009778:	f043 0303 	orr.w	r3, r3, #3
 800977c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009780:	e01b      	b.n	80097ba <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009784:	2b40      	cmp	r3, #64	; 0x40
 8009786:	d909      	bls.n	800979c <create_name+0x290>
 8009788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800978a:	2b5a      	cmp	r3, #90	; 0x5a
 800978c:	d806      	bhi.n	800979c <create_name+0x290>
					b |= 2;
 800978e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009792:	f043 0302 	orr.w	r3, r3, #2
 8009796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800979a:	e00e      	b.n	80097ba <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800979c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800979e:	2b60      	cmp	r3, #96	; 0x60
 80097a0:	d90b      	bls.n	80097ba <create_name+0x2ae>
 80097a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097a4:	2b7a      	cmp	r3, #122	; 0x7a
 80097a6:	d808      	bhi.n	80097ba <create_name+0x2ae>
						b |= 1; w -= 0x20;
 80097a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097ac:	f043 0301 	orr.w	r3, r3, #1
 80097b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80097b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097b6:	3b20      	subs	r3, #32
 80097b8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c0:	3318      	adds	r3, #24
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	6239      	str	r1, [r7, #32]
 80097ca:	4413      	add	r3, r2
 80097cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80097ce:	b2d2      	uxtb	r2, r2
 80097d0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80097d2:	e761      	b.n	8009698 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 80097d4:	bf00      	nop
 80097d6:	e006      	b.n	80097e6 <create_name+0x2da>
 80097d8:	0800cc34 	.word	0x0800cc34
 80097dc:	0800ccb4 	.word	0x0800ccb4
 80097e0:	0800cc40 	.word	0x0800cc40
			if (si > di) break;			/* No extension */
 80097e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ec:	3318      	adds	r3, #24
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2be5      	cmp	r3, #229	; 0xe5
 80097f4:	d106      	bne.n	8009804 <create_name+0x2f8>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097fc:	3318      	adds	r3, #24
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2205      	movs	r2, #5
 8009802:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	2b08      	cmp	r3, #8
 8009808:	d104      	bne.n	8009814 <create_name+0x308>
 800980a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8009814:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009818:	f003 030c 	and.w	r3, r3, #12
 800981c:	2b0c      	cmp	r3, #12
 800981e:	d005      	beq.n	800982c <create_name+0x320>
 8009820:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009824:	f003 0303 	and.w	r3, r3, #3
 8009828:	2b03      	cmp	r3, #3
 800982a:	d105      	bne.n	8009838 <create_name+0x32c>
		cf |= NS_LFN;
 800982c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009830:	f043 0302 	orr.w	r3, r3, #2
 8009834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800983c:	f003 0302 	and.w	r3, r3, #2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d117      	bne.n	8009874 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009844:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	2b01      	cmp	r3, #1
 800984e:	d105      	bne.n	800985c <create_name+0x350>
 8009850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009854:	f043 0310 	orr.w	r3, r3, #16
 8009858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800985c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009860:	f003 030c 	and.w	r3, r3, #12
 8009864:	2b04      	cmp	r3, #4
 8009866:	d105      	bne.n	8009874 <create_name+0x368>
 8009868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800986c:	f043 0308 	orr.w	r3, r3, #8
 8009870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987a:	3318      	adds	r3, #24
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	330b      	adds	r3, #11
 8009880:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009884:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009886:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8009888:	4618      	mov	r0, r3
 800988a:	3728      	adds	r7, #40	; 0x28
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b2f      	cmp	r3, #47	; 0x2f
 80098a0:	d003      	beq.n	80098aa <follow_path+0x1a>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b5c      	cmp	r3, #92	; 0x5c
 80098a8:	d102      	bne.n	80098b0 <follow_path+0x20>
		path++;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	3301      	adds	r3, #1
 80098ae:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b6:	3308      	adds	r3, #8
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b1f      	cmp	r3, #31
 80098c2:	d80c      	bhi.n	80098de <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80098c4:	2100      	movs	r1, #0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fe ffa1 	bl	800880e <dir_sdi>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d6:	3314      	adds	r3, #20
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e04c      	b.n	8009978 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80098de:	463b      	mov	r3, r7
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff fe12 	bl	800950c <create_name>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d13d      	bne.n	800996e <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff fc05 	bl	8009102 <dir_find>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009902:	3318      	adds	r3, #24
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	7adb      	ldrb	r3, [r3, #11]
 8009908:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00a      	beq.n	8009926 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	2b04      	cmp	r3, #4
 8009914:	d12d      	bne.n	8009972 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d128      	bne.n	8009972 <follow_path+0xe2>
 8009920:	2305      	movs	r3, #5
 8009922:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8009924:	e025      	b.n	8009972 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009926:	7bbb      	ldrb	r3, [r7, #14]
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d122      	bne.n	8009976 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009936:	3314      	adds	r3, #20
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	330b      	adds	r3, #11
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	f003 0310 	and.w	r3, r3, #16
 8009946:	2b00      	cmp	r3, #0
 8009948:	d102      	bne.n	8009950 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800994a:	2305      	movs	r3, #5
 800994c:	73fb      	strb	r3, [r7, #15]
 800994e:	e013      	b.n	8009978 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff f9e5 	bl	8008d2a <ld_clust>
 8009960:	4602      	mov	r2, r0
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009968:	3308      	adds	r3, #8
 800996a:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800996c:	e7b7      	b.n	80098de <follow_path+0x4e>
			if (res != FR_OK) break;
 800996e:	bf00      	nop
 8009970:	e002      	b.n	8009978 <follow_path+0xe8>
				break;
 8009972:	bf00      	nop
 8009974:	e000      	b.n	8009978 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009976:	bf00      	nop
		}
	}

	return res;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009982:	b480      	push	{r7}
 8009984:	b087      	sub	sp, #28
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800998a:	f04f 33ff 	mov.w	r3, #4294967295
 800998e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d031      	beq.n	80099fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	e002      	b.n	80099a6 <get_ldnumber+0x24>
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	3301      	adds	r3, #1
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b1f      	cmp	r3, #31
 80099ac:	d903      	bls.n	80099b6 <get_ldnumber+0x34>
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b3a      	cmp	r3, #58	; 0x3a
 80099b4:	d1f4      	bne.n	80099a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	2b3a      	cmp	r3, #58	; 0x3a
 80099bc:	d11c      	bne.n	80099f8 <get_ldnumber+0x76>
			tp = *path;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	60fa      	str	r2, [r7, #12]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	3b30      	subs	r3, #48	; 0x30
 80099ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b09      	cmp	r3, #9
 80099d4:	d80e      	bhi.n	80099f4 <get_ldnumber+0x72>
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d10a      	bne.n	80099f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d107      	bne.n	80099f4 <get_ldnumber+0x72>
					vol = (int)i;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	3301      	adds	r3, #1
 80099ec:	617b      	str	r3, [r7, #20]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	e002      	b.n	80099fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80099f8:	2300      	movs	r3, #0
 80099fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80099fc:	693b      	ldr	r3, [r7, #16]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
	...

08009a0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	2200      	movs	r2, #0
 8009a20:	701a      	strb	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009a28:	330c      	adds	r3, #12
 8009a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2e:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7fe f9fe 	bl	8007e34 <move_window>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <check_fs+0x36>
		return 3;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e04a      	b.n	8009ad8 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a48:	3301      	adds	r3, #1
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	021b      	lsls	r3, r3, #8
 8009a4e:	b21a      	sxth	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009a56:	b21b      	sxth	r3, r3
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	b21b      	sxth	r3, r3
 8009a5c:	4a20      	ldr	r2, [pc, #128]	; (8009ae0 <check_fs+0xd4>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d001      	beq.n	8009a66 <check_fs+0x5a>
		return 2;
 8009a62:	2302      	movs	r3, #2
 8009a64:	e038      	b.n	8009ad8 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	3336      	adds	r3, #54	; 0x36
 8009a6a:	3303      	adds	r3, #3
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	061a      	lsls	r2, r3, #24
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3336      	adds	r3, #54	; 0x36
 8009a74:	3302      	adds	r3, #2
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	041b      	lsls	r3, r3, #16
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	3236      	adds	r2, #54	; 0x36
 8009a80:	3201      	adds	r2, #1
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	0212      	lsls	r2, r2, #8
 8009a86:	4313      	orrs	r3, r2
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a94:	4a13      	ldr	r2, [pc, #76]	; (8009ae4 <check_fs+0xd8>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d101      	bne.n	8009a9e <check_fs+0x92>
		return 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e01c      	b.n	8009ad8 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3352      	adds	r3, #82	; 0x52
 8009aa2:	3303      	adds	r3, #3
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	061a      	lsls	r2, r3, #24
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3352      	adds	r3, #82	; 0x52
 8009aac:	3302      	adds	r3, #2
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	041b      	lsls	r3, r3, #16
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	3252      	adds	r2, #82	; 0x52
 8009ab8:	3201      	adds	r2, #1
 8009aba:	7812      	ldrb	r2, [r2, #0]
 8009abc:	0212      	lsls	r2, r2, #8
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009acc:	4a05      	ldr	r2, [pc, #20]	; (8009ae4 <check_fs+0xd8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d101      	bne.n	8009ad6 <check_fs+0xca>
		return 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	e000      	b.n	8009ad8 <check_fs+0xcc>

	return 1;
 8009ad6:	2301      	movs	r3, #1
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	ffffaa55 	.word	0xffffaa55
 8009ae4:	00544146 	.word	0x00544146

08009ae8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b096      	sub	sp, #88	; 0x58
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4613      	mov	r3, r2
 8009af4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009afc:	68b8      	ldr	r0, [r7, #8]
 8009afe:	f7ff ff40 	bl	8009982 <get_ldnumber>
 8009b02:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	da01      	bge.n	8009b0e <find_volume+0x26>
 8009b0a:	230b      	movs	r3, #11
 8009b0c:	e33c      	b.n	800a188 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009b0e:	4ab3      	ldr	r2, [pc, #716]	; (8009ddc <find_volume+0x2f4>)
 8009b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b16:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <find_volume+0x3a>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	e332      	b.n	800a188 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b26:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d01d      	beq.n	8009b70 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fd fe3e 	bl	80077c0 <disk_status>
 8009b44:	4603      	mov	r3, r0
 8009b46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10c      	bne.n	8009b70 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009b56:	79fb      	ldrb	r3, [r7, #7]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d007      	beq.n	8009b6c <find_volume+0x84>
 8009b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8009b68:	230a      	movs	r3, #10
 8009b6a:	e30d      	b.n	800a188 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e30b      	b.n	800a188 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b76:	2200      	movs	r2, #0
 8009b78:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b84:	3301      	adds	r3, #1
 8009b86:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b8e:	3301      	adds	r3, #1
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fd fe2e 	bl	80077f4 <disk_initialize>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009b9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009baa:	2303      	movs	r3, #3
 8009bac:	e2ec      	b.n	800a188 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009bae:	79fb      	ldrb	r3, [r7, #7]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d007      	beq.n	8009bc4 <find_volume+0xdc>
 8009bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bb8:	f003 0304 	and.w	r3, r3, #4
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8009bc0:	230a      	movs	r3, #10
 8009bc2:	e2e1      	b.n	800a188 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bca:	3301      	adds	r3, #1
 8009bcc:	7818      	ldrb	r0, [r3, #0]
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd4:	330a      	adds	r3, #10
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	2102      	movs	r1, #2
 8009bda:	f7fd fe71 	bl	80078c0 <disk_ioctl>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10f      	bne.n	8009c04 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8009be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bea:	330a      	adds	r3, #10
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf2:	d307      	bcc.n	8009c04 <find_volume+0x11c>
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfa:	330a      	adds	r3, #10
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c02:	d901      	bls.n	8009c08 <find_volume+0x120>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e2bf      	b.n	800a188 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009c0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c10:	f7ff fefc 	bl	8009a0c <check_fs>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d155      	bne.n	8009cce <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009c22:	2300      	movs	r3, #0
 8009c24:	643b      	str	r3, [r7, #64]	; 0x40
 8009c26:	e029      	b.n	8009c7c <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009c32:	4413      	add	r3, r2
 8009c34:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	3304      	adds	r3, #4
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d012      	beq.n	8009c66 <find_volume+0x17e>
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	330b      	adds	r3, #11
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	061a      	lsls	r2, r3, #24
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	330a      	adds	r3, #10
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	041b      	lsls	r3, r3, #16
 8009c50:	4313      	orrs	r3, r2
 8009c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c54:	3209      	adds	r2, #9
 8009c56:	7812      	ldrb	r2, [r2, #0]
 8009c58:	0212      	lsls	r2, r2, #8
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5e:	3208      	adds	r2, #8
 8009c60:	7812      	ldrb	r2, [r2, #0]
 8009c62:	431a      	orrs	r2, r3
 8009c64:	e000      	b.n	8009c68 <find_volume+0x180>
 8009c66:	2200      	movs	r2, #0
 8009c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009c70:	440b      	add	r3, r1
 8009c72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c78:	3301      	adds	r3, #1
 8009c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d9d2      	bls.n	8009c28 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009c82:	2300      	movs	r3, #0
 8009c84:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <find_volume+0x1aa>
 8009c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ca0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <find_volume+0x1cc>
 8009ca8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009caa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009cac:	f7ff feae 	bl	8009a0c <check_fs>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	e000      	b.n	8009cb6 <find_volume+0x1ce>
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009cba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d005      	beq.n	8009cce <find_volume+0x1e6>
 8009cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8009cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d9e1      	bls.n	8009c92 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009cce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d101      	bne.n	8009cda <find_volume+0x1f2>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e256      	b.n	800a188 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009cda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <find_volume+0x1fe>
 8009ce2:	230d      	movs	r3, #13
 8009ce4:	e250      	b.n	800a188 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	7b1b      	ldrb	r3, [r3, #12]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	b21a      	sxth	r2, r3
 8009cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf0:	7adb      	ldrb	r3, [r3, #11]
 8009cf2:	b21b      	sxth	r3, r3
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	b21a      	sxth	r2, r3
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfe:	330a      	adds	r3, #10
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	b21b      	sxth	r3, r3
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d001      	beq.n	8009d0c <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8009d08:	230d      	movs	r3, #13
 8009d0a:	e23d      	b.n	800a188 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	7ddb      	ldrb	r3, [r3, #23]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	b21a      	sxth	r2, r3
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	7d9b      	ldrb	r3, [r3, #22]
 8009d18:	b21b      	sxth	r3, r3
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	b21b      	sxth	r3, r3
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d112      	bne.n	8009d4e <find_volume+0x266>
 8009d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009d2e:	061a      	lsls	r2, r3, #24
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009d36:	041b      	lsls	r3, r3, #16
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d3c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8009d40:	0212      	lsls	r2, r2, #8
 8009d42:	4313      	orrs	r3, r2
 8009d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d46:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d54:	3318      	adds	r3, #24
 8009d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d58:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	7c1a      	ldrb	r2, [r3, #16]
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d64:	3303      	adds	r3, #3
 8009d66:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d6e:	3303      	adds	r3, #3
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d008      	beq.n	8009d88 <find_volume+0x2a0>
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7c:	3303      	adds	r3, #3
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d001      	beq.n	8009d88 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8009d84:	230d      	movs	r3, #13
 8009d86:	e1ff      	b.n	800a188 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8e:	3303      	adds	r3, #3
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d96:	fb02 f303 	mul.w	r3, r2, r3
 8009d9a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	7b5a      	ldrb	r2, [r3, #13]
 8009da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da6:	3302      	adds	r3, #2
 8009da8:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db0:	3302      	adds	r3, #2
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00e      	beq.n	8009dd6 <find_volume+0x2ee>
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	3302      	adds	r3, #2
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dca:	3302      	adds	r3, #2
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8009dd6:	230d      	movs	r3, #13
 8009dd8:	e1d6      	b.n	800a188 <find_volume+0x6a0>
 8009dda:	bf00      	nop
 8009ddc:	200000b8 	.word	0x200000b8

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	7c9b      	ldrb	r3, [r3, #18]
 8009de4:	021b      	lsls	r3, r3, #8
 8009de6:	b21a      	sxth	r2, r3
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	7c5b      	ldrb	r3, [r3, #17]
 8009dec:	b21b      	sxth	r3, r3
 8009dee:	4313      	orrs	r3, r2
 8009df0:	b21b      	sxth	r3, r3
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e04:	3308      	adds	r3, #8
 8009e06:	881a      	ldrh	r2, [r3, #0]
 8009e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0e:	330a      	adds	r3, #10
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e1a:	fb03 f301 	mul.w	r3, r3, r1
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8009e26:	230d      	movs	r3, #13
 8009e28:	e1ae      	b.n	800a188 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2c:	7d1b      	ldrb	r3, [r3, #20]
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	b21a      	sxth	r2, r3
 8009e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e34:	7cdb      	ldrb	r3, [r3, #19]
 8009e36:	b21b      	sxth	r3, r3
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	b21b      	sxth	r3, r3
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d112      	bne.n	8009e6c <find_volume+0x384>
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009e4c:	061a      	lsls	r2, r3, #24
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009e54:	041b      	lsls	r3, r3, #16
 8009e56:	4313      	orrs	r3, r2
 8009e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e5a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8009e5e:	0212      	lsls	r2, r2, #8
 8009e60:	4313      	orrs	r3, r2
 8009e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e64:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	7bdb      	ldrb	r3, [r3, #15]
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	b21a      	sxth	r2, r3
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	7b9b      	ldrb	r3, [r3, #14]
 8009e78:	b21b      	sxth	r3, r3
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	b21b      	sxth	r3, r3
 8009e7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009e80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <find_volume+0x3a2>
 8009e86:	230d      	movs	r3, #13
 8009e88:	e17e      	b.n	800a188 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009e8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8e:	441a      	add	r2, r3
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e96:	3308      	adds	r3, #8
 8009e98:	8819      	ldrh	r1, [r3, #0]
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea0:	330a      	adds	r3, #10
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	095b      	lsrs	r3, r3, #5
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	4413      	add	r3, r2
 8009eb0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d201      	bcs.n	8009ebe <find_volume+0x3d6>
 8009eba:	230d      	movs	r3, #13
 8009ebc:	e164      	b.n	800a188 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	1ad2      	subs	r2, r2, r3
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eca:	3302      	adds	r3, #2
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <find_volume+0x3f6>
 8009eda:	230d      	movs	r3, #13
 8009edc:	e154      	b.n	800a188 <find_volume+0x6a0>
	fmt = FS_FAT12;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d902      	bls.n	8009ef4 <find_volume+0x40c>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d902      	bls.n	8009f04 <find_volume+0x41c>
 8009efe:	2303      	movs	r3, #3
 8009f00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	1c9a      	adds	r2, r3, #2
 8009f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0e:	3314      	adds	r3, #20
 8009f10:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f18:	331c      	adds	r3, #28
 8009f1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f1c:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009f1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f22:	441a      	add	r2, r3
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009f2a:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8009f2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	441a      	add	r2, r3
 8009f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f34:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009f38:	3308      	adds	r3, #8
 8009f3a:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8009f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d127      	bne.n	8009f94 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <find_volume+0x46e>
 8009f52:	230d      	movs	r3, #13
 8009f54:	e118      	b.n	800a188 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f5c:	061a      	lsls	r2, r3, #24
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009f64:	041b      	lsls	r3, r3, #16
 8009f66:	4313      	orrs	r3, r2
 8009f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f6a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009f6e:	0212      	lsls	r2, r2, #8
 8009f70:	4313      	orrs	r3, r2
 8009f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f74:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009f80:	3304      	adds	r3, #4
 8009f82:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8a:	3314      	adds	r3, #20
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	647b      	str	r3, [r7, #68]	; 0x44
 8009f92:	e030      	b.n	8009ff6 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <find_volume+0x4be>
 8009fa2:	230d      	movs	r3, #13
 8009fa4:	e0f0      	b.n	800a188 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb0:	441a      	add	r2, r3
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009fb8:	3304      	adds	r3, #4
 8009fba:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d106      	bne.n	8009fd2 <find_volume+0x4ea>
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fca:	3314      	adds	r3, #20
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	e010      	b.n	8009ff4 <find_volume+0x50c>
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd8:	3314      	adds	r3, #20
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	4413      	add	r3, r2
 8009fe2:	085a      	lsrs	r2, r3, #1
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fea:	3314      	adds	r3, #20
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8009ff4:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffc:	3318      	adds	r3, #24
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a006:	330a      	adds	r3, #10
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	4619      	mov	r1, r3
 800a00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a00e:	440b      	add	r3, r1
 800a010:	1e59      	subs	r1, r3, #1
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a018:	330a      	adds	r3, #10
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a020:	429a      	cmp	r2, r3
 800a022:	d201      	bcs.n	800a028 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800a024:	230d      	movs	r3, #13
 800a026:	e0af      	b.n	800a188 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02e:	3310      	adds	r3, #16
 800a030:	f04f 32ff 	mov.w	r2, #4294967295
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03c:	3310      	adds	r3, #16
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a046:	330c      	adds	r3, #12
 800a048:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a050:	3305      	adds	r3, #5
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a056:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d17d      	bne.n	800a15a <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a064:	021b      	lsls	r3, r3, #8
 800a066:	b21a      	sxth	r2, r3
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a06e:	b21b      	sxth	r3, r3
 800a070:	4313      	orrs	r3, r2
 800a072:	b21b      	sxth	r3, r3
 800a074:	2b01      	cmp	r3, #1
 800a076:	d170      	bne.n	800a15a <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a07a:	3301      	adds	r3, #1
 800a07c:	4619      	mov	r1, r3
 800a07e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a080:	f7fd fed8 	bl	8007e34 <move_window>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d167      	bne.n	800a15a <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a090:	3305      	adds	r3, #5
 800a092:	2200      	movs	r2, #0
 800a094:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a098:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800a09c:	021b      	lsls	r3, r3, #8
 800a09e:	b21a      	sxth	r2, r3
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a0a6:	b21b      	sxth	r3, r3
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	b21b      	sxth	r3, r3
 800a0ac:	4a38      	ldr	r2, [pc, #224]	; (800a190 <find_volume+0x6a8>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d153      	bne.n	800a15a <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	78db      	ldrb	r3, [r3, #3]
 800a0b6:	061a      	lsls	r2, r3, #24
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ba:	789b      	ldrb	r3, [r3, #2]
 800a0bc:	041b      	lsls	r3, r3, #16
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c2:	7852      	ldrb	r2, [r2, #1]
 800a0c4:	0212      	lsls	r2, r2, #8
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ca:	7812      	ldrb	r2, [r2, #0]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	4a31      	ldr	r2, [pc, #196]	; (800a194 <find_volume+0x6ac>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d142      	bne.n	800a15a <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800a0da:	061a      	lsls	r2, r3, #24
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800a0e2:	041b      	lsls	r3, r3, #16
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0e8:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800a0ec:	0212      	lsls	r2, r2, #8
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0f2:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	4a27      	ldr	r2, [pc, #156]	; (800a198 <find_volume+0x6b0>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d12d      	bne.n	800a15a <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800a104:	061a      	lsls	r2, r3, #24
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800a10c:	041b      	lsls	r3, r3, #16
 800a10e:	4313      	orrs	r3, r2
 800a110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a112:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800a116:	0212      	lsls	r2, r2, #8
 800a118:	4313      	orrs	r3, r2
 800a11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a11c:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800a120:	431a      	orrs	r2, r3
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a128:	3310      	adds	r3, #16
 800a12a:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800a132:	061a      	lsls	r2, r3, #24
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800a13a:	041b      	lsls	r3, r3, #16
 800a13c:	4313      	orrs	r3, r2
 800a13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a140:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800a144:	0212      	lsls	r2, r2, #8
 800a146:	4313      	orrs	r3, r2
 800a148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a14a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800a14e:	431a      	orrs	r2, r3
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a156:	330c      	adds	r3, #12
 800a158:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800a15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a160:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a164:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800a166:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <find_volume+0x6b4>)
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	3301      	adds	r3, #1
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <find_volume+0x6b4>)
 800a170:	801a      	strh	r2, [r3, #0]
 800a172:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <find_volume+0x6b4>)
 800a174:	881a      	ldrh	r2, [r3, #0]
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a17c:	3306      	adds	r3, #6
 800a17e:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a182:	f7fd fdd3 	bl	8007d2c <clear_lock>
#endif

	return FR_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3758      	adds	r7, #88	; 0x58
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	ffffaa55 	.word	0xffffaa55
 800a194:	41615252 	.word	0x41615252
 800a198:	61417272 	.word	0x61417272
 800a19c:	200000bc 	.word	0x200000bc

0800a1a0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d02d      	beq.n	800a20e <validate+0x6e>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d027      	beq.n	800a20e <validate+0x6e>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01e      	beq.n	800a20e <validate+0x6e>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1dc:	3306      	adds	r3, #6
 800a1de:	881a      	ldrh	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d10f      	bne.n	800a20e <validate+0x6e>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fd fade 	bl	80077c0 <disk_status>
 800a204:	4603      	mov	r3, r0
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <validate+0x72>
		return FR_INVALID_OBJECT;
 800a20e:	2309      	movs	r3, #9
 800a210:	e000      	b.n	800a214 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a22e:	f107 0310 	add.w	r3, r7, #16
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fba5 	bl	8009982 <get_ldnumber>
 800a238:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	da01      	bge.n	800a244 <f_mount+0x28>
 800a240:	230b      	movs	r3, #11
 800a242:	e02f      	b.n	800a2a4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a244:	4a19      	ldr	r2, [pc, #100]	; (800a2ac <f_mount+0x90>)
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a24c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d007      	beq.n	800a264 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800a254:	69b8      	ldr	r0, [r7, #24]
 800a256:	f7fd fd69 	bl	8007d2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d004      	beq.n	800a274 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	490d      	ldr	r1, [pc, #52]	; (800a2ac <f_mount+0x90>)
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <f_mount+0x6e>
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d001      	beq.n	800a28e <f_mount+0x72>
 800a28a:	2300      	movs	r3, #0
 800a28c:	e00a      	b.n	800a2a4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a28e:	f107 0108 	add.w	r1, r7, #8
 800a292:	f107 030c 	add.w	r3, r7, #12
 800a296:	2200      	movs	r2, #0
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff fc25 	bl	8009ae8 <find_volume>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3720      	adds	r7, #32
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	200000b8 	.word	0x200000b8

0800a2b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	f107 0318 	add.w	r3, r7, #24
 800a2be:	3b0c      	subs	r3, #12
 800a2c0:	6018      	str	r0, [r3, #0]
 800a2c2:	f107 0318 	add.w	r3, r7, #24
 800a2c6:	3b10      	subs	r3, #16
 800a2c8:	6019      	str	r1, [r3, #0]
 800a2ca:	f107 0318 	add.w	r3, r7, #24
 800a2ce:	3b11      	subs	r3, #17
 800a2d0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a2d2:	f107 0318 	add.w	r3, r7, #24
 800a2d6:	3b0c      	subs	r3, #12
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <f_open+0x32>
 800a2de:	2309      	movs	r3, #9
 800a2e0:	e319      	b.n	800a916 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800a2e2:	f107 0318 	add.w	r3, r7, #24
 800a2e6:	3b0c      	subs	r3, #12
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a2f2:	f107 0318 	add.w	r3, r7, #24
 800a2f6:	3b11      	subs	r3, #17
 800a2f8:	f107 0218 	add.w	r2, r7, #24
 800a2fc:	3a11      	subs	r2, #17
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	f002 021f 	and.w	r2, r2, #31
 800a304:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a306:	f107 0318 	add.w	r3, r7, #24
 800a30a:	3b11      	subs	r3, #17
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	f023 0301 	bic.w	r3, r3, #1
 800a312:	b2da      	uxtb	r2, r3
 800a314:	f107 0118 	add.w	r1, r7, #24
 800a318:	3910      	subs	r1, #16
 800a31a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a31e:	3b18      	subs	r3, #24
 800a320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fbdf 	bl	8009ae8 <find_volume>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a330:	f102 0217 	add.w	r2, r2, #23
 800a334:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a336:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a33a:	f103 0317 	add.w	r3, r3, #23
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f040 82e3 	bne.w	800a90c <f_open+0x65c>
		INIT_BUF(dj);
 800a346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a34a:	3b18      	subs	r3, #24
 800a34c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a350:	3318      	adds	r3, #24
 800a352:	f107 0218 	add.w	r2, r7, #24
 800a356:	3a04      	subs	r2, #4
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a35e:	3b18      	subs	r3, #24
 800a360:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a364:	4ad1      	ldr	r2, [pc, #836]	; (800a6ac <f_open+0x3fc>)
 800a366:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a368:	f107 0318 	add.w	r3, r7, #24
 800a36c:	3b10      	subs	r3, #16
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a374:	3b18      	subs	r3, #24
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff fa89 	bl	8009890 <follow_path>
 800a37e:	4603      	mov	r3, r0
 800a380:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a384:	f102 0217 	add.w	r2, r2, #23
 800a388:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800a38a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a38e:	3b18      	subs	r3, #24
 800a390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a394:	3314      	adds	r3, #20
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a39c:	f102 0210 	add.w	r2, r2, #16
 800a3a0:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a3a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a3a6:	f103 0317 	add.w	r3, r3, #23
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d126      	bne.n	800a3fe <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800a3b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a3b4:	f103 0310 	add.w	r3, r3, #16
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d106      	bne.n	800a3cc <f_open+0x11c>
				res = FR_INVALID_NAME;
 800a3be:	2306      	movs	r3, #6
 800a3c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a3c4:	f102 0217 	add.w	r2, r2, #23
 800a3c8:	7013      	strb	r3, [r2, #0]
 800a3ca:	e018      	b.n	800a3fe <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3cc:	f107 0318 	add.w	r3, r7, #24
 800a3d0:	3b11      	subs	r3, #17
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f023 0301 	bic.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bf14      	ite	ne
 800a3dc:	2301      	movne	r3, #1
 800a3de:	2300      	moveq	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3e8:	3b18      	subs	r3, #24
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fd fb01 	bl	80079f4 <chk_lock>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a3f8:	f102 0217 	add.w	r2, r2, #23
 800a3fc:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a3fe:	f107 0318 	add.w	r3, r7, #24
 800a402:	3b11      	subs	r3, #17
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	f003 031c 	and.w	r3, r3, #28
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 8150 	beq.w	800a6b0 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800a410:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a414:	f103 0317 	add.w	r3, r3, #23
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d030      	beq.n	800a480 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a41e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a422:	f103 0317 	add.w	r3, r3, #23
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b04      	cmp	r3, #4
 800a42a:	d112      	bne.n	800a452 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a42c:	f7fd fb54 	bl	8007ad8 <enq_lock>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d007      	beq.n	800a446 <f_open+0x196>
 800a436:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a43a:	3b18      	subs	r3, #24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe ff35 	bl	80092ac <dir_register>
 800a442:	4603      	mov	r3, r0
 800a444:	e000      	b.n	800a448 <f_open+0x198>
 800a446:	2312      	movs	r3, #18
 800a448:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a44c:	f102 0217 	add.w	r2, r2, #23
 800a450:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a452:	f107 0318 	add.w	r3, r7, #24
 800a456:	3b11      	subs	r3, #17
 800a458:	f107 0218 	add.w	r2, r7, #24
 800a45c:	3a11      	subs	r2, #17
 800a45e:	7812      	ldrb	r2, [r2, #0]
 800a460:	f042 0208 	orr.w	r2, r2, #8
 800a464:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800a466:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a46a:	3b18      	subs	r3, #24
 800a46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a470:	3314      	adds	r3, #20
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a478:	f102 0210 	add.w	r2, r2, #16
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	e01f      	b.n	800a4c0 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a480:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a484:	f103 0310 	add.w	r3, r3, #16
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	330b      	adds	r3, #11
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	f003 0311 	and.w	r3, r3, #17
 800a492:	2b00      	cmp	r3, #0
 800a494:	d006      	beq.n	800a4a4 <f_open+0x1f4>
					res = FR_DENIED;
 800a496:	2307      	movs	r3, #7
 800a498:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a49c:	f102 0217 	add.w	r2, r2, #23
 800a4a0:	7013      	strb	r3, [r2, #0]
 800a4a2:	e00d      	b.n	800a4c0 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a4a4:	f107 0318 	add.w	r3, r7, #24
 800a4a8:	3b11      	subs	r3, #17
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <f_open+0x210>
						res = FR_EXIST;
 800a4b4:	2308      	movs	r3, #8
 800a4b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a4ba:	f102 0217 	add.w	r2, r2, #23
 800a4be:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a4c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a4c4:	f103 0317 	add.w	r3, r3, #23
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 8122 	bne.w	800a714 <f_open+0x464>
 800a4d0:	f107 0318 	add.w	r3, r7, #24
 800a4d4:	3b11      	subs	r3, #17
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8119 	beq.w	800a714 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800a4e2:	f7fd f90b 	bl	80076fc <get_fattime>
 800a4e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a4ea:	f103 030c 	add.w	r3, r3, #12
 800a4ee:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a4f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a4f4:	f103 0310 	add.w	r3, r3, #16
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	330e      	adds	r3, #14
 800a4fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a500:	f102 020c 	add.w	r2, r2, #12
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	b2d2      	uxtb	r2, r2
 800a508:	701a      	strb	r2, [r3, #0]
 800a50a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a50e:	f103 030c 	add.w	r3, r3, #12
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	0a1b      	lsrs	r3, r3, #8
 800a518:	b29a      	uxth	r2, r3
 800a51a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a51e:	f103 0310 	add.w	r3, r3, #16
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	330f      	adds	r3, #15
 800a526:	b2d2      	uxtb	r2, r2
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a52e:	f103 030c 	add.w	r3, r3, #12
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	0c1a      	lsrs	r2, r3, #16
 800a536:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a53a:	f103 0310 	add.w	r3, r3, #16
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3310      	adds	r3, #16
 800a542:	b2d2      	uxtb	r2, r2
 800a544:	701a      	strb	r2, [r3, #0]
 800a546:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a54a:	f103 030c 	add.w	r3, r3, #12
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	0e1a      	lsrs	r2, r3, #24
 800a552:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a556:	f103 0310 	add.w	r3, r3, #16
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3311      	adds	r3, #17
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a562:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a566:	f103 0310 	add.w	r3, r3, #16
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	330b      	adds	r3, #11
 800a56e:	2200      	movs	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a572:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a576:	f103 0310 	add.w	r3, r3, #16
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	331c      	adds	r3, #28
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a586:	f103 0310 	add.w	r3, r3, #16
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	331d      	adds	r3, #29
 800a58e:	2200      	movs	r2, #0
 800a590:	701a      	strb	r2, [r3, #0]
 800a592:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a596:	f103 0310 	add.w	r3, r3, #16
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	331e      	adds	r3, #30
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]
 800a5a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5a6:	f103 0310 	add.w	r3, r3, #16
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	331f      	adds	r3, #31
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a5b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a5b6:	3b18      	subs	r3, #24
 800a5b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a5c2:	f102 0210 	add.w	r2, r2, #16
 800a5c6:	6811      	ldr	r1, [r2, #0]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe fbae 	bl	8008d2a <ld_clust>
 800a5ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5d2:	f103 0308 	add.w	r3, r3, #8
 800a5d6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800a5d8:	2100      	movs	r1, #0
 800a5da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a5de:	f103 0310 	add.w	r3, r3, #16
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	f7fe fbd0 	bl	8008d88 <st_clust>
				dj.fs->wflag = 1;
 800a5e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a5ec:	3b18      	subs	r3, #24
 800a5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800a5fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a602:	f103 0308 	add.w	r3, r3, #8
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 8083 	beq.w	800a714 <f_open+0x464>
					dw = dj.fs->winsect;
 800a60e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a612:	3b18      	subs	r3, #24
 800a614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a61e:	330c      	adds	r3, #12
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a626:	f102 020c 	add.w	r2, r2, #12
 800a62a:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800a62c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a630:	3b18      	subs	r3, #24
 800a632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a63c:	f102 0208 	add.w	r2, r2, #8
 800a640:	6811      	ldr	r1, [r2, #0]
 800a642:	4618      	mov	r0, r3
 800a644:	f7fd ff86 	bl	8008554 <remove_chain>
 800a648:	4603      	mov	r3, r0
 800a64a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a64e:	f102 0217 	add.w	r2, r2, #23
 800a652:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800a654:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a658:	f103 0317 	add.w	r3, r3, #23
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d158      	bne.n	800a714 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a662:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a666:	3b18      	subs	r3, #24
 800a668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a672:	f102 0208 	add.w	r2, r2, #8
 800a676:	6812      	ldr	r2, [r2, #0]
 800a678:	3a01      	subs	r2, #1
 800a67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67e:	330c      	adds	r3, #12
 800a680:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800a682:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a686:	3b18      	subs	r3, #24
 800a688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a692:	f102 020c 	add.w	r2, r2, #12
 800a696:	6811      	ldr	r1, [r2, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fd fbcb 	bl	8007e34 <move_window>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a6a4:	f102 0217 	add.w	r2, r2, #23
 800a6a8:	7013      	strb	r3, [r2, #0]
 800a6aa:	e033      	b.n	800a714 <f_open+0x464>
 800a6ac:	200000d8 	.word	0x200000d8
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800a6b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a6b4:	f103 0317 	add.w	r3, r3, #23
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d12a      	bne.n	800a714 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a6be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a6c2:	f103 0310 	add.w	r3, r3, #16
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	330b      	adds	r3, #11
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 0310 	and.w	r3, r3, #16
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d006      	beq.n	800a6e2 <f_open+0x432>
					res = FR_NO_FILE;
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a6da:	f102 0217 	add.w	r2, r2, #23
 800a6de:	7013      	strb	r3, [r2, #0]
 800a6e0:	e018      	b.n	800a714 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a6e2:	f107 0318 	add.w	r3, r7, #24
 800a6e6:	3b11      	subs	r3, #17
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d010      	beq.n	800a714 <f_open+0x464>
 800a6f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a6f6:	f103 0310 	add.w	r3, r3, #16
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	330b      	adds	r3, #11
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <f_open+0x464>
						res = FR_DENIED;
 800a708:	2307      	movs	r3, #7
 800a70a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a70e:	f102 0217 	add.w	r2, r2, #23
 800a712:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800a714:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a718:	f103 0317 	add.w	r3, r3, #23
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d15b      	bne.n	800a7da <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a722:	f107 0318 	add.w	r3, r7, #24
 800a726:	3b11      	subs	r3, #17
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d009      	beq.n	800a746 <f_open+0x496>
				mode |= FA__WRITTEN;
 800a732:	f107 0318 	add.w	r3, r7, #24
 800a736:	3b11      	subs	r3, #17
 800a738:	f107 0218 	add.w	r2, r7, #24
 800a73c:	3a11      	subs	r2, #17
 800a73e:	7812      	ldrb	r2, [r2, #0]
 800a740:	f042 0220 	orr.w	r2, r2, #32
 800a744:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a74a:	3b18      	subs	r3, #24
 800a74c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a756:	330c      	adds	r3, #12
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	f107 0318 	add.w	r3, r7, #24
 800a75e:	3b0c      	subs	r3, #12
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a766:	331c      	adds	r3, #28
 800a768:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800a76a:	f107 0318 	add.w	r3, r7, #24
 800a76e:	3b0c      	subs	r3, #12
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a776:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a77a:	f102 0210 	add.w	r2, r2, #16
 800a77e:	6812      	ldr	r2, [r2, #0]
 800a780:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a782:	f107 0318 	add.w	r3, r7, #24
 800a786:	3b11      	subs	r3, #17
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	f023 0301 	bic.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bf14      	ite	ne
 800a792:	2301      	movne	r3, #1
 800a794:	2300      	moveq	r3, #0
 800a796:	b2db      	uxtb	r3, r3
 800a798:	461a      	mov	r2, r3
 800a79a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a79e:	3b18      	subs	r3, #24
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fd f9bc 	bl	8007b20 <inc_lock>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	f107 0318 	add.w	r3, r7, #24
 800a7ae:	3b0c      	subs	r3, #12
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800a7ba:	f107 0318 	add.w	r3, r7, #24
 800a7be:	3b0c      	subs	r3, #12
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d105      	bne.n	800a7da <f_open+0x52a>
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a7d4:	f102 0217 	add.w	r2, r2, #23
 800a7d8:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800a7da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a7de:	f103 0317 	add.w	r3, r3, #23
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f040 8091 	bne.w	800a90c <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800a7ea:	f107 0318 	add.w	r3, r7, #24
 800a7ee:	3b0c      	subs	r3, #12
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f6:	3306      	adds	r3, #6
 800a7f8:	f107 0218 	add.w	r2, r7, #24
 800a7fc:	3a11      	subs	r2, #17
 800a7fe:	7812      	ldrb	r2, [r2, #0]
 800a800:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800a802:	f107 0318 	add.w	r3, r7, #24
 800a806:	3b0c      	subs	r3, #12
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80e:	3307      	adds	r3, #7
 800a810:	2200      	movs	r2, #0
 800a812:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a814:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a818:	3b18      	subs	r3, #24
 800a81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a824:	f102 0210 	add.w	r2, r2, #16
 800a828:	6811      	ldr	r1, [r2, #0]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe fa7d 	bl	8008d2a <ld_clust>
 800a830:	4602      	mov	r2, r0
 800a832:	f107 0318 	add.w	r3, r7, #24
 800a836:	3b0c      	subs	r3, #12
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83e:	3310      	adds	r3, #16
 800a840:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a842:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a846:	f103 0310 	add.w	r3, r3, #16
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	331f      	adds	r3, #31
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	061a      	lsls	r2, r3, #24
 800a852:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a856:	f103 0310 	add.w	r3, r3, #16
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	331e      	adds	r3, #30
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	041b      	lsls	r3, r3, #16
 800a862:	4313      	orrs	r3, r2
 800a864:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a868:	f102 0210 	add.w	r2, r2, #16
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	321d      	adds	r2, #29
 800a870:	7812      	ldrb	r2, [r2, #0]
 800a872:	0212      	lsls	r2, r2, #8
 800a874:	4313      	orrs	r3, r2
 800a876:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a87a:	f102 0210 	add.w	r2, r2, #16
 800a87e:	6812      	ldr	r2, [r2, #0]
 800a880:	321c      	adds	r2, #28
 800a882:	7812      	ldrb	r2, [r2, #0]
 800a884:	431a      	orrs	r2, r3
 800a886:	f107 0318 	add.w	r3, r7, #24
 800a88a:	3b0c      	subs	r3, #12
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a892:	330c      	adds	r3, #12
 800a894:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800a896:	f107 0318 	add.w	r3, r7, #24
 800a89a:	3b0c      	subs	r3, #12
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800a8a8:	f107 0318 	add.w	r3, r7, #24
 800a8ac:	3b0c      	subs	r3, #12
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b4:	3318      	adds	r3, #24
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800a8ba:	f107 0318 	add.w	r3, r7, #24
 800a8be:	3b0c      	subs	r3, #12
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800a8cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a8d0:	3b18      	subs	r3, #24
 800a8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	f107 0318 	add.w	r3, r7, #24
 800a8dc:	3b0c      	subs	r3, #12
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e4:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800a8e6:	f107 0318 	add.w	r3, r7, #24
 800a8ea:	3b0c      	subs	r3, #12
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f8:	3306      	adds	r3, #6
 800a8fa:	881a      	ldrh	r2, [r3, #0]
 800a8fc:	f107 0318 	add.w	r3, r7, #24
 800a900:	3b0c      	subs	r3, #12
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a908:	3304      	adds	r3, #4
 800a90a:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800a90c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800a910:	f103 0317 	add.w	r3, r3, #23
 800a914:	781b      	ldrb	r3, [r3, #0]
}
 800a916:	4618      	mov	r0, r3
 800a918:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop

0800a924 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08c      	sub	sp, #48	; 0x30
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff fc2f 	bl	800a1a0 <validate>
 800a942:	4603      	mov	r3, r0
 800a944:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a946:	7ffb      	ldrb	r3, [r7, #31]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <f_read+0x2c>
 800a94c:	7ffb      	ldrb	r3, [r7, #31]
 800a94e:	e1fb      	b.n	800ad48 <f_read+0x424>
	if (fp->err)								/* Check error */
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a956:	3307      	adds	r3, #7
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d005      	beq.n	800a96a <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a964:	3307      	adds	r3, #7
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	e1ee      	b.n	800ad48 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a970:	3306      	adds	r3, #6
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a97c:	2307      	movs	r3, #7
 800a97e:	e1e3      	b.n	800ad48 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a986:	330c      	adds	r3, #12
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a990:	3308      	adds	r3, #8
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	f240 81ce 	bls.w	800ad3e <f_read+0x41a>
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a9a6:	e1ca      	b.n	800ad3e <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9be:	330a      	adds	r3, #10
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9c6:	fb03 f301 	mul.w	r3, r3, r1
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f040 8160 	bne.w	800ac92 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d8:	3308      	adds	r3, #8
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e8:	330a      	adds	r3, #10
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9fe:	3302      	adds	r3, #2
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	4013      	ands	r3, r2
 800aa08:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800aa0a:	7dfb      	ldrb	r3, [r7, #23]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d14a      	bne.n	800aaa6 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa16:	3308      	adds	r3, #8
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa24:	3310      	adds	r3, #16
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa2a:	e01f      	b.n	800aa6c <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aa32:	3304      	adds	r3, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00a      	beq.n	800aa50 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa40:	3308      	adds	r3, #8
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4619      	mov	r1, r3
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7fd fe9d 	bl	8008786 <clmt_clust>
 800aa4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aa4e:	e00d      	b.n	800aa6c <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa5e:	3314      	adds	r3, #20
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f7fd fb10 	bl	800808a <get_fat>
 800aa6a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800aa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d807      	bhi.n	800aa82 <f_read+0x15e>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa78:	3307      	adds	r3, #7
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	2302      	movs	r3, #2
 800aa80:	e162      	b.n	800ad48 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa88:	d107      	bne.n	800aa9a <f_read+0x176>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa90:	3307      	adds	r3, #7
 800aa92:	2201      	movs	r2, #1
 800aa94:	701a      	strb	r2, [r3, #0]
 800aa96:	2301      	movs	r3, #1
 800aa98:	e156      	b.n	800ad48 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaa0:	3314      	adds	r3, #20
 800aaa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaa4:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aab4:	3314      	adds	r3, #20
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	4610      	mov	r0, r2
 800aabc:	f7fd fabd 	bl	800803a <clust2sect>
 800aac0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d107      	bne.n	800aad8 <f_read+0x1b4>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aace:	3307      	adds	r3, #7
 800aad0:	2202      	movs	r2, #2
 800aad2:	701a      	strb	r2, [r3, #0]
 800aad4:	2302      	movs	r3, #2
 800aad6:	e137      	b.n	800ad48 <f_read+0x424>
			sect += csect;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	4413      	add	r3, r2
 800aade:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaec:	330a      	adds	r3, #10
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaf8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d070      	beq.n	800abe2 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800ab00:	7dfa      	ldrb	r2, [r7, #23]
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	441a      	add	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab12:	3302      	adds	r3, #2
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d90b      	bls.n	800ab32 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab26:	3302      	adds	r3, #2
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab3e:	3301      	adds	r3, #1
 800ab40:	7818      	ldrb	r0, [r3, #0]
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	6a39      	ldr	r1, [r7, #32]
 800ab48:	f7fc fe7a 	bl	8007840 <disk_read>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab58:	3307      	adds	r3, #7
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	701a      	strb	r2, [r3, #0]
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e0f2      	b.n	800ad48 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab68:	3306      	adds	r3, #6
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d028      	beq.n	800abc6 <f_read+0x2a2>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7a:	3318      	adds	r3, #24
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d91e      	bls.n	800abc6 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab8e:	3318      	adds	r3, #24
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	1ad2      	subs	r2, r2, r3
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba2:	330a      	adds	r3, #10
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	fb03 f302 	mul.w	r3, r3, r2
 800abaa:	6a3a      	ldr	r2, [r7, #32]
 800abac:	18d0      	adds	r0, r2, r3
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbc:	330a      	adds	r3, #10
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	f7fc fe9b 	bl	80078fc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd2:	330a      	adds	r3, #10
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	fb02 f303 	mul.w	r3, r2, r3
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800abe0:	e093      	b.n	800ad0a <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe8:	3318      	adds	r3, #24
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d049      	beq.n	800ac86 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf8:	3306      	adds	r3, #6
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d028      	beq.n	800ac56 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac10:	3301      	adds	r3, #1
 800ac12:	7818      	ldrb	r0, [r3, #0]
 800ac14:	68f9      	ldr	r1, [r7, #12]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac1c:	3318      	adds	r3, #24
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	2301      	movs	r3, #1
 800ac22:	f7fc fe2d 	bl	8007880 <disk_write>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d007      	beq.n	800ac3c <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac32:	3307      	adds	r3, #7
 800ac34:	2201      	movs	r2, #1
 800ac36:	701a      	strb	r2, [r3, #0]
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e085      	b.n	800ad48 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac42:	3306      	adds	r3, #6
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac52:	3306      	adds	r3, #6
 800ac54:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac62:	3301      	adds	r3, #1
 800ac64:	7818      	ldrb	r0, [r3, #0]
 800ac66:	68f9      	ldr	r1, [r7, #12]
 800ac68:	2301      	movs	r3, #1
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	f7fc fde8 	bl	8007840 <disk_read>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d007      	beq.n	800ac86 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	2201      	movs	r2, #1
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	2301      	movs	r3, #1
 800ac84:	e060      	b.n	800ad48 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8c:	3318      	adds	r3, #24
 800ac8e:	693a      	ldr	r2, [r7, #16]
 800ac90:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9e:	330a      	adds	r3, #10
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	4618      	mov	r0, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acaa:	3308      	adds	r3, #8
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acba:	330a      	adds	r3, #10
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	fbb2 f1f3 	udiv	r1, r2, r3
 800acc2:	fb03 f301 	mul.w	r3, r3, r1
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	1ac3      	subs	r3, r0, r3
 800acca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800accc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d901      	bls.n	800acd8 <f_read+0x3b4>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acde:	3308      	adds	r3, #8
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acee:	330a      	adds	r3, #10
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	fbb2 f1f3 	udiv	r1, r2, r3
 800acf6:	fb03 f301 	mul.w	r3, r3, r1
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	4413      	add	r3, r2
 800ad00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad02:	4619      	mov	r1, r3
 800ad04:	6a38      	ldr	r0, [r7, #32]
 800ad06:	f7fc fdf9 	bl	80078fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ad0a:	6a3a      	ldr	r2, [r7, #32]
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	4413      	add	r3, r2
 800ad10:	623b      	str	r3, [r7, #32]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad18:	3308      	adds	r3, #8
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	441a      	add	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad26:	3308      	adds	r3, #8
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	441a      	add	r2, r3
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f47f ae31 	bne.w	800a9a8 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3730      	adds	r7, #48	; 0x30
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08a      	sub	sp, #40	; 0x28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7ff fa19 	bl	800a1a0 <validate>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <f_write+0x2c>
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	e258      	b.n	800b22e <f_write+0x4de>
	if (fp->err)							/* Check error */
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad82:	3307      	adds	r3, #7
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad90:	3307      	adds	r3, #7
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	e24b      	b.n	800b22e <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad9c:	3306      	adds	r3, #6
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	f003 0302 	and.w	r3, r3, #2
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ada8:	2307      	movs	r3, #7
 800adaa:	e240      	b.n	800b22e <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb2:	3308      	adds	r3, #8
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	441a      	add	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc0:	3308      	adds	r3, #8
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	f080 8208 	bcs.w	800b1da <f_write+0x48a>
 800adca:	2300      	movs	r3, #0
 800adcc:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800adce:	e204      	b.n	800b1da <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800add6:	3308      	adds	r3, #8
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade6:	330a      	adds	r3, #10
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	fbb2 f1f3 	udiv	r1, r2, r3
 800adee:	fb03 f301 	mul.w	r3, r3, r1
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f040 818d 	bne.w	800b114 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae00:	3308      	adds	r3, #8
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae10:	330a      	adds	r3, #10
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae26:	3302      	adds	r3, #2
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	4013      	ands	r3, r2
 800ae30:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800ae32:	7dbb      	ldrb	r3, [r7, #22]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d167      	bne.n	800af08 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae3e:	3308      	adds	r3, #8
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d112      	bne.n	800ae6c <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae4c:	3310      	adds	r3, #16
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d129      	bne.n	800aeac <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fd fbde 	bl	8008624 <create_chain>
 800ae68:	6278      	str	r0, [r7, #36]	; 0x24
 800ae6a:	e01f      	b.n	800aeac <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ae72:	3304      	adds	r3, #4
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae80:	3308      	adds	r3, #8
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4619      	mov	r1, r3
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7fd fc7d 	bl	8008786 <clmt_clust>
 800ae8c:	6278      	str	r0, [r7, #36]	; 0x24
 800ae8e:	e00d      	b.n	800aeac <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae9e:	3314      	adds	r3, #20
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f7fd fbbd 	bl	8008624 <create_chain>
 800aeaa:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8198 	beq.w	800b1e4 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d107      	bne.n	800aeca <f_write+0x17a>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aec0:	3307      	adds	r3, #7
 800aec2:	2202      	movs	r2, #2
 800aec4:	701a      	strb	r2, [r3, #0]
 800aec6:	2302      	movs	r3, #2
 800aec8:	e1b1      	b.n	800b22e <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed0:	d107      	bne.n	800aee2 <f_write+0x192>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed8:	3307      	adds	r3, #7
 800aeda:	2201      	movs	r2, #1
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	2301      	movs	r3, #1
 800aee0:	e1a5      	b.n	800b22e <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee8:	3314      	adds	r3, #20
 800aeea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeec:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef4:	3310      	adds	r3, #16
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d105      	bne.n	800af08 <f_write+0x1b8>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af02:	3310      	adds	r3, #16
 800af04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af06:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af0e:	3306      	adds	r3, #6
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d028      	beq.n	800af6c <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af26:	3301      	adds	r3, #1
 800af28:	7818      	ldrb	r0, [r3, #0]
 800af2a:	68f9      	ldr	r1, [r7, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af32:	3318      	adds	r3, #24
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	2301      	movs	r3, #1
 800af38:	f7fc fca2 	bl	8007880 <disk_write>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d007      	beq.n	800af52 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af48:	3307      	adds	r3, #7
 800af4a:	2201      	movs	r2, #1
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	2301      	movs	r3, #1
 800af50:	e16d      	b.n	800b22e <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af58:	3306      	adds	r3, #6
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af60:	b2da      	uxtb	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af68:	3306      	adds	r3, #6
 800af6a:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af7a:	3314      	adds	r3, #20
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4619      	mov	r1, r3
 800af80:	4610      	mov	r0, r2
 800af82:	f7fd f85a 	bl	800803a <clust2sect>
 800af86:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d107      	bne.n	800af9e <f_write+0x24e>
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af94:	3307      	adds	r3, #7
 800af96:	2202      	movs	r2, #2
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	2302      	movs	r3, #2
 800af9c:	e147      	b.n	800b22e <f_write+0x4de>
			sect += csect;
 800af9e:	7dbb      	ldrb	r3, [r7, #22]
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	4413      	add	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb2:	330a      	adds	r3, #10
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	fbb3 f3f2 	udiv	r3, r3, r2
 800afbe:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d074      	beq.n	800b0b0 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800afc6:	7dba      	ldrb	r2, [r7, #22]
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	441a      	add	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd8:	3302      	adds	r3, #2
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d90b      	bls.n	800aff8 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afec:	3302      	adds	r3, #2
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	461a      	mov	r2, r3
 800aff2:	7dbb      	ldrb	r3, [r7, #22]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b004:	3301      	adds	r3, #1
 800b006:	7818      	ldrb	r0, [r3, #0]
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	69b9      	ldr	r1, [r7, #24]
 800b00e:	f7fc fc37 	bl	8007880 <disk_write>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d007      	beq.n	800b028 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b01e:	3307      	adds	r3, #7
 800b020:	2201      	movs	r2, #1
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	2301      	movs	r3, #1
 800b026:	e102      	b.n	800b22e <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b02e:	3318      	adds	r3, #24
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	69fa      	ldr	r2, [r7, #28]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d92b      	bls.n	800b094 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b044:	3318      	adds	r3, #24
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	1ad2      	subs	r2, r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b058:	330a      	adds	r3, #10
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	fb03 f302 	mul.w	r3, r3, r2
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	18d1      	adds	r1, r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b070:	330a      	adds	r3, #10
 800b072:	881b      	ldrh	r3, [r3, #0]
 800b074:	461a      	mov	r2, r3
 800b076:	f7fc fc41 	bl	80078fc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b080:	3306      	adds	r3, #6
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b090:	3306      	adds	r3, #6
 800b092:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0a0:	330a      	adds	r3, #10
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	fb02 f303 	mul.w	r3, r2, r3
 800b0ac:	623b      	str	r3, [r7, #32]
				continue;
 800b0ae:	e07a      	b.n	800b1a6 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b6:	3318      	adds	r3, #24
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d023      	beq.n	800b108 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d217      	bcs.n	800b108 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	7818      	ldrb	r0, [r3, #0]
 800b0e8:	68f9      	ldr	r1, [r7, #12]
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	f7fc fba7 	bl	8007840 <disk_read>
 800b0f2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d007      	beq.n	800b108 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0fe:	3307      	adds	r3, #7
 800b100:	2201      	movs	r2, #1
 800b102:	701a      	strb	r2, [r3, #0]
 800b104:	2301      	movs	r3, #1
 800b106:	e092      	b.n	800b22e <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b10e:	3318      	adds	r3, #24
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b120:	330a      	adds	r3, #10
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	4618      	mov	r0, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b12c:	3308      	adds	r3, #8
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b13c:	330a      	adds	r3, #10
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	fbb2 f1f3 	udiv	r1, r2, r3
 800b144:	fb03 f301 	mul.w	r3, r3, r1
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	1ac3      	subs	r3, r0, r3
 800b14c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800b14e:	6a3a      	ldr	r2, [r7, #32]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	429a      	cmp	r2, r3
 800b154:	d901      	bls.n	800b15a <f_write+0x40a>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b160:	3308      	adds	r3, #8
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b170:	330a      	adds	r3, #10
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	fbb2 f1f3 	udiv	r1, r2, r3
 800b178:	fb03 f301 	mul.w	r3, r3, r1
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	4413      	add	r3, r2
 800b182:	6a3a      	ldr	r2, [r7, #32]
 800b184:	69b9      	ldr	r1, [r7, #24]
 800b186:	4618      	mov	r0, r3
 800b188:	f7fc fbb8 	bl	80078fc <mem_cpy>
		fp->flag |= FA__DIRTY;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b192:	3306      	adds	r3, #6
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1a2:	3306      	adds	r3, #6
 800b1a4:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	61bb      	str	r3, [r7, #24]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	441a      	add	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	441a      	add	r2, r3
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f47f adf7 	bne.w	800add0 <f_write+0x80>
 800b1e2:	e000      	b.n	800b1e6 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1e4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ec:	3308      	adds	r3, #8
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f6:	330c      	adds	r3, #12
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d909      	bls.n	800b212 <f_write+0x4c2>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b204:	3308      	adds	r3, #8
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b20e:	330c      	adds	r3, #12
 800b210:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b218:	3306      	adds	r3, #6
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	f043 0320 	orr.w	r3, r3, #32
 800b220:	b2da      	uxtb	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b228:	3306      	adds	r3, #6
 800b22a:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3728      	adds	r7, #40	; 0x28
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7fe ffae 	bl	800a1a0 <validate>
 800b244:	4603      	mov	r3, r0
 800b246:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f040 80cc 	bne.w	800b3e8 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b256:	3306      	adds	r3, #6
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	f003 0320 	and.w	r3, r3, #32
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f000 80c2 	beq.w	800b3e8 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b26a:	3306      	adds	r3, #6
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d022      	beq.n	800b2bc <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b282:	3301      	adds	r3, #1
 800b284:	7818      	ldrb	r0, [r3, #0]
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b28e:	3318      	adds	r3, #24
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	2301      	movs	r3, #1
 800b294:	f7fc faf4 	bl	8007880 <disk_write>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e0a3      	b.n	800b3ea <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2a8:	3306      	adds	r3, #6
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2b8:	3306      	adds	r3, #6
 800b2ba:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ca:	331c      	adds	r3, #28
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	f7fc fdaf 	bl	8007e34 <move_window>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f040 8083 	bne.w	800b3e8 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	330b      	adds	r3, #11
 800b2f0:	781a      	ldrb	r2, [r3, #0]
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	330b      	adds	r3, #11
 800b2f6:	f042 0220 	orr.w	r2, r2, #32
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b304:	330c      	adds	r3, #12
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	331c      	adds	r3, #28
 800b30c:	b2d2      	uxtb	r2, r2
 800b30e:	701a      	strb	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b316:	330c      	adds	r3, #12
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	0a1b      	lsrs	r3, r3, #8
 800b31e:	b29a      	uxth	r2, r3
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	331d      	adds	r3, #29
 800b324:	b2d2      	uxtb	r2, r2
 800b326:	701a      	strb	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b32e:	330c      	adds	r3, #12
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	0c1a      	lsrs	r2, r3, #16
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	331e      	adds	r3, #30
 800b338:	b2d2      	uxtb	r2, r2
 800b33a:	701a      	strb	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b342:	330c      	adds	r3, #12
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	0e1a      	lsrs	r2, r3, #24
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	331f      	adds	r3, #31
 800b34c:	b2d2      	uxtb	r2, r2
 800b34e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b356:	3310      	adds	r3, #16
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4619      	mov	r1, r3
 800b35c:	6938      	ldr	r0, [r7, #16]
 800b35e:	f7fd fd13 	bl	8008d88 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800b362:	f7fc f9cb 	bl	80076fc <get_fattime>
 800b366:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	3316      	adds	r3, #22
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	b29b      	uxth	r3, r3
 800b376:	0a1b      	lsrs	r3, r3, #8
 800b378:	b29a      	uxth	r2, r3
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	3317      	adds	r3, #23
 800b37e:	b2d2      	uxtb	r2, r2
 800b380:	701a      	strb	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	0c1a      	lsrs	r2, r3, #16
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	3318      	adds	r3, #24
 800b38a:	b2d2      	uxtb	r2, r2
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	0e1a      	lsrs	r2, r3, #24
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	3319      	adds	r3, #25
 800b396:	b2d2      	uxtb	r2, r2
 800b398:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	3312      	adds	r3, #18
 800b39e:	2200      	movs	r2, #0
 800b3a0:	701a      	strb	r2, [r3, #0]
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	3313      	adds	r3, #19
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b0:	3306      	adds	r3, #6
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	f023 0320 	bic.w	r3, r3, #32
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c0:	3306      	adds	r3, #6
 800b3c2:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fc fd5c 	bl	8007e9c <sync_fs>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff ff1b 	bl	800b236 <f_sync>
 800b400:	4603      	mov	r3, r0
 800b402:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d119      	bne.n	800b43e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7fe fec8 	bl	800a1a0 <validate>
 800b410:	4603      	mov	r3, r0
 800b412:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d111      	bne.n	800b43e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b420:	3308      	adds	r3, #8
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4618      	mov	r0, r3
 800b426:	f7fc fc3d 	bl	8007ca4 <dec_lock>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d104      	bne.n	800b43e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43a:	2200      	movs	r2, #0
 800b43c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b090      	sub	sp, #64	; 0x40
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7fe fea4 	bl	800a1a0 <validate>
 800b458:	4603      	mov	r3, r0
 800b45a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b45e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <f_lseek+0x24>
 800b466:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b46a:	e31d      	b.n	800baa8 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b472:	3307      	adds	r3, #7
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d005      	beq.n	800b486 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b480:	3307      	adds	r3, #7
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	e310      	b.n	800baa8 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b48c:	3304      	adds	r3, #4
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 813c 	beq.w	800b70e <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49c:	d172      	bne.n	800b584 <f_lseek+0x13c>
			tbl = fp->cltbl;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	1d1a      	adds	r2, r3, #4
 800b4ae:	627a      	str	r2, [r7, #36]	; 0x24
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4be:	3310      	adds	r3, #16
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d049      	beq.n	800b55e <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	613b      	str	r3, [r7, #16]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d4:	3302      	adds	r3, #2
 800b4d6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4de:	3301      	adds	r3, #1
 800b4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fc fdcc 	bl	800808a <get_fat>
 800b4f2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d807      	bhi.n	800b50a <f_lseek+0xc2>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b500:	3307      	adds	r3, #7
 800b502:	2202      	movs	r2, #2
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	2302      	movs	r3, #2
 800b508:	e2ce      	b.n	800baa8 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b510:	d107      	bne.n	800b522 <f_lseek+0xda>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b518:	3307      	adds	r3, #7
 800b51a:	2201      	movs	r2, #1
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	2301      	movs	r3, #1
 800b520:	e2c2      	b.n	800baa8 <f_lseek+0x660>
					} while (cl == pcl + 1);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	3301      	adds	r3, #1
 800b526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b528:	429a      	cmp	r2, r3
 800b52a:	d0d5      	beq.n	800b4d8 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b52c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	429a      	cmp	r2, r3
 800b532:	d809      	bhi.n	800b548 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	1d1a      	adds	r2, r3, #4
 800b538:	627a      	str	r2, [r7, #36]	; 0x24
 800b53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b540:	1d1a      	adds	r2, r3, #4
 800b542:	627a      	str	r2, [r7, #36]	; 0x24
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b554:	3314      	adds	r3, #20
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d3b5      	bcc.n	800b4ca <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b564:	3304      	adds	r3, #4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b56a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800b56c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	429a      	cmp	r2, r3
 800b572:	d803      	bhi.n	800b57c <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	2200      	movs	r2, #0
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	e293      	b.n	800baa4 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b57c:	2311      	movs	r3, #17
 800b57e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b582:	e28f      	b.n	800baa4 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b58a:	330c      	adds	r3, #12
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	429a      	cmp	r2, r3
 800b592:	d905      	bls.n	800b5a0 <f_lseek+0x158>
				ofs = fp->fsize;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59a:	330c      	adds	r3, #12
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	601a      	str	r2, [r3, #0]
			if (ofs) {
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 8278 	beq.w	800baa4 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7fd f8e3 	bl	8008786 <clmt_clust>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5c8:	3314      	adds	r3, #20
 800b5ca:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5da:	3314      	adds	r3, #20
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	f7fc fd2a 	bl	800803a <clust2sect>
 800b5e6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d107      	bne.n	800b5fe <f_lseek+0x1b6>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f4:	3307      	adds	r3, #7
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	701a      	strb	r2, [r3, #0]
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e254      	b.n	800baa8 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	1e5a      	subs	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b60e:	330a      	adds	r3, #10
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	fbb2 f2f3 	udiv	r2, r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b622:	3302      	adds	r3, #2
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	3b01      	subs	r3, #1
 800b628:	4013      	ands	r3, r2
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	4413      	add	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b636:	3308      	adds	r3, #8
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b646:	330a      	adds	r3, #10
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	fbb2 f1f3 	udiv	r1, r2, r3
 800b64e:	fb03 f301 	mul.w	r3, r3, r1
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8225 	beq.w	800baa4 <f_lseek+0x65c>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b660:	3318      	adds	r3, #24
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	69ba      	ldr	r2, [r7, #24]
 800b666:	429a      	cmp	r2, r3
 800b668:	f000 821c 	beq.w	800baa4 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b672:	3306      	adds	r3, #6
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d028      	beq.n	800b6d0 <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b68a:	3301      	adds	r3, #1
 800b68c:	7818      	ldrb	r0, [r3, #0]
 800b68e:	6879      	ldr	r1, [r7, #4]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b696:	3318      	adds	r3, #24
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	2301      	movs	r3, #1
 800b69c:	f7fc f8f0 	bl	8007880 <disk_write>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d007      	beq.n	800b6b6 <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ac:	3307      	adds	r3, #7
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e1f8      	b.n	800baa8 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6bc:	3306      	adds	r3, #6
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6cc:	3306      	adds	r3, #6
 800b6ce:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6dc:	3301      	adds	r3, #1
 800b6de:	7818      	ldrb	r0, [r3, #0]
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	f7fc f8ab 	bl	8007840 <disk_read>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d007      	beq.n	800b700 <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6f6:	3307      	adds	r3, #7
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	701a      	strb	r2, [r3, #0]
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e1d3      	b.n	800baa8 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b706:	3318      	adds	r3, #24
 800b708:	69ba      	ldr	r2, [r7, #24]
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	e1ca      	b.n	800baa4 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b714:	330c      	adds	r3, #12
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d90e      	bls.n	800b73c <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b724:	3306      	adds	r3, #6
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	f003 0302 	and.w	r3, r3, #2
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d105      	bne.n	800b73c <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b736:	330c      	adds	r3, #12
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b742:	3308      	adds	r3, #8
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	637b      	str	r3, [r7, #52]	; 0x34
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b752:	3308      	adds	r3, #8
 800b754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b756:	601a      	str	r2, [r3, #0]
		if (ofs) {
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f000 8113 	beq.w	800b986 <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b76c:	3302      	adds	r3, #2
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	461a      	mov	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b77e:	330a      	adds	r3, #10
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	fb03 f302 	mul.w	r3, r3, r2
 800b786:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d024      	beq.n	800b7d8 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	1e5a      	subs	r2, r3, #1
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	fbb2 f2f3 	udiv	r2, r2, r3
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	1e59      	subs	r1, r3, #1
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d318      	bcc.n	800b7d8 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	1e5a      	subs	r2, r3, #1
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	425b      	negs	r3, r3
 800b7ae:	401a      	ands	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d0:	3314      	adds	r3, #20
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7d6:	e034      	b.n	800b842 <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7de:	3310      	adds	r3, #16
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d125      	bne.n	800b836 <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fc ff15 	bl	8008624 <create_chain>
 800b7fa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d107      	bne.n	800b812 <f_lseek+0x3ca>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b808:	3307      	adds	r3, #7
 800b80a:	2202      	movs	r2, #2
 800b80c:	701a      	strb	r2, [r3, #0]
 800b80e:	2302      	movs	r3, #2
 800b810:	e14a      	b.n	800baa8 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b818:	d107      	bne.n	800b82a <f_lseek+0x3e2>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b820:	3307      	adds	r3, #7
 800b822:	2201      	movs	r2, #1
 800b824:	701a      	strb	r2, [r3, #0]
 800b826:	2301      	movs	r3, #1
 800b828:	e13e      	b.n	800baa8 <f_lseek+0x660>
					fp->sclust = clst;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b830:	3310      	adds	r3, #16
 800b832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b834:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b83c:	3314      	adds	r3, #20
 800b83e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b840:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 809e 	beq.w	800b986 <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 800b84a:	e058      	b.n	800b8fe <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b852:	3306      	adds	r3, #6
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	f003 0302 	and.w	r3, r3, #2
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00e      	beq.n	800b87c <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fc fedb 	bl	8008624 <create_chain>
 800b86e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10b      	bne.n	800b88e <f_lseek+0x446>
							ofs = bcs; break;
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	603b      	str	r3, [r7, #0]
 800b87a:	e044      	b.n	800b906 <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b886:	4618      	mov	r0, r3
 800b888:	f7fc fbff 	bl	800808a <get_fat>
 800b88c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b894:	d107      	bne.n	800b8a6 <f_lseek+0x45e>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b89c:	3307      	adds	r3, #7
 800b89e:	2201      	movs	r2, #1
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e100      	b.n	800baa8 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d90a      	bls.n	800b8c2 <f_lseek+0x47a>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b8:	3314      	adds	r3, #20
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d307      	bcc.n	800b8d2 <f_lseek+0x48a>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8c8:	3307      	adds	r3, #7
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	e0ea      	b.n	800baa8 <f_lseek+0x660>
					fp->clust = clst;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d8:	3314      	adds	r3, #20
 800b8da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8dc:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8e4:	3308      	adds	r3, #8
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	441a      	add	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	1ad3      	subs	r3, r2, r3
 800b8fc:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	429a      	cmp	r2, r3
 800b904:	d8a2      	bhi.n	800b84c <f_lseek+0x404>
				}
				fp->fptr += ofs;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b90c:	3308      	adds	r3, #8
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	441a      	add	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91a:	3308      	adds	r3, #8
 800b91c:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b92a:	330a      	adds	r3, #10
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	fbb3 f1f2 	udiv	r1, r3, r2
 800b936:	fb02 f201 	mul.w	r2, r2, r1
 800b93a:	1a9b      	subs	r3, r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d022      	beq.n	800b986 <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fc fb75 	bl	800803a <clust2sect>
 800b950:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b954:	2b00      	cmp	r3, #0
 800b956:	d107      	bne.n	800b968 <f_lseek+0x520>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b95e:	3307      	adds	r3, #7
 800b960:	2202      	movs	r2, #2
 800b962:	701a      	strb	r2, [r3, #0]
 800b964:	2302      	movs	r3, #2
 800b966:	e09f      	b.n	800baa8 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b974:	330a      	adds	r3, #10
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	461a      	mov	r2, r3
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b982:	4413      	add	r3, r2
 800b984:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b98c:	3308      	adds	r3, #8
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99c:	330a      	adds	r3, #10
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b9a4:	fb03 f301 	mul.w	r3, r3, r1
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d057      	beq.n	800ba5e <f_lseek+0x616>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b4:	3318      	adds	r3, #24
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d04f      	beq.n	800ba5e <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c4:	3306      	adds	r3, #6
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d028      	beq.n	800ba22 <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9dc:	3301      	adds	r3, #1
 800b9de:	7818      	ldrb	r0, [r3, #0]
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9e8:	3318      	adds	r3, #24
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	f7fb ff47 	bl	8007880 <disk_write>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d007      	beq.n	800ba08 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9fe:	3307      	adds	r3, #7
 800ba00:	2201      	movs	r2, #1
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	2301      	movs	r3, #1
 800ba06:	e04f      	b.n	800baa8 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba0e:	3306      	adds	r3, #6
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba1e:	3306      	adds	r3, #6
 800ba20:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba2e:	3301      	adds	r3, #1
 800ba30:	7818      	ldrb	r0, [r3, #0]
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	2301      	movs	r3, #1
 800ba36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba38:	f7fb ff02 	bl	8007840 <disk_read>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d007      	beq.n	800ba52 <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba48:	3307      	adds	r3, #7
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e02a      	b.n	800baa8 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba58:	3318      	adds	r3, #24
 800ba5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba5c:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba64:	3308      	adds	r3, #8
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba6e:	330c      	adds	r3, #12
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d916      	bls.n	800baa4 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba7c:	3308      	adds	r3, #8
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba86:	330c      	adds	r3, #12
 800ba88:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba90:	3306      	adds	r3, #6
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	f043 0320 	orr.w	r3, r3, #32
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa0:	3306      	adds	r3, #6
 800baa2:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800baa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3740      	adds	r7, #64	; 0x40
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b08e      	sub	sp, #56	; 0x38
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800babc:	f107 030c 	add.w	r3, r7, #12
 800bac0:	2200      	movs	r2, #0
 800bac2:	4619      	mov	r1, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7fe f80f 	bl	8009ae8 <find_volume>
 800baca:	4603      	mov	r3, r0
 800bacc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800bad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bada:	2b00      	cmp	r3, #0
 800badc:	f040 80c4 	bne.w	800bc68 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae6:	3310      	adds	r3, #16
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf0:	3314      	adds	r3, #20
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3b02      	subs	r3, #2
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d807      	bhi.n	800bb0a <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb00:	3310      	adds	r3, #16
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	601a      	str	r2, [r3, #0]
 800bb08:	e0ae      	b.n	800bc68 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800bb14:	2300      	movs	r3, #0
 800bb16:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800bb18:	7efb      	ldrb	r3, [r7, #27]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d127      	bne.n	800bb6e <f_getfree+0xbe>
				clst = 2;
 800bb1e:	2302      	movs	r3, #2
 800bb20:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800bb22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb24:	69f8      	ldr	r0, [r7, #28]
 800bb26:	f7fc fab0 	bl	800808a <get_fat>
 800bb2a:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb32:	d103      	bne.n	800bb3c <f_getfree+0x8c>
 800bb34:	2301      	movs	r3, #1
 800bb36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb3a:	e07f      	b.n	800bc3c <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d103      	bne.n	800bb4a <f_getfree+0x9a>
 800bb42:	2302      	movs	r3, #2
 800bb44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb48:	e078      	b.n	800bc3c <f_getfree+0x18c>
					if (stat == 0) n++;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d102      	bne.n	800bb56 <f_getfree+0xa6>
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	3301      	adds	r3, #1
 800bb54:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	3301      	adds	r3, #1
 800bb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb62:	3314      	adds	r3, #20
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d3da      	bcc.n	800bb22 <f_getfree+0x72>
 800bb6c:	e066      	b.n	800bc3c <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb74:	3314      	adds	r3, #20
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	627b      	str	r3, [r7, #36]	; 0x24
 800bb88:	2300      	movs	r3, #0
 800bb8a:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d115      	bne.n	800bbbe <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	62ba      	str	r2, [r7, #40]	; 0x28
 800bb98:	4619      	mov	r1, r3
 800bb9a:	69f8      	ldr	r0, [r7, #28]
 800bb9c:	f7fc f94a 	bl	8007e34 <move_window>
 800bba0:	4603      	mov	r3, r0
 800bba2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800bba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d145      	bne.n	800bc3a <f_getfree+0x18a>
						p = fs->win.d8;
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb8:	330a      	adds	r3, #10
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800bbbe:	7efb      	ldrb	r3, [r7, #27]
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d115      	bne.n	800bbf0 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	021b      	lsls	r3, r3, #8
 800bbcc:	b21a      	sxth	r2, r3
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	b21b      	sxth	r3, r3
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	b21b      	sxth	r3, r3
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d102      	bne.n	800bbe2 <f_getfree+0x132>
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbde:	3301      	adds	r3, #1
 800bbe0:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	3302      	adds	r3, #2
 800bbe6:	623b      	str	r3, [r7, #32]
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	3b02      	subs	r3, #2
 800bbec:	627b      	str	r3, [r7, #36]	; 0x24
 800bbee:	e01d      	b.n	800bc2c <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
 800bbf2:	3303      	adds	r3, #3
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	061a      	lsls	r2, r3, #24
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
 800bbfa:	3302      	adds	r3, #2
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	041b      	lsls	r3, r3, #16
 800bc00:	4313      	orrs	r3, r2
 800bc02:	6a3a      	ldr	r2, [r7, #32]
 800bc04:	3201      	adds	r2, #1
 800bc06:	7812      	ldrb	r2, [r2, #0]
 800bc08:	0212      	lsls	r2, r2, #8
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	6a3a      	ldr	r2, [r7, #32]
 800bc0e:	7812      	ldrb	r2, [r2, #0]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d102      	bne.n	800bc20 <f_getfree+0x170>
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	3304      	adds	r3, #4
 800bc24:	623b      	str	r3, [r7, #32]
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	3b04      	subs	r3, #4
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1a9      	bne.n	800bb8c <f_getfree+0xdc>
 800bc38:	e000      	b.n	800bc3c <f_getfree+0x18c>
						if (res != FR_OK) break;
 800bc3a:	bf00      	nop
			}
			fs->free_clust = n;
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc42:	3310      	adds	r3, #16
 800bc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc46:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc4e:	3305      	adds	r3, #5
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	f043 0301 	orr.w	r3, r3, #1
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc5e:	3305      	adds	r3, #5
 800bc60:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc66:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800bc68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3738      	adds	r7, #56	; 0x38
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
	int n = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800bc88:	e01b      	b.n	800bcc2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800bc8a:	f107 0310 	add.w	r3, r7, #16
 800bc8e:	f107 0114 	add.w	r1, r7, #20
 800bc92:	2201      	movs	r2, #1
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7fe fe45 	bl	800a924 <f_read>
		if (rc != 1) break;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d116      	bne.n	800bcce <f_gets+0x5a>
		c = s[0];
 800bca0:	7d3b      	ldrb	r3, [r7, #20]
 800bca2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	2b0d      	cmp	r3, #13
 800bca8:	d100      	bne.n	800bcac <f_gets+0x38>
 800bcaa:	e00a      	b.n	800bcc2 <f_gets+0x4e>
		*p++ = c;
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	61ba      	str	r2, [r7, #24]
 800bcb2:	7dfa      	ldrb	r2, [r7, #23]
 800bcb4:	701a      	strb	r2, [r3, #0]
		n++;
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800bcbc:	7dfb      	ldrb	r3, [r7, #23]
 800bcbe:	2b0a      	cmp	r3, #10
 800bcc0:	d007      	beq.n	800bcd2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	dbde      	blt.n	800bc8a <f_gets+0x16>
 800bccc:	e002      	b.n	800bcd4 <f_gets+0x60>
		if (rc != 1) break;
 800bcce:	bf00      	nop
 800bcd0:	e000      	b.n	800bcd4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800bcd2:	bf00      	nop
	}
	*p = 0;
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <f_gets+0x70>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	e000      	b.n	800bce6 <f_gets+0x72>
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3720      	adds	r7, #32
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800bcfa:	78fb      	ldrb	r3, [r7, #3]
 800bcfc:	2b0a      	cmp	r3, #10
 800bcfe:	d103      	bne.n	800bd08 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800bd00:	210d      	movs	r1, #13
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff fff3 	bl	800bcee <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	db25      	blt.n	800bd60 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	60fa      	str	r2, [r7, #12]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	78fa      	ldrb	r2, [r7, #3]
 800bd20:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b3c      	cmp	r3, #60	; 0x3c
 800bd26:	dd12      	ble.n	800bd4e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f103 010c 	add.w	r1, r3, #12
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	f107 0308 	add.w	r3, r7, #8
 800bd38:	f7ff f80a 	bl	800ad50 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d101      	bne.n	800bd48 <putc_bfd+0x5a>
 800bd44:	2300      	movs	r3, #0
 800bd46:	e001      	b.n	800bd4c <putc_bfd+0x5e>
 800bd48:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	609a      	str	r2, [r3, #8]
 800bd5e:	e000      	b.n	800bd62 <putc_bfd+0x74>
	if (i < 0) return;
 800bd60:	bf00      	nop
}
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800bd68:	b590      	push	{r4, r7, lr}
 800bd6a:	b097      	sub	sp, #92	; 0x5c
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	613b      	str	r3, [r7, #16]
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800bd7e:	e009      	b.n	800bd94 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	607a      	str	r2, [r7, #4]
 800bd86:	781a      	ldrb	r2, [r3, #0]
 800bd88:	f107 030c 	add.w	r3, r7, #12
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff ffad 	bl	800bcee <putc_bfd>
	while (*str)			/* Put the string */
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1f1      	bne.n	800bd80 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	db15      	blt.n	800bdce <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	461c      	mov	r4, r3
 800bda8:	f107 0208 	add.w	r2, r7, #8
 800bdac:	f107 030c 	add.w	r3, r7, #12
 800bdb0:	f103 010c 	add.w	r1, r3, #12
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	f7fe ffca 	bl	800ad50 <f_write>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d101      	bne.n	800bdce <f_puts+0x66>
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	e001      	b.n	800bdd2 <f_puts+0x6a>
	return EOF;
 800bdce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	375c      	adds	r7, #92	; 0x5c
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd90      	pop	{r4, r7, pc}
	...

0800bddc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	4613      	mov	r3, r2
 800bde8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bdea:	2301      	movs	r3, #1
 800bdec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800bdf2:	4b1f      	ldr	r3, [pc, #124]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800bdf4:	7a5b      	ldrb	r3, [r3, #9]
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d831      	bhi.n	800be60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bdfc:	4b1c      	ldr	r3, [pc, #112]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800bdfe:	7a5b      	ldrb	r3, [r3, #9]
 800be00:	b2db      	uxtb	r3, r3
 800be02:	461a      	mov	r2, r3
 800be04:	4b1a      	ldr	r3, [pc, #104]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800be06:	2100      	movs	r1, #0
 800be08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800be0a:	4b19      	ldr	r3, [pc, #100]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800be0c:	7a5b      	ldrb	r3, [r3, #9]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	4a17      	ldr	r2, [pc, #92]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800be1a:	4b15      	ldr	r3, [pc, #84]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800be1c:	7a5b      	ldrb	r3, [r3, #9]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	461a      	mov	r2, r3
 800be22:	4b13      	ldr	r3, [pc, #76]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800be24:	4413      	add	r3, r2
 800be26:	79fa      	ldrb	r2, [r7, #7]
 800be28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be2a:	4b11      	ldr	r3, [pc, #68]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800be2c:	7a5b      	ldrb	r3, [r3, #9]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	b2d1      	uxtb	r1, r2
 800be34:	4a0e      	ldr	r2, [pc, #56]	; (800be70 <FATFS_LinkDriverEx+0x94>)
 800be36:	7251      	strb	r1, [r2, #9]
 800be38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be3a:	7dbb      	ldrb	r3, [r7, #22]
 800be3c:	3330      	adds	r3, #48	; 0x30
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	3301      	adds	r3, #1
 800be48:	223a      	movs	r2, #58	; 0x3a
 800be4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	3302      	adds	r3, #2
 800be50:	222f      	movs	r2, #47	; 0x2f
 800be52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	3303      	adds	r3, #3
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800be60:	7dfb      	ldrb	r3, [r7, #23]
}
 800be62:	4618      	mov	r0, r3
 800be64:	371c      	adds	r7, #28
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	200002d8 	.word	0x200002d8

0800be74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800be7e:	2200      	movs	r2, #0
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff ffaa 	bl	800bddc <FATFS_LinkDriverEx>
 800be88:	4603      	mov	r3, r0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	6039      	str	r1, [r7, #0]
 800be9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bea0:	88fb      	ldrh	r3, [r7, #6]
 800bea2:	2b7f      	cmp	r3, #127	; 0x7f
 800bea4:	d802      	bhi.n	800beac <ff_convert+0x18>
		c = chr;
 800bea6:	88fb      	ldrh	r3, [r7, #6]
 800bea8:	81fb      	strh	r3, [r7, #14]
 800beaa:	e025      	b.n	800bef8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00b      	beq.n	800beca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800beb2:	88fb      	ldrh	r3, [r7, #6]
 800beb4:	2bff      	cmp	r3, #255	; 0xff
 800beb6:	d805      	bhi.n	800bec4 <ff_convert+0x30>
 800beb8:	88fb      	ldrh	r3, [r7, #6]
 800beba:	3b80      	subs	r3, #128	; 0x80
 800bebc:	4a12      	ldr	r2, [pc, #72]	; (800bf08 <ff_convert+0x74>)
 800bebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bec2:	e000      	b.n	800bec6 <ff_convert+0x32>
 800bec4:	2300      	movs	r3, #0
 800bec6:	81fb      	strh	r3, [r7, #14]
 800bec8:	e016      	b.n	800bef8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800beca:	2300      	movs	r3, #0
 800becc:	81fb      	strh	r3, [r7, #14]
 800bece:	e009      	b.n	800bee4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bed0:	89fb      	ldrh	r3, [r7, #14]
 800bed2:	4a0d      	ldr	r2, [pc, #52]	; (800bf08 <ff_convert+0x74>)
 800bed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bed8:	88fa      	ldrh	r2, [r7, #6]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d006      	beq.n	800beec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bede:	89fb      	ldrh	r3, [r7, #14]
 800bee0:	3301      	adds	r3, #1
 800bee2:	81fb      	strh	r3, [r7, #14]
 800bee4:	89fb      	ldrh	r3, [r7, #14]
 800bee6:	2b7f      	cmp	r3, #127	; 0x7f
 800bee8:	d9f2      	bls.n	800bed0 <ff_convert+0x3c>
 800beea:	e000      	b.n	800beee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800beec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800beee:	89fb      	ldrh	r3, [r7, #14]
 800bef0:	3380      	adds	r3, #128	; 0x80
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bef8:	89fb      	ldrh	r3, [r7, #14]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	0800cd44 	.word	0x0800cd44

0800bf0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60fb      	str	r3, [r7, #12]
 800bf1a:	e002      	b.n	800bf22 <ff_wtoupper+0x16>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	4a0f      	ldr	r2, [pc, #60]	; (800bf60 <ff_wtoupper+0x54>)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d006      	beq.n	800bf3c <ff_wtoupper+0x30>
 800bf2e:	4a0c      	ldr	r2, [pc, #48]	; (800bf60 <ff_wtoupper+0x54>)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf36:	88fa      	ldrh	r2, [r7, #6]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d1ef      	bne.n	800bf1c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800bf3c:	4a08      	ldr	r2, [pc, #32]	; (800bf60 <ff_wtoupper+0x54>)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d004      	beq.n	800bf52 <ff_wtoupper+0x46>
 800bf48:	4a06      	ldr	r2, [pc, #24]	; (800bf64 <ff_wtoupper+0x58>)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf50:	e000      	b.n	800bf54 <ff_wtoupper+0x48>
 800bf52:	88fb      	ldrh	r3, [r7, #6]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	0800ce44 	.word	0x0800ce44
 800bf64:	0800d024 	.word	0x0800d024

0800bf68 <__errno>:
 800bf68:	4b01      	ldr	r3, [pc, #4]	; (800bf70 <__errno+0x8>)
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	20000024 	.word	0x20000024

0800bf74 <__libc_init_array>:
 800bf74:	b570      	push	{r4, r5, r6, lr}
 800bf76:	4d0d      	ldr	r5, [pc, #52]	; (800bfac <__libc_init_array+0x38>)
 800bf78:	4c0d      	ldr	r4, [pc, #52]	; (800bfb0 <__libc_init_array+0x3c>)
 800bf7a:	1b64      	subs	r4, r4, r5
 800bf7c:	10a4      	asrs	r4, r4, #2
 800bf7e:	2600      	movs	r6, #0
 800bf80:	42a6      	cmp	r6, r4
 800bf82:	d109      	bne.n	800bf98 <__libc_init_array+0x24>
 800bf84:	4d0b      	ldr	r5, [pc, #44]	; (800bfb4 <__libc_init_array+0x40>)
 800bf86:	4c0c      	ldr	r4, [pc, #48]	; (800bfb8 <__libc_init_array+0x44>)
 800bf88:	f000 fc4e 	bl	800c828 <_init>
 800bf8c:	1b64      	subs	r4, r4, r5
 800bf8e:	10a4      	asrs	r4, r4, #2
 800bf90:	2600      	movs	r6, #0
 800bf92:	42a6      	cmp	r6, r4
 800bf94:	d105      	bne.n	800bfa2 <__libc_init_array+0x2e>
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf9c:	4798      	blx	r3
 800bf9e:	3601      	adds	r6, #1
 800bfa0:	e7ee      	b.n	800bf80 <__libc_init_array+0xc>
 800bfa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa6:	4798      	blx	r3
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	e7f2      	b.n	800bf92 <__libc_init_array+0x1e>
 800bfac:	0800d238 	.word	0x0800d238
 800bfb0:	0800d238 	.word	0x0800d238
 800bfb4:	0800d238 	.word	0x0800d238
 800bfb8:	0800d23c 	.word	0x0800d23c

0800bfbc <memcpy>:
 800bfbc:	440a      	add	r2, r1
 800bfbe:	4291      	cmp	r1, r2
 800bfc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfc4:	d100      	bne.n	800bfc8 <memcpy+0xc>
 800bfc6:	4770      	bx	lr
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfd2:	4291      	cmp	r1, r2
 800bfd4:	d1f9      	bne.n	800bfca <memcpy+0xe>
 800bfd6:	bd10      	pop	{r4, pc}

0800bfd8 <memset>:
 800bfd8:	4402      	add	r2, r0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d100      	bne.n	800bfe2 <memset+0xa>
 800bfe0:	4770      	bx	lr
 800bfe2:	f803 1b01 	strb.w	r1, [r3], #1
 800bfe6:	e7f9      	b.n	800bfdc <memset+0x4>

0800bfe8 <_free_r>:
 800bfe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfea:	2900      	cmp	r1, #0
 800bfec:	d048      	beq.n	800c080 <_free_r+0x98>
 800bfee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff2:	9001      	str	r0, [sp, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f1a1 0404 	sub.w	r4, r1, #4
 800bffa:	bfb8      	it	lt
 800bffc:	18e4      	addlt	r4, r4, r3
 800bffe:	f000 f8cd 	bl	800c19c <__malloc_lock>
 800c002:	4a20      	ldr	r2, [pc, #128]	; (800c084 <_free_r+0x9c>)
 800c004:	9801      	ldr	r0, [sp, #4]
 800c006:	6813      	ldr	r3, [r2, #0]
 800c008:	4615      	mov	r5, r2
 800c00a:	b933      	cbnz	r3, 800c01a <_free_r+0x32>
 800c00c:	6063      	str	r3, [r4, #4]
 800c00e:	6014      	str	r4, [r2, #0]
 800c010:	b003      	add	sp, #12
 800c012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c016:	f000 b8c7 	b.w	800c1a8 <__malloc_unlock>
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	d90b      	bls.n	800c036 <_free_r+0x4e>
 800c01e:	6821      	ldr	r1, [r4, #0]
 800c020:	1862      	adds	r2, r4, r1
 800c022:	4293      	cmp	r3, r2
 800c024:	bf04      	itt	eq
 800c026:	681a      	ldreq	r2, [r3, #0]
 800c028:	685b      	ldreq	r3, [r3, #4]
 800c02a:	6063      	str	r3, [r4, #4]
 800c02c:	bf04      	itt	eq
 800c02e:	1852      	addeq	r2, r2, r1
 800c030:	6022      	streq	r2, [r4, #0]
 800c032:	602c      	str	r4, [r5, #0]
 800c034:	e7ec      	b.n	800c010 <_free_r+0x28>
 800c036:	461a      	mov	r2, r3
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	b10b      	cbz	r3, 800c040 <_free_r+0x58>
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	d9fa      	bls.n	800c036 <_free_r+0x4e>
 800c040:	6811      	ldr	r1, [r2, #0]
 800c042:	1855      	adds	r5, r2, r1
 800c044:	42a5      	cmp	r5, r4
 800c046:	d10b      	bne.n	800c060 <_free_r+0x78>
 800c048:	6824      	ldr	r4, [r4, #0]
 800c04a:	4421      	add	r1, r4
 800c04c:	1854      	adds	r4, r2, r1
 800c04e:	42a3      	cmp	r3, r4
 800c050:	6011      	str	r1, [r2, #0]
 800c052:	d1dd      	bne.n	800c010 <_free_r+0x28>
 800c054:	681c      	ldr	r4, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	6053      	str	r3, [r2, #4]
 800c05a:	4421      	add	r1, r4
 800c05c:	6011      	str	r1, [r2, #0]
 800c05e:	e7d7      	b.n	800c010 <_free_r+0x28>
 800c060:	d902      	bls.n	800c068 <_free_r+0x80>
 800c062:	230c      	movs	r3, #12
 800c064:	6003      	str	r3, [r0, #0]
 800c066:	e7d3      	b.n	800c010 <_free_r+0x28>
 800c068:	6825      	ldr	r5, [r4, #0]
 800c06a:	1961      	adds	r1, r4, r5
 800c06c:	428b      	cmp	r3, r1
 800c06e:	bf04      	itt	eq
 800c070:	6819      	ldreq	r1, [r3, #0]
 800c072:	685b      	ldreq	r3, [r3, #4]
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	bf04      	itt	eq
 800c078:	1949      	addeq	r1, r1, r5
 800c07a:	6021      	streq	r1, [r4, #0]
 800c07c:	6054      	str	r4, [r2, #4]
 800c07e:	e7c7      	b.n	800c010 <_free_r+0x28>
 800c080:	b003      	add	sp, #12
 800c082:	bd30      	pop	{r4, r5, pc}
 800c084:	200002e4 	.word	0x200002e4

0800c088 <_malloc_r>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	1ccd      	adds	r5, r1, #3
 800c08c:	f025 0503 	bic.w	r5, r5, #3
 800c090:	3508      	adds	r5, #8
 800c092:	2d0c      	cmp	r5, #12
 800c094:	bf38      	it	cc
 800c096:	250c      	movcc	r5, #12
 800c098:	2d00      	cmp	r5, #0
 800c09a:	4606      	mov	r6, r0
 800c09c:	db01      	blt.n	800c0a2 <_malloc_r+0x1a>
 800c09e:	42a9      	cmp	r1, r5
 800c0a0:	d903      	bls.n	800c0aa <_malloc_r+0x22>
 800c0a2:	230c      	movs	r3, #12
 800c0a4:	6033      	str	r3, [r6, #0]
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0aa:	f000 f877 	bl	800c19c <__malloc_lock>
 800c0ae:	4921      	ldr	r1, [pc, #132]	; (800c134 <_malloc_r+0xac>)
 800c0b0:	680a      	ldr	r2, [r1, #0]
 800c0b2:	4614      	mov	r4, r2
 800c0b4:	b99c      	cbnz	r4, 800c0de <_malloc_r+0x56>
 800c0b6:	4f20      	ldr	r7, [pc, #128]	; (800c138 <_malloc_r+0xb0>)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	b923      	cbnz	r3, 800c0c6 <_malloc_r+0x3e>
 800c0bc:	4621      	mov	r1, r4
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f000 f83c 	bl	800c13c <_sbrk_r>
 800c0c4:	6038      	str	r0, [r7, #0]
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f000 f837 	bl	800c13c <_sbrk_r>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	d123      	bne.n	800c11a <_malloc_r+0x92>
 800c0d2:	230c      	movs	r3, #12
 800c0d4:	6033      	str	r3, [r6, #0]
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f000 f866 	bl	800c1a8 <__malloc_unlock>
 800c0dc:	e7e3      	b.n	800c0a6 <_malloc_r+0x1e>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	1b5b      	subs	r3, r3, r5
 800c0e2:	d417      	bmi.n	800c114 <_malloc_r+0x8c>
 800c0e4:	2b0b      	cmp	r3, #11
 800c0e6:	d903      	bls.n	800c0f0 <_malloc_r+0x68>
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	441c      	add	r4, r3
 800c0ec:	6025      	str	r5, [r4, #0]
 800c0ee:	e004      	b.n	800c0fa <_malloc_r+0x72>
 800c0f0:	6863      	ldr	r3, [r4, #4]
 800c0f2:	42a2      	cmp	r2, r4
 800c0f4:	bf0c      	ite	eq
 800c0f6:	600b      	streq	r3, [r1, #0]
 800c0f8:	6053      	strne	r3, [r2, #4]
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f000 f854 	bl	800c1a8 <__malloc_unlock>
 800c100:	f104 000b 	add.w	r0, r4, #11
 800c104:	1d23      	adds	r3, r4, #4
 800c106:	f020 0007 	bic.w	r0, r0, #7
 800c10a:	1ac2      	subs	r2, r0, r3
 800c10c:	d0cc      	beq.n	800c0a8 <_malloc_r+0x20>
 800c10e:	1a1b      	subs	r3, r3, r0
 800c110:	50a3      	str	r3, [r4, r2]
 800c112:	e7c9      	b.n	800c0a8 <_malloc_r+0x20>
 800c114:	4622      	mov	r2, r4
 800c116:	6864      	ldr	r4, [r4, #4]
 800c118:	e7cc      	b.n	800c0b4 <_malloc_r+0x2c>
 800c11a:	1cc4      	adds	r4, r0, #3
 800c11c:	f024 0403 	bic.w	r4, r4, #3
 800c120:	42a0      	cmp	r0, r4
 800c122:	d0e3      	beq.n	800c0ec <_malloc_r+0x64>
 800c124:	1a21      	subs	r1, r4, r0
 800c126:	4630      	mov	r0, r6
 800c128:	f000 f808 	bl	800c13c <_sbrk_r>
 800c12c:	3001      	adds	r0, #1
 800c12e:	d1dd      	bne.n	800c0ec <_malloc_r+0x64>
 800c130:	e7cf      	b.n	800c0d2 <_malloc_r+0x4a>
 800c132:	bf00      	nop
 800c134:	200002e4 	.word	0x200002e4
 800c138:	200002e8 	.word	0x200002e8

0800c13c <_sbrk_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d06      	ldr	r5, [pc, #24]	; (800c158 <_sbrk_r+0x1c>)
 800c140:	2300      	movs	r3, #0
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	602b      	str	r3, [r5, #0]
 800c148:	f7f6 f9d4 	bl	80024f4 <_sbrk>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_sbrk_r+0x1a>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_sbrk_r+0x1a>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	200049fc 	.word	0x200049fc

0800c15c <siprintf>:
 800c15c:	b40e      	push	{r1, r2, r3}
 800c15e:	b500      	push	{lr}
 800c160:	b09c      	sub	sp, #112	; 0x70
 800c162:	ab1d      	add	r3, sp, #116	; 0x74
 800c164:	9002      	str	r0, [sp, #8]
 800c166:	9006      	str	r0, [sp, #24]
 800c168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c16c:	4809      	ldr	r0, [pc, #36]	; (800c194 <siprintf+0x38>)
 800c16e:	9107      	str	r1, [sp, #28]
 800c170:	9104      	str	r1, [sp, #16]
 800c172:	4909      	ldr	r1, [pc, #36]	; (800c198 <siprintf+0x3c>)
 800c174:	f853 2b04 	ldr.w	r2, [r3], #4
 800c178:	9105      	str	r1, [sp, #20]
 800c17a:	6800      	ldr	r0, [r0, #0]
 800c17c:	9301      	str	r3, [sp, #4]
 800c17e:	a902      	add	r1, sp, #8
 800c180:	f000 f874 	bl	800c26c <_svfiprintf_r>
 800c184:	9b02      	ldr	r3, [sp, #8]
 800c186:	2200      	movs	r2, #0
 800c188:	701a      	strb	r2, [r3, #0]
 800c18a:	b01c      	add	sp, #112	; 0x70
 800c18c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c190:	b003      	add	sp, #12
 800c192:	4770      	bx	lr
 800c194:	20000024 	.word	0x20000024
 800c198:	ffff0208 	.word	0xffff0208

0800c19c <__malloc_lock>:
 800c19c:	4801      	ldr	r0, [pc, #4]	; (800c1a4 <__malloc_lock+0x8>)
 800c19e:	f000 baf9 	b.w	800c794 <__retarget_lock_acquire_recursive>
 800c1a2:	bf00      	nop
 800c1a4:	20004a04 	.word	0x20004a04

0800c1a8 <__malloc_unlock>:
 800c1a8:	4801      	ldr	r0, [pc, #4]	; (800c1b0 <__malloc_unlock+0x8>)
 800c1aa:	f000 baf4 	b.w	800c796 <__retarget_lock_release_recursive>
 800c1ae:	bf00      	nop
 800c1b0:	20004a04 	.word	0x20004a04

0800c1b4 <__ssputs_r>:
 800c1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b8:	688e      	ldr	r6, [r1, #8]
 800c1ba:	429e      	cmp	r6, r3
 800c1bc:	4682      	mov	sl, r0
 800c1be:	460c      	mov	r4, r1
 800c1c0:	4690      	mov	r8, r2
 800c1c2:	461f      	mov	r7, r3
 800c1c4:	d838      	bhi.n	800c238 <__ssputs_r+0x84>
 800c1c6:	898a      	ldrh	r2, [r1, #12]
 800c1c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1cc:	d032      	beq.n	800c234 <__ssputs_r+0x80>
 800c1ce:	6825      	ldr	r5, [r4, #0]
 800c1d0:	6909      	ldr	r1, [r1, #16]
 800c1d2:	eba5 0901 	sub.w	r9, r5, r1
 800c1d6:	6965      	ldr	r5, [r4, #20]
 800c1d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	444b      	add	r3, r9
 800c1e4:	106d      	asrs	r5, r5, #1
 800c1e6:	429d      	cmp	r5, r3
 800c1e8:	bf38      	it	cc
 800c1ea:	461d      	movcc	r5, r3
 800c1ec:	0553      	lsls	r3, r2, #21
 800c1ee:	d531      	bpl.n	800c254 <__ssputs_r+0xa0>
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	f7ff ff49 	bl	800c088 <_malloc_r>
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	b950      	cbnz	r0, 800c210 <__ssputs_r+0x5c>
 800c1fa:	230c      	movs	r3, #12
 800c1fc:	f8ca 3000 	str.w	r3, [sl]
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	f04f 30ff 	mov.w	r0, #4294967295
 800c20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c210:	6921      	ldr	r1, [r4, #16]
 800c212:	464a      	mov	r2, r9
 800c214:	f7ff fed2 	bl	800bfbc <memcpy>
 800c218:	89a3      	ldrh	r3, [r4, #12]
 800c21a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c21e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c222:	81a3      	strh	r3, [r4, #12]
 800c224:	6126      	str	r6, [r4, #16]
 800c226:	6165      	str	r5, [r4, #20]
 800c228:	444e      	add	r6, r9
 800c22a:	eba5 0509 	sub.w	r5, r5, r9
 800c22e:	6026      	str	r6, [r4, #0]
 800c230:	60a5      	str	r5, [r4, #8]
 800c232:	463e      	mov	r6, r7
 800c234:	42be      	cmp	r6, r7
 800c236:	d900      	bls.n	800c23a <__ssputs_r+0x86>
 800c238:	463e      	mov	r6, r7
 800c23a:	4632      	mov	r2, r6
 800c23c:	6820      	ldr	r0, [r4, #0]
 800c23e:	4641      	mov	r1, r8
 800c240:	f000 faaa 	bl	800c798 <memmove>
 800c244:	68a3      	ldr	r3, [r4, #8]
 800c246:	6822      	ldr	r2, [r4, #0]
 800c248:	1b9b      	subs	r3, r3, r6
 800c24a:	4432      	add	r2, r6
 800c24c:	60a3      	str	r3, [r4, #8]
 800c24e:	6022      	str	r2, [r4, #0]
 800c250:	2000      	movs	r0, #0
 800c252:	e7db      	b.n	800c20c <__ssputs_r+0x58>
 800c254:	462a      	mov	r2, r5
 800c256:	f000 fab9 	bl	800c7cc <_realloc_r>
 800c25a:	4606      	mov	r6, r0
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d1e1      	bne.n	800c224 <__ssputs_r+0x70>
 800c260:	6921      	ldr	r1, [r4, #16]
 800c262:	4650      	mov	r0, sl
 800c264:	f7ff fec0 	bl	800bfe8 <_free_r>
 800c268:	e7c7      	b.n	800c1fa <__ssputs_r+0x46>
	...

0800c26c <_svfiprintf_r>:
 800c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c270:	4698      	mov	r8, r3
 800c272:	898b      	ldrh	r3, [r1, #12]
 800c274:	061b      	lsls	r3, r3, #24
 800c276:	b09d      	sub	sp, #116	; 0x74
 800c278:	4607      	mov	r7, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	4614      	mov	r4, r2
 800c27e:	d50e      	bpl.n	800c29e <_svfiprintf_r+0x32>
 800c280:	690b      	ldr	r3, [r1, #16]
 800c282:	b963      	cbnz	r3, 800c29e <_svfiprintf_r+0x32>
 800c284:	2140      	movs	r1, #64	; 0x40
 800c286:	f7ff feff 	bl	800c088 <_malloc_r>
 800c28a:	6028      	str	r0, [r5, #0]
 800c28c:	6128      	str	r0, [r5, #16]
 800c28e:	b920      	cbnz	r0, 800c29a <_svfiprintf_r+0x2e>
 800c290:	230c      	movs	r3, #12
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e0d1      	b.n	800c43e <_svfiprintf_r+0x1d2>
 800c29a:	2340      	movs	r3, #64	; 0x40
 800c29c:	616b      	str	r3, [r5, #20]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a2:	2320      	movs	r3, #32
 800c2a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ac:	2330      	movs	r3, #48	; 0x30
 800c2ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c458 <_svfiprintf_r+0x1ec>
 800c2b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2b6:	f04f 0901 	mov.w	r9, #1
 800c2ba:	4623      	mov	r3, r4
 800c2bc:	469a      	mov	sl, r3
 800c2be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c2:	b10a      	cbz	r2, 800c2c8 <_svfiprintf_r+0x5c>
 800c2c4:	2a25      	cmp	r2, #37	; 0x25
 800c2c6:	d1f9      	bne.n	800c2bc <_svfiprintf_r+0x50>
 800c2c8:	ebba 0b04 	subs.w	fp, sl, r4
 800c2cc:	d00b      	beq.n	800c2e6 <_svfiprintf_r+0x7a>
 800c2ce:	465b      	mov	r3, fp
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f7ff ff6d 	bl	800c1b4 <__ssputs_r>
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f000 80aa 	beq.w	800c434 <_svfiprintf_r+0x1c8>
 800c2e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e2:	445a      	add	r2, fp
 800c2e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80a2 	beq.w	800c434 <_svfiprintf_r+0x1c8>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2fa:	f10a 0a01 	add.w	sl, sl, #1
 800c2fe:	9304      	str	r3, [sp, #16]
 800c300:	9307      	str	r3, [sp, #28]
 800c302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c306:	931a      	str	r3, [sp, #104]	; 0x68
 800c308:	4654      	mov	r4, sl
 800c30a:	2205      	movs	r2, #5
 800c30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c310:	4851      	ldr	r0, [pc, #324]	; (800c458 <_svfiprintf_r+0x1ec>)
 800c312:	f7f3 ff65 	bl	80001e0 <memchr>
 800c316:	9a04      	ldr	r2, [sp, #16]
 800c318:	b9d8      	cbnz	r0, 800c352 <_svfiprintf_r+0xe6>
 800c31a:	06d0      	lsls	r0, r2, #27
 800c31c:	bf44      	itt	mi
 800c31e:	2320      	movmi	r3, #32
 800c320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c324:	0711      	lsls	r1, r2, #28
 800c326:	bf44      	itt	mi
 800c328:	232b      	movmi	r3, #43	; 0x2b
 800c32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c32e:	f89a 3000 	ldrb.w	r3, [sl]
 800c332:	2b2a      	cmp	r3, #42	; 0x2a
 800c334:	d015      	beq.n	800c362 <_svfiprintf_r+0xf6>
 800c336:	9a07      	ldr	r2, [sp, #28]
 800c338:	4654      	mov	r4, sl
 800c33a:	2000      	movs	r0, #0
 800c33c:	f04f 0c0a 	mov.w	ip, #10
 800c340:	4621      	mov	r1, r4
 800c342:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c346:	3b30      	subs	r3, #48	; 0x30
 800c348:	2b09      	cmp	r3, #9
 800c34a:	d94e      	bls.n	800c3ea <_svfiprintf_r+0x17e>
 800c34c:	b1b0      	cbz	r0, 800c37c <_svfiprintf_r+0x110>
 800c34e:	9207      	str	r2, [sp, #28]
 800c350:	e014      	b.n	800c37c <_svfiprintf_r+0x110>
 800c352:	eba0 0308 	sub.w	r3, r0, r8
 800c356:	fa09 f303 	lsl.w	r3, r9, r3
 800c35a:	4313      	orrs	r3, r2
 800c35c:	9304      	str	r3, [sp, #16]
 800c35e:	46a2      	mov	sl, r4
 800c360:	e7d2      	b.n	800c308 <_svfiprintf_r+0x9c>
 800c362:	9b03      	ldr	r3, [sp, #12]
 800c364:	1d19      	adds	r1, r3, #4
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	9103      	str	r1, [sp, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	bfbb      	ittet	lt
 800c36e:	425b      	neglt	r3, r3
 800c370:	f042 0202 	orrlt.w	r2, r2, #2
 800c374:	9307      	strge	r3, [sp, #28]
 800c376:	9307      	strlt	r3, [sp, #28]
 800c378:	bfb8      	it	lt
 800c37a:	9204      	strlt	r2, [sp, #16]
 800c37c:	7823      	ldrb	r3, [r4, #0]
 800c37e:	2b2e      	cmp	r3, #46	; 0x2e
 800c380:	d10c      	bne.n	800c39c <_svfiprintf_r+0x130>
 800c382:	7863      	ldrb	r3, [r4, #1]
 800c384:	2b2a      	cmp	r3, #42	; 0x2a
 800c386:	d135      	bne.n	800c3f4 <_svfiprintf_r+0x188>
 800c388:	9b03      	ldr	r3, [sp, #12]
 800c38a:	1d1a      	adds	r2, r3, #4
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	9203      	str	r2, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	bfb8      	it	lt
 800c394:	f04f 33ff 	movlt.w	r3, #4294967295
 800c398:	3402      	adds	r4, #2
 800c39a:	9305      	str	r3, [sp, #20]
 800c39c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c468 <_svfiprintf_r+0x1fc>
 800c3a0:	7821      	ldrb	r1, [r4, #0]
 800c3a2:	2203      	movs	r2, #3
 800c3a4:	4650      	mov	r0, sl
 800c3a6:	f7f3 ff1b 	bl	80001e0 <memchr>
 800c3aa:	b140      	cbz	r0, 800c3be <_svfiprintf_r+0x152>
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	eba0 000a 	sub.w	r0, r0, sl
 800c3b2:	fa03 f000 	lsl.w	r0, r3, r0
 800c3b6:	9b04      	ldr	r3, [sp, #16]
 800c3b8:	4303      	orrs	r3, r0
 800c3ba:	3401      	adds	r4, #1
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c2:	4826      	ldr	r0, [pc, #152]	; (800c45c <_svfiprintf_r+0x1f0>)
 800c3c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3c8:	2206      	movs	r2, #6
 800c3ca:	f7f3 ff09 	bl	80001e0 <memchr>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d038      	beq.n	800c444 <_svfiprintf_r+0x1d8>
 800c3d2:	4b23      	ldr	r3, [pc, #140]	; (800c460 <_svfiprintf_r+0x1f4>)
 800c3d4:	bb1b      	cbnz	r3, 800c41e <_svfiprintf_r+0x1b2>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	3307      	adds	r3, #7
 800c3da:	f023 0307 	bic.w	r3, r3, #7
 800c3de:	3308      	adds	r3, #8
 800c3e0:	9303      	str	r3, [sp, #12]
 800c3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e4:	4433      	add	r3, r6
 800c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e8:	e767      	b.n	800c2ba <_svfiprintf_r+0x4e>
 800c3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	e7a5      	b.n	800c340 <_svfiprintf_r+0xd4>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	3401      	adds	r4, #1
 800c3f8:	9305      	str	r3, [sp, #20]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f04f 0c0a 	mov.w	ip, #10
 800c400:	4620      	mov	r0, r4
 800c402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c406:	3a30      	subs	r2, #48	; 0x30
 800c408:	2a09      	cmp	r2, #9
 800c40a:	d903      	bls.n	800c414 <_svfiprintf_r+0x1a8>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d0c5      	beq.n	800c39c <_svfiprintf_r+0x130>
 800c410:	9105      	str	r1, [sp, #20]
 800c412:	e7c3      	b.n	800c39c <_svfiprintf_r+0x130>
 800c414:	fb0c 2101 	mla	r1, ip, r1, r2
 800c418:	4604      	mov	r4, r0
 800c41a:	2301      	movs	r3, #1
 800c41c:	e7f0      	b.n	800c400 <_svfiprintf_r+0x194>
 800c41e:	ab03      	add	r3, sp, #12
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	462a      	mov	r2, r5
 800c424:	4b0f      	ldr	r3, [pc, #60]	; (800c464 <_svfiprintf_r+0x1f8>)
 800c426:	a904      	add	r1, sp, #16
 800c428:	4638      	mov	r0, r7
 800c42a:	f3af 8000 	nop.w
 800c42e:	1c42      	adds	r2, r0, #1
 800c430:	4606      	mov	r6, r0
 800c432:	d1d6      	bne.n	800c3e2 <_svfiprintf_r+0x176>
 800c434:	89ab      	ldrh	r3, [r5, #12]
 800c436:	065b      	lsls	r3, r3, #25
 800c438:	f53f af2c 	bmi.w	800c294 <_svfiprintf_r+0x28>
 800c43c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c43e:	b01d      	add	sp, #116	; 0x74
 800c440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c444:	ab03      	add	r3, sp, #12
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	462a      	mov	r2, r5
 800c44a:	4b06      	ldr	r3, [pc, #24]	; (800c464 <_svfiprintf_r+0x1f8>)
 800c44c:	a904      	add	r1, sp, #16
 800c44e:	4638      	mov	r0, r7
 800c450:	f000 f87a 	bl	800c548 <_printf_i>
 800c454:	e7eb      	b.n	800c42e <_svfiprintf_r+0x1c2>
 800c456:	bf00      	nop
 800c458:	0800d204 	.word	0x0800d204
 800c45c:	0800d20e 	.word	0x0800d20e
 800c460:	00000000 	.word	0x00000000
 800c464:	0800c1b5 	.word	0x0800c1b5
 800c468:	0800d20a 	.word	0x0800d20a

0800c46c <_printf_common>:
 800c46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	4616      	mov	r6, r2
 800c472:	4699      	mov	r9, r3
 800c474:	688a      	ldr	r2, [r1, #8]
 800c476:	690b      	ldr	r3, [r1, #16]
 800c478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c47c:	4293      	cmp	r3, r2
 800c47e:	bfb8      	it	lt
 800c480:	4613      	movlt	r3, r2
 800c482:	6033      	str	r3, [r6, #0]
 800c484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c488:	4607      	mov	r7, r0
 800c48a:	460c      	mov	r4, r1
 800c48c:	b10a      	cbz	r2, 800c492 <_printf_common+0x26>
 800c48e:	3301      	adds	r3, #1
 800c490:	6033      	str	r3, [r6, #0]
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	0699      	lsls	r1, r3, #26
 800c496:	bf42      	ittt	mi
 800c498:	6833      	ldrmi	r3, [r6, #0]
 800c49a:	3302      	addmi	r3, #2
 800c49c:	6033      	strmi	r3, [r6, #0]
 800c49e:	6825      	ldr	r5, [r4, #0]
 800c4a0:	f015 0506 	ands.w	r5, r5, #6
 800c4a4:	d106      	bne.n	800c4b4 <_printf_common+0x48>
 800c4a6:	f104 0a19 	add.w	sl, r4, #25
 800c4aa:	68e3      	ldr	r3, [r4, #12]
 800c4ac:	6832      	ldr	r2, [r6, #0]
 800c4ae:	1a9b      	subs	r3, r3, r2
 800c4b0:	42ab      	cmp	r3, r5
 800c4b2:	dc26      	bgt.n	800c502 <_printf_common+0x96>
 800c4b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4b8:	1e13      	subs	r3, r2, #0
 800c4ba:	6822      	ldr	r2, [r4, #0]
 800c4bc:	bf18      	it	ne
 800c4be:	2301      	movne	r3, #1
 800c4c0:	0692      	lsls	r2, r2, #26
 800c4c2:	d42b      	bmi.n	800c51c <_printf_common+0xb0>
 800c4c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4c8:	4649      	mov	r1, r9
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	47c0      	blx	r8
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	d01e      	beq.n	800c510 <_printf_common+0xa4>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	68e5      	ldr	r5, [r4, #12]
 800c4d6:	6832      	ldr	r2, [r6, #0]
 800c4d8:	f003 0306 	and.w	r3, r3, #6
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	bf08      	it	eq
 800c4e0:	1aad      	subeq	r5, r5, r2
 800c4e2:	68a3      	ldr	r3, [r4, #8]
 800c4e4:	6922      	ldr	r2, [r4, #16]
 800c4e6:	bf0c      	ite	eq
 800c4e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4ec:	2500      	movne	r5, #0
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	bfc4      	itt	gt
 800c4f2:	1a9b      	subgt	r3, r3, r2
 800c4f4:	18ed      	addgt	r5, r5, r3
 800c4f6:	2600      	movs	r6, #0
 800c4f8:	341a      	adds	r4, #26
 800c4fa:	42b5      	cmp	r5, r6
 800c4fc:	d11a      	bne.n	800c534 <_printf_common+0xc8>
 800c4fe:	2000      	movs	r0, #0
 800c500:	e008      	b.n	800c514 <_printf_common+0xa8>
 800c502:	2301      	movs	r3, #1
 800c504:	4652      	mov	r2, sl
 800c506:	4649      	mov	r1, r9
 800c508:	4638      	mov	r0, r7
 800c50a:	47c0      	blx	r8
 800c50c:	3001      	adds	r0, #1
 800c50e:	d103      	bne.n	800c518 <_printf_common+0xac>
 800c510:	f04f 30ff 	mov.w	r0, #4294967295
 800c514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c518:	3501      	adds	r5, #1
 800c51a:	e7c6      	b.n	800c4aa <_printf_common+0x3e>
 800c51c:	18e1      	adds	r1, r4, r3
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	2030      	movs	r0, #48	; 0x30
 800c522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c526:	4422      	add	r2, r4
 800c528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c52c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c530:	3302      	adds	r3, #2
 800c532:	e7c7      	b.n	800c4c4 <_printf_common+0x58>
 800c534:	2301      	movs	r3, #1
 800c536:	4622      	mov	r2, r4
 800c538:	4649      	mov	r1, r9
 800c53a:	4638      	mov	r0, r7
 800c53c:	47c0      	blx	r8
 800c53e:	3001      	adds	r0, #1
 800c540:	d0e6      	beq.n	800c510 <_printf_common+0xa4>
 800c542:	3601      	adds	r6, #1
 800c544:	e7d9      	b.n	800c4fa <_printf_common+0x8e>
	...

0800c548 <_printf_i>:
 800c548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c54c:	460c      	mov	r4, r1
 800c54e:	4691      	mov	r9, r2
 800c550:	7e27      	ldrb	r7, [r4, #24]
 800c552:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c554:	2f78      	cmp	r7, #120	; 0x78
 800c556:	4680      	mov	r8, r0
 800c558:	469a      	mov	sl, r3
 800c55a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c55e:	d807      	bhi.n	800c570 <_printf_i+0x28>
 800c560:	2f62      	cmp	r7, #98	; 0x62
 800c562:	d80a      	bhi.n	800c57a <_printf_i+0x32>
 800c564:	2f00      	cmp	r7, #0
 800c566:	f000 80d8 	beq.w	800c71a <_printf_i+0x1d2>
 800c56a:	2f58      	cmp	r7, #88	; 0x58
 800c56c:	f000 80a3 	beq.w	800c6b6 <_printf_i+0x16e>
 800c570:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c578:	e03a      	b.n	800c5f0 <_printf_i+0xa8>
 800c57a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c57e:	2b15      	cmp	r3, #21
 800c580:	d8f6      	bhi.n	800c570 <_printf_i+0x28>
 800c582:	a001      	add	r0, pc, #4	; (adr r0, 800c588 <_printf_i+0x40>)
 800c584:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c588:	0800c5e1 	.word	0x0800c5e1
 800c58c:	0800c5f5 	.word	0x0800c5f5
 800c590:	0800c571 	.word	0x0800c571
 800c594:	0800c571 	.word	0x0800c571
 800c598:	0800c571 	.word	0x0800c571
 800c59c:	0800c571 	.word	0x0800c571
 800c5a0:	0800c5f5 	.word	0x0800c5f5
 800c5a4:	0800c571 	.word	0x0800c571
 800c5a8:	0800c571 	.word	0x0800c571
 800c5ac:	0800c571 	.word	0x0800c571
 800c5b0:	0800c571 	.word	0x0800c571
 800c5b4:	0800c701 	.word	0x0800c701
 800c5b8:	0800c625 	.word	0x0800c625
 800c5bc:	0800c6e3 	.word	0x0800c6e3
 800c5c0:	0800c571 	.word	0x0800c571
 800c5c4:	0800c571 	.word	0x0800c571
 800c5c8:	0800c723 	.word	0x0800c723
 800c5cc:	0800c571 	.word	0x0800c571
 800c5d0:	0800c625 	.word	0x0800c625
 800c5d4:	0800c571 	.word	0x0800c571
 800c5d8:	0800c571 	.word	0x0800c571
 800c5dc:	0800c6eb 	.word	0x0800c6eb
 800c5e0:	680b      	ldr	r3, [r1, #0]
 800c5e2:	1d1a      	adds	r2, r3, #4
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	600a      	str	r2, [r1, #0]
 800c5e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c5ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e0a3      	b.n	800c73c <_printf_i+0x1f4>
 800c5f4:	6825      	ldr	r5, [r4, #0]
 800c5f6:	6808      	ldr	r0, [r1, #0]
 800c5f8:	062e      	lsls	r6, r5, #24
 800c5fa:	f100 0304 	add.w	r3, r0, #4
 800c5fe:	d50a      	bpl.n	800c616 <_printf_i+0xce>
 800c600:	6805      	ldr	r5, [r0, #0]
 800c602:	600b      	str	r3, [r1, #0]
 800c604:	2d00      	cmp	r5, #0
 800c606:	da03      	bge.n	800c610 <_printf_i+0xc8>
 800c608:	232d      	movs	r3, #45	; 0x2d
 800c60a:	426d      	negs	r5, r5
 800c60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c610:	485e      	ldr	r0, [pc, #376]	; (800c78c <_printf_i+0x244>)
 800c612:	230a      	movs	r3, #10
 800c614:	e019      	b.n	800c64a <_printf_i+0x102>
 800c616:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c61a:	6805      	ldr	r5, [r0, #0]
 800c61c:	600b      	str	r3, [r1, #0]
 800c61e:	bf18      	it	ne
 800c620:	b22d      	sxthne	r5, r5
 800c622:	e7ef      	b.n	800c604 <_printf_i+0xbc>
 800c624:	680b      	ldr	r3, [r1, #0]
 800c626:	6825      	ldr	r5, [r4, #0]
 800c628:	1d18      	adds	r0, r3, #4
 800c62a:	6008      	str	r0, [r1, #0]
 800c62c:	0628      	lsls	r0, r5, #24
 800c62e:	d501      	bpl.n	800c634 <_printf_i+0xec>
 800c630:	681d      	ldr	r5, [r3, #0]
 800c632:	e002      	b.n	800c63a <_printf_i+0xf2>
 800c634:	0669      	lsls	r1, r5, #25
 800c636:	d5fb      	bpl.n	800c630 <_printf_i+0xe8>
 800c638:	881d      	ldrh	r5, [r3, #0]
 800c63a:	4854      	ldr	r0, [pc, #336]	; (800c78c <_printf_i+0x244>)
 800c63c:	2f6f      	cmp	r7, #111	; 0x6f
 800c63e:	bf0c      	ite	eq
 800c640:	2308      	moveq	r3, #8
 800c642:	230a      	movne	r3, #10
 800c644:	2100      	movs	r1, #0
 800c646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c64a:	6866      	ldr	r6, [r4, #4]
 800c64c:	60a6      	str	r6, [r4, #8]
 800c64e:	2e00      	cmp	r6, #0
 800c650:	bfa2      	ittt	ge
 800c652:	6821      	ldrge	r1, [r4, #0]
 800c654:	f021 0104 	bicge.w	r1, r1, #4
 800c658:	6021      	strge	r1, [r4, #0]
 800c65a:	b90d      	cbnz	r5, 800c660 <_printf_i+0x118>
 800c65c:	2e00      	cmp	r6, #0
 800c65e:	d04d      	beq.n	800c6fc <_printf_i+0x1b4>
 800c660:	4616      	mov	r6, r2
 800c662:	fbb5 f1f3 	udiv	r1, r5, r3
 800c666:	fb03 5711 	mls	r7, r3, r1, r5
 800c66a:	5dc7      	ldrb	r7, [r0, r7]
 800c66c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c670:	462f      	mov	r7, r5
 800c672:	42bb      	cmp	r3, r7
 800c674:	460d      	mov	r5, r1
 800c676:	d9f4      	bls.n	800c662 <_printf_i+0x11a>
 800c678:	2b08      	cmp	r3, #8
 800c67a:	d10b      	bne.n	800c694 <_printf_i+0x14c>
 800c67c:	6823      	ldr	r3, [r4, #0]
 800c67e:	07df      	lsls	r7, r3, #31
 800c680:	d508      	bpl.n	800c694 <_printf_i+0x14c>
 800c682:	6923      	ldr	r3, [r4, #16]
 800c684:	6861      	ldr	r1, [r4, #4]
 800c686:	4299      	cmp	r1, r3
 800c688:	bfde      	ittt	le
 800c68a:	2330      	movle	r3, #48	; 0x30
 800c68c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c690:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c694:	1b92      	subs	r2, r2, r6
 800c696:	6122      	str	r2, [r4, #16]
 800c698:	f8cd a000 	str.w	sl, [sp]
 800c69c:	464b      	mov	r3, r9
 800c69e:	aa03      	add	r2, sp, #12
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	4640      	mov	r0, r8
 800c6a4:	f7ff fee2 	bl	800c46c <_printf_common>
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	d14c      	bne.n	800c746 <_printf_i+0x1fe>
 800c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b0:	b004      	add	sp, #16
 800c6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b6:	4835      	ldr	r0, [pc, #212]	; (800c78c <_printf_i+0x244>)
 800c6b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c6bc:	6823      	ldr	r3, [r4, #0]
 800c6be:	680e      	ldr	r6, [r1, #0]
 800c6c0:	061f      	lsls	r7, r3, #24
 800c6c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c6c6:	600e      	str	r6, [r1, #0]
 800c6c8:	d514      	bpl.n	800c6f4 <_printf_i+0x1ac>
 800c6ca:	07d9      	lsls	r1, r3, #31
 800c6cc:	bf44      	itt	mi
 800c6ce:	f043 0320 	orrmi.w	r3, r3, #32
 800c6d2:	6023      	strmi	r3, [r4, #0]
 800c6d4:	b91d      	cbnz	r5, 800c6de <_printf_i+0x196>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	f023 0320 	bic.w	r3, r3, #32
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	2310      	movs	r3, #16
 800c6e0:	e7b0      	b.n	800c644 <_printf_i+0xfc>
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	f043 0320 	orr.w	r3, r3, #32
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	2378      	movs	r3, #120	; 0x78
 800c6ec:	4828      	ldr	r0, [pc, #160]	; (800c790 <_printf_i+0x248>)
 800c6ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6f2:	e7e3      	b.n	800c6bc <_printf_i+0x174>
 800c6f4:	065e      	lsls	r6, r3, #25
 800c6f6:	bf48      	it	mi
 800c6f8:	b2ad      	uxthmi	r5, r5
 800c6fa:	e7e6      	b.n	800c6ca <_printf_i+0x182>
 800c6fc:	4616      	mov	r6, r2
 800c6fe:	e7bb      	b.n	800c678 <_printf_i+0x130>
 800c700:	680b      	ldr	r3, [r1, #0]
 800c702:	6826      	ldr	r6, [r4, #0]
 800c704:	6960      	ldr	r0, [r4, #20]
 800c706:	1d1d      	adds	r5, r3, #4
 800c708:	600d      	str	r5, [r1, #0]
 800c70a:	0635      	lsls	r5, r6, #24
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	d501      	bpl.n	800c714 <_printf_i+0x1cc>
 800c710:	6018      	str	r0, [r3, #0]
 800c712:	e002      	b.n	800c71a <_printf_i+0x1d2>
 800c714:	0671      	lsls	r1, r6, #25
 800c716:	d5fb      	bpl.n	800c710 <_printf_i+0x1c8>
 800c718:	8018      	strh	r0, [r3, #0]
 800c71a:	2300      	movs	r3, #0
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	4616      	mov	r6, r2
 800c720:	e7ba      	b.n	800c698 <_printf_i+0x150>
 800c722:	680b      	ldr	r3, [r1, #0]
 800c724:	1d1a      	adds	r2, r3, #4
 800c726:	600a      	str	r2, [r1, #0]
 800c728:	681e      	ldr	r6, [r3, #0]
 800c72a:	6862      	ldr	r2, [r4, #4]
 800c72c:	2100      	movs	r1, #0
 800c72e:	4630      	mov	r0, r6
 800c730:	f7f3 fd56 	bl	80001e0 <memchr>
 800c734:	b108      	cbz	r0, 800c73a <_printf_i+0x1f2>
 800c736:	1b80      	subs	r0, r0, r6
 800c738:	6060      	str	r0, [r4, #4]
 800c73a:	6863      	ldr	r3, [r4, #4]
 800c73c:	6123      	str	r3, [r4, #16]
 800c73e:	2300      	movs	r3, #0
 800c740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c744:	e7a8      	b.n	800c698 <_printf_i+0x150>
 800c746:	6923      	ldr	r3, [r4, #16]
 800c748:	4632      	mov	r2, r6
 800c74a:	4649      	mov	r1, r9
 800c74c:	4640      	mov	r0, r8
 800c74e:	47d0      	blx	sl
 800c750:	3001      	adds	r0, #1
 800c752:	d0ab      	beq.n	800c6ac <_printf_i+0x164>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	079b      	lsls	r3, r3, #30
 800c758:	d413      	bmi.n	800c782 <_printf_i+0x23a>
 800c75a:	68e0      	ldr	r0, [r4, #12]
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	4298      	cmp	r0, r3
 800c760:	bfb8      	it	lt
 800c762:	4618      	movlt	r0, r3
 800c764:	e7a4      	b.n	800c6b0 <_printf_i+0x168>
 800c766:	2301      	movs	r3, #1
 800c768:	4632      	mov	r2, r6
 800c76a:	4649      	mov	r1, r9
 800c76c:	4640      	mov	r0, r8
 800c76e:	47d0      	blx	sl
 800c770:	3001      	adds	r0, #1
 800c772:	d09b      	beq.n	800c6ac <_printf_i+0x164>
 800c774:	3501      	adds	r5, #1
 800c776:	68e3      	ldr	r3, [r4, #12]
 800c778:	9903      	ldr	r1, [sp, #12]
 800c77a:	1a5b      	subs	r3, r3, r1
 800c77c:	42ab      	cmp	r3, r5
 800c77e:	dcf2      	bgt.n	800c766 <_printf_i+0x21e>
 800c780:	e7eb      	b.n	800c75a <_printf_i+0x212>
 800c782:	2500      	movs	r5, #0
 800c784:	f104 0619 	add.w	r6, r4, #25
 800c788:	e7f5      	b.n	800c776 <_printf_i+0x22e>
 800c78a:	bf00      	nop
 800c78c:	0800d215 	.word	0x0800d215
 800c790:	0800d226 	.word	0x0800d226

0800c794 <__retarget_lock_acquire_recursive>:
 800c794:	4770      	bx	lr

0800c796 <__retarget_lock_release_recursive>:
 800c796:	4770      	bx	lr

0800c798 <memmove>:
 800c798:	4288      	cmp	r0, r1
 800c79a:	b510      	push	{r4, lr}
 800c79c:	eb01 0402 	add.w	r4, r1, r2
 800c7a0:	d902      	bls.n	800c7a8 <memmove+0x10>
 800c7a2:	4284      	cmp	r4, r0
 800c7a4:	4623      	mov	r3, r4
 800c7a6:	d807      	bhi.n	800c7b8 <memmove+0x20>
 800c7a8:	1e43      	subs	r3, r0, #1
 800c7aa:	42a1      	cmp	r1, r4
 800c7ac:	d008      	beq.n	800c7c0 <memmove+0x28>
 800c7ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7b6:	e7f8      	b.n	800c7aa <memmove+0x12>
 800c7b8:	4402      	add	r2, r0
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	428a      	cmp	r2, r1
 800c7be:	d100      	bne.n	800c7c2 <memmove+0x2a>
 800c7c0:	bd10      	pop	{r4, pc}
 800c7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7ca:	e7f7      	b.n	800c7bc <memmove+0x24>

0800c7cc <_realloc_r>:
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	460e      	mov	r6, r1
 800c7d4:	b921      	cbnz	r1, 800c7e0 <_realloc_r+0x14>
 800c7d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c7da:	4611      	mov	r1, r2
 800c7dc:	f7ff bc54 	b.w	800c088 <_malloc_r>
 800c7e0:	b922      	cbnz	r2, 800c7ec <_realloc_r+0x20>
 800c7e2:	f7ff fc01 	bl	800bfe8 <_free_r>
 800c7e6:	4625      	mov	r5, r4
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ec:	f000 f814 	bl	800c818 <_malloc_usable_size_r>
 800c7f0:	42a0      	cmp	r0, r4
 800c7f2:	d20f      	bcs.n	800c814 <_realloc_r+0x48>
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	f7ff fc46 	bl	800c088 <_malloc_r>
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d0f2      	beq.n	800c7e8 <_realloc_r+0x1c>
 800c802:	4631      	mov	r1, r6
 800c804:	4622      	mov	r2, r4
 800c806:	f7ff fbd9 	bl	800bfbc <memcpy>
 800c80a:	4631      	mov	r1, r6
 800c80c:	4638      	mov	r0, r7
 800c80e:	f7ff fbeb 	bl	800bfe8 <_free_r>
 800c812:	e7e9      	b.n	800c7e8 <_realloc_r+0x1c>
 800c814:	4635      	mov	r5, r6
 800c816:	e7e7      	b.n	800c7e8 <_realloc_r+0x1c>

0800c818 <_malloc_usable_size_r>:
 800c818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c81c:	1f18      	subs	r0, r3, #4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bfbc      	itt	lt
 800c822:	580b      	ldrlt	r3, [r1, r0]
 800c824:	18c0      	addlt	r0, r0, r3
 800c826:	4770      	bx	lr

0800c828 <_init>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	bf00      	nop
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr

0800c834 <_fini>:
 800c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c836:	bf00      	nop
 800c838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83a:	bc08      	pop	{r3}
 800c83c:	469e      	mov	lr, r3
 800c83e:	4770      	bx	lr
