
BMSv1.0_Unit_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  0800baa0  0800baa0  0001baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c42c  0800c42c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800c42c  0800c42c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c42c  0800c42c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c42c  0800c42c  0001c42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c430  0800c430  0001c430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000048fc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004984  20004984  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159ea  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030b1  00000000  00000000  00035aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00038b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d88  00000000  00000000  00039a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebbf  00000000  00000000  0003a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153d6  00000000  00000000  0005935f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3475  00000000  00000000  0006e735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00121baa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040e8  00000000  00000000  00121c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba88 	.word	0x0800ba88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800ba88 	.word	0x0800ba88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <SELECT+0x1c>)
 8000898:	f002 fd4a 	bl	8003330 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f001 fbd5 	bl	800204c <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000400 	.word	0x48000400

080008ac <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <DESELECT+0x1c>)
 80008b8:	f002 fd3a 	bl	8003330 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f001 fbc5 	bl	800204c <HAL_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	48000400 	.word	0x48000400

080008cc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008d6:	bf00      	nop
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <SPI_TxByte+0x30>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d1f8      	bne.n	80008d8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	2201      	movs	r2, #1
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <SPI_TxByte+0x30>)
 80008ee:	f004 f8ea 	bl	8004ac6 <HAL_SPI_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200002f4 	.word	0x200002f4

08000900 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800090c:	bf00      	nop
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <SPI_TxBuffer+0x30>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	2b02      	cmp	r3, #2
 800091a:	d1f8      	bne.n	800090e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800091c:	887a      	ldrh	r2, [r7, #2]
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <SPI_TxBuffer+0x30>)
 8000924:	f004 f8cf 	bl	8004ac6 <HAL_SPI_Transmit>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002f4 	.word	0x200002f4

08000934 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800093a:	23ff      	movs	r3, #255	; 0xff
 800093c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800093e:	bf00      	nop
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <SPI_RxByte+0x34>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1f8      	bne.n	8000940 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800094e:	1dba      	adds	r2, r7, #6
 8000950:	1df9      	adds	r1, r7, #7
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <SPI_RxByte+0x34>)
 800095a:	f004 fa22 	bl	8004da2 <HAL_SPI_TransmitReceive>

	return data;
 800095e:	79bb      	ldrb	r3, [r7, #6]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200002f4 	.word	0x200002f4

0800096c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000974:	f7ff ffde 	bl	8000934 <SPI_RxByte>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	701a      	strb	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <SD_ReadyWait+0x30>)
 8000990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000994:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000996:	f7ff ffcd 	bl	8000934 <SPI_RxByte>
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2bff      	cmp	r3, #255	; 0xff
 80009a2:	d004      	beq.n	80009ae <SD_ReadyWait+0x26>
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SD_ReadyWait+0x30>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f3      	bne.n	8000996 <SD_ReadyWait+0xe>

	return res;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20002906 	.word	0x20002906

080009bc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80009c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009c6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80009c8:	f7ff ff70 	bl	80008ac <DESELECT>
	for(int i = 0; i < 10; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	e005      	b.n	80009de <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80009d2:	20ff      	movs	r0, #255	; 0xff
 80009d4:	f7ff ff7a 	bl	80008cc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	3301      	adds	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b09      	cmp	r3, #9
 80009e2:	ddf6      	ble.n	80009d2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80009e4:	f7ff ff52 	bl	800088c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80009fc:	2395      	movs	r3, #149	; 0x95
 80009fe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a00:	463b      	mov	r3, r7
 8000a02:	2106      	movs	r1, #6
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff7b 	bl	8000900 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a0a:	e002      	b.n	8000a12 <SD_PowerOn+0x56>
	{
		cnt--;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a12:	f7ff ff8f 	bl	8000934 <SPI_RxByte>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d002      	beq.n	8000a22 <SD_PowerOn+0x66>
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f4      	bne.n	8000a0c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a22:	f7ff ff43 	bl	80008ac <DESELECT>
	SPI_TxByte(0XFF);
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	f7ff ff50 	bl	80008cc <SPI_TxByte>

	PowerFlag = 1;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <SD_PowerOn+0x80>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000a5 	.word	0x200000a5

08000a40 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <SD_PowerOff+0x14>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	200000a5 	.word	0x200000a5

08000a58 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <SD_CheckPower+0x14>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000a5 	.word	0x200000a5

08000a70 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <SD_RxDataBlock+0x5c>)
 8000a7c:	22c8      	movs	r2, #200	; 0xc8
 8000a7e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000a80:	f7ff ff58 	bl	8000934 <SPI_RxByte>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d104      	bne.n	8000a98 <SD_RxDataBlock+0x28>
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <SD_RxDataBlock+0x5c>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f3      	bne.n	8000a80 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2bfe      	cmp	r3, #254	; 0xfe
 8000a9c:	d001      	beq.n	8000aa2 <SD_RxDataBlock+0x32>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e00f      	b.n	8000ac2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5f 	bl	800096c <SPI_RxBytePtr>
	} while(len--);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	603a      	str	r2, [r7, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f4      	bne.n	8000aa2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000ab8:	f7ff ff3c 	bl	8000934 <SPI_RxByte>
	SPI_RxByte();
 8000abc:	f7ff ff3a 	bl	8000934 <SPI_RxByte>

	return TRUE;
 8000ac0:	2301      	movs	r3, #1
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20002908 	.word	0x20002908

08000ad0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ae0:	f7ff ff52 	bl	8000988 <SD_ReadyWait>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2bff      	cmp	r3, #255	; 0xff
 8000ae8:	d001      	beq.n	8000aee <SD_TxDataBlock+0x1e>
 8000aea:	2300      	movs	r3, #0
 8000aec:	e02f      	b.n	8000b4e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff feeb 	bl	80008cc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	2bfd      	cmp	r3, #253	; 0xfd
 8000afa:	d020      	beq.n	8000b3e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fefd 	bl	8000900 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b06:	f7ff ff15 	bl	8000934 <SPI_RxByte>
		SPI_RxByte();
 8000b0a:	f7ff ff13 	bl	8000934 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b0e:	e00b      	b.n	8000b28 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b10:	f7ff ff10 	bl	8000934 <SPI_RxByte>
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	2b05      	cmp	r3, #5
 8000b20:	d006      	beq.n	8000b30 <SD_TxDataBlock+0x60>
			i++;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	3301      	adds	r3, #1
 8000b26:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	2b40      	cmp	r3, #64	; 0x40
 8000b2c:	d9f0      	bls.n	8000b10 <SD_TxDataBlock+0x40>
 8000b2e:	e000      	b.n	8000b32 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b30:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b32:	bf00      	nop
 8000b34:	f7ff fefe 	bl	8000934 <SPI_RxByte>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0fa      	beq.n	8000b34 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	f003 031f 	and.w	r3, r3, #31
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d101      	bne.n	8000b4c <SD_TxDataBlock+0x7c>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	6039      	str	r1, [r7, #0]
 8000b60:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000b62:	f7ff ff11 	bl	8000988 <SD_ReadyWait>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2bff      	cmp	r3, #255	; 0xff
 8000b6a:	d001      	beq.n	8000b70 <SD_SendCmd+0x1a>
 8000b6c:	23ff      	movs	r3, #255	; 0xff
 8000b6e:	e042      	b.n	8000bf6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff feaa 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fea4 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fe9e 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe98 	bl	80008cc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe93 	bl	80008cc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b40      	cmp	r3, #64	; 0x40
 8000baa:	d102      	bne.n	8000bb2 <SD_SendCmd+0x5c>
 8000bac:	2395      	movs	r3, #149	; 0x95
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e007      	b.n	8000bc2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b48      	cmp	r3, #72	; 0x48
 8000bb6:	d102      	bne.n	8000bbe <SD_SendCmd+0x68>
 8000bb8:	2387      	movs	r3, #135	; 0x87
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e001      	b.n	8000bc2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fe81 	bl	80008cc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b4c      	cmp	r3, #76	; 0x4c
 8000bce:	d101      	bne.n	8000bd4 <SD_SendCmd+0x7e>
 8000bd0:	f7ff feb0 	bl	8000934 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000bd8:	f7ff feac 	bl	8000934 <SPI_RxByte>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000be0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da05      	bge.n	8000bf4 <SD_SendCmd+0x9e>
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	73bb      	strb	r3, [r7, #14]
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f1      	bne.n	8000bd8 <SD_SendCmd+0x82>

	return res;
 8000bf4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SD_disk_initialize+0x14>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e0d6      	b.n	8000dc2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c14:	4b6d      	ldr	r3, [pc, #436]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <SD_disk_initialize+0x2a>
 8000c22:	4b6a      	ldr	r3, [pc, #424]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	e0cb      	b.n	8000dc2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000c2a:	f7ff fec7 	bl	80009bc <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c2e:	f7ff fe2d 	bl	800088c <SELECT>

	/* check disk type */
	type = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c36:	2100      	movs	r1, #0
 8000c38:	2040      	movs	r0, #64	; 0x40
 8000c3a:	f7ff ff8c 	bl	8000b56 <SD_SendCmd>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	f040 80a6 	bne.w	8000d92 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c52:	2048      	movs	r0, #72	; 0x48
 8000c54:	f7ff ff7f 	bl	8000b56 <SD_SendCmd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d158      	bne.n	8000d10 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e00c      	b.n	8000c7e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000c64:	7bfc      	ldrb	r4, [r7, #15]
 8000c66:	f7ff fe65 	bl	8000934 <SPI_RxByte>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4423      	add	r3, r4
 8000c74:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d9ef      	bls.n	8000c64 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c84:	7abb      	ldrb	r3, [r7, #10]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	f040 8083 	bne.w	8000d92 <SD_disk_initialize+0x192>
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	2baa      	cmp	r3, #170	; 0xaa
 8000c90:	d17f      	bne.n	8000d92 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c92:	2100      	movs	r1, #0
 8000c94:	2077      	movs	r0, #119	; 0x77
 8000c96:	f7ff ff5e 	bl	8000b56 <SD_SendCmd>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d807      	bhi.n	8000cb0 <SD_disk_initialize+0xb0>
 8000ca0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ca4:	2069      	movs	r0, #105	; 0x69
 8000ca6:	f7ff ff56 	bl	8000b56 <SD_SendCmd>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000cb0:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1eb      	bne.n	8000c92 <SD_disk_initialize+0x92>
 8000cba:	e000      	b.n	8000cbe <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cbc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d064      	beq.n	8000d92 <SD_disk_initialize+0x192>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	207a      	movs	r0, #122	; 0x7a
 8000ccc:	f7ff ff43 	bl	8000b56 <SD_SendCmd>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d15d      	bne.n	8000d92 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e00c      	b.n	8000cf6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000cdc:	7bfc      	ldrb	r4, [r7, #15]
 8000cde:	f7ff fe29 	bl	8000934 <SPI_RxByte>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4423      	add	r3, r4
 8000cec:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d9ef      	bls.n	8000cdc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000cfc:	7a3b      	ldrb	r3, [r7, #8]
 8000cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SD_disk_initialize+0x10a>
 8000d06:	230c      	movs	r3, #12
 8000d08:	e000      	b.n	8000d0c <SD_disk_initialize+0x10c>
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	73bb      	strb	r3, [r7, #14]
 8000d0e:	e040      	b.n	8000d92 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d10:	2100      	movs	r1, #0
 8000d12:	2077      	movs	r0, #119	; 0x77
 8000d14:	f7ff ff1f 	bl	8000b56 <SD_SendCmd>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d808      	bhi.n	8000d30 <SD_disk_initialize+0x130>
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2069      	movs	r0, #105	; 0x69
 8000d22:	f7ff ff18 	bl	8000b56 <SD_SendCmd>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d801      	bhi.n	8000d30 <SD_disk_initialize+0x130>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e000      	b.n	8000d32 <SD_disk_initialize+0x132>
 8000d30:	2301      	movs	r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d10e      	bne.n	8000d58 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2077      	movs	r0, #119	; 0x77
 8000d3e:	f7ff ff0a 	bl	8000b56 <SD_SendCmd>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d80e      	bhi.n	8000d66 <SD_disk_initialize+0x166>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2069      	movs	r0, #105	; 0x69
 8000d4c:	f7ff ff03 	bl	8000b56 <SD_SendCmd>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <SD_disk_initialize+0x166>
 8000d56:	e00d      	b.n	8000d74 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2041      	movs	r0, #65	; 0x41
 8000d5c:	f7ff fefb 	bl	8000b56 <SD_SendCmd>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e1      	bne.n	8000d34 <SD_disk_initialize+0x134>
 8000d70:	e000      	b.n	8000d74 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d72:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <SD_disk_initialize+0x1d0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d007      	beq.n	8000d8e <SD_disk_initialize+0x18e>
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	2050      	movs	r0, #80	; 0x50
 8000d84:	f7ff fee7 	bl	8000b56 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SD_disk_initialize+0x192>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <SD_disk_initialize+0x1d4>)
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000d98:	f7ff fd88 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000d9c:	f7ff fdca 	bl	8000934 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d008      	beq.n	8000db8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e001      	b.n	8000dbc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000db8:	f7ff fe42 	bl	8000a40 <SD_PowerOff>
	}

	return Stat;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <SD_disk_initialize+0x1cc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20002908 	.word	0x20002908
 8000dd4:	200000a4 	.word	0x200000a4

08000dd8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_status+0x14>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e002      	b.n	8000df2 <SD_disk_status+0x1a>
	return Stat;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SD_disk_status+0x28>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000000 	.word	0x20000000

08000e04 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <SD_disk_read+0x1c>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <SD_disk_read+0x20>
 8000e20:	2304      	movs	r3, #4
 8000e22:	e051      	b.n	8000ec8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <SD_disk_read+0xcc>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SD_disk_read+0x32>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e048      	b.n	8000ec8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <SD_disk_read+0xd0>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <SD_disk_read+0x44>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	025b      	lsls	r3, r3, #9
 8000e46:	607b      	str	r3, [r7, #4]

	SELECT();
 8000e48:	f7ff fd20 	bl	800088c <SELECT>

	if (count == 1)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d111      	bne.n	8000e76 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	2051      	movs	r0, #81	; 0x51
 8000e56:	f7ff fe7e 	bl	8000b56 <SD_SendCmd>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d129      	bne.n	8000eb4 <SD_disk_read+0xb0>
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f7ff fe03 	bl	8000a70 <SD_RxDataBlock>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d021      	beq.n	8000eb4 <SD_disk_read+0xb0>
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	e01e      	b.n	8000eb4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2052      	movs	r0, #82	; 0x52
 8000e7a:	f7ff fe6c 	bl	8000b56 <SD_SendCmd>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d117      	bne.n	8000eb4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e88:	68b8      	ldr	r0, [r7, #8]
 8000e8a:	f7ff fdf1 	bl	8000a70 <SD_RxDataBlock>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00a      	beq.n	8000eaa <SD_disk_read+0xa6>
				buff += 512;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1ed      	bne.n	8000e84 <SD_disk_read+0x80>
 8000ea8:	e000      	b.n	8000eac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000eaa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	204c      	movs	r0, #76	; 0x4c
 8000eb0:	f7ff fe51 	bl	8000b56 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000eb4:	f7ff fcfa 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000eb8:	f7ff fd3c 	bl	8000934 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	200000a4 	.word	0x200000a4

08000ed8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <SD_disk_write+0x1c>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <SD_disk_write+0x20>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e06b      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <SD_disk_write+0x100>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SD_disk_write+0x32>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e062      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <SD_disk_write+0x100>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SD_disk_write+0x44>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e059      	b.n	8000fd0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <SD_disk_write+0x104>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <SD_disk_write+0x56>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f2e:	f7ff fcad 	bl	800088c <SELECT>

	if (count == 1)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d110      	bne.n	8000f5a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	2058      	movs	r0, #88	; 0x58
 8000f3c:	f7ff fe0b 	bl	8000b56 <SD_SendCmd>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d13a      	bne.n	8000fbc <SD_disk_write+0xe4>
 8000f46:	21fe      	movs	r1, #254	; 0xfe
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f7ff fdc1 	bl	8000ad0 <SD_TxDataBlock>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d033      	beq.n	8000fbc <SD_disk_write+0xe4>
			count = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	e030      	b.n	8000fbc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <SD_disk_write+0x104>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	2077      	movs	r0, #119	; 0x77
 8000f6a:	f7ff fdf4 	bl	8000b56 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	2057      	movs	r0, #87	; 0x57
 8000f72:	f7ff fdf0 	bl	8000b56 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	2059      	movs	r0, #89	; 0x59
 8000f7a:	f7ff fdec 	bl	8000b56 <SD_SendCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d11b      	bne.n	8000fbc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f84:	21fc      	movs	r1, #252	; 0xfc
 8000f86:	68b8      	ldr	r0, [r7, #8]
 8000f88:	f7ff fda2 	bl	8000ad0 <SD_TxDataBlock>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00a      	beq.n	8000fa8 <SD_disk_write+0xd0>
				buff += 512;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1ee      	bne.n	8000f84 <SD_disk_write+0xac>
 8000fa6:	e000      	b.n	8000faa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fa8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000faa:	21fd      	movs	r1, #253	; 0xfd
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fd8f 	bl	8000ad0 <SD_TxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <SD_disk_write+0xe4>
			{
				count = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000fbc:	f7ff fc76 	bl	80008ac <DESELECT>
	SPI_RxByte();
 8000fc0:	f7ff fcb8 	bl	8000934 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	200000a4 	.word	0x200000a4

08000fe0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b08b      	sub	sp, #44	; 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	603a      	str	r2, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	460b      	mov	r3, r1
 8000fee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SD_disk_ioctl+0x1e>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e115      	b.n	800122a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	2b05      	cmp	r3, #5
 8001008:	d124      	bne.n	8001054 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d012      	beq.n	8001038 <SD_disk_ioctl+0x58>
 8001012:	2b02      	cmp	r3, #2
 8001014:	dc1a      	bgt.n	800104c <SD_disk_ioctl+0x6c>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <SD_disk_ioctl+0x40>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d006      	beq.n	800102c <SD_disk_ioctl+0x4c>
 800101e:	e015      	b.n	800104c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001020:	f7ff fd0e 	bl	8000a40 <SD_PowerOff>
			res = RES_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800102a:	e0fc      	b.n	8001226 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800102c:	f7ff fcc6 	bl	80009bc <SD_PowerOn>
			res = RES_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001036:	e0f6      	b.n	8001226 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	1c5c      	adds	r4, r3, #1
 800103c:	f7ff fd0c 	bl	8000a58 <SD_CheckPower>
 8001040:	4603      	mov	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800104a:	e0ec      	b.n	8001226 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800104c:	2304      	movs	r3, #4
 800104e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001052:	e0e8      	b.n	8001226 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001054:	4b77      	ldr	r3, [pc, #476]	; (8001234 <SD_disk_ioctl+0x254>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SD_disk_ioctl+0x86>
 8001062:	2303      	movs	r3, #3
 8001064:	e0e1      	b.n	800122a <SD_disk_ioctl+0x24a>

		SELECT();
 8001066:	f7ff fc11 	bl	800088c <SELECT>

		switch (ctrl)
 800106a:	79bb      	ldrb	r3, [r7, #6]
 800106c:	2b0d      	cmp	r3, #13
 800106e:	f200 80cb 	bhi.w	8001208 <SD_disk_ioctl+0x228>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <SD_disk_ioctl+0x98>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001173 	.word	0x08001173
 800107c:	080010b1 	.word	0x080010b1
 8001080:	08001163 	.word	0x08001163
 8001084:	08001209 	.word	0x08001209
 8001088:	08001209 	.word	0x08001209
 800108c:	08001209 	.word	0x08001209
 8001090:	08001209 	.word	0x08001209
 8001094:	08001209 	.word	0x08001209
 8001098:	08001209 	.word	0x08001209
 800109c:	08001209 	.word	0x08001209
 80010a0:	08001209 	.word	0x08001209
 80010a4:	08001185 	.word	0x08001185
 80010a8:	080011a9 	.word	0x080011a9
 80010ac:	080011cd 	.word	0x080011cd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010b0:	2100      	movs	r1, #0
 80010b2:	2049      	movs	r0, #73	; 0x49
 80010b4:	f7ff fd4f 	bl	8000b56 <SD_SendCmd>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 80a8 	bne.w	8001210 <SD_disk_ioctl+0x230>
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2110      	movs	r1, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fcd2 	bl	8000a70 <SD_RxDataBlock>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 809e 	beq.w	8001210 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	099b      	lsrs	r3, r3, #6
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10e      	bne.n	80010fc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80010de:	7d7b      	ldrb	r3, [r7, #21]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	7d3b      	ldrb	r3, [r7, #20]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80010f2:	8bfb      	ldrh	r3, [r7, #30]
 80010f4:	029a      	lsls	r2, r3, #10
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e02e      	b.n	800115a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80010fc:	7c7b      	ldrb	r3, [r7, #17]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	b2da      	uxtb	r2, r3
 8001104:	7dbb      	ldrb	r3, [r7, #22]
 8001106:	09db      	lsrs	r3, r3, #7
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	7d7b      	ldrb	r3, [r7, #21]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0306 	and.w	r3, r3, #6
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3302      	adds	r3, #2
 8001120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001124:	7d3b      	ldrb	r3, [r7, #20]
 8001126:	099b      	lsrs	r3, r3, #6
 8001128:	b2db      	uxtb	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	7cfb      	ldrb	r3, [r7, #19]
 800112e:	b29b      	uxth	r3, r3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	b29b      	uxth	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b29a      	uxth	r2, r3
 8001138:	7cbb      	ldrb	r3, [r7, #18]
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	b29b      	uxth	r3, r3
 800113e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001142:	b29b      	uxth	r3, r3
 8001144:	4413      	add	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	3301      	adds	r3, #1
 800114a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800114c:	8bfa      	ldrh	r2, [r7, #30]
 800114e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001152:	3b09      	subs	r3, #9
 8001154:	409a      	lsls	r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001160:	e056      	b.n	8001210 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001168:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001170:	e055      	b.n	800121e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001172:	f7ff fc09 	bl	8000988 <SD_ReadyWait>
 8001176:	4603      	mov	r3, r0
 8001178:	2bff      	cmp	r3, #255	; 0xff
 800117a:	d14b      	bne.n	8001214 <SD_disk_ioctl+0x234>
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001182:	e047      	b.n	8001214 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001184:	2100      	movs	r1, #0
 8001186:	2049      	movs	r0, #73	; 0x49
 8001188:	f7ff fce5 	bl	8000b56 <SD_SendCmd>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d142      	bne.n	8001218 <SD_disk_ioctl+0x238>
 8001192:	2110      	movs	r1, #16
 8001194:	6a38      	ldr	r0, [r7, #32]
 8001196:	f7ff fc6b 	bl	8000a70 <SD_RxDataBlock>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03b      	beq.n	8001218 <SD_disk_ioctl+0x238>
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011a6:	e037      	b.n	8001218 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011a8:	2100      	movs	r1, #0
 80011aa:	204a      	movs	r0, #74	; 0x4a
 80011ac:	f7ff fcd3 	bl	8000b56 <SD_SendCmd>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d132      	bne.n	800121c <SD_disk_ioctl+0x23c>
 80011b6:	2110      	movs	r1, #16
 80011b8:	6a38      	ldr	r0, [r7, #32]
 80011ba:	f7ff fc59 	bl	8000a70 <SD_RxDataBlock>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d02b      	beq.n	800121c <SD_disk_ioctl+0x23c>
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011ca:	e027      	b.n	800121c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80011cc:	2100      	movs	r1, #0
 80011ce:	207a      	movs	r0, #122	; 0x7a
 80011d0:	f7ff fcc1 	bl	8000b56 <SD_SendCmd>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011e0:	e00b      	b.n	80011fa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80011e2:	6a3c      	ldr	r4, [r7, #32]
 80011e4:	1c63      	adds	r3, r4, #1
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	f7ff fba4 	bl	8000934 <SPI_RxByte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80011f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f4:	3301      	adds	r3, #1
 80011f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d9ef      	bls.n	80011e2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001208:	2304      	movs	r3, #4
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800120e:	e006      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001210:	bf00      	nop
 8001212:	e004      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001214:	bf00      	nop
 8001216:	e002      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <SD_disk_ioctl+0x23e>
			break;
 800121c:	bf00      	nop
		}

		DESELECT();
 800121e:	f7ff fb45 	bl	80008ac <DESELECT>
		SPI_RxByte();
 8001222:	f7ff fb87 	bl	8000934 <SPI_RxByte>
	}

	return res;
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800122a:	4618      	mov	r0, r3
 800122c:	372c      	adds	r7, #44	; 0x2c
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000

08001238 <bufsize>:

uint8_t uart_rx_data[10];  //  uart receive buffer of 10 bytes

/*******************************************************************************/
int bufsize (char *buf)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001244:	e002      	b.n	800124c <bufsize+0x14>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f6      	bne.n	8001246 <bufsize+0xe>
	return i;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <clear_buffer>:

void clear_buffer (void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e007      	b.n	8001284 <clear_buffer+0x1c>
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <clear_buffer+0x34>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3301      	adds	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	dbf3      	blt.n	8001274 <clear_buffer+0xc>
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200013e8 	.word	0x200013e8

080012a0 <send_uart>:

void send_uart (char *string)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7fe ff91 	bl	80001d0 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <send_uart+0x2c>)
 80012be:	f004 f935 	bl	800552c <HAL_UART_Transmit>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000180c 	.word	0x2000180c

080012d0 <write_to_csvfile>:

void write_to_csvfile (void)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af04      	add	r7, sp, #16

		  dummy_timer =+ 1;
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <write_to_csvfile+0xac>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
		  dummy_cell_votlages =+ 0.3;
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <write_to_csvfile+0xb0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		  dummy_pack_voltage =+ 11;
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <write_to_csvfile+0xb4>)
 80012e4:	220b      	movs	r2, #11
 80012e6:	701a      	strb	r2, [r3, #0]
		  dummy_pack_current =+ 0.5;
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <write_to_csvfile+0xb8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
		  dummy_temperature =+ 5;
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <write_to_csvfile+0xbc>)
 80012f0:	2205      	movs	r2, #5
 80012f2:	701a      	strb	r2, [r3, #0]

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80012f4:	2203      	movs	r2, #3
 80012f6:	4926      	ldr	r1, [pc, #152]	; (8001390 <write_to_csvfile+0xc0>)
 80012f8:	4826      	ldr	r0, [pc, #152]	; (8001394 <write_to_csvfile+0xc4>)
 80012fa:	f008 f909 	bl	8009510 <f_open>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <write_to_csvfile+0xc8>)
 8001304:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <write_to_csvfile+0xc4>)
 8001308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130c:	330c      	adds	r3, #12
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	4820      	ldr	r0, [pc, #128]	; (8001394 <write_to_csvfile+0xc4>)
 8001314:	f009 f9c8 	bl	800a6a8 <f_lseek>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <write_to_csvfile+0xc8>)
 800131e:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%d,%d,%d,%d,%d\r\n", dummy_timer, dummy_cell_votlages, dummy_pack_voltage, dummy_pack_current, dummy_temperature);
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <write_to_csvfile+0xac>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <write_to_csvfile+0xb0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461c      	mov	r4, r3
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <write_to_csvfile+0xb4>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <write_to_csvfile+0xb8>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <write_to_csvfile+0xbc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	9101      	str	r1, [sp, #4]
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	4623      	mov	r3, r4
 8001344:	4602      	mov	r2, r0
 8001346:	4915      	ldr	r1, [pc, #84]	; (800139c <write_to_csvfile+0xcc>)
 8001348:	4815      	ldr	r0, [pc, #84]	; (80013a0 <write_to_csvfile+0xd0>)
 800134a:	f009 ff7d 	bl	800b248 <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <write_to_csvfile+0xd0>)
 8001350:	f7ff ff72 	bl	8001238 <bufsize>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <write_to_csvfile+0xd4>)
 800135a:	4911      	ldr	r1, [pc, #68]	; (80013a0 <write_to_csvfile+0xd0>)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <write_to_csvfile+0xc4>)
 800135e:	f008 fe27 	bl	8009fb0 <f_write>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <write_to_csvfile+0xc8>)
 8001368:	701a      	strb	r2, [r3, #0]
		  //send_uart(buffer);
		  f_close (&fil);
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <write_to_csvfile+0xc4>)
 800136c:	f009 f971 	bl	800a652 <f_close>

		  clear_buffer();
 8001370:	f7ff ff7a 	bl	8001268 <clear_buffer>
}
 8001374:	bf00      	nop
 8001376:	3704      	adds	r7, #4
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	200013e0 	.word	0x200013e0
 8001380:	20002904 	.word	0x20002904
 8001384:	200002f0 	.word	0x200002f0
 8001388:	200018c8 	.word	0x200018c8
 800138c:	200017f4 	.word	0x200017f4
 8001390:	0800baa0 	.word	0x0800baa0
 8001394:	200018d8 	.word	0x200018d8
 8001398:	20001800 	.word	0x20001800
 800139c:	0800baac 	.word	0x0800baac
 80013a0:	200013e8 	.word	0x200013e8
 80013a4:	200017f0 	.word	0x200017f0

080013a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f001 f950 	bl	800265c <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2 )
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d102      	bne.n	80013ca <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		CAN_data_checkFlag = 1;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
	}
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20001804 	.word	0x20001804
 80013d8:	200018ac 	.word	0x200018ac
 80013dc:	200000a8 	.word	0x200000a8

080013e0 <HAL_UART_RxCpltCallback>:

uint8_t Rx_data[10];  //  creating a buffer of 10 bytes
int uart_rx_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, uart_rx_data, 4);
 80013e8:	2204      	movs	r2, #4
 80013ea:	4905      	ldr	r1, [pc, #20]	; (8001400 <HAL_UART_RxCpltCallback+0x20>)
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <HAL_UART_RxCpltCallback+0x24>)
 80013ee:	f004 f931 	bl	8005654 <HAL_UART_Receive_IT>
  uart_rx_flag = 1;
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_UART_RxCpltCallback+0x28>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200018cc 	.word	0x200018cc
 8001404:	2000180c 	.word	0x2000180c
 8001408:	200000ac 	.word	0x200000ac

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001412:	f000 fdb5 	bl	8001f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001416:	f000 fa5f 	bl	80018d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141a:	f000 fb79 	bl	8001b10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800141e:	f000 fb47 	bl	8001ab0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001422:	f000 fb07 	bl	8001a34 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001426:	f005 fa87 	bl	8006938 <MX_FATFS_Init>
  MX_CAN_Init();
 800142a:	f000 faaf 	bl	800198c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  HAL_Delay(250);
 800142e:	20fa      	movs	r0, #250	; 0xfa
 8001430:	f000 fe0c 	bl	800204c <HAL_Delay>

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 8001434:	491c      	ldr	r1, [pc, #112]	; (80014a8 <main+0x9c>)
 8001436:	481d      	ldr	r0, [pc, #116]	; (80014ac <main+0xa0>)
 8001438:	f009 ff06 	bl	800b248 <siprintf>
  send_uart(buffer);
 800143c:	481b      	ldr	r0, [pc, #108]	; (80014ac <main+0xa0>)
 800143e:	f7ff ff2f 	bl	80012a0 <send_uart>
  clear_buffer();
 8001442:	f7ff ff11 	bl	8001268 <clear_buffer>

  /*CAN Initializations*/
  HAL_CAN_Start(&hcan);
 8001446:	481a      	ldr	r0, [pc, #104]	; (80014b0 <main+0xa4>)
 8001448:	f000 ffe9 	bl	800241e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //using FIFO0 for RX callback reception
 800144c:	2102      	movs	r1, #2
 800144e:	4818      	ldr	r0, [pc, #96]	; (80014b0 <main+0xa4>)
 8001450:	f001 fa16 	bl	8002880 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; //data
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <main+0xa8>)
 8001456:	2202      	movs	r2, #2
 8001458:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <main+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <main+0xa8>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  //id
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <main+0xa8>)
 8001468:	f240 4246 	movw	r2, #1094	; 0x446
 800146c:	601a      	str	r2, [r3, #0]

  //populate data to Txdata bytes
  TxData[0] = 11;
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <main+0xac>)
 8001470:	220b      	movs	r2, #11
 8001472:	701a      	strb	r2, [r3, #0]
  TxData[1] = 100;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <main+0xac>)
 8001476:	2264      	movs	r2, #100	; 0x64
 8001478:	705a      	strb	r2, [r3, #1]
  //send CAN message // TO DO:check CAN message reception on BluePill
  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);

  HAL_UART_Receive_IT (&huart2, uart_rx_data, 4); //set interrupt for uart rx
 800147a:	2204      	movs	r2, #4
 800147c:	490f      	ldr	r1, [pc, #60]	; (80014bc <main+0xb0>)
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <main+0xb4>)
 8001480:	f004 f8e8 	bl	8005654 <HAL_UART_Receive_IT>

  //mount SD card and check SD card mounting status
  fresult = f_mount(&fs, "/", 1);
 8001484:	2201      	movs	r2, #1
 8001486:	490f      	ldr	r1, [pc, #60]	; (80014c4 <main+0xb8>)
 8001488:	480f      	ldr	r0, [pc, #60]	; (80014c8 <main+0xbc>)
 800148a:	f007 fff7 	bl	800947c <f_mount>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <main+0xc0>)
 8001494:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK)
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <main+0xc0>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <main+0xc8>
  	{
  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <main+0xc4>)
 80014a0:	f7ff fefe 	bl	80012a0 <send_uart>
 80014a4:	e019      	b.n	80014da <main+0xce>
 80014a6:	bf00      	nop
 80014a8:	0800bac0 	.word	0x0800bac0
 80014ac:	200013e8 	.word	0x200013e8
 80014b0:	200013a8 	.word	0x200013a8
 80014b4:	20001894 	.word	0x20001894
 80014b8:	200017e8 	.word	0x200017e8
 80014bc:	200018cc 	.word	0x200018cc
 80014c0:	2000180c 	.word	0x2000180c
 80014c4:	0800bae8 	.word	0x0800bae8
 80014c8:	20000378 	.word	0x20000378
 80014cc:	20001800 	.word	0x20001800
 80014d0:	0800baec 	.word	0x0800baec

  	}
  	else
  	{
  		send_uart("SD CARD mounted successfully...\r\n");
 80014d4:	48bc      	ldr	r0, [pc, #752]	; (80017c8 <main+0x3bc>)
 80014d6:	f7ff fee3 	bl	80012a0 <send_uart>
  	}

  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 80014da:	4abc      	ldr	r2, [pc, #752]	; (80017cc <main+0x3c0>)
 80014dc:	49bc      	ldr	r1, [pc, #752]	; (80017d0 <main+0x3c4>)
 80014de:	48bd      	ldr	r0, [pc, #756]	; (80017d4 <main+0x3c8>)
 80014e0:	f009 fc16 	bl	800ad10 <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80014e4:	4bb9      	ldr	r3, [pc, #740]	; (80017cc <main+0x3c0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ec:	3314      	adds	r3, #20
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	1e9a      	subs	r2, r3, #2
 80014f2:	4bb6      	ldr	r3, [pc, #728]	; (80017cc <main+0x3c0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fa:	3302      	adds	r3, #2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	fb03 f302 	mul.w	r3, r3, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f928 	bl	8000758 <__aeabi_ui2d>
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4bb2      	ldr	r3, [pc, #712]	; (80017d8 <main+0x3cc>)
 800150e:	f7fe feb7 	bl	8000280 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff f997 	bl	800084c <__aeabi_d2uiz>
 800151e:	4603      	mov	r3, r0
 8001520:	4aae      	ldr	r2, [pc, #696]	; (80017dc <main+0x3d0>)
 8001522:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 8001524:	4bad      	ldr	r3, [pc, #692]	; (80017dc <main+0x3d0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	49ad      	ldr	r1, [pc, #692]	; (80017e0 <main+0x3d4>)
 800152c:	48ad      	ldr	r0, [pc, #692]	; (80017e4 <main+0x3d8>)
 800152e:	f009 fe8b 	bl	800b248 <siprintf>
  	send_uart(buffer);
 8001532:	48ac      	ldr	r0, [pc, #688]	; (80017e4 <main+0x3d8>)
 8001534:	f7ff feb4 	bl	80012a0 <send_uart>
  	clear_buffer();
 8001538:	f7ff fe96 	bl	8001268 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800153c:	4ba3      	ldr	r3, [pc, #652]	; (80017cc <main+0x3c0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001544:	3302      	adds	r3, #2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4ba1      	ldr	r3, [pc, #644]	; (80017d0 <main+0x3c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fb03 f302 	mul.w	r3, r3, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f900 	bl	8000758 <__aeabi_ui2d>
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4b9e      	ldr	r3, [pc, #632]	; (80017d8 <main+0x3cc>)
 800155e:	f7fe fe8f 	bl	8000280 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff f96f 	bl	800084c <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	4a9d      	ldr	r2, [pc, #628]	; (80017e8 <main+0x3dc>)
 8001572:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 8001574:	4b9c      	ldr	r3, [pc, #624]	; (80017e8 <main+0x3dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	499c      	ldr	r1, [pc, #624]	; (80017ec <main+0x3e0>)
 800157c:	4899      	ldr	r0, [pc, #612]	; (80017e4 <main+0x3d8>)
 800157e:	f009 fe63 	bl	800b248 <siprintf>
  	send_uart(buffer);
 8001582:	4898      	ldr	r0, [pc, #608]	; (80017e4 <main+0x3d8>)
 8001584:	f7ff fe8c 	bl	80012a0 <send_uart>
  	clear_buffer();
 8001588:	f7ff fe6e 	bl	8001268 <clear_buffer>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800158c:	2213      	movs	r2, #19
 800158e:	4998      	ldr	r1, [pc, #608]	; (80017f0 <main+0x3e4>)
 8001590:	4898      	ldr	r0, [pc, #608]	; (80017f4 <main+0x3e8>)
 8001592:	f007 ffbd 	bl	8009510 <f_open>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b97      	ldr	r3, [pc, #604]	; (80017f8 <main+0x3ec>)
 800159c:	701a      	strb	r2, [r3, #0]
  	/* Writing text */
  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 800159e:	4995      	ldr	r1, [pc, #596]	; (80017f4 <main+0x3e8>)
 80015a0:	4896      	ldr	r0, [pc, #600]	; (80017fc <main+0x3f0>)
 80015a2:	f009 fd11 	bl	800afc8 <f_puts>
  	/* Close file */
  	fresult = f_close(&fil);
 80015a6:	4893      	ldr	r0, [pc, #588]	; (80017f4 <main+0x3e8>)
 80015a8:	f009 f853 	bl	800a652 <f_close>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b91      	ldr	r3, [pc, #580]	; (80017f8 <main+0x3ec>)
 80015b2:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)
 80015b4:	4b90      	ldr	r3, [pc, #576]	; (80017f8 <main+0x3ec>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <main+0x1b6>
  	{
  		send_uart ("File1.txt created and the data is written \r\n");
 80015bc:	4890      	ldr	r0, [pc, #576]	; (8001800 <main+0x3f4>)
 80015be:	f7ff fe6f 	bl	80012a0 <send_uart>
  	}

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 80015c2:	2201      	movs	r2, #1
 80015c4:	498a      	ldr	r1, [pc, #552]	; (80017f0 <main+0x3e4>)
 80015c6:	488b      	ldr	r0, [pc, #556]	; (80017f4 <main+0x3e8>)
 80015c8:	f007 ffa2 	bl	8009510 <f_open>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b89      	ldr	r3, [pc, #548]	; (80017f8 <main+0x3ec>)
 80015d2:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 80015d4:	4b87      	ldr	r3, [pc, #540]	; (80017f4 <main+0x3e8>)
 80015d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015da:	330c      	adds	r3, #12
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a85      	ldr	r2, [pc, #532]	; (80017f4 <main+0x3e8>)
 80015e0:	4619      	mov	r1, r3
 80015e2:	4880      	ldr	r0, [pc, #512]	; (80017e4 <main+0x3d8>)
 80015e4:	f009 fc76 	bl	800aed4 <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 80015e8:	4886      	ldr	r0, [pc, #536]	; (8001804 <main+0x3f8>)
 80015ea:	f7ff fe59 	bl	80012a0 <send_uart>
  	send_uart(buffer);
 80015ee:	487d      	ldr	r0, [pc, #500]	; (80017e4 <main+0x3d8>)
 80015f0:	f7ff fe56 	bl	80012a0 <send_uart>
  	send_uart("\r\n");
 80015f4:	4884      	ldr	r0, [pc, #528]	; (8001808 <main+0x3fc>)
 80015f6:	f7ff fe53 	bl	80012a0 <send_uart>
  	/* Close file */
  	f_close(&fil);
 80015fa:	487e      	ldr	r0, [pc, #504]	; (80017f4 <main+0x3e8>)
 80015fc:	f009 f829 	bl	800a652 <f_close>
  	clear_buffer();
 8001600:	f7ff fe32 	bl	8001268 <clear_buffer>
  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001604:	220a      	movs	r2, #10
 8001606:	4981      	ldr	r1, [pc, #516]	; (800180c <main+0x400>)
 8001608:	487a      	ldr	r0, [pc, #488]	; (80017f4 <main+0x3e8>)
 800160a:	f007 ff81 	bl	8009510 <f_open>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b79      	ldr	r3, [pc, #484]	; (80017f8 <main+0x3ec>)
 8001614:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 8001616:	4a73      	ldr	r2, [pc, #460]	; (80017e4 <main+0x3d8>)
 8001618:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <main+0x404>)
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	2351      	movs	r3, #81	; 0x51
 8001620:	461a      	mov	r2, r3
 8001622:	f009 fdfb 	bl	800b21c <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001626:	486f      	ldr	r0, [pc, #444]	; (80017e4 <main+0x3d8>)
 8001628:	f7ff fe06 	bl	8001238 <bufsize>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	4b78      	ldr	r3, [pc, #480]	; (8001814 <main+0x408>)
 8001632:	496c      	ldr	r1, [pc, #432]	; (80017e4 <main+0x3d8>)
 8001634:	486f      	ldr	r0, [pc, #444]	; (80017f4 <main+0x3e8>)
 8001636:	f008 fcbb 	bl	8009fb0 <f_write>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b6e      	ldr	r3, [pc, #440]	; (80017f8 <main+0x3ec>)
 8001640:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001642:	4b6d      	ldr	r3, [pc, #436]	; (80017f8 <main+0x3ec>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <main+0x244>
  	{
  		send_uart ("File2.txt created and the data is written \r\n");
 800164a:	4873      	ldr	r0, [pc, #460]	; (8001818 <main+0x40c>)
 800164c:	f7ff fe28 	bl	80012a0 <send_uart>
  	}

  	/* Close file */
  	f_close(&fil);
 8001650:	4868      	ldr	r0, [pc, #416]	; (80017f4 <main+0x3e8>)
 8001652:	f008 fffe 	bl	800a652 <f_close>
  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 8001656:	f7ff fe07 	bl	8001268 <clear_buffer>
  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 800165a:	2201      	movs	r2, #1
 800165c:	496b      	ldr	r1, [pc, #428]	; (800180c <main+0x400>)
 800165e:	4865      	ldr	r0, [pc, #404]	; (80017f4 <main+0x3e8>)
 8001660:	f007 ff56 	bl	8009510 <f_open>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <main+0x3ec>)
 800166a:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK){
 800166c:	4b62      	ldr	r3, [pc, #392]	; (80017f8 <main+0x3ec>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <main+0x26e>
  		send_uart ("file2.txt is open and the data is shown below\r\n");
 8001674:	4869      	ldr	r0, [pc, #420]	; (800181c <main+0x410>)
 8001676:	f7ff fe13 	bl	80012a0 <send_uart>
  	}

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 800167a:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <main+0x3e8>)
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	330c      	adds	r3, #12
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <main+0x414>)
 8001686:	4957      	ldr	r1, [pc, #348]	; (80017e4 <main+0x3d8>)
 8001688:	485a      	ldr	r0, [pc, #360]	; (80017f4 <main+0x3e8>)
 800168a:	f008 fa7b 	bl	8009b84 <f_read>
  	send_uart(buffer);
 800168e:	4855      	ldr	r0, [pc, #340]	; (80017e4 <main+0x3d8>)
 8001690:	f7ff fe06 	bl	80012a0 <send_uart>
  	send_uart("\r\n");
 8001694:	485c      	ldr	r0, [pc, #368]	; (8001808 <main+0x3fc>)
 8001696:	f7ff fe03 	bl	80012a0 <send_uart>

  	/* Close file */
  	f_close(&fil);
 800169a:	4856      	ldr	r0, [pc, #344]	; (80017f4 <main+0x3e8>)
 800169c:	f008 ffd9 	bl	800a652 <f_close>

  	clear_buffer();
 80016a0:	f7ff fde2 	bl	8001268 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80016a4:	2203      	movs	r2, #3
 80016a6:	4959      	ldr	r1, [pc, #356]	; (800180c <main+0x400>)
 80016a8:	4852      	ldr	r0, [pc, #328]	; (80017f4 <main+0x3e8>)
 80016aa:	f007 ff31 	bl	8009510 <f_open>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <main+0x3ec>)
 80016b4:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <main+0x3e8>)
 80016b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016bc:	330c      	adds	r3, #12
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	484c      	ldr	r0, [pc, #304]	; (80017f4 <main+0x3e8>)
 80016c4:	f008 fff0 	bl	800a6a8 <f_lseek>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <main+0x3ec>)
 80016ce:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)
 80016d0:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <main+0x3ec>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <main+0x2d2>
  	{
  		send_uart ("About to update the file2.txt\r\n");
 80016d8:	4852      	ldr	r0, [pc, #328]	; (8001824 <main+0x418>)
 80016da:	f7ff fde1 	bl	80012a0 <send_uart>
  	}

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 80016de:	4945      	ldr	r1, [pc, #276]	; (80017f4 <main+0x3e8>)
 80016e0:	4851      	ldr	r0, [pc, #324]	; (8001828 <main+0x41c>)
 80016e2:	f009 fc71 	bl	800afc8 <f_puts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <main+0x3ec>)
 80016ec:	701a      	strb	r2, [r3, #0]
  	f_close (&fil);
 80016ee:	4841      	ldr	r0, [pc, #260]	; (80017f4 <main+0x3e8>)
 80016f0:	f008 ffaf 	bl	800a652 <f_close>
  	clear_buffer();
 80016f4:	f7ff fdb8 	bl	8001268 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 80016f8:	2201      	movs	r2, #1
 80016fa:	4944      	ldr	r1, [pc, #272]	; (800180c <main+0x400>)
 80016fc:	483d      	ldr	r0, [pc, #244]	; (80017f4 <main+0x3e8>)
 80016fe:	f007 ff07 	bl	8009510 <f_open>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <main+0x3ec>)
 8001708:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800170a:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <main+0x3e8>)
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	330c      	adds	r3, #12
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b42      	ldr	r3, [pc, #264]	; (8001820 <main+0x414>)
 8001716:	4933      	ldr	r1, [pc, #204]	; (80017e4 <main+0x3d8>)
 8001718:	4836      	ldr	r0, [pc, #216]	; (80017f4 <main+0x3e8>)
 800171a:	f008 fa33 	bl	8009b84 <f_read>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <main+0x3ec>)
 8001724:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <main+0x3ec>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d108      	bne.n	8001740 <main+0x334>
  	{
  		send_uart ("Below is the data from updated file2.txt\r\n");
 800172e:	483f      	ldr	r0, [pc, #252]	; (800182c <main+0x420>)
 8001730:	f7ff fdb6 	bl	80012a0 <send_uart>
  		send_uart(buffer);
 8001734:	482b      	ldr	r0, [pc, #172]	; (80017e4 <main+0x3d8>)
 8001736:	f7ff fdb3 	bl	80012a0 <send_uart>
  		send_uart("\r\n");
 800173a:	4833      	ldr	r0, [pc, #204]	; (8001808 <main+0x3fc>)
 800173c:	f7ff fdb0 	bl	80012a0 <send_uart>
  	}

  	/* Close file */
  	f_close(&fil);
 8001740:	482c      	ldr	r0, [pc, #176]	; (80017f4 <main+0x3e8>)
 8001742:	f008 ff86 	bl	800a652 <f_close>

  	clear_buffer();
 8001746:	f7ff fd8f 	bl	8001268 <clear_buffer>


  	/*Create csv file to log random data*/
  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800174a:	2213      	movs	r2, #19
 800174c:	4938      	ldr	r1, [pc, #224]	; (8001830 <main+0x424>)
 800174e:	4829      	ldr	r0, [pc, #164]	; (80017f4 <main+0x3e8>)
 8001750:	f007 fede 	bl	8009510 <f_open>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <main+0x3ec>)
 800175a:	701a      	strb	r2, [r3, #0]
  	/* Writing text */
  	f_puts("Timer(s), Cell_Voltages, Pack_Voltage, Pack_Current, Temperature\r\n ", &fil);
 800175c:	4925      	ldr	r1, [pc, #148]	; (80017f4 <main+0x3e8>)
 800175e:	4835      	ldr	r0, [pc, #212]	; (8001834 <main+0x428>)
 8001760:	f009 fc32 	bl	800afc8 <f_puts>
  	/* Close file */
  	fresult = f_close(&fil);
 8001764:	4823      	ldr	r0, [pc, #140]	; (80017f4 <main+0x3e8>)
 8001766:	f008 ff74 	bl	800a652 <f_close>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <main+0x3ec>)
 8001770:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <main+0x3ec>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <main+0x374>
  	{
  		send_uart ("File3.csv created and header is written \r\n");
 800177a:	482f      	ldr	r0, [pc, #188]	; (8001838 <main+0x42c>)
 800177c:	f7ff fd90 	bl	80012a0 <send_uart>
//  	{
//  		send_uart ("SD CARD UNMOUNTED successfully...\r\n");
//  	}


  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001786:	482d      	ldr	r0, [pc, #180]	; (800183c <main+0x430>)
 8001788:	f001 fdd2 	bl	8003330 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 800178c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001790:	f000 fc5c 	bl	800204c <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); //turn OFF precharge relay
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800179a:	4828      	ldr	r0, [pc, #160]	; (800183c <main+0x430>)
 800179c:	f001 fdc8 	bl	8003330 <HAL_GPIO_WritePin>
  	HAL_Delay(250);
 80017a0:	20fa      	movs	r0, #250	; 0xfa
 80017a2:	f000 fc53 	bl	800204c <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET); //turn ON HV+ contactor
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ac:	4823      	ldr	r0, [pc, #140]	; (800183c <main+0x430>)
 80017ae:	f001 fdbf 	bl	8003330 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Receive (&huart2, Rx_data, 4, 1000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 80017b2:	2108      	movs	r1, #8
 80017b4:	4821      	ldr	r0, [pc, #132]	; (800183c <main+0x430>)
 80017b6:	f001 fdd3 	bl	8003360 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11); //toggle precharge relay
	  //HAL_UART_Transmit(&huart2,char_data,sizeof(char_data),10);
	  write_to_csvfile();
 80017ba:	f7ff fd89 	bl	80012d0 <write_to_csvfile>
	  HAL_Delay(250);
 80017be:	20fa      	movs	r0, #250	; 0xfa
 80017c0:	f000 fc44 	bl	800204c <HAL_Delay>
 80017c4:	e03c      	b.n	8001840 <main+0x434>
 80017c6:	bf00      	nop
 80017c8:	0800bb10 	.word	0x0800bb10
 80017cc:	200017fc 	.word	0x200017fc
 80017d0:	200002ec 	.word	0x200002ec
 80017d4:	0800bb34 	.word	0x0800bb34
 80017d8:	3fe00000 	.word	0x3fe00000
 80017dc:	20001890 	.word	0x20001890
 80017e0:	0800bb38 	.word	0x0800bb38
 80017e4:	200013e8 	.word	0x200013e8
 80017e8:	200013e4 	.word	0x200013e4
 80017ec:	0800bb54 	.word	0x0800bb54
 80017f0:	0800bb70 	.word	0x0800bb70
 80017f4:	200018d8 	.word	0x200018d8
 80017f8:	20001800 	.word	0x20001800
 80017fc:	0800bb7c 	.word	0x0800bb7c
 8001800:	0800bbc0 	.word	0x0800bbc0
 8001804:	0800bbf0 	.word	0x0800bbf0
 8001808:	0800bc30 	.word	0x0800bc30
 800180c:	0800bc34 	.word	0x0800bc34
 8001810:	0800bc40 	.word	0x0800bc40
 8001814:	200017f0 	.word	0x200017f0
 8001818:	0800bc94 	.word	0x0800bc94
 800181c:	0800bcc4 	.word	0x0800bcc4
 8001820:	200013dc 	.word	0x200013dc
 8001824:	0800bcf4 	.word	0x0800bcf4
 8001828:	0800bd14 	.word	0x0800bd14
 800182c:	0800bd48 	.word	0x0800bd48
 8001830:	0800baa0 	.word	0x0800baa0
 8001834:	0800bd74 	.word	0x0800bd74
 8001838:	0800bdb8 	.word	0x0800bdb8
 800183c:	48000400 	.word	0x48000400
	  //send CAN message // TO DO:check CAN message reception on BluePill
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <main+0x4a0>)
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <main+0x4a4>)
 8001844:	491b      	ldr	r1, [pc, #108]	; (80018b4 <main+0x4a8>)
 8001846:	481c      	ldr	r0, [pc, #112]	; (80018b8 <main+0x4ac>)
 8001848:	f000 fe2d 	bl	80024a6 <HAL_CAN_AddTxMessage>

	  if(CAN_data_checkFlag) //check if CAN RX flag is set in HAL_CAN_RxFifo0MsgPendingCallback
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <main+0x4b0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d010      	beq.n	8001876 <main+0x46a>
	  {
		  sprintf(buffer, "CAN Message values received is:%d, %d\r\n", RxData[0], RxData[1]);
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <main+0x4b4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <main+0x4b4>)
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	4919      	ldr	r1, [pc, #100]	; (80018c4 <main+0x4b8>)
 8001860:	4819      	ldr	r0, [pc, #100]	; (80018c8 <main+0x4bc>)
 8001862:	f009 fcf1 	bl	800b248 <siprintf>
		  send_uart(buffer);
 8001866:	4818      	ldr	r0, [pc, #96]	; (80018c8 <main+0x4bc>)
 8001868:	f7ff fd1a 	bl	80012a0 <send_uart>
		  clear_buffer();
 800186c:	f7ff fcfc 	bl	8001268 <clear_buffer>
		  CAN_data_checkFlag = 0;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <main+0x4b0>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
		  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	  }

	  if(uart_rx_flag)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <main+0x4c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d099      	beq.n	80017b2 <main+0x3a6>
	  {
		  sprintf(buffer, "RX Message is: %c, %c, %c\r\n", uart_rx_data[0], uart_rx_data[1], uart_rx_data[2]);
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <main+0x4c4>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <main+0x4c4>)
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	4619      	mov	r1, r3
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <main+0x4c4>)
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	460b      	mov	r3, r1
 8001892:	4910      	ldr	r1, [pc, #64]	; (80018d4 <main+0x4c8>)
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <main+0x4bc>)
 8001896:	f009 fcd7 	bl	800b248 <siprintf>
		  send_uart(buffer);
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <main+0x4bc>)
 800189c:	f7ff fd00 	bl	80012a0 <send_uart>
		  clear_buffer();
 80018a0:	f7ff fce2 	bl	8001268 <clear_buffer>
		  uart_rx_flag = 0;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <main+0x4c0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 80018aa:	e782      	b.n	80017b2 <main+0x3a6>
 80018ac:	200017f8 	.word	0x200017f8
 80018b0:	200017e8 	.word	0x200017e8
 80018b4:	20001894 	.word	0x20001894
 80018b8:	200013a8 	.word	0x200013a8
 80018bc:	200000a8 	.word	0x200000a8
 80018c0:	20001804 	.word	0x20001804
 80018c4:	0800bde4 	.word	0x0800bde4
 80018c8:	200013e8 	.word	0x200013e8
 80018cc:	200000ac 	.word	0x200000ac
 80018d0:	200018cc 	.word	0x200018cc
 80018d4:	0800be0c 	.word	0x0800be0c

080018d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b09e      	sub	sp, #120	; 0x78
 80018dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e2:	2228      	movs	r2, #40	; 0x28
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f009 fca6 	bl	800b238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	223c      	movs	r2, #60	; 0x3c
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f009 fc98 	bl	800b238 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001908:	2301      	movs	r3, #1
 800190a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800190c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001910:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001916:	2301      	movs	r3, #1
 8001918:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800191a:	2302      	movs	r3, #2
 800191c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001922:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001924:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001928:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fd30 	bl	8003394 <HAL_RCC_OscConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800193a:	f000 f935 	bl	8001ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193e:	230f      	movs	r3, #15
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001942:	2302      	movs	r3, #2
 8001944:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800194a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001954:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001958:	2102      	movs	r1, #2
 800195a:	4618      	mov	r0, r3
 800195c:	f002 fc22 	bl	80041a4 <HAL_RCC_ClockConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001966:	f000 f91f 	bl	8001ba8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800196a:	2302      	movs	r3, #2
 800196c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fe4b 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001980:	f000 f912 	bl	8001ba8 <Error_Handler>
  }
}
 8001984:	bf00      	nop
 8001986:	3778      	adds	r7, #120	; 0x78
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_CAN_Init+0xa0>)
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <MX_CAN_Init+0xa4>)
 8001996:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <MX_CAN_Init+0xa0>)
 800199a:	2212      	movs	r2, #18
 800199c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80019dc:	4813      	ldr	r0, [pc, #76]	; (8001a2c <MX_CAN_Init+0xa0>)
 80019de:	f000 fb59 	bl	8002094 <HAL_CAN_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80019e8:	f000 f8de 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //CAN filter settings
  CAN_FilterTypeDef canfilterConfig;

  canfilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80019ec:	2301      	movs	r3, #1
 80019ee:	623b      	str	r3, [r7, #32]
  canfilterConfig.FilterBank = 11;
 80019f0:	230b      	movs	r3, #11
 80019f2:	617b      	str	r3, [r7, #20]
  canfilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  canfilterConfig.FilterIdHigh = 0x103<<5;
 80019f8:	f242 0360 	movw	r3, #8288	; 0x2060
 80019fc:	603b      	str	r3, [r7, #0]
  canfilterConfig.FilterIdLow = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  canfilterConfig.FilterMaskIdHigh = 0x103<<5;
 8001a02:	f242 0360 	movw	r3, #8288	; 0x2060
 8001a06:	60bb      	str	r3, [r7, #8]
  canfilterConfig.FilterMaskIdLow = 0x0000;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  canfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  canfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
  canfilterConfig.SlaveStartFilterBank = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterConfig);
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <MX_CAN_Init+0xa0>)
 8001a1e:	f000 fc34 	bl	800228a <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200013a8 	.word	0x200013a8
 8001a30:	40006400 	.word	0x40006400

08001a34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <MX_SPI2_Init+0x78>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a82:	2207      	movs	r2, #7
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a8e:	2208      	movs	r2, #8
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_SPI2_Init+0x74>)
 8001a94:	f002 ff6c 	bl	8004970 <HAL_SPI_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a9e:	f000 f883 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002f4 	.word	0x200002f4
 8001aac:	40003800 	.word	0x40003800

08001ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <MX_USART2_UART_Init+0x5c>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART2_UART_Init+0x58>)
 8001af4:	f003 fccc 	bl	8005490 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001afe:	f000 f853 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000180c 	.word	0x2000180c
 8001b0c:	40004400 	.word	0x40004400

08001b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b30:	6153      	str	r3, [r2, #20]
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6153      	str	r3, [r2, #20]
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6153      	str	r3, [r2, #20]
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_GPIO_Init+0x90>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f641 4108 	movw	r1, #7176	; 0x1c08
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <MX_GPIO_Init+0x94>)
 8001b76:	f001 fbdb 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 8001b7a:	f641 4308 	movw	r3, #7176	; 0x1c08
 8001b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4619      	mov	r1, r3
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_GPIO_Init+0x94>)
 8001b94:	f001 fa52 	bl	800303c <HAL_GPIO_Init>

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <Error_Handler+0x8>
	...

08001bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_MspInit+0x44>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <HAL_MspInit+0x44>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6193      	str	r3, [r2, #24]
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_MspInit+0x44>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_MspInit+0x44>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_MspInit+0x44>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_MspInit+0x44>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_CAN_MspInit+0x90>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d131      	bne.n	8001c82 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_CAN_MspInit+0x94>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a1b      	ldr	r2, [pc, #108]	; (8001c90 <HAL_CAN_MspInit+0x94>)
 8001c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_CAN_MspInit+0x94>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_CAN_MspInit+0x94>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <HAL_CAN_MspInit+0x94>)
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	6153      	str	r3, [r2, #20]
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_CAN_MspInit+0x94>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001c60:	2309      	movs	r3, #9
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6e:	f001 f9e5 	bl	800303c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2014      	movs	r0, #20
 8001c78:	f001 f933 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001c7c:	2014      	movs	r0, #20
 8001c7e:	f001 f94c 	bl	8002f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40006400 	.word	0x40006400
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_SPI_MspInit+0x7c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d128      	bne.n	8001d08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	4a10      	ldr	r2, [pc, #64]	; (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6153      	str	r3, [r2, #20]
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ce6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_SPI_MspInit+0x84>)
 8001d04:	f001 f99a 	bl	800303c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40003800 	.word	0x40003800
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400

08001d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_UART_MspInit+0x8c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d130      	bne.n	8001da0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_UART_MspInit+0x90>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_UART_MspInit+0x90>)
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_UART_MspInit+0x90>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_UART_MspInit+0x90>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_UART_MspInit+0x90>)
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	6153      	str	r3, [r2, #20]
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_UART_MspInit+0x90>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d6e:	230c      	movs	r3, #12
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7e:	2307      	movs	r3, #7
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8c:	f001 f956 	bl	800303c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2026      	movs	r0, #38	; 0x26
 8001d96:	f001 f8a4 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d9a:	2026      	movs	r0, #38	; 0x26
 8001d9c:	f001 f8bd 	bl	8002f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40004400 	.word	0x40004400
 8001dac:	40021000 	.word	0x40021000

08001db0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <SDTimer_Handler+0x40>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <SDTimer_Handler+0x1c>
    Timer1--;
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <SDTimer_Handler+0x40>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <SDTimer_Handler+0x40>)
 8001dca:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <SDTimer_Handler+0x44>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <SDTimer_Handler+0x34>
    Timer2--;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <SDTimer_Handler+0x44>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SDTimer_Handler+0x44>)
 8001de2:	801a      	strh	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20002908 	.word	0x20002908
 8001df4:	20002906 	.word	0x20002906

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <BusFault_Handler+0x4>

08001e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <UsageFault_Handler+0x4>

08001e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <SysTick_Handler+0x30>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <SysTick_Handler+0x30>)
 8001e50:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <SysTick_Handler+0x30>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d904      	bls.n	8001e66 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Handler+0x30>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001e62:	f7ff ffa5 	bl	8001db0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e66:	f000 f8d1 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200000b0 	.word	0x200000b0

08001e74 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001e7a:	f000 fd27 	bl	80028cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200013a8 	.word	0x200013a8

08001e88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <USART2_IRQHandler+0x10>)
 8001e8e:	f003 fc2f 	bl	80056f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000180c 	.word	0x2000180c

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f009 f97c 	bl	800b1c8 <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	2000a000 	.word	0x2000a000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	200000b4 	.word	0x200000b4
 8001f04:	20004988 	.word	0x20004988

08001f08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <SystemInit+0x20>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <SystemInit+0x20>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f30:	480d      	ldr	r0, [pc, #52]	; (8001f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f32:	490e      	ldr	r1, [pc, #56]	; (8001f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <LoopForever+0xe>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f48:	4c0b      	ldr	r4, [pc, #44]	; (8001f78 <LoopForever+0x16>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f56:	f7ff ffd7 	bl	8001f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f009 f93b 	bl	800b1d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5e:	f7ff fa55 	bl	800140c <main>

08001f62 <LoopForever>:

LoopForever:
    b LoopForever
 8001f62:	e7fe      	b.n	8001f62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f64:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f6c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001f70:	0800c434 	.word	0x0800c434
  ldr r2, =_sbss
 8001f74:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001f78:	20004984 	.word	0x20004984

08001f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_Init+0x28>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_Init+0x28>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 ff9b 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	200f      	movs	r0, #15
 8001f98:	f000 f808 	bl	8001fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff fe0a 	bl	8001bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_InitTick+0x54>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x58>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 ffb3 	bl	8002f36 <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 ff7b 	bl	8002ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_InitTick+0x5c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000004 	.word	0x20000004
 8002004:	2000000c 	.word	0x2000000c
 8002008:	20000008 	.word	0x20000008

0800200c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	2000000c 	.word	0x2000000c
 8002030:	2000290c 	.word	0x2000290c

08002034 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;  
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000290c 	.word	0x2000290c

0800204c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff ffee 	bl	8002034 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffde 	bl	8002034 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000000c 	.word	0x2000000c

08002094 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0ed      	b.n	8002282 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fda2 	bl	8001bfc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c8:	f7ff ffb4 	bl	8002034 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ce:	e012      	b.n	80020f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d0:	f7ff ffb0 	bl	8002034 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b0a      	cmp	r3, #10
 80020dc:	d90b      	bls.n	80020f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0c5      	b.n	8002282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0e5      	beq.n	80020d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0202 	bic.w	r2, r2, #2
 8002112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002114:	f7ff ff8e 	bl	8002034 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800211a:	e012      	b.n	8002142 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800211c:	f7ff ff8a 	bl	8002034 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b0a      	cmp	r3, #10
 8002128:	d90b      	bls.n	8002142 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e09f      	b.n	8002282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e5      	bne.n	800211c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7e1b      	ldrb	r3, [r3, #24]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d108      	bne.n	800216a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e007      	b.n	800217a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7e5b      	ldrb	r3, [r3, #25]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e9b      	ldrb	r3, [r3, #26]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d108      	bne.n	80021be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0220 	orr.w	r2, r2, #32
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e007      	b.n	80021ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0220 	bic.w	r2, r2, #32
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7edb      	ldrb	r3, [r3, #27]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0210 	bic.w	r2, r2, #16
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e007      	b.n	80021f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0210 	orr.w	r2, r2, #16
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7f1b      	ldrb	r3, [r3, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d108      	bne.n	8002212 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e007      	b.n	8002222 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0208 	bic.w	r2, r2, #8
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7f5b      	ldrb	r3, [r3, #29]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0204 	orr.w	r2, r2, #4
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0204 	bic.w	r2, r2, #4
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	ea42 0103 	orr.w	r1, r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800228a:	b480      	push	{r7}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d003      	beq.n	80022b0 <HAL_CAN_ConfigFilter+0x26>
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	f040 80aa 	bne.w	8002404 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2201      	movs	r2, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d123      	bne.n	8002332 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	401a      	ands	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800230c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3248      	adds	r2, #72	; 0x48
 8002312:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002326:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002328:	6979      	ldr	r1, [r7, #20]
 800232a:	3348      	adds	r3, #72	; 0x48
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d122      	bne.n	8002380 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800235a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3248      	adds	r2, #72	; 0x48
 8002360:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002374:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	3348      	adds	r3, #72	; 0x48
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800239a:	e007      	b.n	80023ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023c6:	e007      	b.n	80023d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023f6:	f023 0201 	bic.w	r2, r3, #1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e006      	b.n	8002412 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d12e      	bne.n	8002490 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800244a:	f7ff fdf3 	bl	8002034 <HAL_GetTick>
 800244e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002450:	e012      	b.n	8002478 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002452:	f7ff fdef 	bl	8002034 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b0a      	cmp	r3, #10
 800245e:	d90b      	bls.n	8002478 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2205      	movs	r2, #5
 8002470:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e012      	b.n	800249e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1e5      	bne.n	8002452 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e006      	b.n	800249e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b089      	sub	sp, #36	; 0x24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c4:	7ffb      	ldrb	r3, [r7, #31]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d003      	beq.n	80024d2 <HAL_CAN_AddTxMessage+0x2c>
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	f040 80b8 	bne.w	8002642 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10a      	bne.n	80024f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a0 	beq.w	8002632 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	0e1b      	lsrs	r3, r3, #24
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d907      	bls.n	8002512 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e09e      	b.n	8002650 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002512:	2201      	movs	r2, #1
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10d      	bne.n	8002540 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	6809      	ldr	r1, [r1, #0]
 8002532:	431a      	orrs	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3318      	adds	r3, #24
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	440b      	add	r3, r1
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e00f      	b.n	8002560 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800254a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002554:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3318      	adds	r3, #24
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	440b      	add	r3, r1
 800255e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3318      	adds	r3, #24
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	440b      	add	r3, r1
 8002570:	3304      	adds	r3, #4
 8002572:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	7d1b      	ldrb	r3, [r3, #20]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d111      	bne.n	80025a0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3318      	adds	r3, #24
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	4413      	add	r3, r2
 8002588:	3304      	adds	r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6811      	ldr	r1, [r2, #0]
 8002590:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3318      	adds	r3, #24
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	440b      	add	r3, r1
 800259c:	3304      	adds	r3, #4
 800259e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3307      	adds	r3, #7
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	061a      	lsls	r2, r3, #24
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3306      	adds	r3, #6
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3305      	adds	r3, #5
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	3204      	adds	r2, #4
 80025c0:	7812      	ldrb	r2, [r2, #0]
 80025c2:	4610      	mov	r0, r2
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	6811      	ldr	r1, [r2, #0]
 80025c8:	ea43 0200 	orr.w	r2, r3, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3303      	adds	r3, #3
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	061a      	lsls	r2, r3, #24
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3302      	adds	r3, #2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3301      	adds	r3, #1
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	4313      	orrs	r3, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	4610      	mov	r0, r2
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	6811      	ldr	r1, [r2, #0]
 80025fe:	ea43 0200 	orr.w	r2, r3, r0
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	440b      	add	r3, r1
 8002608:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800260c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3318      	adds	r3, #24
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4413      	add	r3, r2
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6811      	ldr	r1, [r2, #0]
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3318      	adds	r3, #24
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	440b      	add	r3, r1
 800262c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e00e      	b.n	8002650 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e006      	b.n	8002650 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
  }
}
 8002650:	4618      	mov	r0, r3
 8002652:	3724      	adds	r7, #36	; 0x24
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002670:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d003      	beq.n	8002680 <HAL_CAN_GetRxMessage+0x24>
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b02      	cmp	r3, #2
 800267c:	f040 80f3 	bne.w	8002866 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d116      	bne.n	80026c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0e7      	b.n	8002874 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0d8      	b.n	8002874 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	331b      	adds	r3, #27
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0204 	and.w	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	331b      	adds	r3, #27
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0d5b      	lsrs	r3, r3, #21
 80026f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e00b      	b.n	8002712 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	331b      	adds	r3, #27
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	4413      	add	r3, r2
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	08db      	lsrs	r3, r3, #3
 800270a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	331b      	adds	r3, #27
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	4413      	add	r3, r2
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0202 	and.w	r2, r3, #2
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	331b      	adds	r3, #27
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	331b      	adds	r3, #27
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	b2da      	uxtb	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	331b      	adds	r3, #27
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4413      	add	r3, r2
 8002790:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0a1a      	lsrs	r2, r3, #8
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0c1a      	lsrs	r2, r3, #16
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3302      	adds	r3, #2
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e1a      	lsrs	r2, r3, #24
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3303      	adds	r3, #3
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4413      	add	r3, r2
 80027de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3304      	adds	r3, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0a1a      	lsrs	r2, r3, #8
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3305      	adds	r3, #5
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0c1a      	lsrs	r2, r3, #16
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	3306      	adds	r3, #6
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	4413      	add	r3, r2
 800282a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0e1a      	lsrs	r2, r3, #24
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3307      	adds	r3, #7
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e007      	b.n	8002862 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0220 	orr.w	r2, r2, #32
 8002860:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e006      	b.n	8002874 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002890:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d002      	beq.n	800289e <HAL_CAN_ActivateNotification+0x1e>
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d109      	bne.n	80028b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6959      	ldr	r1, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e006      	b.n	80028c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d07c      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f983 	bl	8002c3a <HAL_CAN_TxMailbox0CompleteCallback>
 8002934:	e016      	b.n	8002964 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
 8002948:	e00c      	b.n	8002964 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
 800295c:	e002      	b.n	8002964 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f989 	bl	8002c76 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d024      	beq.n	80029b8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002976:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f963 	bl	8002c4e <HAL_CAN_TxMailbox1CompleteCallback>
 8002988:	e016      	b.n	80029b8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	e00c      	b.n	80029b8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
 80029b0:	e002      	b.n	80029b8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f969 	bl	8002c8a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d024      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f943 	bl	8002c62 <HAL_CAN_TxMailbox2CompleteCallback>
 80029dc:	e016      	b.n	8002a0c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d004      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e00c      	b.n	8002a0c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	e002      	b.n	8002a0c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f949 	bl	8002c9e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f930 	bl	8002cb2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fc9c 	bl	80013a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2208      	movs	r2, #8
 8002aae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f912 	bl	8002cda <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8f9 	bl	8002cc6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2210      	movs	r2, #16
 8002aee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f8fc 	bl	8002cee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00b      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8f5 	bl	8002d02 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d07b      	beq.n	8002c1a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d072      	beq.n	8002c12 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d043      	beq.n	8002c12 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03e      	beq.n	8002c12 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b9a:	2b60      	cmp	r3, #96	; 0x60
 8002b9c:	d02b      	beq.n	8002bf6 <HAL_CAN_IRQHandler+0x32a>
 8002b9e:	2b60      	cmp	r3, #96	; 0x60
 8002ba0:	d82e      	bhi.n	8002c00 <HAL_CAN_IRQHandler+0x334>
 8002ba2:	2b50      	cmp	r3, #80	; 0x50
 8002ba4:	d022      	beq.n	8002bec <HAL_CAN_IRQHandler+0x320>
 8002ba6:	2b50      	cmp	r3, #80	; 0x50
 8002ba8:	d82a      	bhi.n	8002c00 <HAL_CAN_IRQHandler+0x334>
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d019      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x316>
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d826      	bhi.n	8002c00 <HAL_CAN_IRQHandler+0x334>
 8002bb2:	2b30      	cmp	r3, #48	; 0x30
 8002bb4:	d010      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x30c>
 8002bb6:	2b30      	cmp	r3, #48	; 0x30
 8002bb8:	d822      	bhi.n	8002c00 <HAL_CAN_IRQHandler+0x334>
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d002      	beq.n	8002bc4 <HAL_CAN_IRQHandler+0x2f8>
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d005      	beq.n	8002bce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bc2:	e01d      	b.n	8002c00 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	f043 0308 	orr.w	r3, r3, #8
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bcc:	e019      	b.n	8002c02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd6:	e014      	b.n	8002c02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f043 0320 	orr.w	r3, r3, #32
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002be0:	e00f      	b.n	8002c02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bea:	e00a      	b.n	8002c02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bf4:	e005      	b.n	8002c02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bfe:	e000      	b.n	8002c02 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2204      	movs	r2, #4
 8002c18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f872 	bl	8002d16 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c32:	bf00      	nop
 8002c34:	3728      	adds	r7, #40	; 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	; (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00f      	b.n	8002ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <SysTick_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f7ff ff8e 	bl	8002dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff29 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff3e 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff8e 	bl	8002e20 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff5d 	bl	8002dcc <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff31 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ffa2 	bl	8002e88 <SysTick_Config>
 8002f44:	4603      	mov	r3, r0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2204      	movs	r2, #4
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e020      	b.n	8002fb4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 020e 	bic.w	r2, r2, #14
 8002f80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0201 	bic.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d005      	beq.n	8002fe2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2204      	movs	r2, #4
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	e027      	b.n	8003032 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 020e 	bic.w	r2, r2, #14
 8002ff0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
    } 
  }
  return status;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304a:	e154      	b.n	80032f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8146 	beq.w	80032f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d005      	beq.n	800307c <HAL_GPIO_Init+0x40>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d130      	bne.n	80030de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	2203      	movs	r2, #3
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b2:	2201      	movs	r2, #1
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 0201 	and.w	r2, r3, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d017      	beq.n	800311a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d123      	bne.n	800316e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	08da      	lsrs	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	220f      	movs	r2, #15
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	08da      	lsrs	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3208      	adds	r2, #8
 8003168:	6939      	ldr	r1, [r7, #16]
 800316a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0203 	and.w	r2, r3, #3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80a0 	beq.w	80032f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b0:	4b58      	ldr	r3, [pc, #352]	; (8003314 <HAL_GPIO_Init+0x2d8>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a57      	ldr	r2, [pc, #348]	; (8003314 <HAL_GPIO_Init+0x2d8>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_GPIO_Init+0x2d8>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031c8:	4a53      	ldr	r2, [pc, #332]	; (8003318 <HAL_GPIO_Init+0x2dc>)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	3302      	adds	r3, #2
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f2:	d019      	beq.n	8003228 <HAL_GPIO_Init+0x1ec>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a49      	ldr	r2, [pc, #292]	; (800331c <HAL_GPIO_Init+0x2e0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_GPIO_Init+0x1e8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a48      	ldr	r2, [pc, #288]	; (8003320 <HAL_GPIO_Init+0x2e4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00d      	beq.n	8003220 <HAL_GPIO_Init+0x1e4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a47      	ldr	r2, [pc, #284]	; (8003324 <HAL_GPIO_Init+0x2e8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <HAL_GPIO_Init+0x1e0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a46      	ldr	r2, [pc, #280]	; (8003328 <HAL_GPIO_Init+0x2ec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_GPIO_Init+0x1dc>
 8003214:	2304      	movs	r3, #4
 8003216:	e008      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 8003218:	2305      	movs	r3, #5
 800321a:	e006      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 800321c:	2303      	movs	r3, #3
 800321e:	e004      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 8003220:	2302      	movs	r3, #2
 8003222:	e002      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 8003228:	2300      	movs	r3, #0
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	f002 0203 	and.w	r2, r2, #3
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	4093      	lsls	r3, r2
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800323a:	4937      	ldr	r1, [pc, #220]	; (8003318 <HAL_GPIO_Init+0x2dc>)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	3302      	adds	r3, #2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_GPIO_Init+0x2f0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800326c:	4a2f      	ldr	r2, [pc, #188]	; (800332c <HAL_GPIO_Init+0x2f0>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_GPIO_Init+0x2f0>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003296:	4a25      	ldr	r2, [pc, #148]	; (800332c <HAL_GPIO_Init+0x2f0>)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_GPIO_Init+0x2f0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3301      	adds	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f aea3 	bne.w	800304c <HAL_GPIO_Init+0x10>
  }
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40021000 	.word	0x40021000
 8003318:	40010000 	.word	0x40010000
 800331c:	48000400 	.word	0x48000400
 8003320:	48000800 	.word	0x48000800
 8003324:	48000c00 	.word	0x48000c00
 8003328:	48001000 	.word	0x48001000
 800332c:	40010400 	.word	0x40010400

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800334c:	e002      	b.n	8003354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	041a      	lsls	r2, r3, #16
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43d9      	mvns	r1, r3
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	400b      	ands	r3, r1
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	619a      	str	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800339a:	af00      	add	r7, sp, #0
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f000 bef4 	b.w	8004196 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 816a 	beq.w	8003692 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033be:	4bb3      	ldr	r3, [pc, #716]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d00c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033ca:	4bb0      	ldr	r3, [pc, #704]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d159      	bne.n	800348a <HAL_RCC_OscConfig+0xf6>
 80033d6:	4bad      	ldr	r3, [pc, #692]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d152      	bne.n	800348a <HAL_RCC_OscConfig+0xf6>
 80033e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_RCC_OscConfig+0x82>
 8003410:	4b9e      	ldr	r3, [pc, #632]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0xae>
 8003416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800342a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800342e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003432:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800343e:	4b93      	ldr	r3, [pc, #588]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003446:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800344a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800344e:	fa92 f2a2 	rbit	r2, r2
 8003452:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003456:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f042 0220 	orr.w	r2, r2, #32
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f002 021f 	and.w	r2, r2, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 810c 	beq.w	8003690 <HAL_RCC_OscConfig+0x2fc>
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 8106 	bne.w	8003690 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f000 be86 	b.w	8004196 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x110>
 8003496:	4b7d      	ldr	r3, [pc, #500]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7c      	ldr	r2, [pc, #496]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e030      	b.n	8003506 <HAL_RCC_OscConfig+0x172>
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x134>
 80034ae:	4b77      	ldr	r3, [pc, #476]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a76      	ldr	r2, [pc, #472]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b74      	ldr	r3, [pc, #464]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a73      	ldr	r2, [pc, #460]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e01e      	b.n	8003506 <HAL_RCC_OscConfig+0x172>
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d2:	d10c      	bne.n	80034ee <HAL_RCC_OscConfig+0x15a>
 80034d4:	4b6d      	ldr	r3, [pc, #436]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6c      	ldr	r2, [pc, #432]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b6a      	ldr	r3, [pc, #424]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a69      	ldr	r2, [pc, #420]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e00b      	b.n	8003506 <HAL_RCC_OscConfig+0x172>
 80034ee:	4b67      	ldr	r3, [pc, #412]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a66      	ldr	r2, [pc, #408]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b64      	ldr	r3, [pc, #400]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a63      	ldr	r2, [pc, #396]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003506:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	f023 020f 	bic.w	r2, r3, #15
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	495d      	ldr	r1, [pc, #372]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d059      	beq.n	80035d8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe fd86 	bl	8002034 <HAL_GetTick>
 8003528:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352e:	f7fe fd81 	bl	8002034 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d902      	bls.n	8003544 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	f000 be29 	b.w	8004196 <HAL_RCC_OscConfig+0xe02>
 8003544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003548:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003558:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d102      	bne.n	8003576 <HAL_RCC_OscConfig+0x1e2>
 8003570:	4b46      	ldr	r3, [pc, #280]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x20e>
 8003576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800358a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800358e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003592:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80035ae:	fa92 f2a2 	rbit	r2, r2
 80035b2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80035b6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80035ba:	fab2 f282 	clz	r2, r2
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	f042 0220 	orr.w	r2, r2, #32
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	f002 021f 	and.w	r2, r2, #31
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f202 	lsl.w	r2, r1, r2
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ab      	beq.n	800352e <HAL_RCC_OscConfig+0x19a>
 80035d6:	e05c      	b.n	8003692 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fd2c 	bl	8002034 <HAL_GetTick>
 80035dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e2:	f7fe fd27 	bl	8002034 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d902      	bls.n	80035f8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	f000 bdcf 	b.w	8004196 <HAL_RCC_OscConfig+0xe02>
 80035f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800360c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_RCC_OscConfig+0x296>
 8003624:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	e015      	b.n	8003656 <HAL_RCC_OscConfig+0x2c2>
 800362a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800362e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800363e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003642:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003646:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_RCC_OscConfig+0x2f8>)
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800365a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800365e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003662:	fa92 f2a2 	rbit	r2, r2
 8003666:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800366a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800366e:	fab2 f282 	clz	r2, r2
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f042 0220 	orr.w	r2, r2, #32
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	f002 021f 	and.w	r2, r2, #31
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ab      	bne.n	80035e2 <HAL_RCC_OscConfig+0x24e>
 800368a:	e002      	b.n	8003692 <HAL_RCC_OscConfig+0x2fe>
 800368c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 816f 	beq.w	8003980 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036a2:	4bd0      	ldr	r3, [pc, #832]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036ae:	4bcd      	ldr	r3, [pc, #820]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d16c      	bne.n	8003794 <HAL_RCC_OscConfig+0x400>
 80036ba:	4bca      	ldr	r3, [pc, #808]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d166      	bne.n	8003794 <HAL_RCC_OscConfig+0x400>
 80036c6:	2302      	movs	r3, #2
 80036c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80036d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <HAL_RCC_OscConfig+0x362>
 80036f0:	4bbc      	ldr	r3, [pc, #752]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	e013      	b.n	800371e <HAL_RCC_OscConfig+0x38a>
 80036f6:	2302      	movs	r3, #2
 80036f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003708:	2302      	movs	r3, #2
 800370a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800370e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800371a:	4bb2      	ldr	r3, [pc, #712]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2202      	movs	r2, #2
 8003720:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003724:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003728:	fa92 f2a2 	rbit	r2, r2
 800372c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003730:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	f042 0220 	orr.w	r2, r2, #32
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f002 021f 	and.w	r2, r2, #31
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_RCC_OscConfig+0x3cc>
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d002      	beq.n	8003760 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f000 bd1b 	b.w	8004196 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003760:	4ba0      	ldr	r3, [pc, #640]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	21f8      	movs	r1, #248	; 0xf8
 8003770:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003778:	fa91 f1a1 	rbit	r1, r1
 800377c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003780:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003784:	fab1 f181 	clz	r1, r1
 8003788:	b2c9      	uxtb	r1, r1
 800378a:	408b      	lsls	r3, r1
 800378c:	4995      	ldr	r1, [pc, #596]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	e0f5      	b.n	8003980 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8085 	beq.w	80038aa <HAL_RCC_OscConfig+0x516>
 80037a0:	2301      	movs	r3, #1
 80037a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80037b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	461a      	mov	r2, r3
 80037c8:	2301      	movs	r3, #1
 80037ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fc32 	bl	8002034 <HAL_GetTick>
 80037d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d6:	f7fe fc2d 	bl	8002034 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d902      	bls.n	80037ec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	f000 bcd5 	b.w	8004196 <HAL_RCC_OscConfig+0xe02>
 80037ec:	2302      	movs	r3, #2
 80037ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80037fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0x488>
 8003816:	4b73      	ldr	r3, [pc, #460]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e013      	b.n	8003844 <HAL_RCC_OscConfig+0x4b0>
 800381c:	2302      	movs	r3, #2
 800381e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800382e:	2302      	movs	r3, #2
 8003830:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003834:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003840:	4b68      	ldr	r3, [pc, #416]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2202      	movs	r2, #2
 8003846:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800384a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800384e:	fa92 f2a2 	rbit	r2, r2
 8003852:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003856:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	f042 0220 	orr.w	r2, r2, #32
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f002 021f 	and.w	r2, r2, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0af      	beq.n	80037d6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	4b5b      	ldr	r3, [pc, #364]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	21f8      	movs	r1, #248	; 0xf8
 8003886:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800388e:	fa91 f1a1 	rbit	r1, r1
 8003892:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003896:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800389a:	fab1 f181 	clz	r1, r1
 800389e:	b2c9      	uxtb	r1, r1
 80038a0:	408b      	lsls	r3, r1
 80038a2:	4950      	ldr	r1, [pc, #320]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
 80038a8:	e06a      	b.n	8003980 <HAL_RCC_OscConfig+0x5ec>
 80038aa:	2301      	movs	r3, #1
 80038ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80038bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	461a      	mov	r2, r3
 80038d2:	2300      	movs	r3, #0
 80038d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fe fbad 	bl	8002034 <HAL_GetTick>
 80038da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fe fba8 	bl	8002034 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d902      	bls.n	80038f6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	f000 bc50 	b.w	8004196 <HAL_RCC_OscConfig+0xe02>
 80038f6:	2302      	movs	r3, #2
 80038f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390c:	fab3 f383 	clz	r3, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d102      	bne.n	8003926 <HAL_RCC_OscConfig+0x592>
 8003920:	4b30      	ldr	r3, [pc, #192]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	e013      	b.n	800394e <HAL_RCC_OscConfig+0x5ba>
 8003926:	2302      	movs	r3, #2
 8003928:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003938:	2302      	movs	r3, #2
 800393a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800393e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <HAL_RCC_OscConfig+0x650>)
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2202      	movs	r2, #2
 8003950:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003954:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003958:	fa92 f2a2 	rbit	r2, r2
 800395c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003960:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003964:	fab2 f282 	clz	r2, r2
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	f042 0220 	orr.w	r2, r2, #32
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	f002 021f 	and.w	r2, r2, #31
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f202 	lsl.w	r2, r1, r2
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1af      	bne.n	80038e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80da 	beq.w	8003b44 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d069      	beq.n	8003a6e <HAL_RCC_OscConfig+0x6da>
 800399a:	2301      	movs	r3, #1
 800399c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80039ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x654>)
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	461a      	mov	r2, r3
 80039c0:	2301      	movs	r3, #1
 80039c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c4:	f7fe fb36 	bl	8002034 <HAL_GetTick>
 80039c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039cc:	e00e      	b.n	80039ec <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ce:	f7fe fb31 	bl	8002034 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d906      	bls.n	80039ec <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e3d9      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
 80039e8:	10908120 	.word	0x10908120
 80039ec:	2302      	movs	r3, #2
 80039ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a02:	2202      	movs	r2, #2
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fa93 f2a3 	rbit	r2, r3
 8003a10:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f2a3 	rbit	r2, r3
 8003a28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003a2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	4ba5      	ldr	r3, [pc, #660]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a36:	2102      	movs	r1, #2
 8003a38:	6019      	str	r1, [r3, #0]
 8003a3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	fa93 f1a3 	rbit	r1, r3
 8003a44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a48:	6019      	str	r1, [r3, #0]
  return result;
 8003a4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0b0      	beq.n	80039ce <HAL_RCC_OscConfig+0x63a>
 8003a6c:	e06a      	b.n	8003b44 <HAL_RCC_OscConfig+0x7b0>
 8003a6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a84:	601a      	str	r2, [r3, #0]
  return result;
 8003a86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b8c      	ldr	r3, [pc, #560]	; (8003cc8 <HAL_RCC_OscConfig+0x934>)
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa0:	f7fe fac8 	bl	8002034 <HAL_GetTick>
 8003aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa8:	e009      	b.n	8003abe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aaa:	f7fe fac3 	bl	8002034 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e36b      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
 8003abe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003ada:	2202      	movs	r2, #2
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	fa93 f2a3 	rbit	r2, r3
 8003ae8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003af2:	2202      	movs	r2, #2
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	fa93 f2a3 	rbit	r2, r3
 8003b00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b06:	4b6f      	ldr	r3, [pc, #444]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b0e:	2102      	movs	r1, #2
 8003b10:	6019      	str	r1, [r3, #0]
 8003b12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	fa93 f1a3 	rbit	r1, r3
 8003b1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b20:	6019      	str	r1, [r3, #0]
  return result;
 8003b22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2101      	movs	r1, #1
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1b2      	bne.n	8003aaa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8158 	beq.w	8003e04 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5a:	4b5a      	ldr	r3, [pc, #360]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d112      	bne.n	8003b8c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4a56      	ldr	r2, [pc, #344]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b70:	61d3      	str	r3, [r2, #28]
 8003b72:	4b54      	ldr	r3, [pc, #336]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_OscConfig+0x938>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11a      	bne.n	8003bce <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <HAL_RCC_OscConfig+0x938>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ccc <HAL_RCC_OscConfig+0x938>)
 8003b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba4:	f7fe fa46 	bl	8002034 <HAL_GetTick>
 8003ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	e009      	b.n	8003bc2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bae:	f7fe fa41 	bl	8002034 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e2e9      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b42      	ldr	r3, [pc, #264]	; (8003ccc <HAL_RCC_OscConfig+0x938>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ef      	beq.n	8003bae <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x852>
 8003bd8:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6213      	str	r3, [r2, #32]
 8003be4:	e02f      	b.n	8003c46 <HAL_RCC_OscConfig+0x8b2>
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x876>
 8003bf0:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a33      	ldr	r2, [pc, #204]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	6213      	str	r3, [r2, #32]
 8003bfc:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	6213      	str	r3, [r2, #32]
 8003c08:	e01d      	b.n	8003c46 <HAL_RCC_OscConfig+0x8b2>
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d10c      	bne.n	8003c2e <HAL_RCC_OscConfig+0x89a>
 8003c14:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4a2a      	ldr	r2, [pc, #168]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	6213      	str	r3, [r2, #32]
 8003c20:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6213      	str	r3, [r2, #32]
 8003c2c:	e00b      	b.n	8003c46 <HAL_RCC_OscConfig+0x8b2>
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	6213      	str	r3, [r2, #32]
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d06b      	beq.n	8003d28 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c50:	f7fe f9f0 	bl	8002034 <HAL_GetTick>
 8003c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c58:	e00b      	b.n	8003c72 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fe f9eb 	bl	8002034 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e291      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
 8003c72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c76:	2202      	movs	r2, #2
 8003c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c8e:	2202      	movs	r2, #2
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	fa93 f2a3 	rbit	r2, r3
 8003c9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ca0:	601a      	str	r2, [r3, #0]
  return result;
 8003ca2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ca6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d109      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x93c>
 8003cbc:	4b01      	ldr	r3, [pc, #4]	; (8003cc4 <HAL_RCC_OscConfig+0x930>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	e014      	b.n	8003cec <HAL_RCC_OscConfig+0x958>
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	10908120 	.word	0x10908120
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fa93 f2a3 	rbit	r2, r3
 8003ce2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	4bbb      	ldr	r3, [pc, #748]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	6011      	str	r1, [r2, #0]
 8003cf4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	fa92 f1a2 	rbit	r1, r2
 8003cfe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d02:	6011      	str	r1, [r2, #0]
  return result;
 8003d04:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	fab2 f282 	clz	r2, r2
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	f002 021f 	and.w	r2, r2, #31
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d099      	beq.n	8003c5a <HAL_RCC_OscConfig+0x8c6>
 8003d26:	e063      	b.n	8003df0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7fe f984 	bl	8002034 <HAL_GetTick>
 8003d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	e00b      	b.n	8003d4a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fe f97f 	bl	8002034 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e225      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
 8003d4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d4e:	2202      	movs	r2, #2
 8003d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f2a3 	rbit	r2, r3
 8003d5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d66:	2202      	movs	r2, #2
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fa93 f2a3 	rbit	r2, r3
 8003d74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d78:	601a      	str	r2, [r3, #0]
  return result;
 8003d7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f043 0302 	orr.w	r3, r3, #2
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d102      	bne.n	8003d9a <HAL_RCC_OscConfig+0xa06>
 8003d94:	4b90      	ldr	r3, [pc, #576]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	e00d      	b.n	8003db6 <HAL_RCC_OscConfig+0xa22>
 8003d9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d9e:	2202      	movs	r2, #2
 8003da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	fa93 f2a3 	rbit	r2, r3
 8003dac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	4b89      	ldr	r3, [pc, #548]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003dba:	2102      	movs	r1, #2
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	fa92 f1a2 	rbit	r1, r2
 8003dc8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003dcc:	6011      	str	r1, [r2, #0]
  return result;
 8003dce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	fab2 f282 	clz	r2, r2
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f002 021f 	and.w	r2, r2, #31
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1a0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003df0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b77      	ldr	r3, [pc, #476]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4a76      	ldr	r2, [pc, #472]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 81c2 	beq.w	8004194 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e10:	4b71      	ldr	r3, [pc, #452]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	f000 819c 	beq.w	8004156 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	f040 8114 	bne.w	8004052 <HAL_RCC_OscConfig+0xcbe>
 8003e2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	fa93 f2a3 	rbit	r2, r3
 8003e3e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e42:	601a      	str	r2, [r3, #0]
  return result;
 8003e44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e48:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fe f8e8 	bl	8002034 <HAL_GetTick>
 8003e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e68:	e009      	b.n	8003e7e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fe f8e3 	bl	8002034 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e18b      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
 8003e7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	fa93 f2a3 	rbit	r2, r3
 8003e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e96:	601a      	str	r2, [r3, #0]
  return result;
 8003e98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xb24>
 8003eb2:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e01b      	b.n	8003ef0 <HAL_RCC_OscConfig+0xb5c>
 8003eb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	fa93 f2a3 	rbit	r2, r3
 8003ecc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	fa93 f2a3 	rbit	r2, r3
 8003ee6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	4b3a      	ldr	r3, [pc, #232]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ef4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ef8:	6011      	str	r1, [r2, #0]
 8003efa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	fa92 f1a2 	rbit	r1, r2
 8003f04:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f08:	6011      	str	r1, [r2, #0]
  return result;
 8003f0a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	fab2 f282 	clz	r2, r2
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	f042 0220 	orr.w	r2, r2, #32
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	f002 021f 	and.w	r2, r2, #31
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f202 	lsl.w	r2, r1, r2
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d19e      	bne.n	8003e6a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f2c:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	4925      	ldr	r1, [pc, #148]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
 8003f48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	fa93 f2a3 	rbit	r2, r3
 8003f5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f60:	601a      	str	r2, [r3, #0]
  return result;
 8003f62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f66:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fe f859 	bl	8002034 <HAL_GetTick>
 8003f82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f86:	e009      	b.n	8003f9c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe f854 	bl	8002034 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e0fc      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
 8003f9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	fa93 f2a3 	rbit	r2, r3
 8003fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fb4:	601a      	str	r2, [r3, #0]
  return result;
 8003fb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_OscConfig+0xc48>
 8003fd0:	4b01      	ldr	r3, [pc, #4]	; (8003fd8 <HAL_RCC_OscConfig+0xc44>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	e01e      	b.n	8004014 <HAL_RCC_OscConfig+0xc80>
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	fa93 f2a3 	rbit	r2, r3
 8003ff0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ffa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	fa93 f2a3 	rbit	r2, r3
 800400a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	4b63      	ldr	r3, [pc, #396]	; (80041a0 <HAL_RCC_OscConfig+0xe0c>)
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004018:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800401c:	6011      	str	r1, [r2, #0]
 800401e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	fa92 f1a2 	rbit	r1, r2
 8004028:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800402c:	6011      	str	r1, [r2, #0]
  return result;
 800402e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	fab2 f282 	clz	r2, r2
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	f042 0220 	orr.w	r2, r2, #32
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	f002 021f 	and.w	r2, r2, #31
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f202 	lsl.w	r2, r1, r2
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d09b      	beq.n	8003f88 <HAL_RCC_OscConfig+0xbf4>
 8004050:	e0a0      	b.n	8004194 <HAL_RCC_OscConfig+0xe00>
 8004052:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004056:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800405a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	fa93 f2a3 	rbit	r2, r3
 8004066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800406a:	601a      	str	r2, [r3, #0]
  return result;
 800406c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004070:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800407c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	461a      	mov	r2, r3
 8004084:	2300      	movs	r3, #0
 8004086:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fd ffd4 	bl	8002034 <HAL_GetTick>
 800408c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004090:	e009      	b.n	80040a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004092:	f7fd ffcf 	bl	8002034 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e077      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
 80040a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	fa93 f2a3 	rbit	r2, r3
 80040ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040be:	601a      	str	r2, [r3, #0]
  return result;
 80040c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_RCC_OscConfig+0xd4c>
 80040da:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <HAL_RCC_OscConfig+0xe0c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	e01b      	b.n	8004118 <HAL_RCC_OscConfig+0xd84>
 80040e0:	f107 0320 	add.w	r3, r7, #32
 80040e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	f107 0320 	add.w	r3, r7, #32
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	fa93 f2a3 	rbit	r2, r3
 80040f4:	f107 031c 	add.w	r3, r7, #28
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f107 0318 	add.w	r3, r7, #24
 80040fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f107 0318 	add.w	r3, r7, #24
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	fa93 f2a3 	rbit	r2, r3
 800410e:	f107 0314 	add.w	r3, r7, #20
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <HAL_RCC_OscConfig+0xe0c>)
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f107 0210 	add.w	r2, r7, #16
 800411c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004120:	6011      	str	r1, [r2, #0]
 8004122:	f107 0210 	add.w	r2, r7, #16
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	fa92 f1a2 	rbit	r1, r2
 800412c:	f107 020c 	add.w	r2, r7, #12
 8004130:	6011      	str	r1, [r2, #0]
  return result;
 8004132:	f107 020c 	add.w	r2, r7, #12
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	fab2 f282 	clz	r2, r2
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	f042 0220 	orr.w	r2, r2, #32
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	f002 021f 	and.w	r2, r2, #31
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f202 	lsl.w	r2, r1, r2
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d19e      	bne.n	8004092 <HAL_RCC_OscConfig+0xcfe>
 8004154:	e01e      	b.n	8004194 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e018      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <HAL_RCC_OscConfig+0xe0c>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800416c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	429a      	cmp	r2, r3
 800417c:	d108      	bne.n	8004190 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800417e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000

080041a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b09e      	sub	sp, #120	; 0x78
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e162      	b.n	8004482 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041bc:	4b90      	ldr	r3, [pc, #576]	; (8004400 <HAL_RCC_ClockConfig+0x25c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d910      	bls.n	80041ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b8d      	ldr	r3, [pc, #564]	; (8004400 <HAL_RCC_ClockConfig+0x25c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 0207 	bic.w	r2, r3, #7
 80041d2:	498b      	ldr	r1, [pc, #556]	; (8004400 <HAL_RCC_ClockConfig+0x25c>)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b89      	ldr	r3, [pc, #548]	; (8004400 <HAL_RCC_ClockConfig+0x25c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e14a      	b.n	8004482 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b82      	ldr	r3, [pc, #520]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	497f      	ldr	r1, [pc, #508]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 8004206:	4313      	orrs	r3, r2
 8004208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80dc 	beq.w	80043d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d13c      	bne.n	800429a <HAL_RCC_ClockConfig+0xf6>
 8004220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004224:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800422e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d102      	bne.n	800424a <HAL_RCC_ClockConfig+0xa6>
 8004244:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	e00f      	b.n	800426a <HAL_RCC_ClockConfig+0xc6>
 800424a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800424e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	667b      	str	r3, [r7, #100]	; 0x64
 8004258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800425c:	663b      	str	r3, [r7, #96]	; 0x60
 800425e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004266:	4b67      	ldr	r3, [pc, #412]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800426e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004272:	fa92 f2a2 	rbit	r2, r2
 8004276:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800427a:	fab2 f282 	clz	r2, r2
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f042 0220 	orr.w	r2, r2, #32
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	f002 021f 	and.w	r2, r2, #31
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d17b      	bne.n	800438e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0f3      	b.n	8004482 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d13c      	bne.n	800431c <HAL_RCC_ClockConfig+0x178>
 80042a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d102      	bne.n	80042cc <HAL_RCC_ClockConfig+0x128>
 80042c6:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	e00f      	b.n	80042ec <HAL_RCC_ClockConfig+0x148>
 80042cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	647b      	str	r3, [r7, #68]	; 0x44
 80042da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
 80042e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e8:	4b46      	ldr	r3, [pc, #280]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80042f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042f4:	fa92 f2a2 	rbit	r2, r2
 80042f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042fc:	fab2 f282 	clz	r2, r2
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	f042 0220 	orr.w	r2, r2, #32
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	f002 021f 	and.w	r2, r2, #31
 800430c:	2101      	movs	r1, #1
 800430e:	fa01 f202 	lsl.w	r2, r1, r2
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d13a      	bne.n	800438e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0b2      	b.n	8004482 <HAL_RCC_ClockConfig+0x2de>
 800431c:	2302      	movs	r3, #2
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d102      	bne.n	8004344 <HAL_RCC_ClockConfig+0x1a0>
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	e00d      	b.n	8004360 <HAL_RCC_ClockConfig+0x1bc>
 8004344:	2302      	movs	r3, #2
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
 8004350:	2302      	movs	r3, #2
 8004352:	623b      	str	r3, [r7, #32]
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2202      	movs	r2, #2
 8004362:	61ba      	str	r2, [r7, #24]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	fa92 f2a2 	rbit	r2, r2
 800436a:	617a      	str	r2, [r7, #20]
  return result;
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f042 0220 	orr.w	r2, r2, #32
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	f002 021f 	and.w	r2, r2, #31
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e079      	b.n	8004482 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	491a      	ldr	r1, [pc, #104]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fd fe48 	bl	8002034 <HAL_GetTick>
 80043a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd fe44 	bl	8002034 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e061      	b.n	8004482 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_RCC_ClockConfig+0x260>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_ClockConfig+0x25c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d214      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_RCC_ClockConfig+0x25c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	4906      	ldr	r1, [pc, #24]	; (8004400 <HAL_RCC_ClockConfig+0x25c>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_RCC_ClockConfig+0x25c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e040      	b.n	8004482 <HAL_RCC_ClockConfig+0x2de>
 8004400:	40022000 	.word	0x40022000
 8004404:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCC_ClockConfig+0x2e8>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	491a      	ldr	r1, [pc, #104]	; (800448c <HAL_RCC_ClockConfig+0x2e8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004432:	4b16      	ldr	r3, [pc, #88]	; (800448c <HAL_RCC_ClockConfig+0x2e8>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4912      	ldr	r1, [pc, #72]	; (800448c <HAL_RCC_ClockConfig+0x2e8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004446:	f000 f829 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800444a:	4601      	mov	r1, r0
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <HAL_RCC_ClockConfig+0x2e8>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004454:	22f0      	movs	r2, #240	; 0xf0
 8004456:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	fa92 f2a2 	rbit	r2, r2
 800445e:	60fa      	str	r2, [r7, #12]
  return result;
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	fab2 f282 	clz	r2, r2
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	40d3      	lsrs	r3, r2
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <HAL_RCC_ClockConfig+0x2ec>)
 800446c:	5cd3      	ldrb	r3, [r2, r3]
 800446e:	fa21 f303 	lsr.w	r3, r1, r3
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <HAL_RCC_ClockConfig+0x2f0>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RCC_ClockConfig+0x2f4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd fd96 	bl	8001fac <HAL_InitTick>
  
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3778      	adds	r7, #120	; 0x78
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	0800be70 	.word	0x0800be70
 8004494:	20000004 	.word	0x20000004
 8004498:	20000008 	.word	0x20000008

0800449c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b08b      	sub	sp, #44	; 0x2c
 80044a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80044b6:	4b29      	ldr	r3, [pc, #164]	; (800455c <HAL_RCC_GetSysClockFreq+0xc0>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d002      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x30>
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d003      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0x36>
 80044ca:	e03c      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044cc:	4b24      	ldr	r3, [pc, #144]	; (8004560 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044ce:	623b      	str	r3, [r7, #32]
      break;
 80044d0:	e03c      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	fa92 f2a2 	rbit	r2, r2
 80044e4:	607a      	str	r2, [r7, #4]
  return result;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	fab2 f282 	clz	r2, r2
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	40d3      	lsrs	r3, r2
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044f2:	5cd3      	ldrb	r3, [r2, r3]
 80044f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044f6:	4b19      	ldr	r3, [pc, #100]	; (800455c <HAL_RCC_GetSysClockFreq+0xc0>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	220f      	movs	r2, #15
 8004500:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	fa92 f2a2 	rbit	r2, r2
 8004508:	60fa      	str	r2, [r7, #12]
  return result;
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	fab2 f282 	clz	r2, r2
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	40d3      	lsrs	r3, r2
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004524:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	fbb2 f2f3 	udiv	r2, r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
 8004534:	e004      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	4a0c      	ldr	r2, [pc, #48]	; (800456c <HAL_RCC_GetSysClockFreq+0xd0>)
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	623b      	str	r3, [r7, #32]
      break;
 8004544:	e002      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004548:	623b      	str	r3, [r7, #32]
      break;
 800454a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454c:	6a3b      	ldr	r3, [r7, #32]
}
 800454e:	4618      	mov	r0, r3
 8004550:	372c      	adds	r7, #44	; 0x2c
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	007a1200 	.word	0x007a1200
 8004564:	0800be88 	.word	0x0800be88
 8004568:	0800be98 	.word	0x0800be98
 800456c:	003d0900 	.word	0x003d0900

08004570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_RCC_GetHCLKFreq+0x14>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000004 	.word	0x20000004

08004588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800458e:	f7ff ffef 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 8004592:	4601      	mov	r1, r0
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800459c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	fa92 f2a2 	rbit	r2, r2
 80045a8:	603a      	str	r2, [r7, #0]
  return result;
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	fab2 f282 	clz	r2, r2
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	40d3      	lsrs	r3, r2
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80045b6:	5cd3      	ldrb	r3, [r2, r3]
 80045b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	0800be80 	.word	0x0800be80

080045cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045d2:	f7ff ffcd 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80045d6:	4601      	mov	r1, r0
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	603a      	str	r2, [r7, #0]
  return result;
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	fab2 f282 	clz	r2, r2
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	40d3      	lsrs	r3, r2
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <HAL_RCC_GetPCLK2Freq+0x40>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	0800be80 	.word	0x0800be80

08004610 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b092      	sub	sp, #72	; 0x48
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80d4 	beq.w	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004634:	4b4e      	ldr	r3, [pc, #312]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10e      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004640:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	4a4a      	ldr	r2, [pc, #296]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464a:	61d3      	str	r3, [r2, #28]
 800464c:	4b48      	ldr	r3, [pc, #288]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465e:	4b45      	ldr	r3, [pc, #276]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d118      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800466a:	4b42      	ldr	r3, [pc, #264]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a41      	ldr	r2, [pc, #260]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004674:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004676:	f7fd fcdd 	bl	8002034 <HAL_GetTick>
 800467a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	e008      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467e:	f7fd fcd9 	bl	8002034 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	; 0x64
 800468a:	d901      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e169      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	4b38      	ldr	r3, [pc, #224]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800469c:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8084 	beq.w	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d07c      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046bc:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	fa93 f3a3 	rbit	r3, r3
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	4b26      	ldr	r3, [pc, #152]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	461a      	mov	r2, r3
 80046e6:	2301      	movs	r3, #1
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	461a      	mov	r2, r3
 800470a:	2300      	movs	r3, #0
 800470c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800470e:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004712:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04b      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471e:	f7fd fc89 	bl	8002034 <HAL_GetTick>
 8004722:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	e00a      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fd fc85 	bl	8002034 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e113      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800473c:	2302      	movs	r3, #2
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
 8004748:	2302      	movs	r3, #2
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	fa93 f3a3 	rbit	r3, r3
 8004752:	61fb      	str	r3, [r7, #28]
  return result;
 8004754:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d108      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800476a:	4b01      	ldr	r3, [pc, #4]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	e00d      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004770:	40021000 	.word	0x40021000
 8004774:	40007000 	.word	0x40007000
 8004778:	10908100 	.word	0x10908100
 800477c:	2302      	movs	r3, #2
 800477e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	4b78      	ldr	r3, [pc, #480]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	2202      	movs	r2, #2
 800478e:	613a      	str	r2, [r7, #16]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	fa92 f2a2 	rbit	r2, r2
 8004796:	60fa      	str	r2, [r7, #12]
  return result;
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	fab2 f282 	clz	r2, r2
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	f002 021f 	and.w	r2, r2, #31
 80047aa:	2101      	movs	r1, #1
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0b7      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047b6:	4b6d      	ldr	r3, [pc, #436]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	496a      	ldr	r1, [pc, #424]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d105      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d0:	4b66      	ldr	r3, [pc, #408]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4a65      	ldr	r2, [pc, #404]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e8:	4b60      	ldr	r3, [pc, #384]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	f023 0203 	bic.w	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	495d      	ldr	r1, [pc, #372]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004806:	4b59      	ldr	r3, [pc, #356]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	4956      	ldr	r1, [pc, #344]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004824:	4b51      	ldr	r3, [pc, #324]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	494e      	ldr	r1, [pc, #312]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004842:	4b4a      	ldr	r3, [pc, #296]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	f023 0210 	bic.w	r2, r3, #16
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4947      	ldr	r1, [pc, #284]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004850:	4313      	orrs	r3, r2
 8004852:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004860:	4b42      	ldr	r3, [pc, #264]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	493f      	ldr	r1, [pc, #252]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800487e:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f023 0220 	bic.w	r2, r3, #32
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4938      	ldr	r1, [pc, #224]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800488c:	4313      	orrs	r3, r2
 800488e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800489c:	4b33      	ldr	r3, [pc, #204]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4930      	ldr	r1, [pc, #192]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ba:	4b2c      	ldr	r3, [pc, #176]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	4929      	ldr	r1, [pc, #164]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048d8:	4b24      	ldr	r3, [pc, #144]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4921      	ldr	r1, [pc, #132]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048f6:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	491a      	ldr	r1, [pc, #104]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004914:	4b15      	ldr	r3, [pc, #84]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	4912      	ldr	r1, [pc, #72]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004932:	4b0e      	ldr	r3, [pc, #56]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	490b      	ldr	r1, [pc, #44]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004940:	4313      	orrs	r3, r2
 8004942:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	4903      	ldr	r1, [pc, #12]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3748      	adds	r7, #72	; 0x48
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000

08004970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e09d      	b.n	8004abe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d108      	bne.n	800499c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004992:	d009      	beq.n	80049a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	61da      	str	r2, [r3, #28]
 800499a:	e005      	b.n	80049a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd f966 	bl	8001c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e8:	d902      	bls.n	80049f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e002      	b.n	80049f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049fe:	d007      	beq.n	8004a10 <HAL_SPI_Init+0xa0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	ea42 0103 	orr.w	r1, r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	f003 0204 	and.w	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a8c:	ea42 0103 	orr.w	r1, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b088      	sub	sp, #32
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_SPI_Transmit+0x22>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e158      	b.n	8004d9a <HAL_SPI_Transmit+0x2d4>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004af0:	f7fd faa0 	bl	8002034 <HAL_GetTick>
 8004af4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d002      	beq.n	8004b0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
 8004b08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b0a:	e13d      	b.n	8004d88 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_SPI_Transmit+0x52>
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b1c:	e134      	b.n	8004d88 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2203      	movs	r2, #3
 8004b22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	88fa      	ldrh	r2, [r7, #6]
 8004b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b68:	d10f      	bne.n	8004b8a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d007      	beq.n	8004ba8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb0:	d94b      	bls.n	8004c4a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_Transmit+0xfa>
 8004bba:	8afb      	ldrh	r3, [r7, #22]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d13e      	bne.n	8004c3e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	1c9a      	adds	r2, r3, #2
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004be4:	e02b      	b.n	8004c3e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d112      	bne.n	8004c1a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	881a      	ldrh	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	1c9a      	adds	r2, r3, #2
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c18:	e011      	b.n	8004c3e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c1a:	f7fd fa0b 	bl	8002034 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d803      	bhi.n	8004c32 <HAL_SPI_Transmit+0x16c>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c30:	d102      	bne.n	8004c38 <HAL_SPI_Transmit+0x172>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c3c:	e0a4      	b.n	8004d88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ce      	bne.n	8004be6 <HAL_SPI_Transmit+0x120>
 8004c48:	e07c      	b.n	8004d44 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0x192>
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d170      	bne.n	8004d3a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d912      	bls.n	8004c88 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	881a      	ldrh	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b02      	subs	r3, #2
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c86:	e058      	b.n	8004d3a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	330c      	adds	r3, #12
 8004c92:	7812      	ldrb	r2, [r2, #0]
 8004c94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004cae:	e044      	b.n	8004d3a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d12b      	bne.n	8004d16 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d912      	bls.n	8004cee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	1c9a      	adds	r2, r3, #2
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b02      	subs	r3, #2
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cec:	e025      	b.n	8004d3a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d14:	e011      	b.n	8004d3a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d16:	f7fd f98d 	bl	8002034 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d803      	bhi.n	8004d2e <HAL_SPI_Transmit+0x268>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d102      	bne.n	8004d34 <HAL_SPI_Transmit+0x26e>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d38:	e026      	b.n	8004d88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1b5      	bne.n	8004cb0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 fb5b 	bl	8005404 <SPI_EndRxTxTransaction>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e000      	b.n	8004d88 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004d86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d98:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b08a      	sub	sp, #40	; 0x28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x26>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e1fb      	b.n	80051c0 <HAL_SPI_TransmitReceive+0x41e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dd0:	f7fd f930 	bl	8002034 <HAL_GetTick>
 8004dd4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ddc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004de4:	887b      	ldrh	r3, [r7, #2]
 8004de6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004de8:	887b      	ldrh	r3, [r7, #2]
 8004dea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dec:	7efb      	ldrb	r3, [r7, #27]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d00e      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x6e>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df8:	d106      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x66>
 8004e02:	7efb      	ldrb	r3, [r7, #27]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d003      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e0e:	e1cd      	b.n	80051ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x80>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x80>
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e28:	e1c0      	b.n	80051ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d003      	beq.n	8004e3e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2205      	movs	r2, #5
 8004e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	887a      	ldrh	r2, [r7, #2]
 8004e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	887a      	ldrh	r2, [r7, #2]
 8004e6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e80:	d802      	bhi.n	8004e88 <HAL_SPI_TransmitReceive+0xe6>
 8004e82:	8a3b      	ldrh	r3, [r7, #16]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d908      	bls.n	8004e9a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	e007      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ea8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	d007      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ed0:	d97c      	bls.n	8004fcc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x13e>
 8004eda:	8a7b      	ldrh	r3, [r7, #18]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d169      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	881a      	ldrh	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	1c9a      	adds	r2, r3, #2
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f04:	e056      	b.n	8004fb4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d11b      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x1aa>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d016      	beq.n	8004f4c <HAL_SPI_TransmitReceive+0x1aa>
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d113      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d11c      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x1f2>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	b292      	uxth	r2, r2
 8004f72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	1c9a      	adds	r2, r3, #2
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f90:	2301      	movs	r3, #1
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f94:	f7fd f84e 	bl	8002034 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d807      	bhi.n	8004fb4 <HAL_SPI_TransmitReceive+0x212>
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d003      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004fb2:	e0fb      	b.n	80051ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1a3      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x164>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d19d      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x164>
 8004fca:	e0df      	b.n	800518c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x23a>
 8004fd4:	8a7b      	ldrh	r3, [r7, #18]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	f040 80cb 	bne.w	8005172 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d912      	bls.n	800500c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	881a      	ldrh	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	1c9a      	adds	r2, r3, #2
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b02      	subs	r3, #2
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	87da      	strh	r2, [r3, #62]	; 0x3e
 800500a:	e0b2      	b.n	8005172 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	7812      	ldrb	r2, [r2, #0]
 8005018:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005032:	e09e      	b.n	8005172 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d134      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x30a>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02f      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x30a>
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	2b01      	cmp	r3, #1
 8005050:	d12c      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d912      	bls.n	8005082 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	881a      	ldrh	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	1c9a      	adds	r2, r3, #2
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b02      	subs	r3, #2
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005080:	e012      	b.n	80050a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	7812      	ldrb	r2, [r2, #0]
 800508e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d148      	bne.n	800514c <HAL_SPI_TransmitReceive+0x3aa>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d042      	beq.n	800514c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d923      	bls.n	800511a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	b292      	uxth	r2, r2
 80050de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b02      	subs	r3, #2
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d81f      	bhi.n	8005148 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005116:	605a      	str	r2, [r3, #4]
 8005118:	e016      	b.n	8005148 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f103 020c 	add.w	r2, r3, #12
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	7812      	ldrb	r2, [r2, #0]
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005148:	2301      	movs	r3, #1
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800514c:	f7fc ff72 	bl	8002034 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005158:	429a      	cmp	r2, r3
 800515a:	d803      	bhi.n	8005164 <HAL_SPI_TransmitReceive+0x3c2>
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d102      	bne.n	800516a <HAL_SPI_TransmitReceive+0x3c8>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005170:	e01c      	b.n	80051ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	f47f af5b 	bne.w	8005034 <HAL_SPI_TransmitReceive+0x292>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	f47f af54 	bne.w	8005034 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f937 	bl	8005404 <SPI_EndRxTxTransaction>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60
 80051a8:	e000      	b.n	80051ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80051aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3728      	adds	r7, #40	; 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051d8:	f7fc ff2c 	bl	8002034 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	4413      	add	r3, r2
 80051e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051e8:	f7fc ff24 	bl	8002034 <HAL_GetTick>
 80051ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ee:	4b39      	ldr	r3, [pc, #228]	; (80052d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	015b      	lsls	r3, r3, #5
 80051f4:	0d1b      	lsrs	r3, r3, #20
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	fb02 f303 	mul.w	r3, r2, r3
 80051fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051fe:	e054      	b.n	80052aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d050      	beq.n	80052aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005208:	f7fc ff14 	bl	8002034 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	429a      	cmp	r2, r3
 8005216:	d902      	bls.n	800521e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d13d      	bne.n	800529a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800522c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005236:	d111      	bne.n	800525c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005240:	d004      	beq.n	800524c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524a:	d107      	bne.n	800525c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005264:	d10f      	bne.n	8005286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e017      	b.n	80052ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d19b      	bne.n	8005200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000004 	.word	0x20000004

080052d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052ea:	f7fc fea3 	bl	8002034 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	4413      	add	r3, r2
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80052fa:	f7fc fe9b 	bl	8002034 <HAL_GetTick>
 80052fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005308:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	00da      	lsls	r2, r3, #3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	0d1b      	lsrs	r3, r3, #20
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005320:	e060      	b.n	80053e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005328:	d107      	bne.n	800533a <SPI_WaitFifoStateUntilTimeout+0x62>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005338:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d050      	beq.n	80053e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005342:	f7fc fe77 	bl	8002034 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534e:	429a      	cmp	r2, r3
 8005350:	d902      	bls.n	8005358 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	d13d      	bne.n	80053d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005366:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005370:	d111      	bne.n	8005396 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537a:	d004      	beq.n	8005386 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005384:	d107      	bne.n	8005396 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005394:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539e:	d10f      	bne.n	80053c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e010      	b.n	80053f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d196      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3728      	adds	r7, #40	; 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000004 	.word	0x20000004

08005404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7ff ff5b 	bl	80052d8 <SPI_WaitFifoStateUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	f043 0220 	orr.w	r2, r3, #32
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e027      	b.n	8005488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2200      	movs	r2, #0
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff fec0 	bl	80051c8 <SPI_WaitFlagStateUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005452:	f043 0220 	orr.w	r2, r3, #32
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e014      	b.n	8005488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff ff34 	bl	80052d8 <SPI_WaitFifoStateUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e000      	b.n	8005488 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e040      	b.n	8005524 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fc fc32 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2224      	movs	r2, #36	; 0x24
 80054bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fc0c 	bl	8005cec <UART_SetConfig>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e022      	b.n	8005524 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fdd4 	bl	8006094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800550a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fe5b 	bl	80061d8 <UART_CheckIdleState>
 8005522:	4603      	mov	r3, r0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005540:	2b20      	cmp	r3, #32
 8005542:	f040 8082 	bne.w	800564a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <HAL_UART_Transmit+0x26>
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e07a      	b.n	800564c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_UART_Transmit+0x38>
 8005560:	2302      	movs	r3, #2
 8005562:	e073      	b.n	800564c <HAL_UART_Transmit+0x120>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2221      	movs	r2, #33	; 0x21
 8005578:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800557a:	f7fc fd5b 	bl	8002034 <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d108      	bne.n	80055ac <HAL_UART_Transmit+0x80>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	e003      	b.n	80055b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80055bc:	e02d      	b.n	800561a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fe4e 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e039      	b.n	800564c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ea:	b292      	uxth	r2, r2
 80055ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	3302      	adds	r3, #2
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e008      	b.n	8005608 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b292      	uxth	r2, r2
 8005600:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3301      	adds	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1cb      	bne.n	80055be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	2140      	movs	r1, #64	; 0x40
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fe1a 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e005      	b.n	800564c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005666:	2b20      	cmp	r3, #32
 8005668:	d13d      	bne.n	80056e6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_UART_Receive_IT+0x22>
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e036      	b.n	80056e8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_UART_Receive_IT+0x34>
 8005684:	2302      	movs	r3, #2
 8005686:	e02f      	b.n	80056e8 <HAL_UART_Receive_IT+0x94>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d018      	beq.n	80056d6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	69f9      	ldr	r1, [r7, #28]
 80056c8:	6a3a      	ldr	r2, [r7, #32]
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e6      	bne.n	80056a4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	461a      	mov	r2, r3
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fe89 	bl	80063f4 <UART_Start_Receive_IT>
 80056e2:	4603      	mov	r3, r0
 80056e4:	e000      	b.n	80056e8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3728      	adds	r7, #40	; 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b0ba      	sub	sp, #232	; 0xe8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800571a:	f640 030f 	movw	r3, #2063	; 0x80f
 800571e:	4013      	ands	r3, r2
 8005720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d115      	bne.n	8005758 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00f      	beq.n	8005758 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d009      	beq.n	8005758 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 82a3 	beq.w	8005c94 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
      }
      return;
 8005756:	e29d      	b.n	8005c94 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8117 	beq.w	8005990 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800576e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005772:	4b85      	ldr	r3, [pc, #532]	; (8005988 <HAL_UART_IRQHandler+0x298>)
 8005774:	4013      	ands	r3, r2
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 810a 	beq.w	8005990 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800577c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d011      	beq.n	80057ac <HAL_UART_IRQHandler+0xbc>
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2201      	movs	r2, #1
 800579a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a2:	f043 0201 	orr.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d011      	beq.n	80057dc <HAL_UART_IRQHandler+0xec>
 80057b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2202      	movs	r2, #2
 80057ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d2:	f043 0204 	orr.w	r2, r3, #4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d011      	beq.n	800580c <HAL_UART_IRQHandler+0x11c>
 80057e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2204      	movs	r2, #4
 80057fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005802:	f043 0202 	orr.w	r2, r3, #2
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800580c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d017      	beq.n	8005848 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005828:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2208      	movs	r2, #8
 8005836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800583e:	f043 0208 	orr.w	r2, r3, #8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005850:	2b00      	cmp	r3, #0
 8005852:	d012      	beq.n	800587a <HAL_UART_IRQHandler+0x18a>
 8005854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00c      	beq.n	800587a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8209 	beq.w	8005c98 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00d      	beq.n	80058ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d005      	beq.n	80058d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d04f      	beq.n	8005972 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fe26 	bl	8006524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d141      	bne.n	800596a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3308      	adds	r3, #8
 80058ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3308      	adds	r3, #8
 800590e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005912:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800591e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800592a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1d9      	bne.n	80058e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	2b00      	cmp	r3, #0
 8005938:	d013      	beq.n	8005962 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	4a13      	ldr	r2, [pc, #76]	; (800598c <HAL_UART_IRQHandler+0x29c>)
 8005940:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4618      	mov	r0, r3
 8005948:	f7fd fb3a 	bl	8002fc0 <HAL_DMA_Abort_IT>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d017      	beq.n	8005982 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800595c:	4610      	mov	r0, r2
 800595e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	e00f      	b.n	8005982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f9ac 	bl	8005cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005968:	e00b      	b.n	8005982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f9a8 	bl	8005cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	e007      	b.n	8005982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f9a4 	bl	8005cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005980:	e18a      	b.n	8005c98 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005982:	bf00      	nop
    return;
 8005984:	e188      	b.n	8005c98 <HAL_UART_IRQHandler+0x5a8>
 8005986:	bf00      	nop
 8005988:	04000120 	.word	0x04000120
 800598c:	080065eb 	.word	0x080065eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005994:	2b01      	cmp	r3, #1
 8005996:	f040 8143 	bne.w	8005c20 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 813c 	beq.w	8005c20 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8135 	beq.w	8005c20 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2210      	movs	r2, #16
 80059bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	f040 80b1 	bne.w	8005b30 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 815c 	beq.w	8005c9c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ee:	429a      	cmp	r2, r3
 80059f0:	f080 8154 	bcs.w	8005c9c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	f000 8085 	beq.w	8005b14 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1da      	bne.n	8005a0a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e1      	bne.n	8005a54 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ab4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ab6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005aba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e3      	bne.n	8005a90 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae4:	f023 0310 	bic.w	r3, r3, #16
 8005ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e4      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd fa1d 	bl	8002f4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f8d3 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b2e:	e0b5      	b.n	8005c9c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80a7 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 80a2 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e4      	bne.n	8005b5c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f023 0301 	bic.w	r3, r3, #1
 8005ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e3      	bne.n	8005b92 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 0310 	bic.w	r3, r3, #16
 8005bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	69b9      	ldr	r1, [r7, #24]
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e4      	bne.n	8005bdc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f85b 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c1e:	e03f      	b.n	8005ca0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00e      	beq.n	8005c4a <HAL_UART_IRQHandler+0x55a>
 8005c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fe6d 	bl	8006922 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c48:	e02d      	b.n	8005ca6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01c      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
    }
    return;
 8005c72:	e017      	b.n	8005ca4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d012      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x5b6>
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fcc2 	bl	8006616 <UART_EndTransmit_IT>
    return;
 8005c92:	e008      	b.n	8005ca6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005c94:	bf00      	nop
 8005c96:	e006      	b.n	8005ca6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005c98:	bf00      	nop
 8005c9a:	e004      	b.n	8005ca6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005c9c:	bf00      	nop
 8005c9e:	e002      	b.n	8005ca6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005ca4:	bf00      	nop
  }

}
 8005ca6:	37e8      	adds	r7, #232	; 0xe8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d1a:	f023 030c 	bic.w	r3, r3, #12
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	6979      	ldr	r1, [r7, #20]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4aae      	ldr	r2, [pc, #696]	; (8006020 <UART_SetConfig+0x334>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d120      	bne.n	8005dae <UART_SetConfig+0xc2>
 8005d6c:	4bad      	ldr	r3, [pc, #692]	; (8006024 <UART_SetConfig+0x338>)
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d817      	bhi.n	8005da8 <UART_SetConfig+0xbc>
 8005d78:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x94>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005d9d 	.word	0x08005d9d
 8005d88:	08005da3 	.word	0x08005da3
 8005d8c:	08005d97 	.word	0x08005d97
 8005d90:	2301      	movs	r3, #1
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e0b5      	b.n	8005f02 <UART_SetConfig+0x216>
 8005d96:	2302      	movs	r3, #2
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e0b2      	b.n	8005f02 <UART_SetConfig+0x216>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e0af      	b.n	8005f02 <UART_SetConfig+0x216>
 8005da2:	2308      	movs	r3, #8
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e0ac      	b.n	8005f02 <UART_SetConfig+0x216>
 8005da8:	2310      	movs	r3, #16
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e0a9      	b.n	8005f02 <UART_SetConfig+0x216>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a9d      	ldr	r2, [pc, #628]	; (8006028 <UART_SetConfig+0x33c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d124      	bne.n	8005e02 <UART_SetConfig+0x116>
 8005db8:	4b9a      	ldr	r3, [pc, #616]	; (8006024 <UART_SetConfig+0x338>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dc4:	d011      	beq.n	8005dea <UART_SetConfig+0xfe>
 8005dc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dca:	d817      	bhi.n	8005dfc <UART_SetConfig+0x110>
 8005dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd0:	d011      	beq.n	8005df6 <UART_SetConfig+0x10a>
 8005dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd6:	d811      	bhi.n	8005dfc <UART_SetConfig+0x110>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <UART_SetConfig+0xf8>
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de0:	d006      	beq.n	8005df0 <UART_SetConfig+0x104>
 8005de2:	e00b      	b.n	8005dfc <UART_SetConfig+0x110>
 8005de4:	2300      	movs	r3, #0
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e08b      	b.n	8005f02 <UART_SetConfig+0x216>
 8005dea:	2302      	movs	r3, #2
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e088      	b.n	8005f02 <UART_SetConfig+0x216>
 8005df0:	2304      	movs	r3, #4
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e085      	b.n	8005f02 <UART_SetConfig+0x216>
 8005df6:	2308      	movs	r3, #8
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e082      	b.n	8005f02 <UART_SetConfig+0x216>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e07f      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a89      	ldr	r2, [pc, #548]	; (800602c <UART_SetConfig+0x340>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d124      	bne.n	8005e56 <UART_SetConfig+0x16a>
 8005e0c:	4b85      	ldr	r3, [pc, #532]	; (8006024 <UART_SetConfig+0x338>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e18:	d011      	beq.n	8005e3e <UART_SetConfig+0x152>
 8005e1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e1e:	d817      	bhi.n	8005e50 <UART_SetConfig+0x164>
 8005e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e24:	d011      	beq.n	8005e4a <UART_SetConfig+0x15e>
 8005e26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e2a:	d811      	bhi.n	8005e50 <UART_SetConfig+0x164>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <UART_SetConfig+0x14c>
 8005e30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e34:	d006      	beq.n	8005e44 <UART_SetConfig+0x158>
 8005e36:	e00b      	b.n	8005e50 <UART_SetConfig+0x164>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e061      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e05e      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e44:	2304      	movs	r3, #4
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e05b      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e058      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e50:	2310      	movs	r3, #16
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e055      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a75      	ldr	r2, [pc, #468]	; (8006030 <UART_SetConfig+0x344>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d124      	bne.n	8005eaa <UART_SetConfig+0x1be>
 8005e60:	4b70      	ldr	r3, [pc, #448]	; (8006024 <UART_SetConfig+0x338>)
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e6c:	d011      	beq.n	8005e92 <UART_SetConfig+0x1a6>
 8005e6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e72:	d817      	bhi.n	8005ea4 <UART_SetConfig+0x1b8>
 8005e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e78:	d011      	beq.n	8005e9e <UART_SetConfig+0x1b2>
 8005e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e7e:	d811      	bhi.n	8005ea4 <UART_SetConfig+0x1b8>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <UART_SetConfig+0x1a0>
 8005e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e88:	d006      	beq.n	8005e98 <UART_SetConfig+0x1ac>
 8005e8a:	e00b      	b.n	8005ea4 <UART_SetConfig+0x1b8>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e037      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e92:	2302      	movs	r3, #2
 8005e94:	77fb      	strb	r3, [r7, #31]
 8005e96:	e034      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	e031      	b.n	8005f02 <UART_SetConfig+0x216>
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	77fb      	strb	r3, [r7, #31]
 8005ea2:	e02e      	b.n	8005f02 <UART_SetConfig+0x216>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e02b      	b.n	8005f02 <UART_SetConfig+0x216>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a61      	ldr	r2, [pc, #388]	; (8006034 <UART_SetConfig+0x348>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d124      	bne.n	8005efe <UART_SetConfig+0x212>
 8005eb4:	4b5b      	ldr	r3, [pc, #364]	; (8006024 <UART_SetConfig+0x338>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005ebc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ec0:	d011      	beq.n	8005ee6 <UART_SetConfig+0x1fa>
 8005ec2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ec6:	d817      	bhi.n	8005ef8 <UART_SetConfig+0x20c>
 8005ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ecc:	d011      	beq.n	8005ef2 <UART_SetConfig+0x206>
 8005ece:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ed2:	d811      	bhi.n	8005ef8 <UART_SetConfig+0x20c>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <UART_SetConfig+0x1f4>
 8005ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005edc:	d006      	beq.n	8005eec <UART_SetConfig+0x200>
 8005ede:	e00b      	b.n	8005ef8 <UART_SetConfig+0x20c>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e00d      	b.n	8005f02 <UART_SetConfig+0x216>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e00a      	b.n	8005f02 <UART_SetConfig+0x216>
 8005eec:	2304      	movs	r3, #4
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e007      	b.n	8005f02 <UART_SetConfig+0x216>
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e004      	b.n	8005f02 <UART_SetConfig+0x216>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e001      	b.n	8005f02 <UART_SetConfig+0x216>
 8005efe:	2310      	movs	r3, #16
 8005f00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0a:	d15c      	bne.n	8005fc6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005f0c:	7ffb      	ldrb	r3, [r7, #31]
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d827      	bhi.n	8005f62 <UART_SetConfig+0x276>
 8005f12:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <UART_SetConfig+0x22c>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	08005f63 	.word	0x08005f63
 8005f28:	08005f53 	.word	0x08005f53
 8005f2c:	08005f63 	.word	0x08005f63
 8005f30:	08005f63 	.word	0x08005f63
 8005f34:	08005f63 	.word	0x08005f63
 8005f38:	08005f5b 	.word	0x08005f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f3c:	f7fe fb24 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 8005f40:	61b8      	str	r0, [r7, #24]
        break;
 8005f42:	e013      	b.n	8005f6c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f44:	f7fe fb42 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 8005f48:	61b8      	str	r0, [r7, #24]
        break;
 8005f4a:	e00f      	b.n	8005f6c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f4c:	4b3a      	ldr	r3, [pc, #232]	; (8006038 <UART_SetConfig+0x34c>)
 8005f4e:	61bb      	str	r3, [r7, #24]
        break;
 8005f50:	e00c      	b.n	8005f6c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f52:	f7fe faa3 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8005f56:	61b8      	str	r0, [r7, #24]
        break;
 8005f58:	e008      	b.n	8005f6c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f5e:	61bb      	str	r3, [r7, #24]
        break;
 8005f60:	e004      	b.n	8005f6c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	77bb      	strb	r3, [r7, #30]
        break;
 8005f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8085 	beq.w	800607e <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	005a      	lsls	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	441a      	add	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b0f      	cmp	r3, #15
 8005f90:	d916      	bls.n	8005fc0 <UART_SetConfig+0x2d4>
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d212      	bcs.n	8005fc0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f023 030f 	bic.w	r3, r3, #15
 8005fa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	89fa      	ldrh	r2, [r7, #14]
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	e05e      	b.n	800607e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	77bb      	strb	r3, [r7, #30]
 8005fc4:	e05b      	b.n	800607e <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fc6:	7ffb      	ldrb	r3, [r7, #31]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d837      	bhi.n	800603c <UART_SetConfig+0x350>
 8005fcc:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <UART_SetConfig+0x2e8>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08005ff9 	.word	0x08005ff9
 8005fd8:	08006001 	.word	0x08006001
 8005fdc:	08006009 	.word	0x08006009
 8005fe0:	0800603d 	.word	0x0800603d
 8005fe4:	0800600f 	.word	0x0800600f
 8005fe8:	0800603d 	.word	0x0800603d
 8005fec:	0800603d 	.word	0x0800603d
 8005ff0:	0800603d 	.word	0x0800603d
 8005ff4:	08006017 	.word	0x08006017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff8:	f7fe fac6 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 8005ffc:	61b8      	str	r0, [r7, #24]
        break;
 8005ffe:	e022      	b.n	8006046 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006000:	f7fe fae4 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 8006004:	61b8      	str	r0, [r7, #24]
        break;
 8006006:	e01e      	b.n	8006046 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <UART_SetConfig+0x34c>)
 800600a:	61bb      	str	r3, [r7, #24]
        break;
 800600c:	e01b      	b.n	8006046 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600e:	f7fe fa45 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8006012:	61b8      	str	r0, [r7, #24]
        break;
 8006014:	e017      	b.n	8006046 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601a:	61bb      	str	r3, [r7, #24]
        break;
 800601c:	e013      	b.n	8006046 <UART_SetConfig+0x35a>
 800601e:	bf00      	nop
 8006020:	40013800 	.word	0x40013800
 8006024:	40021000 	.word	0x40021000
 8006028:	40004400 	.word	0x40004400
 800602c:	40004800 	.word	0x40004800
 8006030:	40004c00 	.word	0x40004c00
 8006034:	40005000 	.word	0x40005000
 8006038:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	77bb      	strb	r3, [r7, #30]
        break;
 8006044:	bf00      	nop
    }

    if (pclk != 0U)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d018      	beq.n	800607e <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	085a      	lsrs	r2, r3, #1
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	441a      	add	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	fbb2 f3f3 	udiv	r3, r2, r3
 800605e:	b29b      	uxth	r3, r3
 8006060:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b0f      	cmp	r3, #15
 8006066:	d908      	bls.n	800607a <UART_SetConfig+0x38e>
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606e:	d204      	bcs.n	800607a <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	60da      	str	r2, [r3, #12]
 8006078:	e001      	b.n	800607e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800608a:	7fbb      	ldrb	r3, [r7, #30]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01a      	beq.n	80061aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006192:	d10a      	bne.n	80061aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af02      	add	r7, sp, #8
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e8:	f7fb ff24 	bl	8002034 <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d10e      	bne.n	800621a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f82d 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e023      	b.n	8006262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b04      	cmp	r3, #4
 8006226:	d10e      	bne.n	8006246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f817 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e00d      	b.n	8006262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b09c      	sub	sp, #112	; 0x70
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627a:	e0a5      	b.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	f000 80a1 	beq.w	80063c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006286:	f7fb fed5 	bl	8002034 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006292:	429a      	cmp	r2, r3
 8006294:	d302      	bcc.n	800629c <UART_WaitOnFlagUntilTimeout+0x32>
 8006296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006298:	2b00      	cmp	r3, #0
 800629a:	d13e      	bne.n	800631a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062b0:	667b      	str	r3, [r7, #100]	; 0x64
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e6      	bne.n	800629c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	663b      	str	r3, [r7, #96]	; 0x60
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e067      	b.n	80063ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d04f      	beq.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006336:	d147      	bne.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006340:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
 8006362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e6      	bne.n	8006342 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	613b      	str	r3, [r7, #16]
   return(result);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	66bb      	str	r3, [r7, #104]	; 0x68
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006394:	623a      	str	r2, [r7, #32]
 8006396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e010      	b.n	80063ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69da      	ldr	r2, [r3, #28]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4013      	ands	r3, r2
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	bf0c      	ite	eq
 80063d8:	2301      	moveq	r3, #1
 80063da:	2300      	movne	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	f43f af4a 	beq.w	800627c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3770      	adds	r7, #112	; 0x70
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b091      	sub	sp, #68	; 0x44
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006426:	d10e      	bne.n	8006446 <UART_Start_Receive_IT+0x52>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d105      	bne.n	800643c <UART_Start_Receive_IT+0x48>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800643a:	e01a      	b.n	8006472 <UART_Start_Receive_IT+0x7e>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	22ff      	movs	r2, #255	; 0xff
 8006440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006444:	e015      	b.n	8006472 <UART_Start_Receive_IT+0x7e>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <UART_Start_Receive_IT+0x76>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d104      	bne.n	8006460 <UART_Start_Receive_IT+0x6c>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	22ff      	movs	r2, #255	; 0xff
 800645a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800645e:	e008      	b.n	8006472 <UART_Start_Receive_IT+0x7e>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	227f      	movs	r2, #127	; 0x7f
 8006464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006468:	e003      	b.n	8006472 <UART_Start_Receive_IT+0x7e>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2222      	movs	r2, #34	; 0x22
 800647e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064a0:	637a      	str	r2, [r7, #52]	; 0x34
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e5      	bne.n	8006480 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064bc:	d107      	bne.n	80064ce <UART_Start_Receive_IT+0xda>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a14      	ldr	r2, [pc, #80]	; (800651c <UART_Start_Receive_IT+0x128>)
 80064ca:	665a      	str	r2, [r3, #100]	; 0x64
 80064cc:	e002      	b.n	80064d4 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a13      	ldr	r2, [pc, #76]	; (8006520 <UART_Start_Receive_IT+0x12c>)
 80064d2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80064f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	623b      	str	r3, [r7, #32]
 80064fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	69f9      	ldr	r1, [r7, #28]
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	61bb      	str	r3, [r7, #24]
   return(result);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e6      	bne.n	80064dc <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3744      	adds	r7, #68	; 0x44
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	080067c7 	.word	0x080067c7
 8006520:	0800666b 	.word	0x0800666b

08006524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b095      	sub	sp, #84	; 0x54
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654a:	643b      	str	r3, [r7, #64]	; 0x40
 800654c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e6      	bne.n	800652c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3308      	adds	r3, #8
 8006564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	61fb      	str	r3, [r7, #28]
   return(result);
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	64bb      	str	r3, [r7, #72]	; 0x48
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800657e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e5      	bne.n	800655e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006596:	2b01      	cmp	r3, #1
 8006598:	d118      	bne.n	80065cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	647b      	str	r3, [r7, #68]	; 0x44
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6979      	ldr	r1, [r7, #20]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	613b      	str	r3, [r7, #16]
   return(result);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e6      	bne.n	800659a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80065de:	bf00      	nop
 80065e0:	3754      	adds	r7, #84	; 0x54
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fb59 	bl	8005cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800660e:	bf00      	nop
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b088      	sub	sp, #32
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	60bb      	str	r3, [r7, #8]
   return(result);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6979      	ldr	r1, [r7, #20]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	613b      	str	r3, [r7, #16]
   return(result);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e6      	bne.n	800661e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff fb25 	bl	8005cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006662:	bf00      	nop
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b096      	sub	sp, #88	; 0x58
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006678:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006680:	2b22      	cmp	r3, #34	; 0x22
 8006682:	f040 8094 	bne.w	80067ae <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800668c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006690:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006694:	b2d9      	uxtb	r1, r3
 8006696:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800669a:	b2da      	uxtb	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	400a      	ands	r2, r1
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d177      	bne.n	80067be <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e2:	653b      	str	r3, [r7, #80]	; 0x50
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ec:	647b      	str	r3, [r7, #68]	; 0x44
 80066ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e6      	bne.n	80066ce <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3308      	adds	r3, #8
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	623b      	str	r3, [r7, #32]
   return(result);
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006720:	633a      	str	r2, [r7, #48]	; 0x30
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e5      	bne.n	8006700 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	2b01      	cmp	r3, #1
 8006746:	d12e      	bne.n	80067a6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	60fb      	str	r3, [r7, #12]
   return(result);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0310 	bic.w	r3, r3, #16
 8006762:	64bb      	str	r3, [r7, #72]	; 0x48
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676c:	61fb      	str	r3, [r7, #28]
 800676e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	69b9      	ldr	r1, [r7, #24]
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	617b      	str	r3, [r7, #20]
   return(result);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e6      	bne.n	800674e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b10      	cmp	r3, #16
 800678c:	d103      	bne.n	8006796 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2210      	movs	r2, #16
 8006794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fa98 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067a4:	e00b      	b.n	80067be <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fa fe1a 	bl	80013e0 <HAL_UART_RxCpltCallback>
}
 80067ac:	e007      	b.n	80067be <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699a      	ldr	r2, [r3, #24]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0208 	orr.w	r2, r2, #8
 80067bc:	619a      	str	r2, [r3, #24]
}
 80067be:	bf00      	nop
 80067c0:	3758      	adds	r7, #88	; 0x58
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b096      	sub	sp, #88	; 0x58
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067dc:	2b22      	cmp	r3, #34	; 0x22
 80067de:	f040 8094 	bne.w	800690a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80067f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80067f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067fa:	4013      	ands	r3, r2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006800:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	1c9a      	adds	r2, r3, #2
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d177      	bne.n	800691a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800683e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006848:	643b      	str	r3, [r7, #64]	; 0x40
 800684a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800684e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e6      	bne.n	800682a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	61fb      	str	r3, [r7, #28]
   return(result);
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	64bb      	str	r3, [r7, #72]	; 0x48
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800687c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e5      	bne.n	800685c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d12e      	bne.n	8006902 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f023 0310 	bic.w	r3, r3, #16
 80068be:	647b      	str	r3, [r7, #68]	; 0x44
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6979      	ldr	r1, [r7, #20]
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	613b      	str	r3, [r7, #16]
   return(result);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e6      	bne.n	80068aa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f003 0310 	and.w	r3, r3, #16
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d103      	bne.n	80068f2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2210      	movs	r2, #16
 80068f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff f9ea 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006900:	e00b      	b.n	800691a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fa fd6c 	bl	80013e0 <HAL_UART_RxCpltCallback>
}
 8006908:	e007      	b.n	800691a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0208 	orr.w	r2, r2, #8
 8006918:	619a      	str	r2, [r3, #24]
}
 800691a:	bf00      	nop
 800691c:	3758      	adds	r7, #88	; 0x58
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800693c:	4904      	ldr	r1, [pc, #16]	; (8006950 <MX_FATFS_Init+0x18>)
 800693e:	4805      	ldr	r0, [pc, #20]	; (8006954 <MX_FATFS_Init+0x1c>)
 8006940:	f004 fbc8 	bl	800b0d4 <FATFS_LinkDriver>
 8006944:	4603      	mov	r3, r0
 8006946:	461a      	mov	r2, r3
 8006948:	4b03      	ldr	r3, [pc, #12]	; (8006958 <MX_FATFS_Init+0x20>)
 800694a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800694c:	bf00      	nop
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20002910 	.word	0x20002910
 8006954:	20000010 	.word	0x20000010
 8006958:	20002914 	.word	0x20002914

0800695c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006960:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006962:	4618      	mov	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	4618      	mov	r0, r3
 800697a:	f7fa f941 	bl	8000c00 <SD_disk_initialize>
 800697e:	4603      	mov	r3, r0
 8006980:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	4603      	mov	r3, r0
 8006992:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	4618      	mov	r0, r3
 8006998:	f7fa fa1e 	bl	8000dd8 <SD_disk_status>
 800699c:	4603      	mov	r3, r0
 800699e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80069b8:	7bf8      	ldrb	r0, [r7, #15]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	f7fa fa20 	bl	8000e04 <SD_disk_read>
 80069c4:	4603      	mov	r3, r0
 80069c6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80069e0:	7bf8      	ldrb	r0, [r7, #15]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	f7fa fa76 	bl	8000ed8 <SD_disk_write>
 80069ec:	4603      	mov	r3, r0
 80069ee:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	603a      	str	r2, [r7, #0]
 8006a02:	71fb      	strb	r3, [r7, #7]
 8006a04:	460b      	mov	r3, r1
 8006a06:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	79b9      	ldrb	r1, [r7, #6]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fa fae6 	bl	8000fe0 <SD_disk_ioctl>
 8006a14:	4603      	mov	r3, r0
 8006a16:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	4a08      	ldr	r2, [pc, #32]	; (8006a50 <disk_status+0x30>)
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	79fa      	ldrb	r2, [r7, #7]
 8006a38:	4905      	ldr	r1, [pc, #20]	; (8006a50 <disk_status+0x30>)
 8006a3a:	440a      	add	r2, r1
 8006a3c:	7a12      	ldrb	r2, [r2, #8]
 8006a3e:	4610      	mov	r0, r2
 8006a40:	4798      	blx	r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	200002d8 	.word	0x200002d8

08006a54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	4a0d      	ldr	r2, [pc, #52]	; (8006a9c <disk_initialize+0x48>)
 8006a66:	5cd3      	ldrb	r3, [r2, r3]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d111      	bne.n	8006a90 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	4a0b      	ldr	r2, [pc, #44]	; (8006a9c <disk_initialize+0x48>)
 8006a70:	2101      	movs	r1, #1
 8006a72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	4a09      	ldr	r2, [pc, #36]	; (8006a9c <disk_initialize+0x48>)
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	79fa      	ldrb	r2, [r7, #7]
 8006a82:	4906      	ldr	r1, [pc, #24]	; (8006a9c <disk_initialize+0x48>)
 8006a84:	440a      	add	r2, r1
 8006a86:	7a12      	ldrb	r2, [r2, #8]
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200002d8 	.word	0x200002d8

08006aa0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <disk_read+0x3c>)
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	689c      	ldr	r4, [r3, #8]
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	4a07      	ldr	r2, [pc, #28]	; (8006adc <disk_read+0x3c>)
 8006ac0:	4413      	add	r3, r2
 8006ac2:	7a18      	ldrb	r0, [r3, #8]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	47a0      	blx	r4
 8006acc:	4603      	mov	r3, r0
 8006ace:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd90      	pop	{r4, r7, pc}
 8006ada:	bf00      	nop
 8006adc:	200002d8 	.word	0x200002d8

08006ae0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ae0:	b590      	push	{r4, r7, lr}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <disk_write+0x3c>)
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	68dc      	ldr	r4, [r3, #12]
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	4a07      	ldr	r2, [pc, #28]	; (8006b1c <disk_write+0x3c>)
 8006b00:	4413      	add	r3, r2
 8006b02:	7a18      	ldrb	r0, [r3, #8]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	47a0      	blx	r4
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd90      	pop	{r4, r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200002d8 	.word	0x200002d8

08006b20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	603a      	str	r2, [r7, #0]
 8006b2a:	71fb      	strb	r3, [r7, #7]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <disk_ioctl+0x38>)
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	79fa      	ldrb	r2, [r7, #7]
 8006b3e:	4906      	ldr	r1, [pc, #24]	; (8006b58 <disk_ioctl+0x38>)
 8006b40:	440a      	add	r2, r1
 8006b42:	7a10      	ldrb	r0, [r2, #8]
 8006b44:	79b9      	ldrb	r1, [r7, #6]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	4798      	blx	r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	200002d8 	.word	0x200002d8

08006b5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006b70:	e007      	b.n	8006b82 <mem_cpy+0x26>
		*d++ = *s++;
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	1c53      	adds	r3, r2, #1
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	1c59      	adds	r1, r3, #1
 8006b7c:	6179      	str	r1, [r7, #20]
 8006b7e:	7812      	ldrb	r2, [r2, #0]
 8006b80:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	1e5a      	subs	r2, r3, #1
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f2      	bne.n	8006b72 <mem_cpy+0x16>
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006b9a:	b480      	push	{r7}
 8006b9c:	b087      	sub	sp, #28
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006baa:	e005      	b.n	8006bb8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	617a      	str	r2, [r7, #20]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	1e5a      	subs	r2, r3, #1
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f4      	bne.n	8006bac <mem_set+0x12>
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006bd0:	b480      	push	{r7}
 8006bd2:	b089      	sub	sp, #36	; 0x24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	61fb      	str	r3, [r7, #28]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006be8:	bf00      	nop
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	1e5a      	subs	r2, r3, #1
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00d      	beq.n	8006c10 <mem_cmp+0x40>
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	61fa      	str	r2, [r7, #28]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	61ba      	str	r2, [r7, #24]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	1acb      	subs	r3, r1, r3
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0ec      	beq.n	8006bea <mem_cmp+0x1a>
	return r;
 8006c10:	697b      	ldr	r3, [r7, #20]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3724      	adds	r7, #36	; 0x24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006c28:	e002      	b.n	8006c30 <chk_chr+0x12>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <chk_chr+0x26>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d1f2      	bne.n	8006c2a <chk_chr+0xc>
	return *str;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	781b      	ldrb	r3, [r3, #0]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e03d      	b.n	8006ce4 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8006c68:	4932      	ldr	r1, [pc, #200]	; (8006d34 <chk_lock+0xe0>)
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d02e      	beq.n	8006cda <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006c7c:	492d      	ldr	r1, [pc, #180]	; (8006d34 <chk_lock+0xe0>)
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4613      	mov	r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d122      	bne.n	8006cde <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8006c98:	4926      	ldr	r1, [pc, #152]	; (8006d34 <chk_lock+0xe0>)
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d112      	bne.n	8006cde <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8006cb8:	491e      	ldr	r1, [pc, #120]	; (8006d34 <chk_lock+0xe0>)
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	881a      	ldrh	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd0:	3306      	adds	r3, #6
 8006cd2:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d102      	bne.n	8006cde <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8006cd8:	e007      	b.n	8006cea <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d9be      	bls.n	8006c68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d109      	bne.n	8006d04 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <chk_lock+0xa8>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d101      	bne.n	8006d00 <chk_lock+0xac>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e013      	b.n	8006d28 <chk_lock+0xd4>
 8006d00:	2312      	movs	r3, #18
 8006d02:	e011      	b.n	8006d28 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10b      	bne.n	8006d22 <chk_lock+0xce>
 8006d0a:	490a      	ldr	r1, [pc, #40]	; (8006d34 <chk_lock+0xe0>)
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	330a      	adds	r3, #10
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d20:	d101      	bne.n	8006d26 <chk_lock+0xd2>
 8006d22:	2310      	movs	r3, #16
 8006d24:	e000      	b.n	8006d28 <chk_lock+0xd4>
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	200000c0 	.word	0x200000c0

08006d38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]
 8006d42:	e002      	b.n	8006d4a <enq_lock+0x12>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3301      	adds	r3, #1
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d809      	bhi.n	8006d64 <enq_lock+0x2c>
 8006d50:	490a      	ldr	r1, [pc, #40]	; (8006d7c <enq_lock+0x44>)
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1ef      	bne.n	8006d44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	bf14      	ite	ne
 8006d6a:	2301      	movne	r3, #1
 8006d6c:	2300      	moveq	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	200000c0 	.word	0x200000c0

08006d80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e030      	b.n	8006df2 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8006d90:	495b      	ldr	r1, [pc, #364]	; (8006f00 <inc_lock+0x180>)
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d11f      	bne.n	8006dec <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8006dac:	4954      	ldr	r1, [pc, #336]	; (8006f00 <inc_lock+0x180>)
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4613      	mov	r3, r2
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	3304      	adds	r3, #4
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d10f      	bne.n	8006dec <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8006dcc:	494c      	ldr	r1, [pc, #304]	; (8006f00 <inc_lock+0x180>)
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	3308      	adds	r3, #8
 8006ddc:	881a      	ldrh	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de4:	3306      	adds	r3, #6
 8006de6:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d006      	beq.n	8006dfa <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d9cb      	bls.n	8006d90 <inc_lock+0x10>
 8006df8:	e000      	b.n	8006dfc <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8006dfa:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d14a      	bne.n	8006e98 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	e002      	b.n	8006e0e <inc_lock+0x8e>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d809      	bhi.n	8006e28 <inc_lock+0xa8>
 8006e14:	493a      	ldr	r1, [pc, #232]	; (8006f00 <inc_lock+0x180>)
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1ef      	bne.n	8006e08 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d101      	bne.n	8006e32 <inc_lock+0xb2>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e05f      	b.n	8006ef2 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e38:	6819      	ldr	r1, [r3, #0]
 8006e3a:	4831      	ldr	r0, [pc, #196]	; (8006f00 <inc_lock+0x180>)
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4403      	add	r3, r0
 8006e48:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e50:	3308      	adds	r3, #8
 8006e52:	6819      	ldr	r1, [r3, #0]
 8006e54:	482a      	ldr	r0, [pc, #168]	; (8006f00 <inc_lock+0x180>)
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4403      	add	r3, r0
 8006e62:	3304      	adds	r3, #4
 8006e64:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6c:	3306      	adds	r3, #6
 8006e6e:	8818      	ldrh	r0, [r3, #0]
 8006e70:	4923      	ldr	r1, [pc, #140]	; (8006f00 <inc_lock+0x180>)
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4613      	mov	r3, r2
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	3308      	adds	r3, #8
 8006e80:	4602      	mov	r2, r0
 8006e82:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006e84:	491e      	ldr	r1, [pc, #120]	; (8006f00 <inc_lock+0x180>)
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	330a      	adds	r3, #10
 8006e94:	2200      	movs	r2, #0
 8006e96:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00c      	beq.n	8006eb8 <inc_lock+0x138>
 8006e9e:	4918      	ldr	r1, [pc, #96]	; (8006f00 <inc_lock+0x180>)
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	330a      	adds	r3, #10
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <inc_lock+0x138>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e01c      	b.n	8006ef2 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <inc_lock+0x156>
 8006ebe:	4910      	ldr	r1, [pc, #64]	; (8006f00 <inc_lock+0x180>)
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	330a      	adds	r3, #10
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	b299      	uxth	r1, r3
 8006ed4:	e001      	b.n	8006eda <inc_lock+0x15a>
 8006ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eda:	4809      	ldr	r0, [pc, #36]	; (8006f00 <inc_lock+0x180>)
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4403      	add	r3, r0
 8006ee8:	330a      	adds	r3, #10
 8006eea:	460a      	mov	r2, r1
 8006eec:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	200000c0 	.word	0x200000c0

08006f04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d82e      	bhi.n	8006f76 <dec_lock+0x72>
		n = Files[i].ctr;
 8006f18:	491b      	ldr	r1, [pc, #108]	; (8006f88 <dec_lock+0x84>)
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	330a      	adds	r3, #10
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f2c:	89fb      	ldrh	r3, [r7, #14]
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f32:	d101      	bne.n	8006f38 <dec_lock+0x34>
 8006f34:	2300      	movs	r3, #0
 8006f36:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006f38:	89fb      	ldrh	r3, [r7, #14]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <dec_lock+0x40>
 8006f3e:	89fb      	ldrh	r3, [r7, #14]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006f44:	4910      	ldr	r1, [pc, #64]	; (8006f88 <dec_lock+0x84>)
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	330a      	adds	r3, #10
 8006f54:	89fa      	ldrh	r2, [r7, #14]
 8006f56:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f58:	89fb      	ldrh	r3, [r7, #14]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d108      	bne.n	8006f70 <dec_lock+0x6c>
 8006f5e:	490a      	ldr	r1, [pc, #40]	; (8006f88 <dec_lock+0x84>)
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	737b      	strb	r3, [r7, #13]
 8006f74:	e001      	b.n	8006f7a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006f76:	2302      	movs	r3, #2
 8006f78:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006f7a:	7b7b      	ldrb	r3, [r7, #13]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	200000c0 	.word	0x200000c0

08006f8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	e016      	b.n	8006fc8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006f9a:	4910      	ldr	r1, [pc, #64]	; (8006fdc <clear_lock+0x50>)
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d108      	bne.n	8006fc2 <clear_lock+0x36>
 8006fb0:	490a      	ldr	r1, [pc, #40]	; (8006fdc <clear_lock+0x50>)
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d9e5      	bls.n	8006f9a <clear_lock+0xe>
	}
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	200000c0 	.word	0x200000c0

08006fe0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d047      	beq.n	800708a <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007000:	330c      	adds	r3, #12
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700c:	3301      	adds	r3, #1
 800700e:	7818      	ldrb	r0, [r3, #0]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	2301      	movs	r3, #1
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	f7ff fd63 	bl	8006ae0 <disk_write>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <sync_window+0x46>
			res = FR_DISK_ERR;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
 8007024:	e031      	b.n	800708a <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800702c:	3304      	adds	r3, #4
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	1ad2      	subs	r2, r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007044:	3318      	adds	r3, #24
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d21e      	bcs.n	800708a <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	3303      	adds	r3, #3
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	e014      	b.n	8007084 <sync_window+0xa4>
					wsect += fs->fsize;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007060:	3318      	adds	r3, #24
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4413      	add	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007070:	3301      	adds	r3, #1
 8007072:	7818      	ldrb	r0, [r3, #0]
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	2301      	movs	r3, #1
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	f7ff fd31 	bl	8006ae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3b01      	subs	r3, #1
 8007082:	613b      	str	r3, [r7, #16]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d8e7      	bhi.n	800705a <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80070a8:	330c      	adds	r3, #12
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d01f      	beq.n	80070f2 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff ff94 	bl	8006fe0 <sync_window>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d117      	bne.n	80070f2 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c8:	3301      	adds	r3, #1
 80070ca:	7818      	ldrb	r0, [r3, #0]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	2301      	movs	r3, #1
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	f7ff fce5 	bl	8006aa0 <disk_read>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295
 80070e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80070ec:	330c      	adds	r3, #12
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff ff6b 	bl	8006fe0 <sync_window>
 800710a:	4603      	mov	r3, r0
 800710c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f040 80bd 	bne.w	8007290 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b03      	cmp	r3, #3
 8007120:	f040 80a7 	bne.w	8007272 <sync_fs+0x176>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712a:	3305      	adds	r3, #5
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b01      	cmp	r3, #1
 8007130:	f040 809f 	bne.w	8007272 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713c:	330a      	adds	r3, #10
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	2100      	movs	r1, #0
 8007144:	f7ff fd29 	bl	8006b9a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2255      	movs	r2, #85	; 0x55
 800714c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	22aa      	movs	r2, #170	; 0xaa
 8007154:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2252      	movs	r2, #82	; 0x52
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2252      	movs	r2, #82	; 0x52
 8007162:	705a      	strb	r2, [r3, #1]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2261      	movs	r2, #97	; 0x61
 8007168:	709a      	strb	r2, [r3, #2]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2241      	movs	r2, #65	; 0x41
 800716e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2272      	movs	r2, #114	; 0x72
 8007174:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2272      	movs	r2, #114	; 0x72
 800717c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2241      	movs	r2, #65	; 0x41
 8007184:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2261      	movs	r2, #97	; 0x61
 800718c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007196:	3310      	adds	r3, #16
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a8:	3310      	adds	r3, #16
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c0:	3310      	adds	r3, #16
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d4:	3310      	adds	r3, #16
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	0e1b      	lsrs	r3, r3, #24
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e8:	330c      	adds	r3, #12
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fa:	330c      	adds	r3, #12
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	0a1b      	lsrs	r3, r3, #8
 8007202:	b29b      	uxth	r3, r3
 8007204:	b2da      	uxtb	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007212:	330c      	adds	r3, #12
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007226:	330c      	adds	r3, #12
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	0e1b      	lsrs	r3, r3, #24
 800722c:	b2da      	uxtb	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723a:	331c      	adds	r3, #28
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007246:	330c      	adds	r3, #12
 8007248:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007250:	3301      	adds	r3, #1
 8007252:	7818      	ldrb	r0, [r3, #0]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800725c:	330c      	adds	r3, #12
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	2301      	movs	r3, #1
 8007262:	f7ff fc3d 	bl	8006ae0 <disk_write>
			fs->fsi_flag = 0;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726c:	3305      	adds	r3, #5
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007278:	3301      	adds	r3, #1
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2200      	movs	r2, #0
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff fc4d 	bl	8006b20 <disk_ioctl>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800728c:	2301      	movs	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	3b02      	subs	r3, #2
 80072a8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b0:	3314      	adds	r3, #20
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3b02      	subs	r3, #2
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d301      	bcc.n	80072c0 <clust2sect+0x26>
 80072bc:	2300      	movs	r3, #0
 80072be:	e00e      	b.n	80072de <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c6:	3302      	adds	r3, #2
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	fb03 f202 	mul.w	r2, r3, r2
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80072d8:	3308      	adds	r3, #8
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4413      	add	r3, r2
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d907      	bls.n	800730a <get_fat+0x20>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007300:	3314      	adds	r3, #20
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d302      	bcc.n	8007310 <get_fat+0x26>
		val = 1;	/* Internal error */
 800730a:	2301      	movs	r3, #1
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e0ec      	b.n	80074ea <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007310:	f04f 33ff 	mov.w	r3, #4294967295
 8007314:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b03      	cmp	r3, #3
 8007320:	f000 809e 	beq.w	8007460 <get_fat+0x176>
 8007324:	2b03      	cmp	r3, #3
 8007326:	f300 80d6 	bgt.w	80074d6 <get_fat+0x1ec>
 800732a:	2b01      	cmp	r3, #1
 800732c:	d002      	beq.n	8007334 <get_fat+0x4a>
 800732e:	2b02      	cmp	r3, #2
 8007330:	d063      	beq.n	80073fa <get_fat+0x110>
 8007332:	e0d0      	b.n	80074d6 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007350:	330a      	adds	r3, #10
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	4619      	mov	r1, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	fbb3 f3f1 	udiv	r3, r3, r1
 800735c:	4413      	add	r3, r2
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff fe97 	bl	8007094 <move_window>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	f040 80b7 	bne.w	80074dc <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	60fa      	str	r2, [r7, #12]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800737a:	320a      	adds	r2, #10
 800737c:	8812      	ldrh	r2, [r2, #0]
 800737e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007382:	fb02 f201 	mul.w	r2, r2, r1
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	5cd3      	ldrb	r3, [r2, r3]
 800738c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800739c:	330a      	adds	r3, #10
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	4619      	mov	r1, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80073a8:	4413      	add	r3, r2
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff fe71 	bl	8007094 <move_window>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f040 8093 	bne.w	80074e0 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c0:	330a      	adds	r3, #10
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80073cc:	fb02 f201 	mul.w	r2, r2, r1
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	5cd3      	ldrb	r3, [r2, r3]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	461a      	mov	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <get_fat+0x106>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	091b      	lsrs	r3, r3, #4
 80073ee:	e002      	b.n	80073f6 <get_fat+0x10c>
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073f6:	617b      	str	r3, [r7, #20]
			break;
 80073f8:	e077      	b.n	80074ea <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007408:	330a      	adds	r3, #10
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	085b      	lsrs	r3, r3, #1
 800740e:	b29b      	uxth	r3, r3
 8007410:	4619      	mov	r1, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	fbb3 f3f1 	udiv	r3, r3, r1
 8007418:	4413      	add	r3, r2
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fe39 	bl	8007094 <move_window>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d15d      	bne.n	80074e4 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	005a      	lsls	r2, r3, #1
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007432:	330a      	adds	r3, #10
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	fbb2 f1f3 	udiv	r1, r2, r3
 800743a:	fb03 f301 	mul.w	r3, r3, r1
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3301      	adds	r3, #1
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	b21a      	sxth	r2, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b21b      	sxth	r3, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	b21b      	sxth	r3, r3
 800745a:	b29b      	uxth	r3, r3
 800745c:	617b      	str	r3, [r7, #20]
			break;
 800745e:	e044      	b.n	80074ea <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746e:	330a      	adds	r3, #10
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	b29b      	uxth	r3, r3
 8007476:	4619      	mov	r1, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	fbb3 f3f1 	udiv	r3, r3, r1
 800747e:	4413      	add	r3, r2
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fe06 	bl	8007094 <move_window>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d12c      	bne.n	80074e8 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	009a      	lsls	r2, r3, #2
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007498:	330a      	adds	r3, #10
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	fbb2 f1f3 	udiv	r1, r2, r3
 80074a0:	fb03 f301 	mul.w	r3, r3, r1
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4413      	add	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	3303      	adds	r3, #3
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	061a      	lsls	r2, r3, #24
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	3302      	adds	r3, #2
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	4313      	orrs	r3, r2
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	3201      	adds	r2, #1
 80074c2:	7812      	ldrb	r2, [r2, #0]
 80074c4:	0212      	lsls	r2, r2, #8
 80074c6:	4313      	orrs	r3, r2
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	7812      	ldrb	r2, [r2, #0]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074d2:	617b      	str	r3, [r7, #20]
			break;
 80074d4:	e009      	b.n	80074ea <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 80074d6:	2301      	movs	r3, #1
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	e006      	b.n	80074ea <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074dc:	bf00      	nop
 80074de:	e004      	b.n	80074ea <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074e0:	bf00      	nop
 80074e2:	e002      	b.n	80074ea <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074e8:	bf00      	nop
		}
	}

	return val;
 80074ea:	697b      	ldr	r3, [r7, #20]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d907      	bls.n	8007516 <put_fat+0x22>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750c:	3314      	adds	r3, #20
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <put_fat+0x28>
		res = FR_INT_ERR;
 8007516:	2302      	movs	r3, #2
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e146      	b.n	80077aa <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b03      	cmp	r3, #3
 8007526:	f000 80d9 	beq.w	80076dc <put_fat+0x1e8>
 800752a:	2b03      	cmp	r3, #3
 800752c:	f300 8133 	bgt.w	8007796 <put_fat+0x2a2>
 8007530:	2b01      	cmp	r3, #1
 8007532:	d003      	beq.n	800753c <put_fat+0x48>
 8007534:	2b02      	cmp	r3, #2
 8007536:	f000 8095 	beq.w	8007664 <put_fat+0x170>
 800753a:	e12c      	b.n	8007796 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4413      	add	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007558:	330a      	adds	r3, #10
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	4619      	mov	r1, r3
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	fbb3 f3f1 	udiv	r3, r3, r1
 8007564:	4413      	add	r3, r2
 8007566:	4619      	mov	r1, r3
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7ff fd93 	bl	8007094 <move_window>
 800756e:	4603      	mov	r3, r0
 8007570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007572:	7ffb      	ldrb	r3, [r7, #31]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f040 8111 	bne.w	800779c <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	617a      	str	r2, [r7, #20]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007586:	320a      	adds	r2, #10
 8007588:	8812      	ldrh	r2, [r2, #0]
 800758a:	fbb3 f1f2 	udiv	r1, r3, r2
 800758e:	fb02 f201 	mul.w	r2, r2, r1
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00d      	beq.n	80075c0 <put_fat+0xcc>
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	b25b      	sxtb	r3, r3
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	b25a      	sxtb	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	b25b      	sxtb	r3, r3
 80075b8:	4313      	orrs	r3, r2
 80075ba:	b25b      	sxtb	r3, r3
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	e001      	b.n	80075c4 <put_fat+0xd0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ce:	3304      	adds	r3, #4
 80075d0:	2201      	movs	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	330a      	adds	r3, #10
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80075ee:	4413      	add	r3, r2
 80075f0:	4619      	mov	r1, r3
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f7ff fd4e 	bl	8007094 <move_window>
 80075f8:	4603      	mov	r3, r0
 80075fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075fc:	7ffb      	ldrb	r3, [r7, #31]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f040 80ce 	bne.w	80077a0 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	330a      	adds	r3, #10
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	fbb3 f1f2 	udiv	r1, r3, r2
 8007616:	fb02 f201 	mul.w	r2, r2, r1
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <put_fat+0x140>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	091b      	lsrs	r3, r3, #4
 8007630:	b2db      	uxtb	r3, r3
 8007632:	e00e      	b.n	8007652 <put_fat+0x15e>
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	b25b      	sxtb	r3, r3
 800763a:	f023 030f 	bic.w	r3, r3, #15
 800763e:	b25a      	sxtb	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	0a1b      	lsrs	r3, r3, #8
 8007644:	b25b      	sxtb	r3, r3
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	b25b      	sxtb	r3, r3
 800764c:	4313      	orrs	r3, r2
 800764e:	b25b      	sxtb	r3, r3
 8007650:	b2db      	uxtb	r3, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800765c:	3304      	adds	r3, #4
 800765e:	2201      	movs	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
			break;
 8007662:	e0a2      	b.n	80077aa <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007672:	330a      	adds	r3, #10
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	b29b      	uxth	r3, r3
 800767a:	4619      	mov	r1, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007682:	4413      	add	r3, r2
 8007684:	4619      	mov	r1, r3
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff fd04 	bl	8007094 <move_window>
 800768c:	4603      	mov	r3, r0
 800768e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007690:	7ffb      	ldrb	r3, [r7, #31]
 8007692:	2b00      	cmp	r3, #0
 8007694:	f040 8086 	bne.w	80077a4 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	005a      	lsls	r2, r3, #1
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a2:	330a      	adds	r3, #10
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80076aa:	fb03 f301 	mul.w	r3, r3, r1
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	0a1b      	lsrs	r3, r3, #8
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	3301      	adds	r3, #1
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d4:	3304      	adds	r3, #4
 80076d6:	2201      	movs	r2, #1
 80076d8:	701a      	strb	r2, [r3, #0]
			break;
 80076da:	e066      	b.n	80077aa <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ea:	330a      	adds	r3, #10
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	089b      	lsrs	r3, r3, #2
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4619      	mov	r1, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80076fa:	4413      	add	r3, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff fcc8 	bl	8007094 <move_window>
 8007704:	4603      	mov	r3, r0
 8007706:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007708:	7ffb      	ldrb	r3, [r7, #31]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d14c      	bne.n	80077a8 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	009a      	lsls	r2, r3, #2
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007718:	330a      	adds	r3, #10
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007720:	fb03 f301 	mul.w	r3, r3, r1
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	3303      	adds	r3, #3
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	061a      	lsls	r2, r3, #24
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	3302      	adds	r3, #2
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	041b      	lsls	r3, r3, #16
 800773c:	4313      	orrs	r3, r2
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	3201      	adds	r2, #1
 8007742:	7812      	ldrb	r2, [r2, #0]
 8007744:	0212      	lsls	r2, r2, #8
 8007746:	4313      	orrs	r3, r2
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	4313      	orrs	r3, r2
 800774e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4313      	orrs	r3, r2
 8007756:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	b2da      	uxtb	r2, r3
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	b29b      	uxth	r3, r3
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	b29a      	uxth	r2, r3
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	3301      	adds	r3, #1
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	701a      	strb	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	0c1a      	lsrs	r2, r3, #16
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	3302      	adds	r3, #2
 8007778:	b2d2      	uxtb	r2, r2
 800777a:	701a      	strb	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	0e1a      	lsrs	r2, r3, #24
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	3303      	adds	r3, #3
 8007784:	b2d2      	uxtb	r2, r2
 8007786:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800778e:	3304      	adds	r3, #4
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
			break;
 8007794:	e009      	b.n	80077aa <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8007796:	2302      	movs	r3, #2
 8007798:	77fb      	strb	r3, [r7, #31]
 800779a:	e006      	b.n	80077aa <put_fat+0x2b6>
			if (res != FR_OK) break;
 800779c:	bf00      	nop
 800779e:	e004      	b.n	80077aa <put_fat+0x2b6>
			if (res != FR_OK) break;
 80077a0:	bf00      	nop
 80077a2:	e002      	b.n	80077aa <put_fat+0x2b6>
			if (res != FR_OK) break;
 80077a4:	bf00      	nop
 80077a6:	e000      	b.n	80077aa <put_fat+0x2b6>
			if (res != FR_OK) break;
 80077a8:	bf00      	nop
		}
	}

	return res;
 80077aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d907      	bls.n	80077d4 <remove_chain+0x20>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ca:	3314      	adds	r3, #20
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d302      	bcc.n	80077da <remove_chain+0x26>
		res = FR_INT_ERR;
 80077d4:	2302      	movs	r3, #2
 80077d6:	73fb      	strb	r3, [r7, #15]
 80077d8:	e04f      	b.n	800787a <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80077de:	e040      	b.n	8007862 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fd81 	bl	80072ea <get_fat>
 80077e8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d041      	beq.n	8007874 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d102      	bne.n	80077fc <remove_chain+0x48>
 80077f6:	2302      	movs	r3, #2
 80077f8:	73fb      	strb	r3, [r7, #15]
 80077fa:	e03e      	b.n	800787a <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d102      	bne.n	800780a <remove_chain+0x56>
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
 8007808:	e037      	b.n	800787a <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800780a:	2200      	movs	r2, #0
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff fe70 	bl	80074f4 <put_fat>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d12c      	bne.n	8007878 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007824:	3310      	adds	r3, #16
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d017      	beq.n	800785e <remove_chain+0xaa>
				fs->free_clust++;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007834:	3310      	adds	r3, #16
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007840:	3310      	adds	r3, #16
 8007842:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784a:	3305      	adds	r3, #5
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	b2da      	uxtb	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785a:	3305      	adds	r3, #5
 800785c:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007868:	3314      	adds	r3, #20
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d3b6      	bcc.n	80077e0 <remove_chain+0x2c>
 8007872:	e002      	b.n	800787a <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8007874:	bf00      	nop
 8007876:	e000      	b.n	800787a <remove_chain+0xc6>
			if (res != FR_OK) break;
 8007878:	bf00      	nop
		}
	}

	return res;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d113      	bne.n	80078bc <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789a:	330c      	adds	r3, #12
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <create_chain+0x32>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ac:	3314      	adds	r3, #20
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d31e      	bcc.n	80078f4 <create_chain+0x70>
 80078b6:	2301      	movs	r3, #1
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	e01b      	b.n	80078f4 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fd13 	bl	80072ea <get_fat>
 80078c4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d801      	bhi.n	80078d0 <create_chain+0x4c>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e086      	b.n	80079de <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d101      	bne.n	80078dc <create_chain+0x58>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	e080      	b.n	80079de <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e2:	3314      	adds	r3, #20
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d201      	bcs.n	80078f0 <create_chain+0x6c>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	e076      	b.n	80079de <create_chain+0x15a>
		scl = clst;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	3301      	adds	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007904:	3314      	adds	r3, #20
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	429a      	cmp	r2, r3
 800790c:	d307      	bcc.n	800791e <create_chain+0x9a>
			ncl = 2;
 800790e:	2302      	movs	r3, #2
 8007910:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	429a      	cmp	r2, r3
 8007918:	d901      	bls.n	800791e <create_chain+0x9a>
 800791a:	2300      	movs	r3, #0
 800791c:	e05f      	b.n	80079de <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800791e:	6979      	ldr	r1, [r7, #20]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fce2 	bl	80072ea <get_fat>
 8007926:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d002      	beq.n	800793c <create_chain+0xb8>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <create_chain+0xbc>
			return cs;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	e04e      	b.n	80079de <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	429a      	cmp	r2, r3
 8007946:	d1d7      	bne.n	80078f8 <create_chain+0x74>
 8007948:	2300      	movs	r3, #0
 800794a:	e048      	b.n	80079de <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800794c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800794e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007952:	6979      	ldr	r1, [r7, #20]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fdcd 	bl	80074f4 <put_fat>
 800795a:	4603      	mov	r3, r0
 800795c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d109      	bne.n	8007978 <create_chain+0xf4>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d006      	beq.n	8007978 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff fdc0 	bl	80074f4 <put_fat>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d126      	bne.n	80079cc <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007984:	330c      	adds	r3, #12
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007990:	3310      	adds	r3, #16
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d020      	beq.n	80079dc <create_chain+0x158>
			fs->free_clust--;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	3310      	adds	r3, #16
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	1e5a      	subs	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ac:	3310      	adds	r3, #16
 80079ae:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b6:	3305      	adds	r3, #5
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f043 0301 	orr.w	r3, r3, #1
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c6:	3305      	adds	r3, #5
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	e007      	b.n	80079dc <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d102      	bne.n	80079d8 <create_chain+0x154>
 80079d2:	f04f 33ff 	mov.w	r3, #4294967295
 80079d6:	e000      	b.n	80079da <create_chain+0x156>
 80079d8:	2301      	movs	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80079dc:	697b      	ldr	r3, [r7, #20]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b087      	sub	sp, #28
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80079f6:	3304      	adds	r3, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3304      	adds	r3, #4
 80079fc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0a:	330a      	adds	r3, #10
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a22:	3302      	adds	r3, #2
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1d1a      	adds	r2, r3, #4
 8007a30:	613a      	str	r2, [r7, #16]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <clmt_clust+0x5a>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e010      	b.n	8007a62 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d307      	bcc.n	8007a58 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	3304      	adds	r3, #4
 8007a54:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a56:	e7e9      	b.n	8007a2c <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8007a58:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	4413      	add	r3, r2
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b086      	sub	sp, #24
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a82:	3306      	adds	r3, #6
 8007a84:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d00a      	beq.n	8007aae <dir_sdi+0x40>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa4:	3314      	adds	r3, #20
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d301      	bcc.n	8007ab2 <dir_sdi+0x44>
		return FR_INT_ERR;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e0b4      	b.n	8007c1c <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d111      	bne.n	8007adc <dir_sdi+0x6e>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d108      	bne.n	8007adc <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d117      	bne.n	8007b12 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aee:	3308      	adds	r3, #8
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d301      	bcc.n	8007afe <dir_sdi+0x90>
			return FR_INT_ERR;
 8007afa:	2302      	movs	r3, #2
 8007afc:	e08e      	b.n	8007c1c <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	e046      	b.n	8007ba0 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b1e:	330a      	adds	r3, #10
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b34:	3302      	adds	r3, #2
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	fb03 f302 	mul.w	r3, r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007b3e:	e022      	b.n	8007b86 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6979      	ldr	r1, [r7, #20]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fbcd 	bl	80072ea <get_fat>
 8007b50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d101      	bne.n	8007b5e <dir_sdi+0xf0>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e05e      	b.n	8007c1c <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d90a      	bls.n	8007b7a <dir_sdi+0x10c>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b70:	3314      	adds	r3, #20
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d301      	bcc.n	8007b7e <dir_sdi+0x110>
				return FR_INT_ERR;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e04e      	b.n	8007c1c <dir_sdi+0x1ae>
			idx -= ic;
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d2d8      	bcs.n	8007b40 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6979      	ldr	r1, [r7, #20]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fb7e 	bl	800729a <clust2sect>
 8007b9e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <dir_sdi+0x148>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e032      	b.n	8007c1c <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc2:	330a      	adds	r3, #10
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	441a      	add	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bdc:	3310      	adds	r3, #16
 8007bde:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf6:	330a      	adds	r3, #10
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c06:	fb02 f201 	mul.w	r2, r2, r1
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	015b      	lsls	r3, r3, #5
 8007c0e:	18c2      	adds	r2, r0, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c16:	3314      	adds	r3, #20
 8007c18:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c24:	b590      	push	{r4, r7, lr}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c34:	3306      	adds	r3, #6
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d006      	beq.n	8007c52 <dir_next+0x2e>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	3310      	adds	r3, #16
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <dir_next+0x32>
		return FR_NO_FILE;
 8007c52:	2304      	movs	r3, #4
 8007c54:	e144      	b.n	8007ee0 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c62:	330a      	adds	r3, #10
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c72:	fb02 f201 	mul.w	r2, r2, r1
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f040 810c 	bne.w	8007e96 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	3310      	adds	r3, #16
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c90:	3310      	adds	r3, #16
 8007c92:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9a:	330c      	adds	r3, #12
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10e      	bne.n	8007cc0 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cae:	3308      	adds	r3, #8
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	f0c0 80ed 	bcc.w	8007e96 <dir_next+0x272>
				return FR_NO_FILE;
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	e10f      	b.n	8007ee0 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ccc:	330a      	adds	r3, #10
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce8:	3302      	adds	r3, #2
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f040 80d0 	bne.w	8007e96 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d04:	330c      	adds	r3, #12
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f7ff faed 	bl	80072ea <get_fat>
 8007d10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d801      	bhi.n	8007d1c <dir_next+0xf8>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e0e1      	b.n	8007ee0 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	d101      	bne.n	8007d28 <dir_next+0x104>
 8007d24:	2301      	movs	r3, #1
 8007d26:	e0db      	b.n	8007ee0 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d34:	3314      	adds	r3, #20
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	f0c0 8097 	bcc.w	8007e6e <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <dir_next+0x126>
 8007d46:	2304      	movs	r3, #4
 8007d48:	e0ca      	b.n	8007ee0 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d58:	330c      	adds	r3, #12
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f7ff fd90 	bl	8007884 <create_chain>
 8007d64:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <dir_next+0x14c>
 8007d6c:	2307      	movs	r3, #7
 8007d6e:	e0b7      	b.n	8007ee0 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <dir_next+0x156>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e0b2      	b.n	8007ee0 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d80:	d101      	bne.n	8007d86 <dir_next+0x162>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e0ac      	b.n	8007ee0 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff f926 	bl	8006fe0 <sync_window>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <dir_next+0x17a>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e0a0      	b.n	8007ee0 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db4:	330a      	adds	r3, #10
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	2100      	movs	r1, #0
 8007dbc:	f7fe feed 	bl	8006b9a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dce:	681c      	ldr	r4, [r3, #0]
 8007dd0:	6979      	ldr	r1, [r7, #20]
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f7ff fa61 	bl	800729a <clust2sect>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8007dde:	330c      	adds	r3, #12
 8007de0:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007de2:	2300      	movs	r3, #0
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	e024      	b.n	8007e32 <dir_next+0x20e>
						dp->fs->wflag = 1;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df4:	3304      	adds	r3, #4
 8007df6:	2201      	movs	r2, #1
 8007df8:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff f8ec 	bl	8006fe0 <sync_window>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <dir_next+0x1ee>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e066      	b.n	8007ee0 <dir_next+0x2bc>
						dp->fs->winsect++;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8007e1e:	330c      	adds	r3, #12
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	1c59      	adds	r1, r3, #1
 8007e24:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8007e28:	330c      	adds	r3, #12
 8007e2a:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3e:	3302      	adds	r3, #2
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d3ce      	bcc.n	8007de8 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007e56:	330c      	adds	r3, #12
 8007e58:	6819      	ldr	r1, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	1a8a      	subs	r2, r1, r2
 8007e66:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e74:	330c      	adds	r3, #12
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6979      	ldr	r1, [r7, #20]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff fa08 	bl	800729a <clust2sect>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e92:	3310      	adds	r3, #16
 8007e94:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea0:	3306      	adds	r3, #6
 8007ea2:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eba:	330a      	adds	r3, #10
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eca:	fb02 f201 	mul.w	r2, r2, r1
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	015b      	lsls	r3, r3, #5
 8007ed2:	18c2      	adds	r2, r0, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eda:	3314      	adds	r3, #20
 8007edc:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd90      	pop	{r4, r7, pc}

08007ee8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff fdba 	bl	8007a6e <dir_sdi>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d138      	bne.n	8007f76 <dir_alloc+0x8e>
		n = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f16:	3310      	adds	r3, #16
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	f7ff f8b9 	bl	8007094 <move_window>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d123      	bne.n	8007f74 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f32:	3314      	adds	r3, #20
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2be5      	cmp	r3, #229	; 0xe5
 8007f3a:	d007      	beq.n	8007f4c <dir_alloc+0x64>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f42:	3314      	adds	r3, #20
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d107      	bne.n	8007f5c <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	60bb      	str	r3, [r7, #8]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d102      	bne.n	8007f60 <dir_alloc+0x78>
 8007f5a:	e00c      	b.n	8007f76 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007f60:	2101      	movs	r1, #1
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fe5e 	bl	8007c24 <dir_next>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0ca      	beq.n	8007f08 <dir_alloc+0x20>
 8007f72:	e000      	b.n	8007f76 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8007f74:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d101      	bne.n	8007f80 <dir_alloc+0x98>
 8007f7c:	2307      	movs	r3, #7
 8007f7e:	73fb      	strb	r3, [r7, #15]
	return res;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	331b      	adds	r3, #27
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	b21a      	sxth	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	331a      	adds	r3, #26
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b21b      	sxth	r3, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	b21b      	sxth	r3, r3
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d10f      	bne.n	8007fda <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	3315      	adds	r3, #21
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	b21a      	sxth	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	3314      	adds	r3, #20
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b21b      	sxth	r3, r3
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	b21b      	sxth	r3, r3
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	041b      	lsls	r3, r3, #16
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]

	return cl;
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	331a      	adds	r3, #26
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	b29a      	uxth	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	331b      	adds	r3, #27
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	0c1a      	lsrs	r2, r3, #16
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3314      	adds	r3, #20
 8008014:	b2d2      	uxtb	r2, r2
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	b29b      	uxth	r3, r3
 800801e:	0a1b      	lsrs	r3, r3, #8
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3315      	adds	r3, #21
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	701a      	strb	r2, [r3, #0]
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
	...

08008038 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800804a:	1e5a      	subs	r2, r3, #1
 800804c:	4613      	mov	r3, r2
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
 800805c:	2301      	movs	r3, #1
 800805e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8008060:	4a2b      	ldr	r2, [pc, #172]	; (8008110 <cmp_lfn+0xd8>)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	4413      	add	r3, r2
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	3301      	adds	r3, #1
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4413      	add	r3, r2
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b21a      	sxth	r2, r3
 8008074:	4926      	ldr	r1, [pc, #152]	; (8008110 <cmp_lfn+0xd8>)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	440b      	add	r3, r1
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	4619      	mov	r1, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	440b      	add	r3, r1
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	b21b      	sxth	r3, r3
 8008086:	4313      	orrs	r3, r2
 8008088:	b21b      	sxth	r3, r3
 800808a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800808c:	89fb      	ldrh	r3, [r7, #14]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d019      	beq.n	80080c6 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8008092:	89bb      	ldrh	r3, [r7, #12]
 8008094:	4618      	mov	r0, r3
 8008096:	f003 f869 	bl	800b16c <ff_wtoupper>
 800809a:	4603      	mov	r3, r0
 800809c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2bfe      	cmp	r3, #254	; 0xfe
 80080a2:	d80e      	bhi.n	80080c2 <cmp_lfn+0x8a>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	617a      	str	r2, [r7, #20]
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f003 f85a 	bl	800b16c <ff_wtoupper>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461a      	mov	r2, r3
 80080bc:	89fb      	ldrh	r3, [r7, #14]
 80080be:	4293      	cmp	r3, r2
 80080c0:	d008      	beq.n	80080d4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80080c2:	2300      	movs	r3, #0
 80080c4:	e01f      	b.n	8008106 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80080c6:	89bb      	ldrh	r3, [r7, #12]
 80080c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d001      	beq.n	80080d4 <cmp_lfn+0x9c>
 80080d0:	2300      	movs	r3, #0
 80080d2:	e018      	b.n	8008106 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	3301      	adds	r3, #1
 80080d8:	613b      	str	r3, [r7, #16]
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b0c      	cmp	r3, #12
 80080de:	d9bf      	bls.n	8008060 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <cmp_lfn+0xcc>
 80080ec:	89fb      	ldrh	r3, [r7, #14]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d008      	beq.n	8008104 <cmp_lfn+0xcc>
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <cmp_lfn+0xcc>
		return 0;
 8008100:	2300      	movs	r3, #0
 8008102:	e000      	b.n	8008106 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8008104:	2301      	movs	r3, #1
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	0800bf28 	.word	0x0800bf28

08008114 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8008114:	b480      	push	{r7}
 8008116:	b089      	sub	sp, #36	; 0x24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4611      	mov	r1, r2
 8008120:	461a      	mov	r2, r3
 8008122:	460b      	mov	r3, r1
 8008124:	71fb      	strb	r3, [r7, #7]
 8008126:	4613      	mov	r3, r2
 8008128:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	330d      	adds	r3, #13
 800812e:	79ba      	ldrb	r2, [r7, #6]
 8008130:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	330b      	adds	r3, #11
 8008136:	220f      	movs	r2, #15
 8008138:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	330c      	adds	r3, #12
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	331a      	adds	r3, #26
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	331b      	adds	r3, #27
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	1e5a      	subs	r2, r3, #1
 8008156:	4613      	mov	r3, r2
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	82fb      	strh	r3, [r7, #22]
 8008166:	2300      	movs	r3, #0
 8008168:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800816a:	8afb      	ldrh	r3, [r7, #22]
 800816c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008170:	4293      	cmp	r3, r2
 8008172:	d007      	beq.n	8008184 <fit_lfn+0x70>
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	61fa      	str	r2, [r7, #28]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008184:	4a1d      	ldr	r2, [pc, #116]	; (80081fc <fit_lfn+0xe8>)
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	4413      	add	r3, r2
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4413      	add	r3, r2
 8008192:	8afa      	ldrh	r2, [r7, #22]
 8008194:	b2d2      	uxtb	r2, r2
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	8afb      	ldrh	r3, [r7, #22]
 800819a:	0a1b      	lsrs	r3, r3, #8
 800819c:	b299      	uxth	r1, r3
 800819e:	4a17      	ldr	r2, [pc, #92]	; (80081fc <fit_lfn+0xe8>)
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	4413      	add	r3, r2
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	3301      	adds	r3, #1
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	4413      	add	r3, r2
 80081ac:	b2ca      	uxtb	r2, r1
 80081ae:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80081b0:	8afb      	ldrh	r3, [r7, #22]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <fit_lfn+0xa8>
 80081b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	3301      	adds	r3, #1
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	2b0c      	cmp	r3, #12
 80081c6:	d9d0      	bls.n	800816a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80081c8:	8afb      	ldrh	r3, [r7, #22]
 80081ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d006      	beq.n	80081e0 <fit_lfn+0xcc>
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <fit_lfn+0xd4>
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	79fa      	ldrb	r2, [r7, #7]
 80081ec:	701a      	strb	r2, [r3, #0]
}
 80081ee:	bf00      	nop
 80081f0:	3724      	adds	r7, #36	; 0x24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	0800bf28 	.word	0x0800bf28

08008200 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08c      	sub	sp, #48	; 0x30
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800820e:	220b      	movs	r2, #11
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7fe fca2 	bl	8006b5c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2b05      	cmp	r3, #5
 800821c:	d92b      	bls.n	8008276 <gen_numname+0x76>
		sr = seq;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008222:	e022      	b.n	800826a <gen_numname+0x6a>
			wc = *lfn++;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	1c9a      	adds	r2, r3, #2
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800822e:	2300      	movs	r3, #0
 8008230:	62bb      	str	r3, [r7, #40]	; 0x28
 8008232:	e017      	b.n	8008264 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	005a      	lsls	r2, r3, #1
 8008238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008242:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <gen_numname+0x5e>
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008258:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800825c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	3301      	adds	r3, #1
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d9e4      	bls.n	8008234 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1d8      	bne.n	8008224 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008276:	2307      	movs	r3, #7
 8008278:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	b2db      	uxtb	r3, r3
 8008284:	3330      	adds	r3, #48	; 0x30
 8008286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800828a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800828e:	2b39      	cmp	r3, #57	; 0x39
 8008290:	d904      	bls.n	800829c <gen_numname+0x9c>
 8008292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008296:	3307      	adds	r3, #7
 8008298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	1e5a      	subs	r2, r3, #1
 80082a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80082a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082a6:	4413      	add	r3, r2
 80082a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80082ac:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	091b      	lsrs	r3, r3, #4
 80082b4:	603b      	str	r3, [r7, #0]
	} while (seq);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1de      	bne.n	800827a <gen_numname+0x7a>
	ns[i] = '~';
 80082bc:	f107 0214 	add.w	r2, r7, #20
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	4413      	add	r3, r2
 80082c4:	227e      	movs	r2, #126	; 0x7e
 80082c6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80082c8:	2300      	movs	r3, #0
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
 80082cc:	e002      	b.n	80082d4 <gen_numname+0xd4>
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	3301      	adds	r3, #1
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	429a      	cmp	r2, r3
 80082da:	d205      	bcs.n	80082e8 <gen_numname+0xe8>
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	4413      	add	r3, r2
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	d1f2      	bne.n	80082ce <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	2b07      	cmp	r3, #7
 80082ec:	d808      	bhi.n	8008300 <gen_numname+0x100>
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80082f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082f8:	4413      	add	r3, r2
 80082fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80082fe:	e000      	b.n	8008302 <gen_numname+0x102>
 8008300:	2120      	movs	r1, #32
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	627a      	str	r2, [r7, #36]	; 0x24
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	460a      	mov	r2, r1
 800830e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	2b07      	cmp	r3, #7
 8008314:	d9e8      	bls.n	80082e8 <gen_numname+0xe8>
}
 8008316:	bf00      	nop
 8008318:	bf00      	nop
 800831a:	3730      	adds	r7, #48	; 0x30
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800832c:	230b      	movs	r3, #11
 800832e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	b2da      	uxtb	r2, r3
 8008334:	0852      	lsrs	r2, r2, #1
 8008336:	01db      	lsls	r3, r3, #7
 8008338:	4313      	orrs	r3, r2
 800833a:	b2da      	uxtb	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1c59      	adds	r1, r3, #1
 8008340:	6079      	str	r1, [r7, #4]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	4413      	add	r3, r2
 8008346:	73fb      	strb	r3, [r7, #15]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3b01      	subs	r3, #1
 800834c:	60bb      	str	r3, [r7, #8]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1ed      	bne.n	8008330 <sum_sfn+0x10>
	return sum;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b086      	sub	sp, #24
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800836a:	2100      	movs	r1, #0
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff fb7e 	bl	8007a6e <dir_sdi>
 8008372:	4603      	mov	r3, r0
 8008374:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <dir_find+0x1e>
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	e0c1      	b.n	8008504 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008380:	23ff      	movs	r3, #255	; 0xff
 8008382:	753b      	strb	r3, [r7, #20]
 8008384:	7d3b      	ldrb	r3, [r7, #20]
 8008386:	757b      	strb	r3, [r7, #21]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800838e:	3304      	adds	r3, #4
 8008390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008394:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a4:	3310      	adds	r3, #16
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4619      	mov	r1, r3
 80083aa:	4610      	mov	r0, r2
 80083ac:	f7fe fe72 	bl	8007094 <move_window>
 80083b0:	4603      	mov	r3, r0
 80083b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f040 809e 	bne.w	80084f8 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c2:	3314      	adds	r3, #20
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80083ce:	7dbb      	ldrb	r3, [r7, #22]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <dir_find+0x78>
 80083d4:	2304      	movs	r3, #4
 80083d6:	75fb      	strb	r3, [r7, #23]
 80083d8:	e093      	b.n	8008502 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	330b      	adds	r3, #11
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083e4:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80083e6:	7dbb      	ldrb	r3, [r7, #22]
 80083e8:	2be5      	cmp	r3, #229	; 0xe5
 80083ea:	d007      	beq.n	80083fc <dir_find+0x9a>
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00c      	beq.n	8008410 <dir_find+0xae>
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b0f      	cmp	r3, #15
 80083fa:	d009      	beq.n	8008410 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80083fc:	23ff      	movs	r3, #255	; 0xff
 80083fe:	757b      	strb	r3, [r7, #21]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008406:	3304      	adds	r3, #4
 8008408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800840c:	801a      	strh	r2, [r3, #0]
 800840e:	e068      	b.n	80084e2 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	2b0f      	cmp	r3, #15
 8008414:	d139      	bne.n	800848a <dir_find+0x128>
				if (dp->lfn) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d05f      	beq.n	80084e2 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008422:	7dbb      	ldrb	r3, [r7, #22]
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d012      	beq.n	8008452 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	7b5b      	ldrb	r3, [r3, #13]
 8008430:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8008432:	7dbb      	ldrb	r3, [r7, #22]
 8008434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008438:	75bb      	strb	r3, [r7, #22]
 800843a:	7dbb      	ldrb	r3, [r7, #22]
 800843c:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008444:	3306      	adds	r3, #6
 8008446:	881a      	ldrh	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800844e:	3304      	adds	r3, #4
 8008450:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8008452:	7dba      	ldrb	r2, [r7, #22]
 8008454:	7d7b      	ldrb	r3, [r7, #21]
 8008456:	429a      	cmp	r2, r3
 8008458:	d114      	bne.n	8008484 <dir_find+0x122>
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	330d      	adds	r3, #13
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	7d3a      	ldrb	r2, [r7, #20]
 8008462:	429a      	cmp	r2, r3
 8008464:	d10e      	bne.n	8008484 <dir_find+0x122>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6939      	ldr	r1, [r7, #16]
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff fde1 	bl	8008038 <cmp_lfn>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <dir_find+0x122>
 800847c:	7d7b      	ldrb	r3, [r7, #21]
 800847e:	3b01      	subs	r3, #1
 8008480:	b2db      	uxtb	r3, r3
 8008482:	e000      	b.n	8008486 <dir_find+0x124>
 8008484:	23ff      	movs	r3, #255	; 0xff
 8008486:	757b      	strb	r3, [r7, #21]
 8008488:	e02b      	b.n	80084e2 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800848a:	7d7b      	ldrb	r3, [r7, #21]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d107      	bne.n	80084a0 <dir_find+0x13e>
 8008490:	6938      	ldr	r0, [r7, #16]
 8008492:	f7ff ff45 	bl	8008320 <sum_sfn>
 8008496:	4603      	mov	r3, r0
 8008498:	461a      	mov	r2, r3
 800849a:	7d3b      	ldrb	r3, [r7, #20]
 800849c:	4293      	cmp	r3, r2
 800849e:	d02d      	beq.n	80084fc <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a6:	3318      	adds	r3, #24
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330b      	adds	r3, #11
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10c      	bne.n	80084d0 <dir_find+0x16e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084bc:	3318      	adds	r3, #24
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	220b      	movs	r2, #11
 80084c2:	4619      	mov	r1, r3
 80084c4:	6938      	ldr	r0, [r7, #16]
 80084c6:	f7fe fb83 	bl	8006bd0 <mem_cmp>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d017      	beq.n	8008500 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80084d0:	23ff      	movs	r3, #255	; 0xff
 80084d2:	757b      	strb	r3, [r7, #21]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80084da:	3304      	adds	r3, #4
 80084dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084e0:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80084e2:	2100      	movs	r1, #0
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff fb9d 	bl	8007c24 <dir_next>
 80084ea:	4603      	mov	r3, r0
 80084ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f43f af50 	beq.w	8008396 <dir_find+0x34>
 80084f6:	e004      	b.n	8008502 <dir_find+0x1a0>
		if (res != FR_OK) break;
 80084f8:	bf00      	nop
 80084fa:	e002      	b.n	8008502 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80084fc:	bf00      	nop
 80084fe:	e000      	b.n	8008502 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008500:	bf00      	nop

	return res;
 8008502:	7dfb      	ldrb	r3, [r7, #23]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08c      	sub	sp, #48	; 0x30
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851a:	3318      	adds	r3, #24
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	623b      	str	r3, [r7, #32]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	220c      	movs	r2, #12
 8008530:	6a39      	ldr	r1, [r7, #32]
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fb12 	bl	8006b5c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d039      	beq.n	80085b6 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	330b      	adds	r3, #11
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 8008554:	2301      	movs	r3, #1
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
 8008558:	e013      	b.n	8008582 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800855a:	f107 010c 	add.w	r1, r7, #12
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	6a38      	ldr	r0, [r7, #32]
 8008564:	f7ff fe4c 	bl	8008200 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fefa 	bl	8008362 <dir_find>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008578:	2b00      	cmp	r3, #0
 800857a:	d106      	bne.n	800858a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	3301      	adds	r3, #1
 8008580:	62bb      	str	r3, [r7, #40]	; 0x28
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	2b63      	cmp	r3, #99	; 0x63
 8008586:	d9e8      	bls.n	800855a <dir_register+0x4e>
 8008588:	e000      	b.n	800858c <dir_register+0x80>
			if (res != FR_OK) break;
 800858a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	2b64      	cmp	r3, #100	; 0x64
 8008590:	d101      	bne.n	8008596 <dir_register+0x8a>
 8008592:	2307      	movs	r3, #7
 8008594:	e0e3      	b.n	800875e <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800859a:	2b04      	cmp	r3, #4
 800859c:	d002      	beq.n	80085a4 <dir_register+0x98>
 800859e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085a2:	e0dc      	b.n	800875e <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	330b      	adds	r3, #11
 80085a8:	7dfa      	ldrb	r2, [r7, #23]
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d014      	beq.n	80085ea <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80085c0:	2300      	movs	r3, #0
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80085c4:	e002      	b.n	80085cc <dir_register+0xc0>
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	3301      	adds	r3, #1
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	4413      	add	r3, r2
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f5      	bne.n	80085c6 <dir_register+0xba>
		nent = (n + 25) / 13;
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	3319      	adds	r3, #25
 80085de:	4a62      	ldr	r2, [pc, #392]	; (8008768 <dir_register+0x25c>)
 80085e0:	fba2 2303 	umull	r2, r3, r2, r3
 80085e4:	089b      	lsrs	r3, r3, #2
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
 80085e8:	e001      	b.n	80085ee <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80085ea:	2301      	movs	r3, #1
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80085ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7ff fc79 	bl	8007ee8 <dir_alloc>
 80085f6:	4603      	mov	r3, r0
 80085f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80085fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008600:	2b00      	cmp	r3, #0
 8008602:	d160      	bne.n	80086c6 <dir_register+0x1ba>
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	3b01      	subs	r3, #1
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	d05a      	beq.n	80086c6 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008616:	3306      	adds	r3, #6
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff fa23 	bl	8007a6e <dir_sdi>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800862e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008632:	2b00      	cmp	r3, #0
 8008634:	d147      	bne.n	80086c6 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800863c:	3318      	adds	r3, #24
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff fe6d 	bl	8008320 <sum_sfn>
 8008646:	4603      	mov	r3, r0
 8008648:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008658:	3310      	adds	r3, #16
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f7fe fd18 	bl	8007094 <move_window>
 8008664:	4603      	mov	r3, r0
 8008666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800866a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800866e:	2b00      	cmp	r3, #0
 8008670:	d128      	bne.n	80086c4 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008680:	3314      	adds	r3, #20
 8008682:	6819      	ldr	r1, [r3, #0]
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	b2da      	uxtb	r2, r3
 8008688:	7efb      	ldrb	r3, [r7, #27]
 800868a:	f7ff fd43 	bl	8008114 <fit_lfn>
				dp->fs->wflag = 1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869a:	3304      	adds	r3, #4
 800869c:	2201      	movs	r2, #1
 800869e:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 80086a0:	2100      	movs	r1, #0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff fabe 	bl	8007c24 <dir_next>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80086ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d107      	bne.n	80086c6 <dir_register+0x1ba>
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	3b01      	subs	r3, #1
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1c3      	bne.n	800864a <dir_register+0x13e>
 80086c2:	e000      	b.n	80086c6 <dir_register+0x1ba>
				if (res != FR_OK) break;
 80086c4:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80086c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d145      	bne.n	800875a <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086dc:	3310      	adds	r3, #16
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f7fe fcd6 	bl	8007094 <move_window>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80086ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d131      	bne.n	800875a <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fc:	3314      	adds	r3, #20
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2220      	movs	r2, #32
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fa48 	bl	8006b9a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008710:	3314      	adds	r3, #20
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800871a:	3318      	adds	r3, #24
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	220b      	movs	r2, #11
 8008720:	4619      	mov	r1, r3
 8008722:	f7fe fa1b 	bl	8006b5c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800872c:	3318      	adds	r3, #24
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330b      	adds	r3, #11
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800873a:	3314      	adds	r3, #20
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	f002 0218 	and.w	r2, r2, #24
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008754:	3304      	adds	r3, #4
 8008756:	2201      	movs	r2, #1
 8008758:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800875a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800875e:	4618      	mov	r0, r3
 8008760:	3730      	adds	r7, #48	; 0x30
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	4ec4ec4f 	.word	0x4ec4ec4f

0800876c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	; 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	e002      	b.n	8008784 <create_name+0x18>
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	3301      	adds	r3, #1
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b2f      	cmp	r3, #47	; 0x2f
 800878a:	d0f8      	beq.n	800877e <create_name+0x12>
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b5c      	cmp	r3, #92	; 0x5c
 8008792:	d0f4      	beq.n	800877e <create_name+0x12>
	lfn = dp->lfn;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	61ba      	str	r2, [r7, #24]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80087b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087b6:	2b1f      	cmp	r3, #31
 80087b8:	d92f      	bls.n	800881a <create_name+0xae>
 80087ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087bc:	2b2f      	cmp	r3, #47	; 0x2f
 80087be:	d02c      	beq.n	800881a <create_name+0xae>
 80087c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087c2:	2b5c      	cmp	r3, #92	; 0x5c
 80087c4:	d029      	beq.n	800881a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2bfe      	cmp	r3, #254	; 0xfe
 80087ca:	d901      	bls.n	80087d0 <create_name+0x64>
			return FR_INVALID_NAME;
 80087cc:	2306      	movs	r3, #6
 80087ce:	e18b      	b.n	8008ae8 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80087d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80087d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087d8:	2101      	movs	r1, #1
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 fc8a 	bl	800b0f4 <ff_convert>
 80087e0:	4603      	mov	r3, r0
 80087e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80087e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <create_name+0x82>
 80087ea:	2306      	movs	r3, #6
 80087ec:	e17c      	b.n	8008ae8 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80087ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087f0:	2b7f      	cmp	r3, #127	; 0x7f
 80087f2:	d809      	bhi.n	8008808 <create_name+0x9c>
 80087f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087f6:	4619      	mov	r1, r3
 80087f8:	488f      	ldr	r0, [pc, #572]	; (8008a38 <create_name+0x2cc>)
 80087fa:	f7fe fa10 	bl	8006c1e <chk_chr>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <create_name+0x9c>
			return FR_INVALID_NAME;
 8008804:	2306      	movs	r3, #6
 8008806:	e16f      	b.n	8008ae8 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	617a      	str	r2, [r7, #20]
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008816:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008818:	e7c5      	b.n	80087a6 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	441a      	add	r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008826:	2b1f      	cmp	r3, #31
 8008828:	d801      	bhi.n	800882e <create_name+0xc2>
 800882a:	2304      	movs	r3, #4
 800882c:	e000      	b.n	8008830 <create_name+0xc4>
 800882e:	2300      	movs	r3, #0
 8008830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8008834:	e011      	b.n	800885a <create_name+0xee>
		w = lfn[di - 1];
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800883c:	3b01      	subs	r3, #1
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800884a:	2b20      	cmp	r3, #32
 800884c:	d002      	beq.n	8008854 <create_name+0xe8>
 800884e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008850:	2b2e      	cmp	r3, #46	; 0x2e
 8008852:	d106      	bne.n	8008862 <create_name+0xf6>
		di--;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3b01      	subs	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1ea      	bne.n	8008836 <create_name+0xca>
 8008860:	e000      	b.n	8008864 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8008862:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <create_name+0x102>
 800886a:	2306      	movs	r3, #6
 800886c:	e13c      	b.n	8008ae8 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	2200      	movs	r2, #0
 8008878:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008880:	3318      	adds	r3, #24
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	220b      	movs	r2, #11
 8008886:	2120      	movs	r1, #32
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe f986 	bl	8006b9a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800888e:	2300      	movs	r3, #0
 8008890:	61bb      	str	r3, [r7, #24]
 8008892:	e002      	b.n	800889a <create_name+0x12e>
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	3301      	adds	r3, #1
 8008898:	61bb      	str	r3, [r7, #24]
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	4413      	add	r3, r2
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d0f5      	beq.n	8008894 <create_name+0x128>
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	2b2e      	cmp	r3, #46	; 0x2e
 80088b4:	d0ee      	beq.n	8008894 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d009      	beq.n	80088d0 <create_name+0x164>
 80088bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088c0:	f043 0303 	orr.w	r3, r3, #3
 80088c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80088c8:	e002      	b.n	80088d0 <create_name+0x164>
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d009      	beq.n	80088ea <create_name+0x17e>
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80088dc:	3b01      	subs	r3, #1
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	2b2e      	cmp	r3, #46	; 0x2e
 80088e8:	d1ef      	bne.n	80088ca <create_name+0x15e>

	b = i = 0; ni = 8;
 80088ea:	2300      	movs	r3, #0
 80088ec:	623b      	str	r3, [r7, #32]
 80088ee:	2300      	movs	r3, #0
 80088f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088f4:	2308      	movs	r3, #8
 80088f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	61ba      	str	r2, [r7, #24]
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 8092 	beq.w	8008a34 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008912:	2b20      	cmp	r3, #32
 8008914:	d006      	beq.n	8008924 <create_name+0x1b8>
 8008916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008918:	2b2e      	cmp	r3, #46	; 0x2e
 800891a:	d10a      	bne.n	8008932 <create_name+0x1c6>
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	429a      	cmp	r2, r3
 8008922:	d006      	beq.n	8008932 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8008924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008928:	f043 0303 	orr.w	r3, r3, #3
 800892c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008930:	e07f      	b.n	8008a32 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	429a      	cmp	r2, r3
 8008938:	d203      	bcs.n	8008942 <create_name+0x1d6>
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	429a      	cmp	r2, r3
 8008940:	d123      	bne.n	800898a <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	2b0b      	cmp	r3, #11
 8008946:	d106      	bne.n	8008956 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8008948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800894c:	f043 0303 	orr.w	r3, r3, #3
 8008950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008954:	e077      	b.n	8008a46 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	429a      	cmp	r2, r3
 800895c:	d005      	beq.n	800896a <create_name+0x1fe>
 800895e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008962:	f043 0303 	orr.w	r3, r3, #3
 8008966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	429a      	cmp	r2, r3
 8008970:	d868      	bhi.n	8008a44 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	61bb      	str	r3, [r7, #24]
 8008976:	2308      	movs	r3, #8
 8008978:	623b      	str	r3, [r7, #32]
 800897a:	230b      	movs	r3, #11
 800897c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800897e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008988:	e053      	b.n	8008a32 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800898a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800898c:	2b7f      	cmp	r3, #127	; 0x7f
 800898e:	d914      	bls.n	80089ba <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f002 fbad 	bl	800b0f4 <ff_convert>
 800899a:	4603      	mov	r3, r0
 800899c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800899e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <create_name+0x242>
 80089a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089a6:	3b80      	subs	r3, #128	; 0x80
 80089a8:	4a24      	ldr	r2, [pc, #144]	; (8008a3c <create_name+0x2d0>)
 80089aa:	5cd3      	ldrb	r3, [r2, r3]
 80089ac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80089ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089b2:	f043 0302 	orr.w	r3, r3, #2
 80089b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80089ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <create_name+0x264>
 80089c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089c2:	4619      	mov	r1, r3
 80089c4:	481e      	ldr	r0, [pc, #120]	; (8008a40 <create_name+0x2d4>)
 80089c6:	f7fe f92a 	bl	8006c1e <chk_chr>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d008      	beq.n	80089e2 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80089d0:	235f      	movs	r3, #95	; 0x5f
 80089d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80089d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089d8:	f043 0303 	orr.w	r3, r3, #3
 80089dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089e0:	e01b      	b.n	8008a1a <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80089e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089e4:	2b40      	cmp	r3, #64	; 0x40
 80089e6:	d909      	bls.n	80089fc <create_name+0x290>
 80089e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089ea:	2b5a      	cmp	r3, #90	; 0x5a
 80089ec:	d806      	bhi.n	80089fc <create_name+0x290>
					b |= 2;
 80089ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089f2:	f043 0302 	orr.w	r3, r3, #2
 80089f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80089fa:	e00e      	b.n	8008a1a <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80089fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089fe:	2b60      	cmp	r3, #96	; 0x60
 8008a00:	d90b      	bls.n	8008a1a <create_name+0x2ae>
 8008a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a04:	2b7a      	cmp	r3, #122	; 0x7a
 8008a06:	d808      	bhi.n	8008a1a <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8008a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a0c:	f043 0301 	orr.w	r3, r3, #1
 8008a10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008a14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a16:	3b20      	subs	r3, #32
 8008a18:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a20:	3318      	adds	r3, #24
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	1c59      	adds	r1, r3, #1
 8008a28:	6239      	str	r1, [r7, #32]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a2e:	b2d2      	uxtb	r2, r2
 8008a30:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008a32:	e761      	b.n	80088f8 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8008a34:	bf00      	nop
 8008a36:	e006      	b.n	8008a46 <create_name+0x2da>
 8008a38:	0800be28 	.word	0x0800be28
 8008a3c:	0800bea8 	.word	0x0800bea8
 8008a40:	0800be34 	.word	0x0800be34
			if (si > di) break;			/* No extension */
 8008a44:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4c:	3318      	adds	r3, #24
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2be5      	cmp	r3, #229	; 0xe5
 8008a54:	d106      	bne.n	8008a64 <create_name+0x2f8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5c:	3318      	adds	r3, #24
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2205      	movs	r2, #5
 8008a62:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2b08      	cmp	r3, #8
 8008a68:	d104      	bne.n	8008a74 <create_name+0x308>
 8008a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8008a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a78:	f003 030c 	and.w	r3, r3, #12
 8008a7c:	2b0c      	cmp	r3, #12
 8008a7e:	d005      	beq.n	8008a8c <create_name+0x320>
 8008a80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a84:	f003 0303 	and.w	r3, r3, #3
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d105      	bne.n	8008a98 <create_name+0x32c>
		cf |= NS_LFN;
 8008a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a90:	f043 0302 	orr.w	r3, r3, #2
 8008a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d117      	bne.n	8008ad4 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d105      	bne.n	8008abc <create_name+0x350>
 8008ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ab4:	f043 0310 	orr.w	r3, r3, #16
 8008ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ac0:	f003 030c 	and.w	r3, r3, #12
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d105      	bne.n	8008ad4 <create_name+0x368>
 8008ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008acc:	f043 0308 	orr.w	r3, r3, #8
 8008ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ada:	3318      	adds	r3, #24
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	330b      	adds	r3, #11
 8008ae0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ae4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008ae6:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3728      	adds	r7, #40	; 0x28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b2f      	cmp	r3, #47	; 0x2f
 8008b00:	d003      	beq.n	8008b0a <follow_path+0x1a>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b5c      	cmp	r3, #92	; 0x5c
 8008b08:	d102      	bne.n	8008b10 <follow_path+0x20>
		path++;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b16:	3308      	adds	r3, #8
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b1f      	cmp	r3, #31
 8008b22:	d80c      	bhi.n	8008b3e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8008b24:	2100      	movs	r1, #0
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7fe ffa1 	bl	8007a6e <dir_sdi>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b36:	3314      	adds	r3, #20
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	e04c      	b.n	8008bd8 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b3e:	463b      	mov	r3, r7
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff fe12 	bl	800876c <create_name>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d13d      	bne.n	8008bce <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff fc05 	bl	8008362 <dir_find>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b62:	3318      	adds	r3, #24
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	7adb      	ldrb	r3, [r3, #11]
 8008b68:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d12d      	bne.n	8008bd2 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d128      	bne.n	8008bd2 <follow_path+0xe2>
 8008b80:	2305      	movs	r3, #5
 8008b82:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008b84:	e025      	b.n	8008bd2 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d122      	bne.n	8008bd6 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b96:	3314      	adds	r3, #20
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	330b      	adds	r3, #11
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d102      	bne.n	8008bb0 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8008baa:	2305      	movs	r3, #5
 8008bac:	73fb      	strb	r3, [r7, #15]
 8008bae:	e013      	b.n	8008bd8 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68b9      	ldr	r1, [r7, #8]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff f9e5 	bl	8007f8a <ld_clust>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc8:	3308      	adds	r3, #8
 8008bca:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008bcc:	e7b7      	b.n	8008b3e <follow_path+0x4e>
			if (res != FR_OK) break;
 8008bce:	bf00      	nop
 8008bd0:	e002      	b.n	8008bd8 <follow_path+0xe8>
				break;
 8008bd2:	bf00      	nop
 8008bd4:	e000      	b.n	8008bd8 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008bd6:	bf00      	nop
		}
	}

	return res;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b087      	sub	sp, #28
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008bea:	f04f 33ff 	mov.w	r3, #4294967295
 8008bee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d031      	beq.n	8008c5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	e002      	b.n	8008c06 <get_ldnumber+0x24>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	3301      	adds	r3, #1
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b1f      	cmp	r3, #31
 8008c0c:	d903      	bls.n	8008c16 <get_ldnumber+0x34>
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b3a      	cmp	r3, #58	; 0x3a
 8008c14:	d1f4      	bne.n	8008c00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b3a      	cmp	r3, #58	; 0x3a
 8008c1c:	d11c      	bne.n	8008c58 <get_ldnumber+0x76>
			tp = *path;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	60fa      	str	r2, [r7, #12]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	3b30      	subs	r3, #48	; 0x30
 8008c2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2b09      	cmp	r3, #9
 8008c34:	d80e      	bhi.n	8008c54 <get_ldnumber+0x72>
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d10a      	bne.n	8008c54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d107      	bne.n	8008c54 <get_ldnumber+0x72>
					vol = (int)i;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	617b      	str	r3, [r7, #20]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	e002      	b.n	8008c5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008c58:	2300      	movs	r3, #0
 8008c5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008c5c:	693b      	ldr	r3, [r7, #16]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	2200      	movs	r2, #0
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008c88:	330c      	adds	r3, #12
 8008c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8e:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7fe f9fe 	bl	8007094 <move_window>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <check_fs+0x36>
		return 3;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e04a      	b.n	8008d38 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ca8:	3301      	adds	r3, #1
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	b21a      	sxth	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008cb6:	b21b      	sxth	r3, r3
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	b21b      	sxth	r3, r3
 8008cbc:	4a20      	ldr	r2, [pc, #128]	; (8008d40 <check_fs+0xd4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d001      	beq.n	8008cc6 <check_fs+0x5a>
		return 2;
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e038      	b.n	8008d38 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3336      	adds	r3, #54	; 0x36
 8008cca:	3303      	adds	r3, #3
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	061a      	lsls	r2, r3, #24
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3336      	adds	r3, #54	; 0x36
 8008cd4:	3302      	adds	r3, #2
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	3236      	adds	r2, #54	; 0x36
 8008ce0:	3201      	adds	r2, #1
 8008ce2:	7812      	ldrb	r2, [r2, #0]
 8008ce4:	0212      	lsls	r2, r2, #8
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008cf4:	4a13      	ldr	r2, [pc, #76]	; (8008d44 <check_fs+0xd8>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d101      	bne.n	8008cfe <check_fs+0x92>
		return 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e01c      	b.n	8008d38 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3352      	adds	r3, #82	; 0x52
 8008d02:	3303      	adds	r3, #3
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	061a      	lsls	r2, r3, #24
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3352      	adds	r3, #82	; 0x52
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	041b      	lsls	r3, r3, #16
 8008d12:	4313      	orrs	r3, r2
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	3252      	adds	r2, #82	; 0x52
 8008d18:	3201      	adds	r2, #1
 8008d1a:	7812      	ldrb	r2, [r2, #0]
 8008d1c:	0212      	lsls	r2, r2, #8
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d2c:	4a05      	ldr	r2, [pc, #20]	; (8008d44 <check_fs+0xd8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d101      	bne.n	8008d36 <check_fs+0xca>
		return 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e000      	b.n	8008d38 <check_fs+0xcc>

	return 1;
 8008d36:	2301      	movs	r3, #1
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	ffffaa55 	.word	0xffffaa55
 8008d44:	00544146 	.word	0x00544146

08008d48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b096      	sub	sp, #88	; 0x58
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008d5c:	68b8      	ldr	r0, [r7, #8]
 8008d5e:	f7ff ff40 	bl	8008be2 <get_ldnumber>
 8008d62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da01      	bge.n	8008d6e <find_volume+0x26>
 8008d6a:	230b      	movs	r3, #11
 8008d6c:	e33c      	b.n	80093e8 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008d6e:	4ab3      	ldr	r2, [pc, #716]	; (800903c <find_volume+0x2f4>)
 8008d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <find_volume+0x3a>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	e332      	b.n	80093e8 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d86:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01d      	beq.n	8008dd0 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fd fe3e 	bl	8006a20 <disk_status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008daa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10c      	bne.n	8008dd0 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d007      	beq.n	8008dcc <find_volume+0x84>
 8008dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8008dc8:	230a      	movs	r3, #10
 8008dca:	e30d      	b.n	80093e8 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e30b      	b.n	80093e8 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de4:	3301      	adds	r3, #1
 8008de6:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dee:	3301      	adds	r3, #1
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fd fe2e 	bl	8006a54 <disk_initialize>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e2ec      	b.n	80093e8 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d007      	beq.n	8008e24 <find_volume+0xdc>
 8008e14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8008e20:	230a      	movs	r3, #10
 8008e22:	e2e1      	b.n	80093e8 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	7818      	ldrb	r0, [r3, #0]
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e34:	330a      	adds	r3, #10
 8008e36:	461a      	mov	r2, r3
 8008e38:	2102      	movs	r1, #2
 8008e3a:	f7fd fe71 	bl	8006b20 <disk_ioctl>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10f      	bne.n	8008e64 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e4a:	330a      	adds	r3, #10
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e52:	d307      	bcc.n	8008e64 <find_volume+0x11c>
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e5a:	330a      	adds	r3, #10
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e62:	d901      	bls.n	8008e68 <find_volume+0x120>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e2bf      	b.n	80093e8 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008e6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e70:	f7ff fefc 	bl	8008c6c <check_fs>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d155      	bne.n	8008f2e <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008e82:	2300      	movs	r3, #0
 8008e84:	643b      	str	r3, [r7, #64]	; 0x40
 8008e86:	e029      	b.n	8008edc <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008e92:	4413      	add	r3, r2
 8008e94:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	3304      	adds	r3, #4
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d012      	beq.n	8008ec6 <find_volume+0x17e>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	330b      	adds	r3, #11
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	061a      	lsls	r2, r3, #24
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	330a      	adds	r3, #10
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	041b      	lsls	r3, r3, #16
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb4:	3209      	adds	r2, #9
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	0212      	lsls	r2, r2, #8
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ebe:	3208      	adds	r2, #8
 8008ec0:	7812      	ldrb	r2, [r2, #0]
 8008ec2:	431a      	orrs	r2, r3
 8008ec4:	e000      	b.n	8008ec8 <find_volume+0x180>
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008ed0:	440b      	add	r3, r1
 8008ed2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed8:	3301      	adds	r3, #1
 8008eda:	643b      	str	r3, [r7, #64]	; 0x40
 8008edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d9d2      	bls.n	8008e88 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <find_volume+0x1aa>
 8008eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008efa:	4413      	add	r3, r2
 8008efc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f00:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d005      	beq.n	8008f14 <find_volume+0x1cc>
 8008f08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f0c:	f7ff feae 	bl	8008c6c <check_fs>
 8008f10:	4603      	mov	r3, r0
 8008f12:	e000      	b.n	8008f16 <find_volume+0x1ce>
 8008f14:	2302      	movs	r3, #2
 8008f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008f1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d005      	beq.n	8008f2e <find_volume+0x1e6>
 8008f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f24:	3301      	adds	r3, #1
 8008f26:	643b      	str	r3, [r7, #64]	; 0x40
 8008f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d9e1      	bls.n	8008ef2 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d101      	bne.n	8008f3a <find_volume+0x1f2>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e256      	b.n	80093e8 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008f3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <find_volume+0x1fe>
 8008f42:	230d      	movs	r3, #13
 8008f44:	e250      	b.n	80093e8 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f48:	7b1b      	ldrb	r3, [r3, #12]
 8008f4a:	021b      	lsls	r3, r3, #8
 8008f4c:	b21a      	sxth	r2, r3
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f50:	7adb      	ldrb	r3, [r3, #11]
 8008f52:	b21b      	sxth	r3, r3
 8008f54:	4313      	orrs	r3, r2
 8008f56:	b21a      	sxth	r2, r3
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f5e:	330a      	adds	r3, #10
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b21b      	sxth	r3, r3
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d001      	beq.n	8008f6c <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8008f68:	230d      	movs	r3, #13
 8008f6a:	e23d      	b.n	80093e8 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6e:	7ddb      	ldrb	r3, [r3, #23]
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	b21a      	sxth	r2, r3
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	7d9b      	ldrb	r3, [r3, #22]
 8008f78:	b21b      	sxth	r3, r3
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	b21b      	sxth	r3, r3
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d112      	bne.n	8008fae <find_volume+0x266>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008f8e:	061a      	lsls	r2, r3, #24
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008f96:	041b      	lsls	r3, r3, #16
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f9c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008fa0:	0212      	lsls	r2, r2, #8
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa6:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008faa:	4313      	orrs	r3, r2
 8008fac:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb4:	3318      	adds	r3, #24
 8008fb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb8:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	7c1a      	ldrb	r2, [r3, #16]
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc4:	3303      	adds	r3, #3
 8008fc6:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fce:	3303      	adds	r3, #3
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d008      	beq.n	8008fe8 <find_volume+0x2a0>
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fdc:	3303      	adds	r3, #3
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d001      	beq.n	8008fe8 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8008fe4:	230d      	movs	r3, #13
 8008fe6:	e1ff      	b.n	80093e8 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fee:	3303      	adds	r3, #3
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
 8008ffa:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	7b5a      	ldrb	r2, [r3, #13]
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009006:	3302      	adds	r3, #2
 8009008:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009010:	3302      	adds	r3, #2
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00e      	beq.n	8009036 <find_volume+0x2ee>
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901e:	3302      	adds	r3, #2
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902a:	3302      	adds	r3, #2
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	3b01      	subs	r3, #1
 8009030:	4013      	ands	r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d004      	beq.n	8009040 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8009036:	230d      	movs	r3, #13
 8009038:	e1d6      	b.n	80093e8 <find_volume+0x6a0>
 800903a:	bf00      	nop
 800903c:	200000b8 	.word	0x200000b8

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	7c9b      	ldrb	r3, [r3, #18]
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	b21a      	sxth	r2, r3
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	7c5b      	ldrb	r3, [r3, #17]
 800904c:	b21b      	sxth	r3, r3
 800904e:	4313      	orrs	r3, r2
 8009050:	b21b      	sxth	r3, r3
 8009052:	b29a      	uxth	r2, r3
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905a:	3308      	adds	r3, #8
 800905c:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009064:	3308      	adds	r3, #8
 8009066:	881a      	ldrh	r2, [r3, #0]
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906e:	330a      	adds	r3, #10
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	095b      	lsrs	r3, r3, #5
 8009074:	b29b      	uxth	r3, r3
 8009076:	fbb2 f1f3 	udiv	r1, r2, r3
 800907a:	fb03 f301 	mul.w	r3, r3, r1
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8009086:	230d      	movs	r3, #13
 8009088:	e1ae      	b.n	80093e8 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	7d1b      	ldrb	r3, [r3, #20]
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	b21a      	sxth	r2, r3
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	7cdb      	ldrb	r3, [r3, #19]
 8009096:	b21b      	sxth	r3, r3
 8009098:	4313      	orrs	r3, r2
 800909a:	b21b      	sxth	r3, r3
 800909c:	b29b      	uxth	r3, r3
 800909e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80090a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d112      	bne.n	80090cc <find_volume+0x384>
 80090a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80090ac:	061a      	lsls	r2, r3, #24
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80090b4:	041b      	lsls	r3, r3, #16
 80090b6:	4313      	orrs	r3, r2
 80090b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090ba:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80090be:	0212      	lsls	r2, r2, #8
 80090c0:	4313      	orrs	r3, r2
 80090c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	7bdb      	ldrb	r3, [r3, #15]
 80090d0:	021b      	lsls	r3, r3, #8
 80090d2:	b21a      	sxth	r2, r3
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	7b9b      	ldrb	r3, [r3, #14]
 80090d8:	b21b      	sxth	r3, r3
 80090da:	4313      	orrs	r3, r2
 80090dc:	b21b      	sxth	r3, r3
 80090de:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80090e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <find_volume+0x3a2>
 80090e6:	230d      	movs	r3, #13
 80090e8:	e17e      	b.n	80093e8 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80090ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ee:	441a      	add	r2, r3
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f6:	3308      	adds	r3, #8
 80090f8:	8819      	ldrh	r1, [r3, #0]
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009100:	330a      	adds	r3, #10
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	b29b      	uxth	r3, r3
 8009108:	fbb1 f3f3 	udiv	r3, r1, r3
 800910c:	b29b      	uxth	r3, r3
 800910e:	4413      	add	r3, r2
 8009110:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	429a      	cmp	r2, r3
 8009118:	d201      	bcs.n	800911e <find_volume+0x3d6>
 800911a:	230d      	movs	r3, #13
 800911c:	e164      	b.n	80093e8 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800911e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	1ad2      	subs	r2, r2, r3
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912a:	3302      	adds	r3, #2
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <find_volume+0x3f6>
 800913a:	230d      	movs	r3, #13
 800913c:	e154      	b.n	80093e8 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	f640 72f5 	movw	r2, #4085	; 0xff5
 800914a:	4293      	cmp	r3, r2
 800914c:	d902      	bls.n	8009154 <find_volume+0x40c>
 800914e:	2302      	movs	r3, #2
 8009150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800915a:	4293      	cmp	r3, r2
 800915c:	d902      	bls.n	8009164 <find_volume+0x41c>
 800915e:	2303      	movs	r3, #3
 8009160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	1c9a      	adds	r2, r3, #2
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800916e:	3314      	adds	r3, #20
 8009170:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009178:	331c      	adds	r3, #28
 800917a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800917c:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800917e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009182:	441a      	add	r2, r3
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800918a:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800918c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	441a      	add	r2, r3
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009198:	3308      	adds	r3, #8
 800919a:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800919c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d127      	bne.n	80091f4 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091aa:	3308      	adds	r3, #8
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <find_volume+0x46e>
 80091b2:	230d      	movs	r3, #13
 80091b4:	e118      	b.n	80093e8 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80091bc:	061a      	lsls	r2, r3, #24
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	4313      	orrs	r3, r2
 80091c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ca:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80091ce:	0212      	lsls	r2, r2, #8
 80091d0:	4313      	orrs	r3, r2
 80091d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091d4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80091d8:	431a      	orrs	r2, r3
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80091e0:	3304      	adds	r3, #4
 80091e2:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ea:	3314      	adds	r3, #20
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	647b      	str	r3, [r7, #68]	; 0x44
 80091f2:	e030      	b.n	8009256 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091fa:	3308      	adds	r3, #8
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <find_volume+0x4be>
 8009202:	230d      	movs	r3, #13
 8009204:	e0f0      	b.n	80093e8 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009210:	441a      	add	r2, r3
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009218:	3304      	adds	r3, #4
 800921a:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800921c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009220:	2b02      	cmp	r3, #2
 8009222:	d106      	bne.n	8009232 <find_volume+0x4ea>
 8009224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	3314      	adds	r3, #20
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	e010      	b.n	8009254 <find_volume+0x50c>
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009238:	3314      	adds	r3, #20
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	4613      	mov	r3, r2
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	4413      	add	r3, r2
 8009242:	085a      	lsrs	r2, r3, #1
 8009244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924a:	3314      	adds	r3, #20
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8009254:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925c:	3318      	adds	r3, #24
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009266:	330a      	adds	r3, #10
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	4619      	mov	r1, r3
 800926c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800926e:	440b      	add	r3, r1
 8009270:	1e59      	subs	r1, r3, #1
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009278:	330a      	adds	r3, #10
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009280:	429a      	cmp	r2, r3
 8009282:	d201      	bcs.n	8009288 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8009284:	230d      	movs	r3, #13
 8009286:	e0af      	b.n	80093e8 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928e:	3310      	adds	r3, #16
 8009290:	f04f 32ff 	mov.w	r2, #4294967295
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929c:	3310      	adds	r3, #16
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a6:	330c      	adds	r3, #12
 80092a8:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b0:	3305      	adds	r3, #5
 80092b2:	2280      	movs	r2, #128	; 0x80
 80092b4:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80092b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d17d      	bne.n	80093ba <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	b21a      	sxth	r2, r3
 80092c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092ce:	b21b      	sxth	r3, r3
 80092d0:	4313      	orrs	r3, r2
 80092d2:	b21b      	sxth	r3, r3
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d170      	bne.n	80093ba <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 80092d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092da:	3301      	adds	r3, #1
 80092dc:	4619      	mov	r1, r3
 80092de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092e0:	f7fd fed8 	bl	8007094 <move_window>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d167      	bne.n	80093ba <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f0:	3305      	adds	r3, #5
 80092f2:	2200      	movs	r2, #0
 80092f4:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	b21a      	sxth	r2, r3
 8009300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009302:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009306:	b21b      	sxth	r3, r3
 8009308:	4313      	orrs	r3, r2
 800930a:	b21b      	sxth	r3, r3
 800930c:	4a38      	ldr	r2, [pc, #224]	; (80093f0 <find_volume+0x6a8>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d153      	bne.n	80093ba <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	78db      	ldrb	r3, [r3, #3]
 8009316:	061a      	lsls	r2, r3, #24
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	789b      	ldrb	r3, [r3, #2]
 800931c:	041b      	lsls	r3, r3, #16
 800931e:	4313      	orrs	r3, r2
 8009320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009322:	7852      	ldrb	r2, [r2, #1]
 8009324:	0212      	lsls	r2, r2, #8
 8009326:	4313      	orrs	r3, r2
 8009328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800932a:	7812      	ldrb	r2, [r2, #0]
 800932c:	4313      	orrs	r3, r2
 800932e:	4a31      	ldr	r2, [pc, #196]	; (80093f4 <find_volume+0x6ac>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d142      	bne.n	80093ba <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8009334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009336:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800933a:	061a      	lsls	r2, r3, #24
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8009342:	041b      	lsls	r3, r3, #16
 8009344:	4313      	orrs	r3, r2
 8009346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009348:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800934c:	0212      	lsls	r2, r2, #8
 800934e:	4313      	orrs	r3, r2
 8009350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009352:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8009356:	4313      	orrs	r3, r2
 8009358:	4a27      	ldr	r2, [pc, #156]	; (80093f8 <find_volume+0x6b0>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d12d      	bne.n	80093ba <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8009364:	061a      	lsls	r2, r3, #24
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800936c:	041b      	lsls	r3, r3, #16
 800936e:	4313      	orrs	r3, r2
 8009370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009372:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8009376:	0212      	lsls	r2, r2, #8
 8009378:	4313      	orrs	r3, r2
 800937a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800937c:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8009380:	431a      	orrs	r2, r3
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009388:	3310      	adds	r3, #16
 800938a:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8009392:	061a      	lsls	r2, r3, #24
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800939a:	041b      	lsls	r3, r3, #16
 800939c:	4313      	orrs	r3, r2
 800939e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a0:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80093a4:	0212      	lsls	r2, r2, #8
 80093a6:	4313      	orrs	r3, r2
 80093a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093aa:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80093ae:	431a      	orrs	r2, r3
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b6:	330c      	adds	r3, #12
 80093b8:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80093ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80093c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80093c6:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <find_volume+0x6b4>)
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	3301      	adds	r3, #1
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <find_volume+0x6b4>)
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <find_volume+0x6b4>)
 80093d4:	881a      	ldrh	r2, [r3, #0]
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093dc:	3306      	adds	r3, #6
 80093de:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80093e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093e2:	f7fd fdd3 	bl	8006f8c <clear_lock>
#endif

	return FR_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3758      	adds	r7, #88	; 0x58
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	ffffaa55 	.word	0xffffaa55
 80093f4:	41615252 	.word	0x41615252
 80093f8:	61417272 	.word	0x61417272
 80093fc:	200000bc 	.word	0x200000bc

08009400 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d02d      	beq.n	800946e <validate+0x6e>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d027      	beq.n	800946e <validate+0x6e>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01e      	beq.n	800946e <validate+0x6e>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943c:	3306      	adds	r3, #6
 800943e:	881a      	ldrh	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009446:	3304      	adds	r3, #4
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d10f      	bne.n	800946e <validate+0x6e>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945a:	3301      	adds	r3, #1
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	4618      	mov	r0, r3
 8009460:	f7fd fade 	bl	8006a20 <disk_status>
 8009464:	4603      	mov	r3, r0
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <validate+0x72>
		return FR_INVALID_OBJECT;
 800946e:	2309      	movs	r3, #9
 8009470:	e000      	b.n	8009474 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800948e:	f107 0310 	add.w	r3, r7, #16
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fba5 	bl	8008be2 <get_ldnumber>
 8009498:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	2b00      	cmp	r3, #0
 800949e:	da01      	bge.n	80094a4 <f_mount+0x28>
 80094a0:	230b      	movs	r3, #11
 80094a2:	e02f      	b.n	8009504 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80094a4:	4a19      	ldr	r2, [pc, #100]	; (800950c <f_mount+0x90>)
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80094b4:	69b8      	ldr	r0, [r7, #24]
 80094b6:	f7fd fd69 	bl	8006f8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c0:	2200      	movs	r2, #0
 80094c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d0:	2200      	movs	r2, #0
 80094d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	490d      	ldr	r1, [pc, #52]	; (800950c <f_mount+0x90>)
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <f_mount+0x6e>
 80094e4:	79fb      	ldrb	r3, [r7, #7]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d001      	beq.n	80094ee <f_mount+0x72>
 80094ea:	2300      	movs	r3, #0
 80094ec:	e00a      	b.n	8009504 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80094ee:	f107 0108 	add.w	r1, r7, #8
 80094f2:	f107 030c 	add.w	r3, r7, #12
 80094f6:	2200      	movs	r2, #0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7ff fc25 	bl	8008d48 <find_volume>
 80094fe:	4603      	mov	r3, r0
 8009500:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009502:	7dfb      	ldrb	r3, [r7, #23]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3720      	adds	r7, #32
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	200000b8 	.word	0x200000b8

08009510 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	f107 0318 	add.w	r3, r7, #24
 800951e:	3b0c      	subs	r3, #12
 8009520:	6018      	str	r0, [r3, #0]
 8009522:	f107 0318 	add.w	r3, r7, #24
 8009526:	3b10      	subs	r3, #16
 8009528:	6019      	str	r1, [r3, #0]
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	3b11      	subs	r3, #17
 8009530:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009532:	f107 0318 	add.w	r3, r7, #24
 8009536:	3b0c      	subs	r3, #12
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <f_open+0x32>
 800953e:	2309      	movs	r3, #9
 8009540:	e319      	b.n	8009b76 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8009542:	f107 0318 	add.w	r3, r7, #24
 8009546:	3b0c      	subs	r3, #12
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009552:	f107 0318 	add.w	r3, r7, #24
 8009556:	3b11      	subs	r3, #17
 8009558:	f107 0218 	add.w	r2, r7, #24
 800955c:	3a11      	subs	r2, #17
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	f002 021f 	and.w	r2, r2, #31
 8009564:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8009566:	f107 0318 	add.w	r3, r7, #24
 800956a:	3b11      	subs	r3, #17
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	f023 0301 	bic.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	f107 0118 	add.w	r1, r7, #24
 8009578:	3910      	subs	r1, #16
 800957a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800957e:	3b18      	subs	r3, #24
 8009580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff fbdf 	bl	8008d48 <find_volume>
 800958a:	4603      	mov	r3, r0
 800958c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009590:	f102 0217 	add.w	r2, r2, #23
 8009594:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009596:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800959a:	f103 0317 	add.w	r3, r3, #23
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 82e3 	bne.w	8009b6c <f_open+0x65c>
		INIT_BUF(dj);
 80095a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80095aa:	3b18      	subs	r3, #24
 80095ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b0:	3318      	adds	r3, #24
 80095b2:	f107 0218 	add.w	r2, r7, #24
 80095b6:	3a04      	subs	r2, #4
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80095be:	3b18      	subs	r3, #24
 80095c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80095c4:	4ad1      	ldr	r2, [pc, #836]	; (800990c <f_open+0x3fc>)
 80095c6:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 80095c8:	f107 0318 	add.w	r3, r7, #24
 80095cc:	3b10      	subs	r3, #16
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80095d4:	3b18      	subs	r3, #24
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff fa89 	bl	8008af0 <follow_path>
 80095de:	4603      	mov	r3, r0
 80095e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80095e4:	f102 0217 	add.w	r2, r2, #23
 80095e8:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80095ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80095ee:	3b18      	subs	r3, #24
 80095f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f4:	3314      	adds	r3, #20
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80095fc:	f102 0210 	add.w	r2, r2, #16
 8009600:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009602:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009606:	f103 0317 	add.w	r3, r3, #23
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d126      	bne.n	800965e <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8009610:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009614:	f103 0310 	add.w	r3, r3, #16
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <f_open+0x11c>
				res = FR_INVALID_NAME;
 800961e:	2306      	movs	r3, #6
 8009620:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009624:	f102 0217 	add.w	r2, r2, #23
 8009628:	7013      	strb	r3, [r2, #0]
 800962a:	e018      	b.n	800965e <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800962c:	f107 0318 	add.w	r3, r7, #24
 8009630:	3b11      	subs	r3, #17
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	f023 0301 	bic.w	r3, r3, #1
 8009638:	2b00      	cmp	r3, #0
 800963a:	bf14      	ite	ne
 800963c:	2301      	movne	r3, #1
 800963e:	2300      	moveq	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009648:	3b18      	subs	r3, #24
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f7fd fb01 	bl	8006c54 <chk_lock>
 8009652:	4603      	mov	r3, r0
 8009654:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009658:	f102 0217 	add.w	r2, r2, #23
 800965c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800965e:	f107 0318 	add.w	r3, r7, #24
 8009662:	3b11      	subs	r3, #17
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 031c 	and.w	r3, r3, #28
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 8150 	beq.w	8009910 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8009670:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009674:	f103 0317 	add.w	r3, r3, #23
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d030      	beq.n	80096e0 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800967e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009682:	f103 0317 	add.w	r3, r3, #23
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2b04      	cmp	r3, #4
 800968a:	d112      	bne.n	80096b2 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800968c:	f7fd fb54 	bl	8006d38 <enq_lock>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d007      	beq.n	80096a6 <f_open+0x196>
 8009696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800969a:	3b18      	subs	r3, #24
 800969c:	4618      	mov	r0, r3
 800969e:	f7fe ff35 	bl	800850c <dir_register>
 80096a2:	4603      	mov	r3, r0
 80096a4:	e000      	b.n	80096a8 <f_open+0x198>
 80096a6:	2312      	movs	r3, #18
 80096a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80096ac:	f102 0217 	add.w	r2, r2, #23
 80096b0:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096b2:	f107 0318 	add.w	r3, r7, #24
 80096b6:	3b11      	subs	r3, #17
 80096b8:	f107 0218 	add.w	r2, r7, #24
 80096bc:	3a11      	subs	r2, #17
 80096be:	7812      	ldrb	r2, [r2, #0]
 80096c0:	f042 0208 	orr.w	r2, r2, #8
 80096c4:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80096c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80096ca:	3b18      	subs	r3, #24
 80096cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d0:	3314      	adds	r3, #20
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80096d8:	f102 0210 	add.w	r2, r2, #16
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	e01f      	b.n	8009720 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80096e4:	f103 0310 	add.w	r3, r3, #16
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	330b      	adds	r3, #11
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	f003 0311 	and.w	r3, r3, #17
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d006      	beq.n	8009704 <f_open+0x1f4>
					res = FR_DENIED;
 80096f6:	2307      	movs	r3, #7
 80096f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80096fc:	f102 0217 	add.w	r2, r2, #23
 8009700:	7013      	strb	r3, [r2, #0]
 8009702:	e00d      	b.n	8009720 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8009704:	f107 0318 	add.w	r3, r7, #24
 8009708:	3b11      	subs	r3, #17
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d005      	beq.n	8009720 <f_open+0x210>
						res = FR_EXIST;
 8009714:	2308      	movs	r3, #8
 8009716:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800971a:	f102 0217 	add.w	r2, r2, #23
 800971e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009720:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009724:	f103 0317 	add.w	r3, r3, #23
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f040 8122 	bne.w	8009974 <f_open+0x464>
 8009730:	f107 0318 	add.w	r3, r7, #24
 8009734:	3b11      	subs	r3, #17
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8119 	beq.w	8009974 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8009742:	f7fd f90b 	bl	800695c <get_fattime>
 8009746:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800974a:	f103 030c 	add.w	r3, r3, #12
 800974e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009750:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009754:	f103 0310 	add.w	r3, r3, #16
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	330e      	adds	r3, #14
 800975c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009760:	f102 020c 	add.w	r2, r2, #12
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800976e:	f103 030c 	add.w	r3, r3, #12
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	b29b      	uxth	r3, r3
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	b29a      	uxth	r2, r3
 800977a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800977e:	f103 0310 	add.w	r3, r3, #16
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	330f      	adds	r3, #15
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]
 800978a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800978e:	f103 030c 	add.w	r3, r3, #12
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	0c1a      	lsrs	r2, r3, #16
 8009796:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800979a:	f103 0310 	add.w	r3, r3, #16
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3310      	adds	r3, #16
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	701a      	strb	r2, [r3, #0]
 80097a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097aa:	f103 030c 	add.w	r3, r3, #12
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	0e1a      	lsrs	r2, r3, #24
 80097b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097b6:	f103 0310 	add.w	r3, r3, #16
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3311      	adds	r3, #17
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80097c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097c6:	f103 0310 	add.w	r3, r3, #16
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	330b      	adds	r3, #11
 80097ce:	2200      	movs	r2, #0
 80097d0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80097d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097d6:	f103 0310 	add.w	r3, r3, #16
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	331c      	adds	r3, #28
 80097de:	2200      	movs	r2, #0
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097e6:	f103 0310 	add.w	r3, r3, #16
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	331d      	adds	r3, #29
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
 80097f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097f6:	f103 0310 	add.w	r3, r3, #16
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	331e      	adds	r3, #30
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
 8009802:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009806:	f103 0310 	add.w	r3, r3, #16
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	331f      	adds	r3, #31
 800980e:	2200      	movs	r2, #0
 8009810:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009812:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009816:	3b18      	subs	r3, #24
 8009818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009822:	f102 0210 	add.w	r2, r2, #16
 8009826:	6811      	ldr	r1, [r2, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fbae 	bl	8007f8a <ld_clust>
 800982e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009832:	f103 0308 	add.w	r3, r3, #8
 8009836:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8009838:	2100      	movs	r1, #0
 800983a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800983e:	f103 0310 	add.w	r3, r3, #16
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	f7fe fbd0 	bl	8007fe8 <st_clust>
				dj.fs->wflag = 1;
 8009848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800984c:	3b18      	subs	r3, #24
 800984e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009858:	3304      	adds	r3, #4
 800985a:	2201      	movs	r2, #1
 800985c:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800985e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009862:	f103 0308 	add.w	r3, r3, #8
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 8083 	beq.w	8009974 <f_open+0x464>
					dw = dj.fs->winsect;
 800986e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009872:	3b18      	subs	r3, #24
 8009874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800987e:	330c      	adds	r3, #12
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009886:	f102 020c 	add.w	r2, r2, #12
 800988a:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800988c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009890:	3b18      	subs	r3, #24
 8009892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800989c:	f102 0208 	add.w	r2, r2, #8
 80098a0:	6811      	ldr	r1, [r2, #0]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fd ff86 	bl	80077b4 <remove_chain>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80098ae:	f102 0217 	add.w	r2, r2, #23
 80098b2:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80098b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80098b8:	f103 0317 	add.w	r3, r3, #23
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d158      	bne.n	8009974 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80098c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80098c6:	3b18      	subs	r3, #24
 80098c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80098d2:	f102 0208 	add.w	r2, r2, #8
 80098d6:	6812      	ldr	r2, [r2, #0]
 80098d8:	3a01      	subs	r2, #1
 80098da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098de:	330c      	adds	r3, #12
 80098e0:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80098e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80098e6:	3b18      	subs	r3, #24
 80098e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80098f2:	f102 020c 	add.w	r2, r2, #12
 80098f6:	6811      	ldr	r1, [r2, #0]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fd fbcb 	bl	8007094 <move_window>
 80098fe:	4603      	mov	r3, r0
 8009900:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009904:	f102 0217 	add.w	r2, r2, #23
 8009908:	7013      	strb	r3, [r2, #0]
 800990a:	e033      	b.n	8009974 <f_open+0x464>
 800990c:	200000d8 	.word	0x200000d8
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8009910:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009914:	f103 0317 	add.w	r3, r3, #23
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d12a      	bne.n	8009974 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800991e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009922:	f103 0310 	add.w	r3, r3, #16
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	330b      	adds	r3, #11
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <f_open+0x432>
					res = FR_NO_FILE;
 8009934:	2304      	movs	r3, #4
 8009936:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800993a:	f102 0217 	add.w	r2, r2, #23
 800993e:	7013      	strb	r3, [r2, #0]
 8009940:	e018      	b.n	8009974 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009942:	f107 0318 	add.w	r3, r7, #24
 8009946:	3b11      	subs	r3, #17
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d010      	beq.n	8009974 <f_open+0x464>
 8009952:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009956:	f103 0310 	add.w	r3, r3, #16
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	330b      	adds	r3, #11
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <f_open+0x464>
						res = FR_DENIED;
 8009968:	2307      	movs	r3, #7
 800996a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800996e:	f102 0217 	add.w	r2, r2, #23
 8009972:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8009974:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009978:	f103 0317 	add.w	r3, r3, #23
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d15b      	bne.n	8009a3a <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009982:	f107 0318 	add.w	r3, r7, #24
 8009986:	3b11      	subs	r3, #17
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	f003 0308 	and.w	r3, r3, #8
 800998e:	2b00      	cmp	r3, #0
 8009990:	d009      	beq.n	80099a6 <f_open+0x496>
				mode |= FA__WRITTEN;
 8009992:	f107 0318 	add.w	r3, r7, #24
 8009996:	3b11      	subs	r3, #17
 8009998:	f107 0218 	add.w	r2, r7, #24
 800999c:	3a11      	subs	r2, #17
 800999e:	7812      	ldrb	r2, [r2, #0]
 80099a0:	f042 0220 	orr.w	r2, r2, #32
 80099a4:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80099a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099aa:	3b18      	subs	r3, #24
 80099ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80099b6:	330c      	adds	r3, #12
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	f107 0318 	add.w	r3, r7, #24
 80099be:	3b0c      	subs	r3, #12
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c6:	331c      	adds	r3, #28
 80099c8:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 80099ca:	f107 0318 	add.w	r3, r7, #24
 80099ce:	3b0c      	subs	r3, #12
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80099d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80099da:	f102 0210 	add.w	r2, r2, #16
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099e2:	f107 0318 	add.w	r3, r7, #24
 80099e6:	3b11      	subs	r3, #17
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f023 0301 	bic.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bf14      	ite	ne
 80099f2:	2301      	movne	r3, #1
 80099f4:	2300      	moveq	r3, #0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	461a      	mov	r2, r3
 80099fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099fe:	3b18      	subs	r3, #24
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fd f9bc 	bl	8006d80 <inc_lock>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	f107 0318 	add.w	r3, r7, #24
 8009a0e:	3b0c      	subs	r3, #12
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009a16:	3308      	adds	r3, #8
 8009a18:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8009a1a:	f107 0318 	add.w	r3, r7, #24
 8009a1e:	3b0c      	subs	r3, #12
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009a26:	3308      	adds	r3, #8
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d105      	bne.n	8009a3a <f_open+0x52a>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009a34:	f102 0217 	add.w	r2, r2, #23
 8009a38:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009a3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a3e:	f103 0317 	add.w	r3, r3, #23
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f040 8091 	bne.w	8009b6c <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8009a4a:	f107 0318 	add.w	r3, r7, #24
 8009a4e:	3b0c      	subs	r3, #12
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a56:	3306      	adds	r3, #6
 8009a58:	f107 0218 	add.w	r2, r7, #24
 8009a5c:	3a11      	subs	r2, #17
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8009a62:	f107 0318 	add.w	r3, r7, #24
 8009a66:	3b0c      	subs	r3, #12
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6e:	3307      	adds	r3, #7
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009a74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a78:	3b18      	subs	r3, #24
 8009a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009a84:	f102 0210 	add.w	r2, r2, #16
 8009a88:	6811      	ldr	r1, [r2, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fa7d 	bl	8007f8a <ld_clust>
 8009a90:	4602      	mov	r2, r0
 8009a92:	f107 0318 	add.w	r3, r7, #24
 8009a96:	3b0c      	subs	r3, #12
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a9e:	3310      	adds	r3, #16
 8009aa0:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009aa2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009aa6:	f103 0310 	add.w	r3, r3, #16
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	331f      	adds	r3, #31
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	061a      	lsls	r2, r3, #24
 8009ab2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009ab6:	f103 0310 	add.w	r3, r3, #16
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	331e      	adds	r3, #30
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	041b      	lsls	r3, r3, #16
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009ac8:	f102 0210 	add.w	r2, r2, #16
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	321d      	adds	r2, #29
 8009ad0:	7812      	ldrb	r2, [r2, #0]
 8009ad2:	0212      	lsls	r2, r2, #8
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009ada:	f102 0210 	add.w	r2, r2, #16
 8009ade:	6812      	ldr	r2, [r2, #0]
 8009ae0:	321c      	adds	r2, #28
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	f107 0318 	add.w	r3, r7, #24
 8009aea:	3b0c      	subs	r3, #12
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af2:	330c      	adds	r3, #12
 8009af4:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8009af6:	f107 0318 	add.w	r3, r7, #24
 8009afa:	3b0c      	subs	r3, #12
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b02:	3308      	adds	r3, #8
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8009b08:	f107 0318 	add.w	r3, r7, #24
 8009b0c:	3b0c      	subs	r3, #12
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b14:	3318      	adds	r3, #24
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009b1a:	f107 0318 	add.w	r3, r7, #24
 8009b1e:	3b0c      	subs	r3, #12
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009b26:	3304      	adds	r3, #4
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009b2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b30:	3b18      	subs	r3, #24
 8009b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	f107 0318 	add.w	r3, r7, #24
 8009b3c:	3b0c      	subs	r3, #12
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b44:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8009b46:	f107 0318 	add.w	r3, r7, #24
 8009b4a:	3b0c      	subs	r3, #12
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b58:	3306      	adds	r3, #6
 8009b5a:	881a      	ldrh	r2, [r3, #0]
 8009b5c:	f107 0318 	add.w	r3, r7, #24
 8009b60:	3b0c      	subs	r3, #12
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b68:	3304      	adds	r3, #4
 8009b6a:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8009b6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009b70:	f103 0317 	add.w	r3, r3, #23
 8009b74:	781b      	ldrb	r3, [r3, #0]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop

08009b84 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08c      	sub	sp, #48	; 0x30
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff fc2f 	bl	8009400 <validate>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009ba6:	7ffb      	ldrb	r3, [r7, #31]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <f_read+0x2c>
 8009bac:	7ffb      	ldrb	r3, [r7, #31]
 8009bae:	e1fb      	b.n	8009fa8 <f_read+0x424>
	if (fp->err)								/* Check error */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb6:	3307      	adds	r3, #7
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d005      	beq.n	8009bca <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc4:	3307      	adds	r3, #7
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	e1ee      	b.n	8009fa8 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd0:	3306      	adds	r3, #6
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009bdc:	2307      	movs	r3, #7
 8009bde:	e1e3      	b.n	8009fa8 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009be6:	330c      	adds	r3, #12
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	f240 81ce 	bls.w	8009f9e <f_read+0x41a>
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009c06:	e1ca      	b.n	8009f9e <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c0e:	3308      	adds	r3, #8
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1e:	330a      	adds	r3, #10
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c26:	fb03 f301 	mul.w	r3, r3, r1
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f040 8160 	bne.w	8009ef2 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c38:	3308      	adds	r3, #8
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c48:	330a      	adds	r3, #10
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5e:	3302      	adds	r3, #2
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	4013      	ands	r3, r2
 8009c68:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d14a      	bne.n	8009d06 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c76:	3308      	adds	r3, #8
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c84:	3310      	adds	r3, #16
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c8a:	e01f      	b.n	8009ccc <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009c92:	3304      	adds	r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f7fd fe9d 	bl	80079e6 <clmt_clust>
 8009cac:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009cae:	e00d      	b.n	8009ccc <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cbe:	3314      	adds	r3, #20
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	f7fd fb10 	bl	80072ea <get_fat>
 8009cca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d807      	bhi.n	8009ce2 <f_read+0x15e>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd8:	3307      	adds	r3, #7
 8009cda:	2202      	movs	r2, #2
 8009cdc:	701a      	strb	r2, [r3, #0]
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e162      	b.n	8009fa8 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce8:	d107      	bne.n	8009cfa <f_read+0x176>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf0:	3307      	adds	r3, #7
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	701a      	strb	r2, [r3, #0]
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e156      	b.n	8009fa8 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d00:	3314      	adds	r3, #20
 8009d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d04:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d14:	3314      	adds	r3, #20
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f7fd fabd 	bl	800729a <clust2sect>
 8009d20:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d107      	bne.n	8009d38 <f_read+0x1b4>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2e:	3307      	adds	r3, #7
 8009d30:	2202      	movs	r2, #2
 8009d32:	701a      	strb	r2, [r3, #0]
 8009d34:	2302      	movs	r3, #2
 8009d36:	e137      	b.n	8009fa8 <f_read+0x424>
			sect += csect;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4c:	330a      	adds	r3, #10
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	461a      	mov	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d070      	beq.n	8009e42 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009d60:	7dfa      	ldrb	r2, [r7, #23]
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	441a      	add	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d72:	3302      	adds	r3, #2
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d90b      	bls.n	8009d92 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d86:	3302      	adds	r3, #2
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9e:	3301      	adds	r3, #1
 8009da0:	7818      	ldrb	r0, [r3, #0]
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	6a39      	ldr	r1, [r7, #32]
 8009da8:	f7fc fe7a 	bl	8006aa0 <disk_read>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d007      	beq.n	8009dc2 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db8:	3307      	adds	r3, #7
 8009dba:	2201      	movs	r2, #1
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e0f2      	b.n	8009fa8 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc8:	3306      	adds	r3, #6
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d028      	beq.n	8009e26 <f_read+0x2a2>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dda:	3318      	adds	r3, #24
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d91e      	bls.n	8009e26 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dee:	3318      	adds	r3, #24
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	1ad2      	subs	r2, r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e02:	330a      	adds	r3, #10
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	fb03 f302 	mul.w	r3, r3, r2
 8009e0a:	6a3a      	ldr	r2, [r7, #32]
 8009e0c:	18d0      	adds	r0, r2, r3
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e1c:	330a      	adds	r3, #10
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	f7fc fe9b 	bl	8006b5c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e32:	330a      	adds	r3, #10
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	fb02 f303 	mul.w	r3, r2, r3
 8009e3e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8009e40:	e093      	b.n	8009f6a <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e48:	3318      	adds	r3, #24
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d049      	beq.n	8009ee6 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e58:	3306      	adds	r3, #6
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d028      	beq.n	8009eb6 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e70:	3301      	adds	r3, #1
 8009e72:	7818      	ldrb	r0, [r3, #0]
 8009e74:	68f9      	ldr	r1, [r7, #12]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7c:	3318      	adds	r3, #24
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	2301      	movs	r3, #1
 8009e82:	f7fc fe2d 	bl	8006ae0 <disk_write>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d007      	beq.n	8009e9c <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e92:	3307      	adds	r3, #7
 8009e94:	2201      	movs	r2, #1
 8009e96:	701a      	strb	r2, [r3, #0]
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e085      	b.n	8009fa8 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea2:	3306      	adds	r3, #6
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb2:	3306      	adds	r3, #6
 8009eb4:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	7818      	ldrb	r0, [r3, #0]
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	2301      	movs	r3, #1
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	f7fc fde8 	bl	8006aa0 <disk_read>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009edc:	3307      	adds	r3, #7
 8009ede:	2201      	movs	r2, #1
 8009ee0:	701a      	strb	r2, [r3, #0]
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e060      	b.n	8009fa8 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eec:	3318      	adds	r3, #24
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efe:	330a      	adds	r3, #10
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1a:	330a      	adds	r3, #10
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f22:	fb03 f301 	mul.w	r3, r3, r1
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	1ac3      	subs	r3, r0, r3
 8009f2a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8009f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d901      	bls.n	8009f38 <f_read+0x3b4>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f3e:	3308      	adds	r3, #8
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f4e:	330a      	adds	r3, #10
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f56:	fb03 f301 	mul.w	r3, r3, r1
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f62:	4619      	mov	r1, r3
 8009f64:	6a38      	ldr	r0, [r7, #32]
 8009f66:	f7fc fdf9 	bl	8006b5c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009f6a:	6a3a      	ldr	r2, [r7, #32]
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	4413      	add	r3, r2
 8009f70:	623b      	str	r3, [r7, #32]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f78:	3308      	adds	r3, #8
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	441a      	add	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f86:	3308      	adds	r3, #8
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	441a      	add	r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f47f ae31 	bne.w	8009c08 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3730      	adds	r7, #48	; 0x30
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f7ff fa19 	bl	8009400 <validate>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <f_write+0x2c>
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	e258      	b.n	800a48e <f_write+0x4de>
	if (fp->err)							/* Check error */
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe2:	3307      	adds	r3, #7
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d005      	beq.n	8009ff6 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	e24b      	b.n	800a48e <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffc:	3306      	adds	r3, #6
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f003 0302 	and.w	r3, r3, #2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a008:	2307      	movs	r3, #7
 800a00a:	e240      	b.n	800a48e <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a012:	3308      	adds	r3, #8
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	441a      	add	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a020:	3308      	adds	r3, #8
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	f080 8208 	bcs.w	800a43a <f_write+0x48a>
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800a02e:	e204      	b.n	800a43a <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a036:	3308      	adds	r3, #8
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a046:	330a      	adds	r3, #10
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	fbb2 f1f3 	udiv	r1, r2, r3
 800a04e:	fb03 f301 	mul.w	r3, r3, r1
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	f040 818d 	bne.w	800a374 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a060:	3308      	adds	r3, #8
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a070:	330a      	adds	r3, #10
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	fbb2 f3f3 	udiv	r3, r2, r3
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a086:	3302      	adds	r3, #2
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	4013      	ands	r3, r2
 800a090:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800a092:	7dbb      	ldrb	r3, [r7, #22]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d167      	bne.n	800a168 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09e:	3308      	adds	r3, #8
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d112      	bne.n	800a0cc <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ac:	3310      	adds	r3, #16
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d129      	bne.n	800a10c <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fd fbde 	bl	8007884 <create_chain>
 800a0c8:	6278      	str	r0, [r7, #36]	; 0x24
 800a0ca:	e01f      	b.n	800a10c <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7fd fc7d 	bl	80079e6 <clmt_clust>
 800a0ec:	6278      	str	r0, [r7, #36]	; 0x24
 800a0ee:	e00d      	b.n	800a10c <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fe:	3314      	adds	r3, #20
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f7fd fbbd 	bl	8007884 <create_chain>
 800a10a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 8198 	beq.w	800a444 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	2b01      	cmp	r3, #1
 800a118:	d107      	bne.n	800a12a <f_write+0x17a>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a120:	3307      	adds	r3, #7
 800a122:	2202      	movs	r2, #2
 800a124:	701a      	strb	r2, [r3, #0]
 800a126:	2302      	movs	r3, #2
 800a128:	e1b1      	b.n	800a48e <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a130:	d107      	bne.n	800a142 <f_write+0x192>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a138:	3307      	adds	r3, #7
 800a13a:	2201      	movs	r2, #1
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	2301      	movs	r3, #1
 800a140:	e1a5      	b.n	800a48e <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a148:	3314      	adds	r3, #20
 800a14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14c:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a154:	3310      	adds	r3, #16
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d105      	bne.n	800a168 <f_write+0x1b8>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a162:	3310      	adds	r3, #16
 800a164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a166:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16e:	3306      	adds	r3, #6
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d028      	beq.n	800a1cc <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a186:	3301      	adds	r3, #1
 800a188:	7818      	ldrb	r0, [r3, #0]
 800a18a:	68f9      	ldr	r1, [r7, #12]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a192:	3318      	adds	r3, #24
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	2301      	movs	r3, #1
 800a198:	f7fc fca2 	bl	8006ae0 <disk_write>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d007      	beq.n	800a1b2 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a8:	3307      	adds	r3, #7
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	701a      	strb	r2, [r3, #0]
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e16d      	b.n	800a48e <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b8:	3306      	adds	r3, #6
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c8:	3306      	adds	r3, #6
 800a1ca:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1da:	3314      	adds	r3, #20
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f7fd f85a 	bl	800729a <clust2sect>
 800a1e6:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d107      	bne.n	800a1fe <f_write+0x24e>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f4:	3307      	adds	r3, #7
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e147      	b.n	800a48e <f_write+0x4de>
			sect += csect;
 800a1fe:	7dbb      	ldrb	r3, [r7, #22]
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	4413      	add	r3, r2
 800a204:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a212:	330a      	adds	r3, #10
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a21e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d074      	beq.n	800a310 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a226:	7dba      	ldrb	r2, [r7, #22]
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	441a      	add	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a238:	3302      	adds	r3, #2
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d90b      	bls.n	800a258 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a24c:	3302      	adds	r3, #2
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	7dbb      	ldrb	r3, [r7, #22]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a264:	3301      	adds	r3, #1
 800a266:	7818      	ldrb	r0, [r3, #0]
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	69b9      	ldr	r1, [r7, #24]
 800a26e:	f7fc fc37 	bl	8006ae0 <disk_write>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27e:	3307      	adds	r3, #7
 800a280:	2201      	movs	r2, #1
 800a282:	701a      	strb	r2, [r3, #0]
 800a284:	2301      	movs	r3, #1
 800a286:	e102      	b.n	800a48e <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a28e:	3318      	adds	r3, #24
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d92b      	bls.n	800a2f4 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a4:	3318      	adds	r3, #24
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	1ad2      	subs	r2, r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b8:	330a      	adds	r3, #10
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	fb03 f302 	mul.w	r3, r3, r2
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	18d1      	adds	r1, r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d0:	330a      	adds	r3, #10
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	f7fc fc41 	bl	8006b5c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e0:	3306      	adds	r3, #6
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f0:	3306      	adds	r3, #6
 800a2f2:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a300:	330a      	adds	r3, #10
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	fb02 f303 	mul.w	r3, r2, r3
 800a30c:	623b      	str	r3, [r7, #32]
				continue;
 800a30e:	e07a      	b.n	800a406 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a316:	3318      	adds	r3, #24
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d023      	beq.n	800a368 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a326:	3308      	adds	r3, #8
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a330:	330c      	adds	r3, #12
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d217      	bcs.n	800a368 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a344:	3301      	adds	r3, #1
 800a346:	7818      	ldrb	r0, [r3, #0]
 800a348:	68f9      	ldr	r1, [r7, #12]
 800a34a:	2301      	movs	r3, #1
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	f7fc fba7 	bl	8006aa0 <disk_read>
 800a352:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a35e:	3307      	adds	r3, #7
 800a360:	2201      	movs	r2, #1
 800a362:	701a      	strb	r2, [r3, #0]
 800a364:	2301      	movs	r3, #1
 800a366:	e092      	b.n	800a48e <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36e:	3318      	adds	r3, #24
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a380:	330a      	adds	r3, #10
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a38c:	3308      	adds	r3, #8
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39c:	330a      	adds	r3, #10
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3a4:	fb03 f301 	mul.w	r3, r3, r1
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	1ac3      	subs	r3, r0, r3
 800a3ac:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800a3ae:	6a3a      	ldr	r2, [r7, #32]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d901      	bls.n	800a3ba <f_write+0x40a>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d0:	330a      	adds	r3, #10
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3d8:	fb03 f301 	mul.w	r3, r3, r1
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	6a3a      	ldr	r2, [r7, #32]
 800a3e4:	69b9      	ldr	r1, [r7, #24]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fc fbb8 	bl	8006b5c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f2:	3306      	adds	r3, #6
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a402:	3306      	adds	r3, #6
 800a404:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	4413      	add	r3, r2
 800a40c:	61bb      	str	r3, [r7, #24]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a414:	3308      	adds	r3, #8
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	441a      	add	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a422:	3308      	adds	r3, #8
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	441a      	add	r2, r3
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f47f adf7 	bne.w	800a030 <f_write+0x80>
 800a442:	e000      	b.n	800a446 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a444:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44c:	3308      	adds	r3, #8
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a456:	330c      	adds	r3, #12
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d909      	bls.n	800a472 <f_write+0x4c2>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a464:	3308      	adds	r3, #8
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a46e:	330c      	adds	r3, #12
 800a470:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a478:	3306      	adds	r3, #6
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	f043 0320 	orr.w	r3, r3, #32
 800a480:	b2da      	uxtb	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a488:	3306      	adds	r3, #6
 800a48a:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3728      	adds	r7, #40	; 0x28
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b086      	sub	sp, #24
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7fe ffae 	bl	8009400 <validate>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f040 80cc 	bne.w	800a648 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b6:	3306      	adds	r3, #6
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	f003 0320 	and.w	r3, r3, #32
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 80c2 	beq.w	800a648 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ca:	3306      	adds	r3, #6
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d022      	beq.n	800a51c <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	7818      	ldrb	r0, [r3, #0]
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ee:	3318      	adds	r3, #24
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	f7fc faf4 	bl	8006ae0 <disk_write>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a4fe:	2301      	movs	r3, #1
 800a500:	e0a3      	b.n	800a64a <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a508:	3306      	adds	r3, #6
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a510:	b2da      	uxtb	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a518:	3306      	adds	r3, #6
 800a51a:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52a:	331c      	adds	r3, #28
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f7fc fdaf 	bl	8007094 <move_window>
 800a536:	4603      	mov	r3, r0
 800a538:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f040 8083 	bne.w	800a648 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	330b      	adds	r3, #11
 800a550:	781a      	ldrb	r2, [r3, #0]
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	330b      	adds	r3, #11
 800a556:	f042 0220 	orr.w	r2, r2, #32
 800a55a:	b2d2      	uxtb	r2, r2
 800a55c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a564:	330c      	adds	r3, #12
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	331c      	adds	r3, #28
 800a56c:	b2d2      	uxtb	r2, r2
 800a56e:	701a      	strb	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a576:	330c      	adds	r3, #12
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	0a1b      	lsrs	r3, r3, #8
 800a57e:	b29a      	uxth	r2, r3
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	331d      	adds	r3, #29
 800a584:	b2d2      	uxtb	r2, r2
 800a586:	701a      	strb	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58e:	330c      	adds	r3, #12
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	0c1a      	lsrs	r2, r3, #16
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	331e      	adds	r3, #30
 800a598:	b2d2      	uxtb	r2, r2
 800a59a:	701a      	strb	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a2:	330c      	adds	r3, #12
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	0e1a      	lsrs	r2, r3, #24
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	331f      	adds	r3, #31
 800a5ac:	b2d2      	uxtb	r2, r2
 800a5ae:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b6:	3310      	adds	r3, #16
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6938      	ldr	r0, [r7, #16]
 800a5be:	f7fd fd13 	bl	8007fe8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800a5c2:	f7fc f9cb 	bl	800695c <get_fattime>
 800a5c6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	3316      	adds	r3, #22
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	0a1b      	lsrs	r3, r3, #8
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	3317      	adds	r3, #23
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	0c1a      	lsrs	r2, r3, #16
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	3318      	adds	r3, #24
 800a5ea:	b2d2      	uxtb	r2, r2
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	0e1a      	lsrs	r2, r3, #24
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	3319      	adds	r3, #25
 800a5f6:	b2d2      	uxtb	r2, r2
 800a5f8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	3312      	adds	r3, #18
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	3313      	adds	r3, #19
 800a606:	2200      	movs	r2, #0
 800a608:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a610:	3306      	adds	r3, #6
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	f023 0320 	bic.w	r3, r3, #32
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a620:	3306      	adds	r3, #6
 800a622:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a630:	3304      	adds	r3, #4
 800a632:	2201      	movs	r2, #1
 800a634:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fc fd5c 	bl	80070fc <sync_fs>
 800a644:	4603      	mov	r3, r0
 800a646:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800a648:	7dfb      	ldrb	r3, [r7, #23]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b084      	sub	sp, #16
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff ff1b 	bl	800a496 <f_sync>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d119      	bne.n	800a69e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7fe fec8 	bl	8009400 <validate>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d111      	bne.n	800a69e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a680:	3308      	adds	r3, #8
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4618      	mov	r0, r3
 800a686:	f7fc fc3d 	bl	8006f04 <dec_lock>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a69a:	2200      	movs	r2, #0
 800a69c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b090      	sub	sp, #64	; 0x40
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7fe fea4 	bl	8009400 <validate>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a6be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d002      	beq.n	800a6cc <f_lseek+0x24>
 800a6c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6ca:	e31d      	b.n	800ad08 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d2:	3307      	adds	r3, #7
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d005      	beq.n	800a6e6 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e0:	3307      	adds	r3, #7
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	e310      	b.n	800ad08 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 813c 	beq.w	800a96e <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d172      	bne.n	800a7e4 <f_lseek+0x13c>
			tbl = fp->cltbl;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a704:	3304      	adds	r3, #4
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	1d1a      	adds	r2, r3, #4
 800a70e:	627a      	str	r2, [r7, #36]	; 0x24
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	2302      	movs	r3, #2
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71e:	3310      	adds	r3, #16
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	2b00      	cmp	r3, #0
 800a728:	d049      	beq.n	800a7be <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	613b      	str	r3, [r7, #16]
 800a72e:	2300      	movs	r3, #0
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	3302      	adds	r3, #2
 800a736:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	3301      	adds	r3, #1
 800a740:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fc fdcc 	bl	80072ea <get_fat>
 800a752:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	2b01      	cmp	r3, #1
 800a758:	d807      	bhi.n	800a76a <f_lseek+0xc2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	3307      	adds	r3, #7
 800a762:	2202      	movs	r2, #2
 800a764:	701a      	strb	r2, [r3, #0]
 800a766:	2302      	movs	r3, #2
 800a768:	e2ce      	b.n	800ad08 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a770:	d107      	bne.n	800a782 <f_lseek+0xda>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a778:	3307      	adds	r3, #7
 800a77a:	2201      	movs	r2, #1
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	2301      	movs	r3, #1
 800a780:	e2c2      	b.n	800ad08 <f_lseek+0x660>
					} while (cl == pcl + 1);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a788:	429a      	cmp	r2, r3
 800a78a:	d0d5      	beq.n	800a738 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	429a      	cmp	r2, r3
 800a792:	d809      	bhi.n	800a7a8 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	1d1a      	adds	r2, r3, #4
 800a798:	627a      	str	r2, [r7, #36]	; 0x24
 800a79a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	1d1a      	adds	r2, r3, #4
 800a7a2:	627a      	str	r2, [r7, #36]	; 0x24
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b4:	3314      	adds	r3, #20
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d3b5      	bcc.n	800a72a <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ca:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800a7cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d803      	bhi.n	800a7dc <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	601a      	str	r2, [r3, #0]
 800a7da:	e293      	b.n	800ad04 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a7dc:	2311      	movs	r3, #17
 800a7de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a7e2:	e28f      	b.n	800ad04 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ea:	330c      	adds	r3, #12
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d905      	bls.n	800a800 <f_lseek+0x158>
				ofs = fp->fsize;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7fa:	330c      	adds	r3, #12
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a806:	3308      	adds	r3, #8
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	601a      	str	r2, [r3, #0]
			if (ofs) {
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 8278 	beq.w	800ad04 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	3b01      	subs	r3, #1
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7fd f8e3 	bl	80079e6 <clmt_clust>
 800a820:	4602      	mov	r2, r0
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a828:	3314      	adds	r3, #20
 800a82a:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83a:	3314      	adds	r3, #20
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f7fc fd2a 	bl	800729a <clust2sect>
 800a846:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d107      	bne.n	800a85e <f_lseek+0x1b6>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a854:	3307      	adds	r3, #7
 800a856:	2202      	movs	r2, #2
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	2302      	movs	r3, #2
 800a85c:	e254      	b.n	800ad08 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	1e5a      	subs	r2, r3, #1
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86e:	330a      	adds	r3, #10
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	fbb2 f2f3 	udiv	r2, r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a882:	3302      	adds	r3, #2
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	3b01      	subs	r3, #1
 800a888:	4013      	ands	r3, r2
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	4413      	add	r3, r2
 800a88e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a896:	3308      	adds	r3, #8
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a6:	330a      	adds	r3, #10
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8ae:	fb03 f301 	mul.w	r3, r3, r1
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 8225 	beq.w	800ad04 <f_lseek+0x65c>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8c0:	3318      	adds	r3, #24
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	69ba      	ldr	r2, [r7, #24]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	f000 821c 	beq.w	800ad04 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8d2:	3306      	adds	r3, #6
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d028      	beq.n	800a930 <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	7818      	ldrb	r0, [r3, #0]
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f6:	3318      	adds	r3, #24
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	f7fc f8f0 	bl	8006ae0 <disk_write>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d007      	beq.n	800a916 <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a90c:	3307      	adds	r3, #7
 800a90e:	2201      	movs	r2, #1
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	2301      	movs	r3, #1
 800a914:	e1f8      	b.n	800ad08 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a91c:	3306      	adds	r3, #6
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a924:	b2da      	uxtb	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92c:	3306      	adds	r3, #6
 800a92e:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a93c:	3301      	adds	r3, #1
 800a93e:	7818      	ldrb	r0, [r3, #0]
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	2301      	movs	r3, #1
 800a944:	69ba      	ldr	r2, [r7, #24]
 800a946:	f7fc f8ab 	bl	8006aa0 <disk_read>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a956:	3307      	adds	r3, #7
 800a958:	2201      	movs	r2, #1
 800a95a:	701a      	strb	r2, [r3, #0]
 800a95c:	2301      	movs	r3, #1
 800a95e:	e1d3      	b.n	800ad08 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a966:	3318      	adds	r3, #24
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	e1ca      	b.n	800ad04 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a974:	330c      	adds	r3, #12
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d90e      	bls.n	800a99c <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a984:	3306      	adds	r3, #6
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	f003 0302 	and.w	r3, r3, #2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d105      	bne.n	800a99c <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a996:	330c      	adds	r3, #12
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b6:	601a      	str	r2, [r3, #0]
		if (ofs) {
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 8113 	beq.w	800abe6 <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9cc:	3302      	adds	r3, #2
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9de:	330a      	adds	r3, #10
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	fb03 f302 	mul.w	r3, r3, r2
 800a9e6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d024      	beq.n	800aa38 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	1e5a      	subs	r2, r3, #1
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	1e59      	subs	r1, r3, #1
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d318      	bcc.n	800aa38 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	1e5a      	subs	r2, r3, #1
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	425b      	negs	r3, r3
 800aa0e:	401a      	ands	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa16:	3308      	adds	r3, #8
 800aa18:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa20:	3308      	adds	r3, #8
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa30:	3314      	adds	r3, #20
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa36:	e034      	b.n	800aaa2 <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa3e:	3310      	adds	r3, #16
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d125      	bne.n	800aa96 <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2100      	movs	r1, #0
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fc ff15 	bl	8007884 <create_chain>
 800aa5a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d107      	bne.n	800aa72 <f_lseek+0x3ca>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa68:	3307      	adds	r3, #7
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	701a      	strb	r2, [r3, #0]
 800aa6e:	2302      	movs	r3, #2
 800aa70:	e14a      	b.n	800ad08 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa78:	d107      	bne.n	800aa8a <f_lseek+0x3e2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa80:	3307      	adds	r3, #7
 800aa82:	2201      	movs	r2, #1
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	2301      	movs	r3, #1
 800aa88:	e13e      	b.n	800ad08 <f_lseek+0x660>
					fp->sclust = clst;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa90:	3310      	adds	r3, #16
 800aa92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa94:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa9c:	3314      	adds	r3, #20
 800aa9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaa0:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 809e 	beq.w	800abe6 <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 800aaaa:	e058      	b.n	800ab5e <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aab2:	3306      	adds	r3, #6
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00e      	beq.n	800aadc <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fc fedb 	bl	8007884 <create_chain>
 800aace:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10b      	bne.n	800aaee <f_lseek+0x446>
							ofs = bcs; break;
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	603b      	str	r3, [r7, #0]
 800aada:	e044      	b.n	800ab66 <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fc fbff 	bl	80072ea <get_fat>
 800aaec:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf4:	d107      	bne.n	800ab06 <f_lseek+0x45e>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aafc:	3307      	adds	r3, #7
 800aafe:	2201      	movs	r2, #1
 800ab00:	701a      	strb	r2, [r3, #0]
 800ab02:	2301      	movs	r3, #1
 800ab04:	e100      	b.n	800ad08 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800ab06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d90a      	bls.n	800ab22 <f_lseek+0x47a>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab18:	3314      	adds	r3, #20
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d307      	bcc.n	800ab32 <f_lseek+0x48a>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab28:	3307      	adds	r3, #7
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	2302      	movs	r3, #2
 800ab30:	e0ea      	b.n	800ad08 <f_lseek+0x660>
					fp->clust = clst;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab38:	3314      	adds	r3, #20
 800ab3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab3c:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab44:	3308      	adds	r3, #8
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	441a      	add	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab52:	3308      	adds	r3, #8
 800ab54:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d8a2      	bhi.n	800aaac <f_lseek+0x404>
				}
				fp->fptr += ofs;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	441a      	add	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab8a:	330a      	adds	r3, #10
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab96:	fb02 f201 	mul.w	r2, r2, r1
 800ab9a:	1a9b      	subs	r3, r3, r2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d022      	beq.n	800abe6 <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fc fb75 	bl	800729a <clust2sect>
 800abb0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800abb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d107      	bne.n	800abc8 <f_lseek+0x520>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbe:	3307      	adds	r3, #7
 800abc0:	2202      	movs	r2, #2
 800abc2:	701a      	strb	r2, [r3, #0]
 800abc4:	2302      	movs	r3, #2
 800abc6:	e09f      	b.n	800ad08 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd4:	330a      	adds	r3, #10
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	461a      	mov	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800abe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abe2:	4413      	add	r3, r2
 800abe4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abec:	3308      	adds	r3, #8
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfc:	330a      	adds	r3, #10
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac04:	fb03 f301 	mul.w	r3, r3, r1
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d057      	beq.n	800acbe <f_lseek+0x616>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac14:	3318      	adds	r3, #24
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d04f      	beq.n	800acbe <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac24:	3306      	adds	r3, #6
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d028      	beq.n	800ac82 <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	7818      	ldrb	r0, [r3, #0]
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac48:	3318      	adds	r3, #24
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f7fb ff47 	bl	8006ae0 <disk_write>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d007      	beq.n	800ac68 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac5e:	3307      	adds	r3, #7
 800ac60:	2201      	movs	r2, #1
 800ac62:	701a      	strb	r2, [r3, #0]
 800ac64:	2301      	movs	r3, #1
 800ac66:	e04f      	b.n	800ad08 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac6e:	3306      	adds	r3, #6
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7e:	3306      	adds	r3, #6
 800ac80:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8e:	3301      	adds	r3, #1
 800ac90:	7818      	ldrb	r0, [r3, #0]
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	2301      	movs	r3, #1
 800ac96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac98:	f7fb ff02 	bl	8006aa0 <disk_read>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d007      	beq.n	800acb2 <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca8:	3307      	adds	r3, #7
 800acaa:	2201      	movs	r2, #1
 800acac:	701a      	strb	r2, [r3, #0]
 800acae:	2301      	movs	r3, #1
 800acb0:	e02a      	b.n	800ad08 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb8:	3318      	adds	r3, #24
 800acba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acbc:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc4:	3308      	adds	r3, #8
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acce:	330c      	adds	r3, #12
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d916      	bls.n	800ad04 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acdc:	3308      	adds	r3, #8
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace6:	330c      	adds	r3, #12
 800ace8:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf0:	3306      	adds	r3, #6
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	f043 0320 	orr.w	r3, r3, #32
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad00:	3306      	adds	r3, #6
 800ad02:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800ad04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3740      	adds	r7, #64	; 0x40
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08e      	sub	sp, #56	; 0x38
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800ad1c:	f107 030c 	add.w	r3, r7, #12
 800ad20:	2200      	movs	r2, #0
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7fe f80f 	bl	8008d48 <find_volume>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800ad36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f040 80c4 	bne.w	800aec8 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad46:	3310      	adds	r3, #16
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad50:	3314      	adds	r3, #20
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3b02      	subs	r3, #2
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d807      	bhi.n	800ad6a <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad60:	3310      	adds	r3, #16
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	e0ae      	b.n	800aec8 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800ad78:	7efb      	ldrb	r3, [r7, #27]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d127      	bne.n	800adce <f_getfree+0xbe>
				clst = 2;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800ad82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad84:	69f8      	ldr	r0, [r7, #28]
 800ad86:	f7fc fab0 	bl	80072ea <get_fat>
 800ad8a:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad92:	d103      	bne.n	800ad9c <f_getfree+0x8c>
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ad9a:	e07f      	b.n	800ae9c <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d103      	bne.n	800adaa <f_getfree+0x9a>
 800ada2:	2302      	movs	r3, #2
 800ada4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ada8:	e078      	b.n	800ae9c <f_getfree+0x18c>
					if (stat == 0) n++;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <f_getfree+0xa6>
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	3301      	adds	r3, #1
 800adb4:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	3301      	adds	r3, #1
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc2:	3314      	adds	r3, #20
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adc8:	429a      	cmp	r2, r3
 800adca:	d3da      	bcc.n	800ad82 <f_getfree+0x72>
 800adcc:	e066      	b.n	800ae9c <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800add4:	3314      	adds	r3, #20
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24
 800ade8:	2300      	movs	r3, #0
 800adea:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d115      	bne.n	800ae1e <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	62ba      	str	r2, [r7, #40]	; 0x28
 800adf8:	4619      	mov	r1, r3
 800adfa:	69f8      	ldr	r0, [r7, #28]
 800adfc:	f7fc f94a 	bl	8007094 <move_window>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800ae06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d145      	bne.n	800ae9a <f_getfree+0x18a>
						p = fs->win.d8;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae18:	330a      	adds	r3, #10
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800ae1e:	7efb      	ldrb	r3, [r7, #27]
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d115      	bne.n	800ae50 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	3301      	adds	r3, #1
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	021b      	lsls	r3, r3, #8
 800ae2c:	b21a      	sxth	r2, r3
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	b21b      	sxth	r3, r3
 800ae34:	4313      	orrs	r3, r2
 800ae36:	b21b      	sxth	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d102      	bne.n	800ae42 <f_getfree+0x132>
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	3301      	adds	r3, #1
 800ae40:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	3302      	adds	r3, #2
 800ae46:	623b      	str	r3, [r7, #32]
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	3b02      	subs	r3, #2
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae4e:	e01d      	b.n	800ae8c <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	3303      	adds	r3, #3
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	061a      	lsls	r2, r3, #24
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	3302      	adds	r3, #2
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	041b      	lsls	r3, r3, #16
 800ae60:	4313      	orrs	r3, r2
 800ae62:	6a3a      	ldr	r2, [r7, #32]
 800ae64:	3201      	adds	r2, #1
 800ae66:	7812      	ldrb	r2, [r2, #0]
 800ae68:	0212      	lsls	r2, r2, #8
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	6a3a      	ldr	r2, [r7, #32]
 800ae6e:	7812      	ldrb	r2, [r2, #0]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d102      	bne.n	800ae80 <f_getfree+0x170>
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	3304      	adds	r3, #4
 800ae84:	623b      	str	r3, [r7, #32]
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	3b04      	subs	r3, #4
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1a9      	bne.n	800adec <f_getfree+0xdc>
 800ae98:	e000      	b.n	800ae9c <f_getfree+0x18c>
						if (res != FR_OK) break;
 800ae9a:	bf00      	nop
			}
			fs->free_clust = n;
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea2:	3310      	adds	r3, #16
 800aea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea6:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeae:	3305      	adds	r3, #5
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	f043 0301 	orr.w	r3, r3, #1
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aebe:	3305      	adds	r3, #5
 800aec0:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aec6:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800aec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3738      	adds	r7, #56	; 0x38
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
	int n = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800aee8:	e01b      	b.n	800af22 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800aeea:	f107 0310 	add.w	r3, r7, #16
 800aeee:	f107 0114 	add.w	r1, r7, #20
 800aef2:	2201      	movs	r2, #1
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7fe fe45 	bl	8009b84 <f_read>
		if (rc != 1) break;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d116      	bne.n	800af2e <f_gets+0x5a>
		c = s[0];
 800af00:	7d3b      	ldrb	r3, [r7, #20]
 800af02:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800af04:	7dfb      	ldrb	r3, [r7, #23]
 800af06:	2b0d      	cmp	r3, #13
 800af08:	d100      	bne.n	800af0c <f_gets+0x38>
 800af0a:	e00a      	b.n	800af22 <f_gets+0x4e>
		*p++ = c;
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	61ba      	str	r2, [r7, #24]
 800af12:	7dfa      	ldrb	r2, [r7, #23]
 800af14:	701a      	strb	r2, [r3, #0]
		n++;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	3301      	adds	r3, #1
 800af1a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	2b0a      	cmp	r3, #10
 800af20:	d007      	beq.n	800af32 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	3b01      	subs	r3, #1
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	429a      	cmp	r2, r3
 800af2a:	dbde      	blt.n	800aeea <f_gets+0x16>
 800af2c:	e002      	b.n	800af34 <f_gets+0x60>
		if (rc != 1) break;
 800af2e:	bf00      	nop
 800af30:	e000      	b.n	800af34 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800af32:	bf00      	nop
	}
	*p = 0;
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	2200      	movs	r2, #0
 800af38:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <f_gets+0x70>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	e000      	b.n	800af46 <f_gets+0x72>
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3720      	adds	r7, #32
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	460b      	mov	r3, r1
 800af58:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800af5a:	78fb      	ldrb	r3, [r7, #3]
 800af5c:	2b0a      	cmp	r3, #10
 800af5e:	d103      	bne.n	800af68 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800af60:	210d      	movs	r1, #13
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff fff3 	bl	800af4e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	db25      	blt.n	800afc0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	1c5a      	adds	r2, r3, #1
 800af78:	60fa      	str	r2, [r7, #12]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	4413      	add	r3, r2
 800af7e:	78fa      	ldrb	r2, [r7, #3]
 800af80:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b3c      	cmp	r3, #60	; 0x3c
 800af86:	dd12      	ble.n	800afae <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6818      	ldr	r0, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f103 010c 	add.w	r1, r3, #12
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	f107 0308 	add.w	r3, r7, #8
 800af98:	f7ff f80a 	bl	8009fb0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d101      	bne.n	800afa8 <putc_bfd+0x5a>
 800afa4:	2300      	movs	r3, #0
 800afa6:	e001      	b.n	800afac <putc_bfd+0x5e>
 800afa8:	f04f 33ff 	mov.w	r3, #4294967295
 800afac:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	609a      	str	r2, [r3, #8]
 800afbe:	e000      	b.n	800afc2 <putc_bfd+0x74>
	if (i < 0) return;
 800afc0:	bf00      	nop
}
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800afc8:	b590      	push	{r4, r7, lr}
 800afca:	b097      	sub	sp, #92	; 0x5c
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	613b      	str	r3, [r7, #16]
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800afde:	e009      	b.n	800aff4 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	781a      	ldrb	r2, [r3, #0]
 800afe8:	f107 030c 	add.w	r3, r7, #12
 800afec:	4611      	mov	r1, r2
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff ffad 	bl	800af4e <putc_bfd>
	while (*str)			/* Put the string */
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1f1      	bne.n	800afe0 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	2b00      	cmp	r3, #0
 800b000:	db15      	blt.n	800b02e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	461c      	mov	r4, r3
 800b008:	f107 0208 	add.w	r2, r7, #8
 800b00c:	f107 030c 	add.w	r3, r7, #12
 800b010:	f103 010c 	add.w	r1, r3, #12
 800b014:	4613      	mov	r3, r2
 800b016:	4622      	mov	r2, r4
 800b018:	f7fe ffca 	bl	8009fb0 <f_write>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d105      	bne.n	800b02e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	4293      	cmp	r3, r2
 800b028:	d101      	bne.n	800b02e <f_puts+0x66>
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	e001      	b.n	800b032 <f_puts+0x6a>
	return EOF;
 800b02e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b032:	4618      	mov	r0, r3
 800b034:	375c      	adds	r7, #92	; 0x5c
 800b036:	46bd      	mov	sp, r7
 800b038:	bd90      	pop	{r4, r7, pc}
	...

0800b03c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	4613      	mov	r3, r2
 800b048:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b04a:	2301      	movs	r3, #1
 800b04c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b052:	4b1f      	ldr	r3, [pc, #124]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b054:	7a5b      	ldrb	r3, [r3, #9]
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d831      	bhi.n	800b0c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b05c:	4b1c      	ldr	r3, [pc, #112]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b05e:	7a5b      	ldrb	r3, [r3, #9]
 800b060:	b2db      	uxtb	r3, r3
 800b062:	461a      	mov	r2, r3
 800b064:	4b1a      	ldr	r3, [pc, #104]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b066:	2100      	movs	r1, #0
 800b068:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b06a:	4b19      	ldr	r3, [pc, #100]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b06c:	7a5b      	ldrb	r3, [r3, #9]
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	4a17      	ldr	r2, [pc, #92]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b07a:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b07c:	7a5b      	ldrb	r3, [r3, #9]
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	461a      	mov	r2, r3
 800b082:	4b13      	ldr	r3, [pc, #76]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b084:	4413      	add	r3, r2
 800b086:	79fa      	ldrb	r2, [r7, #7]
 800b088:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b08a:	4b11      	ldr	r3, [pc, #68]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b08c:	7a5b      	ldrb	r3, [r3, #9]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	1c5a      	adds	r2, r3, #1
 800b092:	b2d1      	uxtb	r1, r2
 800b094:	4a0e      	ldr	r2, [pc, #56]	; (800b0d0 <FATFS_LinkDriverEx+0x94>)
 800b096:	7251      	strb	r1, [r2, #9]
 800b098:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b09a:	7dbb      	ldrb	r3, [r7, #22]
 800b09c:	3330      	adds	r3, #48	; 0x30
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	223a      	movs	r2, #58	; 0x3a
 800b0aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3302      	adds	r3, #2
 800b0b0:	222f      	movs	r2, #47	; 0x2f
 800b0b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	3303      	adds	r3, #3
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	371c      	adds	r7, #28
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	200002d8 	.word	0x200002d8

0800b0d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0de:	2200      	movs	r2, #0
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff ffaa 	bl	800b03c <FATFS_LinkDriverEx>
 800b0e8:	4603      	mov	r3, r0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	6039      	str	r1, [r7, #0]
 800b0fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b100:	88fb      	ldrh	r3, [r7, #6]
 800b102:	2b7f      	cmp	r3, #127	; 0x7f
 800b104:	d802      	bhi.n	800b10c <ff_convert+0x18>
		c = chr;
 800b106:	88fb      	ldrh	r3, [r7, #6]
 800b108:	81fb      	strh	r3, [r7, #14]
 800b10a:	e025      	b.n	800b158 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00b      	beq.n	800b12a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b112:	88fb      	ldrh	r3, [r7, #6]
 800b114:	2bff      	cmp	r3, #255	; 0xff
 800b116:	d805      	bhi.n	800b124 <ff_convert+0x30>
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	3b80      	subs	r3, #128	; 0x80
 800b11c:	4a12      	ldr	r2, [pc, #72]	; (800b168 <ff_convert+0x74>)
 800b11e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b122:	e000      	b.n	800b126 <ff_convert+0x32>
 800b124:	2300      	movs	r3, #0
 800b126:	81fb      	strh	r3, [r7, #14]
 800b128:	e016      	b.n	800b158 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800b12a:	2300      	movs	r3, #0
 800b12c:	81fb      	strh	r3, [r7, #14]
 800b12e:	e009      	b.n	800b144 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b130:	89fb      	ldrh	r3, [r7, #14]
 800b132:	4a0d      	ldr	r2, [pc, #52]	; (800b168 <ff_convert+0x74>)
 800b134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b138:	88fa      	ldrh	r2, [r7, #6]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d006      	beq.n	800b14c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b13e:	89fb      	ldrh	r3, [r7, #14]
 800b140:	3301      	adds	r3, #1
 800b142:	81fb      	strh	r3, [r7, #14]
 800b144:	89fb      	ldrh	r3, [r7, #14]
 800b146:	2b7f      	cmp	r3, #127	; 0x7f
 800b148:	d9f2      	bls.n	800b130 <ff_convert+0x3c>
 800b14a:	e000      	b.n	800b14e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b14c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b14e:	89fb      	ldrh	r3, [r7, #14]
 800b150:	3380      	adds	r3, #128	; 0x80
 800b152:	b29b      	uxth	r3, r3
 800b154:	b2db      	uxtb	r3, r3
 800b156:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b158:	89fb      	ldrh	r3, [r7, #14]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	0800bf38 	.word	0x0800bf38

0800b16c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	4603      	mov	r3, r0
 800b174:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800b176:	2300      	movs	r3, #0
 800b178:	60fb      	str	r3, [r7, #12]
 800b17a:	e002      	b.n	800b182 <ff_wtoupper+0x16>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3301      	adds	r3, #1
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	4a0f      	ldr	r2, [pc, #60]	; (800b1c0 <ff_wtoupper+0x54>)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d006      	beq.n	800b19c <ff_wtoupper+0x30>
 800b18e:	4a0c      	ldr	r2, [pc, #48]	; (800b1c0 <ff_wtoupper+0x54>)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b196:	88fa      	ldrh	r2, [r7, #6]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d1ef      	bne.n	800b17c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800b19c:	4a08      	ldr	r2, [pc, #32]	; (800b1c0 <ff_wtoupper+0x54>)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d004      	beq.n	800b1b2 <ff_wtoupper+0x46>
 800b1a8:	4a06      	ldr	r2, [pc, #24]	; (800b1c4 <ff_wtoupper+0x58>)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1b0:	e000      	b.n	800b1b4 <ff_wtoupper+0x48>
 800b1b2:	88fb      	ldrh	r3, [r7, #6]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	0800c038 	.word	0x0800c038
 800b1c4:	0800c218 	.word	0x0800c218

0800b1c8 <__errno>:
 800b1c8:	4b01      	ldr	r3, [pc, #4]	; (800b1d0 <__errno+0x8>)
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	20000024 	.word	0x20000024

0800b1d4 <__libc_init_array>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4d0d      	ldr	r5, [pc, #52]	; (800b20c <__libc_init_array+0x38>)
 800b1d8:	4c0d      	ldr	r4, [pc, #52]	; (800b210 <__libc_init_array+0x3c>)
 800b1da:	1b64      	subs	r4, r4, r5
 800b1dc:	10a4      	asrs	r4, r4, #2
 800b1de:	2600      	movs	r6, #0
 800b1e0:	42a6      	cmp	r6, r4
 800b1e2:	d109      	bne.n	800b1f8 <__libc_init_array+0x24>
 800b1e4:	4d0b      	ldr	r5, [pc, #44]	; (800b214 <__libc_init_array+0x40>)
 800b1e6:	4c0c      	ldr	r4, [pc, #48]	; (800b218 <__libc_init_array+0x44>)
 800b1e8:	f000 fc4e 	bl	800ba88 <_init>
 800b1ec:	1b64      	subs	r4, r4, r5
 800b1ee:	10a4      	asrs	r4, r4, #2
 800b1f0:	2600      	movs	r6, #0
 800b1f2:	42a6      	cmp	r6, r4
 800b1f4:	d105      	bne.n	800b202 <__libc_init_array+0x2e>
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1fc:	4798      	blx	r3
 800b1fe:	3601      	adds	r6, #1
 800b200:	e7ee      	b.n	800b1e0 <__libc_init_array+0xc>
 800b202:	f855 3b04 	ldr.w	r3, [r5], #4
 800b206:	4798      	blx	r3
 800b208:	3601      	adds	r6, #1
 800b20a:	e7f2      	b.n	800b1f2 <__libc_init_array+0x1e>
 800b20c:	0800c42c 	.word	0x0800c42c
 800b210:	0800c42c 	.word	0x0800c42c
 800b214:	0800c42c 	.word	0x0800c42c
 800b218:	0800c430 	.word	0x0800c430

0800b21c <memcpy>:
 800b21c:	440a      	add	r2, r1
 800b21e:	4291      	cmp	r1, r2
 800b220:	f100 33ff 	add.w	r3, r0, #4294967295
 800b224:	d100      	bne.n	800b228 <memcpy+0xc>
 800b226:	4770      	bx	lr
 800b228:	b510      	push	{r4, lr}
 800b22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b22e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b232:	4291      	cmp	r1, r2
 800b234:	d1f9      	bne.n	800b22a <memcpy+0xe>
 800b236:	bd10      	pop	{r4, pc}

0800b238 <memset>:
 800b238:	4402      	add	r2, r0
 800b23a:	4603      	mov	r3, r0
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d100      	bne.n	800b242 <memset+0xa>
 800b240:	4770      	bx	lr
 800b242:	f803 1b01 	strb.w	r1, [r3], #1
 800b246:	e7f9      	b.n	800b23c <memset+0x4>

0800b248 <siprintf>:
 800b248:	b40e      	push	{r1, r2, r3}
 800b24a:	b500      	push	{lr}
 800b24c:	b09c      	sub	sp, #112	; 0x70
 800b24e:	ab1d      	add	r3, sp, #116	; 0x74
 800b250:	9002      	str	r0, [sp, #8]
 800b252:	9006      	str	r0, [sp, #24]
 800b254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b258:	4809      	ldr	r0, [pc, #36]	; (800b280 <siprintf+0x38>)
 800b25a:	9107      	str	r1, [sp, #28]
 800b25c:	9104      	str	r1, [sp, #16]
 800b25e:	4909      	ldr	r1, [pc, #36]	; (800b284 <siprintf+0x3c>)
 800b260:	f853 2b04 	ldr.w	r2, [r3], #4
 800b264:	9105      	str	r1, [sp, #20]
 800b266:	6800      	ldr	r0, [r0, #0]
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	a902      	add	r1, sp, #8
 800b26c:	f000 f868 	bl	800b340 <_svfiprintf_r>
 800b270:	9b02      	ldr	r3, [sp, #8]
 800b272:	2200      	movs	r2, #0
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	b01c      	add	sp, #112	; 0x70
 800b278:	f85d eb04 	ldr.w	lr, [sp], #4
 800b27c:	b003      	add	sp, #12
 800b27e:	4770      	bx	lr
 800b280:	20000024 	.word	0x20000024
 800b284:	ffff0208 	.word	0xffff0208

0800b288 <__ssputs_r>:
 800b288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b28c:	688e      	ldr	r6, [r1, #8]
 800b28e:	429e      	cmp	r6, r3
 800b290:	4682      	mov	sl, r0
 800b292:	460c      	mov	r4, r1
 800b294:	4690      	mov	r8, r2
 800b296:	461f      	mov	r7, r3
 800b298:	d838      	bhi.n	800b30c <__ssputs_r+0x84>
 800b29a:	898a      	ldrh	r2, [r1, #12]
 800b29c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2a0:	d032      	beq.n	800b308 <__ssputs_r+0x80>
 800b2a2:	6825      	ldr	r5, [r4, #0]
 800b2a4:	6909      	ldr	r1, [r1, #16]
 800b2a6:	eba5 0901 	sub.w	r9, r5, r1
 800b2aa:	6965      	ldr	r5, [r4, #20]
 800b2ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	444b      	add	r3, r9
 800b2b8:	106d      	asrs	r5, r5, #1
 800b2ba:	429d      	cmp	r5, r3
 800b2bc:	bf38      	it	cc
 800b2be:	461d      	movcc	r5, r3
 800b2c0:	0553      	lsls	r3, r2, #21
 800b2c2:	d531      	bpl.n	800b328 <__ssputs_r+0xa0>
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	f000 fb39 	bl	800b93c <_malloc_r>
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	b950      	cbnz	r0, 800b2e4 <__ssputs_r+0x5c>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	f8ca 3000 	str.w	r3, [sl]
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2da:	81a3      	strh	r3, [r4, #12]
 800b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e4:	6921      	ldr	r1, [r4, #16]
 800b2e6:	464a      	mov	r2, r9
 800b2e8:	f7ff ff98 	bl	800b21c <memcpy>
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	6126      	str	r6, [r4, #16]
 800b2fa:	6165      	str	r5, [r4, #20]
 800b2fc:	444e      	add	r6, r9
 800b2fe:	eba5 0509 	sub.w	r5, r5, r9
 800b302:	6026      	str	r6, [r4, #0]
 800b304:	60a5      	str	r5, [r4, #8]
 800b306:	463e      	mov	r6, r7
 800b308:	42be      	cmp	r6, r7
 800b30a:	d900      	bls.n	800b30e <__ssputs_r+0x86>
 800b30c:	463e      	mov	r6, r7
 800b30e:	4632      	mov	r2, r6
 800b310:	6820      	ldr	r0, [r4, #0]
 800b312:	4641      	mov	r1, r8
 800b314:	f000 faa8 	bl	800b868 <memmove>
 800b318:	68a3      	ldr	r3, [r4, #8]
 800b31a:	6822      	ldr	r2, [r4, #0]
 800b31c:	1b9b      	subs	r3, r3, r6
 800b31e:	4432      	add	r2, r6
 800b320:	60a3      	str	r3, [r4, #8]
 800b322:	6022      	str	r2, [r4, #0]
 800b324:	2000      	movs	r0, #0
 800b326:	e7db      	b.n	800b2e0 <__ssputs_r+0x58>
 800b328:	462a      	mov	r2, r5
 800b32a:	f000 fb61 	bl	800b9f0 <_realloc_r>
 800b32e:	4606      	mov	r6, r0
 800b330:	2800      	cmp	r0, #0
 800b332:	d1e1      	bne.n	800b2f8 <__ssputs_r+0x70>
 800b334:	6921      	ldr	r1, [r4, #16]
 800b336:	4650      	mov	r0, sl
 800b338:	f000 fab0 	bl	800b89c <_free_r>
 800b33c:	e7c7      	b.n	800b2ce <__ssputs_r+0x46>
	...

0800b340 <_svfiprintf_r>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	4698      	mov	r8, r3
 800b346:	898b      	ldrh	r3, [r1, #12]
 800b348:	061b      	lsls	r3, r3, #24
 800b34a:	b09d      	sub	sp, #116	; 0x74
 800b34c:	4607      	mov	r7, r0
 800b34e:	460d      	mov	r5, r1
 800b350:	4614      	mov	r4, r2
 800b352:	d50e      	bpl.n	800b372 <_svfiprintf_r+0x32>
 800b354:	690b      	ldr	r3, [r1, #16]
 800b356:	b963      	cbnz	r3, 800b372 <_svfiprintf_r+0x32>
 800b358:	2140      	movs	r1, #64	; 0x40
 800b35a:	f000 faef 	bl	800b93c <_malloc_r>
 800b35e:	6028      	str	r0, [r5, #0]
 800b360:	6128      	str	r0, [r5, #16]
 800b362:	b920      	cbnz	r0, 800b36e <_svfiprintf_r+0x2e>
 800b364:	230c      	movs	r3, #12
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	f04f 30ff 	mov.w	r0, #4294967295
 800b36c:	e0d1      	b.n	800b512 <_svfiprintf_r+0x1d2>
 800b36e:	2340      	movs	r3, #64	; 0x40
 800b370:	616b      	str	r3, [r5, #20]
 800b372:	2300      	movs	r3, #0
 800b374:	9309      	str	r3, [sp, #36]	; 0x24
 800b376:	2320      	movs	r3, #32
 800b378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b37c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b380:	2330      	movs	r3, #48	; 0x30
 800b382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b52c <_svfiprintf_r+0x1ec>
 800b386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b38a:	f04f 0901 	mov.w	r9, #1
 800b38e:	4623      	mov	r3, r4
 800b390:	469a      	mov	sl, r3
 800b392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b396:	b10a      	cbz	r2, 800b39c <_svfiprintf_r+0x5c>
 800b398:	2a25      	cmp	r2, #37	; 0x25
 800b39a:	d1f9      	bne.n	800b390 <_svfiprintf_r+0x50>
 800b39c:	ebba 0b04 	subs.w	fp, sl, r4
 800b3a0:	d00b      	beq.n	800b3ba <_svfiprintf_r+0x7a>
 800b3a2:	465b      	mov	r3, fp
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7ff ff6d 	bl	800b288 <__ssputs_r>
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f000 80aa 	beq.w	800b508 <_svfiprintf_r+0x1c8>
 800b3b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3b6:	445a      	add	r2, fp
 800b3b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f000 80a2 	beq.w	800b508 <_svfiprintf_r+0x1c8>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ce:	f10a 0a01 	add.w	sl, sl, #1
 800b3d2:	9304      	str	r3, [sp, #16]
 800b3d4:	9307      	str	r3, [sp, #28]
 800b3d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3da:	931a      	str	r3, [sp, #104]	; 0x68
 800b3dc:	4654      	mov	r4, sl
 800b3de:	2205      	movs	r2, #5
 800b3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e4:	4851      	ldr	r0, [pc, #324]	; (800b52c <_svfiprintf_r+0x1ec>)
 800b3e6:	f7f4 fefb 	bl	80001e0 <memchr>
 800b3ea:	9a04      	ldr	r2, [sp, #16]
 800b3ec:	b9d8      	cbnz	r0, 800b426 <_svfiprintf_r+0xe6>
 800b3ee:	06d0      	lsls	r0, r2, #27
 800b3f0:	bf44      	itt	mi
 800b3f2:	2320      	movmi	r3, #32
 800b3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3f8:	0711      	lsls	r1, r2, #28
 800b3fa:	bf44      	itt	mi
 800b3fc:	232b      	movmi	r3, #43	; 0x2b
 800b3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b402:	f89a 3000 	ldrb.w	r3, [sl]
 800b406:	2b2a      	cmp	r3, #42	; 0x2a
 800b408:	d015      	beq.n	800b436 <_svfiprintf_r+0xf6>
 800b40a:	9a07      	ldr	r2, [sp, #28]
 800b40c:	4654      	mov	r4, sl
 800b40e:	2000      	movs	r0, #0
 800b410:	f04f 0c0a 	mov.w	ip, #10
 800b414:	4621      	mov	r1, r4
 800b416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b41a:	3b30      	subs	r3, #48	; 0x30
 800b41c:	2b09      	cmp	r3, #9
 800b41e:	d94e      	bls.n	800b4be <_svfiprintf_r+0x17e>
 800b420:	b1b0      	cbz	r0, 800b450 <_svfiprintf_r+0x110>
 800b422:	9207      	str	r2, [sp, #28]
 800b424:	e014      	b.n	800b450 <_svfiprintf_r+0x110>
 800b426:	eba0 0308 	sub.w	r3, r0, r8
 800b42a:	fa09 f303 	lsl.w	r3, r9, r3
 800b42e:	4313      	orrs	r3, r2
 800b430:	9304      	str	r3, [sp, #16]
 800b432:	46a2      	mov	sl, r4
 800b434:	e7d2      	b.n	800b3dc <_svfiprintf_r+0x9c>
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	1d19      	adds	r1, r3, #4
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	9103      	str	r1, [sp, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	bfbb      	ittet	lt
 800b442:	425b      	neglt	r3, r3
 800b444:	f042 0202 	orrlt.w	r2, r2, #2
 800b448:	9307      	strge	r3, [sp, #28]
 800b44a:	9307      	strlt	r3, [sp, #28]
 800b44c:	bfb8      	it	lt
 800b44e:	9204      	strlt	r2, [sp, #16]
 800b450:	7823      	ldrb	r3, [r4, #0]
 800b452:	2b2e      	cmp	r3, #46	; 0x2e
 800b454:	d10c      	bne.n	800b470 <_svfiprintf_r+0x130>
 800b456:	7863      	ldrb	r3, [r4, #1]
 800b458:	2b2a      	cmp	r3, #42	; 0x2a
 800b45a:	d135      	bne.n	800b4c8 <_svfiprintf_r+0x188>
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	1d1a      	adds	r2, r3, #4
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	9203      	str	r2, [sp, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	bfb8      	it	lt
 800b468:	f04f 33ff 	movlt.w	r3, #4294967295
 800b46c:	3402      	adds	r4, #2
 800b46e:	9305      	str	r3, [sp, #20]
 800b470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b53c <_svfiprintf_r+0x1fc>
 800b474:	7821      	ldrb	r1, [r4, #0]
 800b476:	2203      	movs	r2, #3
 800b478:	4650      	mov	r0, sl
 800b47a:	f7f4 feb1 	bl	80001e0 <memchr>
 800b47e:	b140      	cbz	r0, 800b492 <_svfiprintf_r+0x152>
 800b480:	2340      	movs	r3, #64	; 0x40
 800b482:	eba0 000a 	sub.w	r0, r0, sl
 800b486:	fa03 f000 	lsl.w	r0, r3, r0
 800b48a:	9b04      	ldr	r3, [sp, #16]
 800b48c:	4303      	orrs	r3, r0
 800b48e:	3401      	adds	r4, #1
 800b490:	9304      	str	r3, [sp, #16]
 800b492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b496:	4826      	ldr	r0, [pc, #152]	; (800b530 <_svfiprintf_r+0x1f0>)
 800b498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b49c:	2206      	movs	r2, #6
 800b49e:	f7f4 fe9f 	bl	80001e0 <memchr>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d038      	beq.n	800b518 <_svfiprintf_r+0x1d8>
 800b4a6:	4b23      	ldr	r3, [pc, #140]	; (800b534 <_svfiprintf_r+0x1f4>)
 800b4a8:	bb1b      	cbnz	r3, 800b4f2 <_svfiprintf_r+0x1b2>
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	3307      	adds	r3, #7
 800b4ae:	f023 0307 	bic.w	r3, r3, #7
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	9303      	str	r3, [sp, #12]
 800b4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b8:	4433      	add	r3, r6
 800b4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b4bc:	e767      	b.n	800b38e <_svfiprintf_r+0x4e>
 800b4be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	e7a5      	b.n	800b414 <_svfiprintf_r+0xd4>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	3401      	adds	r4, #1
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f04f 0c0a 	mov.w	ip, #10
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4da:	3a30      	subs	r2, #48	; 0x30
 800b4dc:	2a09      	cmp	r2, #9
 800b4de:	d903      	bls.n	800b4e8 <_svfiprintf_r+0x1a8>
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d0c5      	beq.n	800b470 <_svfiprintf_r+0x130>
 800b4e4:	9105      	str	r1, [sp, #20]
 800b4e6:	e7c3      	b.n	800b470 <_svfiprintf_r+0x130>
 800b4e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e7f0      	b.n	800b4d4 <_svfiprintf_r+0x194>
 800b4f2:	ab03      	add	r3, sp, #12
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	4b0f      	ldr	r3, [pc, #60]	; (800b538 <_svfiprintf_r+0x1f8>)
 800b4fa:	a904      	add	r1, sp, #16
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	f3af 8000 	nop.w
 800b502:	1c42      	adds	r2, r0, #1
 800b504:	4606      	mov	r6, r0
 800b506:	d1d6      	bne.n	800b4b6 <_svfiprintf_r+0x176>
 800b508:	89ab      	ldrh	r3, [r5, #12]
 800b50a:	065b      	lsls	r3, r3, #25
 800b50c:	f53f af2c 	bmi.w	800b368 <_svfiprintf_r+0x28>
 800b510:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b512:	b01d      	add	sp, #116	; 0x74
 800b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b518:	ab03      	add	r3, sp, #12
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	462a      	mov	r2, r5
 800b51e:	4b06      	ldr	r3, [pc, #24]	; (800b538 <_svfiprintf_r+0x1f8>)
 800b520:	a904      	add	r1, sp, #16
 800b522:	4638      	mov	r0, r7
 800b524:	f000 f87a 	bl	800b61c <_printf_i>
 800b528:	e7eb      	b.n	800b502 <_svfiprintf_r+0x1c2>
 800b52a:	bf00      	nop
 800b52c:	0800c3f8 	.word	0x0800c3f8
 800b530:	0800c402 	.word	0x0800c402
 800b534:	00000000 	.word	0x00000000
 800b538:	0800b289 	.word	0x0800b289
 800b53c:	0800c3fe 	.word	0x0800c3fe

0800b540 <_printf_common>:
 800b540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b544:	4616      	mov	r6, r2
 800b546:	4699      	mov	r9, r3
 800b548:	688a      	ldr	r2, [r1, #8]
 800b54a:	690b      	ldr	r3, [r1, #16]
 800b54c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b550:	4293      	cmp	r3, r2
 800b552:	bfb8      	it	lt
 800b554:	4613      	movlt	r3, r2
 800b556:	6033      	str	r3, [r6, #0]
 800b558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b55c:	4607      	mov	r7, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	b10a      	cbz	r2, 800b566 <_printf_common+0x26>
 800b562:	3301      	adds	r3, #1
 800b564:	6033      	str	r3, [r6, #0]
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	0699      	lsls	r1, r3, #26
 800b56a:	bf42      	ittt	mi
 800b56c:	6833      	ldrmi	r3, [r6, #0]
 800b56e:	3302      	addmi	r3, #2
 800b570:	6033      	strmi	r3, [r6, #0]
 800b572:	6825      	ldr	r5, [r4, #0]
 800b574:	f015 0506 	ands.w	r5, r5, #6
 800b578:	d106      	bne.n	800b588 <_printf_common+0x48>
 800b57a:	f104 0a19 	add.w	sl, r4, #25
 800b57e:	68e3      	ldr	r3, [r4, #12]
 800b580:	6832      	ldr	r2, [r6, #0]
 800b582:	1a9b      	subs	r3, r3, r2
 800b584:	42ab      	cmp	r3, r5
 800b586:	dc26      	bgt.n	800b5d6 <_printf_common+0x96>
 800b588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b58c:	1e13      	subs	r3, r2, #0
 800b58e:	6822      	ldr	r2, [r4, #0]
 800b590:	bf18      	it	ne
 800b592:	2301      	movne	r3, #1
 800b594:	0692      	lsls	r2, r2, #26
 800b596:	d42b      	bmi.n	800b5f0 <_printf_common+0xb0>
 800b598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b59c:	4649      	mov	r1, r9
 800b59e:	4638      	mov	r0, r7
 800b5a0:	47c0      	blx	r8
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	d01e      	beq.n	800b5e4 <_printf_common+0xa4>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	68e5      	ldr	r5, [r4, #12]
 800b5aa:	6832      	ldr	r2, [r6, #0]
 800b5ac:	f003 0306 	and.w	r3, r3, #6
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	bf08      	it	eq
 800b5b4:	1aad      	subeq	r5, r5, r2
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	6922      	ldr	r2, [r4, #16]
 800b5ba:	bf0c      	ite	eq
 800b5bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5c0:	2500      	movne	r5, #0
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	bfc4      	itt	gt
 800b5c6:	1a9b      	subgt	r3, r3, r2
 800b5c8:	18ed      	addgt	r5, r5, r3
 800b5ca:	2600      	movs	r6, #0
 800b5cc:	341a      	adds	r4, #26
 800b5ce:	42b5      	cmp	r5, r6
 800b5d0:	d11a      	bne.n	800b608 <_printf_common+0xc8>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	e008      	b.n	800b5e8 <_printf_common+0xa8>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4652      	mov	r2, sl
 800b5da:	4649      	mov	r1, r9
 800b5dc:	4638      	mov	r0, r7
 800b5de:	47c0      	blx	r8
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d103      	bne.n	800b5ec <_printf_common+0xac>
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ec:	3501      	adds	r5, #1
 800b5ee:	e7c6      	b.n	800b57e <_printf_common+0x3e>
 800b5f0:	18e1      	adds	r1, r4, r3
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	2030      	movs	r0, #48	; 0x30
 800b5f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5fa:	4422      	add	r2, r4
 800b5fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b604:	3302      	adds	r3, #2
 800b606:	e7c7      	b.n	800b598 <_printf_common+0x58>
 800b608:	2301      	movs	r3, #1
 800b60a:	4622      	mov	r2, r4
 800b60c:	4649      	mov	r1, r9
 800b60e:	4638      	mov	r0, r7
 800b610:	47c0      	blx	r8
 800b612:	3001      	adds	r0, #1
 800b614:	d0e6      	beq.n	800b5e4 <_printf_common+0xa4>
 800b616:	3601      	adds	r6, #1
 800b618:	e7d9      	b.n	800b5ce <_printf_common+0x8e>
	...

0800b61c <_printf_i>:
 800b61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b620:	460c      	mov	r4, r1
 800b622:	4691      	mov	r9, r2
 800b624:	7e27      	ldrb	r7, [r4, #24]
 800b626:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b628:	2f78      	cmp	r7, #120	; 0x78
 800b62a:	4680      	mov	r8, r0
 800b62c:	469a      	mov	sl, r3
 800b62e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b632:	d807      	bhi.n	800b644 <_printf_i+0x28>
 800b634:	2f62      	cmp	r7, #98	; 0x62
 800b636:	d80a      	bhi.n	800b64e <_printf_i+0x32>
 800b638:	2f00      	cmp	r7, #0
 800b63a:	f000 80d8 	beq.w	800b7ee <_printf_i+0x1d2>
 800b63e:	2f58      	cmp	r7, #88	; 0x58
 800b640:	f000 80a3 	beq.w	800b78a <_printf_i+0x16e>
 800b644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b64c:	e03a      	b.n	800b6c4 <_printf_i+0xa8>
 800b64e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b652:	2b15      	cmp	r3, #21
 800b654:	d8f6      	bhi.n	800b644 <_printf_i+0x28>
 800b656:	a001      	add	r0, pc, #4	; (adr r0, 800b65c <_printf_i+0x40>)
 800b658:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b65c:	0800b6b5 	.word	0x0800b6b5
 800b660:	0800b6c9 	.word	0x0800b6c9
 800b664:	0800b645 	.word	0x0800b645
 800b668:	0800b645 	.word	0x0800b645
 800b66c:	0800b645 	.word	0x0800b645
 800b670:	0800b645 	.word	0x0800b645
 800b674:	0800b6c9 	.word	0x0800b6c9
 800b678:	0800b645 	.word	0x0800b645
 800b67c:	0800b645 	.word	0x0800b645
 800b680:	0800b645 	.word	0x0800b645
 800b684:	0800b645 	.word	0x0800b645
 800b688:	0800b7d5 	.word	0x0800b7d5
 800b68c:	0800b6f9 	.word	0x0800b6f9
 800b690:	0800b7b7 	.word	0x0800b7b7
 800b694:	0800b645 	.word	0x0800b645
 800b698:	0800b645 	.word	0x0800b645
 800b69c:	0800b7f7 	.word	0x0800b7f7
 800b6a0:	0800b645 	.word	0x0800b645
 800b6a4:	0800b6f9 	.word	0x0800b6f9
 800b6a8:	0800b645 	.word	0x0800b645
 800b6ac:	0800b645 	.word	0x0800b645
 800b6b0:	0800b7bf 	.word	0x0800b7bf
 800b6b4:	680b      	ldr	r3, [r1, #0]
 800b6b6:	1d1a      	adds	r2, r3, #4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	600a      	str	r2, [r1, #0]
 800b6bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e0a3      	b.n	800b810 <_printf_i+0x1f4>
 800b6c8:	6825      	ldr	r5, [r4, #0]
 800b6ca:	6808      	ldr	r0, [r1, #0]
 800b6cc:	062e      	lsls	r6, r5, #24
 800b6ce:	f100 0304 	add.w	r3, r0, #4
 800b6d2:	d50a      	bpl.n	800b6ea <_printf_i+0xce>
 800b6d4:	6805      	ldr	r5, [r0, #0]
 800b6d6:	600b      	str	r3, [r1, #0]
 800b6d8:	2d00      	cmp	r5, #0
 800b6da:	da03      	bge.n	800b6e4 <_printf_i+0xc8>
 800b6dc:	232d      	movs	r3, #45	; 0x2d
 800b6de:	426d      	negs	r5, r5
 800b6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6e4:	485e      	ldr	r0, [pc, #376]	; (800b860 <_printf_i+0x244>)
 800b6e6:	230a      	movs	r3, #10
 800b6e8:	e019      	b.n	800b71e <_printf_i+0x102>
 800b6ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b6ee:	6805      	ldr	r5, [r0, #0]
 800b6f0:	600b      	str	r3, [r1, #0]
 800b6f2:	bf18      	it	ne
 800b6f4:	b22d      	sxthne	r5, r5
 800b6f6:	e7ef      	b.n	800b6d8 <_printf_i+0xbc>
 800b6f8:	680b      	ldr	r3, [r1, #0]
 800b6fa:	6825      	ldr	r5, [r4, #0]
 800b6fc:	1d18      	adds	r0, r3, #4
 800b6fe:	6008      	str	r0, [r1, #0]
 800b700:	0628      	lsls	r0, r5, #24
 800b702:	d501      	bpl.n	800b708 <_printf_i+0xec>
 800b704:	681d      	ldr	r5, [r3, #0]
 800b706:	e002      	b.n	800b70e <_printf_i+0xf2>
 800b708:	0669      	lsls	r1, r5, #25
 800b70a:	d5fb      	bpl.n	800b704 <_printf_i+0xe8>
 800b70c:	881d      	ldrh	r5, [r3, #0]
 800b70e:	4854      	ldr	r0, [pc, #336]	; (800b860 <_printf_i+0x244>)
 800b710:	2f6f      	cmp	r7, #111	; 0x6f
 800b712:	bf0c      	ite	eq
 800b714:	2308      	moveq	r3, #8
 800b716:	230a      	movne	r3, #10
 800b718:	2100      	movs	r1, #0
 800b71a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b71e:	6866      	ldr	r6, [r4, #4]
 800b720:	60a6      	str	r6, [r4, #8]
 800b722:	2e00      	cmp	r6, #0
 800b724:	bfa2      	ittt	ge
 800b726:	6821      	ldrge	r1, [r4, #0]
 800b728:	f021 0104 	bicge.w	r1, r1, #4
 800b72c:	6021      	strge	r1, [r4, #0]
 800b72e:	b90d      	cbnz	r5, 800b734 <_printf_i+0x118>
 800b730:	2e00      	cmp	r6, #0
 800b732:	d04d      	beq.n	800b7d0 <_printf_i+0x1b4>
 800b734:	4616      	mov	r6, r2
 800b736:	fbb5 f1f3 	udiv	r1, r5, r3
 800b73a:	fb03 5711 	mls	r7, r3, r1, r5
 800b73e:	5dc7      	ldrb	r7, [r0, r7]
 800b740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b744:	462f      	mov	r7, r5
 800b746:	42bb      	cmp	r3, r7
 800b748:	460d      	mov	r5, r1
 800b74a:	d9f4      	bls.n	800b736 <_printf_i+0x11a>
 800b74c:	2b08      	cmp	r3, #8
 800b74e:	d10b      	bne.n	800b768 <_printf_i+0x14c>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	07df      	lsls	r7, r3, #31
 800b754:	d508      	bpl.n	800b768 <_printf_i+0x14c>
 800b756:	6923      	ldr	r3, [r4, #16]
 800b758:	6861      	ldr	r1, [r4, #4]
 800b75a:	4299      	cmp	r1, r3
 800b75c:	bfde      	ittt	le
 800b75e:	2330      	movle	r3, #48	; 0x30
 800b760:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b764:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b768:	1b92      	subs	r2, r2, r6
 800b76a:	6122      	str	r2, [r4, #16]
 800b76c:	f8cd a000 	str.w	sl, [sp]
 800b770:	464b      	mov	r3, r9
 800b772:	aa03      	add	r2, sp, #12
 800b774:	4621      	mov	r1, r4
 800b776:	4640      	mov	r0, r8
 800b778:	f7ff fee2 	bl	800b540 <_printf_common>
 800b77c:	3001      	adds	r0, #1
 800b77e:	d14c      	bne.n	800b81a <_printf_i+0x1fe>
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	b004      	add	sp, #16
 800b786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78a:	4835      	ldr	r0, [pc, #212]	; (800b860 <_printf_i+0x244>)
 800b78c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	680e      	ldr	r6, [r1, #0]
 800b794:	061f      	lsls	r7, r3, #24
 800b796:	f856 5b04 	ldr.w	r5, [r6], #4
 800b79a:	600e      	str	r6, [r1, #0]
 800b79c:	d514      	bpl.n	800b7c8 <_printf_i+0x1ac>
 800b79e:	07d9      	lsls	r1, r3, #31
 800b7a0:	bf44      	itt	mi
 800b7a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b7a6:	6023      	strmi	r3, [r4, #0]
 800b7a8:	b91d      	cbnz	r5, 800b7b2 <_printf_i+0x196>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	f023 0320 	bic.w	r3, r3, #32
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	2310      	movs	r3, #16
 800b7b4:	e7b0      	b.n	800b718 <_printf_i+0xfc>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	f043 0320 	orr.w	r3, r3, #32
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	2378      	movs	r3, #120	; 0x78
 800b7c0:	4828      	ldr	r0, [pc, #160]	; (800b864 <_printf_i+0x248>)
 800b7c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7c6:	e7e3      	b.n	800b790 <_printf_i+0x174>
 800b7c8:	065e      	lsls	r6, r3, #25
 800b7ca:	bf48      	it	mi
 800b7cc:	b2ad      	uxthmi	r5, r5
 800b7ce:	e7e6      	b.n	800b79e <_printf_i+0x182>
 800b7d0:	4616      	mov	r6, r2
 800b7d2:	e7bb      	b.n	800b74c <_printf_i+0x130>
 800b7d4:	680b      	ldr	r3, [r1, #0]
 800b7d6:	6826      	ldr	r6, [r4, #0]
 800b7d8:	6960      	ldr	r0, [r4, #20]
 800b7da:	1d1d      	adds	r5, r3, #4
 800b7dc:	600d      	str	r5, [r1, #0]
 800b7de:	0635      	lsls	r5, r6, #24
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	d501      	bpl.n	800b7e8 <_printf_i+0x1cc>
 800b7e4:	6018      	str	r0, [r3, #0]
 800b7e6:	e002      	b.n	800b7ee <_printf_i+0x1d2>
 800b7e8:	0671      	lsls	r1, r6, #25
 800b7ea:	d5fb      	bpl.n	800b7e4 <_printf_i+0x1c8>
 800b7ec:	8018      	strh	r0, [r3, #0]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	6123      	str	r3, [r4, #16]
 800b7f2:	4616      	mov	r6, r2
 800b7f4:	e7ba      	b.n	800b76c <_printf_i+0x150>
 800b7f6:	680b      	ldr	r3, [r1, #0]
 800b7f8:	1d1a      	adds	r2, r3, #4
 800b7fa:	600a      	str	r2, [r1, #0]
 800b7fc:	681e      	ldr	r6, [r3, #0]
 800b7fe:	6862      	ldr	r2, [r4, #4]
 800b800:	2100      	movs	r1, #0
 800b802:	4630      	mov	r0, r6
 800b804:	f7f4 fcec 	bl	80001e0 <memchr>
 800b808:	b108      	cbz	r0, 800b80e <_printf_i+0x1f2>
 800b80a:	1b80      	subs	r0, r0, r6
 800b80c:	6060      	str	r0, [r4, #4]
 800b80e:	6863      	ldr	r3, [r4, #4]
 800b810:	6123      	str	r3, [r4, #16]
 800b812:	2300      	movs	r3, #0
 800b814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b818:	e7a8      	b.n	800b76c <_printf_i+0x150>
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	4632      	mov	r2, r6
 800b81e:	4649      	mov	r1, r9
 800b820:	4640      	mov	r0, r8
 800b822:	47d0      	blx	sl
 800b824:	3001      	adds	r0, #1
 800b826:	d0ab      	beq.n	800b780 <_printf_i+0x164>
 800b828:	6823      	ldr	r3, [r4, #0]
 800b82a:	079b      	lsls	r3, r3, #30
 800b82c:	d413      	bmi.n	800b856 <_printf_i+0x23a>
 800b82e:	68e0      	ldr	r0, [r4, #12]
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	4298      	cmp	r0, r3
 800b834:	bfb8      	it	lt
 800b836:	4618      	movlt	r0, r3
 800b838:	e7a4      	b.n	800b784 <_printf_i+0x168>
 800b83a:	2301      	movs	r3, #1
 800b83c:	4632      	mov	r2, r6
 800b83e:	4649      	mov	r1, r9
 800b840:	4640      	mov	r0, r8
 800b842:	47d0      	blx	sl
 800b844:	3001      	adds	r0, #1
 800b846:	d09b      	beq.n	800b780 <_printf_i+0x164>
 800b848:	3501      	adds	r5, #1
 800b84a:	68e3      	ldr	r3, [r4, #12]
 800b84c:	9903      	ldr	r1, [sp, #12]
 800b84e:	1a5b      	subs	r3, r3, r1
 800b850:	42ab      	cmp	r3, r5
 800b852:	dcf2      	bgt.n	800b83a <_printf_i+0x21e>
 800b854:	e7eb      	b.n	800b82e <_printf_i+0x212>
 800b856:	2500      	movs	r5, #0
 800b858:	f104 0619 	add.w	r6, r4, #25
 800b85c:	e7f5      	b.n	800b84a <_printf_i+0x22e>
 800b85e:	bf00      	nop
 800b860:	0800c409 	.word	0x0800c409
 800b864:	0800c41a 	.word	0x0800c41a

0800b868 <memmove>:
 800b868:	4288      	cmp	r0, r1
 800b86a:	b510      	push	{r4, lr}
 800b86c:	eb01 0402 	add.w	r4, r1, r2
 800b870:	d902      	bls.n	800b878 <memmove+0x10>
 800b872:	4284      	cmp	r4, r0
 800b874:	4623      	mov	r3, r4
 800b876:	d807      	bhi.n	800b888 <memmove+0x20>
 800b878:	1e43      	subs	r3, r0, #1
 800b87a:	42a1      	cmp	r1, r4
 800b87c:	d008      	beq.n	800b890 <memmove+0x28>
 800b87e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b882:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b886:	e7f8      	b.n	800b87a <memmove+0x12>
 800b888:	4402      	add	r2, r0
 800b88a:	4601      	mov	r1, r0
 800b88c:	428a      	cmp	r2, r1
 800b88e:	d100      	bne.n	800b892 <memmove+0x2a>
 800b890:	bd10      	pop	{r4, pc}
 800b892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b89a:	e7f7      	b.n	800b88c <memmove+0x24>

0800b89c <_free_r>:
 800b89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b89e:	2900      	cmp	r1, #0
 800b8a0:	d048      	beq.n	800b934 <_free_r+0x98>
 800b8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8a6:	9001      	str	r0, [sp, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b8ae:	bfb8      	it	lt
 800b8b0:	18e4      	addlt	r4, r4, r3
 800b8b2:	f000 f8d3 	bl	800ba5c <__malloc_lock>
 800b8b6:	4a20      	ldr	r2, [pc, #128]	; (800b938 <_free_r+0x9c>)
 800b8b8:	9801      	ldr	r0, [sp, #4]
 800b8ba:	6813      	ldr	r3, [r2, #0]
 800b8bc:	4615      	mov	r5, r2
 800b8be:	b933      	cbnz	r3, 800b8ce <_free_r+0x32>
 800b8c0:	6063      	str	r3, [r4, #4]
 800b8c2:	6014      	str	r4, [r2, #0]
 800b8c4:	b003      	add	sp, #12
 800b8c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8ca:	f000 b8cd 	b.w	800ba68 <__malloc_unlock>
 800b8ce:	42a3      	cmp	r3, r4
 800b8d0:	d90b      	bls.n	800b8ea <_free_r+0x4e>
 800b8d2:	6821      	ldr	r1, [r4, #0]
 800b8d4:	1862      	adds	r2, r4, r1
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	bf04      	itt	eq
 800b8da:	681a      	ldreq	r2, [r3, #0]
 800b8dc:	685b      	ldreq	r3, [r3, #4]
 800b8de:	6063      	str	r3, [r4, #4]
 800b8e0:	bf04      	itt	eq
 800b8e2:	1852      	addeq	r2, r2, r1
 800b8e4:	6022      	streq	r2, [r4, #0]
 800b8e6:	602c      	str	r4, [r5, #0]
 800b8e8:	e7ec      	b.n	800b8c4 <_free_r+0x28>
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	b10b      	cbz	r3, 800b8f4 <_free_r+0x58>
 800b8f0:	42a3      	cmp	r3, r4
 800b8f2:	d9fa      	bls.n	800b8ea <_free_r+0x4e>
 800b8f4:	6811      	ldr	r1, [r2, #0]
 800b8f6:	1855      	adds	r5, r2, r1
 800b8f8:	42a5      	cmp	r5, r4
 800b8fa:	d10b      	bne.n	800b914 <_free_r+0x78>
 800b8fc:	6824      	ldr	r4, [r4, #0]
 800b8fe:	4421      	add	r1, r4
 800b900:	1854      	adds	r4, r2, r1
 800b902:	42a3      	cmp	r3, r4
 800b904:	6011      	str	r1, [r2, #0]
 800b906:	d1dd      	bne.n	800b8c4 <_free_r+0x28>
 800b908:	681c      	ldr	r4, [r3, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	6053      	str	r3, [r2, #4]
 800b90e:	4421      	add	r1, r4
 800b910:	6011      	str	r1, [r2, #0]
 800b912:	e7d7      	b.n	800b8c4 <_free_r+0x28>
 800b914:	d902      	bls.n	800b91c <_free_r+0x80>
 800b916:	230c      	movs	r3, #12
 800b918:	6003      	str	r3, [r0, #0]
 800b91a:	e7d3      	b.n	800b8c4 <_free_r+0x28>
 800b91c:	6825      	ldr	r5, [r4, #0]
 800b91e:	1961      	adds	r1, r4, r5
 800b920:	428b      	cmp	r3, r1
 800b922:	bf04      	itt	eq
 800b924:	6819      	ldreq	r1, [r3, #0]
 800b926:	685b      	ldreq	r3, [r3, #4]
 800b928:	6063      	str	r3, [r4, #4]
 800b92a:	bf04      	itt	eq
 800b92c:	1949      	addeq	r1, r1, r5
 800b92e:	6021      	streq	r1, [r4, #0]
 800b930:	6054      	str	r4, [r2, #4]
 800b932:	e7c7      	b.n	800b8c4 <_free_r+0x28>
 800b934:	b003      	add	sp, #12
 800b936:	bd30      	pop	{r4, r5, pc}
 800b938:	200002e4 	.word	0x200002e4

0800b93c <_malloc_r>:
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93e:	1ccd      	adds	r5, r1, #3
 800b940:	f025 0503 	bic.w	r5, r5, #3
 800b944:	3508      	adds	r5, #8
 800b946:	2d0c      	cmp	r5, #12
 800b948:	bf38      	it	cc
 800b94a:	250c      	movcc	r5, #12
 800b94c:	2d00      	cmp	r5, #0
 800b94e:	4606      	mov	r6, r0
 800b950:	db01      	blt.n	800b956 <_malloc_r+0x1a>
 800b952:	42a9      	cmp	r1, r5
 800b954:	d903      	bls.n	800b95e <_malloc_r+0x22>
 800b956:	230c      	movs	r3, #12
 800b958:	6033      	str	r3, [r6, #0]
 800b95a:	2000      	movs	r0, #0
 800b95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b95e:	f000 f87d 	bl	800ba5c <__malloc_lock>
 800b962:	4921      	ldr	r1, [pc, #132]	; (800b9e8 <_malloc_r+0xac>)
 800b964:	680a      	ldr	r2, [r1, #0]
 800b966:	4614      	mov	r4, r2
 800b968:	b99c      	cbnz	r4, 800b992 <_malloc_r+0x56>
 800b96a:	4f20      	ldr	r7, [pc, #128]	; (800b9ec <_malloc_r+0xb0>)
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	b923      	cbnz	r3, 800b97a <_malloc_r+0x3e>
 800b970:	4621      	mov	r1, r4
 800b972:	4630      	mov	r0, r6
 800b974:	f000 f862 	bl	800ba3c <_sbrk_r>
 800b978:	6038      	str	r0, [r7, #0]
 800b97a:	4629      	mov	r1, r5
 800b97c:	4630      	mov	r0, r6
 800b97e:	f000 f85d 	bl	800ba3c <_sbrk_r>
 800b982:	1c43      	adds	r3, r0, #1
 800b984:	d123      	bne.n	800b9ce <_malloc_r+0x92>
 800b986:	230c      	movs	r3, #12
 800b988:	6033      	str	r3, [r6, #0]
 800b98a:	4630      	mov	r0, r6
 800b98c:	f000 f86c 	bl	800ba68 <__malloc_unlock>
 800b990:	e7e3      	b.n	800b95a <_malloc_r+0x1e>
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	1b5b      	subs	r3, r3, r5
 800b996:	d417      	bmi.n	800b9c8 <_malloc_r+0x8c>
 800b998:	2b0b      	cmp	r3, #11
 800b99a:	d903      	bls.n	800b9a4 <_malloc_r+0x68>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	441c      	add	r4, r3
 800b9a0:	6025      	str	r5, [r4, #0]
 800b9a2:	e004      	b.n	800b9ae <_malloc_r+0x72>
 800b9a4:	6863      	ldr	r3, [r4, #4]
 800b9a6:	42a2      	cmp	r2, r4
 800b9a8:	bf0c      	ite	eq
 800b9aa:	600b      	streq	r3, [r1, #0]
 800b9ac:	6053      	strne	r3, [r2, #4]
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f000 f85a 	bl	800ba68 <__malloc_unlock>
 800b9b4:	f104 000b 	add.w	r0, r4, #11
 800b9b8:	1d23      	adds	r3, r4, #4
 800b9ba:	f020 0007 	bic.w	r0, r0, #7
 800b9be:	1ac2      	subs	r2, r0, r3
 800b9c0:	d0cc      	beq.n	800b95c <_malloc_r+0x20>
 800b9c2:	1a1b      	subs	r3, r3, r0
 800b9c4:	50a3      	str	r3, [r4, r2]
 800b9c6:	e7c9      	b.n	800b95c <_malloc_r+0x20>
 800b9c8:	4622      	mov	r2, r4
 800b9ca:	6864      	ldr	r4, [r4, #4]
 800b9cc:	e7cc      	b.n	800b968 <_malloc_r+0x2c>
 800b9ce:	1cc4      	adds	r4, r0, #3
 800b9d0:	f024 0403 	bic.w	r4, r4, #3
 800b9d4:	42a0      	cmp	r0, r4
 800b9d6:	d0e3      	beq.n	800b9a0 <_malloc_r+0x64>
 800b9d8:	1a21      	subs	r1, r4, r0
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f000 f82e 	bl	800ba3c <_sbrk_r>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d1dd      	bne.n	800b9a0 <_malloc_r+0x64>
 800b9e4:	e7cf      	b.n	800b986 <_malloc_r+0x4a>
 800b9e6:	bf00      	nop
 800b9e8:	200002e4 	.word	0x200002e4
 800b9ec:	200002e8 	.word	0x200002e8

0800b9f0 <_realloc_r>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	4607      	mov	r7, r0
 800b9f4:	4614      	mov	r4, r2
 800b9f6:	460e      	mov	r6, r1
 800b9f8:	b921      	cbnz	r1, 800ba04 <_realloc_r+0x14>
 800b9fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b9fe:	4611      	mov	r1, r2
 800ba00:	f7ff bf9c 	b.w	800b93c <_malloc_r>
 800ba04:	b922      	cbnz	r2, 800ba10 <_realloc_r+0x20>
 800ba06:	f7ff ff49 	bl	800b89c <_free_r>
 800ba0a:	4625      	mov	r5, r4
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba10:	f000 f830 	bl	800ba74 <_malloc_usable_size_r>
 800ba14:	42a0      	cmp	r0, r4
 800ba16:	d20f      	bcs.n	800ba38 <_realloc_r+0x48>
 800ba18:	4621      	mov	r1, r4
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	f7ff ff8e 	bl	800b93c <_malloc_r>
 800ba20:	4605      	mov	r5, r0
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d0f2      	beq.n	800ba0c <_realloc_r+0x1c>
 800ba26:	4631      	mov	r1, r6
 800ba28:	4622      	mov	r2, r4
 800ba2a:	f7ff fbf7 	bl	800b21c <memcpy>
 800ba2e:	4631      	mov	r1, r6
 800ba30:	4638      	mov	r0, r7
 800ba32:	f7ff ff33 	bl	800b89c <_free_r>
 800ba36:	e7e9      	b.n	800ba0c <_realloc_r+0x1c>
 800ba38:	4635      	mov	r5, r6
 800ba3a:	e7e7      	b.n	800ba0c <_realloc_r+0x1c>

0800ba3c <_sbrk_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4d06      	ldr	r5, [pc, #24]	; (800ba58 <_sbrk_r+0x1c>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	4604      	mov	r4, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	f7f6 fa28 	bl	8001e9c <_sbrk>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_sbrk_r+0x1a>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_sbrk_r+0x1a>
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	20004974 	.word	0x20004974

0800ba5c <__malloc_lock>:
 800ba5c:	4801      	ldr	r0, [pc, #4]	; (800ba64 <__malloc_lock+0x8>)
 800ba5e:	f000 b811 	b.w	800ba84 <__retarget_lock_acquire_recursive>
 800ba62:	bf00      	nop
 800ba64:	2000497c 	.word	0x2000497c

0800ba68 <__malloc_unlock>:
 800ba68:	4801      	ldr	r0, [pc, #4]	; (800ba70 <__malloc_unlock+0x8>)
 800ba6a:	f000 b80c 	b.w	800ba86 <__retarget_lock_release_recursive>
 800ba6e:	bf00      	nop
 800ba70:	2000497c 	.word	0x2000497c

0800ba74 <_malloc_usable_size_r>:
 800ba74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba78:	1f18      	subs	r0, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bfbc      	itt	lt
 800ba7e:	580b      	ldrlt	r3, [r1, r0]
 800ba80:	18c0      	addlt	r0, r0, r3
 800ba82:	4770      	bx	lr

0800ba84 <__retarget_lock_acquire_recursive>:
 800ba84:	4770      	bx	lr

0800ba86 <__retarget_lock_release_recursive>:
 800ba86:	4770      	bx	lr

0800ba88 <_init>:
 800ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8a:	bf00      	nop
 800ba8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8e:	bc08      	pop	{r3}
 800ba90:	469e      	mov	lr, r3
 800ba92:	4770      	bx	lr

0800ba94 <_fini>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	bf00      	nop
 800ba98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9a:	bc08      	pop	{r3}
 800ba9c:	469e      	mov	lr, r3
 800ba9e:	4770      	bx	lr
