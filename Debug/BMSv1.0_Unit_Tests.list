
BMSv1.0_Unit_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000144c  08011730  08011730  00021730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b7c  08012b7c  000301fc  2**0
                  CONTENTS
  4 .ARM          00000000  08012b7c  08012b7c  000301fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012b7c  08012b7c  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b7c  08012b7c  00022b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b80  08012b80  00022b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08012b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301fc  2**0
                  CONTENTS
 10 .bss          00004b78  200001fc  200001fc  000301fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004d74  20004d74  000301fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001de95  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f7  00000000  00000000  0004e0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  000521b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001248  00000000  00000000  000535a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220ab  00000000  00000000  000547f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c41e  00000000  00000000  0007689b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bcfa2  00000000  00000000  00092cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014fc5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000649c  00000000  00000000  0014fcb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011718 	.word	0x08011718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08011718 	.word	0x08011718

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <driverHWSPI1Init>:

#include "driverHWSPI1.h"

SPI_HandleTypeDef driverHWSPI1Handle;

void driverHWSPI1Init(GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  driverHWSPI1Handle.Instance = SPI1;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <driverHWSPI1Init+0x8c>)
 8000c98:	601a      	str	r2, [r3, #0]
  driverHWSPI1Handle.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  driverHWSPI1Handle.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  driverHWSPI1Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000caa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cae:	60da      	str	r2, [r3, #12]
  driverHWSPI1Handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	611a      	str	r2, [r3, #16]
  driverHWSPI1Handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	615a      	str	r2, [r3, #20]
  driverHWSPI1Handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cc2:	619a      	str	r2, [r3, #24]
  driverHWSPI1Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cc6:	2238      	movs	r2, #56	; 0x38
 8000cc8:	61da      	str	r2, [r3, #28]
  driverHWSPI1Handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  driverHWSPI1Handle.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  driverHWSPI1Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  driverHWSPI1Handle.Init.CRCPolynomial = 7;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  driverHWSPI1Handle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  driverHWSPI1Handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&driverHWSPI1Handle) != HAL_OK)
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <driverHWSPI1Init+0x88>)
 8000cf0:	f007 f80c 	bl	8007d0c <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d000      	beq.n	8000cfc <driverHWSPI1Init+0x74>
  {
    while(true);
 8000cfa:	e7fe      	b.n	8000cfa <driverHWSPI1Init+0x72>
  }

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f005 f956 	bl	8005fb4 <HAL_GPIO_WritePin>
};
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000046c 	.word	0x2000046c
 8000d14:	40013000 	.word	0x40013000

08000d18 <driverHWSPI1Write>:

bool driverHWSPI1Write(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	461a      	mov	r2, r3
 8000d24:	460b      	mov	r3, r1
 8000d26:	72fb      	strb	r3, [r7, #11]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	813b      	strh	r3, [r7, #8]
	uint8_t *readBuffer;																																					// Make fake buffer holder
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state
	readBuffer = malloc(noOfBytesToWrite);																												// Make fake buffer for
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00d fe50 	bl	800e9d4 <malloc>
 8000d34:	4603      	mov	r3, r0
 8000d36:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);																      // Make CS low
 8000d38:	893b      	ldrh	r3, [r7, #8]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f005 f938 	bl	8005fb4 <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeBuffer,readBuffer,noOfBytesToWrite,driverHWSPI1DefaultTimeout);	// Write desired data to slave and store the received data in readBuffer
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2264      	movs	r2, #100	; 0x64
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	480f      	ldr	r0, [pc, #60]	; (8000d90 <driverHWSPI1Write+0x78>)
 8000d52:	f007 f9f4 	bl	800813e <HAL_SPI_TransmitReceive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	74fb      	strb	r3, [r7, #19]
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  																		// Wait until transmission is complete
 8000d5a:	bf00      	nop
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <driverHWSPI1Write+0x78>)
 8000d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d0f9      	beq.n	8000d5c <driverHWSPI1Write+0x44>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);																	      // Make CS High
 8000d68:	893b      	ldrh	r3, [r7, #8]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f005 f920 	bl	8005fb4 <HAL_GPIO_WritePin>

	free(readBuffer);																																							// Dump de fake buffer
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f00d fe35 	bl	800e9e4 <free>

	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
 8000d7a:	7cfb      	ldrb	r3, [r7, #19]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
};
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000046c 	.word	0x2000046c

08000d94 <driverHWSPI1WriteRead>:

bool driverHWSPI1WriteRead(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, uint8_t *readBuffer, uint8_t noOfBytesToRead, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	460b      	mov	r3, r1
 8000da2:	72fb      	strb	r3, [r7, #11]
 8000da4:	4613      	mov	r3, r2
 8000da6:	72bb      	strb	r3, [r7, #10]
	uint8_t *writeArray, *readArray;
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state

	writeArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 8000da8:	7afa      	ldrb	r2, [r7, #11]
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	4413      	add	r3, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00d fe10 	bl	800e9d4 <malloc>
 8000db4:	4603      	mov	r3, r0
 8000db6:	61fb      	str	r3, [r7, #28]
	readArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 8000db8:	7afa      	ldrb	r2, [r7, #11]
 8000dba:	7abb      	ldrb	r3, [r7, #10]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f00d fe08 	bl	800e9d4 <malloc>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	61bb      	str	r3, [r7, #24]

	memset(writeArray,0xFF,noOfBytesToWrite+noOfBytesToRead);
 8000dc8:	7afa      	ldrb	r2, [r7, #11]
 8000dca:	7abb      	ldrb	r3, [r7, #10]
 8000dcc:	4413      	add	r3, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	21ff      	movs	r1, #255	; 0xff
 8000dd2:	69f8      	ldr	r0, [r7, #28]
 8000dd4:	f00d fe1c 	bl	800ea10 <memset>
	memcpy(writeArray,writeBuffer,noOfBytesToWrite);
 8000dd8:	7afb      	ldrb	r3, [r7, #11]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68f9      	ldr	r1, [r7, #12]
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f00d fe08 	bl	800e9f4 <memcpy>

	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);
 8000de4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dec:	f005 f8e2 	bl	8005fb4 <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeArray,readArray,noOfBytesToWrite+noOfBytesToRead,driverHWSPI1DefaultTimeout);
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	7abb      	ldrb	r3, [r7, #10]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2264      	movs	r2, #100	; 0x64
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	69f9      	ldr	r1, [r7, #28]
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <driverHWSPI1WriteRead+0xc4>)
 8000e06:	f007 f99a 	bl	800813e <HAL_SPI_TransmitReceive>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	75fb      	strb	r3, [r7, #23]
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 8000e0e:	bf00      	nop
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <driverHWSPI1WriteRead+0xc4>)
 8000e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d0f9      	beq.n	8000e10 <driverHWSPI1WriteRead+0x7c>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 8000e1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4619      	mov	r1, r3
 8000e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e24:	f005 f8c6 	bl	8005fb4 <HAL_GPIO_WritePin>

	memcpy(readBuffer,readArray+noOfBytesToWrite,noOfBytesToRead);
 8000e28:	7afb      	ldrb	r3, [r7, #11]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	7aba      	ldrb	r2, [r7, #10]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f00d fdde 	bl	800e9f4 <memcpy>

	free(writeArray);
 8000e38:	69f8      	ldr	r0, [r7, #28]
 8000e3a:	f00d fdd3 	bl	800e9e4 <free>
	free(readArray);
 8000e3e:	69b8      	ldr	r0, [r7, #24]
 8000e40:	f00d fdd0 	bl	800e9e4 <free>

	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
};
 8000e50:	4618      	mov	r0, r3
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000046c 	.word	0x2000046c

08000e5c <driverSWLTC6804DelayMS>:
uint8_t driverSWLTC6804MaxNoOfCellPerModule = 0;
uint8_t driverSWLTC6804MaxNoOfTempSensorPerModule = 0;

driverLTC6804ConfigStructTypedef driverSWLTC6804ConfigStruct;

void driverSWLTC6804DelayMS(uint32_t delayMS) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = HAL_GetTick();
 8000e64:	f003 ff10 	bl	8004c88 <HAL_GetTick>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60fb      	str	r3, [r7, #12]
	while(!modDelayTick1ms(&currentTick,delayMS)){};
 8000e6c:	bf00      	nop
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fbbc 	bl	80045f2 <modDelayTick1ms>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f6      	beq.n	8000e6e <driverSWLTC6804DelayMS+0x12>
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <driverSWLTC6804Init>:

void driverSWLTC6804Init(driverLTC6804ConfigStructTypedef configStruct, uint8_t totalNumberOfLTCs, uint8_t noOfCellPerModule, uint8_t noOfTempSensorPerModule, uint8_t cellMonitorType) {
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e9c:	466b      	mov	r3, sp
 8000e9e:	461e      	mov	r6, r3
	driverSWLTC6804ConfigStruct = configStruct;
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <driverSWLTC6804Init+0x110>)
 8000ea2:	461d      	mov	r5, r3
 8000ea4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eb0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	driverSWLTC6804TotalNumberOfICs = totalNumberOfLTCs;
 8000eb4:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000eb6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000eba:	7013      	strb	r3, [r2, #0]
	driverSWLTC6804MaxNoOfCellPerModule = noOfCellPerModule;
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <driverSWLTC6804Init+0x118>)
 8000ebe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000ec2:	7013      	strb	r3, [r2, #0]
	driverSWLTC6804MaxNoOfTempSensorPerModule = noOfTempSensorPerModule;
 8000ec4:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <driverSWLTC6804Init+0x11c>)
 8000ec6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000eca:	7013      	strb	r3, [r2, #0]

	uint8_t rxConfig [driverSWLTC6804TotalNumberOfICs][8];
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000ece:	781c      	ldrb	r4, [r3, #0]
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	b2e0      	uxtb	r0, r4
 8000ed8:	f04f 0100 	mov.w	r1, #0
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	018b      	lsls	r3, r1, #6
 8000ee6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000eea:	0182      	lsls	r2, r0, #6
 8000eec:	b2e0      	uxtb	r0, r4
 8000eee:	f04f 0100 	mov.w	r1, #0
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	018b      	lsls	r3, r1, #6
 8000efc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000f00:	0182      	lsls	r2, r0, #6
 8000f02:	4623      	mov	r3, r4
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	3307      	adds	r3, #7
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f10:	466b      	mov	r3, sp
 8000f12:	3300      	adds	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
	uint8_t LTCScanCount = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73bb      	strb	r3, [r7, #14]
	int8_t returnPEC = -1;
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	73fb      	strb	r3, [r7, #15]

	driverHWSPI1Init(GPIOA,GPIO_PIN_4);
 8000f1e:	2110      	movs	r1, #16
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f7ff feb0 	bl	8000c88 <driverHWSPI1Init>
	driverSWLTC6804WakeIC();
 8000f28:	f001 f9c9 	bl	80022be <driverSWLTC6804WakeIC>

	while((LTCScanCount < 5) && (returnPEC == -1)){
 8000f2c:	e025      	b.n	8000f7a <driverSWLTC6804Init+0xee>
	  returnPEC =	driverSWLTC6804ReadConfigRegister(driverSWLTC6804TotalNumberOfICs,rxConfig);
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f926 	bl	8002188 <driverSWLTC6804ReadConfigRegister>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
		driverSWLTC6804WakeIC();
 8000f40:	f001 f9bd 	bl	80022be <driverSWLTC6804WakeIC>
		driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,0,false);
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fdd7 	bl	8001b00 <driverSWLTC6804WriteConfigRegister>
		if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8000f52:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d003      	beq.n	8000f62 <driverSWLTC6804Init+0xd6>
 8000f5a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d106      	bne.n	8000f70 <driverSWLTC6804Init+0xe4>
			driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,0,false);
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <driverSWLTC6804Init+0x114>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 ff6a 	bl	8001e44 <driverSWLTC6804WriteConfigRegisterB>
	}
		driverSWLTC6804WakeIC();
 8000f70:	f001 f9a5 	bl	80022be <driverSWLTC6804WakeIC>
		LTCScanCount++;
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73bb      	strb	r3, [r7, #14]
	while((LTCScanCount < 5) && (returnPEC == -1)){
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d804      	bhi.n	8000f8a <driverSWLTC6804Init+0xfe>
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d0d1      	beq.n	8000f2e <driverSWLTC6804Init+0xa2>
 8000f8a:	46b5      	mov	sp, r6
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000f96:	b004      	add	sp, #16
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200004d0 	.word	0x200004d0
 8000fa0:	20000218 	.word	0x20000218
 8000fa4:	20000219 	.word	0x20000219
 8000fa8:	2000021a 	.word	0x2000021a

08000fac <driverSWLTC6804ResetCellVoltageRegisters>:

void driverSWLTC6804ResetCellVoltageRegisters(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = 0x07;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	703b      	strb	r3, [r7, #0]
  cmd[1] = 0x11;
 8000fb6:	2311      	movs	r3, #17
 8000fb8:	707b      	strb	r3, [r7, #1]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f001 f8ae 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	80fb      	strh	r3, [r7, #6]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec );
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	70fb      	strb	r3, [r7, #3]

	driverSWLTC6804WakeIC();
 8000fd8:	f001 f971 	bl	80022be <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2104      	movs	r1, #4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f942 	bl	800226a <driverSWLTC6804Write>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <driverSWLTC6804ResetAuxRegisters>:

void driverSWLTC6804ResetAuxRegisters(void) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = 0x07;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	703b      	strb	r3, [r7, #0]
  cmd[1] = 0x12;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	707b      	strb	r3, [r7, #1]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	2002      	movs	r0, #2
 8001002:	f001 f88d 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec );
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	70fb      	strb	r3, [r7, #3]

	driverSWLTC6804WakeIC();
 800101a:	f001 f950 	bl	80022be <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 800101e:	463b      	mov	r3, r7
 8001020:	2104      	movs	r1, #4
 8001022:	4618      	mov	r0, r3
 8001024:	f001 f921 	bl	800226a <driverSWLTC6804Write>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <driverSWLTC6804StartCellVoltageConversion>:

  driverSWLTC6804WakeIC();
  driverSWLTC6804Write(cmd,4);
}

void driverSWLTC6804StartCellVoltageConversion(uint8_t MD,uint8_t DCP, uint8_t CH) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	460b      	mov	r3, r1
 800103c:	71bb      	strb	r3, [r7, #6]
 800103e:	4613      	mov	r3, r2
 8001040:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[4];
  uint16_t cmd_pec;
	uint8_t ADCV[2]; //!< Cell Voltage conversion command.

  ADCV[0] = ((MD & 0x02) >> 1) + 0x02;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	105b      	asrs	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	3302      	adds	r3, #2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	733b      	strb	r3, [r7, #12]
  ADCV[1] = ((MD & 0x01) << 7) + 0x60 + (DCP<<4) + CH;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	01db      	lsls	r3, r3, #7
 8001058:	b2da      	uxtb	r2, r3
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4413      	add	r3, r2
 8001062:	b2da      	uxtb	r2, r3
 8001064:	797b      	ldrb	r3, [r7, #5]
 8001066:	4413      	add	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	3360      	adds	r3, #96	; 0x60
 800106c:	b2db      	uxtb	r3, r3
 800106e:	737b      	strb	r3, [r7, #13]

  cmd[0] = ADCV[0];
 8001070:	7b3b      	ldrb	r3, [r7, #12]
 8001072:	743b      	strb	r3, [r7, #16]
  cmd[1] = ADCV[1];
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	747b      	strb	r3, [r7, #17]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADCV);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	2002      	movs	r0, #2
 8001080:	f001 f84e 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8001084:	4603      	mov	r3, r0
 8001086:	82fb      	strh	r3, [r7, #22]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001088:	8afb      	ldrh	r3, [r7, #22]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (uint8_t)(cmd_pec);
 8001092:	8afb      	ldrh	r3, [r7, #22]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	74fb      	strb	r3, [r7, #19]

	driverSWLTC6804WakeIC();
 8001098:	f001 f911 	bl	80022be <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	2104      	movs	r1, #4
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 f8e1 	bl	800226a <driverSWLTC6804Write>
}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <driverSWLTC6804StartAuxVoltageConversion>:

	driverSWLTC6804WakeIC();
  driverSWLTC6804Write(cmd,4);
}

void driverSWLTC6804StartAuxVoltageConversion(uint8_t MD, uint8_t CHG) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint16_t cmd_pec;
	uint8_t ADAX[2]; //!< GPIO conversion command.

  ADAX[0] = ((MD & 0x02) >> 1) + 0x04;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	105b      	asrs	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3304      	adds	r3, #4
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	733b      	strb	r3, [r7, #12]
  ADAX[1] = ((MD & 0x01) << 7) + 0x60 + CHG ;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	01db      	lsls	r3, r3, #7
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	4413      	add	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3360      	adds	r3, #96	; 0x60
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	737b      	strb	r3, [r7, #13]

  cmd[0] = ADAX[0];
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	743b      	strb	r3, [r7, #16]
  cmd[1] = ADAX[1];
 80010e8:	7b7b      	ldrb	r3, [r7, #13]
 80010ea:	747b      	strb	r3, [r7, #17]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADAX);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	2002      	movs	r0, #2
 80010f4:	f001 f814 	bl	8002120 <driverSWLTC6804CalcPEC15>
 80010f8:	4603      	mov	r3, r0
 80010fa:	82fb      	strh	r3, [r7, #22]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80010fc:	8afb      	ldrh	r3, [r7, #22]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (uint8_t)(cmd_pec);
 8001106:	8afb      	ldrh	r3, [r7, #22]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	74fb      	strb	r3, [r7, #19]

	driverSWLTC6804WakeIC();
 800110c:	f001 f8d7 	bl	80022be <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f001 f8a7 	bl	800226a <driverSWLTC6804Write>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <driverSWLTC6804ReadCellVoltagesArray>:


bool driverSWLTC6804ReadCellVoltagesArray(float cellVoltagesArray[][driverSWLTC6804MaxNoOfCellPerModule]) {
 8001124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001128:	b089      	sub	sp, #36	; 0x24
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 8001130:	781e      	ldrb	r6, [r3, #0]
 8001132:	4633      	mov	r3, r6
 8001134:	3b01      	subs	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	b2f0      	uxtb	r0, r6
 800113a:	f04f 0100 	mov.w	r1, #0
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	014b      	lsls	r3, r1, #5
 8001148:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800114c:	0142      	lsls	r2, r0, #5
 800114e:	466b      	mov	r3, sp
 8001150:	4699      	mov	r9, r3
	bool dataValid = true;
 8001152:	2301      	movs	r3, #1
 8001154:	767b      	strb	r3, [r7, #25]
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule];
 8001156:	4b5a      	ldr	r3, [pc, #360]	; (80012c0 <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 8001158:	781c      	ldrb	r4, [r3, #0]
 800115a:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 800115c:	781d      	ldrb	r5, [r3, #0]
 800115e:	4623      	mov	r3, r4
 8001160:	3b01      	subs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	b2e0      	uxtb	r0, r4
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	010b      	lsls	r3, r1, #4
 8001174:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001178:	0102      	lsls	r2, r0, #4
 800117a:	4623      	mov	r3, r4
 800117c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001180:	462b      	mov	r3, r5
 8001182:	3b01      	subs	r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	b2e0      	uxtb	r0, r4
 8001188:	f04f 0100 	mov.w	r1, #0
 800118c:	b2ea      	uxtb	r2, r5
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	fb02 fe01 	mul.w	lr, r2, r1
 8001196:	fb00 fc03 	mul.w	ip, r0, r3
 800119a:	44f4      	add	ip, lr
 800119c:	fba0 2302 	umull	r2, r3, r0, r2
 80011a0:	eb0c 0103 	add.w	r1, ip, r3
 80011a4:	460b      	mov	r3, r1
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	f04f 0100 	mov.w	r1, #0
 80011ae:	0119      	lsls	r1, r3, #4
 80011b0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80011b4:	0110      	lsls	r0, r2, #4
 80011b6:	b2e0      	uxtb	r0, r4
 80011b8:	f04f 0100 	mov.w	r1, #0
 80011bc:	b2ea      	uxtb	r2, r5
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	fb02 fe01 	mul.w	lr, r2, r1
 80011c6:	fb00 fc03 	mul.w	ip, r0, r3
 80011ca:	44f4      	add	ip, lr
 80011cc:	fba0 2302 	umull	r2, r3, r0, r2
 80011d0:	eb0c 0103 	add.w	r1, ip, r3
 80011d4:	460b      	mov	r3, r1
 80011d6:	f04f 0000 	mov.w	r0, #0
 80011da:	f04f 0100 	mov.w	r1, #0
 80011de:	0119      	lsls	r1, r3, #4
 80011e0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80011e4:	0110      	lsls	r0, r2, #4
 80011e6:	4623      	mov	r3, r4
 80011e8:	462a      	mov	r2, r5
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	3307      	adds	r3, #7
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	ebad 0d03 	sub.w	sp, sp, r3
 80011fa:	466b      	mov	r3, sp
 80011fc:	3301      	adds	r3, #1
 80011fe:	085b      	lsrs	r3, r3, #1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]

	driverSWLTC6804ReadCellVoltageRegisters(CELL_CH_ALL,driverSWLTC6804TotalNumberOfICs,cellVoltageArrayCodes);
 8001204:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4619      	mov	r1, r3
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f85d 	bl	80012cc <driverSWLTC6804ReadCellVoltageRegisters>

  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 8001212:	2300      	movs	r3, #0
 8001214:	76bb      	strb	r3, [r7, #26]
 8001216:	e047      	b.n	80012a8 <driverSWLTC6804ReadCellVoltagesArray+0x184>
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 8001218:	2300      	movs	r3, #0
 800121a:	76fb      	strb	r3, [r7, #27]
 800121c:	e03c      	b.n	8001298 <driverSWLTC6804ReadCellVoltagesArray+0x174>
			if(cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f < 10.0f)
 800121e:	ea4f 0158 	mov.w	r1, r8, lsr #1
 8001222:	7eb8      	ldrb	r0, [r7, #26]
 8001224:	7efa      	ldrb	r2, [r7, #27]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	fb00 f101 	mul.w	r1, r0, r1
 800122c:	440a      	add	r2, r1
 800122e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80012c8 <driverSWLTC6804ReadCellVoltagesArray+0x1a4>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001242:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d51e      	bpl.n	800128e <driverSWLTC6804ReadCellVoltagesArray+0x16a>
			  cellVoltagesArray[modulePointer][cellPointer] = cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f;
 8001250:	ea4f 0158 	mov.w	r1, r8, lsr #1
 8001254:	7eb8      	ldrb	r0, [r7, #26]
 8001256:	7efa      	ldrb	r2, [r7, #27]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	fb00 f101 	mul.w	r1, r0, r1
 800125e:	440a      	add	r2, r1
 8001260:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	7ebb      	ldrb	r3, [r7, #26]
 800126e:	4632      	mov	r2, r6
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	441a      	add	r2, r3
 800127a:	7efb      	ldrb	r3, [r7, #27]
 800127c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012c8 <driverSWLTC6804ReadCellVoltagesArray+0x1a4>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	edc3 7a00 	vstr	s15, [r3]
 800128c:	e001      	b.n	8001292 <driverSWLTC6804ReadCellVoltagesArray+0x16e>
			else
				dataValid = false;
 800128e:	2300      	movs	r3, #0
 8001290:	767b      	strb	r3, [r7, #25]
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 8001292:	7efb      	ldrb	r3, [r7, #27]
 8001294:	3301      	adds	r3, #1
 8001296:	76fb      	strb	r3, [r7, #27]
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <driverSWLTC6804ReadCellVoltagesArray+0x19c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	7efa      	ldrb	r2, [r7, #27]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3bd      	bcc.n	800121e <driverSWLTC6804ReadCellVoltagesArray+0xfa>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 80012a2:	7ebb      	ldrb	r3, [r7, #26]
 80012a4:	3301      	adds	r3, #1
 80012a6:	76bb      	strb	r3, [r7, #26]
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <driverSWLTC6804ReadCellVoltagesArray+0x1a0>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	7eba      	ldrb	r2, [r7, #26]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d3b2      	bcc.n	8001218 <driverSWLTC6804ReadCellVoltagesArray+0xf4>
		}
  }

	return dataValid;
 80012b2:	7e7b      	ldrb	r3, [r7, #25]
 80012b4:	46cd      	mov	sp, r9
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012c0:	20000219 	.word	0x20000219
 80012c4:	20000218 	.word	0x20000218
 80012c8:	38d1b717 	.word	0x38d1b717

080012cc <driverSWLTC6804ReadCellVoltageRegisters>:

uint8_t driverSWLTC6804ReadCellVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t cell_codes[][driverSWLTC6804MaxNoOfCellPerModule]) {
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	460b      	mov	r3, r1
 80012da:	71bb      	strb	r3, [r7, #6]
 80012dc:	4b9d      	ldr	r3, [pc, #628]	; (8001554 <driverSWLTC6804ReadCellVoltageRegisters+0x288>)
 80012de:	781c      	ldrb	r4, [r3, #0]
 80012e0:	4623      	mov	r3, r4
 80012e2:	3b01      	subs	r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	b2e0      	uxtb	r0, r4
 80012e8:	f04f 0100 	mov.w	r1, #0
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	010b      	lsls	r3, r1, #4
 80012f6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80012fa:	0102      	lsls	r2, r0, #4
  const uint8_t NUM_RX_BYT = 8;
 80012fc:	2308      	movs	r3, #8
 80012fe:	76fb      	strb	r3, [r7, #27]
  const uint8_t BYT_IN_REG = 6;
 8001300:	2306      	movs	r3, #6
 8001302:	76bb      	strb	r3, [r7, #26]
  const uint8_t CELL_IN_REG = 3;
 8001304:	2303      	movs	r3, #3
 8001306:	767b      	strb	r3, [r7, #25]

  uint8_t  *cell_data;
  int8_t  pec_error = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t parsed_cell;
  uint16_t received_pec;
  uint16_t data_pec;
  uint8_t data_counter=0; //data counter
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001314:	7efb      	ldrb	r3, [r7, #27]
 8001316:	79ba      	ldrb	r2, [r7, #6]
 8001318:	fb02 f303 	mul.w	r3, r2, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f00d fb59 	bl	800e9d4 <malloc>
 8001322:	4603      	mov	r3, r0
 8001324:	617b      	str	r3, [r7, #20]

  if (reg == 0) {
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f040 8092 	bne.w	8001452 <driverSWLTC6804ReadCellVoltageRegisters+0x186>
    for(uint8_t cell_reg = 1; cell_reg<((driverSWLTC6804MaxNoOfCellPerModule/3)+1); cell_reg++) {        			 			                 //executes once for each of the LTC6804 cell voltage registers
 800132e:	2301      	movs	r3, #1
 8001330:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001334:	e080      	b.n	8001438 <driverSWLTC6804ReadCellVoltageRegisters+0x16c>
      data_counter = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      driverSWLTC6804ReadCellVoltageGroups(cell_reg, total_ic,cell_data );								                     //Reads a single Cell voltage register
 800133c:	79b9      	ldrb	r1, [r7, #6]
 800133e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f909 	bl	800155c <driverSWLTC6804ReadCellVoltageGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001350:	e068      	b.n	8001424 <driverSWLTC6804ReadCellVoltageRegisters+0x158>
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001358:	e02e      	b.n	80013b8 <driverSWLTC6804ReadCellVoltageRegisters+0xec>
          parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);      //Each cell code is received as two bytes and is combined to create the parsed cell voltage code
 800135a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b29a      	uxth	r2, r3
 8001366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800136a:	3301      	adds	r3, #1
 800136c:	6979      	ldr	r1, [r7, #20]
 800136e:	440b      	add	r3, r1
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b29b      	uxth	r3, r3
 8001378:	4413      	add	r3, r2
 800137a:	81fb      	strh	r3, [r7, #14]
          cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 800137c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001380:	4622      	mov	r2, r4
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	4413      	add	r3, r2
 800138c:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001390:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001394:	3a01      	subs	r2, #1
 8001396:	7e78      	ldrb	r0, [r7, #25]
 8001398:	fb00 f202 	mul.w	r2, r0, r2
 800139c:	440a      	add	r2, r1
 800139e:	89f9      	ldrh	r1, [r7, #14]
 80013a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          data_counter = data_counter + 2;											                           //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 80013a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013a8:	3302      	adds	r3, #2
 80013aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 80013ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013b2:	3301      	adds	r3, #1
 80013b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80013b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013bc:	7e7b      	ldrb	r3, [r7, #25]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d3cb      	bcc.n	800135a <driverSWLTC6804ReadCellVoltageRegisters+0x8e>
        }
        received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 80013c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013d6:	3301      	adds	r3, #1
 80013d8:	6979      	ldr	r1, [r7, #20]
 80013da:	440b      	add	r3, r1
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	827b      	strh	r3, [r7, #18]
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80013e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013e8:	7efa      	ldrb	r2, [r7, #27]
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	441a      	add	r2, r3
 80013f4:	7ebb      	ldrb	r3, [r7, #26]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fe91 	bl	8002120 <driverSWLTC6804CalcPEC15>
 80013fe:	4603      	mov	r3, r0
 8001400:	823b      	strh	r3, [r7, #16]
        if(received_pec != data_pec) {
 8001402:	8a7a      	ldrh	r2, [r7, #18]
 8001404:	8a3b      	ldrh	r3, [r7, #16]
 8001406:	429a      	cmp	r2, r3
 8001408:	d002      	beq.n	8001410 <driverSWLTC6804ReadCellVoltageRegisters+0x144>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
        data_counter=data_counter+2;												                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs cell voltage data
 8001410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001414:	3302      	adds	r3, #2
 8001416:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 800141a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800141e:	3301      	adds	r3, #1
 8001420:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001424:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	429a      	cmp	r2, r3
 800142c:	d391      	bcc.n	8001352 <driverSWLTC6804ReadCellVoltageRegisters+0x86>
    for(uint8_t cell_reg = 1; cell_reg<((driverSWLTC6804MaxNoOfCellPerModule/3)+1); cell_reg++) {        			 			                 //executes once for each of the LTC6804 cell voltage registers
 800142e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001432:	3301      	adds	r3, #1
 8001434:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <driverSWLTC6804ReadCellVoltageRegisters+0x288>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4a46      	ldr	r2, [pc, #280]	; (8001558 <driverSWLTC6804ReadCellVoltageRegisters+0x28c>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800144a:	429a      	cmp	r2, r3
 800144c:	f67f af73 	bls.w	8001336 <driverSWLTC6804ReadCellVoltageRegisters+0x6a>
 8001450:	e076      	b.n	8001540 <driverSWLTC6804ReadCellVoltageRegisters+0x274>
      }
    }
  }else{
    driverSWLTC6804ReadCellVoltageGroups(reg, total_ic,cell_data);
 8001452:	79b9      	ldrb	r1, [r7, #6]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f87f 	bl	800155c <driverSWLTC6804ReadCellVoltageGroups>
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001464:	e067      	b.n	8001536 <driverSWLTC6804ReadCellVoltageRegisters+0x26a>
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800146c:	e02d      	b.n	80014ca <driverSWLTC6804ReadCellVoltageRegisters+0x1fe>
			  parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);            //Each cell code is received as two bytes and is combined to create the parsed cell voltage code
 800146e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b29a      	uxth	r2, r3
 800147a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147e:	3301      	adds	r3, #1
 8001480:	6979      	ldr	r1, [r7, #20]
 8001482:	440b      	add	r3, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b29b      	uxth	r3, r3
 800148c:	4413      	add	r3, r2
 800148e:	81fb      	strh	r3, [r7, #14]
			  cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 8001490:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001494:	4622      	mov	r2, r4
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	3a01      	subs	r2, #1
 80014a8:	7e78      	ldrb	r0, [r7, #25]
 80014aa:	fb00 f202 	mul.w	r2, r0, r2
 80014ae:	440a      	add	r2, r1
 80014b0:	89f9      	ldrh	r1, [r7, #14]
 80014b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  data_counter= data_counter + 2;     									                             //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 80014b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014ba:	3302      	adds	r3, #2
 80014bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register
 80014c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80014c4:	3301      	adds	r3, #1
 80014c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80014ca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80014ce:	7e7b      	ldrb	r3, [r7, #25]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3cc      	bcc.n	800146e <driverSWLTC6804ReadCellVoltageRegisters+0x1a2>
		  }
	    received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 80014d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014e8:	3301      	adds	r3, #1
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	440b      	add	r3, r1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	827b      	strh	r3, [r7, #18]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80014f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014fa:	7efa      	ldrb	r2, [r7, #27]
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	461a      	mov	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	441a      	add	r2, r3
 8001506:	7ebb      	ldrb	r3, [r7, #26]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fe08 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8001510:	4603      	mov	r3, r0
 8001512:	823b      	strh	r3, [r7, #16]

			if(received_pec != data_pec) {
 8001514:	8a7a      	ldrh	r2, [r7, #18]
 8001516:	8a3b      	ldrh	r3, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d002      	beq.n	8001522 <driverSWLTC6804ReadCellVoltageRegisters+0x256>
			  pec_error = -1;															                                       //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 800151c:	23ff      	movs	r3, #255	; 0xff
 800151e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  }
		  data_counter= data_counter + 2; 											                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs cell voltage data
 8001522:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001526:	3302      	adds	r3, #2
 8001528:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 800152c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001530:	3301      	adds	r3, #1
 8001532:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001536:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	429a      	cmp	r2, r3
 800153e:	d392      	bcc.n	8001466 <driverSWLTC6804ReadCellVoltageRegisters+0x19a>
	  }
  }

  free(cell_data);
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f00d fa4f 	bl	800e9e4 <free>
  return(pec_error);
 8001546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800154a:	4618      	mov	r0, r3
 800154c:	372c      	adds	r7, #44	; 0x2c
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	bf00      	nop
 8001554:	20000219 	.word	0x20000219
 8001558:	aaaaaaab 	.word	0xaaaaaaab

0800155c <driverSWLTC6804ReadCellVoltageGroups>:

void driverSWLTC6804ReadCellVoltageGroups(uint8_t reg, uint8_t total_ic, uint8_t *data ) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	603a      	str	r2, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	460b      	mov	r3, r1
 800156a:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 800156c:	2308      	movs	r3, #8
 800156e:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1) {      //1: RDCVA
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d104      	bne.n	8001580 <driverSWLTC6804ReadCellVoltageGroups+0x24>
    cmd[1] = 0x04;
 8001576:	2304      	movs	r3, #4
 8001578:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800157a:	2300      	movs	r3, #0
 800157c:	723b      	strb	r3, [r7, #8]
 800157e:	e026      	b.n	80015ce <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 2) { //2: RDCVB
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d104      	bne.n	8001590 <driverSWLTC6804ReadCellVoltageGroups+0x34>
    cmd[1] = 0x06;
 8001586:	2306      	movs	r3, #6
 8001588:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	723b      	strb	r3, [r7, #8]
 800158e:	e01e      	b.n	80015ce <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 3) { //3: RDCVC
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d104      	bne.n	80015a0 <driverSWLTC6804ReadCellVoltageGroups+0x44>
    cmd[1] = 0x08;
 8001596:	2308      	movs	r3, #8
 8001598:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800159a:	2300      	movs	r3, #0
 800159c:	723b      	strb	r3, [r7, #8]
 800159e:	e016      	b.n	80015ce <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 4) { //4: RDCVD
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d104      	bne.n	80015b0 <driverSWLTC6804ReadCellVoltageGroups+0x54>
    cmd[1] = 0x0A;
 80015a6:	230a      	movs	r3, #10
 80015a8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	723b      	strb	r3, [r7, #8]
 80015ae:	e00e      	b.n	80015ce <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 5) { //5: RDCVE - LTC6812 & LTC6813 only
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d104      	bne.n	80015c0 <driverSWLTC6804ReadCellVoltageGroups+0x64>
    cmd[1] = 0x09;
 80015b6:	2309      	movs	r3, #9
 80015b8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	723b      	strb	r3, [r7, #8]
 80015be:	e006      	b.n	80015ce <driverSWLTC6804ReadCellVoltageGroups+0x72>
  }else if(reg == 6) { //6: RDCVF -  LTC6813 only
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d103      	bne.n	80015ce <driverSWLTC6804ReadCellVoltageGroups+0x72>
    cmd[1] = 0x0B;
 80015c6:	230b      	movs	r3, #11
 80015c8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015ca:	2300      	movs	r3, #0
 80015cc:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	2002      	movs	r0, #2
 80015d6:	f000 fda3 	bl	8002120 <driverSWLTC6804CalcPEC15>
 80015da:	4603      	mov	r3, r0
 80015dc:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80015de:	89bb      	ldrh	r3, [r7, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 80015e8:	89bb      	ldrh	r3, [r7, #12]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	72fb      	strb	r3, [r7, #11]

  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 80015ee:	f000 fe66 	bl	80022be <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	fb12 f303 	smulbb	r3, r2, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f107 0008 	add.w	r0, r7, #8
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	2104      	movs	r1, #4
 8001604:	f000 fe42 	bl	800228c <driverSWLTC6804WriteRead>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <driverSWLTC6804ReadAuxVoltagesArray>:
  cmd[3] = (uint8_t)(cmd_pec);

	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
}

bool driverSWLTC6804ReadAuxVoltagesArray(float auxVoltagesArray[][driverSWLTC6804MaxNoOfTempSensorPerModule],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor,float ntcNominalTemp) {
 8001610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001614:	b08d      	sub	sp, #52	; 0x34
 8001616:	af00      	add	r7, sp, #0
 8001618:	6178      	str	r0, [r7, #20]
 800161a:	6139      	str	r1, [r7, #16]
 800161c:	60fa      	str	r2, [r7, #12]
 800161e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001622:	817b      	strh	r3, [r7, #10]
 8001624:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <driverSWLTC6804ReadAuxVoltagesArray+0x1cc>)
 8001626:	781e      	ldrb	r6, [r3, #0]
 8001628:	4633      	mov	r3, r6
 800162a:	3b01      	subs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162e:	b2f0      	uxtb	r0, r6
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	014b      	lsls	r3, r1, #5
 800163e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001642:	0142      	lsls	r2, r0, #5
 8001644:	466b      	mov	r3, sp
 8001646:	4699      	mov	r9, r3
	bool dataValid = true;
 8001648:	2301      	movs	r3, #1
 800164a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint16_t auxVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfTempSensorPerModule];
 800164e:	4b63      	ldr	r3, [pc, #396]	; (80017dc <driverSWLTC6804ReadAuxVoltagesArray+0x1cc>)
 8001650:	781c      	ldrb	r4, [r3, #0]
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <driverSWLTC6804ReadAuxVoltagesArray+0x1d0>)
 8001654:	781d      	ldrb	r5, [r3, #0]
 8001656:	4623      	mov	r3, r4
 8001658:	3b01      	subs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	b2e0      	uxtb	r0, r4
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	010b      	lsls	r3, r1, #4
 800166c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001670:	0102      	lsls	r2, r0, #4
 8001672:	4623      	mov	r3, r4
 8001674:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001678:	462b      	mov	r3, r5
 800167a:	3b01      	subs	r3, #1
 800167c:	623b      	str	r3, [r7, #32]
 800167e:	b2e0      	uxtb	r0, r4
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	b2ea      	uxtb	r2, r5
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	fb02 fe01 	mul.w	lr, r2, r1
 800168e:	fb00 fc03 	mul.w	ip, r0, r3
 8001692:	44f4      	add	ip, lr
 8001694:	fba0 2302 	umull	r2, r3, r0, r2
 8001698:	eb0c 0103 	add.w	r1, ip, r3
 800169c:	460b      	mov	r3, r1
 800169e:	f04f 0000 	mov.w	r0, #0
 80016a2:	f04f 0100 	mov.w	r1, #0
 80016a6:	0119      	lsls	r1, r3, #4
 80016a8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80016ac:	0110      	lsls	r0, r2, #4
 80016ae:	b2e0      	uxtb	r0, r4
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	b2ea      	uxtb	r2, r5
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	fb02 fe01 	mul.w	lr, r2, r1
 80016be:	fb00 fc03 	mul.w	ip, r0, r3
 80016c2:	44f4      	add	ip, lr
 80016c4:	fba0 2302 	umull	r2, r3, r0, r2
 80016c8:	eb0c 0103 	add.w	r1, ip, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	0119      	lsls	r1, r3, #4
 80016d8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80016dc:	0110      	lsls	r0, r2, #4
 80016de:	4623      	mov	r3, r4
 80016e0:	462a      	mov	r2, r5
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	3307      	adds	r3, #7
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	ebad 0d03 	sub.w	sp, sp, r3
 80016f2:	466b      	mov	r3, sp
 80016f4:	3301      	adds	r3, #1
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]

	driverSWLTC6804ReadAuxVoltageRegisters(AUX_CH_ALL,driverSWLTC6804TotalNumberOfICs,auxVoltageArrayCodes);
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <driverSWLTC6804ReadAuxVoltagesArray+0x1d0>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	4619      	mov	r1, r3
 8001704:	2000      	movs	r0, #0
 8001706:	f000 f86f 	bl	80017e8 <driverSWLTC6804ReadAuxVoltageRegisters>

  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 800170a:	2300      	movs	r3, #0
 800170c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001710:	e055      	b.n	80017be <driverSWLTC6804ReadAuxVoltagesArray+0x1ae>
		for(uint8_t auxPointer = 0; auxPointer < driverSWLTC6804MaxNoOfTempSensorPerModule; auxPointer++){
 8001712:	2300      	movs	r3, #0
 8001714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001718:	e046      	b.n	80017a8 <driverSWLTC6804ReadAuxVoltagesArray+0x198>
			if(auxVoltageArrayCodes[modulePointer][auxPointer]*0.0001f < 10.0f)
 800171a:	ea4f 0158 	mov.w	r1, r8, lsr #1
 800171e:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001722:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fb00 f101 	mul.w	r1, r0, r1
 800172c:	440a      	add	r2, r1
 800172e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80017e4 <driverSWLTC6804ReadAuxVoltagesArray+0x1d4>
 800173e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001742:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d523      	bpl.n	8001798 <driverSWLTC6804ReadAuxVoltagesArray+0x188>
			  auxVoltagesArray[modulePointer][auxPointer] = driverSWLTC6804ConvertTemperatureExt(auxVoltageArrayCodes[modulePointer][auxPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 8001750:	ea4f 0158 	mov.w	r1, r8, lsr #1
 8001754:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001758:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	fb00 f101 	mul.w	r1, r0, r1
 8001762:	440a      	add	r2, r1
 8001764:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8001768:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800176c:	4632      	mov	r2, r6
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	18d4      	adds	r4, r2, r3
 8001778:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
 800177c:	897b      	ldrh	r3, [r7, #10]
 800177e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	6939      	ldr	r1, [r7, #16]
 8001786:	f000 fdb3 	bl	80022f0 <driverSWLTC6804ConvertTemperatureExt>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
 800178e:	00ab      	lsls	r3, r5, #2
 8001790:	4423      	add	r3, r4
 8001792:	edc3 7a00 	vstr	s15, [r3]
 8001796:	e002      	b.n	800179e <driverSWLTC6804ReadAuxVoltagesArray+0x18e>
			else
				dataValid = false;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		for(uint8_t auxPointer = 0; auxPointer < driverSWLTC6804MaxNoOfTempSensorPerModule; auxPointer++){
 800179e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017a2:	3301      	adds	r3, #1
 80017a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <driverSWLTC6804ReadAuxVoltagesArray+0x1cc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d3b2      	bcc.n	800171a <driverSWLTC6804ReadAuxVoltagesArray+0x10a>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 80017b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017b8:	3301      	adds	r3, #1
 80017ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <driverSWLTC6804ReadAuxVoltagesArray+0x1d0>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3a3      	bcc.n	8001712 <driverSWLTC6804ReadAuxVoltagesArray+0x102>
		}
  }

	return dataValid;
 80017ca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80017ce:	46cd      	mov	sp, r9
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3734      	adds	r7, #52	; 0x34
 80017d4:	46bd      	mov	sp, r7
 80017d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017da:	bf00      	nop
 80017dc:	2000021a 	.word	0x2000021a
 80017e0:	20000218 	.word	0x20000218
 80017e4:	38d1b717 	.word	0x38d1b717

080017e8 <driverSWLTC6804ReadAuxVoltageRegisters>:

int8_t driverSWLTC6804ReadAuxVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t aux_codes[][driverSWLTC6804MaxNoOfTempSensorPerModule]) {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b08d      	sub	sp, #52	; 0x34
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	603a      	str	r2, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	460b      	mov	r3, r1
 80017f6:	71bb      	strb	r3, [r7, #6]
 80017f8:	4b97      	ldr	r3, [pc, #604]	; (8001a58 <driverSWLTC6804ReadAuxVoltageRegisters+0x270>)
 80017fa:	781c      	ldrb	r4, [r3, #0]
 80017fc:	4623      	mov	r3, r4
 80017fe:	3b01      	subs	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	b2e0      	uxtb	r0, r4
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	010b      	lsls	r3, r1, #4
 8001812:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001816:	0102      	lsls	r2, r0, #4
  const uint8_t NUM_RX_BYT = 8;
 8001818:	2308      	movs	r3, #8
 800181a:	76fb      	strb	r3, [r7, #27]
  const uint8_t BYT_IN_REG = 6;
 800181c:	2306      	movs	r3, #6
 800181e:	76bb      	strb	r3, [r7, #26]
  const uint8_t GPIO_IN_REG = 3;
 8001820:	2303      	movs	r3, #3
 8001822:	767b      	strb	r3, [r7, #25]

  uint8_t *data;
  uint8_t data_counter = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  int8_t pec_error = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint16_t parsed_aux;
  uint16_t received_pec;
  uint16_t data_pec;
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001830:	7efb      	ldrb	r3, [r7, #27]
 8001832:	79ba      	ldrb	r2, [r7, #6]
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f00d f8cb 	bl	800e9d4 <malloc>
 800183e:	4603      	mov	r3, r0
 8001840:	617b      	str	r3, [r7, #20]
  //1.a
  if (reg == 0) {
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 8092 	bne.w	800196e <driverSWLTC6804ReadAuxVoltageRegisters+0x186>
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 800184a:	2301      	movs	r3, #1
 800184c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001850:	e080      	b.n	8001954 <driverSWLTC6804ReadAuxVoltageRegisters+0x16c>
      data_counter = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      driverSWLTC6804ReadAuxGroups(gpio_reg, total_ic,data);									             //Reads the raw auxiliary register data into the data[] array
 8001858:	79b9      	ldrb	r1, [r7, #6]
 800185a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f8fd 	bl	8001a60 <driverSWLTC6804ReadAuxGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001866:	2300      	movs	r3, #0
 8001868:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800186c:	e068      	b.n	8001940 <driverSWLTC6804ReadAuxVoltageRegisters+0x158>
		    for(uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) {	       // This loop parses the read back data into GPIO voltages, it loops once for each of the 3 gpio voltage codes in the register
 800186e:	2300      	movs	r3, #0
 8001870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001874:	e02e      	b.n	80018d4 <driverSWLTC6804ReadAuxVoltageRegisters+0xec>
		      parsed_aux = data[data_counter] + (data[data_counter+1]<<8);                     //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 8001876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b29a      	uxth	r2, r3
 8001882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001886:	3301      	adds	r3, #1
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	440b      	add	r3, r1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b29b      	uxth	r3, r3
 8001894:	4413      	add	r3, r2
 8001896:	81fb      	strh	r3, [r7, #14]
          aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
 8001898:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800189c:	4622      	mov	r2, r4
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80018ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018b0:	3a01      	subs	r2, #1
 80018b2:	7e78      	ldrb	r0, [r7, #25]
 80018b4:	fb00 f202 	mul.w	r2, r0, r2
 80018b8:	440a      	add	r2, r1
 80018ba:	89f9      	ldrh	r1, [r7, #14]
 80018bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          data_counter=data_counter+2;												                             //Because gpio voltage codes are two bytes the data counter must increment by two for each parsed gpio voltage code
 80018c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018c4:	3302      	adds	r3, #2
 80018c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		    for(uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) {	       // This loop parses the read back data into GPIO voltages, it loops once for each of the 3 gpio voltage codes in the register
 80018ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80018ce:	3301      	adds	r3, #1
 80018d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018d4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80018d8:	7e7b      	ldrb	r3, [r7, #25]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3cb      	bcc.n	8001876 <driverSWLTC6804ReadAuxVoltageRegisters+0x8e>
        }

        received_pec = (data[data_counter]<<8)+ data[data_counter+1]; 				             //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 80018de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018f2:	3301      	adds	r3, #1
 80018f4:	6979      	ldr	r1, [r7, #20]
 80018f6:	440b      	add	r3, r1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	827b      	strh	r3, [r7, #18]
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001900:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001904:	7efa      	ldrb	r2, [r7, #27]
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	461a      	mov	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	441a      	add	r2, r3
 8001910:	7ebb      	ldrb	r3, [r7, #26]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fc03 	bl	8002120 <driverSWLTC6804CalcPEC15>
 800191a:	4603      	mov	r3, r0
 800191c:	823b      	strh	r3, [r7, #16]
        if(received_pec != data_pec) {
 800191e:	8a7a      	ldrh	r2, [r7, #18]
 8001920:	8a3b      	ldrh	r3, [r7, #16]
 8001922:	429a      	cmp	r2, r3
 8001924:	d002      	beq.n	800192c <driverSWLTC6804ReadAuxVoltageRegisters+0x144>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the received serial data
 8001926:	23ff      	movs	r3, #255	; 0xff
 8001928:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        data_counter=data_counter+2;												                               //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs gpio voltage data
 800192c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001930:	3302      	adds	r3, #2
 8001932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8001936:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800193a:	3301      	adds	r3, #1
 800193c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001940:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	429a      	cmp	r2, r3
 8001948:	d391      	bcc.n	800186e <driverSWLTC6804ReadAuxVoltageRegisters+0x86>
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 800194a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800194e:	3301      	adds	r3, #1
 8001950:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <driverSWLTC6804ReadAuxVoltageRegisters+0x270>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4a40      	ldr	r2, [pc, #256]	; (8001a5c <driverSWLTC6804ReadAuxVoltageRegisters+0x274>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001966:	429a      	cmp	r2, r3
 8001968:	f67f af73 	bls.w	8001852 <driverSWLTC6804ReadAuxVoltageRegisters+0x6a>
 800196c:	e06b      	b.n	8001a46 <driverSWLTC6804ReadAuxVoltageRegisters+0x25e>
      }
    }
  }else{
    driverSWLTC6804ReadAuxGroups(reg, total_ic, data);
 800196e:	79b9      	ldrb	r1, [r7, #6]
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f873 	bl	8001a60 <driverSWLTC6804ReadAuxGroups>
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
 800197e:	e05e      	b.n	8001a3e <driverSWLTC6804ReadAuxVoltageRegisters+0x256>

		  for(int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++) {  	 	           // This loop parses the read back data. Loops once for each aux voltage in the register
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	e029      	b.n	80019da <driverSWLTC6804ReadAuxVoltageRegisters+0x1f2>
			  parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));    		             //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 8001986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b29a      	uxth	r2, r3
 8001992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001996:	3301      	adds	r3, #1
 8001998:	6979      	ldr	r1, [r7, #20]
 800199a:	440b      	add	r3, r1
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	81fb      	strh	r3, [r7, #14]
			  aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
 80019a8:	4622      	mov	r2, r4
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	fb03 f302 	mul.w	r3, r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	3a01      	subs	r2, #1
 80019ba:	7e79      	ldrb	r1, [r7, #25]
 80019bc:	fb01 f102 	mul.w	r1, r1, r2
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	440a      	add	r2, r1
 80019c4:	89f9      	ldrh	r1, [r7, #14]
 80019c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  data_counter=data_counter+2;									 		                                 //Because gpio voltage codes are two bytes the data counter must increment by two for each parsed gpio voltage code
 80019ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019ce:	3302      	adds	r3, #2
 80019d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++) {  	 	           // This loop parses the read back data. Loops once for each aux voltage in the register
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	3301      	adds	r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	7e7b      	ldrb	r3, [r7, #25]
 80019dc:	6a3a      	ldr	r2, [r7, #32]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbd1      	blt.n	8001986 <driverSWLTC6804ReadAuxVoltageRegisters+0x19e>
		  }
		  received_pec = (data[data_counter]<<8) + data[data_counter+1]; 				               //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 80019e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4413      	add	r3, r2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019f6:	3301      	adds	r3, #1
 80019f8:	6979      	ldr	r1, [r7, #20]
 80019fa:	440b      	add	r3, r1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	827b      	strh	r3, [r7, #18]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001a04:	7efb      	ldrb	r3, [r7, #27]
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	441a      	add	r2, r3
 8001a12:	7ebb      	ldrb	r3, [r7, #26]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fb82 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	823b      	strh	r3, [r7, #16]

			if(received_pec != data_pec) {
 8001a20:	8a7a      	ldrh	r2, [r7, #18]
 8001a22:	8a3b      	ldrh	r3, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d002      	beq.n	8001a2e <driverSWLTC6804ReadAuxVoltageRegisters+0x246>
        pec_error = -1;													   		                                     //The pec_error variable is simply set negative if any PEC errors  are detected in the received serial data
 8001a28:	23ff      	movs	r3, #255	; 0xff
 8001a2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

			data_counter=data_counter+2;												                                 //Because the transmitted PEC code is 2 bytes long the data_counter must be incremented by 2 bytes to point to the next ICs gpio voltage data
 8001a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a32:	3302      	adds	r3, #2
 8001a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a42:	429a      	cmp	r2, r3
 8001a44:	db9c      	blt.n	8001980 <driverSWLTC6804ReadAuxVoltageRegisters+0x198>
	  }
  }
  free(data);
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f00c ffcc 	bl	800e9e4 <free>
  return (pec_error);
 8001a4c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3734      	adds	r7, #52	; 0x34
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	2000021a 	.word	0x2000021a
 8001a5c:	aaaaaaab 	.word	0xaaaaaaab

08001a60 <driverSWLTC6804ReadAuxGroups>:

void driverSWLTC6804ReadAuxGroups(uint8_t reg, uint8_t total_ic, uint8_t *data) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	603a      	str	r2, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001a70:	2308      	movs	r3, #8
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  //1
  if (reg == 1) {			//Read back auxiliary group A
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d104      	bne.n	8001a84 <driverSWLTC6804ReadAuxGroups+0x24>
    cmd[1] = 0x0C;
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	723b      	strb	r3, [r7, #8]
 8001a82:	e01b      	b.n	8001abc <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 2) {		//Read back auxiliary group B
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d104      	bne.n	8001a94 <driverSWLTC6804ReadAuxGroups+0x34>
    cmd[1] = 0x0E;
 8001a8a:	230e      	movs	r3, #14
 8001a8c:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	723b      	strb	r3, [r7, #8]
 8001a92:	e013      	b.n	8001abc <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 3) {		//Read auxiliary group C LTC6812 & LTC6813 only
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d104      	bne.n	8001aa4 <driverSWLTC6804ReadAuxGroups+0x44>
    cmd[1] = 0x0D;
 8001a9a:	230d      	movs	r3, #13
 8001a9c:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	723b      	strb	r3, [r7, #8]
 8001aa2:	e00b      	b.n	8001abc <driverSWLTC6804ReadAuxGroups+0x5c>
  }else if(reg == 4) {		//Read auxiliary group D LTC6812 & LTC6813 only
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d104      	bne.n	8001ab4 <driverSWLTC6804ReadAuxGroups+0x54>
    cmd[1] = 0x0F;
 8001aaa:	230f      	movs	r3, #15
 8001aac:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	723b      	strb	r3, [r7, #8]
 8001ab2:	e003      	b.n	8001abc <driverSWLTC6804ReadAuxGroups+0x5c>
  }else{					     //Read back auxiliary group A
     cmd[1] = 0x0C;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	727b      	strb	r3, [r7, #9]
     cmd[0] = 0x00;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f000 fb2c 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001acc:	89bb      	ldrh	r3, [r7, #12]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001ad6:	89bb      	ldrh	r3, [r7, #12]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	72fb      	strb	r3, [r7, #11]

  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake, this command can be removed.
 8001adc:	f000 fbef 	bl	80022be <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	fb12 f303 	smulbb	r3, r2, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f107 0008 	add.w	r0, r7, #8
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	2104      	movs	r1, #4
 8001af2:	f000 fbcb 	bl	800228c <driverSWLTC6804WriteRead>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <driverSWLTC6804WriteConfigRegister>:

void driverSWLTC6804WriteConfigRegister(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b08c      	sub	sp, #48	; 0x30
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	6039      	str	r1, [r7, #0]
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	71bb      	strb	r3, [r7, #6]
 8001b12:	466b      	mov	r3, sp
 8001b14:	461d      	mov	r5, r3
  const uint8_t BYTES_IN_REG = 6;
 8001b16:	2306      	movs	r3, #6
 8001b18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3304      	adds	r3, #4
 8001b24:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t *cmd;
  uint16_t cfg_pec;
  uint8_t cmd_index; //command counter
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8001b28:	79fc      	ldrb	r4, [r7, #7]
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	b2e0      	uxtb	r0, r4
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	eb12 0a02 	adds.w	sl, r2, r2
 8001b3e:	eb43 0b03 	adc.w	fp, r3, r3
 8001b42:	4652      	mov	r2, sl
 8001b44:	465b      	mov	r3, fp
 8001b46:	1812      	adds	r2, r2, r0
 8001b48:	eb41 0303 	adc.w	r3, r1, r3
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	0119      	lsls	r1, r3, #4
 8001b56:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001b5a:	0110      	lsls	r0, r2, #4
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4622      	mov	r2, r4
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	b2e0      	uxtb	r0, r4
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	eb12 0802 	adds.w	r8, r2, r2
 8001b78:	eb43 0903 	adc.w	r9, r3, r3
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	464b      	mov	r3, r9
 8001b80:	1812      	adds	r2, r2, r0
 8001b82:	eb41 0303 	adc.w	r3, r1, r3
 8001b86:	f04f 0000 	mov.w	r0, #0
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	0119      	lsls	r1, r3, #4
 8001b90:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001b94:	0110      	lsls	r0, r2, #4
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	08db      	lsrs	r3, r3, #3
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	ebad 0d03 	sub.w	sp, sp, r3
 8001bae:	466b      	mov	r3, sp
 8001bb0:	3300      	adds	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 8001bb4:	4ba2      	ldr	r3, [pc, #648]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcc5 	bl	8000548 <__aeabi_f2d>
 8001bbe:	a39e      	add	r3, pc, #632	; (adr r3, 8001e38 <driverSWLTC6804WriteConfigRegister+0x338>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fe42 	bl	800084c <__aeabi_ddiv>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe ffea 	bl	8000ba8 <__aeabi_d2uiz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	82fb      	strh	r3, [r7, #22]
	uint16_t VoV = driverSWLTC6804ConfigStruct.CellOverVoltageLimit/(16*0.0001);
 8001bd8:	4b99      	ldr	r3, [pc, #612]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcb3 	bl	8000548 <__aeabi_f2d>
 8001be2:	a395      	add	r3, pc, #596	; (adr r3, 8001e38 <driverSWLTC6804WriteConfigRegister+0x338>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fe30 	bl	800084c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ffd8 	bl	8000ba8 <__aeabi_d2uiz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	82bb      	strh	r3, [r7, #20]
	uint32_t activeBalanceMask=0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24

  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c04:	e08d      	b.n	8001d22 <driverSWLTC6804WriteConfigRegister+0x222>
		if(useArray)
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <driverSWLTC6804WriteConfigRegister+0x11a>
			activeBalanceMask = balanceEnableMaskArray[i];
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	e002      	b.n	8001c20 <driverSWLTC6804WriteConfigRegister+0x120>
		else
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24

    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 8001c20:	4b87      	ldr	r3, [pc, #540]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c22:	791b      	ldrb	r3, [r3, #4]
 8001c24:	01db      	lsls	r3, r3, #7
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	4b85      	ldr	r3, [pc, #532]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c2a:	78db      	ldrb	r3, [r3, #3]
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c36:	789b      	ldrb	r3, [r3, #2]
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b25a      	sxtb	r2, r3
 8001c40:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b25a      	sxtb	r2, r3
 8001c4c:	4b7c      	ldr	r3, [pc, #496]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b25a      	sxtb	r2, r3
 8001c58:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c5a:	7a5b      	ldrb	r3, [r3, #9]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b25a      	sxtb	r2, r3
 8001c64:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001c66:	7adb      	ldrb	r3, [r3, #11]
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	b2d8      	uxtb	r0, r3
 8001c70:	69b9      	ldr	r1, [r7, #24]
 8001c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	440b      	add	r3, r1
 8001c7e:	4602      	mov	r2, r0
 8001c80:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][1] = (VuV & 0xFF) ;
 8001c82:	8afb      	ldrh	r3, [r7, #22]
 8001c84:	b2d8      	uxtb	r0, r3
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	440b      	add	r3, r1
 8001c94:	3301      	adds	r3, #1
 8001c96:	4602      	mov	r2, r0
 8001c98:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][2] = ((VoV & 0x0F) << 4) | (VuV >> 8) ;
 8001c9a:	8abb      	ldrh	r3, [r7, #20]
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	b25a      	sxtb	r2, r3
 8001ca0:	8afb      	ldrh	r3, [r7, #22]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	b2d8      	uxtb	r0, r3
 8001cae:	69b9      	ldr	r1, [r7, #24]
 8001cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	440b      	add	r3, r1
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][3] = (VoV >> 4) ;
 8001cc2:	8abb      	ldrh	r3, [r7, #20]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	b2d8      	uxtb	r0, r3
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3303      	adds	r3, #3
 8001cda:	4602      	mov	r2, r0
 8001cdc:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][4] = (activeBalanceMask & 0xFF) ;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	b2d8      	uxtb	r0, r3
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	440b      	add	r3, r1
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ;
 8001cf6:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <driverSWLTC6804WriteConfigRegister+0x340>)
 8001cf8:	7d1b      	ldrb	r3, [r3, #20]
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b2d8      	uxtb	r0, r3
 8001d08:	69b9      	ldr	r1, [r7, #24]
 8001d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	440b      	add	r3, r1
 8001d16:	3305      	adds	r3, #5
 8001d18:	4602      	mov	r2, r0
 8001d1a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	3301      	adds	r3, #1
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d26:	429a      	cmp	r2, r3
 8001d28:	f6ff af6d 	blt.w	8001c06 <driverSWLTC6804WriteConfigRegister+0x106>
  }

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001d2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f00c fe4f 	bl	800e9d4 <malloc>
 8001d36:	4603      	mov	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]
  cmd[0] = 0x00; // config register command
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x01; // config register command
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	3301      	adds	r3, #1
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
  cmd[2] = 0x3d; // PEC
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	223d      	movs	r2, #61	; 0x3d
 8001d4e:	701a      	strb	r2, [r3, #0]
  cmd[3] = 0x6e; // PEC
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	3303      	adds	r3, #3
 8001d54:	226e      	movs	r2, #110	; 0x6e
 8001d56:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d64:	e051      	b.n	8001e0a <driverSWLTC6804WriteConfigRegister+0x30a>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d6c:	e01b      	b.n	8001da6 <driverSWLTC6804WriteConfigRegister+0x2a6>
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent
 8001d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d72:	1e5a      	subs	r2, r3, #1
 8001d74:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8001d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d7c:	6939      	ldr	r1, [r7, #16]
 8001d7e:	4419      	add	r1, r3
 8001d80:	69bc      	ldr	r4, [r7, #24]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4423      	add	r3, r4
 8001d8c:	4403      	add	r3, r0
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	700b      	strb	r3, [r1, #0]
      cmd_index = cmd_index + 1;
 8001d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d96:	3301      	adds	r3, #1
 8001d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8001d9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001da0:	3301      	adds	r3, #1
 8001da2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001da6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001daa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d3dd      	bcc.n	8001d6e <driverSWLTC6804WriteConfigRegister+0x26e>
    }
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 8001db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001db6:	1e5a      	subs	r2, r3, #1
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f9a8 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	81fb      	strh	r3, [r7, #14]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dea:	3301      	adds	r3, #1
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	89fa      	ldrh	r2, [r7, #14]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8001df6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8001e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e04:	3b01      	subs	r3, #1
 8001e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1a9      	bne.n	8001d66 <driverSWLTC6804WriteConfigRegister+0x266>
  }

	driverSWLTC6804WakeIC();
 8001e12:	f000 fa54 	bl	80022be <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 8001e16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6938      	ldr	r0, [r7, #16]
 8001e1e:	f000 fa24 	bl	800226a <driverSWLTC6804Write>
  free(cmd);
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f00c fdde 	bl	800e9e4 <free>
 8001e28:	46ad      	mov	sp, r5
}
 8001e2a:	bf00      	nop
 8001e2c:	3730      	adds	r7, #48	; 0x30
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e34:	f3af 8000 	nop.w
 8001e38:	eb1c432d 	.word	0xeb1c432d
 8001e3c:	3f5a36e2 	.word	0x3f5a36e2
 8001e40:	200004d0 	.word	0x200004d0

08001e44 <driverSWLTC6804WriteConfigRegisterB>:

void driverSWLTC6804WriteConfigRegisterB(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8001e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e48:	b08a      	sub	sp, #40	; 0x28
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	6039      	str	r1, [r7, #0]
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	4613      	mov	r3, r2
 8001e54:	71bb      	strb	r3, [r7, #6]
 8001e56:	466b      	mov	r3, sp
 8001e58:	461d      	mov	r5, r3
  const uint8_t BYTES_IN_REG = 6;
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	767b      	strb	r3, [r7, #25]
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3304      	adds	r3, #4
 8001e66:	763b      	strb	r3, [r7, #24]
  uint8_t *cmd;
  uint16_t cfg_pec;
  uint8_t cmd_index; //command counter
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8001e68:	79fc      	ldrb	r4, [r7, #7]
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	b2e0      	uxtb	r0, r4
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	eb12 0a02 	adds.w	sl, r2, r2
 8001e7e:	eb43 0b03 	adc.w	fp, r3, r3
 8001e82:	4652      	mov	r2, sl
 8001e84:	465b      	mov	r3, fp
 8001e86:	1812      	adds	r2, r2, r0
 8001e88:	eb41 0303 	adc.w	r3, r1, r3
 8001e8c:	f04f 0000 	mov.w	r0, #0
 8001e90:	f04f 0100 	mov.w	r1, #0
 8001e94:	0119      	lsls	r1, r3, #4
 8001e96:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001e9a:	0110      	lsls	r0, r2, #4
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4622      	mov	r2, r4
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	b2e0      	uxtb	r0, r4
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	eb12 0802 	adds.w	r8, r2, r2
 8001eb8:	eb43 0903 	adc.w	r9, r3, r3
 8001ebc:	4642      	mov	r2, r8
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	1812      	adds	r2, r2, r0
 8001ec2:	eb41 0303 	adc.w	r3, r1, r3
 8001ec6:	f04f 0000 	mov.w	r0, #0
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	0119      	lsls	r1, r3, #4
 8001ed0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001ed4:	0110      	lsls	r0, r2, #4
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4622      	mov	r2, r4
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	3307      	adds	r3, #7
 8001ee6:	08db      	lsrs	r3, r3, #3
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	ebad 0d03 	sub.w	sp, sp, r3
 8001eee:	466b      	mov	r3, sp
 8001ef0:	3300      	adds	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
	uint32_t activeBalanceMask=0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
	uint16_t cmd_pec;

  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	e06c      	b.n	8001fd8 <driverSWLTC6804WriteConfigRegisterB+0x194>
		if(useArray)
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <driverSWLTC6804WriteConfigRegisterB+0xce>
			activeBalanceMask = balanceEnableMaskArray[i];
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	e002      	b.n	8001f18 <driverSWLTC6804WriteConfigRegisterB+0xd4>
		else
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 8001f12:	4b72      	ldr	r3, [pc, #456]	; (80020dc <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	61fb      	str	r3, [r7, #28]


    tx_cfg[i][0] = ((activeBalanceMask >> 8 ) & 0x000000F0) | (driverSWLTC6804ConfigStruct.GPIO9 << 3) | (driverSWLTC6804ConfigStruct.GPIO8 << 2) | (driverSWLTC6804ConfigStruct.GPIO7 << 1) | (driverSWLTC6804ConfigStruct.GPIO6) ;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f023 030f 	bic.w	r3, r3, #15
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f26:	7a1b      	ldrb	r3, [r3, #8]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f32:	79db      	ldrb	r3, [r3, #7]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b67      	ldr	r3, [pc, #412]	; (80020dc <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f3e:	799b      	ldrb	r3, [r3, #6]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4a64      	ldr	r2, [pc, #400]	; (80020dc <driverSWLTC6804WriteConfigRegisterB+0x298>)
 8001f4a:	7952      	ldrb	r2, [r2, #5]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b2d8      	uxtb	r0, r3
 8001f50:	6939      	ldr	r1, [r7, #16]
 8001f52:	6a3a      	ldr	r2, [r7, #32]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	440b      	add	r3, r1
 8001f5e:	4602      	mov	r2, r0
 8001f60:	701a      	strb	r2, [r3, #0]
    tx_cfg[i][1] = ((activeBalanceMask >> 16 ) & 0x00000003) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	b2d8      	uxtb	r0, r3
 8001f6e:	6939      	ldr	r1, [r7, #16]
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4602      	mov	r2, r0
 8001f80:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][2] = 0;
 8001f82:	6939      	ldr	r1, [r7, #16]
 8001f84:	6a3a      	ldr	r2, [r7, #32]
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	440b      	add	r3, r1
 8001f90:	3302      	adds	r3, #2
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][3] = 0;
 8001f96:	6939      	ldr	r1, [r7, #16]
 8001f98:	6a3a      	ldr	r2, [r7, #32]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][4] = 0;
 8001faa:	6939      	ldr	r1, [r7, #16]
 8001fac:	6a3a      	ldr	r2, [r7, #32]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
		tx_cfg[i][5] = 0;
 8001fbe:	6939      	ldr	r1, [r7, #16]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	440b      	add	r3, r1
 8001fcc:	3305      	adds	r3, #5
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	623b      	str	r3, [r7, #32]
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	6a3a      	ldr	r2, [r7, #32]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	db8e      	blt.n	8001efe <driverSWLTC6804WriteConfigRegisterB+0xba>
  }

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001fe0:	7e3b      	ldrb	r3, [r7, #24]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00c fcf6 	bl	800e9d4 <malloc>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60fb      	str	r3, [r7, #12]
  cmd[0] = 0x00; // config register B command
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x24; // config register B command
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	2224      	movs	r2, #36	; 0x24
 8001ff8:	701a      	strb	r2, [r3, #0]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	f000 f88f 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8002002:	4603      	mov	r3, r0
 8002004:	817b      	strh	r3, [r7, #10]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3302      	adds	r3, #2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3303      	adds	r3, #3
 8002018:	897a      	ldrh	r2, [r7, #10]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 800201e:	2304      	movs	r3, #4
 8002020:	76fb      	strb	r3, [r7, #27]

  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002028:	e043      	b.n	80020b2 <driverSWLTC6804WriteConfigRegisterB+0x26e>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 800202a:	2300      	movs	r3, #0
 800202c:	76bb      	strb	r3, [r7, #26]
 800202e:	e015      	b.n	800205c <driverSWLTC6804WriteConfigRegisterB+0x218>
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent
 8002030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002034:	1e5a      	subs	r2, r3, #1
 8002036:	7eb8      	ldrb	r0, [r7, #26]
 8002038:	7efb      	ldrb	r3, [r7, #27]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	4419      	add	r1, r3
 800203e:	693c      	ldr	r4, [r7, #16]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4423      	add	r3, r4
 800204a:	4403      	add	r3, r0
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	700b      	strb	r3, [r1, #0]
      cmd_index = cmd_index + 1;
 8002050:	7efb      	ldrb	r3, [r7, #27]
 8002052:	3301      	adds	r3, #1
 8002054:	76fb      	strb	r3, [r7, #27]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 8002056:	7ebb      	ldrb	r3, [r7, #26]
 8002058:	3301      	adds	r3, #1
 800205a:	76bb      	strb	r3, [r7, #26]
 800205c:	7eba      	ldrb	r2, [r7, #26]
 800205e:	7e7b      	ldrb	r3, [r7, #25]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3e5      	bcc.n	8002030 <driverSWLTC6804WriteConfigRegisterB+0x1ec>
    }
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 8002064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	441a      	add	r2, r3
 8002076:	7e7b      	ldrb	r3, [r7, #25]
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f850 	bl	8002120 <driverSWLTC6804CalcPEC15>
 8002080:	4603      	mov	r3, r0
 8002082:	813b      	strh	r3, [r7, #8]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8002084:	893b      	ldrh	r3, [r7, #8]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	b299      	uxth	r1, r3
 800208a:	7efb      	ldrb	r3, [r7, #27]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	b2ca      	uxtb	r2, r1
 8002092:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8002094:	7efb      	ldrb	r3, [r7, #27]
 8002096:	3301      	adds	r3, #1
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	893a      	ldrh	r2, [r7, #8]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 80020a2:	7efb      	ldrb	r3, [r7, #27]
 80020a4:	3302      	adds	r3, #2
 80020a6:	76fb      	strb	r3, [r7, #27]
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain
 80020a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020ac:	3b01      	subs	r3, #1
 80020ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1b7      	bne.n	800202a <driverSWLTC6804WriteConfigRegisterB+0x1e6>
  }

	driverSWLTC6804WakeIC();
 80020ba:	f000 f900 	bl	80022be <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 80020be:	7e3b      	ldrb	r3, [r7, #24]
 80020c0:	4619      	mov	r1, r3
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f8d1 	bl	800226a <driverSWLTC6804Write>
  free(cmd);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f00c fc8b 	bl	800e9e4 <free>
 80020ce:	46ad      	mov	sp, r5
}
 80020d0:	bf00      	nop
 80020d2:	3728      	adds	r7, #40	; 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020da:	bf00      	nop
 80020dc:	200004d0 	.word	0x200004d0

080020e0 <driverSWLTC6804EnableBalanceResistorsArray>:
	if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
		driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,0,false);
	}
}

void driverSWLTC6804EnableBalanceResistorsArray(uint32_t *enableMask, uint8_t cellMonitorType) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
	driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,enableMask,true);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <driverSWLTC6804EnableBalanceResistorsArray+0x3c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fd03 	bl	8001b00 <driverSWLTC6804WriteConfigRegister>
	if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d002      	beq.n	8002106 <driverSWLTC6804EnableBalanceResistorsArray+0x26>
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d106      	bne.n	8002114 <driverSWLTC6804EnableBalanceResistorsArray+0x34>
		driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,enableMask,true);
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <driverSWLTC6804EnableBalanceResistorsArray+0x3c>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe98 	bl	8001e44 <driverSWLTC6804WriteConfigRegisterB>
	}
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000218 	.word	0x20000218

08002120 <driverSWLTC6804CalcPEC15>:

uint16_t driverSWLTC6804CalcPEC15(uint8_t len, uint8_t *data) {
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;

	remainder = 16;//initialize the PEC
 800212c:	2310      	movs	r3, #16
 800212e:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 8002130:	2300      	movs	r3, #0
 8002132:	737b      	strb	r3, [r7, #13]
 8002134:	e018      	b.n	8002168 <driverSWLTC6804CalcPEC15+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	09db      	lsrs	r3, r3, #7
 800213a:	b29a      	uxth	r2, r3
 800213c:	7b7b      	ldrb	r3, [r7, #13]
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	440b      	add	r3, r1
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4053      	eors	r3, r2
 8002148:	b29b      	uxth	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 800214e:	89fb      	ldrh	r3, [r7, #14]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b29a      	uxth	r2, r3
 8002154:	897b      	ldrh	r3, [r7, #10]
 8002156:	490b      	ldr	r1, [pc, #44]	; (8002184 <driverSWLTC6804CalcPEC15+0x64>)
 8002158:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4053      	eors	r3, r2
 8002160:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 8002162:	7b7b      	ldrb	r3, [r7, #13]
 8002164:	3301      	adds	r3, #1
 8002166:	737b      	strb	r3, [r7, #13]
 8002168:	7b7a      	ldrb	r2, [r7, #13]
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d3e2      	bcc.n	8002136 <driverSWLTC6804CalcPEC15+0x16>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	b29b      	uxth	r3, r3
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	08011e10 	.word	0x08011e10

08002188 <driverSWLTC6804ReadConfigRegister>:

int8_t driverSWLTC6804ReadConfigRegister(uint8_t total_ic, uint8_t r_config[][8]) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  const uint8_t BYTES_IN_REG = 8;
 8002194:	2308      	movs	r3, #8
 8002196:	753b      	strb	r3, [r7, #20]

  uint8_t cmd[4];
  uint8_t *rx_data;
  int8_t pec_error = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
  uint16_t data_pec;
  uint16_t received_pec;

  rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f00c fc17 	bl	800e9d4 <malloc>
 80021a6:	4603      	mov	r3, r0
 80021a8:	613b      	str	r3, [r7, #16]

  cmd[0] = 0x00;
 80021aa:	2300      	movs	r3, #0
 80021ac:	723b      	strb	r3, [r7, #8]
  cmd[1] = 0x02;
 80021ae:	2302      	movs	r3, #2
 80021b0:	727b      	strb	r3, [r7, #9]
  cmd[2] = 0x2b;
 80021b2:	232b      	movs	r3, #43	; 0x2b
 80021b4:	72bb      	strb	r3, [r7, #10]
  cmd[3] = 0x0A;
 80021b6:	230a      	movs	r3, #10
 80021b8:	72fb      	strb	r3, [r7, #11]

	driverSWLTC6804WriteRead(cmd, 4, rx_data, (BYTES_IN_REG*total_ic));
 80021ba:	7d3a      	ldrb	r2, [r7, #20]
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	fb12 f303 	smulbb	r3, r2, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f107 0008 	add.w	r0, r7, #8
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	2104      	movs	r1, #4
 80021cc:	f000 f85e 	bl	800228c <driverSWLTC6804WriteRead>

  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors
 80021d0:	2300      	movs	r3, #0
 80021d2:	75bb      	strb	r3, [r7, #22]
 80021d4:	e03c      	b.n	8002250 <driverSWLTC6804ReadConfigRegister+0xc8>
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 80021d6:	2300      	movs	r3, #0
 80021d8:	757b      	strb	r3, [r7, #21]
 80021da:	e012      	b.n	8002202 <driverSWLTC6804ReadConfigRegister+0x7a>
      r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80021dc:	7d7a      	ldrb	r2, [r7, #21]
 80021de:	7dbb      	ldrb	r3, [r7, #22]
 80021e0:	7d39      	ldrb	r1, [r7, #20]
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1899      	adds	r1, r3, r2
 80021ee:	7dbb      	ldrb	r3, [r7, #22]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	441a      	add	r2, r3
 80021f6:	7d7b      	ldrb	r3, [r7, #21]
 80021f8:	7809      	ldrb	r1, [r1, #0]
 80021fa:	54d1      	strb	r1, [r2, r3]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 80021fc:	7d7b      	ldrb	r3, [r7, #21]
 80021fe:	3301      	adds	r3, #1
 8002200:	757b      	strb	r3, [r7, #21]
 8002202:	7d7a      	ldrb	r2, [r7, #21]
 8002204:	7d3b      	ldrb	r3, [r7, #20]
 8002206:	429a      	cmp	r2, r3
 8002208:	d3e8      	bcc.n	80021dc <driverSWLTC6804ReadConfigRegister+0x54>
    }
    received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 800220a:	7dbb      	ldrb	r3, [r7, #22]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	799b      	ldrb	r3, [r3, #6]
 8002214:	b29b      	uxth	r3, r3
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	b29a      	uxth	r2, r3
 800221a:	7dbb      	ldrb	r3, [r7, #22]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	440b      	add	r3, r1
 8002222:	79db      	ldrb	r3, [r3, #7]
 8002224:	b29b      	uxth	r3, r3
 8002226:	4413      	add	r3, r2
 8002228:	81fb      	strh	r3, [r7, #14]
    data_pec = driverSWLTC6804CalcPEC15(6, &r_config[current_ic][0]);
 800222a:	7dbb      	ldrb	r3, [r7, #22]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4413      	add	r3, r2
 8002232:	4619      	mov	r1, r3
 8002234:	2006      	movs	r0, #6
 8002236:	f7ff ff73 	bl	8002120 <driverSWLTC6804CalcPEC15>
 800223a:	4603      	mov	r3, r0
 800223c:	81bb      	strh	r3, [r7, #12]
    if(received_pec != data_pec) {
 800223e:	89fa      	ldrh	r2, [r7, #14]
 8002240:	89bb      	ldrh	r3, [r7, #12]
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <driverSWLTC6804ReadConfigRegister+0xc2>
      pec_error = -1;
 8002246:	23ff      	movs	r3, #255	; 0xff
 8002248:	75fb      	strb	r3, [r7, #23]
  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors
 800224a:	7dbb      	ldrb	r3, [r7, #22]
 800224c:	3301      	adds	r3, #1
 800224e:	75bb      	strb	r3, [r7, #22]
 8002250:	7dba      	ldrb	r2, [r7, #22]
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	429a      	cmp	r2, r3
 8002256:	d3be      	bcc.n	80021d6 <driverSWLTC6804ReadConfigRegister+0x4e>
    }
  }
  free(rx_data);
 8002258:	6938      	ldr	r0, [r7, #16]
 800225a:	f00c fbc3 	bl	800e9e4 <free>
  return(pec_error);
 800225e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <driverSWLTC6804Write>:

// Coupling of drivers
void driverSWLTC6804Write(uint8_t *writeBytes, uint8_t writeLength) {
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	70fb      	strb	r3, [r7, #3]
	driverHWSPI1Write(writeBytes,writeLength,GPIOA,GPIO_PIN_4);
 8002276:	78f9      	ldrb	r1, [r7, #3]
 8002278:	2310      	movs	r3, #16
 800227a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fd4a 	bl	8000d18 <driverHWSPI1Write>
};
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <driverSWLTC6804WriteRead>:

// Coupling of drivers
void driverSWLTC6804WriteRead(uint8_t *writeBytes, uint8_t writeLength, uint8_t *readBytes, uint8_t readLength) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	460b      	mov	r3, r1
 800229a:	72fb      	strb	r3, [r7, #11]
 800229c:	4613      	mov	r3, r2
 800229e:	72bb      	strb	r3, [r7, #10]
	driverHWSPI1WriteRead(writeBytes,writeLength,readBytes,readLength,GPIOA,GPIO_PIN_4);
 80022a0:	7abb      	ldrb	r3, [r7, #10]
 80022a2:	7af9      	ldrb	r1, [r7, #11]
 80022a4:	2210      	movs	r2, #16
 80022a6:	9201      	str	r2, [sp, #4]
 80022a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022ac:	9200      	str	r2, [sp, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7fe fd6f 	bl	8000d94 <driverHWSPI1WriteRead>
};
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <driverSWLTC6804WakeIC>:

void driverSWLTC6804WakeIC(void){
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
	driverSWLTC6804DelayMS(1);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7fe fdca 	bl	8000e5c <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2110      	movs	r1, #16
 80022cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d0:	f003 fe70 	bl	8005fb4 <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7fe fdc1 	bl	8000e5c <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	2110      	movs	r1, #16
 80022de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e2:	f003 fe67 	bl	8005fb4 <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 80022e6:	2001      	movs	r0, #1
 80022e8:	f7fe fdb8 	bl	8000e5c <driverSWLTC6804DelayMS>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <driverSWLTC6804ConvertTemperatureExt>:

float driverSWLTC6804ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	461a      	mov	r2, r3
 80022fc:	ed87 0a00 	vstr	s0, [r7]
 8002300:	4603      	mov	r3, r0
 8002302:	81fb      	strh	r3, [r7, #14]
 8002304:	4613      	mov	r3, r2
 8002306:	81bb      	strh	r3, [r7, #12]
	static float scalar;
	static float steinhart;

  scalar = 30000.0f / (float)inputValue - 1.0f;
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002312:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002420 <driverSWLTC6804ConvertTemperatureExt+0x130>
 8002316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800231e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <driverSWLTC6804ConvertTemperatureExt+0x134>)
 8002324:	edc3 7a00 	vstr	s15, [r3]
  scalar = (float)ntcSeriesResistance / scalar;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002332:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <driverSWLTC6804ConvertTemperatureExt+0x134>)
 8002334:	ed93 7a00 	vldr	s14, [r3]
 8002338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <driverSWLTC6804ConvertTemperatureExt+0x134>)
 800233e:	edc3 7a00 	vstr	s15, [r3]
  steinhart = scalar / (float)ntcNominal;               // (R/Ro)
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <driverSWLTC6804ConvertTemperatureExt+0x134>)
 8002344:	edd3 6a00 	vldr	s13, [r3]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002358:	edc3 7a00 	vstr	s15, [r3]
  steinhart = log(steinhart);                           // ln(R/Ro)
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f8f1 	bl	8000548 <__aeabi_f2d>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	ec43 2b10 	vmov	d0, r2, r3
 800236e:	f00c f8fb 	bl	800e568 <log>
 8002372:	ec53 2b10 	vmov	r2, r3, d0
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fc35 	bl	8000be8 <__aeabi_d2f>
 800237e:	4603      	mov	r3, r0
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002382:	6013      	str	r3, [r2, #0]
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002386:	edd3 6a00 	vldr	s13, [r3]
 800238a:	89bb      	ldrh	r3, [r7, #12]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800239a:	edc3 7a00 	vstr	s15, [r3]
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 800239e:	edd7 7a00 	vldr	s15, [r7]
 80023a2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800242c <driverSWLTC6804ConvertTemperatureExt+0x13c>
 80023a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023be:	edc3 7a00 	vstr	s15, [r3]
  steinhart = 1.0f / steinhart;                         // Invert
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023d2:	edc3 7a00 	vstr	s15, [r3]
  steinhart -= 273.15f;                                 // convert to degree
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800242c <driverSWLTC6804ConvertTemperatureExt+0x13c>
 80023e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023e6:	edc3 7a00 	vstr	s15, [r3]

	if(steinhart < -50.0f || (float)inputValue >= 30000.0f)
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002430 <driverSWLTC6804ConvertTemperatureExt+0x140>
 80023f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	d404      	bmi.n	8002408 <driverSWLTC6804ConvertTemperatureExt+0x118>
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	f247 522f 	movw	r2, #29999	; 0x752f
 8002404:	4293      	cmp	r3, r2
 8002406:	d902      	bls.n	800240e <driverSWLTC6804ConvertTemperatureExt+0x11e>
		steinhart = 100.0f;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <driverSWLTC6804ConvertTemperatureExt+0x144>)
 800240c:	601a      	str	r2, [r3, #0]

  return steinhart;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <driverSWLTC6804ConvertTemperatureExt+0x138>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	ee07 3a90 	vmov	s15, r3
}
 8002416:	eeb0 0a67 	vmov.f32	s0, s15
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	46ea6000 	.word	0x46ea6000
 8002424:	2000021c 	.word	0x2000021c
 8002428:	20000220 	.word	0x20000220
 800242c:	43889333 	.word	0x43889333
 8002430:	c2480000 	.word	0xc2480000
 8002434:	42c80000 	.word	0x42c80000

08002438 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002442:	4804      	ldr	r0, [pc, #16]	; (8002454 <SELECT+0x1c>)
 8002444:	f003 fdb6 	bl	8005fb4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002448:	2001      	movs	r0, #1
 800244a:	f002 fc29 	bl	8004ca0 <HAL_Delay>
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	48000400 	.word	0x48000400

08002458 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002462:	4804      	ldr	r0, [pc, #16]	; (8002474 <DESELECT+0x1c>)
 8002464:	f003 fda6 	bl	8005fb4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002468:	2001      	movs	r0, #1
 800246a:	f002 fc19 	bl	8004ca0 <HAL_Delay>
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	48000400 	.word	0x48000400

08002478 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002482:	bf00      	nop
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <SPI_TxByte+0x30>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d1f8      	bne.n	8002484 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002492:	1df9      	adds	r1, r7, #7
 8002494:	2364      	movs	r3, #100	; 0x64
 8002496:	2201      	movs	r2, #1
 8002498:	4803      	ldr	r0, [pc, #12]	; (80024a8 <SPI_TxByte+0x30>)
 800249a:	f005 fce2 	bl	8007e62 <HAL_SPI_Transmit>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000544 	.word	0x20000544

080024ac <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80024b8:	bf00      	nop
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <SPI_TxBuffer+0x30>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d1f8      	bne.n	80024ba <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80024c8:	887a      	ldrh	r2, [r7, #2]
 80024ca:	2364      	movs	r3, #100	; 0x64
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4803      	ldr	r0, [pc, #12]	; (80024dc <SPI_TxBuffer+0x30>)
 80024d0:	f005 fcc7 	bl	8007e62 <HAL_SPI_Transmit>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000544 	.word	0x20000544

080024e0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80024e6:	23ff      	movs	r3, #255	; 0xff
 80024e8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80024ea:	bf00      	nop
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <SPI_RxByte+0x34>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d1f8      	bne.n	80024ec <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80024fa:	1dba      	adds	r2, r7, #6
 80024fc:	1df9      	adds	r1, r7, #7
 80024fe:	2364      	movs	r3, #100	; 0x64
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2301      	movs	r3, #1
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <SPI_RxByte+0x34>)
 8002506:	f005 fe1a 	bl	800813e <HAL_SPI_TransmitReceive>

	return data;
 800250a:	79bb      	ldrb	r3, [r7, #6]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000544 	.word	0x20000544

08002518 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002520:	f7ff ffde 	bl	80024e0 <SPI_RxByte>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	701a      	strb	r2, [r3, #0]
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <SD_ReadyWait+0x30>)
 800253c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002540:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002542:	f7ff ffcd 	bl	80024e0 <SPI_RxByte>
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2bff      	cmp	r3, #255	; 0xff
 800254e:	d004      	beq.n	800255a <SD_ReadyWait+0x26>
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <SD_ReadyWait+0x30>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f3      	bne.n	8002542 <SD_ReadyWait+0xe>

	return res;
 800255a:	79fb      	ldrb	r3, [r7, #7]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20002cf6 	.word	0x20002cf6

08002568 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800256e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002572:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002574:	f7ff ff70 	bl	8002458 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	e005      	b.n	800258a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800257e:	20ff      	movs	r0, #255	; 0xff
 8002580:	f7ff ff7a 	bl	8002478 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3301      	adds	r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b09      	cmp	r3, #9
 800258e:	ddf6      	ble.n	800257e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002590:	f7ff ff52 	bl	8002438 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002594:	2340      	movs	r3, #64	; 0x40
 8002596:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80025a8:	2395      	movs	r3, #149	; 0x95
 80025aa:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80025ac:	463b      	mov	r3, r7
 80025ae:	2106      	movs	r1, #6
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff7b 	bl	80024ac <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80025b6:	e002      	b.n	80025be <SD_PowerOn+0x56>
	{
		cnt--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80025be:	f7ff ff8f 	bl	80024e0 <SPI_RxByte>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d002      	beq.n	80025ce <SD_PowerOn+0x66>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f4      	bne.n	80025b8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80025ce:	f7ff ff43 	bl	8002458 <DESELECT>
	SPI_TxByte(0XFF);
 80025d2:	20ff      	movs	r0, #255	; 0xff
 80025d4:	f7ff ff50 	bl	8002478 <SPI_TxByte>

	PowerFlag = 1;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <SD_PowerOn+0x80>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000225 	.word	0x20000225

080025ec <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <SD_PowerOff+0x14>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	20000225 	.word	0x20000225

08002604 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <SD_CheckPower+0x14>)
 800260a:	781b      	ldrb	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000225 	.word	0x20000225

0800261c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <SD_RxDataBlock+0x5c>)
 8002628:	22c8      	movs	r2, #200	; 0xc8
 800262a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800262c:	f7ff ff58 	bl	80024e0 <SPI_RxByte>
 8002630:	4603      	mov	r3, r0
 8002632:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2bff      	cmp	r3, #255	; 0xff
 8002638:	d104      	bne.n	8002644 <SD_RxDataBlock+0x28>
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <SD_RxDataBlock+0x5c>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f3      	bne.n	800262c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2bfe      	cmp	r3, #254	; 0xfe
 8002648:	d001      	beq.n	800264e <SD_RxDataBlock+0x32>
 800264a:	2300      	movs	r3, #0
 800264c:	e00f      	b.n	800266e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff5f 	bl	8002518 <SPI_RxBytePtr>
	} while(len--);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	603a      	str	r2, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f4      	bne.n	800264e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002664:	f7ff ff3c 	bl	80024e0 <SPI_RxByte>
	SPI_RxByte();
 8002668:	f7ff ff3a 	bl	80024e0 <SPI_RxByte>

	return TRUE;
 800266c:	2301      	movs	r3, #1
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20002cf8 	.word	0x20002cf8

0800267c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800268c:	f7ff ff52 	bl	8002534 <SD_ReadyWait>
 8002690:	4603      	mov	r3, r0
 8002692:	2bff      	cmp	r3, #255	; 0xff
 8002694:	d001      	beq.n	800269a <SD_TxDataBlock+0x1e>
 8002696:	2300      	movs	r3, #0
 8002698:	e02f      	b.n	80026fa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff feeb 	bl	8002478 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	2bfd      	cmp	r3, #253	; 0xfd
 80026a6:	d020      	beq.n	80026ea <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80026a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fefd 	bl	80024ac <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80026b2:	f7ff ff15 	bl	80024e0 <SPI_RxByte>
		SPI_RxByte();
 80026b6:	f7ff ff13 	bl	80024e0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80026ba:	e00b      	b.n	80026d4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80026bc:	f7ff ff10 	bl	80024e0 <SPI_RxByte>
 80026c0:	4603      	mov	r3, r0
 80026c2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d006      	beq.n	80026dc <SD_TxDataBlock+0x60>
			i++;
 80026ce:	7bbb      	ldrb	r3, [r7, #14]
 80026d0:	3301      	adds	r3, #1
 80026d2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d9f0      	bls.n	80026bc <SD_TxDataBlock+0x40>
 80026da:	e000      	b.n	80026de <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80026dc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80026de:	bf00      	nop
 80026e0:	f7ff fefe 	bl	80024e0 <SPI_RxByte>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0fa      	beq.n	80026e0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d101      	bne.n	80026f8 <SD_TxDataBlock+0x7c>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <SD_TxDataBlock+0x7e>

	return FALSE;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800270e:	f7ff ff11 	bl	8002534 <SD_ReadyWait>
 8002712:	4603      	mov	r3, r0
 8002714:	2bff      	cmp	r3, #255	; 0xff
 8002716:	d001      	beq.n	800271c <SD_SendCmd+0x1a>
 8002718:	23ff      	movs	r3, #255	; 0xff
 800271a:	e042      	b.n	80027a2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff feaa 	bl	8002478 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	0e1b      	lsrs	r3, r3, #24
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fea4 	bl	8002478 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fe9e 	bl	8002478 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fe98 	bl	8002478 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fe93 	bl	8002478 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d102      	bne.n	800275e <SD_SendCmd+0x5c>
 8002758:	2395      	movs	r3, #149	; 0x95
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	e007      	b.n	800276e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b48      	cmp	r3, #72	; 0x48
 8002762:	d102      	bne.n	800276a <SD_SendCmd+0x68>
 8002764:	2387      	movs	r3, #135	; 0x87
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e001      	b.n	800276e <SD_SendCmd+0x6c>
	else crc = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fe81 	bl	8002478 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2b4c      	cmp	r3, #76	; 0x4c
 800277a:	d101      	bne.n	8002780 <SD_SendCmd+0x7e>
 800277c:	f7ff feb0 	bl	80024e0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002780:	230a      	movs	r3, #10
 8002782:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002784:	f7ff feac 	bl	80024e0 <SPI_RxByte>
 8002788:	4603      	mov	r3, r0
 800278a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800278c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002790:	2b00      	cmp	r3, #0
 8002792:	da05      	bge.n	80027a0 <SD_SendCmd+0x9e>
 8002794:	7bbb      	ldrb	r3, [r7, #14]
 8002796:	3b01      	subs	r3, #1
 8002798:	73bb      	strb	r3, [r7, #14]
 800279a:	7bbb      	ldrb	r3, [r7, #14]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f1      	bne.n	8002784 <SD_SendCmd+0x82>

	return res;
 80027a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <SD_disk_initialize+0x14>
 80027bc:	2301      	movs	r3, #1
 80027be:	e0d6      	b.n	800296e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80027c0:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <SD_disk_initialize+0x1cc>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <SD_disk_initialize+0x2a>
 80027ce:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <SD_disk_initialize+0x1cc>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e0cb      	b.n	800296e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80027d6:	f7ff fec7 	bl	8002568 <SD_PowerOn>

	/* slave select */
	SELECT();
 80027da:	f7ff fe2d 	bl	8002438 <SELECT>

	/* check disk type */
	type = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80027e2:	2100      	movs	r1, #0
 80027e4:	2040      	movs	r0, #64	; 0x40
 80027e6:	f7ff ff8c 	bl	8002702 <SD_SendCmd>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	f040 80a6 	bne.w	800293e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80027f2:	4b62      	ldr	r3, [pc, #392]	; (800297c <SD_disk_initialize+0x1d0>)
 80027f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027f8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80027fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80027fe:	2048      	movs	r0, #72	; 0x48
 8002800:	f7ff ff7f 	bl	8002702 <SD_SendCmd>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d158      	bne.n	80028bc <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e00c      	b.n	800282a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002810:	7bfc      	ldrb	r4, [r7, #15]
 8002812:	f7ff fe65 	bl	80024e0 <SPI_RxByte>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4423      	add	r3, r4
 8002820:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	3301      	adds	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d9ef      	bls.n	8002810 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002830:	7abb      	ldrb	r3, [r7, #10]
 8002832:	2b01      	cmp	r3, #1
 8002834:	f040 8083 	bne.w	800293e <SD_disk_initialize+0x192>
 8002838:	7afb      	ldrb	r3, [r7, #11]
 800283a:	2baa      	cmp	r3, #170	; 0xaa
 800283c:	d17f      	bne.n	800293e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800283e:	2100      	movs	r1, #0
 8002840:	2077      	movs	r0, #119	; 0x77
 8002842:	f7ff ff5e 	bl	8002702 <SD_SendCmd>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	d807      	bhi.n	800285c <SD_disk_initialize+0xb0>
 800284c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002850:	2069      	movs	r0, #105	; 0x69
 8002852:	f7ff ff56 	bl	8002702 <SD_SendCmd>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800285c:	4b47      	ldr	r3, [pc, #284]	; (800297c <SD_disk_initialize+0x1d0>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1eb      	bne.n	800283e <SD_disk_initialize+0x92>
 8002866:	e000      	b.n	800286a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002868:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800286a:	4b44      	ldr	r3, [pc, #272]	; (800297c <SD_disk_initialize+0x1d0>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d064      	beq.n	800293e <SD_disk_initialize+0x192>
 8002874:	2100      	movs	r1, #0
 8002876:	207a      	movs	r0, #122	; 0x7a
 8002878:	f7ff ff43 	bl	8002702 <SD_SendCmd>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d15d      	bne.n	800293e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e00c      	b.n	80028a2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002888:	7bfc      	ldrb	r4, [r7, #15]
 800288a:	f7ff fe29 	bl	80024e0 <SPI_RxByte>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	4423      	add	r3, r4
 8002898:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	3301      	adds	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d9ef      	bls.n	8002888 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80028a8:	7a3b      	ldrb	r3, [r7, #8]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <SD_disk_initialize+0x10a>
 80028b2:	230c      	movs	r3, #12
 80028b4:	e000      	b.n	80028b8 <SD_disk_initialize+0x10c>
 80028b6:	2304      	movs	r3, #4
 80028b8:	73bb      	strb	r3, [r7, #14]
 80028ba:	e040      	b.n	800293e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80028bc:	2100      	movs	r1, #0
 80028be:	2077      	movs	r0, #119	; 0x77
 80028c0:	f7ff ff1f 	bl	8002702 <SD_SendCmd>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d808      	bhi.n	80028dc <SD_disk_initialize+0x130>
 80028ca:	2100      	movs	r1, #0
 80028cc:	2069      	movs	r0, #105	; 0x69
 80028ce:	f7ff ff18 	bl	8002702 <SD_SendCmd>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d801      	bhi.n	80028dc <SD_disk_initialize+0x130>
 80028d8:	2302      	movs	r3, #2
 80028da:	e000      	b.n	80028de <SD_disk_initialize+0x132>
 80028dc:	2301      	movs	r3, #1
 80028de:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d10e      	bne.n	8002904 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80028e6:	2100      	movs	r1, #0
 80028e8:	2077      	movs	r0, #119	; 0x77
 80028ea:	f7ff ff0a 	bl	8002702 <SD_SendCmd>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d80e      	bhi.n	8002912 <SD_disk_initialize+0x166>
 80028f4:	2100      	movs	r1, #0
 80028f6:	2069      	movs	r0, #105	; 0x69
 80028f8:	f7ff ff03 	bl	8002702 <SD_SendCmd>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <SD_disk_initialize+0x166>
 8002902:	e00d      	b.n	8002920 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002904:	2100      	movs	r1, #0
 8002906:	2041      	movs	r0, #65	; 0x41
 8002908:	f7ff fefb 	bl	8002702 <SD_SendCmd>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <SD_disk_initialize+0x1d0>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e1      	bne.n	80028e0 <SD_disk_initialize+0x134>
 800291c:	e000      	b.n	8002920 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800291e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <SD_disk_initialize+0x1d0>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <SD_disk_initialize+0x18e>
 800292a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800292e:	2050      	movs	r0, #80	; 0x50
 8002930:	f7ff fee7 	bl	8002702 <SD_SendCmd>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <SD_disk_initialize+0x192>
 800293a:	2300      	movs	r3, #0
 800293c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <SD_disk_initialize+0x1d4>)
 8002940:	7bbb      	ldrb	r3, [r7, #14]
 8002942:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002944:	f7ff fd88 	bl	8002458 <DESELECT>
	SPI_RxByte();
 8002948:	f7ff fdca 	bl	80024e0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800294c:	7bbb      	ldrb	r3, [r7, #14]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <SD_disk_initialize+0x1cc>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <SD_disk_initialize+0x1cc>)
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e001      	b.n	8002968 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002964:	f7ff fe42 	bl	80025ec <SD_PowerOff>
	}

	return Stat;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <SD_disk_initialize+0x1cc>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000
 800297c:	20002cf8 	.word	0x20002cf8
 8002980:	20000224 	.word	0x20000224

08002984 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <SD_disk_status+0x14>
 8002994:	2301      	movs	r3, #1
 8002996:	e002      	b.n	800299e <SD_disk_status+0x1a>
	return Stat;
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <SD_disk_status+0x28>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000

080029b0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <SD_disk_read+0x1c>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <SD_disk_read+0x20>
 80029cc:	2304      	movs	r3, #4
 80029ce:	e051      	b.n	8002a74 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <SD_disk_read+0xcc>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <SD_disk_read+0x32>
 80029de:	2303      	movs	r3, #3
 80029e0:	e048      	b.n	8002a74 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <SD_disk_read+0xd0>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <SD_disk_read+0x44>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	025b      	lsls	r3, r3, #9
 80029f2:	607b      	str	r3, [r7, #4]

	SELECT();
 80029f4:	f7ff fd20 	bl	8002438 <SELECT>

	if (count == 1)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d111      	bne.n	8002a22 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	2051      	movs	r0, #81	; 0x51
 8002a02:	f7ff fe7e 	bl	8002702 <SD_SendCmd>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d129      	bne.n	8002a60 <SD_disk_read+0xb0>
 8002a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a10:	68b8      	ldr	r0, [r7, #8]
 8002a12:	f7ff fe03 	bl	800261c <SD_RxDataBlock>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d021      	beq.n	8002a60 <SD_disk_read+0xb0>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	e01e      	b.n	8002a60 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	2052      	movs	r0, #82	; 0x52
 8002a26:	f7ff fe6c 	bl	8002702 <SD_SendCmd>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d117      	bne.n	8002a60 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a34:	68b8      	ldr	r0, [r7, #8]
 8002a36:	f7ff fdf1 	bl	800261c <SD_RxDataBlock>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <SD_disk_read+0xa6>
				buff += 512;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a46:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ed      	bne.n	8002a30 <SD_disk_read+0x80>
 8002a54:	e000      	b.n	8002a58 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002a56:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	204c      	movs	r0, #76	; 0x4c
 8002a5c:	f7ff fe51 	bl	8002702 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002a60:	f7ff fcfa 	bl	8002458 <DESELECT>
	SPI_RxByte();
 8002a64:	f7ff fd3c 	bl	80024e0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20000224 	.word	0x20000224

08002a84 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <SD_disk_write+0x1c>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <SD_disk_write+0x20>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e06b      	b.n	8002b7c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002aa4:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <SD_disk_write+0x100>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <SD_disk_write+0x32>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e062      	b.n	8002b7c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002ab6:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <SD_disk_write+0x100>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <SD_disk_write+0x44>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e059      	b.n	8002b7c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <SD_disk_write+0x104>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <SD_disk_write+0x56>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	607b      	str	r3, [r7, #4]

	SELECT();
 8002ada:	f7ff fcad 	bl	8002438 <SELECT>

	if (count == 1)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d110      	bne.n	8002b06 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	2058      	movs	r0, #88	; 0x58
 8002ae8:	f7ff fe0b 	bl	8002702 <SD_SendCmd>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d13a      	bne.n	8002b68 <SD_disk_write+0xe4>
 8002af2:	21fe      	movs	r1, #254	; 0xfe
 8002af4:	68b8      	ldr	r0, [r7, #8]
 8002af6:	f7ff fdc1 	bl	800267c <SD_TxDataBlock>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d033      	beq.n	8002b68 <SD_disk_write+0xe4>
			count = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	e030      	b.n	8002b68 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <SD_disk_write+0x104>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002b12:	2100      	movs	r1, #0
 8002b14:	2077      	movs	r0, #119	; 0x77
 8002b16:	f7ff fdf4 	bl	8002702 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002b1a:	6839      	ldr	r1, [r7, #0]
 8002b1c:	2057      	movs	r0, #87	; 0x57
 8002b1e:	f7ff fdf0 	bl	8002702 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	2059      	movs	r0, #89	; 0x59
 8002b26:	f7ff fdec 	bl	8002702 <SD_SendCmd>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11b      	bne.n	8002b68 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002b30:	21fc      	movs	r1, #252	; 0xfc
 8002b32:	68b8      	ldr	r0, [r7, #8]
 8002b34:	f7ff fda2 	bl	800267c <SD_TxDataBlock>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <SD_disk_write+0xd0>
				buff += 512;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b44:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ee      	bne.n	8002b30 <SD_disk_write+0xac>
 8002b52:	e000      	b.n	8002b56 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002b54:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002b56:	21fd      	movs	r1, #253	; 0xfd
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7ff fd8f 	bl	800267c <SD_TxDataBlock>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <SD_disk_write+0xe4>
			{
				count = 1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002b68:	f7ff fc76 	bl	8002458 <DESELECT>
	SPI_RxByte();
 8002b6c:	f7ff fcb8 	bl	80024e0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000224 	.word	0x20000224

08002b8c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b08b      	sub	sp, #44	; 0x2c
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	603a      	str	r2, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SD_disk_ioctl+0x1e>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e115      	b.n	8002dd6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d124      	bne.n	8002c00 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d012      	beq.n	8002be4 <SD_disk_ioctl+0x58>
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	dc1a      	bgt.n	8002bf8 <SD_disk_ioctl+0x6c>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <SD_disk_ioctl+0x40>
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d006      	beq.n	8002bd8 <SD_disk_ioctl+0x4c>
 8002bca:	e015      	b.n	8002bf8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002bcc:	f7ff fd0e 	bl	80025ec <SD_PowerOff>
			res = RES_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002bd6:	e0fc      	b.n	8002dd2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002bd8:	f7ff fcc6 	bl	8002568 <SD_PowerOn>
			res = RES_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002be2:	e0f6      	b.n	8002dd2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	1c5c      	adds	r4, r3, #1
 8002be8:	f7ff fd0c 	bl	8002604 <SD_CheckPower>
 8002bec:	4603      	mov	r3, r0
 8002bee:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002bf6:	e0ec      	b.n	8002dd2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bfe:	e0e8      	b.n	8002dd2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002c00:	4b77      	ldr	r3, [pc, #476]	; (8002de0 <SD_disk_ioctl+0x254>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <SD_disk_ioctl+0x86>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0e1      	b.n	8002dd6 <SD_disk_ioctl+0x24a>

		SELECT();
 8002c12:	f7ff fc11 	bl	8002438 <SELECT>

		switch (ctrl)
 8002c16:	79bb      	ldrb	r3, [r7, #6]
 8002c18:	2b0d      	cmp	r3, #13
 8002c1a:	f200 80cb 	bhi.w	8002db4 <SD_disk_ioctl+0x228>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <SD_disk_ioctl+0x98>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002d1f 	.word	0x08002d1f
 8002c28:	08002c5d 	.word	0x08002c5d
 8002c2c:	08002d0f 	.word	0x08002d0f
 8002c30:	08002db5 	.word	0x08002db5
 8002c34:	08002db5 	.word	0x08002db5
 8002c38:	08002db5 	.word	0x08002db5
 8002c3c:	08002db5 	.word	0x08002db5
 8002c40:	08002db5 	.word	0x08002db5
 8002c44:	08002db5 	.word	0x08002db5
 8002c48:	08002db5 	.word	0x08002db5
 8002c4c:	08002db5 	.word	0x08002db5
 8002c50:	08002d31 	.word	0x08002d31
 8002c54:	08002d55 	.word	0x08002d55
 8002c58:	08002d79 	.word	0x08002d79
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2049      	movs	r0, #73	; 0x49
 8002c60:	f7ff fd4f 	bl	8002702 <SD_SendCmd>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 80a8 	bne.w	8002dbc <SD_disk_ioctl+0x230>
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2110      	movs	r1, #16
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fcd2 	bl	800261c <SD_RxDataBlock>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 809e 	beq.w	8002dbc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002c80:	7b3b      	ldrb	r3, [r7, #12]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10e      	bne.n	8002ca8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002c8a:	7d7b      	ldrb	r3, [r7, #21]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	7d3b      	ldrb	r3, [r7, #20]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002c9e:	8bfb      	ldrh	r3, [r7, #30]
 8002ca0:	029a      	lsls	r2, r3, #10
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e02e      	b.n	8002d06 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002ca8:	7c7b      	ldrb	r3, [r7, #17]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	7dbb      	ldrb	r3, [r7, #22]
 8002cb2:	09db      	lsrs	r3, r3, #7
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	7d7b      	ldrb	r3, [r7, #21]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 0306 	and.w	r3, r3, #6
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3302      	adds	r3, #2
 8002ccc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002cd0:	7d3b      	ldrb	r3, [r7, #20]
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	7cbb      	ldrb	r3, [r7, #18]
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002cf8:	8bfa      	ldrh	r2, [r7, #30]
 8002cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002cfe:	3b09      	subs	r3, #9
 8002d00:	409a      	lsls	r2, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002d0c:	e056      	b.n	8002dbc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d14:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002d1c:	e055      	b.n	8002dca <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002d1e:	f7ff fc09 	bl	8002534 <SD_ReadyWait>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2bff      	cmp	r3, #255	; 0xff
 8002d26:	d14b      	bne.n	8002dc0 <SD_disk_ioctl+0x234>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002d2e:	e047      	b.n	8002dc0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002d30:	2100      	movs	r1, #0
 8002d32:	2049      	movs	r0, #73	; 0x49
 8002d34:	f7ff fce5 	bl	8002702 <SD_SendCmd>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d142      	bne.n	8002dc4 <SD_disk_ioctl+0x238>
 8002d3e:	2110      	movs	r1, #16
 8002d40:	6a38      	ldr	r0, [r7, #32]
 8002d42:	f7ff fc6b 	bl	800261c <SD_RxDataBlock>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03b      	beq.n	8002dc4 <SD_disk_ioctl+0x238>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002d52:	e037      	b.n	8002dc4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002d54:	2100      	movs	r1, #0
 8002d56:	204a      	movs	r0, #74	; 0x4a
 8002d58:	f7ff fcd3 	bl	8002702 <SD_SendCmd>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d132      	bne.n	8002dc8 <SD_disk_ioctl+0x23c>
 8002d62:	2110      	movs	r1, #16
 8002d64:	6a38      	ldr	r0, [r7, #32]
 8002d66:	f7ff fc59 	bl	800261c <SD_RxDataBlock>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d02b      	beq.n	8002dc8 <SD_disk_ioctl+0x23c>
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002d76:	e027      	b.n	8002dc8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002d78:	2100      	movs	r1, #0
 8002d7a:	207a      	movs	r0, #122	; 0x7a
 8002d7c:	f7ff fcc1 	bl	8002702 <SD_SendCmd>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d116      	bne.n	8002db4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002d8c:	e00b      	b.n	8002da6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002d8e:	6a3c      	ldr	r4, [r7, #32]
 8002d90:	1c63      	adds	r3, r4, #1
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	f7ff fba4 	bl	80024e0 <SPI_RxByte>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002da0:	3301      	adds	r3, #1
 8002da2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d9ef      	bls.n	8002d8e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002db4:	2304      	movs	r3, #4
 8002db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002dba:	e006      	b.n	8002dca <SD_disk_ioctl+0x23e>
			break;
 8002dbc:	bf00      	nop
 8002dbe:	e004      	b.n	8002dca <SD_disk_ioctl+0x23e>
			break;
 8002dc0:	bf00      	nop
 8002dc2:	e002      	b.n	8002dca <SD_disk_ioctl+0x23e>
			break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <SD_disk_ioctl+0x23e>
			break;
 8002dc8:	bf00      	nop
		}

		DESELECT();
 8002dca:	f7ff fb45 	bl	8002458 <DESELECT>
		SPI_RxByte();
 8002dce:	f7ff fb87 	bl	80024e0 <SPI_RxByte>
	}

	return res;
 8002dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	372c      	adds	r7, #44	; 0x2c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000

08002de4 <bufsize>:
float packVoltage, packCurrent, cellVoltageHigh, cellVoltageLow, maxImbalanceVoltage;


/*******************************************************************************/
int bufsize (char *buf)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	int i=0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8002df0:	e002      	b.n	8002df8 <bufsize+0x14>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3301      	adds	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f6      	bne.n	8002df2 <bufsize+0xe>
	return i;
 8002e04:	68fb      	ldr	r3, [r7, #12]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <clear_buffer>:

void clear_buffer (void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	e007      	b.n	8002e30 <clear_buffer+0x1c>
 8002e20:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <clear_buffer+0x34>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	dbf3      	blt.n	8002e20 <clear_buffer+0xc>
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20001648 	.word	0x20001648

08002e4c <send_uart>:

void send_uart (char *string)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fd f9bb 	bl	80001d0 <strlen>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4803      	ldr	r0, [pc, #12]	; (8002e78 <send_uart+0x2c>)
 8002e6a:	f005 fd2d 	bl	80088c8 <HAL_UART_Transmit>
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20001b14 	.word	0x20001b14
 8002e7c:	00000000 	.word	0x00000000

08002e80 <write_to_csvfile>:

void write_to_csvfile (void)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b0da      	sub	sp, #360	; 0x168
 8002e86:	af30      	add	r7, sp, #192	; 0xc0

		  //dummy_timer += 1;
		  //dummy_cell_votlages += 1;
		  //dummy_pack_voltage += 11;

		  dummy_pack_current += 0.1;
 8002e88:	4bad      	ldr	r3, [pc, #692]	; (8003140 <write_to_csvfile+0x2c0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fb5b 	bl	8000548 <__aeabi_f2d>
 8002e92:	a3a9      	add	r3, pc, #676	; (adr r3, 8003138 <write_to_csvfile+0x2b8>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd f9f8 	bl	800028c <__adddf3>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7fd fea0 	bl	8000be8 <__aeabi_d2f>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4aa5      	ldr	r2, [pc, #660]	; (8003140 <write_to_csvfile+0x2c0>)
 8002eac:	6013      	str	r3, [r2, #0]
		  //dummy_temperature += 1.0;

		  fresult = f_open(&fil, "file3.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8002eae:	2203      	movs	r2, #3
 8002eb0:	49a4      	ldr	r1, [pc, #656]	; (8003144 <write_to_csvfile+0x2c4>)
 8002eb2:	48a5      	ldr	r0, [pc, #660]	; (8003148 <write_to_csvfile+0x2c8>)
 8002eb4:	f009 fcfa 	bl	800c8ac <f_open>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4ba3      	ldr	r3, [pc, #652]	; (800314c <write_to_csvfile+0x2cc>)
 8002ebe:	701a      	strb	r2, [r3, #0]
		  /* Move to offset to the end of the file */
		  fresult = f_lseek(&fil, f_size(&fil));
 8002ec0:	4ba1      	ldr	r3, [pc, #644]	; (8003148 <write_to_csvfile+0x2c8>)
 8002ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	489e      	ldr	r0, [pc, #632]	; (8003148 <write_to_csvfile+0x2c8>)
 8002ece:	f00a fdb9 	bl	800da44 <f_lseek>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b9d      	ldr	r3, [pc, #628]	; (800314c <write_to_csvfile+0x2cc>)
 8002ed8:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002eda:	f001 fed5 	bl	8004c88 <HAL_GetTick>
 8002ede:	4603      	mov	r3, r0
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd fb0f 	bl	8000504 <__aeabi_ui2d>
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	4b99      	ldr	r3, [pc, #612]	; (8003150 <write_to_csvfile+0x2d0>)
 8002eec:	f7fd fcae 	bl	800084c <__aeabi_ddiv>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002ef8:	4b96      	ldr	r3, [pc, #600]	; (8003154 <write_to_csvfile+0x2d4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb23 	bl	8000548 <__aeabi_f2d>
 8002f02:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002f06:	4b93      	ldr	r3, [pc, #588]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fb1c 	bl	8000548 <__aeabi_f2d>
 8002f10:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002f14:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f16:	689b      	ldr	r3, [r3, #8]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fb15 	bl	8000548 <__aeabi_f2d>
 8002f1e:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002f22:	4b8c      	ldr	r3, [pc, #560]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f24:	68db      	ldr	r3, [r3, #12]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fb0e 	bl	8000548 <__aeabi_f2d>
 8002f2c:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002f30:	4b88      	ldr	r3, [pc, #544]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f32:	691b      	ldr	r3, [r3, #16]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fb07 	bl	8000548 <__aeabi_f2d>
 8002f3a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f40:	695b      	ldr	r3, [r3, #20]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fb00 	bl	8000548 <__aeabi_f2d>
 8002f48:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				  	(HAL_GetTick()/ 1000.0),cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8002f4c:	4b81      	ldr	r3, [pc, #516]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd faf9 	bl	8000548 <__aeabi_f2d>
 8002f56:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002f5a:	4b7e      	ldr	r3, [pc, #504]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd faf2 	bl	8000548 <__aeabi_f2d>
 8002f64:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002f68:	4b7a      	ldr	r3, [pc, #488]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd faeb 	bl	8000548 <__aeabi_f2d>
 8002f72:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002f76:	4b77      	ldr	r3, [pc, #476]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fae4 	bl	8000548 <__aeabi_f2d>
 8002f80:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002f84:	4b73      	ldr	r3, [pc, #460]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fadd 	bl	8000548 <__aeabi_f2d>
 8002f8e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002f92:	4b70      	ldr	r3, [pc, #448]	; (8003154 <write_to_csvfile+0x2d4>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fad6 	bl	8000548 <__aeabi_f2d>
 8002f9c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8002fa0:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <write_to_csvfile+0x2d4>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd facf 	bl	8000548 <__aeabi_f2d>
 8002faa:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8002fae:	4b69      	ldr	r3, [pc, #420]	; (8003154 <write_to_csvfile+0x2d4>)
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fac8 	bl	8000548 <__aeabi_f2d>
 8002fb8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8002fbc:	4b65      	ldr	r3, [pc, #404]	; (8003154 <write_to_csvfile+0x2d4>)
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fac1 	bl	8000548 <__aeabi_f2d>
 8002fc6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8002fca:	4b62      	ldr	r3, [pc, #392]	; (8003154 <write_to_csvfile+0x2d4>)
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd faba 	bl	8000548 <__aeabi_f2d>
 8002fd4:	e9c7 0108 	strd	r0, r1, [r7, #32]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <write_to_csvfile+0x2d4>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fab3 	bl	8000548 <__aeabi_f2d>
 8002fe2:	e9c7 0106 	strd	r0, r1, [r7, #24]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <write_to_csvfile+0x2d4>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd faac 	bl	8000548 <__aeabi_f2d>
 8002ff0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002ff4:	4b58      	ldr	r3, [pc, #352]	; (8003158 <write_to_csvfile+0x2d8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd faa5 	bl	8000548 <__aeabi_f2d>
 8002ffe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003002:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <write_to_csvfile+0x2c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa9e 	bl	8000548 <__aeabi_f2d>
 800300c:	e9c7 0100 	strd	r0, r1, [r7]
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 8003010:	4b52      	ldr	r3, [pc, #328]	; (800315c <write_to_csvfile+0x2dc>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fa97 	bl	8000548 <__aeabi_f2d>
 800301a:	4682      	mov	sl, r0
 800301c:	468b      	mov	fp, r1
					cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17], packVoltage, dummy_pack_current,auxVoltagesIndividual[4].auxVoltage, auxVoltagesIndividual[5].auxVoltage, cellVoltageHigh, cellVoltageLow );
 800301e:	4b4f      	ldr	r3, [pc, #316]	; (800315c <write_to_csvfile+0x2dc>)
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f \r\n",
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fa90 	bl	8000548 <__aeabi_f2d>
 8003028:	4680      	mov	r8, r0
 800302a:	4689      	mov	r9, r1
 800302c:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <write_to_csvfile+0x2e0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa89 	bl	8000548 <__aeabi_f2d>
 8003036:	4604      	mov	r4, r0
 8003038:	460d      	mov	r5, r1
 800303a:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <write_to_csvfile+0x2e4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa82 	bl	8000548 <__aeabi_f2d>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
 800304c:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8003050:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 8003054:	e9cd ab28 	strd	sl, fp, [sp, #160]	; 0xa0
 8003058:	ed97 7b00 	vldr	d7, [r7]
 800305c:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8003060:	ed97 7b02 	vldr	d7, [r7, #8]
 8003064:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8003068:	ed97 7b04 	vldr	d7, [r7, #16]
 800306c:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8003070:	ed97 7b06 	vldr	d7, [r7, #24]
 8003074:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8003078:	ed97 7b08 	vldr	d7, [r7, #32]
 800307c:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8003080:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003084:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003088:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800308c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8003090:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003094:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003098:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800309c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 80030a0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80030a4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80030a8:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80030ac:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80030b0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80030b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80030b8:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80030bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80030c0:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80030c4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80030c8:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80030cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80030d0:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80030d4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80030d8:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80030dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80030e0:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80030e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80030e8:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 80030ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80030f0:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 80030f4:	ed8d 7b00 	vstr	d7, [sp]
 80030f8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80030fc:	491a      	ldr	r1, [pc, #104]	; (8003168 <write_to_csvfile+0x2e8>)
 80030fe:	481b      	ldr	r0, [pc, #108]	; (800316c <write_to_csvfile+0x2ec>)
 8003100:	f00c f9b2 	bl	800f468 <siprintf>
		  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8003104:	4819      	ldr	r0, [pc, #100]	; (800316c <write_to_csvfile+0x2ec>)
 8003106:	f7ff fe6d 	bl	8002de4 <bufsize>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	4b18      	ldr	r3, [pc, #96]	; (8003170 <write_to_csvfile+0x2f0>)
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <write_to_csvfile+0x2ec>)
 8003112:	480d      	ldr	r0, [pc, #52]	; (8003148 <write_to_csvfile+0x2c8>)
 8003114:	f00a f91a 	bl	800d34c <f_write>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <write_to_csvfile+0x2cc>)
 800311e:	701a      	strb	r2, [r3, #0]
		  //send_uart(buffer);
		  f_close (&fil);
 8003120:	4809      	ldr	r0, [pc, #36]	; (8003148 <write_to_csvfile+0x2c8>)
 8003122:	f00a fc64 	bl	800d9ee <f_close>

		  clear_buffer();
 8003126:	f7ff fe75 	bl	8002e14 <clear_buffer>
}
 800312a:	bf00      	nop
 800312c:	37a8      	adds	r7, #168	; 0xa8
 800312e:	46bd      	mov	sp, r7
 8003130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003134:	f3af 8000 	nop.w
 8003138:	9999999a 	.word	0x9999999a
 800313c:	3fb99999 	.word	0x3fb99999
 8003140:	20001cb4 	.word	0x20001cb4
 8003144:	08011730 	.word	0x08011730
 8003148:	20001cc4 	.word	0x20001cc4
 800314c:	20001aa4 	.word	0x20001aa4
 8003150:	408f4000 	.word	0x408f4000
 8003154:	200004fc 	.word	0x200004fc
 8003158:	20002cf0 	.word	0x20002cf0
 800315c:	20001ba4 	.word	0x20001ba4
 8003160:	200004f4 	.word	0x200004f4
 8003164:	200015f8 	.word	0x200015f8
 8003168:	0801173c 	.word	0x0801173c
 800316c:	20001648 	.word	0x20001648
 8003170:	20001a70 	.word	0x20001a70

08003174 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003180:	2100      	movs	r1, #0
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f002 f894 	bl	80052b0 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2 )
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d102      	bne.n	8003196 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		CAN_data_checkFlag = 1;
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]
	}
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20001b0c 	.word	0x20001b0c
 80031a4:	20001c98 	.word	0x20001c98
 80031a8:	2000022c 	.word	0x2000022c

080031ac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, uart_rx_data, 4);
 80031b4:	2204      	movs	r2, #4
 80031b6:	4905      	ldr	r1, [pc, #20]	; (80031cc <HAL_UART_RxCpltCallback+0x20>)
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <HAL_UART_RxCpltCallback+0x24>)
 80031ba:	f005 fc19 	bl	80089f0 <HAL_UART_Receive_IT>
  uart_rx_flag = 1;
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_UART_RxCpltCallback+0x28>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20001cb8 	.word	0x20001cb8
 80031d0:	20001b14 	.word	0x20001b14
 80031d4:	20000228 	.word	0x20000228

080031d8 <set_time>:



void set_time(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 80031ec:	2300      	movs	r3, #0
 80031ee:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x53;
 80031f4:	2353      	movs	r3, #83	; 0x53
 80031f6:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	2201      	movs	r2, #1
 8003208:	4619      	mov	r1, r3
 800320a:	4812      	ldr	r0, [pc, #72]	; (8003254 <set_time+0x7c>)
 800320c:	f004 faab 	bl	8007766 <HAL_RTC_SetTime>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <set_time+0x42>
	  {
	    Error_Handler();
 8003216:	f001 f9e7 	bl	80045e8 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800321a:	2303      	movs	r3, #3
 800321c:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JUNE;
 800321e:	2306      	movs	r3, #6
 8003220:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x22;
 8003222:	2322      	movs	r3, #34	; 0x22
 8003224:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x22;
 8003226:	2322      	movs	r3, #34	; 0x22
 8003228:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800322a:	463b      	mov	r3, r7
 800322c:	2201      	movs	r2, #1
 800322e:	4619      	mov	r1, r3
 8003230:	4808      	ldr	r0, [pc, #32]	; (8003254 <set_time+0x7c>)
 8003232:	f004 fbb3 	bl	800799c <HAL_RTC_SetDate>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <set_time+0x68>
	  {
	    Error_Handler();
 800323c:	f001 f9d4 	bl	80045e8 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 8003240:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003244:	2101      	movs	r1, #1
 8003246:	4803      	ldr	r0, [pc, #12]	; (8003254 <set_time+0x7c>)
 8003248:	f004 fd2e 	bl	8007ca8 <HAL_RTCEx_BKUPWrite>

	  /* USER CODE END RTC_Init 2 */
}
 800324c:	bf00      	nop
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20001a48 	.word	0x20001a48

08003258 <get_time>:


void get_time(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800325e:	463b      	mov	r3, r7
 8003260:	2200      	movs	r2, #0
 8003262:	4619      	mov	r1, r3
 8003264:	4817      	ldr	r0, [pc, #92]	; (80032c4 <get_time+0x6c>)
 8003266:	f004 fb3b 	bl	80078e0 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	2200      	movs	r2, #0
 8003270:	4619      	mov	r1, r3
 8003272:	4814      	ldr	r0, [pc, #80]	; (80032c4 <get_time+0x6c>)
 8003274:	f004 fc39 	bl	8007aea <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf(buffer,"Time is: %02d:%02d:%02d\r\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8003278:	783b      	ldrb	r3, [r7, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	787b      	ldrb	r3, [r7, #1]
 800327e:	4619      	mov	r1, r3
 8003280:	78bb      	ldrb	r3, [r7, #2]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	460b      	mov	r3, r1
 8003286:	4910      	ldr	r1, [pc, #64]	; (80032c8 <get_time+0x70>)
 8003288:	4810      	ldr	r0, [pc, #64]	; (80032cc <get_time+0x74>)
 800328a:	f00c f8ed 	bl	800f468 <siprintf>
 send_uart(buffer);
 800328e:	480f      	ldr	r0, [pc, #60]	; (80032cc <get_time+0x74>)
 8003290:	f7ff fddc 	bl	8002e4c <send_uart>
 clear_buffer();
 8003294:	f7ff fdbe 	bl	8002e14 <clear_buffer>
/* Display date Format: dd-mm-yy */
 sprintf(buffer,"Date is : %02d-%02d-%2d\r\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8003298:	7dbb      	ldrb	r3, [r7, #22]
 800329a:	461a      	mov	r2, r3
 800329c:	7d7b      	ldrb	r3, [r7, #21]
 800329e:	4619      	mov	r1, r3
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	460b      	mov	r3, r1
 80032aa:	4909      	ldr	r1, [pc, #36]	; (80032d0 <get_time+0x78>)
 80032ac:	4807      	ldr	r0, [pc, #28]	; (80032cc <get_time+0x74>)
 80032ae:	f00c f8db 	bl	800f468 <siprintf>
 send_uart(buffer);
 80032b2:	4806      	ldr	r0, [pc, #24]	; (80032cc <get_time+0x74>)
 80032b4:	f7ff fdca 	bl	8002e4c <send_uart>
 clear_buffer();
 80032b8:	f7ff fdac 	bl	8002e14 <clear_buffer>
}
 80032bc:	bf00      	nop
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20001a48 	.word	0x20001a48
 80032c8:	080117bc 	.word	0x080117bc
 80032cc:	20001648 	.word	0x20001648
 80032d0:	080117d8 	.word	0x080117d8

080032d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //interrupt callback function for Charger detect
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI5 (PB5 Pin)
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d119      	bne.n	8003318 <HAL_GPIO_EXTI_Callback+0x44>
    {
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80032e4:	2120      	movs	r1, #32
 80032e6:	480e      	ldr	r0, [pc, #56]	; (8003320 <HAL_GPIO_EXTI_Callback+0x4c>)
 80032e8:	f002 fe4c 	bl	8005f84 <HAL_GPIO_ReadPin>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_GPIO_EXTI_Callback+0x32>
    	{
    		sprintf(buffer, "Charger detected\r\n");
 80032f2:	490c      	ldr	r1, [pc, #48]	; (8003324 <HAL_GPIO_EXTI_Callback+0x50>)
 80032f4:	480c      	ldr	r0, [pc, #48]	; (8003328 <HAL_GPIO_EXTI_Callback+0x54>)
 80032f6:	f00c f8b7 	bl	800f468 <siprintf>
    		send_uart(buffer);
 80032fa:	480b      	ldr	r0, [pc, #44]	; (8003328 <HAL_GPIO_EXTI_Callback+0x54>)
 80032fc:	f7ff fda6 	bl	8002e4c <send_uart>
    		clear_buffer();
 8003300:	f7ff fd88 	bl	8002e14 <clear_buffer>
    		sprintf(buffer, "Charger has been disconnected\r\n");
    		send_uart(buffer);
    		clear_buffer();
    	}
    }
}
 8003304:	e008      	b.n	8003318 <HAL_GPIO_EXTI_Callback+0x44>
    		sprintf(buffer, "Charger has been disconnected\r\n");
 8003306:	4909      	ldr	r1, [pc, #36]	; (800332c <HAL_GPIO_EXTI_Callback+0x58>)
 8003308:	4807      	ldr	r0, [pc, #28]	; (8003328 <HAL_GPIO_EXTI_Callback+0x54>)
 800330a:	f00c f8ad 	bl	800f468 <siprintf>
    		send_uart(buffer);
 800330e:	4806      	ldr	r0, [pc, #24]	; (8003328 <HAL_GPIO_EXTI_Callback+0x54>)
 8003310:	f7ff fd9c 	bl	8002e4c <send_uart>
    		clear_buffer();
 8003314:	f7ff fd7e 	bl	8002e14 <clear_buffer>
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	48000400 	.word	0x48000400
 8003324:	080117f4 	.word	0x080117f4
 8003328:	20001648 	.word	0x20001648
 800332c:	08011808 	.word	0x08011808

08003330 <sd_init>:
		HAL_Delay(0.01);
	}
}

void sd_init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	  //mount SD card and check SD card mounting status
	  fresult = f_mount(&fs, "/", 1);
 8003334:	2201      	movs	r2, #1
 8003336:	49b4      	ldr	r1, [pc, #720]	; (8003608 <sd_init+0x2d8>)
 8003338:	48b4      	ldr	r0, [pc, #720]	; (800360c <sd_init+0x2dc>)
 800333a:	f009 fa6d 	bl	800c818 <f_mount>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	4bb3      	ldr	r3, [pc, #716]	; (8003610 <sd_init+0x2e0>)
 8003344:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK)
 8003346:	4bb2      	ldr	r3, [pc, #712]	; (8003610 <sd_init+0x2e0>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <sd_init+0x26>
	  	{
	  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 800334e:	48b1      	ldr	r0, [pc, #708]	; (8003614 <sd_init+0x2e4>)
 8003350:	f7ff fd7c 	bl	8002e4c <send_uart>
 8003354:	e002      	b.n	800335c <sd_init+0x2c>

	  	}
	  	else
	  	{
	  		send_uart("SD CARD mounted successfully...\r\n");
 8003356:	48b0      	ldr	r0, [pc, #704]	; (8003618 <sd_init+0x2e8>)
 8003358:	f7ff fd78 	bl	8002e4c <send_uart>
	  	}

	  	/*************** Card capacity details ********************/

	  	/* Check free space */
	  	f_getfree("", &fre_clust, &pfs);
 800335c:	4aaf      	ldr	r2, [pc, #700]	; (800361c <sd_init+0x2ec>)
 800335e:	49b0      	ldr	r1, [pc, #704]	; (8003620 <sd_init+0x2f0>)
 8003360:	48b0      	ldr	r0, [pc, #704]	; (8003624 <sd_init+0x2f4>)
 8003362:	f00a fea3 	bl	800e0ac <f_getfree>

	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8003366:	4bad      	ldr	r3, [pc, #692]	; (800361c <sd_init+0x2ec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336e:	3314      	adds	r3, #20
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	1e9a      	subs	r2, r3, #2
 8003374:	4ba9      	ldr	r3, [pc, #676]	; (800361c <sd_init+0x2ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337c:	3302      	adds	r3, #2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	fb03 f302 	mul.w	r3, r3, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f8bd 	bl	8000504 <__aeabi_ui2d>
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	4ba6      	ldr	r3, [pc, #664]	; (8003628 <sd_init+0x2f8>)
 8003390:	f7fd f932 	bl	80005f8 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	f7fd fc04 	bl	8000ba8 <__aeabi_d2uiz>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4aa2      	ldr	r2, [pc, #648]	; (800362c <sd_init+0x2fc>)
 80033a4:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 80033a6:	4ba1      	ldr	r3, [pc, #644]	; (800362c <sd_init+0x2fc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	49a0      	ldr	r1, [pc, #640]	; (8003630 <sd_init+0x300>)
 80033ae:	48a1      	ldr	r0, [pc, #644]	; (8003634 <sd_init+0x304>)
 80033b0:	f00c f85a 	bl	800f468 <siprintf>
	  	send_uart(buffer);
 80033b4:	489f      	ldr	r0, [pc, #636]	; (8003634 <sd_init+0x304>)
 80033b6:	f7ff fd49 	bl	8002e4c <send_uart>
	  	clear_buffer();
 80033ba:	f7ff fd2b 	bl	8002e14 <clear_buffer>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80033be:	4b97      	ldr	r3, [pc, #604]	; (800361c <sd_init+0x2ec>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c6:	3302      	adds	r3, #2
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b94      	ldr	r3, [pc, #592]	; (8003620 <sd_init+0x2f0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fb03 f302 	mul.w	r3, r3, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f895 	bl	8000504 <__aeabi_ui2d>
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	4b92      	ldr	r3, [pc, #584]	; (8003628 <sd_init+0x2f8>)
 80033e0:	f7fd f90a 	bl	80005f8 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fd fbdc 	bl	8000ba8 <__aeabi_d2uiz>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4a91      	ldr	r2, [pc, #580]	; (8003638 <sd_init+0x308>)
 80033f4:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 80033f6:	4b90      	ldr	r3, [pc, #576]	; (8003638 <sd_init+0x308>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	498f      	ldr	r1, [pc, #572]	; (800363c <sd_init+0x30c>)
 80033fe:	488d      	ldr	r0, [pc, #564]	; (8003634 <sd_init+0x304>)
 8003400:	f00c f832 	bl	800f468 <siprintf>
	  	send_uart(buffer);
 8003404:	488b      	ldr	r0, [pc, #556]	; (8003634 <sd_init+0x304>)
 8003406:	f7ff fd21 	bl	8002e4c <send_uart>
	  	clear_buffer();
 800340a:	f7ff fd03 	bl	8002e14 <clear_buffer>


	  	/************* The following operation is using PUTS and GETS *********************/

	  	/* Open file to write/ create a file if it doesn't exist */
	    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800340e:	2213      	movs	r2, #19
 8003410:	498b      	ldr	r1, [pc, #556]	; (8003640 <sd_init+0x310>)
 8003412:	488c      	ldr	r0, [pc, #560]	; (8003644 <sd_init+0x314>)
 8003414:	f009 fa4a 	bl	800c8ac <f_open>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	4b7c      	ldr	r3, [pc, #496]	; (8003610 <sd_init+0x2e0>)
 800341e:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("This data is written to FILE1.txt and it was written using f_puts ", &fil);
 8003420:	4988      	ldr	r1, [pc, #544]	; (8003644 <sd_init+0x314>)
 8003422:	4889      	ldr	r0, [pc, #548]	; (8003648 <sd_init+0x318>)
 8003424:	f00a ff9e 	bl	800e364 <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 8003428:	4886      	ldr	r0, [pc, #536]	; (8003644 <sd_init+0x314>)
 800342a:	f00a fae0 	bl	800d9ee <f_close>
 800342e:	4603      	mov	r3, r0
 8003430:	461a      	mov	r2, r3
 8003432:	4b77      	ldr	r3, [pc, #476]	; (8003610 <sd_init+0x2e0>)
 8003434:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <sd_init+0x2e0>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <sd_init+0x114>
	  	{
	  		send_uart ("File1.txt created and the data is written \r\n");
 800343e:	4883      	ldr	r0, [pc, #524]	; (800364c <sd_init+0x31c>)
 8003440:	f7ff fd04 	bl	8002e4c <send_uart>
	  	}

	  	/* Open file to read */
	  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8003444:	2201      	movs	r2, #1
 8003446:	497e      	ldr	r1, [pc, #504]	; (8003640 <sd_init+0x310>)
 8003448:	487e      	ldr	r0, [pc, #504]	; (8003644 <sd_init+0x314>)
 800344a:	f009 fa2f 	bl	800c8ac <f_open>
 800344e:	4603      	mov	r3, r0
 8003450:	461a      	mov	r2, r3
 8003452:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <sd_init+0x2e0>)
 8003454:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	f_gets(buffer, f_size(&fil), &fil);
 8003456:	4b7b      	ldr	r3, [pc, #492]	; (8003644 <sd_init+0x314>)
 8003458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345c:	330c      	adds	r3, #12
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a78      	ldr	r2, [pc, #480]	; (8003644 <sd_init+0x314>)
 8003462:	4619      	mov	r1, r3
 8003464:	4873      	ldr	r0, [pc, #460]	; (8003634 <sd_init+0x304>)
 8003466:	f00a ff03 	bl	800e270 <f_gets>

	  	send_uart("File1.txt is opened and it contains the data as shown below\r\n");
 800346a:	4879      	ldr	r0, [pc, #484]	; (8003650 <sd_init+0x320>)
 800346c:	f7ff fcee 	bl	8002e4c <send_uart>
	  	send_uart(buffer);
 8003470:	4870      	ldr	r0, [pc, #448]	; (8003634 <sd_init+0x304>)
 8003472:	f7ff fceb 	bl	8002e4c <send_uart>
	  	send_uart("\r\n");
 8003476:	4877      	ldr	r0, [pc, #476]	; (8003654 <sd_init+0x324>)
 8003478:	f7ff fce8 	bl	8002e4c <send_uart>
	  	/* Close file */
	  	f_close(&fil);
 800347c:	4871      	ldr	r0, [pc, #452]	; (8003644 <sd_init+0x314>)
 800347e:	f00a fab6 	bl	800d9ee <f_close>
	  	clear_buffer();
 8003482:	f7ff fcc7 	bl	8002e14 <clear_buffer>
	  	/**************** The following operation is using f_write and f_read **************************/

	  	/* Create second file with read write access and open it */
	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8003486:	220a      	movs	r2, #10
 8003488:	4973      	ldr	r1, [pc, #460]	; (8003658 <sd_init+0x328>)
 800348a:	486e      	ldr	r0, [pc, #440]	; (8003644 <sd_init+0x314>)
 800348c:	f009 fa0e 	bl	800c8ac <f_open>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	4b5e      	ldr	r3, [pc, #376]	; (8003610 <sd_init+0x2e0>)
 8003496:	701a      	strb	r2, [r3, #0]

	  	/* Writing text */
	  	strcpy (buffer, "This is File2.txt, written using f_write and it says SD card unit test for BMS\r\n");
 8003498:	4a66      	ldr	r2, [pc, #408]	; (8003634 <sd_init+0x304>)
 800349a:	4b70      	ldr	r3, [pc, #448]	; (800365c <sd_init+0x32c>)
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	2351      	movs	r3, #81	; 0x51
 80034a2:	461a      	mov	r2, r3
 80034a4:	f00b faa6 	bl	800e9f4 <memcpy>

	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80034a8:	4862      	ldr	r0, [pc, #392]	; (8003634 <sd_init+0x304>)
 80034aa:	f7ff fc9b 	bl	8002de4 <bufsize>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b6b      	ldr	r3, [pc, #428]	; (8003660 <sd_init+0x330>)
 80034b4:	495f      	ldr	r1, [pc, #380]	; (8003634 <sd_init+0x304>)
 80034b6:	4863      	ldr	r0, [pc, #396]	; (8003644 <sd_init+0x314>)
 80034b8:	f009 ff48 	bl	800d34c <f_write>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	4b53      	ldr	r3, [pc, #332]	; (8003610 <sd_init+0x2e0>)
 80034c2:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 80034c4:	4b52      	ldr	r3, [pc, #328]	; (8003610 <sd_init+0x2e0>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <sd_init+0x1a2>
	  	{
	  		send_uart ("File2.txt created and the data is written \r\n");
 80034cc:	4865      	ldr	r0, [pc, #404]	; (8003664 <sd_init+0x334>)
 80034ce:	f7ff fcbd 	bl	8002e4c <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 80034d2:	485c      	ldr	r0, [pc, #368]	; (8003644 <sd_init+0x314>)
 80034d4:	f00a fa8b 	bl	800d9ee <f_close>
	  	// clearing buffer to show that result obtained is from the file
	  	clear_buffer();
 80034d8:	f7ff fc9c 	bl	8002e14 <clear_buffer>
	  	/* Open second file to read */
	  	fresult = f_open(&fil, "file2.txt", FA_READ);
 80034dc:	2201      	movs	r2, #1
 80034de:	495e      	ldr	r1, [pc, #376]	; (8003658 <sd_init+0x328>)
 80034e0:	4858      	ldr	r0, [pc, #352]	; (8003644 <sd_init+0x314>)
 80034e2:	f009 f9e3 	bl	800c8ac <f_open>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b49      	ldr	r3, [pc, #292]	; (8003610 <sd_init+0x2e0>)
 80034ec:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK){
 80034ee:	4b48      	ldr	r3, [pc, #288]	; (8003610 <sd_init+0x2e0>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <sd_init+0x1cc>
	  		send_uart ("file2.txt is open and the data is shown below\r\n");
 80034f6:	485c      	ldr	r0, [pc, #368]	; (8003668 <sd_init+0x338>)
 80034f8:	f7ff fca8 	bl	8002e4c <send_uart>
	  	}

	  	/* Read data from the file
	  	 * Please see the function details for the arguments */
	  	f_read (&fil, buffer, f_size(&fil), &br);
 80034fc:	4b51      	ldr	r3, [pc, #324]	; (8003644 <sd_init+0x314>)
 80034fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003502:	330c      	adds	r3, #12
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b59      	ldr	r3, [pc, #356]	; (800366c <sd_init+0x33c>)
 8003508:	494a      	ldr	r1, [pc, #296]	; (8003634 <sd_init+0x304>)
 800350a:	484e      	ldr	r0, [pc, #312]	; (8003644 <sd_init+0x314>)
 800350c:	f009 fd08 	bl	800cf20 <f_read>
	  	send_uart(buffer);
 8003510:	4848      	ldr	r0, [pc, #288]	; (8003634 <sd_init+0x304>)
 8003512:	f7ff fc9b 	bl	8002e4c <send_uart>
	  	send_uart("\r\n");
 8003516:	484f      	ldr	r0, [pc, #316]	; (8003654 <sd_init+0x324>)
 8003518:	f7ff fc98 	bl	8002e4c <send_uart>

	  	/* Close file */
	  	f_close(&fil);
 800351c:	4849      	ldr	r0, [pc, #292]	; (8003644 <sd_init+0x314>)
 800351e:	f00a fa66 	bl	800d9ee <f_close>

	  	clear_buffer();
 8003522:	f7ff fc77 	bl	8002e14 <clear_buffer>


	  	/*********************UPDATING an existing file ***************************/

	  	/* Open the file with write access */
	  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8003526:	2203      	movs	r2, #3
 8003528:	494b      	ldr	r1, [pc, #300]	; (8003658 <sd_init+0x328>)
 800352a:	4846      	ldr	r0, [pc, #280]	; (8003644 <sd_init+0x314>)
 800352c:	f009 f9be 	bl	800c8ac <f_open>
 8003530:	4603      	mov	r3, r0
 8003532:	461a      	mov	r2, r3
 8003534:	4b36      	ldr	r3, [pc, #216]	; (8003610 <sd_init+0x2e0>)
 8003536:	701a      	strb	r2, [r3, #0]

	  	/* Move to offset to the end of the file */
	  	fresult = f_lseek(&fil, f_size(&fil));
 8003538:	4b42      	ldr	r3, [pc, #264]	; (8003644 <sd_init+0x314>)
 800353a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353e:	330c      	adds	r3, #12
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4619      	mov	r1, r3
 8003544:	483f      	ldr	r0, [pc, #252]	; (8003644 <sd_init+0x314>)
 8003546:	f00a fa7d 	bl	800da44 <f_lseek>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	4b30      	ldr	r3, [pc, #192]	; (8003610 <sd_init+0x2e0>)
 8003550:	701a      	strb	r2, [r3, #0]

	  	if (fresult == FR_OK)
 8003552:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <sd_init+0x2e0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <sd_init+0x230>
	  	{
	  		send_uart ("About to update the file2.txt\r\n");
 800355a:	4845      	ldr	r0, [pc, #276]	; (8003670 <sd_init+0x340>)
 800355c:	f7ff fc76 	bl	8002e4c <send_uart>
	  	}

	  	/* write the string to the file */
	  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8003560:	4938      	ldr	r1, [pc, #224]	; (8003644 <sd_init+0x314>)
 8003562:	4844      	ldr	r0, [pc, #272]	; (8003674 <sd_init+0x344>)
 8003564:	f00a fefe 	bl	800e364 <f_puts>
 8003568:	4603      	mov	r3, r0
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <sd_init+0x2e0>)
 800356e:	701a      	strb	r2, [r3, #0]
	  	f_close (&fil);
 8003570:	4834      	ldr	r0, [pc, #208]	; (8003644 <sd_init+0x314>)
 8003572:	f00a fa3c 	bl	800d9ee <f_close>
	  	clear_buffer();
 8003576:	f7ff fc4d 	bl	8002e14 <clear_buffer>

	  	/* Open to read the file */
	  	fresult = f_open (&fil, "file2.txt", FA_READ);
 800357a:	2201      	movs	r2, #1
 800357c:	4936      	ldr	r1, [pc, #216]	; (8003658 <sd_init+0x328>)
 800357e:	4831      	ldr	r0, [pc, #196]	; (8003644 <sd_init+0x314>)
 8003580:	f009 f994 	bl	800c8ac <f_open>
 8003584:	4603      	mov	r3, r0
 8003586:	461a      	mov	r2, r3
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <sd_init+0x2e0>)
 800358a:	701a      	strb	r2, [r3, #0]

	  	/* Read string from the file */
	  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800358c:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <sd_init+0x314>)
 800358e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003592:	330c      	adds	r3, #12
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4b35      	ldr	r3, [pc, #212]	; (800366c <sd_init+0x33c>)
 8003598:	4926      	ldr	r1, [pc, #152]	; (8003634 <sd_init+0x304>)
 800359a:	482a      	ldr	r0, [pc, #168]	; (8003644 <sd_init+0x314>)
 800359c:	f009 fcc0 	bl	800cf20 <f_read>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <sd_init+0x2e0>)
 80035a6:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <sd_init+0x2e0>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <sd_init+0x292>
	  	{
	  		send_uart ("Below is the data from updated file2.txt\r\n");
 80035b0:	4831      	ldr	r0, [pc, #196]	; (8003678 <sd_init+0x348>)
 80035b2:	f7ff fc4b 	bl	8002e4c <send_uart>
	  		send_uart(buffer);
 80035b6:	481f      	ldr	r0, [pc, #124]	; (8003634 <sd_init+0x304>)
 80035b8:	f7ff fc48 	bl	8002e4c <send_uart>
	  		send_uart("\r\n");
 80035bc:	4825      	ldr	r0, [pc, #148]	; (8003654 <sd_init+0x324>)
 80035be:	f7ff fc45 	bl	8002e4c <send_uart>
	  	}

	  	/* Close file */
	  	f_close(&fil);
 80035c2:	4820      	ldr	r0, [pc, #128]	; (8003644 <sd_init+0x314>)
 80035c4:	f00a fa13 	bl	800d9ee <f_close>

	  	clear_buffer();
 80035c8:	f7ff fc24 	bl	8002e14 <clear_buffer>


	  	/*Create csv file to log random data*/
	  	fresult = f_open(&fil, "file3.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80035cc:	2213      	movs	r2, #19
 80035ce:	492b      	ldr	r1, [pc, #172]	; (800367c <sd_init+0x34c>)
 80035d0:	481c      	ldr	r0, [pc, #112]	; (8003644 <sd_init+0x314>)
 80035d2:	f009 f96b 	bl	800c8ac <f_open>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <sd_init+0x2e0>)
 80035dc:	701a      	strb	r2, [r3, #0]
	  	/* Writing text */
	  	f_puts("Timer(s), Cell_Voltage_1,Cell_Voltage_2,Cell_Voltage_3,Cell_Voltage_4,Cell_Voltage_5,Cell_Voltage_6,Cell_Voltage_7,Cell_Voltage_8,Cell_Voltage_9,Cell_Voltage_10,Cell_Voltage_11,Cell_Voltage_12,Cell_Voltage_13,Cell_Voltage_14,Cell_Voltage_15,Cell_Voltage_16,Cell_Voltage_17,Cell_Voltage_18, Pack_Voltage, Pack_Current, Temperature_3, Temperature_4, Max_cell_voltage, Min_cell_voltage \r\n ", &fil);
 80035de:	4919      	ldr	r1, [pc, #100]	; (8003644 <sd_init+0x314>)
 80035e0:	4827      	ldr	r0, [pc, #156]	; (8003680 <sd_init+0x350>)
 80035e2:	f00a febf 	bl	800e364 <f_puts>
	  	/* Close file */
	  	fresult = f_close(&fil);
 80035e6:	4817      	ldr	r0, [pc, #92]	; (8003644 <sd_init+0x314>)
 80035e8:	f00a fa01 	bl	800d9ee <f_close>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <sd_init+0x2e0>)
 80035f2:	701a      	strb	r2, [r3, #0]
	  	if (fresult == FR_OK)
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <sd_init+0x2e0>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <sd_init+0x2d2>
	  	{
	  		send_uart ("File3.csv created and header is written \r\n");
 80035fc:	4821      	ldr	r0, [pc, #132]	; (8003684 <sd_init+0x354>)
 80035fe:	f7ff fc25 	bl	8002e4c <send_uart>
	//  	if (fresult == FR_OK)
	//  	{
	//  		send_uart ("SD CARD UNMOUNTED successfully...\r\n");
	//  	}

}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	08011828 	.word	0x08011828
 800360c:	200005c8 	.word	0x200005c8
 8003610:	20001aa4 	.word	0x20001aa4
 8003614:	0801182c 	.word	0x0801182c
 8003618:	08011850 	.word	0x08011850
 800361c:	20001aa0 	.word	0x20001aa0
 8003620:	200004f0 	.word	0x200004f0
 8003624:	08011874 	.word	0x08011874
 8003628:	3fe00000 	.word	0x3fe00000
 800362c:	20001b98 	.word	0x20001b98
 8003630:	08011878 	.word	0x08011878
 8003634:	20001648 	.word	0x20001648
 8003638:	20001640 	.word	0x20001640
 800363c:	08011894 	.word	0x08011894
 8003640:	080118b0 	.word	0x080118b0
 8003644:	20001cc4 	.word	0x20001cc4
 8003648:	080118bc 	.word	0x080118bc
 800364c:	08011900 	.word	0x08011900
 8003650:	08011930 	.word	0x08011930
 8003654:	08011970 	.word	0x08011970
 8003658:	08011974 	.word	0x08011974
 800365c:	08011980 	.word	0x08011980
 8003660:	20001a70 	.word	0x20001a70
 8003664:	080119d4 	.word	0x080119d4
 8003668:	08011a04 	.word	0x08011a04
 800366c:	20001630 	.word	0x20001630
 8003670:	08011a34 	.word	0x08011a34
 8003674:	08011a54 	.word	0x08011a54
 8003678:	08011a88 	.word	0x08011a88
 800367c:	08011730 	.word	0x08011730
 8003680:	08011ab4 	.word	0x08011ab4
 8003684:	08011c38 	.word	0x08011c38

08003688 <CellMonitorsArrayTranslate>:

void CellMonitorsArrayTranslate(void)
{
 8003688:	b490      	push	{r4, r7}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
	uint8_t individualCellPointer = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	71fb      	strb	r3, [r7, #7]

  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 8003692:	2300      	movs	r3, #0
 8003694:	71bb      	strb	r3, [r7, #6]
 8003696:	e048      	b.n	800372a <CellMonitorsArrayTranslate+0xa2>
		if((modulePointer+1) % (cellMonitorICCount/1)==0 && modulePointer != 0)
 8003698:	79bb      	ldrb	r3, [r7, #6]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d021      	beq.n	80036e2 <CellMonitorsArrayTranslate+0x5a>
		{ // If end of series string, use lastICNoOfCells instead of noOfCellsPerModule
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++)
 800369e:	2300      	movs	r3, #0
 80036a0:	717b      	strb	r3, [r7, #5]
 80036a2:	e01a      	b.n	80036da <CellMonitorsArrayTranslate+0x52>
			{
				cellVoltagesIndividual[individualCellPointer].cellVoltage = cellModuleVoltages[modulePointer][modulePointerCell];
 80036a4:	79ba      	ldrb	r2, [r7, #6]
 80036a6:	7978      	ldrb	r0, [r7, #5]
 80036a8:	79f9      	ldrb	r1, [r7, #7]
 80036aa:	4c24      	ldr	r4, [pc, #144]	; (800373c <CellMonitorsArrayTranslate+0xb4>)
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4403      	add	r3, r0
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4423      	add	r3, r4
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4820      	ldr	r0, [pc, #128]	; (8003740 <CellMonitorsArrayTranslate+0xb8>)
 80036be:	00cb      	lsls	r3, r1, #3
 80036c0:	4403      	add	r3, r0
 80036c2:	601a      	str	r2, [r3, #0]
				cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 80036c4:	79fa      	ldrb	r2, [r7, #7]
 80036c6:	1c53      	adds	r3, r2, #1
 80036c8:	71fb      	strb	r3, [r7, #7]
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	491c      	ldr	r1, [pc, #112]	; (8003740 <CellMonitorsArrayTranslate+0xb8>)
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	711a      	strb	r2, [r3, #4]
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++)
 80036d4:	797b      	ldrb	r3, [r7, #5]
 80036d6:	3301      	adds	r3, #1
 80036d8:	717b      	strb	r3, [r7, #5]
 80036da:	797b      	ldrb	r3, [r7, #5]
 80036dc:	2b11      	cmp	r3, #17
 80036de:	d9e1      	bls.n	80036a4 <CellMonitorsArrayTranslate+0x1c>
 80036e0:	e020      	b.n	8003724 <CellMonitorsArrayTranslate+0x9c>
			}
		}
		else
		{ // use noOfCellsPerModule as usually
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++) {
 80036e2:	2300      	movs	r3, #0
 80036e4:	713b      	strb	r3, [r7, #4]
 80036e6:	e01a      	b.n	800371e <CellMonitorsArrayTranslate+0x96>
				cellVoltagesIndividual[individualCellPointer].cellVoltage = cellModuleVoltages[modulePointer][modulePointerCell];
 80036e8:	79ba      	ldrb	r2, [r7, #6]
 80036ea:	7938      	ldrb	r0, [r7, #4]
 80036ec:	79f9      	ldrb	r1, [r7, #7]
 80036ee:	4c13      	ldr	r4, [pc, #76]	; (800373c <CellMonitorsArrayTranslate+0xb4>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4403      	add	r3, r0
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4423      	add	r3, r4
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	480f      	ldr	r0, [pc, #60]	; (8003740 <CellMonitorsArrayTranslate+0xb8>)
 8003702:	00cb      	lsls	r3, r1, #3
 8003704:	4403      	add	r3, r0
 8003706:	601a      	str	r2, [r3, #0]
				cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 8003708:	79fa      	ldrb	r2, [r7, #7]
 800370a:	1c53      	adds	r3, r2, #1
 800370c:	71fb      	strb	r3, [r7, #7]
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	490b      	ldr	r1, [pc, #44]	; (8003740 <CellMonitorsArrayTranslate+0xb8>)
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	711a      	strb	r2, [r3, #4]
			for(uint8_t modulePointerCell = 0; modulePointerCell < noOfTotalCells; modulePointerCell++) {
 8003718:	793b      	ldrb	r3, [r7, #4]
 800371a:	3301      	adds	r3, #1
 800371c:	713b      	strb	r3, [r7, #4]
 800371e:	793b      	ldrb	r3, [r7, #4]
 8003720:	2b11      	cmp	r3, #17
 8003722:	d9e1      	bls.n	80036e8 <CellMonitorsArrayTranslate+0x60>
  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 8003724:	79bb      	ldrb	r3, [r7, #6]
 8003726:	3301      	adds	r3, #1
 8003728:	71bb      	strb	r3, [r7, #6]
 800372a:	79bb      	ldrb	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0b3      	beq.n	8003698 <CellMonitorsArrayTranslate+0x10>
			}
		};
	}
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bc90      	pop	{r4, r7}
 800373a:	4770      	bx	lr
 800373c:	200004fc 	.word	0x200004fc
 8003740:	20001c04 	.word	0x20001c04

08003744 <AuxMonitorsArrayTranslate>:

void AuxMonitorsArrayTranslate(void) {
 8003744:	b490      	push	{r4, r7}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
	uint8_t individualAuxPointer = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	71fb      	strb	r3, [r7, #7]

  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 800374e:	2300      	movs	r3, #0
 8003750:	71bb      	strb	r3, [r7, #6]
 8003752:	e03e      	b.n	80037d2 <AuxMonitorsArrayTranslate+0x8e>
	  for(uint8_t modulePointerAux = 0;modulePointerAux < noOfTempSensorPerModule; modulePointerAux++) {
 8003754:	2300      	movs	r3, #0
 8003756:	717b      	strb	r3, [r7, #5]
 8003758:	e035      	b.n	80037c6 <AuxMonitorsArrayTranslate+0x82>
			if(modulePointerAux < 5)
 800375a:	797b      	ldrb	r3, [r7, #5]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d817      	bhi.n	8003790 <AuxMonitorsArrayTranslate+0x4c>
			{
				auxVoltagesIndividual[individualAuxPointer].auxVoltage = auxModuleVoltages[modulePointer][modulePointerAux];
 8003760:	79ba      	ldrb	r2, [r7, #6]
 8003762:	7978      	ldrb	r0, [r7, #5]
 8003764:	79f9      	ldrb	r1, [r7, #7]
 8003766:	4c1f      	ldr	r4, [pc, #124]	; (80037e4 <AuxMonitorsArrayTranslate+0xa0>)
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	4403      	add	r3, r0
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4423      	add	r3, r4
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	481c      	ldr	r0, [pc, #112]	; (80037e8 <AuxMonitorsArrayTranslate+0xa4>)
 8003778:	00cb      	lsls	r3, r1, #3
 800377a:	4403      	add	r3, r0
 800377c:	601a      	str	r2, [r3, #0]
				auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 800377e:	79fa      	ldrb	r2, [r7, #7]
 8003780:	1c53      	adds	r3, r2, #1
 8003782:	71fb      	strb	r3, [r7, #7]
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	4918      	ldr	r1, [pc, #96]	; (80037e8 <AuxMonitorsArrayTranslate+0xa4>)
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	711a      	strb	r2, [r3, #4]
 800378e:	e017      	b.n	80037c0 <AuxMonitorsArrayTranslate+0x7c>
			}
			else
			{ // when above 5, remove reference voltage measurement from Aux register group B : AVBR4 & AVBR5 for LTC6812 & LTC6813
				auxVoltagesIndividual[individualAuxPointer].auxVoltage = auxModuleVoltages[modulePointer][modulePointerAux+1];
 8003790:	79ba      	ldrb	r2, [r7, #6]
 8003792:	797b      	ldrb	r3, [r7, #5]
 8003794:	1c58      	adds	r0, r3, #1
 8003796:	79f9      	ldrb	r1, [r7, #7]
 8003798:	4c12      	ldr	r4, [pc, #72]	; (80037e4 <AuxMonitorsArrayTranslate+0xa0>)
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	4403      	add	r3, r0
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4423      	add	r3, r4
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	480f      	ldr	r0, [pc, #60]	; (80037e8 <AuxMonitorsArrayTranslate+0xa4>)
 80037aa:	00cb      	lsls	r3, r1, #3
 80037ac:	4403      	add	r3, r0
 80037ae:	601a      	str	r2, [r3, #0]
				auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 80037b0:	79fa      	ldrb	r2, [r7, #7]
 80037b2:	1c53      	adds	r3, r2, #1
 80037b4:	71fb      	strb	r3, [r7, #7]
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	490b      	ldr	r1, [pc, #44]	; (80037e8 <AuxMonitorsArrayTranslate+0xa4>)
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	440b      	add	r3, r1
 80037be:	711a      	strb	r2, [r3, #4]
	  for(uint8_t modulePointerAux = 0;modulePointerAux < noOfTempSensorPerModule; modulePointerAux++) {
 80037c0:	797b      	ldrb	r3, [r7, #5]
 80037c2:	3301      	adds	r3, #1
 80037c4:	717b      	strb	r3, [r7, #5]
 80037c6:	797b      	ldrb	r3, [r7, #5]
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d9c6      	bls.n	800375a <AuxMonitorsArrayTranslate+0x16>
  for(uint8_t modulePointer = 0; modulePointer < cellMonitorICCount; modulePointer++) {
 80037cc:	79bb      	ldrb	r3, [r7, #6]
 80037ce:	3301      	adds	r3, #1
 80037d0:	71bb      	strb	r3, [r7, #6]
 80037d2:	79bb      	ldrb	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0bd      	beq.n	8003754 <AuxMonitorsArrayTranslate+0x10>
			}
		}
	}
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc90      	pop	{r4, r7}
 80037e2:	4770      	bx	lr
 80037e4:	20001a78 	.word	0x20001a78
 80037e8:	20001ba4 	.word	0x20001ba4

080037ec <calculateMaxandMinCellVoltages>:

void calculateMaxandMinCellVoltages(void)
{
 80037ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af04      	add	r7, sp, #16
	cellVoltageHigh = 0.0f;
 80037f4:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <calculateMaxandMinCellVoltages+0x100>)
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
	cellVoltageLow = 10.0f;
 80037fc:	4b3c      	ldr	r3, [pc, #240]	; (80038f0 <calculateMaxandMinCellVoltages+0x104>)
 80037fe:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <calculateMaxandMinCellVoltages+0x108>)
 8003800:	601a      	str	r2, [r3, #0]
	for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 8003802:	2300      	movs	r3, #0
 8003804:	71fb      	strb	r3, [r7, #7]
 8003806:	e039      	b.n	800387c <calculateMaxandMinCellVoltages+0x90>
	{
		if(cellVoltagesIndividual[cellPointer].cellVoltage > cellVoltageHigh)
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	4a3b      	ldr	r2, [pc, #236]	; (80038f8 <calculateMaxandMinCellVoltages+0x10c>)
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	ed93 7a00 	vldr	s14, [r3]
 8003814:	4b35      	ldr	r3, [pc, #212]	; (80038ec <calculateMaxandMinCellVoltages+0x100>)
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	dd06      	ble.n	8003832 <calculateMaxandMinCellVoltages+0x46>
		{
			cellVoltageHigh = cellVoltagesIndividual[cellPointer].cellVoltage;
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	4a34      	ldr	r2, [pc, #208]	; (80038f8 <calculateMaxandMinCellVoltages+0x10c>)
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2f      	ldr	r2, [pc, #188]	; (80038ec <calculateMaxandMinCellVoltages+0x100>)
 8003830:	6013      	str	r3, [r2, #0]
		}
		if(cellVoltagesIndividual[cellPointer].cellVoltage < cellVoltageLow && cellVoltagesIndividual[cellPointer].cellVoltage > 0.5f)
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	4a30      	ldr	r2, [pc, #192]	; (80038f8 <calculateMaxandMinCellVoltages+0x10c>)
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	ed93 7a00 	vldr	s14, [r3]
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <calculateMaxandMinCellVoltages+0x104>)
 8003840:	edd3 7a00 	vldr	s15, [r3]
 8003844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384c:	d513      	bpl.n	8003876 <calculateMaxandMinCellVoltages+0x8a>
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	4a29      	ldr	r2, [pc, #164]	; (80038f8 <calculateMaxandMinCellVoltages+0x10c>)
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800385e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	dd06      	ble.n	8003876 <calculateMaxandMinCellVoltages+0x8a>
		{
			cellVoltageLow = cellVoltagesIndividual[cellPointer].cellVoltage;
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	4a23      	ldr	r2, [pc, #140]	; (80038f8 <calculateMaxandMinCellVoltages+0x10c>)
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <calculateMaxandMinCellVoltages+0x104>)
 8003874:	6013      	str	r3, [r2, #0]
	for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	3301      	adds	r3, #1
 800387a:	71fb      	strb	r3, [r7, #7]
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	2b11      	cmp	r3, #17
 8003880:	d9c2      	bls.n	8003808 <calculateMaxandMinCellVoltages+0x1c>
		}
	}
	maxImbalanceVoltage = cellVoltageHigh - cellVoltageLow;
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <calculateMaxandMinCellVoltages+0x100>)
 8003884:	ed93 7a00 	vldr	s14, [r3]
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <calculateMaxandMinCellVoltages+0x104>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003892:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <calculateMaxandMinCellVoltages+0x110>)
 8003894:	edc3 7a00 	vstr	s15, [r3]
	sprintf(buffer, "Max Cell Voltage = %.3f, Min Cell Voltage = %.3f , Max Imbalance Voltage = %.3f\r\n",cellVoltageHigh, cellVoltageLow, maxImbalanceVoltage);
 8003898:	4b14      	ldr	r3, [pc, #80]	; (80038ec <calculateMaxandMinCellVoltages+0x100>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fe53 	bl	8000548 <__aeabi_f2d>
 80038a2:	4680      	mov	r8, r0
 80038a4:	4689      	mov	r9, r1
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <calculateMaxandMinCellVoltages+0x104>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fc fe4c 	bl	8000548 <__aeabi_f2d>
 80038b0:	4604      	mov	r4, r0
 80038b2:	460d      	mov	r5, r1
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <calculateMaxandMinCellVoltages+0x110>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc fe45 	bl	8000548 <__aeabi_f2d>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038c6:	e9cd 4500 	strd	r4, r5, [sp]
 80038ca:	4642      	mov	r2, r8
 80038cc:	464b      	mov	r3, r9
 80038ce:	490c      	ldr	r1, [pc, #48]	; (8003900 <calculateMaxandMinCellVoltages+0x114>)
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <calculateMaxandMinCellVoltages+0x118>)
 80038d2:	f00b fdc9 	bl	800f468 <siprintf>
	send_uart(buffer);
 80038d6:	480b      	ldr	r0, [pc, #44]	; (8003904 <calculateMaxandMinCellVoltages+0x118>)
 80038d8:	f7ff fab8 	bl	8002e4c <send_uart>
	clear_buffer();
 80038dc:	f7ff fa9a 	bl	8002e14 <clear_buffer>

}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038ea:	bf00      	nop
 80038ec:	200004f4 	.word	0x200004f4
 80038f0:	200015f8 	.word	0x200015f8
 80038f4:	41200000 	.word	0x41200000
 80038f8:	20001c04 	.word	0x20001c04
 80038fc:	20001c94 	.word	0x20001c94
 8003900:	08011c64 	.word	0x08011c64
 8003904:	20001648 	.word	0x20001648

08003908 <cellBalancingTask>:

void cellBalancingTask(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
	static uint32_t delayTimeHolder = 100;
	static bool     delaytoggle = false;
	uint8_t modulePointer = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	70fb      	strb	r3, [r7, #3]
	uint8_t cellInMaskPointer = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	70bb      	strb	r3, [r7, #2]
	uint8_t seriesCount = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	707b      	strb	r3, [r7, #1]
	uint8_t moduleCount = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	703b      	strb	r3, [r7, #0]

	if(modDelayTick1ms(&CellBalanceUpdateLastTick,delayTimeHolder))
 800391e:	4b6c      	ldr	r3, [pc, #432]	; (8003ad0 <cellBalancingTask+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	486b      	ldr	r0, [pc, #428]	; (8003ad4 <cellBalancingTask+0x1cc>)
 8003926:	f000 fe64 	bl	80045f2 <modDelayTick1ms>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05b      	beq.n	80039e8 <cellBalancingTask+0xe0>
	{
		delaytoggle ^= true;
 8003930:	4b69      	ldr	r3, [pc, #420]	; (8003ad8 <cellBalancingTask+0x1d0>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	f083 0301 	eor.w	r3, r3, #1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2da      	uxtb	r2, r3
 8003944:	4b64      	ldr	r3, [pc, #400]	; (8003ad8 <cellBalancingTask+0x1d0>)
 8003946:	701a      	strb	r2, [r3, #0]
		delayTimeHolder = delaytoggle ? cellBalanceUpdateTime : 200;
 8003948:	4b63      	ldr	r3, [pc, #396]	; (8003ad8 <cellBalancingTask+0x1d0>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <cellBalancingTask+0x4e>
 8003950:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003954:	e000      	b.n	8003958 <cellBalancingTask+0x50>
 8003956:	23c8      	movs	r3, #200	; 0xc8
 8003958:	4a5d      	ldr	r2, [pc, #372]	; (8003ad0 <cellBalancingTask+0x1c8>)
 800395a:	6013      	str	r3, [r2, #0]

		if(delaytoggle)
 800395c:	4b5e      	ldr	r3, [pc, #376]	; (8003ad8 <cellBalancingTask+0x1d0>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d041      	beq.n	80039e8 <cellBalancingTask+0xe0>
		{

			for(uint8_t cellPointer = 0; cellPointer< noOfTotalCells ; cellPointer += 2)
 8003964:	2300      	movs	r3, #0
 8003966:	71fb      	strb	r3, [r7, #7]
 8003968:	e025      	b.n	80039b6 <cellBalancingTask+0xae>
			{
				if(cellVoltagesIndividual[cellPointer].cellVoltage > (cellVoltageLow + cellBalanceThreshold) && cellBalancingEnable == true)
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	4a5b      	ldr	r2, [pc, #364]	; (8003adc <cellBalancingTask+0x1d4>)
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	ed93 7a00 	vldr	s14, [r3]
 8003976:	4b5a      	ldr	r3, [pc, #360]	; (8003ae0 <cellBalancingTask+0x1d8>)
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	eddf 6a59 	vldr	s13, [pc, #356]	; 8003ae4 <cellBalancingTask+0x1dc>
 8003980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398c:	dd0a      	ble.n	80039a4 <cellBalancingTask+0x9c>
 800398e:	4b56      	ldr	r3, [pc, #344]	; (8003ae8 <cellBalancingTask+0x1e0>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <cellBalancingTask+0x9c>
				{
					cellVoltagesIndividual[cellPointer].cellBleedActive = true;
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	4a50      	ldr	r2, [pc, #320]	; (8003adc <cellBalancingTask+0x1d4>)
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	2201      	movs	r2, #1
 80039a0:	715a      	strb	r2, [r3, #5]
 80039a2:	e005      	b.n	80039b0 <cellBalancingTask+0xa8>
				}
				else
				{
					cellVoltagesIndividual[cellPointer].cellBleedActive = false;
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	4a4d      	ldr	r2, [pc, #308]	; (8003adc <cellBalancingTask+0x1d4>)
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	2200      	movs	r2, #0
 80039ae:	715a      	strb	r2, [r3, #5]
			for(uint8_t cellPointer = 0; cellPointer< noOfTotalCells ; cellPointer += 2)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	3302      	adds	r3, #2
 80039b4:	71fb      	strb	r3, [r7, #7]
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b11      	cmp	r3, #17
 80039ba:	d9d6      	bls.n	800396a <cellBalancingTask+0x62>
				}
			}
			if(cellBalancingEnable == false)
 80039bc:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <cellBalancingTask+0x1e0>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	f083 0301 	eor.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00e      	beq.n	80039e8 <cellBalancingTask+0xe0>
			{
				for(uint8_t cellPointer = 0; cellPointer< noOfTotalCells ; cellPointer++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	71bb      	strb	r3, [r7, #6]
 80039ce:	e008      	b.n	80039e2 <cellBalancingTask+0xda>
					cellVoltagesIndividual[cellPointer].cellBleedActive = false;
 80039d0:	79bb      	ldrb	r3, [r7, #6]
 80039d2:	4a42      	ldr	r2, [pc, #264]	; (8003adc <cellBalancingTask+0x1d4>)
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	2200      	movs	r2, #0
 80039da:	715a      	strb	r2, [r3, #5]
				for(uint8_t cellPointer = 0; cellPointer< noOfTotalCells ; cellPointer++)
 80039dc:	79bb      	ldrb	r3, [r7, #6]
 80039de:	3301      	adds	r3, #1
 80039e0:	71bb      	strb	r3, [r7, #6]
 80039e2:	79bb      	ldrb	r3, [r7, #6]
 80039e4:	2b11      	cmp	r3, #17
 80039e6:	d9f3      	bls.n	80039d0 <cellBalancingTask+0xc8>
			}
		}
	}

	// Clear array
	for(uint8_t moduleClearPointer = 0; moduleClearPointer < NoOfCellMonitorsPossibleOnBMS; moduleClearPointer++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	717b      	strb	r3, [r7, #5]
 80039ec:	e007      	b.n	80039fe <cellBalancingTask+0xf6>
	{
		cellModuleBalanceResistorEnableMask[moduleClearPointer] = 0;
 80039ee:	797b      	ldrb	r3, [r7, #5]
 80039f0:	4a3e      	ldr	r2, [pc, #248]	; (8003aec <cellBalancingTask+0x1e4>)
 80039f2:	2100      	movs	r1, #0
 80039f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t moduleClearPointer = 0; moduleClearPointer < NoOfCellMonitorsPossibleOnBMS; moduleClearPointer++)
 80039f8:	797b      	ldrb	r3, [r7, #5]
 80039fa:	3301      	adds	r3, #1
 80039fc:	717b      	strb	r3, [r7, #5]
 80039fe:	797b      	ldrb	r3, [r7, #5]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f4      	beq.n	80039ee <cellBalancingTask+0xe6>
	}
	for(uint8_t cellPointer = 0; cellPointer < noOfCellsSeries*noOfParallelModules; cellPointer++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	713b      	strb	r3, [r7, #4]
 8003a08:	e056      	b.n	8003ab8 <cellBalancingTask+0x1b0>
	{
		seriesCount = cellPointer/noOfCellsSeries;
 8003a0a:	793b      	ldrb	r3, [r7, #4]
 8003a0c:	4a38      	ldr	r2, [pc, #224]	; (8003af0 <cellBalancingTask+0x1e8>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	707b      	strb	r3, [r7, #1]
		moduleCount = seriesCount*(cellMonitorICCount/noOfParallelModules);
 8003a16:	787b      	ldrb	r3, [r7, #1]
 8003a18:	703b      	strb	r3, [r7, #0]
		modulePointer = moduleCount + (cellPointer % noOfCellsSeries)/noOfCellsPerModule;
 8003a1a:	793a      	ldrb	r2, [r7, #4]
 8003a1c:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <cellBalancingTask+0x1e8>)
 8003a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a22:	0899      	lsrs	r1, r3, #2
 8003a24:	460b      	mov	r3, r1
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	440b      	add	r3, r1
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <cellBalancingTask+0x1e8>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	783b      	ldrb	r3, [r7, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	70fb      	strb	r3, [r7, #3]
		cellInMaskPointer = (cellPointer - (seriesCount*noOfCellsSeries)) % noOfCellsPerModule;
 8003a40:	793a      	ldrb	r2, [r7, #4]
 8003a42:	787b      	ldrb	r3, [r7, #1]
 8003a44:	f06f 0111 	mvn.w	r1, #17
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	441a      	add	r2, r3
 8003a4e:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <cellBalancingTask+0x1e8>)
 8003a50:	fb83 1302 	smull	r1, r3, r3, r2
 8003a54:	1099      	asrs	r1, r3, #2
 8003a56:	17d3      	asrs	r3, r2, #31
 8003a58:	1ac9      	subs	r1, r1, r3
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	1ad1      	subs	r1, r2, r3
 8003a64:	460b      	mov	r3, r1
 8003a66:	70bb      	strb	r3, [r7, #2]

		if(cellVoltagesIndividual[cellPointer].cellBleedActive)
 8003a68:	793b      	ldrb	r3, [r7, #4]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <cellBalancingTask+0x1d4>)
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	795b      	ldrb	r3, [r3, #5]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <cellBalancingTask+0x18c>
			cellModuleBalanceResistorEnableMask[modulePointer] |= (1 << cellInMaskPointer);
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <cellBalancingTask+0x1e4>)
 8003a7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a7e:	78bb      	ldrb	r3, [r7, #2]
 8003a80:	2101      	movs	r1, #1
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	4619      	mov	r1, r3
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	4917      	ldr	r1, [pc, #92]	; (8003aec <cellBalancingTask+0x1e4>)
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a92:	e00e      	b.n	8003ab2 <cellBalancingTask+0x1aa>
		else
			cellModuleBalanceResistorEnableMask[modulePointer] &= ~(1 << cellInMaskPointer);
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	4a15      	ldr	r2, [pc, #84]	; (8003aec <cellBalancingTask+0x1e4>)
 8003a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a9c:	78bb      	ldrb	r3, [r7, #2]
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	400a      	ands	r2, r1
 8003aac:	490f      	ldr	r1, [pc, #60]	; (8003aec <cellBalancingTask+0x1e4>)
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t cellPointer = 0; cellPointer < noOfCellsSeries*noOfParallelModules; cellPointer++)
 8003ab2:	793b      	ldrb	r3, [r7, #4]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	713b      	strb	r3, [r7, #4]
 8003ab8:	793b      	ldrb	r3, [r7, #4]
 8003aba:	2b11      	cmp	r3, #17
 8003abc:	d9a5      	bls.n	8003a0a <cellBalancingTask+0x102>
	}

	driverSWLTC6804EnableBalanceResistorsArray(cellModuleBalanceResistorEnableMask, CELL_MON_LTC6811_1);
 8003abe:	2101      	movs	r1, #1
 8003ac0:	480a      	ldr	r0, [pc, #40]	; (8003aec <cellBalancingTask+0x1e4>)
 8003ac2:	f7fe fb0d 	bl	80020e0 <driverSWLTC6804EnableBalanceResistorsArray>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000004 	.word	0x20000004
 8003ad4:	20001600 	.word	0x20001600
 8003ad8:	20000230 	.word	0x20000230
 8003adc:	20001c04 	.word	0x20001c04
 8003ae0:	200015f8 	.word	0x200015f8
 8003ae4:	3c23d70a 	.word	0x3c23d70a
 8003ae8:	20000001 	.word	0x20000001
 8003aec:	200015fc 	.word	0x200015fc
 8003af0:	38e38e39 	.word	0x38e38e39

08003af4 <init_LTC6813>:

void init_LTC6813(void)
{
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b093      	sub	sp, #76	; 0x4c
 8003af8:	af08      	add	r7, sp, #32
	driverLTC6804ConfigStructTypedef configStruct;
	configStruct.GPIO1                    = true;																														// Do not pull down this pin (false = pull down)
 8003afa:	2301      	movs	r3, #1
 8003afc:	713b      	strb	r3, [r7, #4]
	configStruct.GPIO2                    = true;																														//
 8003afe:	2301      	movs	r3, #1
 8003b00:	717b      	strb	r3, [r7, #5]
	configStruct.GPIO3                    = true;																														//
 8003b02:	2301      	movs	r3, #1
 8003b04:	71bb      	strb	r3, [r7, #6]
	configStruct.GPIO4                    = true;																														//
 8003b06:	2301      	movs	r3, #1
 8003b08:	71fb      	strb	r3, [r7, #7]
	configStruct.GPIO5                    = true;																														//
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	723b      	strb	r3, [r7, #8]
	configStruct.GPIO6                    = true;																														//
 8003b0e:	2301      	movs	r3, #1
 8003b10:	727b      	strb	r3, [r7, #9]
	configStruct.GPIO7                    = true;																														//
 8003b12:	2301      	movs	r3, #1
 8003b14:	72bb      	strb	r3, [r7, #10]
	configStruct.GPIO8                    = true;																														//
 8003b16:	2301      	movs	r3, #1
 8003b18:	72fb      	strb	r3, [r7, #11]
	configStruct.GPIO9                    = true;																														//
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	733b      	strb	r3, [r7, #12]
	configStruct.ReferenceON              = true;																														// Reference ON
 8003b1e:	2301      	movs	r3, #1
 8003b20:	737b      	strb	r3, [r7, #13]
	configStruct.ADCOption                = true;																											  		// ADC Option register for configuration of over sampling ratio
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
	configStruct.noOfCells                = 18;			// Number of cells to monitor (that can cause interrupt)
 8003b26:	2312      	movs	r3, #18
 8003b28:	743b      	strb	r3, [r7, #16]
	configStruct.DisChargeEnableMask      = 0x00000000;	// Set enable state of discharge, 1=EnableDischarge, 0=DisableDischarge
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
	configStruct.DischargeTimout          = 0;		// Discharge timout value / limit
 8003b2e:	2300      	movs	r3, #0
 8003b30:	763b      	strb	r3, [r7, #24]
	configStruct.CellUnderVoltageLimit    = 2.80f; // Undervoltage level, cell voltages under this limit will cause interrupt
 8003b32:	4b42      	ldr	r3, [pc, #264]	; (8003c3c <init_LTC6813+0x148>)
 8003b34:	61fb      	str	r3, [r7, #28]
	configStruct.CellOverVoltageLimit     = 4.20f;
 8003b36:	4b42      	ldr	r3, [pc, #264]	; (8003c40 <init_LTC6813+0x14c>)
 8003b38:	623b      	str	r3, [r7, #32]

	driverSWLTC6804Init(configStruct, NoOfCellMonitorsPossibleOnBMS, noOfTotalCells, noOfTempSensorPerModule,CELL_MON_LTC6811_1);
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	9307      	str	r3, [sp, #28]
 8003b3e:	230a      	movs	r3, #10
 8003b40:	9306      	str	r3, [sp, #24]
 8003b42:	2312      	movs	r3, #18
 8003b44:	9305      	str	r3, [sp, #20]
 8003b46:	2301      	movs	r3, #1
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	466c      	mov	r4, sp
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003b56:	1d3b      	adds	r3, r7, #4
 8003b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b5a:	f7fd f997 	bl	8000e8c <driverSWLTC6804Init>

	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b64:	e02c      	b.n	8003bc0 <init_LTC6813+0xcc>
	{
		for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b6c:	e013      	b.n	8003b96 <init_LTC6813+0xa2>
			cellModuleVoltages[modulePointer][cellPointer] = 0.0f;
 8003b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b72:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003b76:	4833      	ldr	r0, [pc, #204]	; (8003c44 <init_LTC6813+0x150>)
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	440b      	add	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4403      	add	r3, r0
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
		for(uint8_t cellPointer = 0; cellPointer < noOfTotalCells; cellPointer++)
 8003b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b90:	3301      	adds	r3, #1
 8003b92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b9a:	2b11      	cmp	r3, #17
 8003b9c:	d9e7      	bls.n	8003b6e <init_LTC6813+0x7a>

		cellModuleBalanceResistorEnableMask[modulePointer] = 0;
 8003b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ba2:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <init_LTC6813+0x154>)
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		cellModuleBalanceResistorEnableMaskTest[modulePointer] = 0;
 8003baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bae:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <init_LTC6813+0x158>)
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8003bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ce      	beq.n	8003b66 <init_LTC6813+0x72>
	}
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003bce:	e01f      	b.n	8003c10 <init_LTC6813+0x11c>
	{
		for(uint8_t auxPointer = 0; auxPointer < noOfTempSensorPerModule; auxPointer++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003bd6:	e012      	b.n	8003bfe <init_LTC6813+0x10a>
			auxModuleVoltages[modulePointer][auxPointer] = 0.0f;
 8003bd8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003bdc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003be0:	481b      	ldr	r0, [pc, #108]	; (8003c50 <init_LTC6813+0x15c>)
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	440b      	add	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4403      	add	r3, r0
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
		for(uint8_t auxPointer = 0; auxPointer < noOfTempSensorPerModule; auxPointer++)
 8003bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c02:	2b09      	cmp	r3, #9
 8003c04:	d9e8      	bls.n	8003bd8 <init_LTC6813+0xe4>
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++)
 8003c06:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003c10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0db      	beq.n	8003bd0 <init_LTC6813+0xdc>
	}

	driverSWLTC6804ResetCellVoltageRegisters();
 8003c18:	f7fd f9c8 	bl	8000fac <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2100      	movs	r1, #0
 8003c20:	2003      	movs	r0, #3
 8003c22:	f7fd fa05 	bl	8001030 <driverSWLTC6804StartCellVoltageConversion>
	//driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
	driverSWLTC6804ResetAuxRegisters();
 8003c26:	f7fd f9e2 	bl	8000fee <driverSWLTC6804ResetAuxRegisters>
	driverSWLTC6804StartAuxVoltageConversion(MD_FILTERED, AUX_CH_ALL);
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2003      	movs	r0, #3
 8003c2e:	f7fd fa3f 	bl	80010b0 <driverSWLTC6804StartAuxVoltageConversion>
	//driverSWLTC6804StartLoadedCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL,true);
	//driverSWLTC6804ResetAuxRegisters();
	//driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);

}
 8003c32:	bf00      	nop
 8003c34:	372c      	adds	r7, #44	; 0x2c
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd90      	pop	{r4, r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40333333 	.word	0x40333333
 8003c40:	40866666 	.word	0x40866666
 8003c44:	200004fc 	.word	0x200004fc
 8003c48:	200015fc 	.word	0x200015fc
 8003c4c:	2000162c 	.word	0x2000162c
 8003c50:	20001a78 	.word	0x20001a78

08003c54 <unit_test_LTC6813>:
void unit_test_LTC6813(void)
{
 8003c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c58:	b0be      	sub	sp, #248	; 0xf8
 8003c5a:	af22      	add	r7, sp, #136	; 0x88

	//driverSWLTC6804StartCellAndAuxVoltageConversion(MD_FILTERED, DCP_DISABLED);
	//HAL_Delay(300);
	if(driverSWLTC6804ReadCellVoltagesArray(cellModuleVoltages))
 8003c5c:	48b5      	ldr	r0, [pc, #724]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003c5e:	f7fd fa61 	bl	8001124 <driverSWLTC6804ReadCellVoltagesArray>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8122 	beq.w	8003eae <unit_test_LTC6813+0x25a>
	{
		CellMonitorsArrayTranslate();
 8003c6a:	f7ff fd0d 	bl	8003688 <CellMonitorsArrayTranslate>
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003c6e:	4bb1      	ldr	r3, [pc, #708]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fc68 	bl	8000548 <__aeabi_f2d>
 8003c78:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003c7c:	4bad      	ldr	r3, [pc, #692]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fc61 	bl	8000548 <__aeabi_f2d>
 8003c86:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003c8a:	4baa      	ldr	r3, [pc, #680]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc5a 	bl	8000548 <__aeabi_f2d>
 8003c94:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003c98:	4ba6      	ldr	r3, [pc, #664]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fc53 	bl	8000548 <__aeabi_f2d>
 8003ca2:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003ca6:	4ba3      	ldr	r3, [pc, #652]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fc4c 	bl	8000548 <__aeabi_f2d>
 8003cb0:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003cb4:	4b9f      	ldr	r3, [pc, #636]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003cb6:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fc45 	bl	8000548 <__aeabi_f2d>
 8003cbe:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				cellModuleVoltages[0][0],cellModuleVoltages[0][1],cellModuleVoltages[0][2],cellModuleVoltages[0][3],cellModuleVoltages[0][4],cellModuleVoltages[0][5],cellModuleVoltages[0][6],
 8003cc2:	4b9c      	ldr	r3, [pc, #624]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003cc4:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fc3e 	bl	8000548 <__aeabi_f2d>
 8003ccc:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003cd0:	4b98      	ldr	r3, [pc, #608]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fc37 	bl	8000548 <__aeabi_f2d>
 8003cda:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003cde:	4b95      	ldr	r3, [pc, #596]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc30 	bl	8000548 <__aeabi_f2d>
 8003ce8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003cec:	4b91      	ldr	r3, [pc, #580]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fc29 	bl	8000548 <__aeabi_f2d>
 8003cf6:	e9c7 0108 	strd	r0, r1, [r7, #32]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003cfa:	4b8e      	ldr	r3, [pc, #568]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fc22 	bl	8000548 <__aeabi_f2d>
 8003d04:	e9c7 0106 	strd	r0, r1, [r7, #24]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003d08:	4b8a      	ldr	r3, [pc, #552]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fc1b 	bl	8000548 <__aeabi_f2d>
 8003d12:	e9c7 0104 	strd	r0, r1, [r7, #16]
				cellModuleVoltages[0][7],cellModuleVoltages[0][8],cellModuleVoltages[0][9],cellModuleVoltages[0][10],cellModuleVoltages[0][11],cellModuleVoltages[0][12],
 8003d16:	4b87      	ldr	r3, [pc, #540]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc fc14 	bl	8000548 <__aeabi_f2d>
 8003d20:	e9c7 0102 	strd	r0, r1, [r7, #8]
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003d24:	4b83      	ldr	r3, [pc, #524]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fc0d 	bl	8000548 <__aeabi_f2d>
 8003d2e:	e9c7 0100 	strd	r0, r1, [r7]
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003d32:	4b80      	ldr	r3, [pc, #512]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fc06 	bl	8000548 <__aeabi_f2d>
 8003d3c:	4682      	mov	sl, r0
 8003d3e:	468b      	mov	fp, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003d40:	4b7c      	ldr	r3, [pc, #496]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fbff 	bl	8000548 <__aeabi_f2d>
 8003d4a:	4680      	mov	r8, r0
 8003d4c:	4689      	mov	r9, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003d4e:	4b79      	ldr	r3, [pc, #484]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc fbf8 	bl	8000548 <__aeabi_f2d>
 8003d58:	4604      	mov	r4, r0
 8003d5a:	460d      	mov	r5, r1
				cellModuleVoltages[0][13],cellModuleVoltages[0][14],cellModuleVoltages[0][15],cellModuleVoltages[0][16],cellModuleVoltages[0][17]);
 8003d5c:	4b75      	ldr	r3, [pc, #468]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf(buffer,"C1:%f,C2:%f,C3:%f,C4:%f,C5:%f,C6:%f,C7:%f,C8:%f,C9:%f,C10:%f,C11:%f,C12:%f,C13:%f,C14:%f,C15:%f,C16:%f,C17:%f,C18:%f,\r\n",
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fbf1 	bl	8000548 <__aeabi_f2d>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8003d6e:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8003d72:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8003d76:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8003d7a:	ed97 7b00 	vldr	d7, [r7]
 8003d7e:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003d82:	ed97 7b02 	vldr	d7, [r7, #8]
 8003d86:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003d8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8003d8e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003d92:	ed97 7b06 	vldr	d7, [r7, #24]
 8003d96:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003d9a:	ed97 7b08 	vldr	d7, [r7, #32]
 8003d9e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003da2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003da6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003daa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003dae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003db2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003db6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003dba:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003dbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003dc2:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003dc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003dca:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8003dce:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003dd2:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003dd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003dda:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8003dde:	ed8d 7b00 	vstr	d7, [sp]
 8003de2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003de6:	4954      	ldr	r1, [pc, #336]	; (8003f38 <unit_test_LTC6813+0x2e4>)
 8003de8:	4854      	ldr	r0, [pc, #336]	; (8003f3c <unit_test_LTC6813+0x2e8>)
 8003dea:	f00b fb3d 	bl	800f468 <siprintf>
		send_uart(buffer);
 8003dee:	4853      	ldr	r0, [pc, #332]	; (8003f3c <unit_test_LTC6813+0x2e8>)
 8003df0:	f7ff f82c 	bl	8002e4c <send_uart>
		clear_buffer();
 8003df4:	f7ff f80e 	bl	8002e14 <clear_buffer>
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8003df8:	4b4e      	ldr	r3, [pc, #312]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003dfa:	ed93 7a00 	vldr	s14, [r3]
 8003dfe:	4b4d      	ldr	r3, [pc, #308]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e00:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e08:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e12:	4b48      	ldr	r3, [pc, #288]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e14:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e1c:	4b45      	ldr	r3, [pc, #276]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e26:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e28:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e30:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e32:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e36:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e3c:	edd3 7a07 	vldr	s15, [r3, #28]
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8003e40:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 8003e44:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e46:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e4e:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e50:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003e54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e5a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e62:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e64:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e6e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003e72:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][13] + cellModuleVoltages[0][14] + cellModuleVoltages[0][15] + cellModuleVoltages[0][16] + cellModuleVoltages[0][17] ;
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e78:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
				cellModuleVoltages[0][7] + cellModuleVoltages[0][8] + cellModuleVoltages[0][9] + cellModuleVoltages[0][10] + cellModuleVoltages[0][11] + cellModuleVoltages[0][12] +
 8003e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
				cellModuleVoltages[0][13] + cellModuleVoltages[0][14] + cellModuleVoltages[0][15] + cellModuleVoltages[0][16] + cellModuleVoltages[0][17] ;
 8003e80:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e82:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e8a:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e8c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e94:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003e96:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e9e:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <unit_test_LTC6813+0x2e0>)
 8003ea0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
		packVoltage = cellModuleVoltages[0][0] + cellModuleVoltages[0][1] + cellModuleVoltages[0][2] + cellModuleVoltages[0][3] + cellModuleVoltages[0][4] + cellModuleVoltages[0][5] + cellModuleVoltages[0][6] +
 8003ea8:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <unit_test_LTC6813+0x2ec>)
 8003eaa:	edc3 7a00 	vstr	s15, [r3]
	}

	if(driverSWLTC6804ReadAuxVoltagesArray(auxModuleVoltages,NTCnominalResistance, NTCseriesResistor, NTCbetaFactor, 25.0f))
 8003eae:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003eb2:	f640 536b 	movw	r3, #3435	; 0xd6b
 8003eb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eba:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ebe:	4821      	ldr	r0, [pc, #132]	; (8003f44 <unit_test_LTC6813+0x2f0>)
 8003ec0:	f7fd fba6 	bl	8001610 <driverSWLTC6804ReadAuxVoltagesArray>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d05b      	beq.n	8003f82 <unit_test_LTC6813+0x32e>
	{
		AuxMonitorsArrayTranslate();
 8003eca:	f7ff fc3b 	bl	8003744 <AuxMonitorsArrayTranslate>
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <unit_test_LTC6813+0x2f4>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc fb38 	bl	8000548 <__aeabi_f2d>
 8003ed8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <unit_test_LTC6813+0x2f4>)
 8003ede:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc fb31 	bl	8000548 <__aeabi_f2d>
 8003ee6:	4680      	mov	r8, r0
 8003ee8:	4689      	mov	r9, r1
				auxVoltagesIndividual[2].auxVoltage,auxVoltagesIndividual[3].auxVoltage,auxVoltagesIndividual[4].auxVoltage,
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <unit_test_LTC6813+0x2f4>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc fb2a 	bl	8000548 <__aeabi_f2d>
 8003ef4:	4682      	mov	sl, r0
 8003ef6:	468b      	mov	fp, r1
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <unit_test_LTC6813+0x2f4>)
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc fb23 	bl	8000548 <__aeabi_f2d>
 8003f02:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <unit_test_LTC6813+0x2f4>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fb1c 	bl	8000548 <__aeabi_f2d>
 8003f10:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				auxVoltagesIndividual[5].auxVoltage,auxVoltagesIndividual[6].auxVoltage,auxVoltagesIndividual[7].auxVoltage,
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <unit_test_LTC6813+0x2f4>)
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc fb15 	bl	8000548 <__aeabi_f2d>
 8003f1e:	4604      	mov	r4, r0
 8003f20:	460d      	mov	r5, r1
				auxVoltagesIndividual[8].auxVoltage);
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <unit_test_LTC6813+0x2f4>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(buffer,"T1:%f,T2:%f,T3:%f,T4:%f,T5:%f,T6:%f,T7:%f\r\n",
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc fb0e 	bl	8000548 <__aeabi_f2d>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	e00c      	b.n	8003f4c <unit_test_LTC6813+0x2f8>
 8003f32:	bf00      	nop
 8003f34:	200004fc 	.word	0x200004fc
 8003f38:	08011cb8 	.word	0x08011cb8
 8003f3c:	20001648 	.word	0x20001648
 8003f40:	20002cf0 	.word	0x20002cf0
 8003f44:	20001a78 	.word	0x20001a78
 8003f48:	20001ba4 	.word	0x20001ba4
 8003f4c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f50:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003f54:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003f58:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003f5c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8003f60:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f64:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003f68:	e9cd 8900 	strd	r8, r9, [sp]
 8003f6c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003f70:	490d      	ldr	r1, [pc, #52]	; (8003fa8 <unit_test_LTC6813+0x354>)
 8003f72:	480e      	ldr	r0, [pc, #56]	; (8003fac <unit_test_LTC6813+0x358>)
 8003f74:	f00b fa78 	bl	800f468 <siprintf>
				send_uart(buffer);
 8003f78:	480c      	ldr	r0, [pc, #48]	; (8003fac <unit_test_LTC6813+0x358>)
 8003f7a:	f7fe ff67 	bl	8002e4c <send_uart>
				clear_buffer();
 8003f7e:	f7fe ff49 	bl	8002e14 <clear_buffer>
	}

	driverSWLTC6804ResetCellVoltageRegisters();
 8003f82:	f7fd f813 	bl	8000fac <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
 8003f86:	2200      	movs	r2, #0
 8003f88:	2100      	movs	r1, #0
 8003f8a:	2003      	movs	r0, #3
 8003f8c:	f7fd f850 	bl	8001030 <driverSWLTC6804StartCellVoltageConversion>
	//driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL);
	driverSWLTC6804ResetAuxRegisters();
 8003f90:	f7fd f82d 	bl	8000fee <driverSWLTC6804ResetAuxRegisters>
	driverSWLTC6804StartAuxVoltageConversion(MD_FILTERED, AUX_CH_ALL);
 8003f94:	2100      	movs	r1, #0
 8003f96:	2003      	movs	r0, #3
 8003f98:	f7fd f88a 	bl	80010b0 <driverSWLTC6804StartAuxVoltageConversion>
}
 8003f9c:	bf00      	nop
 8003f9e:	3770      	adds	r7, #112	; 0x70
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08011d30 	.word	0x08011d30
 8003fac:	20001648 	.word	0x20001648

08003fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fb6:	f000 fe0d 	bl	8004bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fba:	f000 f8c7 	bl	800414c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fbe:	f000 fa91 	bl	80044e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003fc2:	f000 fa5f 	bl	8004484 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8003fc6:	f000 fa1f 	bl	8004408 <MX_SPI2_Init>
  MX_FATFS_Init();
 8003fca:	f005 fe83 	bl	8009cd4 <MX_FATFS_Init>
  MX_CAN_Init();
 8003fce:	f000 f929 	bl	8004224 <MX_CAN_Init>
  MX_RTC_Init();
 8003fd2:	f000 f97b 	bl	80042cc <MX_RTC_Init>
  MX_SPI1_Init();
 8003fd6:	f000 f9d9 	bl	800438c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //char buf[100];
  //HAL_Delay(250);

  sprintf(buffer, "Xanadu BMS v1.0 Unit Test in Progress\r\n");
 8003fda:	494d      	ldr	r1, [pc, #308]	; (8004110 <main+0x160>)
 8003fdc:	484d      	ldr	r0, [pc, #308]	; (8004114 <main+0x164>)
 8003fde:	f00b fa43 	bl	800f468 <siprintf>
  send_uart(buffer);
 8003fe2:	484c      	ldr	r0, [pc, #304]	; (8004114 <main+0x164>)
 8003fe4:	f7fe ff32 	bl	8002e4c <send_uart>
  clear_buffer();
 8003fe8:	f7fe ff14 	bl	8002e14 <clear_buffer>

  if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0x32F2)
 8003fec:	2101      	movs	r1, #1
 8003fee:	484a      	ldr	r0, [pc, #296]	; (8004118 <main+0x168>)
 8003ff0:	f003 fe74 	bl	8007cdc <HAL_RTCEx_BKUPRead>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d001      	beq.n	8004002 <main+0x52>
  	  {
	  	  set_time(); //set RTC init value
 8003ffe:	f7ff f8eb 	bl	80031d8 <set_time>
  	  }

  sd_init();
 8004002:	f7ff f995 	bl	8003330 <sd_init>

  /*CAN Initializations*/
  HAL_CAN_Start(&hcan);
 8004006:	4845      	ldr	r0, [pc, #276]	; (800411c <main+0x16c>)
 8004008:	f001 f833 	bl	8005072 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //using FIFO0 for RX callback reception
 800400c:	2102      	movs	r1, #2
 800400e:	4843      	ldr	r0, [pc, #268]	; (800411c <main+0x16c>)
 8004010:	f001 fa60 	bl	80054d4 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2; //data
 8004014:	4b42      	ldr	r3, [pc, #264]	; (8004120 <main+0x170>)
 8004016:	2202      	movs	r2, #2
 8004018:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <main+0x170>)
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8004020:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <main+0x170>)
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  //id
 8004026:	4b3e      	ldr	r3, [pc, #248]	; (8004120 <main+0x170>)
 8004028:	f240 4246 	movw	r2, #1094	; 0x446
 800402c:	601a      	str	r2, [r3, #0]
  //populate data to Txdata bytes
  TxData[0] = 11;
 800402e:	4b3d      	ldr	r3, [pc, #244]	; (8004124 <main+0x174>)
 8004030:	220b      	movs	r2, #11
 8004032:	701a      	strb	r2, [r3, #0]
  TxData[1] = 100;
 8004034:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <main+0x174>)
 8004036:	2264      	movs	r2, #100	; 0x64
 8004038:	705a      	strb	r2, [r3, #1]
  //send CAN message // TO DO:check CAN message reception on BluePill
  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);

  /*UART2 Interrupt*/
  HAL_UART_Receive_IT (&huart2, uart_rx_data, 4); //set interrupt for uart rx
 800403a:	2204      	movs	r2, #4
 800403c:	493a      	ldr	r1, [pc, #232]	; (8004128 <main+0x178>)
 800403e:	483b      	ldr	r0, [pc, #236]	; (800412c <main+0x17c>)
 8004040:	f004 fcd6 	bl	80089f0 <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET); //turn ON precharge relay
 8004044:	2201      	movs	r2, #1
 8004046:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800404a:	4839      	ldr	r0, [pc, #228]	; (8004130 <main+0x180>)
 800404c:	f001 ffb2 	bl	8005fb4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8004050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004054:	f000 fe24 	bl	8004ca0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); //turn OFF precharge relay
 8004058:	2200      	movs	r2, #0
 800405a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800405e:	4834      	ldr	r0, [pc, #208]	; (8004130 <main+0x180>)
 8004060:	f001 ffa8 	bl	8005fb4 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8004064:	20fa      	movs	r0, #250	; 0xfa
 8004066:	f000 fe1b 	bl	8004ca0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET); //turn ON HV+ contactor
 800406a:	2201      	movs	r2, #1
 800406c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004070:	482f      	ldr	r0, [pc, #188]	; (8004130 <main+0x180>)
 8004072:	f001 ff9f 	bl	8005fb4 <HAL_GPIO_WritePin>

  	//TO DO:add LTC6811 library files/use driverSWLTC6804 functions
  //wakeup_sleep(1);
  //wakeup_idle(1);
  init_LTC6813();
 8004076:	f7ff fd3d 	bl	8003af4 <init_LTC6813>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Receive (&huart2, Rx_data, 4, 1000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 800407a:	2108      	movs	r1, #8
 800407c:	482c      	ldr	r0, [pc, #176]	; (8004130 <main+0x180>)
 800407e:	f001 ffb1 	bl	8005fe4 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8004082:	20fa      	movs	r0, #250	; 0xfa
 8004084:	f000 fe0c 	bl	8004ca0 <HAL_Delay>
	  //send CAN message // TO DO:check CAN message reception on BluePill
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8004088:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <main+0x184>)
 800408a:	4a26      	ldr	r2, [pc, #152]	; (8004124 <main+0x174>)
 800408c:	4924      	ldr	r1, [pc, #144]	; (8004120 <main+0x170>)
 800408e:	4823      	ldr	r0, [pc, #140]	; (800411c <main+0x16c>)
 8004090:	f001 f833 	bl	80050fa <HAL_CAN_AddTxMessage>

	  //wakeup_idle(1);
	  unit_test_LTC6813();
 8004094:	f7ff fdde 	bl	8003c54 <unit_test_LTC6813>
	  calculateMaxandMinCellVoltages();
 8004098:	f7ff fba8 	bl	80037ec <calculateMaxandMinCellVoltages>
	  cellBalancingTask();
 800409c:	f7ff fc34 	bl	8003908 <cellBalancingTask>

	  if(CAN_data_checkFlag) //check if CAN RX flag is set in HAL_CAN_RxFifo0MsgPendingCallback
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <main+0x188>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <main+0x11a>
	  {
		  sprintf(buffer, "CAN Message values received is:%d, %d\r\n", RxData[0], RxData[1]);
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <main+0x18c>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b23      	ldr	r3, [pc, #140]	; (800413c <main+0x18c>)
 80040b0:	785b      	ldrb	r3, [r3, #1]
 80040b2:	4923      	ldr	r1, [pc, #140]	; (8004140 <main+0x190>)
 80040b4:	4817      	ldr	r0, [pc, #92]	; (8004114 <main+0x164>)
 80040b6:	f00b f9d7 	bl	800f468 <siprintf>
		  send_uart(buffer);
 80040ba:	4816      	ldr	r0, [pc, #88]	; (8004114 <main+0x164>)
 80040bc:	f7fe fec6 	bl	8002e4c <send_uart>
		  clear_buffer();
 80040c0:	f7fe fea8 	bl	8002e14 <clear_buffer>
		  CAN_data_checkFlag = 0;
 80040c4:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <main+0x188>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
		  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	  }

	  if(uart_rx_flag)
 80040ca:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <main+0x194>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d015      	beq.n	80040fe <main+0x14e>
	  {
		  sprintf(buffer, "RX Message is: %c, %c, %c\r\n", uart_rx_data[0], uart_rx_data[1], uart_rx_data[2]);
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <main+0x178>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <main+0x178>)
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	4619      	mov	r1, r3
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <main+0x178>)
 80040e0:	789b      	ldrb	r3, [r3, #2]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	460b      	mov	r3, r1
 80040e6:	4918      	ldr	r1, [pc, #96]	; (8004148 <main+0x198>)
 80040e8:	480a      	ldr	r0, [pc, #40]	; (8004114 <main+0x164>)
 80040ea:	f00b f9bd 	bl	800f468 <siprintf>
		  send_uart(buffer);
 80040ee:	4809      	ldr	r0, [pc, #36]	; (8004114 <main+0x164>)
 80040f0:	f7fe feac 	bl	8002e4c <send_uart>
		  clear_buffer();
 80040f4:	f7fe fe8e 	bl	8002e14 <clear_buffer>
		  uart_rx_flag = 0;
 80040f8:	4b12      	ldr	r3, [pc, #72]	; (8004144 <main+0x194>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

	  }

	  get_time();  //print RTC
 80040fe:	f7ff f8ab 	bl	8003258 <get_time>
	  write_to_csvfile();
 8004102:	f7fe febd 	bl	8002e80 <write_to_csvfile>
	  HAL_Delay(250);
 8004106:	20fa      	movs	r0, #250	; 0xfa
 8004108:	f000 fdca 	bl	8004ca0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //toggle status LED
 800410c:	e7b5      	b.n	800407a <main+0xca>
 800410e:	bf00      	nop
 8004110:	08011d5c 	.word	0x08011d5c
 8004114:	20001648 	.word	0x20001648
 8004118:	20001a48 	.word	0x20001a48
 800411c:	20001604 	.word	0x20001604
 8004120:	20001bec 	.word	0x20001bec
 8004124:	20001a68 	.word	0x20001a68
 8004128:	20001cb8 	.word	0x20001cb8
 800412c:	20001b14 	.word	0x20001b14
 8004130:	48000400 	.word	0x48000400
 8004134:	20001a9c 	.word	0x20001a9c
 8004138:	2000022c 	.word	0x2000022c
 800413c:	20001b0c 	.word	0x20001b0c
 8004140:	08011d84 	.word	0x08011d84
 8004144:	20000228 	.word	0x20000228
 8004148:	08011dac 	.word	0x08011dac

0800414c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b09e      	sub	sp, #120	; 0x78
 8004150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004152:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004156:	2228      	movs	r2, #40	; 0x28
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f00a fc58 	bl	800ea10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004160:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004170:	463b      	mov	r3, r7
 8004172:	223c      	movs	r2, #60	; 0x3c
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f00a fc4a 	bl	800ea10 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800417c:	f001 ff64 	bl	8006048 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004180:	4b26      	ldr	r3, [pc, #152]	; (800421c <SystemClock_Config+0xd0>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	4a25      	ldr	r2, [pc, #148]	; (800421c <SystemClock_Config+0xd0>)
 8004186:	f023 0318 	bic.w	r3, r3, #24
 800418a:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800418c:	2305      	movs	r3, #5
 800418e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004194:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004196:	2300      	movs	r3, #0
 8004198:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800419a:	2301      	movs	r3, #1
 800419c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800419e:	2301      	movs	r3, #1
 80041a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041a2:	2302      	movs	r3, #2
 80041a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80041ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80041b0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 ff56 	bl	8006068 <HAL_RCC_OscConfig>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80041c2:	f000 fa11 	bl	80045e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041c6:	230f      	movs	r3, #15
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041ca:	2302      	movs	r3, #2
 80041cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041ce:	2300      	movs	r3, #0
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041d8:	2300      	movs	r3, #0
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f002 fe48 	bl	8006e78 <HAL_RCC_ClockConfig>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80041ee:	f000 f9fb 	bl	80045e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <SystemClock_Config+0xd4>)
 80041f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80041fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041fe:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004200:	463b      	mov	r3, r7
 8004202:	4618      	mov	r0, r3
 8004204:	f003 f86e 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800420e:	f000 f9eb 	bl	80045e8 <Error_Handler>
  }
}
 8004212:	bf00      	nop
 8004214:	3778      	adds	r7, #120	; 0x78
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	00010002 	.word	0x00010002

08004224 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <MX_CAN_Init+0xa0>)
 800422c:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <MX_CAN_Init+0xa4>)
 800422e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <MX_CAN_Init+0xa0>)
 8004232:	2212      	movs	r2, #18
 8004234:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8004236:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <MX_CAN_Init+0xa0>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <MX_CAN_Init+0xa0>)
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <MX_CAN_Init+0xa0>)
 8004244:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004248:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800424a:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <MX_CAN_Init+0xa0>)
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <MX_CAN_Init+0xa0>)
 8004252:	2200      	movs	r2, #0
 8004254:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <MX_CAN_Init+0xa0>)
 8004258:	2200      	movs	r2, #0
 800425a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <MX_CAN_Init+0xa0>)
 800425e:	2200      	movs	r2, #0
 8004260:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <MX_CAN_Init+0xa0>)
 8004264:	2200      	movs	r2, #0
 8004266:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <MX_CAN_Init+0xa0>)
 800426a:	2200      	movs	r2, #0
 800426c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <MX_CAN_Init+0xa0>)
 8004270:	2200      	movs	r2, #0
 8004272:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004274:	4813      	ldr	r0, [pc, #76]	; (80042c4 <MX_CAN_Init+0xa0>)
 8004276:	f000 fd37 	bl	8004ce8 <HAL_CAN_Init>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8004280:	f000 f9b2 	bl	80045e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //CAN filter settings
  CAN_FilterTypeDef canfilterConfig;

  canfilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8004284:	2301      	movs	r3, #1
 8004286:	623b      	str	r3, [r7, #32]
  canfilterConfig.FilterBank = 11;
 8004288:	230b      	movs	r3, #11
 800428a:	617b      	str	r3, [r7, #20]
  canfilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
  canfilterConfig.FilterIdHigh = 0x103<<5;
 8004290:	f242 0360 	movw	r3, #8288	; 0x2060
 8004294:	603b      	str	r3, [r7, #0]
  canfilterConfig.FilterIdLow = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
  canfilterConfig.FilterMaskIdHigh = 0x103<<5;
 800429a:	f242 0360 	movw	r3, #8288	; 0x2060
 800429e:	60bb      	str	r3, [r7, #8]
  canfilterConfig.FilterMaskIdLow = 0x0000;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  canfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
  canfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80042a8:	2301      	movs	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
  canfilterConfig.SlaveStartFilterBank = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterConfig);
 80042b0:	463b      	mov	r3, r7
 80042b2:	4619      	mov	r1, r3
 80042b4:	4803      	ldr	r0, [pc, #12]	; (80042c4 <MX_CAN_Init+0xa0>)
 80042b6:	f000 fe12 	bl	8004ede <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80042ba:	bf00      	nop
 80042bc:	3728      	adds	r7, #40	; 0x28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20001604 	.word	0x20001604
 80042c8:	40006400 	.word	0x40006400

080042cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80042e0:	2300      	movs	r3, #0
 80042e2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80042e4:	4b27      	ldr	r3, [pc, #156]	; (8004384 <MX_RTC_Init+0xb8>)
 80042e6:	4a28      	ldr	r2, [pc, #160]	; (8004388 <MX_RTC_Init+0xbc>)
 80042e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042ea:	4b26      	ldr	r3, [pc, #152]	; (8004384 <MX_RTC_Init+0xb8>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <MX_RTC_Init+0xb8>)
 80042f2:	227f      	movs	r2, #127	; 0x7f
 80042f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80042f6:	4b23      	ldr	r3, [pc, #140]	; (8004384 <MX_RTC_Init+0xb8>)
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <MX_RTC_Init+0xb8>)
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <MX_RTC_Init+0xb8>)
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <MX_RTC_Init+0xb8>)
 800430a:	2200      	movs	r2, #0
 800430c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800430e:	481d      	ldr	r0, [pc, #116]	; (8004384 <MX_RTC_Init+0xb8>)
 8004310:	f003 f998 	bl	8007644 <HAL_RTC_Init>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800431a:	f000 f965 	bl	80045e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x02;
 800431e:	2302      	movs	r3, #2
 8004320:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x03;
 8004322:	2303      	movs	r3, #3
 8004324:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004326:	2300      	movs	r3, #0
 8004328:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	2201      	movs	r2, #1
 8004336:	4619      	mov	r1, r3
 8004338:	4812      	ldr	r0, [pc, #72]	; (8004384 <MX_RTC_Init+0xb8>)
 800433a:	f003 fa14 	bl	8007766 <HAL_RTC_SetTime>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004344:	f000 f950 	bl	80045e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8004348:	2307      	movs	r3, #7
 800434a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 800434c:	2307      	movs	r3, #7
 800434e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8004350:	2310      	movs	r3, #16
 8004352:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8004354:	2322      	movs	r3, #34	; 0x22
 8004356:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004358:	463b      	mov	r3, r7
 800435a:	2201      	movs	r2, #1
 800435c:	4619      	mov	r1, r3
 800435e:	4809      	ldr	r0, [pc, #36]	; (8004384 <MX_RTC_Init+0xb8>)
 8004360:	f003 fb1c 	bl	800799c <HAL_RTC_SetDate>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800436a:	f000 f93d 	bl	80045e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 800436e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004372:	2101      	movs	r1, #1
 8004374:	4803      	ldr	r0, [pc, #12]	; (8004384 <MX_RTC_Init+0xb8>)
 8004376:	f003 fc97 	bl	8007ca8 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 2 */

}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20001a48 	.word	0x20001a48
 8004388:	40002800 	.word	0x40002800

0800438c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <MX_SPI1_Init+0x74>)
 8004392:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <MX_SPI1_Init+0x78>)
 8004394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <MX_SPI1_Init+0x74>)
 8004398:	f44f 7282 	mov.w	r2, #260	; 0x104
 800439c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <MX_SPI1_Init+0x74>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <MX_SPI1_Init+0x74>)
 80043a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <MX_SPI1_Init+0x74>)
 80043ae:	2202      	movs	r2, #2
 80043b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80043b2:	4b13      	ldr	r3, [pc, #76]	; (8004400 <MX_SPI1_Init+0x74>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <MX_SPI1_Init+0x74>)
 80043ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <MX_SPI1_Init+0x74>)
 80043c2:	2238      	movs	r2, #56	; 0x38
 80043c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <MX_SPI1_Init+0x74>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <MX_SPI1_Init+0x74>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <MX_SPI1_Init+0x74>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <MX_SPI1_Init+0x74>)
 80043da:	2207      	movs	r2, #7
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <MX_SPI1_Init+0x74>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <MX_SPI1_Init+0x74>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043ea:	4805      	ldr	r0, [pc, #20]	; (8004400 <MX_SPI1_Init+0x74>)
 80043ec:	f003 fc8e 	bl	8007d0c <HAL_SPI_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80043f6:	f000 f8f7 	bl	80045e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20001aa8 	.word	0x20001aa8
 8004404:	40013000 	.word	0x40013000

08004408 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <MX_SPI2_Init+0x74>)
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <MX_SPI2_Init+0x78>)
 8004410:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004412:	4b1a      	ldr	r3, [pc, #104]	; (800447c <MX_SPI2_Init+0x74>)
 8004414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004418:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <MX_SPI2_Init+0x74>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004420:	4b16      	ldr	r3, [pc, #88]	; (800447c <MX_SPI2_Init+0x74>)
 8004422:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004426:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004428:	4b14      	ldr	r3, [pc, #80]	; (800447c <MX_SPI2_Init+0x74>)
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <MX_SPI2_Init+0x74>)
 8004430:	2200      	movs	r2, #0
 8004432:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <MX_SPI2_Init+0x74>)
 8004436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <MX_SPI2_Init+0x74>)
 800443e:	2208      	movs	r2, #8
 8004440:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <MX_SPI2_Init+0x74>)
 8004444:	2200      	movs	r2, #0
 8004446:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <MX_SPI2_Init+0x74>)
 800444a:	2200      	movs	r2, #0
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <MX_SPI2_Init+0x74>)
 8004450:	2200      	movs	r2, #0
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <MX_SPI2_Init+0x74>)
 8004456:	2207      	movs	r2, #7
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <MX_SPI2_Init+0x74>)
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <MX_SPI2_Init+0x74>)
 8004462:	2208      	movs	r2, #8
 8004464:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004466:	4805      	ldr	r0, [pc, #20]	; (800447c <MX_SPI2_Init+0x74>)
 8004468:	f003 fc50 	bl	8007d0c <HAL_SPI_Init>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004472:	f000 f8b9 	bl	80045e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000544 	.word	0x20000544
 8004480:	40003800 	.word	0x40003800

08004484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <MX_USART2_UART_Init+0x58>)
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <MX_USART2_UART_Init+0x5c>)
 800448c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <MX_USART2_UART_Init+0x58>)
 8004490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <MX_USART2_UART_Init+0x58>)
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <MX_USART2_UART_Init+0x58>)
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <MX_USART2_UART_Init+0x58>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <MX_USART2_UART_Init+0x58>)
 80044aa:	220c      	movs	r2, #12
 80044ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <MX_USART2_UART_Init+0x58>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <MX_USART2_UART_Init+0x58>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <MX_USART2_UART_Init+0x58>)
 80044bc:	2200      	movs	r2, #0
 80044be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <MX_USART2_UART_Init+0x58>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80044c6:	4805      	ldr	r0, [pc, #20]	; (80044dc <MX_USART2_UART_Init+0x58>)
 80044c8:	f004 f9b0 	bl	800882c <HAL_UART_Init>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80044d2:	f000 f889 	bl	80045e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20001b14 	.word	0x20001b14
 80044e0:	40004400 	.word	0x40004400

080044e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044fa:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <MX_GPIO_Init+0xfc>)
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4a38      	ldr	r2, [pc, #224]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004504:	6153      	str	r3, [r2, #20]
 8004506:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004512:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	4a32      	ldr	r2, [pc, #200]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800451c:	6153      	str	r3, [r2, #20]
 800451e:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800452a:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <MX_GPIO_Init+0xfc>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	6153      	str	r3, [r2, #20]
 8004536:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800454c:	6153      	str	r3, [r2, #20]
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <MX_GPIO_Init+0xfc>)
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800455a:	2200      	movs	r2, #0
 800455c:	2110      	movs	r1, #16
 800455e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004562:	f001 fd27 	bl	8005fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8004566:	2200      	movs	r2, #0
 8004568:	f641 4108 	movw	r1, #7176	; 0x1c08
 800456c:	481d      	ldr	r0, [pc, #116]	; (80045e4 <MX_GPIO_Init+0x100>)
 800456e:	f001 fd21 	bl	8005fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004572:	2310      	movs	r3, #16
 8004574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004576:	2301      	movs	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004582:	f107 0314 	add.w	r3, r7, #20
 8004586:	4619      	mov	r1, r3
 8004588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800458c:	f001 fb80 	bl	8005c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 8004590:	f641 4308 	movw	r3, #7176	; 0x1c08
 8004594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459e:	2300      	movs	r3, #0
 80045a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a2:	f107 0314 	add.w	r3, r7, #20
 80045a6:	4619      	mov	r1, r3
 80045a8:	480e      	ldr	r0, [pc, #56]	; (80045e4 <MX_GPIO_Init+0x100>)
 80045aa:	f001 fb71 	bl	8005c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80045ae:	2320      	movs	r3, #32
 80045b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80045b2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80045b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	4619      	mov	r1, r3
 80045c2:	4808      	ldr	r0, [pc, #32]	; (80045e4 <MX_GPIO_Init+0x100>)
 80045c4:	f001 fb64 	bl	8005c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80045c8:	2200      	movs	r2, #0
 80045ca:	2100      	movs	r1, #0
 80045cc:	2017      	movs	r0, #23
 80045ce:	f001 fab2 	bl	8005b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80045d2:	2017      	movs	r0, #23
 80045d4:	f001 facb 	bl	8005b6e <HAL_NVIC_EnableIRQ>

}
 80045d8:	bf00      	nop
 80045da:	3728      	adds	r7, #40	; 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	48000400 	.word	0x48000400

080045e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045ec:	b672      	cpsid	i
}
 80045ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045f0:	e7fe      	b.n	80045f0 <Error_Handler+0x8>

080045f2 <modDelayTick1ms>:
	if(SysTick_Config(72000)){
		while(1); //Error setting SysTick.
	}
}

uint8_t modDelayTick1ms(uint32_t *last, uint32_t ticks) {
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
	if((uint32_t)(HAL_GetTick() - *last) >= ticks)
 80045fc:	f000 fb44 	bl	8004c88 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d806      	bhi.n	800461c <modDelayTick1ms+0x2a>
	{
		*last = HAL_GetTick();
 800460e:	f000 fb3b 	bl	8004c88 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	601a      	str	r2, [r3, #0]
		return true;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <modDelayTick1ms+0x2c>
	}

	return false;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <HAL_MspInit+0x44>)
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	4a0e      	ldr	r2, [pc, #56]	; (800466c <HAL_MspInit+0x44>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	6193      	str	r3, [r2, #24]
 800463a:	4b0c      	ldr	r3, [pc, #48]	; (800466c <HAL_MspInit+0x44>)
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <HAL_MspInit+0x44>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	4a08      	ldr	r2, [pc, #32]	; (800466c <HAL_MspInit+0x44>)
 800464c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004650:	61d3      	str	r3, [r2, #28]
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_MspInit+0x44>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000

08004670 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <HAL_CAN_MspInit+0x90>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d131      	bne.n	80046f6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <HAL_CAN_MspInit+0x94>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <HAL_CAN_MspInit+0x94>)
 8004698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800469c:	61d3      	str	r3, [r2, #28]
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_CAN_MspInit+0x94>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <HAL_CAN_MspInit+0x94>)
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <HAL_CAN_MspInit+0x94>)
 80046b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b4:	6153      	str	r3, [r2, #20]
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <HAL_CAN_MspInit+0x94>)
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80046c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80046c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c8:	2302      	movs	r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046d0:	2303      	movs	r3, #3
 80046d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80046d4:	2309      	movs	r3, #9
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d8:	f107 0314 	add.w	r3, r7, #20
 80046dc:	4619      	mov	r1, r3
 80046de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046e2:	f001 fad5 	bl	8005c90 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80046e6:	2200      	movs	r2, #0
 80046e8:	2100      	movs	r1, #0
 80046ea:	2014      	movs	r0, #20
 80046ec:	f001 fa23 	bl	8005b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80046f0:	2014      	movs	r0, #20
 80046f2:	f001 fa3c 	bl	8005b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80046f6:	bf00      	nop
 80046f8:	3728      	adds	r7, #40	; 0x28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40006400 	.word	0x40006400
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <HAL_RTC_MspInit+0x44>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d111      	bne.n	800473e <HAL_RTC_MspInit+0x36>
 800471a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004728:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <HAL_RTC_MspInit+0x48>)
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	461a      	mov	r2, r3
 800473a:	2301      	movs	r3, #1
 800473c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40002800 	.word	0x40002800
 8004750:	10908100 	.word	0x10908100

08004754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08c      	sub	sp, #48	; 0x30
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475c:	f107 031c 	add.w	r3, r7, #28
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <HAL_SPI_MspInit+0xdc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d129      	bne.n	80047ca <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	4a2e      	ldr	r2, [pc, #184]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 800477c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004780:	6193      	str	r3, [r2, #24]
 8004782:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800478e:	4b29      	ldr	r3, [pc, #164]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	4a28      	ldr	r2, [pc, #160]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 8004794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004798:	6153      	str	r3, [r2, #20]
 800479a:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80047a6:	23e0      	movs	r3, #224	; 0xe0
 80047a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047aa:	2302      	movs	r3, #2
 80047ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047b2:	2303      	movs	r3, #3
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047b6:	2305      	movs	r3, #5
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ba:	f107 031c 	add.w	r3, r7, #28
 80047be:	4619      	mov	r1, r3
 80047c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047c4:	f001 fa64 	bl	8005c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80047c8:	e02d      	b.n	8004826 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_SPI_MspInit+0xe4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d128      	bne.n	8004826 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80047d4:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	4a16      	ldr	r2, [pc, #88]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 80047da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047de:	61d3      	str	r3, [r2, #28]
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ec:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	4a10      	ldr	r2, [pc, #64]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 80047f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f6:	6153      	str	r3, [r2, #20]
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_SPI_MspInit+0xe0>)
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004804:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480a:	2302      	movs	r3, #2
 800480c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004812:	2303      	movs	r3, #3
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004816:	2305      	movs	r3, #5
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481a:	f107 031c 	add.w	r3, r7, #28
 800481e:	4619      	mov	r1, r3
 8004820:	4806      	ldr	r0, [pc, #24]	; (800483c <HAL_SPI_MspInit+0xe8>)
 8004822:	f001 fa35 	bl	8005c90 <HAL_GPIO_Init>
}
 8004826:	bf00      	nop
 8004828:	3730      	adds	r7, #48	; 0x30
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40013000 	.word	0x40013000
 8004834:	40021000 	.word	0x40021000
 8004838:	40003800 	.word	0x40003800
 800483c:	48000400 	.word	0x48000400

08004840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <HAL_UART_MspInit+0x8c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d130      	bne.n	80048c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004862:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_UART_MspInit+0x90>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <HAL_UART_MspInit+0x90>)
 8004868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486c:	61d3      	str	r3, [r2, #28]
 800486e:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <HAL_UART_MspInit+0x90>)
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487a:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <HAL_UART_MspInit+0x90>)
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <HAL_UART_MspInit+0x90>)
 8004880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004884:	6153      	str	r3, [r2, #20]
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_UART_MspInit+0x90>)
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004892:	230c      	movs	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004896:	2302      	movs	r3, #2
 8004898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800489e:	2303      	movs	r3, #3
 80048a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048a2:	2307      	movs	r3, #7
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a6:	f107 0314 	add.w	r3, r7, #20
 80048aa:	4619      	mov	r1, r3
 80048ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048b0:	f001 f9ee 	bl	8005c90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048b4:	2200      	movs	r2, #0
 80048b6:	2100      	movs	r1, #0
 80048b8:	2026      	movs	r0, #38	; 0x26
 80048ba:	f001 f93c 	bl	8005b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048be:	2026      	movs	r0, #38	; 0x26
 80048c0:	f001 f955 	bl	8005b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80048c4:	bf00      	nop
 80048c6:	3728      	adds	r7, #40	; 0x28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40004400 	.word	0x40004400
 80048d0:	40021000 	.word	0x40021000

080048d4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <SDTimer_Handler+0x40>)
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <SDTimer_Handler+0x1c>
    Timer1--;
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <SDTimer_Handler+0x40>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <SDTimer_Handler+0x40>)
 80048ee:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <SDTimer_Handler+0x44>)
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d006      	beq.n	8004908 <SDTimer_Handler+0x34>
    Timer2--;
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <SDTimer_Handler+0x44>)
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <SDTimer_Handler+0x44>)
 8004906:	801a      	strh	r2, [r3, #0]
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20002cf8 	.word	0x20002cf8
 8004918:	20002cf6 	.word	0x20002cf6

0800491c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004920:	e7fe      	b.n	8004920 <NMI_Handler+0x4>

08004922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004926:	e7fe      	b.n	8004926 <HardFault_Handler+0x4>

08004928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800492c:	e7fe      	b.n	800492c <MemManage_Handler+0x4>

0800492e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004932:	e7fe      	b.n	8004932 <BusFault_Handler+0x4>

08004934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004938:	e7fe      	b.n	8004938 <UsageFault_Handler+0x4>

0800493a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800493a:	b480      	push	{r7}
 800493c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004956:	b480      	push	{r7}
 8004958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800495a:	bf00      	nop
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <SysTick_Handler+0x30>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	3301      	adds	r3, #1
 8004970:	b2da      	uxtb	r2, r3
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <SysTick_Handler+0x30>)
 8004974:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <SysTick_Handler+0x30>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b09      	cmp	r3, #9
 800497e:	d904      	bls.n	800498a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <SysTick_Handler+0x30>)
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004986:	f7ff ffa5 	bl	80048d4 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800498a:	f000 f969 	bl	8004c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000231 	.word	0x20000231

08004998 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800499c:	4802      	ldr	r0, [pc, #8]	; (80049a8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800499e:	f000 fdbf 	bl	8005520 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20001604 	.word	0x20001604

080049ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80049b0:	2020      	movs	r0, #32
 80049b2:	f001 fb31 	bl	8006018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049c0:	4802      	ldr	r0, [pc, #8]	; (80049cc <USART2_IRQHandler+0x10>)
 80049c2:	f004 f863 	bl	8008a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20001b14 	.word	0x20001b14

080049d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
	return 1;
 80049d4:	2301      	movs	r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <_kill>:

int _kill(int pid, int sig)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049ea:	f009 ffc9 	bl	800e980 <__errno>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2216      	movs	r2, #22
 80049f2:	601a      	str	r2, [r3, #0]
	return -1;
 80049f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <_exit>:

void _exit (int status)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a08:	f04f 31ff 	mov.w	r1, #4294967295
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ffe7 	bl	80049e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a12:	e7fe      	b.n	8004a12 <_exit+0x12>

08004a14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e00a      	b.n	8004a3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a26:	f3af 8000 	nop.w
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	60ba      	str	r2, [r7, #8]
 8004a32:	b2ca      	uxtb	r2, r1
 8004a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	dbf0      	blt.n	8004a26 <_read+0x12>
	}

return len;
 8004a44:	687b      	ldr	r3, [r7, #4]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e009      	b.n	8004a74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	60ba      	str	r2, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	3301      	adds	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	dbf1      	blt.n	8004a60 <_write+0x12>
	}
	return len;
 8004a7c:	687b      	ldr	r3, [r7, #4]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_close>:

int _close(int file)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aae:	605a      	str	r2, [r3, #4]
	return 0;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <_isatty>:

int _isatty(int file)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
	return 1;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
	return 0;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <_sbrk+0x5c>)
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <_sbrk+0x60>)
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <_sbrk+0x64>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <_sbrk+0x64>)
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <_sbrk+0x68>)
 8004b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <_sbrk+0x64>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d207      	bcs.n	8004b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b20:	f009 ff2e 	bl	800e980 <__errno>
 8004b24:	4603      	mov	r3, r0
 8004b26:	220c      	movs	r2, #12
 8004b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2e:	e009      	b.n	8004b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <_sbrk+0x64>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <_sbrk+0x64>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <_sbrk+0x64>)
 8004b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	2000a000 	.word	0x2000a000
 8004b50:	00000400 	.word	0x00000400
 8004b54:	20000234 	.word	0x20000234
 8004b58:	20004d78 	.word	0x20004d78

08004b5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <SystemInit+0x20>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <SystemInit+0x20>)
 8004b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b84:	480d      	ldr	r0, [pc, #52]	; (8004bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8004b86:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b88:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <LoopForever+0xe>)
  movs r3, #0
 8004b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b8c:	e002      	b.n	8004b94 <LoopCopyDataInit>

08004b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b92:	3304      	adds	r3, #4

08004b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b98:	d3f9      	bcc.n	8004b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b9a:	4a0b      	ldr	r2, [pc, #44]	; (8004bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b9c:	4c0b      	ldr	r4, [pc, #44]	; (8004bcc <LoopForever+0x16>)
  movs r3, #0
 8004b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ba0:	e001      	b.n	8004ba6 <LoopFillZerobss>

08004ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ba4:	3204      	adds	r2, #4

08004ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ba8:	d3fb      	bcc.n	8004ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004baa:	f7ff ffd7 	bl	8004b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bae:	f009 feed 	bl	800e98c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bb2:	f7ff f9fd 	bl	8003fb0 <main>

08004bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8004bb6:	e7fe      	b.n	8004bb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004bb8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bc0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004bc4:	08012b84 	.word	0x08012b84
  ldr r2, =_sbss
 8004bc8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8004bcc:	20004d74 	.word	0x20004d74

08004bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bd0:	e7fe      	b.n	8004bd0 <ADC1_2_IRQHandler>
	...

08004bd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bd8:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <HAL_Init+0x28>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a07      	ldr	r2, [pc, #28]	; (8004bfc <HAL_Init+0x28>)
 8004bde:	f043 0310 	orr.w	r3, r3, #16
 8004be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004be4:	2003      	movs	r0, #3
 8004be6:	f000 ff9b 	bl	8005b20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bea:	200f      	movs	r0, #15
 8004bec:	f000 f808 	bl	8004c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bf0:	f7ff fd1a 	bl	8004628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40022000 	.word	0x40022000

08004c00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_InitTick+0x54>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <HAL_InitTick+0x58>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	4619      	mov	r1, r3
 8004c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 ffb3 	bl	8005b8a <HAL_SYSTICK_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e00e      	b.n	8004c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b0f      	cmp	r3, #15
 8004c32:	d80a      	bhi.n	8004c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c34:	2200      	movs	r2, #0
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	f000 ff7b 	bl	8005b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c40:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <HAL_InitTick+0x5c>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e000      	b.n	8004c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000008 	.word	0x20000008
 8004c58:	20000010 	.word	0x20000010
 8004c5c:	2000000c 	.word	0x2000000c

08004c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_IncTick+0x20>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_IncTick+0x24>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4413      	add	r3, r2
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <HAL_IncTick+0x24>)
 8004c72:	6013      	str	r3, [r2, #0]
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000010 	.word	0x20000010
 8004c84:	20002cfc 	.word	0x20002cfc

08004c88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_GetTick+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20002cfc 	.word	0x20002cfc

08004ca0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ca8:	f7ff ffee 	bl	8004c88 <HAL_GetTick>
 8004cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d005      	beq.n	8004cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <HAL_Delay+0x44>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004cc6:	bf00      	nop
 8004cc8:	f7ff ffde 	bl	8004c88 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d8f7      	bhi.n	8004cc8 <HAL_Delay+0x28>
  {
  }
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000010 	.word	0x20000010

08004ce8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0ed      	b.n	8004ed6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fcb2 	bl	8004670 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d1c:	f7ff ffb4 	bl	8004c88 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d22:	e012      	b.n	8004d4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d24:	f7ff ffb0 	bl	8004c88 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	d90b      	bls.n	8004d4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2205      	movs	r2, #5
 8004d42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0c5      	b.n	8004ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0e5      	beq.n	8004d24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0202 	bic.w	r2, r2, #2
 8004d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d68:	f7ff ff8e 	bl	8004c88 <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d6e:	e012      	b.n	8004d96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d70:	f7ff ff8a 	bl	8004c88 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b0a      	cmp	r3, #10
 8004d7c:	d90b      	bls.n	8004d96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2205      	movs	r2, #5
 8004d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e09f      	b.n	8004ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e5      	bne.n	8004d70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	7e1b      	ldrb	r3, [r3, #24]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d108      	bne.n	8004dbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e007      	b.n	8004dce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7e5b      	ldrb	r3, [r3, #25]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d108      	bne.n	8004de8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	e007      	b.n	8004df8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7e9b      	ldrb	r3, [r3, #26]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d108      	bne.n	8004e12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0220 	orr.w	r2, r2, #32
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e007      	b.n	8004e22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0220 	bic.w	r2, r2, #32
 8004e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7edb      	ldrb	r3, [r3, #27]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d108      	bne.n	8004e3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0210 	bic.w	r2, r2, #16
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e007      	b.n	8004e4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0210 	orr.w	r2, r2, #16
 8004e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7f1b      	ldrb	r3, [r3, #28]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d108      	bne.n	8004e66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0208 	orr.w	r2, r2, #8
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e007      	b.n	8004e76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0208 	bic.w	r2, r2, #8
 8004e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	7f5b      	ldrb	r3, [r3, #29]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d108      	bne.n	8004e90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0204 	orr.w	r2, r2, #4
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e007      	b.n	8004ea0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	ea42 0103 	orr.w	r1, r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	1e5a      	subs	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ef6:	7cfb      	ldrb	r3, [r7, #19]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d003      	beq.n	8004f04 <HAL_CAN_ConfigFilter+0x26>
 8004efc:	7cfb      	ldrb	r3, [r7, #19]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	f040 80aa 	bne.w	8005058 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	401a      	ands	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d123      	bne.n	8004f86 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	401a      	ands	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	3248      	adds	r2, #72	; 0x48
 8004f66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	3348      	adds	r3, #72	; 0x48
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	440b      	add	r3, r1
 8004f84:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d122      	bne.n	8004fd4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3248      	adds	r2, #72	; 0x48
 8004fb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fca:	6979      	ldr	r1, [r7, #20]
 8004fcc:	3348      	adds	r3, #72	; 0x48
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	440b      	add	r3, r1
 8004fd2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004fee:	e007      	b.n	8005000 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	43db      	mvns	r3, r3
 8005012:	401a      	ands	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800501a:	e007      	b.n	800502c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	431a      	orrs	r2, r3
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	431a      	orrs	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e006      	b.n	8005066 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d12e      	bne.n	80050e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800509e:	f7ff fdf3 	bl	8004c88 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050a4:	e012      	b.n	80050cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050a6:	f7ff fdef 	bl	8004c88 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b0a      	cmp	r3, #10
 80050b2:	d90b      	bls.n	80050cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2205      	movs	r2, #5
 80050c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e012      	b.n	80050f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e5      	bne.n	80050a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e006      	b.n	80050f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b089      	sub	sp, #36	; 0x24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800510e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005118:	7ffb      	ldrb	r3, [r7, #31]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d003      	beq.n	8005126 <HAL_CAN_AddTxMessage+0x2c>
 800511e:	7ffb      	ldrb	r3, [r7, #31]
 8005120:	2b02      	cmp	r3, #2
 8005122:	f040 80b8 	bne.w	8005296 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80a0 	beq.w	8005286 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	0e1b      	lsrs	r3, r3, #24
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d907      	bls.n	8005166 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e09e      	b.n	80052a4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005166:	2201      	movs	r2, #1
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	409a      	lsls	r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	6809      	ldr	r1, [r1, #0]
 8005186:	431a      	orrs	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3318      	adds	r3, #24
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	440b      	add	r3, r1
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e00f      	b.n	80051b4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800519e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051a4:	68f9      	ldr	r1, [r7, #12]
 80051a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80051a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3318      	adds	r3, #24
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	440b      	add	r3, r1
 80051b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6819      	ldr	r1, [r3, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	3318      	adds	r3, #24
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	440b      	add	r3, r1
 80051c4:	3304      	adds	r3, #4
 80051c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	7d1b      	ldrb	r3, [r3, #20]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d111      	bne.n	80051f4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	3318      	adds	r3, #24
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	4413      	add	r3, r2
 80051dc:	3304      	adds	r3, #4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	6811      	ldr	r1, [r2, #0]
 80051e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3318      	adds	r3, #24
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	440b      	add	r3, r1
 80051f0:	3304      	adds	r3, #4
 80051f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3307      	adds	r3, #7
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	061a      	lsls	r2, r3, #24
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3306      	adds	r3, #6
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	041b      	lsls	r3, r3, #16
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3305      	adds	r3, #5
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	4313      	orrs	r3, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	3204      	adds	r2, #4
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	4610      	mov	r0, r2
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	6811      	ldr	r1, [r2, #0]
 800521c:	ea43 0200 	orr.w	r2, r3, r0
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	440b      	add	r3, r1
 8005226:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800522a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3303      	adds	r3, #3
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	061a      	lsls	r2, r3, #24
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3302      	adds	r3, #2
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3301      	adds	r3, #1
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	4313      	orrs	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	7812      	ldrb	r2, [r2, #0]
 800524c:	4610      	mov	r0, r2
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	6811      	ldr	r1, [r2, #0]
 8005252:	ea43 0200 	orr.w	r2, r3, r0
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	440b      	add	r3, r1
 800525c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005260:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	3318      	adds	r3, #24
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	4413      	add	r3, r2
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	6811      	ldr	r1, [r2, #0]
 8005274:	f043 0201 	orr.w	r2, r3, #1
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	3318      	adds	r3, #24
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	440b      	add	r3, r1
 8005280:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e00e      	b.n	80052a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e006      	b.n	80052a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
  }
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3724      	adds	r7, #36	; 0x24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d003      	beq.n	80052d4 <HAL_CAN_GetRxMessage+0x24>
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	f040 80f3 	bne.w	80054ba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10e      	bne.n	80052f8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d116      	bne.n	8005316 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0e7      	b.n	80054c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d107      	bne.n	8005316 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e0d8      	b.n	80054c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	331b      	adds	r3, #27
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	4413      	add	r3, r2
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0204 	and.w	r2, r3, #4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10c      	bne.n	800534e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	331b      	adds	r3, #27
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	4413      	add	r3, r2
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	0d5b      	lsrs	r3, r3, #21
 8005344:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e00b      	b.n	8005366 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	331b      	adds	r3, #27
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	4413      	add	r3, r2
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	331b      	adds	r3, #27
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	4413      	add	r3, r2
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0202 	and.w	r2, r3, #2
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	331b      	adds	r3, #27
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	4413      	add	r3, r2
 8005388:	3304      	adds	r3, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 020f 	and.w	r2, r3, #15
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	331b      	adds	r3, #27
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	4413      	add	r3, r2
 80053a0:	3304      	adds	r3, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	0a1b      	lsrs	r3, r3, #8
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	331b      	adds	r3, #27
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	4413      	add	r3, r2
 80053b8:	3304      	adds	r3, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	0c1b      	lsrs	r3, r3, #16
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	0a1a      	lsrs	r2, r3, #8
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	3301      	adds	r3, #1
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	0c1a      	lsrs	r2, r3, #16
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	3302      	adds	r3, #2
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	4413      	add	r3, r2
 8005418:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	0e1a      	lsrs	r2, r3, #24
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3303      	adds	r3, #3
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	4413      	add	r3, r2
 8005432:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	3304      	adds	r3, #4
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	4413      	add	r3, r2
 800544a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0a1a      	lsrs	r2, r3, #8
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	3305      	adds	r3, #5
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	4413      	add	r3, r2
 8005464:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	0c1a      	lsrs	r2, r3, #16
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	3306      	adds	r3, #6
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4413      	add	r3, r2
 800547e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	0e1a      	lsrs	r2, r3, #24
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	3307      	adds	r3, #7
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d108      	bne.n	80054a6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0220 	orr.w	r2, r2, #32
 80054a2:	60da      	str	r2, [r3, #12]
 80054a4:	e007      	b.n	80054b6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0220 	orr.w	r2, r2, #32
 80054b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e006      	b.n	80054c8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
  }
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d002      	beq.n	80054f2 <HAL_CAN_ActivateNotification+0x1e>
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d109      	bne.n	8005506 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6959      	ldr	r1, [r3, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e006      	b.n	8005514 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005528:	2300      	movs	r3, #0
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d07c      	beq.n	8005660 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d023      	beq.n	80055b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2201      	movs	r2, #1
 8005576:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f983 	bl	800588e <HAL_CAN_TxMailbox0CompleteCallback>
 8005588:	e016      	b.n	80055b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
 800559c:	e00c      	b.n	80055b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
 80055b0:	e002      	b.n	80055b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f989 	bl	80058ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d024      	beq.n	800560c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f963 	bl	80058a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80055dc:	e016      	b.n	800560c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
 80055f0:	e00c      	b.n	800560c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
 8005604:	e002      	b.n	800560c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f969 	bl	80058de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d024      	beq.n	8005660 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800561e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f943 	bl	80058b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8005630:	e016      	b.n	8005660 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
 8005644:	e00c      	b.n	8005660 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
 8005658:	e002      	b.n	8005660 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f949 	bl	80058f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800567a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2210      	movs	r2, #16
 8005682:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d006      	beq.n	80056a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2208      	movs	r2, #8
 800569e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f930 	bl	8005906 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fd fd58 	bl	8003174 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2210      	movs	r2, #16
 80056e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d006      	beq.n	800570a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f912 	bl	800592e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8f9 	bl	800591a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b00      	cmp	r3, #0
 800573a:	d006      	beq.n	800574a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2210      	movs	r2, #16
 8005742:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8fc 	bl	8005942 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2208      	movs	r2, #8
 8005764:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8f5 	bl	8005956 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d07b      	beq.n	800586e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d072      	beq.n	8005866 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	f043 0302 	orr.w	r3, r3, #2
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d043      	beq.n	8005866 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d03e      	beq.n	8005866 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057ee:	2b60      	cmp	r3, #96	; 0x60
 80057f0:	d02b      	beq.n	800584a <HAL_CAN_IRQHandler+0x32a>
 80057f2:	2b60      	cmp	r3, #96	; 0x60
 80057f4:	d82e      	bhi.n	8005854 <HAL_CAN_IRQHandler+0x334>
 80057f6:	2b50      	cmp	r3, #80	; 0x50
 80057f8:	d022      	beq.n	8005840 <HAL_CAN_IRQHandler+0x320>
 80057fa:	2b50      	cmp	r3, #80	; 0x50
 80057fc:	d82a      	bhi.n	8005854 <HAL_CAN_IRQHandler+0x334>
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d019      	beq.n	8005836 <HAL_CAN_IRQHandler+0x316>
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d826      	bhi.n	8005854 <HAL_CAN_IRQHandler+0x334>
 8005806:	2b30      	cmp	r3, #48	; 0x30
 8005808:	d010      	beq.n	800582c <HAL_CAN_IRQHandler+0x30c>
 800580a:	2b30      	cmp	r3, #48	; 0x30
 800580c:	d822      	bhi.n	8005854 <HAL_CAN_IRQHandler+0x334>
 800580e:	2b10      	cmp	r3, #16
 8005810:	d002      	beq.n	8005818 <HAL_CAN_IRQHandler+0x2f8>
 8005812:	2b20      	cmp	r3, #32
 8005814:	d005      	beq.n	8005822 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005816:	e01d      	b.n	8005854 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	f043 0308 	orr.w	r3, r3, #8
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005820:	e019      	b.n	8005856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	f043 0310 	orr.w	r3, r3, #16
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800582a:	e014      	b.n	8005856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	f043 0320 	orr.w	r3, r3, #32
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005834:	e00f      	b.n	8005856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800583e:	e00a      	b.n	8005856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005848:	e005      	b.n	8005856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005852:	e000      	b.n	8005856 <HAL_CAN_IRQHandler+0x336>
            break;
 8005854:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005864:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2204      	movs	r2, #4
 800586c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f872 	bl	800596a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005886:	bf00      	nop
 8005888:	3728      	adds	r7, #40	; 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800599c:	4013      	ands	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059b2:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <__NVIC_SetPriorityGrouping+0x44>)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	60d3      	str	r3, [r2, #12]
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059cc:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <__NVIC_GetPriorityGrouping+0x18>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	0a1b      	lsrs	r3, r3, #8
 80059d2:	f003 0307 	and.w	r3, r3, #7
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	db0b      	blt.n	8005a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	f003 021f 	and.w	r2, r3, #31
 80059fc:	4907      	ldr	r1, [pc, #28]	; (8005a1c <__NVIC_EnableIRQ+0x38>)
 80059fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	2001      	movs	r0, #1
 8005a06:	fa00 f202 	lsl.w	r2, r0, r2
 8005a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	e000e100 	.word	0xe000e100

08005a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	6039      	str	r1, [r7, #0]
 8005a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	db0a      	blt.n	8005a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	490c      	ldr	r1, [pc, #48]	; (8005a6c <__NVIC_SetPriority+0x4c>)
 8005a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3e:	0112      	lsls	r2, r2, #4
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	440b      	add	r3, r1
 8005a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a48:	e00a      	b.n	8005a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	4908      	ldr	r1, [pc, #32]	; (8005a70 <__NVIC_SetPriority+0x50>)
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	3b04      	subs	r3, #4
 8005a58:	0112      	lsls	r2, r2, #4
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	761a      	strb	r2, [r3, #24]
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	e000e100 	.word	0xe000e100
 8005a70:	e000ed00 	.word	0xe000ed00

08005a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b089      	sub	sp, #36	; 0x24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f1c3 0307 	rsb	r3, r3, #7
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	bf28      	it	cs
 8005a92:	2304      	movcs	r3, #4
 8005a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	2b06      	cmp	r3, #6
 8005a9c:	d902      	bls.n	8005aa4 <NVIC_EncodePriority+0x30>
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3b03      	subs	r3, #3
 8005aa2:	e000      	b.n	8005aa6 <NVIC_EncodePriority+0x32>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43da      	mvns	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005abc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac6:	43d9      	mvns	r1, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005acc:	4313      	orrs	r3, r2
         );
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3724      	adds	r7, #36	; 0x24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aec:	d301      	bcc.n	8005af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aee:	2301      	movs	r3, #1
 8005af0:	e00f      	b.n	8005b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005af2:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <SysTick_Config+0x40>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005afa:	210f      	movs	r1, #15
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	f7ff ff8e 	bl	8005a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <SysTick_Config+0x40>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b0a:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <SysTick_Config+0x40>)
 8005b0c:	2207      	movs	r2, #7
 8005b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	e000e010 	.word	0xe000e010

08005b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff ff29 	bl	8005980 <__NVIC_SetPriorityGrouping>
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b48:	f7ff ff3e 	bl	80059c8 <__NVIC_GetPriorityGrouping>
 8005b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	6978      	ldr	r0, [r7, #20]
 8005b54:	f7ff ff8e 	bl	8005a74 <NVIC_EncodePriority>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ff5d 	bl	8005a20 <__NVIC_SetPriority>
}
 8005b66:	bf00      	nop
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	4603      	mov	r3, r0
 8005b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff31 	bl	80059e4 <__NVIC_EnableIRQ>
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff ffa2 	bl	8005adc <SysTick_Config>
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d008      	beq.n	8005bc6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2204      	movs	r2, #4
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e020      	b.n	8005c08 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 020e 	bic.w	r2, r2, #14
 8005bd4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	2101      	movs	r1, #1
 8005bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d005      	beq.n	8005c36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
 8005c34:	e027      	b.n	8005c86 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 020e 	bic.w	r2, r2, #14
 8005c44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	2101      	movs	r1, #1
 8005c60:	fa01 f202 	lsl.w	r2, r1, r2
 8005c64:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
    } 
  }
  return status;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c9e:	e154      	b.n	8005f4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 8146 	beq.w	8005f44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d005      	beq.n	8005cd0 <HAL_GPIO_Init+0x40>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d130      	bne.n	8005d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d06:	2201      	movs	r2, #1
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	f003 0201 	and.w	r2, r3, #1
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d017      	beq.n	8005d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	2203      	movs	r2, #3
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4013      	ands	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d123      	bne.n	8005dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	08da      	lsrs	r2, r3, #3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3208      	adds	r2, #8
 8005d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	220f      	movs	r2, #15
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	43db      	mvns	r3, r3
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	691a      	ldr	r2, [r3, #16]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	08da      	lsrs	r2, r3, #3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3208      	adds	r2, #8
 8005dbc:	6939      	ldr	r1, [r7, #16]
 8005dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	2203      	movs	r2, #3
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f003 0203 	and.w	r2, r3, #3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80a0 	beq.w	8005f44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e04:	4b58      	ldr	r3, [pc, #352]	; (8005f68 <HAL_GPIO_Init+0x2d8>)
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	4a57      	ldr	r2, [pc, #348]	; (8005f68 <HAL_GPIO_Init+0x2d8>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6193      	str	r3, [r2, #24]
 8005e10:	4b55      	ldr	r3, [pc, #340]	; (8005f68 <HAL_GPIO_Init+0x2d8>)
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e1c:	4a53      	ldr	r2, [pc, #332]	; (8005f6c <HAL_GPIO_Init+0x2dc>)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	3302      	adds	r3, #2
 8005e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	220f      	movs	r2, #15
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e46:	d019      	beq.n	8005e7c <HAL_GPIO_Init+0x1ec>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a49      	ldr	r2, [pc, #292]	; (8005f70 <HAL_GPIO_Init+0x2e0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <HAL_GPIO_Init+0x1e8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a48      	ldr	r2, [pc, #288]	; (8005f74 <HAL_GPIO_Init+0x2e4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00d      	beq.n	8005e74 <HAL_GPIO_Init+0x1e4>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a47      	ldr	r2, [pc, #284]	; (8005f78 <HAL_GPIO_Init+0x2e8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <HAL_GPIO_Init+0x1e0>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a46      	ldr	r2, [pc, #280]	; (8005f7c <HAL_GPIO_Init+0x2ec>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d101      	bne.n	8005e6c <HAL_GPIO_Init+0x1dc>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	e008      	b.n	8005e7e <HAL_GPIO_Init+0x1ee>
 8005e6c:	2305      	movs	r3, #5
 8005e6e:	e006      	b.n	8005e7e <HAL_GPIO_Init+0x1ee>
 8005e70:	2303      	movs	r3, #3
 8005e72:	e004      	b.n	8005e7e <HAL_GPIO_Init+0x1ee>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e002      	b.n	8005e7e <HAL_GPIO_Init+0x1ee>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <HAL_GPIO_Init+0x1ee>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	f002 0203 	and.w	r2, r2, #3
 8005e84:	0092      	lsls	r2, r2, #2
 8005e86:	4093      	lsls	r3, r2
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e8e:	4937      	ldr	r1, [pc, #220]	; (8005f6c <HAL_GPIO_Init+0x2dc>)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	089b      	lsrs	r3, r3, #2
 8005e94:	3302      	adds	r3, #2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e9c:	4b38      	ldr	r3, [pc, #224]	; (8005f80 <HAL_GPIO_Init+0x2f0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005ec0:	4a2f      	ldr	r2, [pc, #188]	; (8005f80 <HAL_GPIO_Init+0x2f0>)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ec6:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <HAL_GPIO_Init+0x2f0>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005eea:	4a25      	ldr	r2, [pc, #148]	; (8005f80 <HAL_GPIO_Init+0x2f0>)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ef0:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <HAL_GPIO_Init+0x2f0>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4013      	ands	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005f14:	4a1a      	ldr	r2, [pc, #104]	; (8005f80 <HAL_GPIO_Init+0x2f0>)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f1a:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <HAL_GPIO_Init+0x2f0>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4013      	ands	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005f3e:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <HAL_GPIO_Init+0x2f0>)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	3301      	adds	r3, #1
 8005f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f47f aea3 	bne.w	8005ca0 <HAL_GPIO_Init+0x10>
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	48000400 	.word	0x48000400
 8005f74:	48000800 	.word	0x48000800
 8005f78:	48000c00 	.word	0x48000c00
 8005f7c:	48001000 	.word	0x48001000
 8005f80:	40010400 	.word	0x40010400

08005f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	887b      	ldrh	r3, [r7, #2]
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
 8005fa0:	e001      	b.n	8005fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fc4:	787b      	ldrb	r3, [r7, #1]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fca:	887a      	ldrh	r2, [r7, #2]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fd0:	e002      	b.n	8005fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ff6:	887a      	ldrh	r2, [r7, #2]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	041a      	lsls	r2, r3, #16
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	43d9      	mvns	r1, r3
 8006002:	887b      	ldrh	r3, [r7, #2]
 8006004:	400b      	ands	r3, r1
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	619a      	str	r2, [r3, #24]
}
 800600c:	bf00      	nop
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d006      	beq.n	800603c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800602e:	4a05      	ldr	r2, [pc, #20]	; (8006044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fd f94c 	bl	80032d4 <HAL_GPIO_EXTI_Callback>
  }
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40010400 	.word	0x40010400

08006048 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a04      	ldr	r2, [pc, #16]	; (8006064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40007000 	.word	0x40007000

08006068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800606e:	af00      	add	r7, sp, #0
 8006070:	1d3b      	adds	r3, r7, #4
 8006072:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006074:	1d3b      	adds	r3, r7, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	f000 bef4 	b.w	8006e6a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 816a 	beq.w	8006366 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006092:	4bb3      	ldr	r3, [pc, #716]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f003 030c 	and.w	r3, r3, #12
 800609a:	2b04      	cmp	r3, #4
 800609c:	d00c      	beq.n	80060b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800609e:	4bb0      	ldr	r3, [pc, #704]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d159      	bne.n	800615e <HAL_RCC_OscConfig+0xf6>
 80060aa:	4bad      	ldr	r3, [pc, #692]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b6:	d152      	bne.n	800615e <HAL_RCC_OscConfig+0xf6>
 80060b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80060c4:	fa93 f3a3 	rbit	r3, r3
 80060c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80060cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d0:	fab3 f383 	clz	r3, r3
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d102      	bne.n	80060ea <HAL_RCC_OscConfig+0x82>
 80060e4:	4b9e      	ldr	r3, [pc, #632]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	e015      	b.n	8006116 <HAL_RCC_OscConfig+0xae>
 80060ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80060f6:	fa93 f3a3 	rbit	r3, r3
 80060fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80060fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006102:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006106:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800610a:	fa93 f3a3 	rbit	r3, r3
 800610e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006112:	4b93      	ldr	r3, [pc, #588]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800611a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800611e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006122:	fa92 f2a2 	rbit	r2, r2
 8006126:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800612a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800612e:	fab2 f282 	clz	r2, r2
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	f042 0220 	orr.w	r2, r2, #32
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	f002 021f 	and.w	r2, r2, #31
 800613e:	2101      	movs	r1, #1
 8006140:	fa01 f202 	lsl.w	r2, r1, r2
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 810c 	beq.w	8006364 <HAL_RCC_OscConfig+0x2fc>
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f040 8106 	bne.w	8006364 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f000 be86 	b.w	8006e6a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d106      	bne.n	8006178 <HAL_RCC_OscConfig+0x110>
 800616a:	4b7d      	ldr	r3, [pc, #500]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a7c      	ldr	r2, [pc, #496]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e030      	b.n	80061da <HAL_RCC_OscConfig+0x172>
 8006178:	1d3b      	adds	r3, r7, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10c      	bne.n	800619c <HAL_RCC_OscConfig+0x134>
 8006182:	4b77      	ldr	r3, [pc, #476]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a76      	ldr	r2, [pc, #472]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	4b74      	ldr	r3, [pc, #464]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a73      	ldr	r2, [pc, #460]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e01e      	b.n	80061da <HAL_RCC_OscConfig+0x172>
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061a6:	d10c      	bne.n	80061c2 <HAL_RCC_OscConfig+0x15a>
 80061a8:	4b6d      	ldr	r3, [pc, #436]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a6c      	ldr	r2, [pc, #432]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	4b6a      	ldr	r3, [pc, #424]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a69      	ldr	r2, [pc, #420]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	e00b      	b.n	80061da <HAL_RCC_OscConfig+0x172>
 80061c2:	4b67      	ldr	r3, [pc, #412]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a66      	ldr	r2, [pc, #408]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	4b64      	ldr	r3, [pc, #400]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a63      	ldr	r2, [pc, #396]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061da:	4b61      	ldr	r3, [pc, #388]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	f023 020f 	bic.w	r2, r3, #15
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	495d      	ldr	r1, [pc, #372]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d059      	beq.n	80062ac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f8:	f7fe fd46 	bl	8004c88 <HAL_GetTick>
 80061fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006200:	e00a      	b.n	8006218 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006202:	f7fe fd41 	bl	8004c88 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b64      	cmp	r3, #100	; 0x64
 8006210:	d902      	bls.n	8006218 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	f000 be29 	b.w	8006e6a <HAL_RCC_OscConfig+0xe02>
 8006218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800621c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006220:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006224:	fa93 f3a3 	rbit	r3, r3
 8006228:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800622c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006230:	fab3 f383 	clz	r3, r3
 8006234:	b2db      	uxtb	r3, r3
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	d102      	bne.n	800624a <HAL_RCC_OscConfig+0x1e2>
 8006244:	4b46      	ldr	r3, [pc, #280]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	e015      	b.n	8006276 <HAL_RCC_OscConfig+0x20e>
 800624a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800624e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006252:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006256:	fa93 f3a3 	rbit	r3, r3
 800625a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800625e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006262:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006266:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800626a:	fa93 f3a3 	rbit	r3, r3
 800626e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006272:	4b3b      	ldr	r3, [pc, #236]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800627a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800627e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006282:	fa92 f2a2 	rbit	r2, r2
 8006286:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800628a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800628e:	fab2 f282 	clz	r2, r2
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	f042 0220 	orr.w	r2, r2, #32
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	f002 021f 	and.w	r2, r2, #31
 800629e:	2101      	movs	r1, #1
 80062a0:	fa01 f202 	lsl.w	r2, r1, r2
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0ab      	beq.n	8006202 <HAL_RCC_OscConfig+0x19a>
 80062aa:	e05c      	b.n	8006366 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ac:	f7fe fcec 	bl	8004c88 <HAL_GetTick>
 80062b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b4:	e00a      	b.n	80062cc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b6:	f7fe fce7 	bl	8004c88 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b64      	cmp	r3, #100	; 0x64
 80062c4:	d902      	bls.n	80062cc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	f000 bdcf 	b.w	8006e6a <HAL_RCC_OscConfig+0xe02>
 80062cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80062d8:	fa93 f3a3 	rbit	r3, r3
 80062dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80062e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e4:	fab3 f383 	clz	r3, r3
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d102      	bne.n	80062fe <HAL_RCC_OscConfig+0x296>
 80062f8:	4b19      	ldr	r3, [pc, #100]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	e015      	b.n	800632a <HAL_RCC_OscConfig+0x2c2>
 80062fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006302:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006306:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800630a:	fa93 f3a3 	rbit	r3, r3
 800630e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006316:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800631a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800631e:	fa93 f3a3 	rbit	r3, r3
 8006322:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006326:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <HAL_RCC_OscConfig+0x2f8>)
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800632e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006332:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006336:	fa92 f2a2 	rbit	r2, r2
 800633a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800633e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006342:	fab2 f282 	clz	r2, r2
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	f042 0220 	orr.w	r2, r2, #32
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	f002 021f 	and.w	r2, r2, #31
 8006352:	2101      	movs	r1, #1
 8006354:	fa01 f202 	lsl.w	r2, r1, r2
 8006358:	4013      	ands	r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1ab      	bne.n	80062b6 <HAL_RCC_OscConfig+0x24e>
 800635e:	e002      	b.n	8006366 <HAL_RCC_OscConfig+0x2fe>
 8006360:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006366:	1d3b      	adds	r3, r7, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 816f 	beq.w	8006654 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006376:	4bd0      	ldr	r3, [pc, #832]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00b      	beq.n	800639a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006382:	4bcd      	ldr	r3, [pc, #820]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b08      	cmp	r3, #8
 800638c:	d16c      	bne.n	8006468 <HAL_RCC_OscConfig+0x400>
 800638e:	4bca      	ldr	r3, [pc, #808]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d166      	bne.n	8006468 <HAL_RCC_OscConfig+0x400>
 800639a:	2302      	movs	r3, #2
 800639c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80063a4:	fa93 f3a3 	rbit	r3, r3
 80063a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80063ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b0:	fab3 f383 	clz	r3, r3
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d102      	bne.n	80063ca <HAL_RCC_OscConfig+0x362>
 80063c4:	4bbc      	ldr	r3, [pc, #752]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	e013      	b.n	80063f2 <HAL_RCC_OscConfig+0x38a>
 80063ca:	2302      	movs	r3, #2
 80063cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80063d4:	fa93 f3a3 	rbit	r3, r3
 80063d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80063dc:	2302      	movs	r3, #2
 80063de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80063e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80063e6:	fa93 f3a3 	rbit	r3, r3
 80063ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80063ee:	4bb2      	ldr	r3, [pc, #712]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2202      	movs	r2, #2
 80063f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80063f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80063fc:	fa92 f2a2 	rbit	r2, r2
 8006400:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006404:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006408:	fab2 f282 	clz	r2, r2
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	f042 0220 	orr.w	r2, r2, #32
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	f002 021f 	and.w	r2, r2, #31
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f202 	lsl.w	r2, r1, r2
 800641e:	4013      	ands	r3, r2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <HAL_RCC_OscConfig+0x3cc>
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d002      	beq.n	8006434 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f000 bd1b 	b.w	8006e6a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006434:	4ba0      	ldr	r3, [pc, #640]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	21f8      	movs	r1, #248	; 0xf8
 8006444:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006448:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800644c:	fa91 f1a1 	rbit	r1, r1
 8006450:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006454:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006458:	fab1 f181 	clz	r1, r1
 800645c:	b2c9      	uxtb	r1, r1
 800645e:	408b      	lsls	r3, r1
 8006460:	4995      	ldr	r1, [pc, #596]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 8006462:	4313      	orrs	r3, r2
 8006464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006466:	e0f5      	b.n	8006654 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8085 	beq.w	800657e <HAL_RCC_OscConfig+0x516>
 8006474:	2301      	movs	r3, #1
 8006476:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800647e:	fa93 f3a3 	rbit	r3, r3
 8006482:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006486:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800648a:	fab3 f383 	clz	r3, r3
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006494:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	461a      	mov	r2, r3
 800649c:	2301      	movs	r3, #1
 800649e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a0:	f7fe fbf2 	bl	8004c88 <HAL_GetTick>
 80064a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a8:	e00a      	b.n	80064c0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064aa:	f7fe fbed 	bl	8004c88 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d902      	bls.n	80064c0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	f000 bcd5 	b.w	8006e6a <HAL_RCC_OscConfig+0xe02>
 80064c0:	2302      	movs	r3, #2
 80064c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80064ca:	fa93 f3a3 	rbit	r3, r3
 80064ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80064d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d6:	fab3 f383 	clz	r3, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d102      	bne.n	80064f0 <HAL_RCC_OscConfig+0x488>
 80064ea:	4b73      	ldr	r3, [pc, #460]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	e013      	b.n	8006518 <HAL_RCC_OscConfig+0x4b0>
 80064f0:	2302      	movs	r3, #2
 80064f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80064fa:	fa93 f3a3 	rbit	r3, r3
 80064fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006502:	2302      	movs	r3, #2
 8006504:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006508:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800650c:	fa93 f3a3 	rbit	r3, r3
 8006510:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006514:	4b68      	ldr	r3, [pc, #416]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2202      	movs	r2, #2
 800651a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800651e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006522:	fa92 f2a2 	rbit	r2, r2
 8006526:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800652a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800652e:	fab2 f282 	clz	r2, r2
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	f042 0220 	orr.w	r2, r2, #32
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	f002 021f 	and.w	r2, r2, #31
 800653e:	2101      	movs	r1, #1
 8006540:	fa01 f202 	lsl.w	r2, r1, r2
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0af      	beq.n	80064aa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800654a:	4b5b      	ldr	r3, [pc, #364]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	21f8      	movs	r1, #248	; 0xf8
 800655a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006562:	fa91 f1a1 	rbit	r1, r1
 8006566:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800656a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800656e:	fab1 f181 	clz	r1, r1
 8006572:	b2c9      	uxtb	r1, r1
 8006574:	408b      	lsls	r3, r1
 8006576:	4950      	ldr	r1, [pc, #320]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]
 800657c:	e06a      	b.n	8006654 <HAL_RCC_OscConfig+0x5ec>
 800657e:	2301      	movs	r3, #1
 8006580:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006584:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006588:	fa93 f3a3 	rbit	r3, r3
 800658c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006594:	fab3 f383 	clz	r3, r3
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800659e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	461a      	mov	r2, r3
 80065a6:	2300      	movs	r3, #0
 80065a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065aa:	f7fe fb6d 	bl	8004c88 <HAL_GetTick>
 80065ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065b4:	f7fe fb68 	bl	8004c88 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d902      	bls.n	80065ca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	f000 bc50 	b.w	8006e6a <HAL_RCC_OscConfig+0xe02>
 80065ca:	2302      	movs	r3, #2
 80065cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80065d4:	fa93 f3a3 	rbit	r3, r3
 80065d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80065dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065e0:	fab3 f383 	clz	r3, r3
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f043 0301 	orr.w	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d102      	bne.n	80065fa <HAL_RCC_OscConfig+0x592>
 80065f4:	4b30      	ldr	r3, [pc, #192]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	e013      	b.n	8006622 <HAL_RCC_OscConfig+0x5ba>
 80065fa:	2302      	movs	r3, #2
 80065fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006604:	fa93 f3a3 	rbit	r3, r3
 8006608:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800660c:	2302      	movs	r3, #2
 800660e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006612:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006616:	fa93 f3a3 	rbit	r3, r3
 800661a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800661e:	4b26      	ldr	r3, [pc, #152]	; (80066b8 <HAL_RCC_OscConfig+0x650>)
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	2202      	movs	r2, #2
 8006624:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006628:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800662c:	fa92 f2a2 	rbit	r2, r2
 8006630:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006634:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006638:	fab2 f282 	clz	r2, r2
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	f042 0220 	orr.w	r2, r2, #32
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	f002 021f 	and.w	r2, r2, #31
 8006648:	2101      	movs	r1, #1
 800664a:	fa01 f202 	lsl.w	r2, r1, r2
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1af      	bne.n	80065b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006654:	1d3b      	adds	r3, r7, #4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80da 	beq.w	8006818 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006664:	1d3b      	adds	r3, r7, #4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d069      	beq.n	8006742 <HAL_RCC_OscConfig+0x6da>
 800666e:	2301      	movs	r3, #1
 8006670:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006674:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006678:	fa93 f3a3 	rbit	r3, r3
 800667c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006684:	fab3 f383 	clz	r3, r3
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <HAL_RCC_OscConfig+0x654>)
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	461a      	mov	r2, r3
 8006694:	2301      	movs	r3, #1
 8006696:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006698:	f7fe faf6 	bl	8004c88 <HAL_GetTick>
 800669c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066a0:	e00e      	b.n	80066c0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066a2:	f7fe faf1 	bl	8004c88 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d906      	bls.n	80066c0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e3d9      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
 80066b6:	bf00      	nop
 80066b8:	40021000 	.word	0x40021000
 80066bc:	10908120 	.word	0x10908120
 80066c0:	2302      	movs	r3, #2
 80066c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ca:	fa93 f3a3 	rbit	r3, r3
 80066ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80066d6:	2202      	movs	r2, #2
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	fa93 f2a3 	rbit	r2, r3
 80066e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80066ee:	2202      	movs	r2, #2
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	fa93 f2a3 	rbit	r2, r3
 80066fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006700:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006702:	4ba5      	ldr	r3, [pc, #660]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006706:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800670a:	2102      	movs	r1, #2
 800670c:	6019      	str	r1, [r3, #0]
 800670e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	fa93 f1a3 	rbit	r1, r3
 8006718:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800671c:	6019      	str	r1, [r3, #0]
  return result;
 800671e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	fab3 f383 	clz	r3, r3
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	2101      	movs	r1, #1
 8006736:	fa01 f303 	lsl.w	r3, r1, r3
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0b0      	beq.n	80066a2 <HAL_RCC_OscConfig+0x63a>
 8006740:	e06a      	b.n	8006818 <HAL_RCC_OscConfig+0x7b0>
 8006742:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	fa93 f2a3 	rbit	r2, r3
 8006754:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006758:	601a      	str	r2, [r3, #0]
  return result;
 800675a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800675e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006760:	fab3 f383 	clz	r3, r3
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	4b8c      	ldr	r3, [pc, #560]	; (800699c <HAL_RCC_OscConfig+0x934>)
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	461a      	mov	r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006774:	f7fe fa88 	bl	8004c88 <HAL_GetTick>
 8006778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800677c:	e009      	b.n	8006792 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800677e:	f7fe fa83 	bl	8004c88 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e36b      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
 8006792:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006796:	2202      	movs	r2, #2
 8006798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	fa93 f2a3 	rbit	r2, r3
 80067a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80067ae:	2202      	movs	r2, #2
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	fa93 f2a3 	rbit	r2, r3
 80067bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80067c6:	2202      	movs	r2, #2
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	fa93 f2a3 	rbit	r2, r3
 80067d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80067d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067da:	4b6f      	ldr	r3, [pc, #444]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80067dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80067e2:	2102      	movs	r1, #2
 80067e4:	6019      	str	r1, [r3, #0]
 80067e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	fa93 f1a3 	rbit	r1, r3
 80067f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80067f4:	6019      	str	r1, [r3, #0]
  return result;
 80067f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	fab3 f383 	clz	r3, r3
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	2101      	movs	r1, #1
 800680e:	fa01 f303 	lsl.w	r3, r1, r3
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1b2      	bne.n	800677e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 8158 	beq.w	8006ad8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006828:	2300      	movs	r3, #0
 800682a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800682e:	4b5a      	ldr	r3, [pc, #360]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d112      	bne.n	8006860 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800683a:	4b57      	ldr	r3, [pc, #348]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4a56      	ldr	r2, [pc, #344]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006844:	61d3      	str	r3, [r2, #28]
 8006846:	4b54      	ldr	r3, [pc, #336]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800684e:	f107 0308 	add.w	r3, r7, #8
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	f107 0308 	add.w	r3, r7, #8
 8006858:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006860:	4b4f      	ldr	r3, [pc, #316]	; (80069a0 <HAL_RCC_OscConfig+0x938>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11a      	bne.n	80068a2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800686c:	4b4c      	ldr	r3, [pc, #304]	; (80069a0 <HAL_RCC_OscConfig+0x938>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a4b      	ldr	r2, [pc, #300]	; (80069a0 <HAL_RCC_OscConfig+0x938>)
 8006872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006876:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006878:	f7fe fa06 	bl	8004c88 <HAL_GetTick>
 800687c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006880:	e009      	b.n	8006896 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006882:	f7fe fa01 	bl	8004c88 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b64      	cmp	r3, #100	; 0x64
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e2e9      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006896:	4b42      	ldr	r3, [pc, #264]	; (80069a0 <HAL_RCC_OscConfig+0x938>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0ef      	beq.n	8006882 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d106      	bne.n	80068ba <HAL_RCC_OscConfig+0x852>
 80068ac:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	4a39      	ldr	r2, [pc, #228]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6213      	str	r3, [r2, #32]
 80068b8:	e02f      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
 80068ba:	1d3b      	adds	r3, r7, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10c      	bne.n	80068de <HAL_RCC_OscConfig+0x876>
 80068c4:	4b34      	ldr	r3, [pc, #208]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	4a33      	ldr	r2, [pc, #204]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068ca:	f023 0301 	bic.w	r3, r3, #1
 80068ce:	6213      	str	r3, [r2, #32]
 80068d0:	4b31      	ldr	r3, [pc, #196]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	4a30      	ldr	r2, [pc, #192]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068d6:	f023 0304 	bic.w	r3, r3, #4
 80068da:	6213      	str	r3, [r2, #32]
 80068dc:	e01d      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b05      	cmp	r3, #5
 80068e6:	d10c      	bne.n	8006902 <HAL_RCC_OscConfig+0x89a>
 80068e8:	4b2b      	ldr	r3, [pc, #172]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	4a2a      	ldr	r2, [pc, #168]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068ee:	f043 0304 	orr.w	r3, r3, #4
 80068f2:	6213      	str	r3, [r2, #32]
 80068f4:	4b28      	ldr	r3, [pc, #160]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	4a27      	ldr	r2, [pc, #156]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	6213      	str	r3, [r2, #32]
 8006900:	e00b      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
 8006902:	4b25      	ldr	r3, [pc, #148]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	4a24      	ldr	r2, [pc, #144]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	6213      	str	r3, [r2, #32]
 800690e:	4b22      	ldr	r3, [pc, #136]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	4a21      	ldr	r2, [pc, #132]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006914:	f023 0304 	bic.w	r3, r3, #4
 8006918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800691a:	1d3b      	adds	r3, r7, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d06b      	beq.n	80069fc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006924:	f7fe f9b0 	bl	8004c88 <HAL_GetTick>
 8006928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800692c:	e00b      	b.n	8006946 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800692e:	f7fe f9ab 	bl	8004c88 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f241 3288 	movw	r2, #5000	; 0x1388
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e291      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
 8006946:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800694a:	2202      	movs	r2, #2
 800694c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800694e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	fa93 f2a3 	rbit	r2, r3
 8006958:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006962:	2202      	movs	r2, #2
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	fa93 f2a3 	rbit	r2, r3
 8006970:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006974:	601a      	str	r2, [r3, #0]
  return result;
 8006976:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800697a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800697c:	fab3 f383 	clz	r3, r3
 8006980:	b2db      	uxtb	r3, r3
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f043 0302 	orr.w	r3, r3, #2
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d109      	bne.n	80069a4 <HAL_RCC_OscConfig+0x93c>
 8006990:	4b01      	ldr	r3, [pc, #4]	; (8006998 <HAL_RCC_OscConfig+0x930>)
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	e014      	b.n	80069c0 <HAL_RCC_OscConfig+0x958>
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000
 800699c:	10908120 	.word	0x10908120
 80069a0:	40007000 	.word	0x40007000
 80069a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80069a8:	2202      	movs	r2, #2
 80069aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	fa93 f2a3 	rbit	r2, r3
 80069b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	4bbb      	ldr	r3, [pc, #748]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80069c4:	2102      	movs	r1, #2
 80069c6:	6011      	str	r1, [r2, #0]
 80069c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	fa92 f1a2 	rbit	r1, r2
 80069d2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80069d6:	6011      	str	r1, [r2, #0]
  return result;
 80069d8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	fab2 f282 	clz	r2, r2
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	f002 021f 	and.w	r2, r2, #31
 80069ee:	2101      	movs	r1, #1
 80069f0:	fa01 f202 	lsl.w	r2, r1, r2
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d099      	beq.n	800692e <HAL_RCC_OscConfig+0x8c6>
 80069fa:	e063      	b.n	8006ac4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fc:	f7fe f944 	bl	8004c88 <HAL_GetTick>
 8006a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a04:	e00b      	b.n	8006a1e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a06:	f7fe f93f 	bl	8004c88 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e225      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
 8006a1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006a22:	2202      	movs	r2, #2
 8006a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	fa93 f2a3 	rbit	r2, r3
 8006a30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	fa93 f2a3 	rbit	r2, r3
 8006a48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a4c:	601a      	str	r2, [r3, #0]
  return result;
 8006a4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a54:	fab3 f383 	clz	r3, r3
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f043 0302 	orr.w	r3, r3, #2
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d102      	bne.n	8006a6e <HAL_RCC_OscConfig+0xa06>
 8006a68:	4b90      	ldr	r3, [pc, #576]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	e00d      	b.n	8006a8a <HAL_RCC_OscConfig+0xa22>
 8006a6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a72:	2202      	movs	r2, #2
 8006a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	fa93 f2a3 	rbit	r2, r3
 8006a80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	4b89      	ldr	r3, [pc, #548]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006a8e:	2102      	movs	r1, #2
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	fa92 f1a2 	rbit	r1, r2
 8006a9c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006aa0:	6011      	str	r1, [r2, #0]
  return result;
 8006aa2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	fab2 f282 	clz	r2, r2
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	f002 021f 	and.w	r2, r2, #31
 8006ab8:	2101      	movs	r1, #1
 8006aba:	fa01 f202 	lsl.w	r2, r1, r2
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1a0      	bne.n	8006a06 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ac4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d105      	bne.n	8006ad8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006acc:	4b77      	ldr	r3, [pc, #476]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	4a76      	ldr	r2, [pc, #472]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ad8:	1d3b      	adds	r3, r7, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 81c2 	beq.w	8006e68 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ae4:	4b71      	ldr	r3, [pc, #452]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f003 030c 	and.w	r3, r3, #12
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	f000 819c 	beq.w	8006e2a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	f040 8114 	bne.w	8006d26 <HAL_RCC_OscConfig+0xcbe>
 8006afe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	fa93 f2a3 	rbit	r2, r3
 8006b12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006b16:	601a      	str	r2, [r3, #0]
  return result;
 8006b18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006b1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b1e:	fab3 f383 	clz	r3, r3
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2300      	movs	r3, #0
 8006b32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fe f8a8 	bl	8004c88 <HAL_GetTick>
 8006b38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b3c:	e009      	b.n	8006b52 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3e:	f7fe f8a3 	bl	8004c88 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e18b      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
 8006b52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	fa93 f2a3 	rbit	r2, r3
 8006b66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006b6a:	601a      	str	r2, [r3, #0]
  return result;
 8006b6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006b70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b72:	fab3 f383 	clz	r3, r3
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d102      	bne.n	8006b8c <HAL_RCC_OscConfig+0xb24>
 8006b86:	4b49      	ldr	r3, [pc, #292]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	e01b      	b.n	8006bc4 <HAL_RCC_OscConfig+0xb5c>
 8006b8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	fa93 f2a3 	rbit	r2, r3
 8006ba0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	fa93 f2a3 	rbit	r2, r3
 8006bba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	4b3a      	ldr	r3, [pc, #232]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	fa92 f1a2 	rbit	r1, r2
 8006bd8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006bdc:	6011      	str	r1, [r2, #0]
  return result;
 8006bde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006be2:	6812      	ldr	r2, [r2, #0]
 8006be4:	fab2 f282 	clz	r2, r2
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	f042 0220 	orr.w	r2, r2, #32
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	f002 021f 	and.w	r2, r2, #31
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d19e      	bne.n	8006b3e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c00:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c08:	1d3b      	adds	r3, r7, #4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	430b      	orrs	r3, r1
 8006c16:	4925      	ldr	r1, [pc, #148]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	604b      	str	r3, [r1, #4]
 8006c1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	fa93 f2a3 	rbit	r2, r3
 8006c30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006c34:	601a      	str	r2, [r3, #0]
  return result;
 8006c36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006c3a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c3c:	fab3 f383 	clz	r3, r3
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	2301      	movs	r3, #1
 8006c50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c52:	f7fe f819 	bl	8004c88 <HAL_GetTick>
 8006c56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c5a:	e009      	b.n	8006c70 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fe f814 	bl	8004c88 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e0fc      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
 8006c70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	fa93 f2a3 	rbit	r2, r3
 8006c84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c88:	601a      	str	r2, [r3, #0]
  return result;
 8006c8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c90:	fab3 f383 	clz	r3, r3
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f043 0301 	orr.w	r3, r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d105      	bne.n	8006cb0 <HAL_RCC_OscConfig+0xc48>
 8006ca4:	4b01      	ldr	r3, [pc, #4]	; (8006cac <HAL_RCC_OscConfig+0xc44>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	e01e      	b.n	8006ce8 <HAL_RCC_OscConfig+0xc80>
 8006caa:	bf00      	nop
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	fa93 f2a3 	rbit	r2, r3
 8006cc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006cce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	fa93 f2a3 	rbit	r2, r3
 8006cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	4b63      	ldr	r3, [pc, #396]	; (8006e74 <HAL_RCC_OscConfig+0xe0c>)
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006cec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006cf0:	6011      	str	r1, [r2, #0]
 8006cf2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	fa92 f1a2 	rbit	r1, r2
 8006cfc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006d00:	6011      	str	r1, [r2, #0]
  return result;
 8006d02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	fab2 f282 	clz	r2, r2
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	f042 0220 	orr.w	r2, r2, #32
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	f002 021f 	and.w	r2, r2, #31
 8006d18:	2101      	movs	r1, #1
 8006d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d09b      	beq.n	8006c5c <HAL_RCC_OscConfig+0xbf4>
 8006d24:	e0a0      	b.n	8006e68 <HAL_RCC_OscConfig+0xe00>
 8006d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	fa93 f2a3 	rbit	r2, r3
 8006d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d3e:	601a      	str	r2, [r3, #0]
  return result;
 8006d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d46:	fab3 f383 	clz	r3, r3
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	461a      	mov	r2, r3
 8006d58:	2300      	movs	r3, #0
 8006d5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7fd ff94 	bl	8004c88 <HAL_GetTick>
 8006d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d64:	e009      	b.n	8006d7a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d66:	f7fd ff8f 	bl	8004c88 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e077      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
 8006d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	fa93 f2a3 	rbit	r2, r3
 8006d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d92:	601a      	str	r2, [r3, #0]
  return result;
 8006d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d9a:	fab3 f383 	clz	r3, r3
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d102      	bne.n	8006db4 <HAL_RCC_OscConfig+0xd4c>
 8006dae:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <HAL_RCC_OscConfig+0xe0c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	e01b      	b.n	8006dec <HAL_RCC_OscConfig+0xd84>
 8006db4:	f107 0320 	add.w	r3, r7, #32
 8006db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dbe:	f107 0320 	add.w	r3, r7, #32
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	fa93 f2a3 	rbit	r2, r3
 8006dc8:	f107 031c 	add.w	r3, r7, #28
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f107 0318 	add.w	r3, r7, #24
 8006dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f107 0318 	add.w	r3, r7, #24
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	fa93 f2a3 	rbit	r2, r3
 8006de2:	f107 0314 	add.w	r3, r7, #20
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	4b22      	ldr	r3, [pc, #136]	; (8006e74 <HAL_RCC_OscConfig+0xe0c>)
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	f107 0210 	add.w	r2, r7, #16
 8006df0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006df4:	6011      	str	r1, [r2, #0]
 8006df6:	f107 0210 	add.w	r2, r7, #16
 8006dfa:	6812      	ldr	r2, [r2, #0]
 8006dfc:	fa92 f1a2 	rbit	r1, r2
 8006e00:	f107 020c 	add.w	r2, r7, #12
 8006e04:	6011      	str	r1, [r2, #0]
  return result;
 8006e06:	f107 020c 	add.w	r2, r7, #12
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	fab2 f282 	clz	r2, r2
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	f042 0220 	orr.w	r2, r2, #32
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	f002 021f 	and.w	r2, r2, #31
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d19e      	bne.n	8006d66 <HAL_RCC_OscConfig+0xcfe>
 8006e28:	e01e      	b.n	8006e68 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e2a:	1d3b      	adds	r3, r7, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e018      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <HAL_RCC_OscConfig+0xe0c>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e40:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006e44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e48:	1d3b      	adds	r3, r7, #4
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d108      	bne.n	8006e64 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006e52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006e56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e5a:	1d3b      	adds	r3, r7, #4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d001      	beq.n	8006e68 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40021000 	.word	0x40021000

08006e78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b09e      	sub	sp, #120	; 0x78
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e162      	b.n	8007156 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e90:	4b90      	ldr	r3, [pc, #576]	; (80070d4 <HAL_RCC_ClockConfig+0x25c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d910      	bls.n	8006ec0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9e:	4b8d      	ldr	r3, [pc, #564]	; (80070d4 <HAL_RCC_ClockConfig+0x25c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 0207 	bic.w	r2, r3, #7
 8006ea6:	498b      	ldr	r1, [pc, #556]	; (80070d4 <HAL_RCC_ClockConfig+0x25c>)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eae:	4b89      	ldr	r3, [pc, #548]	; (80070d4 <HAL_RCC_ClockConfig+0x25c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e14a      	b.n	8007156 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ecc:	4b82      	ldr	r3, [pc, #520]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	497f      	ldr	r1, [pc, #508]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80dc 	beq.w	80070a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d13c      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xf6>
 8006ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ef8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006efc:	fa93 f3a3 	rbit	r3, r3
 8006f00:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f04:	fab3 f383 	clz	r3, r3
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d102      	bne.n	8006f1e <HAL_RCC_ClockConfig+0xa6>
 8006f18:	4b6f      	ldr	r3, [pc, #444]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	e00f      	b.n	8006f3e <HAL_RCC_ClockConfig+0xc6>
 8006f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f26:	fa93 f3a3 	rbit	r3, r3
 8006f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f30:	663b      	str	r3, [r7, #96]	; 0x60
 8006f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f34:	fa93 f3a3 	rbit	r3, r3
 8006f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f3a:	4b67      	ldr	r3, [pc, #412]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f42:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f46:	fa92 f2a2 	rbit	r2, r2
 8006f4a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f4e:	fab2 f282 	clz	r2, r2
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	f042 0220 	orr.w	r2, r2, #32
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	f002 021f 	and.w	r2, r2, #31
 8006f5e:	2101      	movs	r1, #1
 8006f60:	fa01 f202 	lsl.w	r2, r1, r2
 8006f64:	4013      	ands	r3, r2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d17b      	bne.n	8007062 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e0f3      	b.n	8007156 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d13c      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0x178>
 8006f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7e:	fa93 f3a3 	rbit	r3, r3
 8006f82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f86:	fab3 f383 	clz	r3, r3
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d102      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x128>
 8006f9a:	4b4f      	ldr	r3, [pc, #316]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	e00f      	b.n	8006fc0 <HAL_RCC_ClockConfig+0x148>
 8006fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fa4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa8:	fa93 f3a3 	rbit	r3, r3
 8006fac:	647b      	str	r3, [r7, #68]	; 0x44
 8006fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb6:	fa93 f3a3 	rbit	r3, r3
 8006fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fbc:	4b46      	ldr	r3, [pc, #280]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fc4:	63ba      	str	r2, [r7, #56]	; 0x38
 8006fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc8:	fa92 f2a2 	rbit	r2, r2
 8006fcc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd0:	fab2 f282 	clz	r2, r2
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	f042 0220 	orr.w	r2, r2, #32
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	f002 021f 	and.w	r2, r2, #31
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d13a      	bne.n	8007062 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0b2      	b.n	8007156 <HAL_RCC_ClockConfig+0x2de>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	fa93 f3a3 	rbit	r3, r3
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ffe:	fab3 f383 	clz	r3, r3
 8007002:	b2db      	uxtb	r3, r3
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b01      	cmp	r3, #1
 8007010:	d102      	bne.n	8007018 <HAL_RCC_ClockConfig+0x1a0>
 8007012:	4b31      	ldr	r3, [pc, #196]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	e00d      	b.n	8007034 <HAL_RCC_ClockConfig+0x1bc>
 8007018:	2302      	movs	r3, #2
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	fa93 f3a3 	rbit	r3, r3
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
 8007024:	2302      	movs	r3, #2
 8007026:	623b      	str	r3, [r7, #32]
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	fa93 f3a3 	rbit	r3, r3
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	4b29      	ldr	r3, [pc, #164]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	2202      	movs	r2, #2
 8007036:	61ba      	str	r2, [r7, #24]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	fa92 f2a2 	rbit	r2, r2
 800703e:	617a      	str	r2, [r7, #20]
  return result;
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	fab2 f282 	clz	r2, r2
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	f042 0220 	orr.w	r2, r2, #32
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	f002 021f 	and.w	r2, r2, #31
 8007052:	2101      	movs	r1, #1
 8007054:	fa01 f202 	lsl.w	r2, r1, r2
 8007058:	4013      	ands	r3, r2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e079      	b.n	8007156 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007062:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f023 0203 	bic.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	491a      	ldr	r1, [pc, #104]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007074:	f7fd fe08 	bl	8004c88 <HAL_GetTick>
 8007078:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707a:	e00a      	b.n	8007092 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800707c:	f7fd fe04 	bl	8004c88 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f241 3288 	movw	r2, #5000	; 0x1388
 800708a:	4293      	cmp	r3, r2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e061      	b.n	8007156 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007092:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <HAL_RCC_ClockConfig+0x260>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f003 020c 	and.w	r2, r3, #12
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d1eb      	bne.n	800707c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070a4:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <HAL_RCC_ClockConfig+0x25c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d214      	bcs.n	80070dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <HAL_RCC_ClockConfig+0x25c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f023 0207 	bic.w	r2, r3, #7
 80070ba:	4906      	ldr	r1, [pc, #24]	; (80070d4 <HAL_RCC_ClockConfig+0x25c>)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	4313      	orrs	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c2:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <HAL_RCC_ClockConfig+0x25c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d005      	beq.n	80070dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e040      	b.n	8007156 <HAL_RCC_ClockConfig+0x2de>
 80070d4:	40022000 	.word	0x40022000
 80070d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e8:	4b1d      	ldr	r3, [pc, #116]	; (8007160 <HAL_RCC_ClockConfig+0x2e8>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	491a      	ldr	r1, [pc, #104]	; (8007160 <HAL_RCC_ClockConfig+0x2e8>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007106:	4b16      	ldr	r3, [pc, #88]	; (8007160 <HAL_RCC_ClockConfig+0x2e8>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4912      	ldr	r1, [pc, #72]	; (8007160 <HAL_RCC_ClockConfig+0x2e8>)
 8007116:	4313      	orrs	r3, r2
 8007118:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800711a:	f000 f829 	bl	8007170 <HAL_RCC_GetSysClockFreq>
 800711e:	4601      	mov	r1, r0
 8007120:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <HAL_RCC_ClockConfig+0x2e8>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007128:	22f0      	movs	r2, #240	; 0xf0
 800712a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	fa92 f2a2 	rbit	r2, r2
 8007132:	60fa      	str	r2, [r7, #12]
  return result;
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	fab2 f282 	clz	r2, r2
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	40d3      	lsrs	r3, r2
 800713e:	4a09      	ldr	r2, [pc, #36]	; (8007164 <HAL_RCC_ClockConfig+0x2ec>)
 8007140:	5cd3      	ldrb	r3, [r2, r3]
 8007142:	fa21 f303 	lsr.w	r3, r1, r3
 8007146:	4a08      	ldr	r2, [pc, #32]	; (8007168 <HAL_RCC_ClockConfig+0x2f0>)
 8007148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <HAL_RCC_ClockConfig+0x2f4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f7fd fd56 	bl	8004c00 <HAL_InitTick>
  
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3778      	adds	r7, #120	; 0x78
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40021000 	.word	0x40021000
 8007164:	08012210 	.word	0x08012210
 8007168:	20000008 	.word	0x20000008
 800716c:	2000000c 	.word	0x2000000c

08007170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007170:	b480      	push	{r7}
 8007172:	b08b      	sub	sp, #44	; 0x2c
 8007174:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
 800717a:	2300      	movs	r3, #0
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	2300      	movs	r3, #0
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
 8007182:	2300      	movs	r3, #0
 8007184:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800718a:	4b29      	ldr	r3, [pc, #164]	; (8007230 <HAL_RCC_GetSysClockFreq+0xc0>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f003 030c 	and.w	r3, r3, #12
 8007196:	2b04      	cmp	r3, #4
 8007198:	d002      	beq.n	80071a0 <HAL_RCC_GetSysClockFreq+0x30>
 800719a:	2b08      	cmp	r3, #8
 800719c:	d003      	beq.n	80071a6 <HAL_RCC_GetSysClockFreq+0x36>
 800719e:	e03c      	b.n	800721a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071a0:	4b24      	ldr	r3, [pc, #144]	; (8007234 <HAL_RCC_GetSysClockFreq+0xc4>)
 80071a2:	623b      	str	r3, [r7, #32]
      break;
 80071a4:	e03c      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80071ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80071b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	fa92 f2a2 	rbit	r2, r2
 80071b8:	607a      	str	r2, [r7, #4]
  return result;
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	fab2 f282 	clz	r2, r2
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	40d3      	lsrs	r3, r2
 80071c4:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <HAL_RCC_GetSysClockFreq+0xc8>)
 80071c6:	5cd3      	ldrb	r3, [r2, r3]
 80071c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80071ca:	4b19      	ldr	r3, [pc, #100]	; (8007230 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	220f      	movs	r2, #15
 80071d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	fa92 f2a2 	rbit	r2, r2
 80071dc:	60fa      	str	r2, [r7, #12]
  return result;
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	fab2 f282 	clz	r2, r2
 80071e4:	b2d2      	uxtb	r2, r2
 80071e6:	40d3      	lsrs	r3, r2
 80071e8:	4a14      	ldr	r2, [pc, #80]	; (800723c <HAL_RCC_GetSysClockFreq+0xcc>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80071f8:	4a0e      	ldr	r2, [pc, #56]	; (8007234 <HAL_RCC_GetSysClockFreq+0xc4>)
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	fb02 f303 	mul.w	r3, r2, r3
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
 8007208:	e004      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	4a0c      	ldr	r2, [pc, #48]	; (8007240 <HAL_RCC_GetSysClockFreq+0xd0>)
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	623b      	str	r3, [r7, #32]
      break;
 8007218:	e002      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800721a:	4b06      	ldr	r3, [pc, #24]	; (8007234 <HAL_RCC_GetSysClockFreq+0xc4>)
 800721c:	623b      	str	r3, [r7, #32]
      break;
 800721e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007220:	6a3b      	ldr	r3, [r7, #32]
}
 8007222:	4618      	mov	r0, r3
 8007224:	372c      	adds	r7, #44	; 0x2c
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40021000 	.word	0x40021000
 8007234:	007a1200 	.word	0x007a1200
 8007238:	08012228 	.word	0x08012228
 800723c:	08012238 	.word	0x08012238
 8007240:	003d0900 	.word	0x003d0900

08007244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007248:	4b03      	ldr	r3, [pc, #12]	; (8007258 <HAL_RCC_GetHCLKFreq+0x14>)
 800724a:	681b      	ldr	r3, [r3, #0]
}
 800724c:	4618      	mov	r0, r3
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000008 	.word	0x20000008

0800725c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007262:	f7ff ffef 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 8007266:	4601      	mov	r1, r0
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007270:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007274:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	fa92 f2a2 	rbit	r2, r2
 800727c:	603a      	str	r2, [r7, #0]
  return result;
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	fab2 f282 	clz	r2, r2
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	40d3      	lsrs	r3, r2
 8007288:	4a04      	ldr	r2, [pc, #16]	; (800729c <HAL_RCC_GetPCLK1Freq+0x40>)
 800728a:	5cd3      	ldrb	r3, [r2, r3]
 800728c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40021000 	.word	0x40021000
 800729c:	08012220 	.word	0x08012220

080072a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80072a6:	f7ff ffcd 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 80072aa:	4601      	mov	r1, r0
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80072b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80072b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	fa92 f2a2 	rbit	r2, r2
 80072c0:	603a      	str	r2, [r7, #0]
  return result;
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	fab2 f282 	clz	r2, r2
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	40d3      	lsrs	r3, r2
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80072ce:	5cd3      	ldrb	r3, [r2, r3]
 80072d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40021000 	.word	0x40021000
 80072e0:	08012220 	.word	0x08012220

080072e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b092      	sub	sp, #72	; 0x48
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 80d4 	beq.w	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007308:	4b4e      	ldr	r3, [pc, #312]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10e      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007314:	4b4b      	ldr	r3, [pc, #300]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	4a4a      	ldr	r2, [pc, #296]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731e:	61d3      	str	r3, [r2, #28]
 8007320:	4b48      	ldr	r3, [pc, #288]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007328:	60bb      	str	r3, [r7, #8]
 800732a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007332:	4b45      	ldr	r3, [pc, #276]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733a:	2b00      	cmp	r3, #0
 800733c:	d118      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800733e:	4b42      	ldr	r3, [pc, #264]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a41      	ldr	r2, [pc, #260]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007348:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800734a:	f7fd fc9d 	bl	8004c88 <HAL_GetTick>
 800734e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007350:	e008      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007352:	f7fd fc99 	bl	8004c88 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b64      	cmp	r3, #100	; 0x64
 800735e:	d901      	bls.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e169      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007364:	4b38      	ldr	r3, [pc, #224]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007370:	4b34      	ldr	r3, [pc, #208]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007378:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8084 	beq.w	800748a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800738c:	429a      	cmp	r2, r3
 800738e:	d07c      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007390:	4b2c      	ldr	r3, [pc, #176]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800739a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800739e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	fa93 f3a3 	rbit	r3, r3
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073aa:	fab3 f383 	clz	r3, r3
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	4b26      	ldr	r3, [pc, #152]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	461a      	mov	r2, r3
 80073ba:	2301      	movs	r3, #1
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	fa93 f3a3 	rbit	r3, r3
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80073cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073ce:	fab3 f383 	clz	r3, r3
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	461a      	mov	r2, r3
 80073de:	2300      	movs	r3, #0
 80073e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80073e2:	4a18      	ldr	r2, [pc, #96]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d04b      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f2:	f7fd fc49 	bl	8004c88 <HAL_GetTick>
 80073f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f8:	e00a      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fa:	f7fd fc45 	bl	8004c88 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f241 3288 	movw	r2, #5000	; 0x1388
 8007408:	4293      	cmp	r3, r2
 800740a:	d901      	bls.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e113      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007410:	2302      	movs	r3, #2
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	fa93 f3a3 	rbit	r3, r3
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
 800741c:	2302      	movs	r3, #2
 800741e:	623b      	str	r3, [r7, #32]
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	fa93 f3a3 	rbit	r3, r3
 8007426:	61fb      	str	r3, [r7, #28]
  return result;
 8007428:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800742a:	fab3 f383 	clz	r3, r3
 800742e:	b2db      	uxtb	r3, r3
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f043 0302 	orr.w	r3, r3, #2
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d108      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800743e:	4b01      	ldr	r3, [pc, #4]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	e00d      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007444:	40021000 	.word	0x40021000
 8007448:	40007000 	.word	0x40007000
 800744c:	10908100 	.word	0x10908100
 8007450:	2302      	movs	r3, #2
 8007452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	fa93 f3a3 	rbit	r3, r3
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	4b78      	ldr	r3, [pc, #480]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	2202      	movs	r2, #2
 8007462:	613a      	str	r2, [r7, #16]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	fa92 f2a2 	rbit	r2, r2
 800746a:	60fa      	str	r2, [r7, #12]
  return result;
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	fab2 f282 	clz	r2, r2
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	f002 021f 	and.w	r2, r2, #31
 800747e:	2101      	movs	r1, #1
 8007480:	fa01 f202 	lsl.w	r2, r1, r2
 8007484:	4013      	ands	r3, r2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0b7      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800748a:	4b6d      	ldr	r3, [pc, #436]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	496a      	ldr	r1, [pc, #424]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007498:	4313      	orrs	r3, r2
 800749a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800749c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d105      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a4:	4b66      	ldr	r3, [pc, #408]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	4a65      	ldr	r2, [pc, #404]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d008      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074bc:	4b60      	ldr	r3, [pc, #384]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	f023 0203 	bic.w	r2, r3, #3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	495d      	ldr	r1, [pc, #372]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d008      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074da:	4b59      	ldr	r3, [pc, #356]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	4956      	ldr	r1, [pc, #344]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074f8:	4b51      	ldr	r3, [pc, #324]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	494e      	ldr	r1, [pc, #312]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007506:	4313      	orrs	r3, r2
 8007508:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	d008      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007516:	4b4a      	ldr	r3, [pc, #296]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	f023 0210 	bic.w	r2, r3, #16
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	4947      	ldr	r1, [pc, #284]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007524:	4313      	orrs	r3, r2
 8007526:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007534:	4b42      	ldr	r3, [pc, #264]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	493f      	ldr	r1, [pc, #252]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007542:	4313      	orrs	r3, r2
 8007544:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007552:	4b3b      	ldr	r3, [pc, #236]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	f023 0220 	bic.w	r2, r3, #32
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	4938      	ldr	r1, [pc, #224]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007560:	4313      	orrs	r3, r2
 8007562:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007570:	4b33      	ldr	r3, [pc, #204]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	4930      	ldr	r1, [pc, #192]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800757e:	4313      	orrs	r3, r2
 8007580:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0310 	and.w	r3, r3, #16
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800758e:	4b2c      	ldr	r3, [pc, #176]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	4929      	ldr	r1, [pc, #164]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800759c:	4313      	orrs	r3, r2
 800759e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075ac:	4b24      	ldr	r3, [pc, #144]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4921      	ldr	r1, [pc, #132]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d008      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80075ca:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	491a      	ldr	r1, [pc, #104]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80075e8:	4b15      	ldr	r3, [pc, #84]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	4912      	ldr	r1, [pc, #72]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007606:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	490b      	ldr	r1, [pc, #44]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007614:	4313      	orrs	r3, r2
 8007616:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007630:	4903      	ldr	r1, [pc, #12]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007632:	4313      	orrs	r3, r2
 8007634:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3748      	adds	r7, #72	; 0x48
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40021000 	.word	0x40021000

08007644 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e083      	b.n	800775e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7f5b      	ldrb	r3, [r3, #29]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d105      	bne.n	800766c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fd f84e 	bl	8004708 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	22ca      	movs	r2, #202	; 0xca
 8007678:	625a      	str	r2, [r3, #36]	; 0x24
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2253      	movs	r2, #83	; 0x53
 8007680:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 faa8 	bl	8007bd8 <RTC_EnterInitMode>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	22ff      	movs	r2, #255	; 0xff
 8007694:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2204      	movs	r2, #4
 800769a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e05e      	b.n	800775e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6899      	ldr	r1, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68d2      	ldr	r2, [r2, #12]
 80076da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6919      	ldr	r1, [r3, #16]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	041a      	lsls	r2, r3, #16
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10e      	bne.n	800772c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa3a 	bl	8007b88 <HAL_RTC_WaitForSynchro>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	22ff      	movs	r2, #255	; 0xff
 8007720:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2204      	movs	r2, #4
 8007726:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e018      	b.n	800775e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800773a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	22ff      	movs	r2, #255	; 0xff
 8007754:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800775c:	2300      	movs	r3, #0
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007766:	b590      	push	{r4, r7, lr}
 8007768:	b087      	sub	sp, #28
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7f1b      	ldrb	r3, [r3, #28]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_RTC_SetTime+0x1c>
 800777e:	2302      	movs	r3, #2
 8007780:	e0aa      	b.n	80078d8 <HAL_RTC_SetTime+0x172>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2202      	movs	r2, #2
 800778c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d126      	bne.n	80077e2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fa3f 	bl	8007c30 <RTC_ByteToBcd2>
 80077b2:	4603      	mov	r3, r0
 80077b4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	785b      	ldrb	r3, [r3, #1]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fa38 	bl	8007c30 <RTC_ByteToBcd2>
 80077c0:	4603      	mov	r3, r0
 80077c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80077c4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	789b      	ldrb	r3, [r3, #2]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fa30 	bl	8007c30 <RTC_ByteToBcd2>
 80077d0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80077d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	78db      	ldrb	r3, [r3, #3]
 80077da:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	e018      	b.n	8007814 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007802:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007808:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	78db      	ldrb	r3, [r3, #3]
 800780e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	22ca      	movs	r2, #202	; 0xca
 800781a:	625a      	str	r2, [r3, #36]	; 0x24
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2253      	movs	r2, #83	; 0x53
 8007822:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f9d7 	bl	8007bd8 <RTC_EnterInitMode>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2204      	movs	r2, #4
 800783c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e047      	b.n	80078d8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007852:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007856:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007866:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6899      	ldr	r1, [r3, #8]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	431a      	orrs	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800788e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d111      	bne.n	80078c2 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f972 	bl	8007b88 <HAL_RTC_WaitForSynchro>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	22ff      	movs	r2, #255	; 0xff
 80078b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2204      	movs	r2, #4
 80078b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e00a      	b.n	80078d8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	22ff      	movs	r2, #255	; 0xff
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
  }
}
 80078d8:	4618      	mov	r0, r3
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd90      	pop	{r4, r7, pc}

080078e0 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007912:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007916:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	0c1b      	lsrs	r3, r3, #16
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007922:	b2da      	uxtb	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	0a1b      	lsrs	r3, r3, #8
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007932:	b2da      	uxtb	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	0c1b      	lsrs	r3, r3, #16
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007950:	b2da      	uxtb	r2, r3
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d11a      	bne.n	8007992 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 f983 	bl	8007c6c <RTC_Bcd2ToByte>
 8007966:	4603      	mov	r3, r0
 8007968:	461a      	mov	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	785b      	ldrb	r3, [r3, #1]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f97a 	bl	8007c6c <RTC_Bcd2ToByte>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	789b      	ldrb	r3, [r3, #2]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f971 	bl	8007c6c <RTC_Bcd2ToByte>
 800798a:	4603      	mov	r3, r0
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800799c:	b590      	push	{r4, r7, lr}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	7f1b      	ldrb	r3, [r3, #28]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_RTC_SetDate+0x1c>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e094      	b.n	8007ae2 <HAL_RTC_SetDate+0x146>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2202      	movs	r2, #2
 80079c2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10e      	bne.n	80079e8 <HAL_RTC_SetDate+0x4c>
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d008      	beq.n	80079e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	f023 0310 	bic.w	r3, r3, #16
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	330a      	adds	r3, #10
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d11c      	bne.n	8007a28 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	78db      	ldrb	r3, [r3, #3]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f91c 	bl	8007c30 <RTC_ByteToBcd2>
 80079f8:	4603      	mov	r3, r0
 80079fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f915 	bl	8007c30 <RTC_ByteToBcd2>
 8007a06:	4603      	mov	r3, r0
 8007a08:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a0a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	789b      	ldrb	r3, [r3, #2]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f90d 	bl	8007c30 <RTC_ByteToBcd2>
 8007a16:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a18:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e00e      	b.n	8007a46 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	78db      	ldrb	r3, [r3, #3]
 8007a2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a34:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	22ca      	movs	r2, #202	; 0xca
 8007a4c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2253      	movs	r2, #83	; 0x53
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f8be 	bl	8007bd8 <RTC_EnterInitMode>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00b      	beq.n	8007a7a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	22ff      	movs	r2, #255	; 0xff
 8007a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e033      	b.n	8007ae2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a98:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d111      	bne.n	8007acc <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f86d 	bl	8007b88 <HAL_RTC_WaitForSynchro>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	22ff      	movs	r2, #255	; 0xff
 8007aba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2204      	movs	r2, #4
 8007ac0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e00a      	b.n	8007ae2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	22ff      	movs	r2, #255	; 0xff
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
  }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd90      	pop	{r4, r7, pc}

08007aea <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	0c1b      	lsrs	r3, r3, #16
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	0a1b      	lsrs	r3, r3, #8
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	0b5b      	lsrs	r3, r3, #13
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d11a      	bne.n	8007b7e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	78db      	ldrb	r3, [r3, #3]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 f88d 	bl	8007c6c <RTC_Bcd2ToByte>
 8007b52:	4603      	mov	r3, r0
 8007b54:	461a      	mov	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	785b      	ldrb	r3, [r3, #1]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f884 	bl	8007c6c <RTC_Bcd2ToByte>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	789b      	ldrb	r3, [r3, #2]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f87b 	bl	8007c6c <RTC_Bcd2ToByte>
 8007b76:	4603      	mov	r3, r0
 8007b78:	461a      	mov	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ba2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007ba4:	f7fd f870 	bl	8004c88 <HAL_GetTick>
 8007ba8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007baa:	e009      	b.n	8007bc0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bac:	f7fd f86c 	bl	8004c88 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bba:	d901      	bls.n	8007bc0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e007      	b.n	8007bd0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0ee      	beq.n	8007bac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d119      	bne.n	8007c26 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007bfc:	f7fd f844 	bl	8004c88 <HAL_GetTick>
 8007c00:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c02:	e009      	b.n	8007c18 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c04:	f7fd f840 	bl	8004c88 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c12:	d901      	bls.n	8007c18 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e007      	b.n	8007c28 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0ee      	beq.n	8007c04 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007c3e:	e005      	b.n	8007c4c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	3b0a      	subs	r3, #10
 8007c4a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d8f6      	bhi.n	8007c40 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	b2db      	uxtb	r3, r3
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	091b      	lsrs	r3, r3, #4
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4413      	add	r3, r2
 8007c9a:	b2db      	uxtb	r3, r3
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3350      	adds	r3, #80	; 0x50
 8007cbe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	601a      	str	r2, [r3, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3350      	adds	r3, #80	; 0x50
 8007cf0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e09d      	b.n	8007e5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d108      	bne.n	8007d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d2e:	d009      	beq.n	8007d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	61da      	str	r2, [r3, #28]
 8007d36:	e005      	b.n	8007d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fc fcf8 	bl	8004754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d84:	d902      	bls.n	8007d8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	e002      	b.n	8007d92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007d9a:	d007      	beq.n	8007dac <HAL_SPI_Init+0xa0>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007da4:	d002      	beq.n	8007dac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	ea42 0103 	orr.w	r1, r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	f003 0204 	and.w	r2, r3, #4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	f003 0310 	and.w	r3, r3, #16
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007e28:	ea42 0103 	orr.w	r1, r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b088      	sub	sp, #32
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_SPI_Transmit+0x22>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e158      	b.n	8008136 <HAL_SPI_Transmit+0x2d4>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e8c:	f7fc fefc 	bl	8004c88 <HAL_GetTick>
 8007e90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d002      	beq.n	8007ea8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ea6:	e13d      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <HAL_SPI_Transmit+0x52>
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d102      	bne.n	8007eba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007eb8:	e134      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	88fa      	ldrh	r2, [r7, #6]
 8007ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f04:	d10f      	bne.n	8007f26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d007      	beq.n	8007f44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f4c:	d94b      	bls.n	8007fe6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <HAL_SPI_Transmit+0xfa>
 8007f56:	8afb      	ldrh	r3, [r7, #22]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d13e      	bne.n	8007fda <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	881a      	ldrh	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	1c9a      	adds	r2, r3, #2
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f80:	e02b      	b.n	8007fda <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d112      	bne.n	8007fb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	881a      	ldrh	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	1c9a      	adds	r2, r3, #2
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3b01      	subs	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fb4:	e011      	b.n	8007fda <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fb6:	f7fc fe67 	bl	8004c88 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d803      	bhi.n	8007fce <HAL_SPI_Transmit+0x16c>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d102      	bne.n	8007fd4 <HAL_SPI_Transmit+0x172>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007fd8:	e0a4      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1ce      	bne.n	8007f82 <HAL_SPI_Transmit+0x120>
 8007fe4:	e07c      	b.n	80080e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <HAL_SPI_Transmit+0x192>
 8007fee:	8afb      	ldrh	r3, [r7, #22]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d170      	bne.n	80080d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d912      	bls.n	8008024 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b02      	subs	r3, #2
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008022:	e058      	b.n	80080d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	330c      	adds	r3, #12
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800804a:	e044      	b.n	80080d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b02      	cmp	r3, #2
 8008058:	d12b      	bne.n	80080b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805e:	b29b      	uxth	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	d912      	bls.n	800808a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	881a      	ldrh	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b02      	subs	r3, #2
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008088:	e025      	b.n	80080d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	7812      	ldrb	r2, [r2, #0]
 8008096:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080b0:	e011      	b.n	80080d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080b2:	f7fc fde9 	bl	8004c88 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d803      	bhi.n	80080ca <HAL_SPI_Transmit+0x268>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d102      	bne.n	80080d0 <HAL_SPI_Transmit+0x26e>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080d4:	e026      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1b5      	bne.n	800804c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fb5b 	bl	80087a0 <SPI_EndRxTxTransaction>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e000      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008134:	7ffb      	ldrb	r3, [r7, #31]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b08a      	sub	sp, #40	; 0x28
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]
 800814a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800814c:	2301      	movs	r3, #1
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800815c:	2b01      	cmp	r3, #1
 800815e:	d101      	bne.n	8008164 <HAL_SPI_TransmitReceive+0x26>
 8008160:	2302      	movs	r3, #2
 8008162:	e1fb      	b.n	800855c <HAL_SPI_TransmitReceive+0x41e>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800816c:	f7fc fd8c 	bl	8004c88 <HAL_GetTick>
 8008170:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008178:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008180:	887b      	ldrh	r3, [r7, #2]
 8008182:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008184:	887b      	ldrh	r3, [r7, #2]
 8008186:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008188:	7efb      	ldrb	r3, [r7, #27]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d00e      	beq.n	80081ac <HAL_SPI_TransmitReceive+0x6e>
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008194:	d106      	bne.n	80081a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <HAL_SPI_TransmitReceive+0x66>
 800819e:	7efb      	ldrb	r3, [r7, #27]
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d003      	beq.n	80081ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80081a4:	2302      	movs	r3, #2
 80081a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80081aa:	e1cd      	b.n	8008548 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <HAL_SPI_TransmitReceive+0x80>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <HAL_SPI_TransmitReceive+0x80>
 80081b8:	887b      	ldrh	r3, [r7, #2]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80081c4:	e1c0      	b.n	8008548 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d003      	beq.n	80081da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2205      	movs	r2, #5
 80081d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	887a      	ldrh	r2, [r7, #2]
 80081ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	887a      	ldrh	r2, [r7, #2]
 80081f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	887a      	ldrh	r2, [r7, #2]
 8008200:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	887a      	ldrh	r2, [r7, #2]
 8008206:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800821c:	d802      	bhi.n	8008224 <HAL_SPI_TransmitReceive+0xe6>
 800821e:	8a3b      	ldrh	r3, [r7, #16]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d908      	bls.n	8008236 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008232:	605a      	str	r2, [r3, #4]
 8008234:	e007      	b.n	8008246 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008244:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d007      	beq.n	8008264 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800826c:	d97c      	bls.n	8008368 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <HAL_SPI_TransmitReceive+0x13e>
 8008276:	8a7b      	ldrh	r3, [r7, #18]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d169      	bne.n	8008350 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	881a      	ldrh	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	1c9a      	adds	r2, r3, #2
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082a0:	e056      	b.n	8008350 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d11b      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x1aa>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d016      	beq.n	80082e8 <HAL_SPI_TransmitReceive+0x1aa>
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d113      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	881a      	ldrh	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	1c9a      	adds	r2, r3, #2
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3b01      	subs	r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d11c      	bne.n	8008330 <HAL_SPI_TransmitReceive+0x1f2>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d016      	beq.n	8008330 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	b292      	uxth	r2, r2
 800830e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008320:	b29b      	uxth	r3, r3
 8008322:	3b01      	subs	r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800832c:	2301      	movs	r3, #1
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008330:	f7fc fcaa 	bl	8004c88 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800833c:	429a      	cmp	r2, r3
 800833e:	d807      	bhi.n	8008350 <HAL_SPI_TransmitReceive+0x212>
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d003      	beq.n	8008350 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800834e:	e0fb      	b.n	8008548 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1a3      	bne.n	80082a2 <HAL_SPI_TransmitReceive+0x164>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d19d      	bne.n	80082a2 <HAL_SPI_TransmitReceive+0x164>
 8008366:	e0df      	b.n	8008528 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <HAL_SPI_TransmitReceive+0x23a>
 8008370:	8a7b      	ldrh	r3, [r7, #18]
 8008372:	2b01      	cmp	r3, #1
 8008374:	f040 80cb 	bne.w	800850e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b01      	cmp	r3, #1
 8008380:	d912      	bls.n	80083a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	881a      	ldrh	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	1c9a      	adds	r2, r3, #2
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800839c:	b29b      	uxth	r3, r3
 800839e:	3b02      	subs	r3, #2
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083a6:	e0b2      	b.n	800850e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	330c      	adds	r3, #12
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083ce:	e09e      	b.n	800850e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d134      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x30a>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d02f      	beq.n	8008448 <HAL_SPI_TransmitReceive+0x30a>
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d12c      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d912      	bls.n	800841e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	881a      	ldrh	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	1c9a      	adds	r2, r3, #2
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008412:	b29b      	uxth	r3, r3
 8008414:	3b02      	subs	r3, #2
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800841c:	e012      	b.n	8008444 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	330c      	adds	r3, #12
 8008428:	7812      	ldrb	r2, [r2, #0]
 800842a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800843a:	b29b      	uxth	r3, r3
 800843c:	3b01      	subs	r3, #1
 800843e:	b29a      	uxth	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b01      	cmp	r3, #1
 8008454:	d148      	bne.n	80084e8 <HAL_SPI_TransmitReceive+0x3aa>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d042      	beq.n	80084e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b01      	cmp	r3, #1
 800846c:	d923      	bls.n	80084b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	b292      	uxth	r2, r2
 800847a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008480:	1c9a      	adds	r2, r3, #2
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b02      	subs	r3, #2
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800849e:	b29b      	uxth	r3, r3
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d81f      	bhi.n	80084e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084b2:	605a      	str	r2, [r3, #4]
 80084b4:	e016      	b.n	80084e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f103 020c 	add.w	r2, r3, #12
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	7812      	ldrb	r2, [r2, #0]
 80084c4:	b2d2      	uxtb	r2, r2
 80084c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084d8:	b29b      	uxth	r3, r3
 80084da:	3b01      	subs	r3, #1
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084e4:	2301      	movs	r3, #1
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084e8:	f7fc fbce 	bl	8004c88 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d803      	bhi.n	8008500 <HAL_SPI_TransmitReceive+0x3c2>
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fe:	d102      	bne.n	8008506 <HAL_SPI_TransmitReceive+0x3c8>
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800850c:	e01c      	b.n	8008548 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	f47f af5b 	bne.w	80083d0 <HAL_SPI_TransmitReceive+0x292>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	f47f af54 	bne.w	80083d0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f937 	bl	80087a0 <SPI_EndRxTxTransaction>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2220      	movs	r2, #32
 8008542:	661a      	str	r2, [r3, #96]	; 0x60
 8008544:	e000      	b.n	8008548 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008546:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800855c:	4618      	mov	r0, r3
 800855e:	3728      	adds	r7, #40	; 0x28
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	4613      	mov	r3, r2
 8008572:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008574:	f7fc fb88 	bl	8004c88 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	4413      	add	r3, r2
 8008582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008584:	f7fc fb80 	bl	8004c88 <HAL_GetTick>
 8008588:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800858a:	4b39      	ldr	r3, [pc, #228]	; (8008670 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	015b      	lsls	r3, r3, #5
 8008590:	0d1b      	lsrs	r3, r3, #20
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	fb02 f303 	mul.w	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800859a:	e054      	b.n	8008646 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d050      	beq.n	8008646 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085a4:	f7fc fb70 	bl	8004c88 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d902      	bls.n	80085ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d13d      	bne.n	8008636 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085d2:	d111      	bne.n	80085f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085dc:	d004      	beq.n	80085e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e6:	d107      	bne.n	80085f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008600:	d10f      	bne.n	8008622 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e017      	b.n	8008666 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	3b01      	subs	r3, #1
 8008644:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4013      	ands	r3, r2
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	bf0c      	ite	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	2300      	movne	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	429a      	cmp	r2, r3
 8008662:	d19b      	bne.n	800859c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3720      	adds	r7, #32
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000008 	.word	0x20000008

08008674 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08a      	sub	sp, #40	; 0x28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008686:	f7fc faff 	bl	8004c88 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	4413      	add	r3, r2
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008696:	f7fc faf7 	bl	8004c88 <HAL_GetTick>
 800869a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086a4:	4b3d      	ldr	r3, [pc, #244]	; (800879c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	00da      	lsls	r2, r3, #3
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	0d1b      	lsrs	r3, r3, #20
 80086b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80086bc:	e060      	b.n	8008780 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80086c4:	d107      	bne.n	80086d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086dc:	d050      	beq.n	8008780 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086de:	f7fc fad3 	bl	8004c88 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d902      	bls.n	80086f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d13d      	bne.n	8008770 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008702:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800870c:	d111      	bne.n	8008732 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008716:	d004      	beq.n	8008722 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008720:	d107      	bne.n	8008732 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008730:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800873a:	d10f      	bne.n	800875c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800875a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e010      	b.n	8008792 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	3b01      	subs	r3, #1
 800877e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4013      	ands	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d196      	bne.n	80086be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3728      	adds	r7, #40	; 0x28
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000008 	.word	0x20000008

080087a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff ff5b 	bl	8008674 <SPI_WaitFifoStateUntilTimeout>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d007      	beq.n	80087d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c8:	f043 0220 	orr.w	r2, r3, #32
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e027      	b.n	8008824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	2180      	movs	r1, #128	; 0x80
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff fec0 	bl	8008564 <SPI_WaitFlagStateUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d007      	beq.n	80087fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ee:	f043 0220 	orr.w	r2, r3, #32
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e014      	b.n	8008824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff ff34 	bl	8008674 <SPI_WaitFifoStateUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008816:	f043 0220 	orr.w	r2, r3, #32
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e000      	b.n	8008824 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e040      	b.n	80088c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7fb fff6 	bl	8004840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	; 0x24
 8008858:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 0201 	bic.w	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fc0c 	bl	8009088 <UART_SetConfig>
 8008870:	4603      	mov	r3, r0
 8008872:	2b01      	cmp	r3, #1
 8008874:	d101      	bne.n	800887a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e022      	b.n	80088c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fdd4 	bl	8009430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0201 	orr.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fe5b 	bl	8009574 <UART_CheckIdleState>
 80088be:	4603      	mov	r3, r0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08a      	sub	sp, #40	; 0x28
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	4613      	mov	r3, r2
 80088d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088dc:	2b20      	cmp	r3, #32
 80088de:	f040 8082 	bne.w	80089e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <HAL_UART_Transmit+0x26>
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e07a      	b.n	80089e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d101      	bne.n	8008900 <HAL_UART_Transmit+0x38>
 80088fc:	2302      	movs	r3, #2
 80088fe:	e073      	b.n	80089e8 <HAL_UART_Transmit+0x120>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2221      	movs	r2, #33	; 0x21
 8008914:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008916:	f7fc f9b7 	bl	8004c88 <HAL_GetTick>
 800891a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	88fa      	ldrh	r2, [r7, #6]
 8008928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008934:	d108      	bne.n	8008948 <HAL_UART_Transmit+0x80>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d104      	bne.n	8008948 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	61bb      	str	r3, [r7, #24]
 8008946:	e003      	b.n	8008950 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008958:	e02d      	b.n	80089b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2200      	movs	r2, #0
 8008962:	2180      	movs	r1, #128	; 0x80
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 fe4e 	bl	8009606 <UART_WaitOnFlagUntilTimeout>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e039      	b.n	80089e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10b      	bne.n	8008992 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	881a      	ldrh	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008986:	b292      	uxth	r2, r2
 8008988:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	3302      	adds	r3, #2
 800898e:	61bb      	str	r3, [r7, #24]
 8008990:	e008      	b.n	80089a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	781a      	ldrb	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	b292      	uxth	r2, r2
 800899c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	3301      	adds	r3, #1
 80089a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1cb      	bne.n	800895a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2200      	movs	r2, #0
 80089ca:	2140      	movs	r1, #64	; 0x40
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fe1a 	bl	8009606 <UART_WaitOnFlagUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e005      	b.n	80089e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2220      	movs	r2, #32
 80089e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e000      	b.n	80089e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80089e6:	2302      	movs	r3, #2
  }
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	; 0x28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d13d      	bne.n	8008a82 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <HAL_UART_Receive_IT+0x22>
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e036      	b.n	8008a84 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_UART_Receive_IT+0x34>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e02f      	b.n	8008a84 <HAL_UART_Receive_IT+0x94>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d018      	beq.n	8008a72 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	623b      	str	r3, [r7, #32]
 8008a60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	69f9      	ldr	r1, [r7, #28]
 8008a64:	6a3a      	ldr	r2, [r7, #32]
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e6      	bne.n	8008a40 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	461a      	mov	r2, r3
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 fe89 	bl	8009790 <UART_Start_Receive_IT>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	e000      	b.n	8008a84 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
  }
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3728      	adds	r7, #40	; 0x28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b0ba      	sub	sp, #232	; 0xe8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ab2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008ab6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008aba:	4013      	ands	r3, r2
 8008abc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008ac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d115      	bne.n	8008af4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00f      	beq.n	8008af4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad8:	f003 0320 	and.w	r3, r3, #32
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d009      	beq.n	8008af4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 82a3 	beq.w	8009030 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
      }
      return;
 8008af2:	e29d      	b.n	8009030 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 8117 	beq.w	8008d2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008b0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008b0e:	4b85      	ldr	r3, [pc, #532]	; (8008d24 <HAL_UART_IRQHandler+0x298>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 810a 	beq.w	8008d2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d011      	beq.n	8008b48 <HAL_UART_IRQHandler+0xbc>
 8008b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2201      	movs	r2, #1
 8008b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b3e:	f043 0201 	orr.w	r2, r3, #1
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d011      	beq.n	8008b78 <HAL_UART_IRQHandler+0xec>
 8008b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2202      	movs	r2, #2
 8008b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b6e:	f043 0204 	orr.w	r2, r3, #4
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d011      	beq.n	8008ba8 <HAL_UART_IRQHandler+0x11c>
 8008b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00b      	beq.n	8008ba8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2204      	movs	r2, #4
 8008b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b9e:	f043 0202 	orr.w	r2, r3, #2
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bac:	f003 0308 	and.w	r3, r3, #8
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d017      	beq.n	8008be4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d105      	bne.n	8008bcc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2208      	movs	r2, #8
 8008bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bda:	f043 0208 	orr.w	r2, r3, #8
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d012      	beq.n	8008c16 <HAL_UART_IRQHandler+0x18a>
 8008bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00c      	beq.n	8008c16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c0c:	f043 0220 	orr.w	r2, r3, #32
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8209 	beq.w	8009034 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00d      	beq.n	8008c4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5e:	2b40      	cmp	r3, #64	; 0x40
 8008c60:	d005      	beq.n	8008c6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d04f      	beq.n	8008d0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fe26 	bl	80098c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7e:	2b40      	cmp	r3, #64	; 0x40
 8008c80:	d141      	bne.n	8008d06 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3308      	adds	r3, #8
 8008caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1d9      	bne.n	8008c82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d013      	beq.n	8008cfe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cda:	4a13      	ldr	r2, [pc, #76]	; (8008d28 <HAL_UART_IRQHandler+0x29c>)
 8008cdc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fc ff96 	bl	8005c14 <HAL_DMA_Abort_IT>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d017      	beq.n	8008d1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfc:	e00f      	b.n	8008d1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f9ac 	bl	800905c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d04:	e00b      	b.n	8008d1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f9a8 	bl	800905c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d0c:	e007      	b.n	8008d1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f9a4 	bl	800905c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008d1c:	e18a      	b.n	8009034 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d1e:	bf00      	nop
    return;
 8008d20:	e188      	b.n	8009034 <HAL_UART_IRQHandler+0x5a8>
 8008d22:	bf00      	nop
 8008d24:	04000120 	.word	0x04000120
 8008d28:	08009987 	.word	0x08009987

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	f040 8143 	bne.w	8008fbc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3a:	f003 0310 	and.w	r3, r3, #16
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 813c 	beq.w	8008fbc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d48:	f003 0310 	and.w	r3, r3, #16
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8135 	beq.w	8008fbc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2210      	movs	r2, #16
 8008d58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d64:	2b40      	cmp	r3, #64	; 0x40
 8008d66:	f040 80b1 	bne.w	8008ecc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 815c 	beq.w	8009038 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	f080 8154 	bcs.w	8009038 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	2b20      	cmp	r3, #32
 8008da2:	f000 8085 	beq.w	8008eb0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008db2:	e853 3f00 	ldrex	r3, [r3]
 8008db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008dd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ddc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008de0:	e841 2300 	strex	r3, r2, [r1]
 8008de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1da      	bne.n	8008da6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3308      	adds	r3, #8
 8008df6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e02:	f023 0301 	bic.w	r3, r3, #1
 8008e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008e18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e20:	e841 2300 	strex	r3, r2, [r1]
 8008e24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e1      	bne.n	8008df0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3308      	adds	r3, #8
 8008e32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008e52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e3      	bne.n	8008e2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e80:	f023 0310 	bic.w	r3, r3, #16
 8008e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e4      	bne.n	8008e70 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fc fe79 	bl	8005ba2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f8d3 	bl	8009070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008eca:	e0b5      	b.n	8009038 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 80a7 	beq.w	800903c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 80a2 	beq.w	800903c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e4      	bne.n	8008ef8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	f023 0301 	bic.w	r3, r3, #1
 8008f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f52:	633a      	str	r2, [r7, #48]	; 0x30
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e3      	bne.n	8008f2e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f023 0310 	bic.w	r3, r3, #16
 8008f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	461a      	mov	r2, r3
 8008f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f9a:	61fb      	str	r3, [r7, #28]
 8008f9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	69b9      	ldr	r1, [r7, #24]
 8008fa0:	69fa      	ldr	r2, [r7, #28]
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e4      	bne.n	8008f78 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f85b 	bl	8009070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fba:	e03f      	b.n	800903c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00e      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x55a>
 8008fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d008      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fe6d 	bl	8009cbe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fe4:	e02d      	b.n	8009042 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00e      	beq.n	8009010 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d008      	beq.n	8009010 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009002:	2b00      	cmp	r3, #0
 8009004:	d01c      	beq.n	8009040 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	4798      	blx	r3
    }
    return;
 800900e:	e017      	b.n	8009040 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	d012      	beq.n	8009042 <HAL_UART_IRQHandler+0x5b6>
 800901c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00c      	beq.n	8009042 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fcc2 	bl	80099b2 <UART_EndTransmit_IT>
    return;
 800902e:	e008      	b.n	8009042 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009030:	bf00      	nop
 8009032:	e006      	b.n	8009042 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009034:	bf00      	nop
 8009036:	e004      	b.n	8009042 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <HAL_UART_IRQHandler+0x5b6>
      return;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009040:	bf00      	nop
  }

}
 8009042:	37e8      	adds	r7, #232	; 0xe8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80090b6:	f023 030c 	bic.w	r3, r3, #12
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	6979      	ldr	r1, [r7, #20]
 80090c0:	430b      	orrs	r3, r1
 80090c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4aae      	ldr	r2, [pc, #696]	; (80093bc <UART_SetConfig+0x334>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d120      	bne.n	800914a <UART_SetConfig+0xc2>
 8009108:	4bad      	ldr	r3, [pc, #692]	; (80093c0 <UART_SetConfig+0x338>)
 800910a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910c:	f003 0303 	and.w	r3, r3, #3
 8009110:	2b03      	cmp	r3, #3
 8009112:	d817      	bhi.n	8009144 <UART_SetConfig+0xbc>
 8009114:	a201      	add	r2, pc, #4	; (adr r2, 800911c <UART_SetConfig+0x94>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	0800912d 	.word	0x0800912d
 8009120:	08009139 	.word	0x08009139
 8009124:	0800913f 	.word	0x0800913f
 8009128:	08009133 	.word	0x08009133
 800912c:	2301      	movs	r3, #1
 800912e:	77fb      	strb	r3, [r7, #31]
 8009130:	e0b5      	b.n	800929e <UART_SetConfig+0x216>
 8009132:	2302      	movs	r3, #2
 8009134:	77fb      	strb	r3, [r7, #31]
 8009136:	e0b2      	b.n	800929e <UART_SetConfig+0x216>
 8009138:	2304      	movs	r3, #4
 800913a:	77fb      	strb	r3, [r7, #31]
 800913c:	e0af      	b.n	800929e <UART_SetConfig+0x216>
 800913e:	2308      	movs	r3, #8
 8009140:	77fb      	strb	r3, [r7, #31]
 8009142:	e0ac      	b.n	800929e <UART_SetConfig+0x216>
 8009144:	2310      	movs	r3, #16
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	e0a9      	b.n	800929e <UART_SetConfig+0x216>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a9d      	ldr	r2, [pc, #628]	; (80093c4 <UART_SetConfig+0x33c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d124      	bne.n	800919e <UART_SetConfig+0x116>
 8009154:	4b9a      	ldr	r3, [pc, #616]	; (80093c0 <UART_SetConfig+0x338>)
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800915c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009160:	d011      	beq.n	8009186 <UART_SetConfig+0xfe>
 8009162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009166:	d817      	bhi.n	8009198 <UART_SetConfig+0x110>
 8009168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800916c:	d011      	beq.n	8009192 <UART_SetConfig+0x10a>
 800916e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009172:	d811      	bhi.n	8009198 <UART_SetConfig+0x110>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d003      	beq.n	8009180 <UART_SetConfig+0xf8>
 8009178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800917c:	d006      	beq.n	800918c <UART_SetConfig+0x104>
 800917e:	e00b      	b.n	8009198 <UART_SetConfig+0x110>
 8009180:	2300      	movs	r3, #0
 8009182:	77fb      	strb	r3, [r7, #31]
 8009184:	e08b      	b.n	800929e <UART_SetConfig+0x216>
 8009186:	2302      	movs	r3, #2
 8009188:	77fb      	strb	r3, [r7, #31]
 800918a:	e088      	b.n	800929e <UART_SetConfig+0x216>
 800918c:	2304      	movs	r3, #4
 800918e:	77fb      	strb	r3, [r7, #31]
 8009190:	e085      	b.n	800929e <UART_SetConfig+0x216>
 8009192:	2308      	movs	r3, #8
 8009194:	77fb      	strb	r3, [r7, #31]
 8009196:	e082      	b.n	800929e <UART_SetConfig+0x216>
 8009198:	2310      	movs	r3, #16
 800919a:	77fb      	strb	r3, [r7, #31]
 800919c:	e07f      	b.n	800929e <UART_SetConfig+0x216>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a89      	ldr	r2, [pc, #548]	; (80093c8 <UART_SetConfig+0x340>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d124      	bne.n	80091f2 <UART_SetConfig+0x16a>
 80091a8:	4b85      	ldr	r3, [pc, #532]	; (80093c0 <UART_SetConfig+0x338>)
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80091b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80091b4:	d011      	beq.n	80091da <UART_SetConfig+0x152>
 80091b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80091ba:	d817      	bhi.n	80091ec <UART_SetConfig+0x164>
 80091bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091c0:	d011      	beq.n	80091e6 <UART_SetConfig+0x15e>
 80091c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091c6:	d811      	bhi.n	80091ec <UART_SetConfig+0x164>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <UART_SetConfig+0x14c>
 80091cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091d0:	d006      	beq.n	80091e0 <UART_SetConfig+0x158>
 80091d2:	e00b      	b.n	80091ec <UART_SetConfig+0x164>
 80091d4:	2300      	movs	r3, #0
 80091d6:	77fb      	strb	r3, [r7, #31]
 80091d8:	e061      	b.n	800929e <UART_SetConfig+0x216>
 80091da:	2302      	movs	r3, #2
 80091dc:	77fb      	strb	r3, [r7, #31]
 80091de:	e05e      	b.n	800929e <UART_SetConfig+0x216>
 80091e0:	2304      	movs	r3, #4
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e05b      	b.n	800929e <UART_SetConfig+0x216>
 80091e6:	2308      	movs	r3, #8
 80091e8:	77fb      	strb	r3, [r7, #31]
 80091ea:	e058      	b.n	800929e <UART_SetConfig+0x216>
 80091ec:	2310      	movs	r3, #16
 80091ee:	77fb      	strb	r3, [r7, #31]
 80091f0:	e055      	b.n	800929e <UART_SetConfig+0x216>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a75      	ldr	r2, [pc, #468]	; (80093cc <UART_SetConfig+0x344>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d124      	bne.n	8009246 <UART_SetConfig+0x1be>
 80091fc:	4b70      	ldr	r3, [pc, #448]	; (80093c0 <UART_SetConfig+0x338>)
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009200:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009208:	d011      	beq.n	800922e <UART_SetConfig+0x1a6>
 800920a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800920e:	d817      	bhi.n	8009240 <UART_SetConfig+0x1b8>
 8009210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009214:	d011      	beq.n	800923a <UART_SetConfig+0x1b2>
 8009216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800921a:	d811      	bhi.n	8009240 <UART_SetConfig+0x1b8>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <UART_SetConfig+0x1a0>
 8009220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009224:	d006      	beq.n	8009234 <UART_SetConfig+0x1ac>
 8009226:	e00b      	b.n	8009240 <UART_SetConfig+0x1b8>
 8009228:	2300      	movs	r3, #0
 800922a:	77fb      	strb	r3, [r7, #31]
 800922c:	e037      	b.n	800929e <UART_SetConfig+0x216>
 800922e:	2302      	movs	r3, #2
 8009230:	77fb      	strb	r3, [r7, #31]
 8009232:	e034      	b.n	800929e <UART_SetConfig+0x216>
 8009234:	2304      	movs	r3, #4
 8009236:	77fb      	strb	r3, [r7, #31]
 8009238:	e031      	b.n	800929e <UART_SetConfig+0x216>
 800923a:	2308      	movs	r3, #8
 800923c:	77fb      	strb	r3, [r7, #31]
 800923e:	e02e      	b.n	800929e <UART_SetConfig+0x216>
 8009240:	2310      	movs	r3, #16
 8009242:	77fb      	strb	r3, [r7, #31]
 8009244:	e02b      	b.n	800929e <UART_SetConfig+0x216>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a61      	ldr	r2, [pc, #388]	; (80093d0 <UART_SetConfig+0x348>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d124      	bne.n	800929a <UART_SetConfig+0x212>
 8009250:	4b5b      	ldr	r3, [pc, #364]	; (80093c0 <UART_SetConfig+0x338>)
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009258:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800925c:	d011      	beq.n	8009282 <UART_SetConfig+0x1fa>
 800925e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009262:	d817      	bhi.n	8009294 <UART_SetConfig+0x20c>
 8009264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009268:	d011      	beq.n	800928e <UART_SetConfig+0x206>
 800926a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800926e:	d811      	bhi.n	8009294 <UART_SetConfig+0x20c>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <UART_SetConfig+0x1f4>
 8009274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009278:	d006      	beq.n	8009288 <UART_SetConfig+0x200>
 800927a:	e00b      	b.n	8009294 <UART_SetConfig+0x20c>
 800927c:	2300      	movs	r3, #0
 800927e:	77fb      	strb	r3, [r7, #31]
 8009280:	e00d      	b.n	800929e <UART_SetConfig+0x216>
 8009282:	2302      	movs	r3, #2
 8009284:	77fb      	strb	r3, [r7, #31]
 8009286:	e00a      	b.n	800929e <UART_SetConfig+0x216>
 8009288:	2304      	movs	r3, #4
 800928a:	77fb      	strb	r3, [r7, #31]
 800928c:	e007      	b.n	800929e <UART_SetConfig+0x216>
 800928e:	2308      	movs	r3, #8
 8009290:	77fb      	strb	r3, [r7, #31]
 8009292:	e004      	b.n	800929e <UART_SetConfig+0x216>
 8009294:	2310      	movs	r3, #16
 8009296:	77fb      	strb	r3, [r7, #31]
 8009298:	e001      	b.n	800929e <UART_SetConfig+0x216>
 800929a:	2310      	movs	r3, #16
 800929c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a6:	d15c      	bne.n	8009362 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80092a8:	7ffb      	ldrb	r3, [r7, #31]
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d827      	bhi.n	80092fe <UART_SetConfig+0x276>
 80092ae:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <UART_SetConfig+0x22c>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	080092d9 	.word	0x080092d9
 80092b8:	080092e1 	.word	0x080092e1
 80092bc:	080092e9 	.word	0x080092e9
 80092c0:	080092ff 	.word	0x080092ff
 80092c4:	080092ef 	.word	0x080092ef
 80092c8:	080092ff 	.word	0x080092ff
 80092cc:	080092ff 	.word	0x080092ff
 80092d0:	080092ff 	.word	0x080092ff
 80092d4:	080092f7 	.word	0x080092f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092d8:	f7fd ffc0 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 80092dc:	61b8      	str	r0, [r7, #24]
        break;
 80092de:	e013      	b.n	8009308 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092e0:	f7fd ffde 	bl	80072a0 <HAL_RCC_GetPCLK2Freq>
 80092e4:	61b8      	str	r0, [r7, #24]
        break;
 80092e6:	e00f      	b.n	8009308 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092e8:	4b3a      	ldr	r3, [pc, #232]	; (80093d4 <UART_SetConfig+0x34c>)
 80092ea:	61bb      	str	r3, [r7, #24]
        break;
 80092ec:	e00c      	b.n	8009308 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ee:	f7fd ff3f 	bl	8007170 <HAL_RCC_GetSysClockFreq>
 80092f2:	61b8      	str	r0, [r7, #24]
        break;
 80092f4:	e008      	b.n	8009308 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092fa:	61bb      	str	r3, [r7, #24]
        break;
 80092fc:	e004      	b.n	8009308 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	77bb      	strb	r3, [r7, #30]
        break;
 8009306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8085 	beq.w	800941a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	005a      	lsls	r2, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	085b      	lsrs	r3, r3, #1
 800931a:	441a      	add	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	fbb2 f3f3 	udiv	r3, r2, r3
 8009324:	b29b      	uxth	r3, r3
 8009326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	2b0f      	cmp	r3, #15
 800932c:	d916      	bls.n	800935c <UART_SetConfig+0x2d4>
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009334:	d212      	bcs.n	800935c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	b29b      	uxth	r3, r3
 800933a:	f023 030f 	bic.w	r3, r3, #15
 800933e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	085b      	lsrs	r3, r3, #1
 8009344:	b29b      	uxth	r3, r3
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	b29a      	uxth	r2, r3
 800934c:	89fb      	ldrh	r3, [r7, #14]
 800934e:	4313      	orrs	r3, r2
 8009350:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	89fa      	ldrh	r2, [r7, #14]
 8009358:	60da      	str	r2, [r3, #12]
 800935a:	e05e      	b.n	800941a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	77bb      	strb	r3, [r7, #30]
 8009360:	e05b      	b.n	800941a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009362:	7ffb      	ldrb	r3, [r7, #31]
 8009364:	2b08      	cmp	r3, #8
 8009366:	d837      	bhi.n	80093d8 <UART_SetConfig+0x350>
 8009368:	a201      	add	r2, pc, #4	; (adr r2, 8009370 <UART_SetConfig+0x2e8>)
 800936a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936e:	bf00      	nop
 8009370:	08009395 	.word	0x08009395
 8009374:	0800939d 	.word	0x0800939d
 8009378:	080093a5 	.word	0x080093a5
 800937c:	080093d9 	.word	0x080093d9
 8009380:	080093ab 	.word	0x080093ab
 8009384:	080093d9 	.word	0x080093d9
 8009388:	080093d9 	.word	0x080093d9
 800938c:	080093d9 	.word	0x080093d9
 8009390:	080093b3 	.word	0x080093b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009394:	f7fd ff62 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 8009398:	61b8      	str	r0, [r7, #24]
        break;
 800939a:	e022      	b.n	80093e2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800939c:	f7fd ff80 	bl	80072a0 <HAL_RCC_GetPCLK2Freq>
 80093a0:	61b8      	str	r0, [r7, #24]
        break;
 80093a2:	e01e      	b.n	80093e2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093a4:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <UART_SetConfig+0x34c>)
 80093a6:	61bb      	str	r3, [r7, #24]
        break;
 80093a8:	e01b      	b.n	80093e2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093aa:	f7fd fee1 	bl	8007170 <HAL_RCC_GetSysClockFreq>
 80093ae:	61b8      	str	r0, [r7, #24]
        break;
 80093b0:	e017      	b.n	80093e2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093b6:	61bb      	str	r3, [r7, #24]
        break;
 80093b8:	e013      	b.n	80093e2 <UART_SetConfig+0x35a>
 80093ba:	bf00      	nop
 80093bc:	40013800 	.word	0x40013800
 80093c0:	40021000 	.word	0x40021000
 80093c4:	40004400 	.word	0x40004400
 80093c8:	40004800 	.word	0x40004800
 80093cc:	40004c00 	.word	0x40004c00
 80093d0:	40005000 	.word	0x40005000
 80093d4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	77bb      	strb	r3, [r7, #30]
        break;
 80093e0:	bf00      	nop
    }

    if (pclk != 0U)
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d018      	beq.n	800941a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	085a      	lsrs	r2, r3, #1
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	441a      	add	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b0f      	cmp	r3, #15
 8009402:	d908      	bls.n	8009416 <UART_SetConfig+0x38e>
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800940a:	d204      	bcs.n	8009416 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	60da      	str	r2, [r3, #12]
 8009414:	e001      	b.n	800941a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009426:	7fbb      	ldrb	r3, [r7, #30]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3720      	adds	r7, #32
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00a      	beq.n	800945a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00a      	beq.n	80094e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	f003 0320 	and.w	r3, r3, #32
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00a      	beq.n	8009504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	430a      	orrs	r2, r1
 8009502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01a      	beq.n	8009546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800952e:	d10a      	bne.n	8009546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	605a      	str	r2, [r3, #4]
  }
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af02      	add	r7, sp, #8
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009584:	f7fb fb80 	bl	8004c88 <HAL_GetTick>
 8009588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b08      	cmp	r3, #8
 8009596:	d10e      	bne.n	80095b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f82d 	bl	8009606 <UART_WaitOnFlagUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e023      	b.n	80095fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d10e      	bne.n	80095e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f817 	bl	8009606 <UART_WaitOnFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e00d      	b.n	80095fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2220      	movs	r2, #32
 80095e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2220      	movs	r2, #32
 80095ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b09c      	sub	sp, #112	; 0x70
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4613      	mov	r3, r2
 8009614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009616:	e0a5      	b.n	8009764 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800961a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961e:	f000 80a1 	beq.w	8009764 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009622:	f7fb fb31 	bl	8004c88 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800962e:	429a      	cmp	r2, r3
 8009630:	d302      	bcc.n	8009638 <UART_WaitOnFlagUntilTimeout+0x32>
 8009632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009634:	2b00      	cmp	r3, #0
 8009636:	d13e      	bne.n	80096b6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009648:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800964c:	667b      	str	r3, [r7, #100]	; 0x64
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009658:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800965c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e6      	bne.n	8009638 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967c:	f023 0301 	bic.w	r3, r3, #1
 8009680:	663b      	str	r3, [r7, #96]	; 0x60
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800968a:	64ba      	str	r2, [r7, #72]	; 0x48
 800968c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e5      	bne.n	800966a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2220      	movs	r2, #32
 80096a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2220      	movs	r2, #32
 80096a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e067      	b.n	8009786 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d04f      	beq.n	8009764 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	69db      	ldr	r3, [r3, #28]
 80096ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096d2:	d147      	bne.n	8009764 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	461a      	mov	r2, r3
 80096fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096fc:	637b      	str	r3, [r7, #52]	; 0x34
 80096fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e6      	bne.n	80096de <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	3308      	adds	r3, #8
 8009716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	e853 3f00 	ldrex	r3, [r3]
 800971e:	613b      	str	r3, [r7, #16]
   return(result);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f023 0301 	bic.w	r3, r3, #1
 8009726:	66bb      	str	r3, [r7, #104]	; 0x68
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3308      	adds	r3, #8
 800972e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009730:	623a      	str	r2, [r7, #32]
 8009732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009734:	69f9      	ldr	r1, [r7, #28]
 8009736:	6a3a      	ldr	r2, [r7, #32]
 8009738:	e841 2300 	strex	r3, r2, [r1]
 800973c:	61bb      	str	r3, [r7, #24]
   return(result);
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e5      	bne.n	8009710 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2220      	movs	r2, #32
 8009748:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2220      	movs	r2, #32
 800974e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2220      	movs	r2, #32
 8009754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e010      	b.n	8009786 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	69da      	ldr	r2, [r3, #28]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4013      	ands	r3, r2
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	429a      	cmp	r2, r3
 8009772:	bf0c      	ite	eq
 8009774:	2301      	moveq	r3, #1
 8009776:	2300      	movne	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	429a      	cmp	r2, r3
 8009780:	f43f af4a 	beq.w	8009618 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3770      	adds	r7, #112	; 0x70
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009790:	b480      	push	{r7}
 8009792:	b091      	sub	sp, #68	; 0x44
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4613      	mov	r3, r2
 800979c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	88fa      	ldrh	r2, [r7, #6]
 80097a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c2:	d10e      	bne.n	80097e2 <UART_Start_Receive_IT+0x52>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d105      	bne.n	80097d8 <UART_Start_Receive_IT+0x48>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80097d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097d6:	e01a      	b.n	800980e <UART_Start_Receive_IT+0x7e>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	22ff      	movs	r2, #255	; 0xff
 80097dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097e0:	e015      	b.n	800980e <UART_Start_Receive_IT+0x7e>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10d      	bne.n	8009806 <UART_Start_Receive_IT+0x76>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d104      	bne.n	80097fc <UART_Start_Receive_IT+0x6c>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	22ff      	movs	r2, #255	; 0xff
 80097f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097fa:	e008      	b.n	800980e <UART_Start_Receive_IT+0x7e>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	227f      	movs	r2, #127	; 0x7f
 8009800:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009804:	e003      	b.n	800980e <UART_Start_Receive_IT+0x7e>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2222      	movs	r2, #34	; 0x22
 800981a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3308      	adds	r3, #8
 8009822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	f043 0301 	orr.w	r3, r3, #1
 8009832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3308      	adds	r3, #8
 800983a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800983c:	637a      	str	r2, [r7, #52]	; 0x34
 800983e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e5      	bne.n	800981c <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009858:	d107      	bne.n	800986a <UART_Start_Receive_IT+0xda>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d103      	bne.n	800986a <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4a14      	ldr	r2, [pc, #80]	; (80098b8 <UART_Start_Receive_IT+0x128>)
 8009866:	665a      	str	r2, [r3, #100]	; 0x64
 8009868:	e002      	b.n	8009870 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4a13      	ldr	r2, [pc, #76]	; (80098bc <UART_Start_Receive_IT+0x12c>)
 800986e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	613b      	str	r3, [r7, #16]
   return(result);
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800988c:	63bb      	str	r3, [r7, #56]	; 0x38
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	623b      	str	r3, [r7, #32]
 8009898:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	69f9      	ldr	r1, [r7, #28]
 800989c:	6a3a      	ldr	r2, [r7, #32]
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e6      	bne.n	8009878 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3744      	adds	r7, #68	; 0x44
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	08009b63 	.word	0x08009b63
 80098bc:	08009a07 	.word	0x08009a07

080098c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b095      	sub	sp, #84	; 0x54
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e6:	643b      	str	r3, [r7, #64]	; 0x40
 80098e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e6      	bne.n	80098c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3308      	adds	r3, #8
 8009900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	61fb      	str	r3, [r7, #28]
   return(result);
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	f023 0301 	bic.w	r3, r3, #1
 8009910:	64bb      	str	r3, [r7, #72]	; 0x48
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3308      	adds	r3, #8
 8009918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800991a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800991c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e5      	bne.n	80098fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009932:	2b01      	cmp	r3, #1
 8009934:	d118      	bne.n	8009968 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	60bb      	str	r3, [r7, #8]
   return(result);
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f023 0310 	bic.w	r3, r3, #16
 800994a:	647b      	str	r3, [r7, #68]	; 0x44
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6979      	ldr	r1, [r7, #20]
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	613b      	str	r3, [r7, #16]
   return(result);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e6      	bne.n	8009936 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	665a      	str	r2, [r3, #100]	; 0x64
}
 800997a:	bf00      	nop
 800997c:	3754      	adds	r7, #84	; 0x54
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f7ff fb59 	bl	800905c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b088      	sub	sp, #32
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	61bb      	str	r3, [r7, #24]
 80099da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6979      	ldr	r1, [r7, #20]
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	613b      	str	r3, [r7, #16]
   return(result);
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e6      	bne.n	80099ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7ff fb25 	bl	8009048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099fe:	bf00      	nop
 8009a00:	3720      	adds	r7, #32
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b096      	sub	sp, #88	; 0x58
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1c:	2b22      	cmp	r3, #34	; 0x22
 8009a1e:	f040 8094 	bne.w	8009b4a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a28:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009a30:	b2d9      	uxtb	r1, r3
 8009a32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3c:	400a      	ands	r2, r1
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	3b01      	subs	r3, #1
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d177      	bne.n	8009b5a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a88:	647b      	str	r3, [r7, #68]	; 0x44
 8009a8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a90:	e841 2300 	strex	r3, r2, [r1]
 8009a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e6      	bne.n	8009a6a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	f023 0301 	bic.w	r3, r3, #1
 8009ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009abc:	633a      	str	r2, [r7, #48]	; 0x30
 8009abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e5      	bne.n	8009a9c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d12e      	bne.n	8009b42 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0310 	bic.w	r3, r3, #16
 8009afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b08:	61fb      	str	r3, [r7, #28]
 8009b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	69b9      	ldr	r1, [r7, #24]
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	617b      	str	r3, [r7, #20]
   return(result);
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e6      	bne.n	8009aea <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	f003 0310 	and.w	r3, r3, #16
 8009b26:	2b10      	cmp	r3, #16
 8009b28:	d103      	bne.n	8009b32 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2210      	movs	r2, #16
 8009b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff fa98 	bl	8009070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b40:	e00b      	b.n	8009b5a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7f9 fb32 	bl	80031ac <HAL_UART_RxCpltCallback>
}
 8009b48:	e007      	b.n	8009b5a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699a      	ldr	r2, [r3, #24]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f042 0208 	orr.w	r2, r2, #8
 8009b58:	619a      	str	r2, [r3, #24]
}
 8009b5a:	bf00      	nop
 8009b5c:	3758      	adds	r7, #88	; 0x58
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b096      	sub	sp, #88	; 0x58
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b78:	2b22      	cmp	r3, #34	; 0x22
 8009b7a:	f040 8094 	bne.w	8009ca6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b8e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009b92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b96:	4013      	ands	r3, r2
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba2:	1c9a      	adds	r2, r3, #2
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d177      	bne.n	8009cb6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	461a      	mov	r2, r3
 8009be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be4:	643b      	str	r3, [r7, #64]	; 0x40
 8009be6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bec:	e841 2300 	strex	r3, r2, [r1]
 8009bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e6      	bne.n	8009bc6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	e853 3f00 	ldrex	r3, [r3]
 8009c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	f023 0301 	bic.w	r3, r3, #1
 8009c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3308      	adds	r3, #8
 8009c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e5      	bne.n	8009bf8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d12e      	bne.n	8009c9e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f023 0310 	bic.w	r3, r3, #16
 8009c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c64:	61bb      	str	r3, [r7, #24]
 8009c66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6979      	ldr	r1, [r7, #20]
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	613b      	str	r3, [r7, #16]
   return(result);
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e6      	bne.n	8009c46 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b10      	cmp	r3, #16
 8009c84:	d103      	bne.n	8009c8e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2210      	movs	r2, #16
 8009c8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff f9ea 	bl	8009070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c9c:	e00b      	b.n	8009cb6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7f9 fa84 	bl	80031ac <HAL_UART_RxCpltCallback>
}
 8009ca4:	e007      	b.n	8009cb6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f042 0208 	orr.w	r2, r2, #8
 8009cb4:	619a      	str	r2, [r3, #24]
}
 8009cb6:	bf00      	nop
 8009cb8:	3758      	adds	r7, #88	; 0x58
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cc6:	bf00      	nop
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
	...

08009cd4 <MX_FATFS_Init>:
extern SPI_HandleTypeDef hspi2;

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009cd8:	4904      	ldr	r1, [pc, #16]	; (8009cec <MX_FATFS_Init+0x18>)
 8009cda:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <MX_FATFS_Init+0x1c>)
 8009cdc:	f004 fbc8 	bl	800e470 <FATFS_LinkDriver>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	4b03      	ldr	r3, [pc, #12]	; (8009cf4 <MX_FATFS_Init+0x20>)
 8009ce6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ce8:	bf00      	nop
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20002d00 	.word	0x20002d00
 8009cf0:	20000014 	.word	0x20000014
 8009cf4:	20002d04 	.word	0x20002d04

08009cf8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009cfc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7f8 fd49 	bl	80027ac <SD_disk_initialize>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b082      	sub	sp, #8
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8009d30:	79fb      	ldrb	r3, [r7, #7]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7f8 fe26 	bl	8002984 <SD_disk_status>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8009d54:	7bf8      	ldrb	r0, [r7, #15]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	68b9      	ldr	r1, [r7, #8]
 8009d5c:	f7f8 fe28 	bl	80029b0 <SD_disk_read>
 8009d60:	4603      	mov	r3, r0
 8009d62:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8009d7c:	7bf8      	ldrb	r0, [r7, #15]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	f7f8 fe7e 	bl	8002a84 <SD_disk_write>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	603a      	str	r2, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
 8009da0:	460b      	mov	r3, r1
 8009da2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	79b9      	ldrb	r1, [r7, #6]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7f8 feee 	bl	8002b8c <SD_disk_ioctl>
 8009db0:	4603      	mov	r3, r0
 8009db2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	4a08      	ldr	r2, [pc, #32]	; (8009dec <disk_status+0x30>)
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	79fa      	ldrb	r2, [r7, #7]
 8009dd4:	4905      	ldr	r1, [pc, #20]	; (8009dec <disk_status+0x30>)
 8009dd6:	440a      	add	r2, r1
 8009dd8:	7a12      	ldrb	r2, [r2, #8]
 8009dda:	4610      	mov	r0, r2
 8009ddc:	4798      	blx	r3
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20000458 	.word	0x20000458

08009df0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	4a0d      	ldr	r2, [pc, #52]	; (8009e38 <disk_initialize+0x48>)
 8009e02:	5cd3      	ldrb	r3, [r2, r3]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d111      	bne.n	8009e2c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	4a0b      	ldr	r2, [pc, #44]	; (8009e38 <disk_initialize+0x48>)
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	4a09      	ldr	r2, [pc, #36]	; (8009e38 <disk_initialize+0x48>)
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	79fa      	ldrb	r2, [r7, #7]
 8009e1e:	4906      	ldr	r1, [pc, #24]	; (8009e38 <disk_initialize+0x48>)
 8009e20:	440a      	add	r2, r1
 8009e22:	7a12      	ldrb	r2, [r2, #8]
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000458 	.word	0x20000458

08009e3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009e3c:	b590      	push	{r4, r7, lr}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	607a      	str	r2, [r7, #4]
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4a0a      	ldr	r2, [pc, #40]	; (8009e78 <disk_read+0x3c>)
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	689c      	ldr	r4, [r3, #8]
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	4a07      	ldr	r2, [pc, #28]	; (8009e78 <disk_read+0x3c>)
 8009e5c:	4413      	add	r3, r2
 8009e5e:	7a18      	ldrb	r0, [r3, #8]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	68b9      	ldr	r1, [r7, #8]
 8009e66:	47a0      	blx	r4
 8009e68:	4603      	mov	r3, r0
 8009e6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	371c      	adds	r7, #28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd90      	pop	{r4, r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20000458 	.word	0x20000458

08009e7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009e7c:	b590      	push	{r4, r7, lr}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	4a0a      	ldr	r2, [pc, #40]	; (8009eb8 <disk_write+0x3c>)
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	68dc      	ldr	r4, [r3, #12]
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	4a07      	ldr	r2, [pc, #28]	; (8009eb8 <disk_write+0x3c>)
 8009e9c:	4413      	add	r3, r2
 8009e9e:	7a18      	ldrb	r0, [r3, #8]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	47a0      	blx	r4
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd90      	pop	{r4, r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000458 	.word	0x20000458

08009ebc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	603a      	str	r2, [r7, #0]
 8009ec6:	71fb      	strb	r3, [r7, #7]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	4a09      	ldr	r2, [pc, #36]	; (8009ef4 <disk_ioctl+0x38>)
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	79fa      	ldrb	r2, [r7, #7]
 8009eda:	4906      	ldr	r1, [pc, #24]	; (8009ef4 <disk_ioctl+0x38>)
 8009edc:	440a      	add	r2, r1
 8009ede:	7a10      	ldrb	r0, [r2, #8]
 8009ee0:	79b9      	ldrb	r1, [r7, #6]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	4798      	blx	r3
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	73fb      	strb	r3, [r7, #15]
  return res;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20000458 	.word	0x20000458

08009ef8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009f0c:	e007      	b.n	8009f1e <mem_cpy+0x26>
		*d++ = *s++;
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	1c53      	adds	r3, r2, #1
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	1c59      	adds	r1, r3, #1
 8009f18:	6179      	str	r1, [r7, #20]
 8009f1a:	7812      	ldrb	r2, [r2, #0]
 8009f1c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	1e5a      	subs	r2, r3, #1
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1f2      	bne.n	8009f0e <mem_cpy+0x16>
}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f36:	b480      	push	{r7}
 8009f38:	b087      	sub	sp, #28
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009f46:	e005      	b.n	8009f54 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	617a      	str	r2, [r7, #20]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	1e5a      	subs	r2, r3, #1
 8009f58:	607a      	str	r2, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1f4      	bne.n	8009f48 <mem_set+0x12>
}
 8009f5e:	bf00      	nop
 8009f60:	bf00      	nop
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009f6c:	b480      	push	{r7}
 8009f6e:	b089      	sub	sp, #36	; 0x24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	61fb      	str	r3, [r7, #28]
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009f84:	bf00      	nop
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	1e5a      	subs	r2, r3, #1
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00d      	beq.n	8009fac <mem_cmp+0x40>
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	61fa      	str	r2, [r7, #28]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	61ba      	str	r2, [r7, #24]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	1acb      	subs	r3, r1, r3
 8009fa4:	617b      	str	r3, [r7, #20]
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0ec      	beq.n	8009f86 <mem_cmp+0x1a>
	return r;
 8009fac:	697b      	ldr	r3, [r7, #20]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3724      	adds	r7, #36	; 0x24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009fc4:	e002      	b.n	8009fcc <chk_chr+0x12>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	607b      	str	r3, [r7, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d005      	beq.n	8009fe0 <chk_chr+0x26>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d1f2      	bne.n	8009fc6 <chk_chr+0xc>
	return *str;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	60bb      	str	r3, [r7, #8]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	e03d      	b.n	800a080 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 800a004:	4932      	ldr	r1, [pc, #200]	; (800a0d0 <chk_lock+0xe0>)
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4613      	mov	r3, r2
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	440b      	add	r3, r1
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d02e      	beq.n	800a076 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800a018:	492d      	ldr	r1, [pc, #180]	; (800a0d0 <chk_lock+0xe0>)
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	4613      	mov	r3, r2
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	440b      	add	r3, r1
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	429a      	cmp	r2, r3
 800a032:	d122      	bne.n	800a07a <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 800a034:	4926      	ldr	r1, [pc, #152]	; (800a0d0 <chk_lock+0xe0>)
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4613      	mov	r3, r2
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	3304      	adds	r3, #4
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04c:	3308      	adds	r3, #8
 800a04e:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800a050:	429a      	cmp	r2, r3
 800a052:	d112      	bne.n	800a07a <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800a054:	491e      	ldr	r1, [pc, #120]	; (800a0d0 <chk_lock+0xe0>)
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	4613      	mov	r3, r2
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	440b      	add	r3, r1
 800a062:	3308      	adds	r3, #8
 800a064:	881a      	ldrh	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06c:	3306      	adds	r3, #6
 800a06e:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 800a070:	429a      	cmp	r2, r3
 800a072:	d102      	bne.n	800a07a <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800a074:	e007      	b.n	800a086 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800a076:	2301      	movs	r3, #1
 800a078:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3301      	adds	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d9be      	bls.n	800a004 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d109      	bne.n	800a0a0 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d102      	bne.n	800a098 <chk_lock+0xa8>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d101      	bne.n	800a09c <chk_lock+0xac>
 800a098:	2300      	movs	r3, #0
 800a09a:	e013      	b.n	800a0c4 <chk_lock+0xd4>
 800a09c:	2312      	movs	r3, #18
 800a09e:	e011      	b.n	800a0c4 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10b      	bne.n	800a0be <chk_lock+0xce>
 800a0a6:	490a      	ldr	r1, [pc, #40]	; (800a0d0 <chk_lock+0xe0>)
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	330a      	adds	r3, #10
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0bc:	d101      	bne.n	800a0c2 <chk_lock+0xd2>
 800a0be:	2310      	movs	r3, #16
 800a0c0:	e000      	b.n	800a0c4 <chk_lock+0xd4>
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	20000240 	.word	0x20000240

0800a0d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	607b      	str	r3, [r7, #4]
 800a0de:	e002      	b.n	800a0e6 <enq_lock+0x12>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	607b      	str	r3, [r7, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d809      	bhi.n	800a100 <enq_lock+0x2c>
 800a0ec:	490a      	ldr	r1, [pc, #40]	; (800a118 <enq_lock+0x44>)
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1ef      	bne.n	800a0e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b02      	cmp	r3, #2
 800a104:	bf14      	ite	ne
 800a106:	2301      	movne	r3, #1
 800a108:	2300      	moveq	r3, #0
 800a10a:	b2db      	uxtb	r3, r3
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	20000240 	.word	0x20000240

0800a11c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a126:	2300      	movs	r3, #0
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	e030      	b.n	800a18e <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800a12c:	495b      	ldr	r1, [pc, #364]	; (800a29c <inc_lock+0x180>)
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d11f      	bne.n	800a188 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800a148:	4954      	ldr	r1, [pc, #336]	; (800a29c <inc_lock+0x180>)
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	4613      	mov	r3, r2
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	4413      	add	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	440b      	add	r3, r1
 800a156:	3304      	adds	r3, #4
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a160:	3308      	adds	r3, #8
 800a162:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800a164:	429a      	cmp	r2, r3
 800a166:	d10f      	bne.n	800a188 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800a168:	494c      	ldr	r1, [pc, #304]	; (800a29c <inc_lock+0x180>)
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	4613      	mov	r3, r2
 800a16e:	005b      	lsls	r3, r3, #1
 800a170:	4413      	add	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	440b      	add	r3, r1
 800a176:	3308      	adds	r3, #8
 800a178:	881a      	ldrh	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a180:	3306      	adds	r3, #6
 800a182:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800a184:	429a      	cmp	r2, r3
 800a186:	d006      	beq.n	800a196 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d9cb      	bls.n	800a12c <inc_lock+0x10>
 800a194:	e000      	b.n	800a198 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800a196:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d14a      	bne.n	800a234 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	e002      	b.n	800a1aa <inc_lock+0x8e>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	60fb      	str	r3, [r7, #12]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d809      	bhi.n	800a1c4 <inc_lock+0xa8>
 800a1b0:	493a      	ldr	r1, [pc, #232]	; (800a29c <inc_lock+0x180>)
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	440b      	add	r3, r1
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1ef      	bne.n	800a1a4 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d101      	bne.n	800a1ce <inc_lock+0xb2>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e05f      	b.n	800a28e <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d4:	6819      	ldr	r1, [r3, #0]
 800a1d6:	4831      	ldr	r0, [pc, #196]	; (800a29c <inc_lock+0x180>)
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4403      	add	r3, r0
 800a1e4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	482a      	ldr	r0, [pc, #168]	; (800a29c <inc_lock+0x180>)
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4403      	add	r3, r0
 800a1fe:	3304      	adds	r3, #4
 800a200:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a208:	3306      	adds	r3, #6
 800a20a:	8818      	ldrh	r0, [r3, #0]
 800a20c:	4923      	ldr	r1, [pc, #140]	; (800a29c <inc_lock+0x180>)
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	4613      	mov	r3, r2
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	440b      	add	r3, r1
 800a21a:	3308      	adds	r3, #8
 800a21c:	4602      	mov	r2, r0
 800a21e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a220:	491e      	ldr	r1, [pc, #120]	; (800a29c <inc_lock+0x180>)
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4613      	mov	r3, r2
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	4413      	add	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	440b      	add	r3, r1
 800a22e:	330a      	adds	r3, #10
 800a230:	2200      	movs	r2, #0
 800a232:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00c      	beq.n	800a254 <inc_lock+0x138>
 800a23a:	4918      	ldr	r1, [pc, #96]	; (800a29c <inc_lock+0x180>)
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4613      	mov	r3, r2
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	440b      	add	r3, r1
 800a248:	330a      	adds	r3, #10
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <inc_lock+0x138>
 800a250:	2300      	movs	r3, #0
 800a252:	e01c      	b.n	800a28e <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10b      	bne.n	800a272 <inc_lock+0x156>
 800a25a:	4910      	ldr	r1, [pc, #64]	; (800a29c <inc_lock+0x180>)
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4613      	mov	r3, r2
 800a260:	005b      	lsls	r3, r3, #1
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	440b      	add	r3, r1
 800a268:	330a      	adds	r3, #10
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	3301      	adds	r3, #1
 800a26e:	b299      	uxth	r1, r3
 800a270:	e001      	b.n	800a276 <inc_lock+0x15a>
 800a272:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a276:	4809      	ldr	r0, [pc, #36]	; (800a29c <inc_lock+0x180>)
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4613      	mov	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4413      	add	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4403      	add	r3, r0
 800a284:	330a      	adds	r3, #10
 800a286:	460a      	mov	r2, r1
 800a288:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3301      	adds	r3, #1
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000240 	.word	0x20000240

0800a2a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	607b      	str	r3, [r7, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d82e      	bhi.n	800a312 <dec_lock+0x72>
		n = Files[i].ctr;
 800a2b4:	491b      	ldr	r1, [pc, #108]	; (800a324 <dec_lock+0x84>)
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	4413      	add	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	440b      	add	r3, r1
 800a2c2:	330a      	adds	r3, #10
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a2c8:	89fb      	ldrh	r3, [r7, #14]
 800a2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ce:	d101      	bne.n	800a2d4 <dec_lock+0x34>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a2d4:	89fb      	ldrh	r3, [r7, #14]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <dec_lock+0x40>
 800a2da:	89fb      	ldrh	r3, [r7, #14]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a2e0:	4910      	ldr	r1, [pc, #64]	; (800a324 <dec_lock+0x84>)
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	005b      	lsls	r3, r3, #1
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	440b      	add	r3, r1
 800a2ee:	330a      	adds	r3, #10
 800a2f0:	89fa      	ldrh	r2, [r7, #14]
 800a2f2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a2f4:	89fb      	ldrh	r3, [r7, #14]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d108      	bne.n	800a30c <dec_lock+0x6c>
 800a2fa:	490a      	ldr	r1, [pc, #40]	; (800a324 <dec_lock+0x84>)
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	4613      	mov	r3, r2
 800a300:	005b      	lsls	r3, r3, #1
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	440b      	add	r3, r1
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	737b      	strb	r3, [r7, #13]
 800a310:	e001      	b.n	800a316 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a312:	2302      	movs	r3, #2
 800a314:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a316:	7b7b      	ldrb	r3, [r7, #13]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	20000240 	.word	0x20000240

0800a328 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	e016      	b.n	800a364 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a336:	4910      	ldr	r1, [pc, #64]	; (800a378 <clear_lock+0x50>)
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	4613      	mov	r3, r2
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	4413      	add	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	440b      	add	r3, r1
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d108      	bne.n	800a35e <clear_lock+0x36>
 800a34c:	490a      	ldr	r1, [pc, #40]	; (800a378 <clear_lock+0x50>)
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4613      	mov	r3, r2
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	440b      	add	r3, r1
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3301      	adds	r3, #1
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d9e5      	bls.n	800a336 <clear_lock+0xe>
	}
}
 800a36a:	bf00      	nop
 800a36c:	bf00      	nop
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	20000240 	.word	0x20000240

0800a37c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a38e:	3304      	adds	r3, #4
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d047      	beq.n	800a426 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a39c:	330c      	adds	r3, #12
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	7818      	ldrb	r0, [r3, #0]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	f7ff fd63 	bl	8009e7c <disk_write>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <sync_window+0x46>
			res = FR_DISK_ERR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	73fb      	strb	r3, [r7, #15]
 800a3c0:	e031      	b.n	800a426 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	1ad2      	subs	r2, r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e0:	3318      	adds	r3, #24
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d21e      	bcs.n	800a426 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ee:	3303      	adds	r3, #3
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	613b      	str	r3, [r7, #16]
 800a3f4:	e014      	b.n	800a420 <sync_window+0xa4>
					wsect += fs->fsize;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3fc:	3318      	adds	r3, #24
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	4413      	add	r3, r2
 800a404:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a40c:	3301      	adds	r3, #1
 800a40e:	7818      	ldrb	r0, [r3, #0]
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	2301      	movs	r3, #1
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	f7ff fd31 	bl	8009e7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	613b      	str	r3, [r7, #16]
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d8e7      	bhi.n	800a3f6 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800a426:	7bfb      	ldrb	r3, [r7, #15]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a444:	330c      	adds	r3, #12
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d01f      	beq.n	800a48e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff ff94 	bl	800a37c <sync_window>
 800a454:	4603      	mov	r3, r0
 800a456:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d117      	bne.n	800a48e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a464:	3301      	adds	r3, #1
 800a466:	7818      	ldrb	r0, [r3, #0]
 800a468:	6879      	ldr	r1, [r7, #4]
 800a46a:	2301      	movs	r3, #1
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	f7ff fce5 	bl	8009e3c <disk_read>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a478:	f04f 33ff 	mov.w	r3, #4294967295
 800a47c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a47e:	2301      	movs	r3, #1
 800a480:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a488:	330c      	adds	r3, #12
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ff6b 	bl	800a37c <sync_window>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f040 80bd 	bne.w	800a62c <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	f040 80a7 	bne.w	800a60e <sync_fs+0x176>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c6:	3305      	adds	r3, #5
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	f040 809f 	bne.w	800a60e <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d8:	330a      	adds	r3, #10
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	2100      	movs	r1, #0
 800a4e0:	f7ff fd29 	bl	8009f36 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2255      	movs	r2, #85	; 0x55
 800a4e8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	22aa      	movs	r2, #170	; 0xaa
 800a4f0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2252      	movs	r2, #82	; 0x52
 800a4f8:	701a      	strb	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2252      	movs	r2, #82	; 0x52
 800a4fe:	705a      	strb	r2, [r3, #1]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2261      	movs	r2, #97	; 0x61
 800a504:	709a      	strb	r2, [r3, #2]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2241      	movs	r2, #65	; 0x41
 800a50a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2272      	movs	r2, #114	; 0x72
 800a510:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2272      	movs	r2, #114	; 0x72
 800a518:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2241      	movs	r2, #65	; 0x41
 800a520:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2261      	movs	r2, #97	; 0x61
 800a528:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a532:	3310      	adds	r3, #16
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	b2da      	uxtb	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a544:	3310      	adds	r3, #16
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	0a1b      	lsrs	r3, r3, #8
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a55c:	3310      	adds	r3, #16
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	0c1b      	lsrs	r3, r3, #16
 800a562:	b2da      	uxtb	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a570:	3310      	adds	r3, #16
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	0e1b      	lsrs	r3, r3, #24
 800a576:	b2da      	uxtb	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a584:	330c      	adds	r3, #12
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a596:	330c      	adds	r3, #12
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	0a1b      	lsrs	r3, r3, #8
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ae:	330c      	adds	r3, #12
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	0c1b      	lsrs	r3, r3, #16
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c2:	330c      	adds	r3, #12
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	0e1b      	lsrs	r3, r3, #24
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d6:	331c      	adds	r3, #28
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a5e2:	330c      	adds	r3, #12
 800a5e4:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	7818      	ldrb	r0, [r3, #0]
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a5f8:	330c      	adds	r3, #12
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	f7ff fc3d 	bl	8009e7c <disk_write>
			fs->fsi_flag = 0;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a608:	3305      	adds	r3, #5
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a614:	3301      	adds	r3, #1
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2200      	movs	r2, #0
 800a61a:	2100      	movs	r1, #0
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff fc4d 	bl	8009ebc <disk_ioctl>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <sync_fs+0x194>
			res = FR_DISK_ERR;
 800a628:	2301      	movs	r3, #1
 800a62a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	3b02      	subs	r3, #2
 800a644:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64c:	3314      	adds	r3, #20
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3b02      	subs	r3, #2
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	429a      	cmp	r2, r3
 800a656:	d301      	bcc.n	800a65c <clust2sect+0x26>
 800a658:	2300      	movs	r3, #0
 800a65a:	e00e      	b.n	800a67a <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a662:	3302      	adds	r3, #2
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	fb03 f202 	mul.w	r2, r3, r2
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a674:	3308      	adds	r3, #8
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4413      	add	r3, r2
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d907      	bls.n	800a6a6 <get_fat+0x20>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a69c:	3314      	adds	r3, #20
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d302      	bcc.n	800a6ac <get_fat+0x26>
		val = 1;	/* Internal error */
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e0ec      	b.n	800a886 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	f000 809e 	beq.w	800a7fc <get_fat+0x176>
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	f300 80d6 	bgt.w	800a872 <get_fat+0x1ec>
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d002      	beq.n	800a6d0 <get_fat+0x4a>
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d063      	beq.n	800a796 <get_fat+0x110>
 800a6ce:	e0d0      	b.n	800a872 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	085b      	lsrs	r3, r3, #1
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	4413      	add	r3, r2
 800a6dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ec:	330a      	adds	r3, #10
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6f8:	4413      	add	r3, r2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff fe97 	bl	800a430 <move_window>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	f040 80b7 	bne.w	800a878 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	60fa      	str	r2, [r7, #12]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a716:	320a      	adds	r2, #10
 800a718:	8812      	ldrh	r2, [r2, #0]
 800a71a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a71e:	fb02 f201 	mul.w	r2, r2, r1
 800a722:	1a9b      	subs	r3, r3, r2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	5cd3      	ldrb	r3, [r2, r3]
 800a728:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a738:	330a      	adds	r3, #10
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	4619      	mov	r1, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	fbb3 f3f1 	udiv	r3, r3, r1
 800a744:	4413      	add	r3, r2
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff fe71 	bl	800a430 <move_window>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	f040 8093 	bne.w	800a87c <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a75c:	330a      	adds	r3, #10
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	461a      	mov	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	fbb3 f1f2 	udiv	r1, r3, r2
 800a768:	fb02 f201 	mul.w	r2, r2, r1
 800a76c:	1a9b      	subs	r3, r3, r2
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	5cd3      	ldrb	r3, [r2, r3]
 800a772:	021b      	lsls	r3, r3, #8
 800a774:	461a      	mov	r2, r3
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	4313      	orrs	r3, r2
 800a77a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <get_fat+0x106>
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	091b      	lsrs	r3, r3, #4
 800a78a:	e002      	b.n	800a792 <get_fat+0x10c>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a792:	617b      	str	r3, [r7, #20]
			break;
 800a794:	e077      	b.n	800a886 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a4:	330a      	adds	r3, #10
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	085b      	lsrs	r3, r3, #1
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7b4:	4413      	add	r3, r2
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff fe39 	bl	800a430 <move_window>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d15d      	bne.n	800a880 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	005a      	lsls	r2, r3, #1
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ce:	330a      	adds	r3, #10
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7d6:	fb03 f301 	mul.w	r3, r3, r1
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	4413      	add	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	b21a      	sxth	r2, r3
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	b21b      	sxth	r3, r3
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	b21b      	sxth	r3, r3
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	617b      	str	r3, [r7, #20]
			break;
 800a7fa:	e044      	b.n	800a886 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80a:	330a      	adds	r3, #10
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	089b      	lsrs	r3, r3, #2
 800a810:	b29b      	uxth	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	fbb3 f3f1 	udiv	r3, r3, r1
 800a81a:	4413      	add	r3, r2
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fe06 	bl	800a430 <move_window>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d12c      	bne.n	800a884 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	009a      	lsls	r2, r3, #2
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a834:	330a      	adds	r3, #10
 800a836:	881b      	ldrh	r3, [r3, #0]
 800a838:	fbb2 f1f3 	udiv	r1, r2, r3
 800a83c:	fb03 f301 	mul.w	r3, r3, r1
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	4413      	add	r3, r2
 800a846:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	3303      	adds	r3, #3
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	061a      	lsls	r2, r3, #24
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	3302      	adds	r3, #2
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	4313      	orrs	r3, r2
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	3201      	adds	r2, #1
 800a85e:	7812      	ldrb	r2, [r2, #0]
 800a860:	0212      	lsls	r2, r2, #8
 800a862:	4313      	orrs	r3, r2
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	7812      	ldrb	r2, [r2, #0]
 800a868:	4313      	orrs	r3, r2
 800a86a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a86e:	617b      	str	r3, [r7, #20]
			break;
 800a870:	e009      	b.n	800a886 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800a872:	2301      	movs	r3, #1
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	e006      	b.n	800a886 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a878:	bf00      	nop
 800a87a:	e004      	b.n	800a886 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a87c:	bf00      	nop
 800a87e:	e002      	b.n	800a886 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a880:	bf00      	nop
 800a882:	e000      	b.n	800a886 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a884:	bf00      	nop
		}
	}

	return val;
 800a886:	697b      	ldr	r3, [r7, #20]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b088      	sub	sp, #32
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d907      	bls.n	800a8b2 <put_fat+0x22>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a8:	3314      	adds	r3, #20
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d302      	bcc.n	800a8b8 <put_fat+0x28>
		res = FR_INT_ERR;
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	77fb      	strb	r3, [r7, #31]
 800a8b6:	e146      	b.n	800ab46 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b03      	cmp	r3, #3
 800a8c2:	f000 80d9 	beq.w	800aa78 <put_fat+0x1e8>
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	f300 8133 	bgt.w	800ab32 <put_fat+0x2a2>
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d003      	beq.n	800a8d8 <put_fat+0x48>
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	f000 8095 	beq.w	800aa00 <put_fat+0x170>
 800a8d6:	e12c      	b.n	800ab32 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	085b      	lsrs	r3, r3, #1
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f4:	330a      	adds	r3, #10
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a900:	4413      	add	r3, r2
 800a902:	4619      	mov	r1, r3
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7ff fd93 	bl	800a430 <move_window>
 800a90a:	4603      	mov	r3, r0
 800a90c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a90e:	7ffb      	ldrb	r3, [r7, #31]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f040 8111 	bne.w	800ab38 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	617a      	str	r2, [r7, #20]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a922:	320a      	adds	r2, #10
 800a924:	8812      	ldrh	r2, [r2, #0]
 800a926:	fbb3 f1f2 	udiv	r1, r3, r2
 800a92a:	fb02 f201 	mul.w	r2, r2, r1
 800a92e:	1a9b      	subs	r3, r3, r2
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00d      	beq.n	800a95c <put_fat+0xcc>
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	b25b      	sxtb	r3, r3
 800a946:	f003 030f 	and.w	r3, r3, #15
 800a94a:	b25a      	sxtb	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	b25b      	sxtb	r3, r3
 800a954:	4313      	orrs	r3, r2
 800a956:	b25b      	sxtb	r3, r3
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	e001      	b.n	800a960 <put_fat+0xd0>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	69ba      	ldr	r2, [r7, #24]
 800a962:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96a:	3304      	adds	r3, #4
 800a96c:	2201      	movs	r2, #1
 800a96e:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a97e:	330a      	adds	r3, #10
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	4619      	mov	r1, r3
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	fbb3 f3f1 	udiv	r3, r3, r1
 800a98a:	4413      	add	r3, r2
 800a98c:	4619      	mov	r1, r3
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7ff fd4e 	bl	800a430 <move_window>
 800a994:	4603      	mov	r3, r0
 800a996:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a998:	7ffb      	ldrb	r3, [r7, #31]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f040 80ce 	bne.w	800ab3c <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a6:	330a      	adds	r3, #10
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9b2:	fb02 f201 	mul.w	r2, r2, r1
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <put_fat+0x140>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	091b      	lsrs	r3, r3, #4
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	e00e      	b.n	800a9ee <put_fat+0x15e>
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	b25b      	sxtb	r3, r3
 800a9d6:	f023 030f 	bic.w	r3, r3, #15
 800a9da:	b25a      	sxtb	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	0a1b      	lsrs	r3, r3, #8
 800a9e0:	b25b      	sxtb	r3, r3
 800a9e2:	f003 030f 	and.w	r3, r3, #15
 800a9e6:	b25b      	sxtb	r3, r3
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	b25b      	sxtb	r3, r3
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	701a      	strb	r2, [r3, #0]
			break;
 800a9fe:	e0a2      	b.n	800ab46 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0e:	330a      	adds	r3, #10
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	085b      	lsrs	r3, r3, #1
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	4619      	mov	r1, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa1e:	4413      	add	r3, r2
 800aa20:	4619      	mov	r1, r3
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff fd04 	bl	800a430 <move_window>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa2c:	7ffb      	ldrb	r3, [r7, #31]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f040 8086 	bne.w	800ab40 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	005a      	lsls	r2, r3, #1
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa3e:	330a      	adds	r3, #10
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa46:	fb03 f301 	mul.w	r3, r3, r1
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	701a      	strb	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	0a1b      	lsrs	r3, r3, #8
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	3301      	adds	r3, #1
 800aa66:	b2d2      	uxtb	r2, r2
 800aa68:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa70:	3304      	adds	r3, #4
 800aa72:	2201      	movs	r2, #1
 800aa74:	701a      	strb	r2, [r3, #0]
			break;
 800aa76:	e066      	b.n	800ab46 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa86:	330a      	adds	r3, #10
 800aa88:	881b      	ldrh	r3, [r3, #0]
 800aa8a:	089b      	lsrs	r3, r3, #2
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	4619      	mov	r1, r3
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa96:	4413      	add	r3, r2
 800aa98:	4619      	mov	r1, r3
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7ff fcc8 	bl	800a430 <move_window>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aaa4:	7ffb      	ldrb	r3, [r7, #31]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d14c      	bne.n	800ab44 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	009a      	lsls	r2, r3, #2
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aab4:	330a      	adds	r3, #10
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	fbb2 f1f3 	udiv	r1, r2, r3
 800aabc:	fb03 f301 	mul.w	r3, r3, r1
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4413      	add	r3, r2
 800aac6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	3303      	adds	r3, #3
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	061a      	lsls	r2, r3, #24
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	3302      	adds	r3, #2
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	041b      	lsls	r3, r3, #16
 800aad8:	4313      	orrs	r3, r2
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	3201      	adds	r2, #1
 800aade:	7812      	ldrb	r2, [r2, #0]
 800aae0:	0212      	lsls	r2, r2, #8
 800aae2:	4313      	orrs	r3, r2
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	7812      	ldrb	r2, [r2, #0]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	0a1b      	lsrs	r3, r3, #8
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	3301      	adds	r3, #1
 800ab08:	b2d2      	uxtb	r2, r2
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	0c1a      	lsrs	r2, r3, #16
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	3302      	adds	r3, #2
 800ab14:	b2d2      	uxtb	r2, r2
 800ab16:	701a      	strb	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	0e1a      	lsrs	r2, r3, #24
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	3303      	adds	r3, #3
 800ab20:	b2d2      	uxtb	r2, r2
 800ab22:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	701a      	strb	r2, [r3, #0]
			break;
 800ab30:	e009      	b.n	800ab46 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800ab32:	2302      	movs	r3, #2
 800ab34:	77fb      	strb	r3, [r7, #31]
 800ab36:	e006      	b.n	800ab46 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800ab38:	bf00      	nop
 800ab3a:	e004      	b.n	800ab46 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800ab3c:	bf00      	nop
 800ab3e:	e002      	b.n	800ab46 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800ab40:	bf00      	nop
 800ab42:	e000      	b.n	800ab46 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800ab44:	bf00      	nop
		}
	}

	return res;
 800ab46:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3720      	adds	r7, #32
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d907      	bls.n	800ab70 <remove_chain+0x20>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab66:	3314      	adds	r3, #20
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d302      	bcc.n	800ab76 <remove_chain+0x26>
		res = FR_INT_ERR;
 800ab70:	2302      	movs	r3, #2
 800ab72:	73fb      	strb	r3, [r7, #15]
 800ab74:	e04f      	b.n	800ac16 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ab7a:	e040      	b.n	800abfe <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7ff fd81 	bl	800a686 <get_fat>
 800ab84:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d041      	beq.n	800ac10 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d102      	bne.n	800ab98 <remove_chain+0x48>
 800ab92:	2302      	movs	r3, #2
 800ab94:	73fb      	strb	r3, [r7, #15]
 800ab96:	e03e      	b.n	800ac16 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9e:	d102      	bne.n	800aba6 <remove_chain+0x56>
 800aba0:	2301      	movs	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
 800aba4:	e037      	b.n	800ac16 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800aba6:	2200      	movs	r2, #0
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff fe70 	bl	800a890 <put_fat>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d12c      	bne.n	800ac14 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abc0:	3310      	adds	r3, #16
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d017      	beq.n	800abfa <remove_chain+0xaa>
				fs->free_clust++;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd0:	3310      	adds	r3, #16
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abdc:	3310      	adds	r3, #16
 800abde:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe6:	3305      	adds	r3, #5
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	f043 0301 	orr.w	r3, r3, #1
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf6:	3305      	adds	r3, #5
 800abf8:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac04:	3314      	adds	r3, #20
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d3b6      	bcc.n	800ab7c <remove_chain+0x2c>
 800ac0e:	e002      	b.n	800ac16 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800ac10:	bf00      	nop
 800ac12:	e000      	b.n	800ac16 <remove_chain+0xc6>
			if (res != FR_OK) break;
 800ac14:	bf00      	nop
		}
	}

	return res;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d113      	bne.n	800ac58 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac36:	330c      	adds	r3, #12
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d007      	beq.n	800ac52 <create_chain+0x32>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac48:	3314      	adds	r3, #20
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d31e      	bcc.n	800ac90 <create_chain+0x70>
 800ac52:	2301      	movs	r3, #1
 800ac54:	613b      	str	r3, [r7, #16]
 800ac56:	e01b      	b.n	800ac90 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff fd13 	bl	800a686 <get_fat>
 800ac60:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d801      	bhi.n	800ac6c <create_chain+0x4c>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e086      	b.n	800ad7a <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac72:	d101      	bne.n	800ac78 <create_chain+0x58>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	e080      	b.n	800ad7a <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7e:	3314      	adds	r3, #20
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d201      	bcs.n	800ac8c <create_chain+0x6c>
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	e076      	b.n	800ad7a <create_chain+0x15a>
		scl = clst;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	3301      	adds	r3, #1
 800ac98:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca0:	3314      	adds	r3, #20
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d307      	bcc.n	800acba <create_chain+0x9a>
			ncl = 2;
 800acaa:	2302      	movs	r3, #2
 800acac:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d901      	bls.n	800acba <create_chain+0x9a>
 800acb6:	2300      	movs	r3, #0
 800acb8:	e05f      	b.n	800ad7a <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800acba:	6979      	ldr	r1, [r7, #20]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff fce2 	bl	800a686 <get_fat>
 800acc2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00e      	beq.n	800ace8 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd0:	d002      	beq.n	800acd8 <create_chain+0xb8>
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <create_chain+0xbc>
			return cs;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	e04e      	b.n	800ad7a <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d1d7      	bne.n	800ac94 <create_chain+0x74>
 800ace4:	2300      	movs	r3, #0
 800ace6:	e048      	b.n	800ad7a <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800ace8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800acea:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800acee:	6979      	ldr	r1, [r7, #20]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff fdcd 	bl	800a890 <put_fat>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d109      	bne.n	800ad14 <create_chain+0xf4>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d006      	beq.n	800ad14 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7ff fdc0 	bl	800a890 <put_fat>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d126      	bne.n	800ad68 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad20:	330c      	adds	r3, #12
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad2c:	3310      	adds	r3, #16
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad34:	d020      	beq.n	800ad78 <create_chain+0x158>
			fs->free_clust--;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3c:	3310      	adds	r3, #16
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	1e5a      	subs	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad48:	3310      	adds	r3, #16
 800ad4a:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad52:	3305      	adds	r3, #5
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	f043 0301 	orr.w	r3, r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad62:	3305      	adds	r3, #5
 800ad64:	701a      	strb	r2, [r3, #0]
 800ad66:	e007      	b.n	800ad78 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d102      	bne.n	800ad74 <create_chain+0x154>
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad72:	e000      	b.n	800ad76 <create_chain+0x156>
 800ad74:	2301      	movs	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800ad78:	697b      	ldr	r3, [r7, #20]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b087      	sub	sp, #28
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ad92:	3304      	adds	r3, #4
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3304      	adds	r3, #4
 800ad98:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada6:	330a      	adds	r3, #10
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	fbb3 f2f2 	udiv	r2, r3, r2
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adbe:	3302      	adds	r3, #2
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	1d1a      	adds	r2, r3, #4
 800adcc:	613a      	str	r2, [r7, #16]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <clmt_clust+0x5a>
 800add8:	2300      	movs	r3, #0
 800adda:	e010      	b.n	800adfe <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d307      	bcc.n	800adf4 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	3304      	adds	r3, #4
 800adf0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800adf2:	e7e9      	b.n	800adc8 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800adf4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	4413      	add	r3, r2
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b086      	sub	sp, #24
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae1e:	3306      	adds	r3, #6
 800ae20:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae28:	3308      	adds	r3, #8
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d00a      	beq.n	800ae4a <dir_sdi+0x40>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae40:	3314      	adds	r3, #20
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d301      	bcc.n	800ae4e <dir_sdi+0x44>
		return FR_INT_ERR;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e0b4      	b.n	800afb8 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d111      	bne.n	800ae78 <dir_sdi+0x6e>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d108      	bne.n	800ae78 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ae72:	3304      	adds	r3, #4
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d117      	bne.n	800aeae <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d301      	bcc.n	800ae9a <dir_sdi+0x90>
			return FR_INT_ERR;
 800ae96:	2302      	movs	r3, #2
 800ae98:	e08e      	b.n	800afb8 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aea6:	3304      	adds	r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	613b      	str	r3, [r7, #16]
 800aeac:	e046      	b.n	800af3c <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeba:	330a      	adds	r3, #10
 800aebc:	881b      	ldrh	r3, [r3, #0]
 800aebe:	095b      	lsrs	r3, r3, #5
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	461a      	mov	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed0:	3302      	adds	r3, #2
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	fb03 f302 	mul.w	r3, r3, r2
 800aed8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800aeda:	e022      	b.n	800af22 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6979      	ldr	r1, [r7, #20]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff fbcd 	bl	800a686 <get_fat>
 800aeec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef4:	d101      	bne.n	800aefa <dir_sdi+0xf0>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e05e      	b.n	800afb8 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d90a      	bls.n	800af16 <dir_sdi+0x10c>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af0c:	3314      	adds	r3, #20
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	429a      	cmp	r2, r3
 800af14:	d301      	bcc.n	800af1a <dir_sdi+0x110>
				return FR_INT_ERR;
 800af16:	2302      	movs	r3, #2
 800af18:	e04e      	b.n	800afb8 <dir_sdi+0x1ae>
			idx -= ic;
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	429a      	cmp	r2, r3
 800af28:	d2d8      	bcs.n	800aedc <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	6979      	ldr	r1, [r7, #20]
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff fb7e 	bl	800a636 <clust2sect>
 800af3a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af42:	330c      	adds	r3, #12
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <dir_sdi+0x148>
 800af4e:	2302      	movs	r3, #2
 800af50:	e032      	b.n	800afb8 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af5e:	330a      	adds	r3, #10
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	095b      	lsrs	r3, r3, #5
 800af64:	b29b      	uxth	r3, r3
 800af66:	461a      	mov	r2, r3
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	fbb3 f2f2 	udiv	r2, r3, r2
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	441a      	add	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af78:	3310      	adds	r3, #16
 800af7a:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4618      	mov	r0, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af92:	330a      	adds	r3, #10
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	095b      	lsrs	r3, r3, #5
 800af98:	b29b      	uxth	r3, r3
 800af9a:	461a      	mov	r2, r3
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800afa2:	fb02 f201 	mul.w	r2, r2, r1
 800afa6:	1a9b      	subs	r3, r3, r2
 800afa8:	015b      	lsls	r3, r3, #5
 800afaa:	18c2      	adds	r2, r0, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb2:	3314      	adds	r3, #20
 800afb4:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800afc0:	b590      	push	{r4, r7, lr}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd0:	3306      	adds	r3, #6
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d006      	beq.n	800afee <dir_next+0x2e>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe6:	3310      	adds	r3, #16
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <dir_next+0x32>
		return FR_NO_FILE;
 800afee:	2304      	movs	r3, #4
 800aff0:	e144      	b.n	800b27c <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affe:	330a      	adds	r3, #10
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	095b      	lsrs	r3, r3, #5
 800b004:	b29b      	uxth	r3, r3
 800b006:	461a      	mov	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b00e:	fb02 f201 	mul.w	r2, r2, r1
 800b012:	1a9b      	subs	r3, r3, r2
 800b014:	2b00      	cmp	r3, #0
 800b016:	f040 810c 	bne.w	800b232 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b020:	3310      	adds	r3, #16
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b02c:	3310      	adds	r3, #16
 800b02e:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b036:	330c      	adds	r3, #12
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10e      	bne.n	800b05c <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b04a:	3308      	adds	r3, #8
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4293      	cmp	r3, r2
 800b054:	f0c0 80ed 	bcc.w	800b232 <dir_next+0x272>
				return FR_NO_FILE;
 800b058:	2304      	movs	r3, #4
 800b05a:	e10f      	b.n	800b27c <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b068:	330a      	adds	r3, #10
 800b06a:	881b      	ldrh	r3, [r3, #0]
 800b06c:	095b      	lsrs	r3, r3, #5
 800b06e:	b29b      	uxth	r3, r3
 800b070:	461a      	mov	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	fbb3 f2f2 	udiv	r2, r3, r2
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b084:	3302      	adds	r3, #2
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	3b01      	subs	r3, #1
 800b08a:	4013      	ands	r3, r2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 80d0 	bne.w	800b232 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	f7ff faed 	bl	800a686 <get_fat>
 800b0ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d801      	bhi.n	800b0b8 <dir_next+0xf8>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	e0e1      	b.n	800b27c <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0be:	d101      	bne.n	800b0c4 <dir_next+0x104>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e0db      	b.n	800b27c <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d0:	3314      	adds	r3, #20
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	f0c0 8097 	bcc.w	800b20a <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d101      	bne.n	800b0e6 <dir_next+0x126>
 800b0e2:	2304      	movs	r3, #4
 800b0e4:	e0ca      	b.n	800b27c <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7ff fd90 	bl	800ac20 <create_chain>
 800b100:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <dir_next+0x14c>
 800b108:	2307      	movs	r3, #7
 800b10a:	e0b7      	b.n	800b27c <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <dir_next+0x156>
 800b112:	2302      	movs	r3, #2
 800b114:	e0b2      	b.n	800b27c <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11c:	d101      	bne.n	800b122 <dir_next+0x162>
 800b11e:	2301      	movs	r3, #1
 800b120:	e0ac      	b.n	800b27c <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff f926 	bl	800a37c <sync_window>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <dir_next+0x17a>
 800b136:	2301      	movs	r3, #1
 800b138:	e0a0      	b.n	800b27c <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4618      	mov	r0, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b150:	330a      	adds	r3, #10
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	461a      	mov	r2, r3
 800b156:	2100      	movs	r1, #0
 800b158:	f7fe feed 	bl	8009f36 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16a:	681c      	ldr	r4, [r3, #0]
 800b16c:	6979      	ldr	r1, [r7, #20]
 800b16e:	4610      	mov	r0, r2
 800b170:	f7ff fa61 	bl	800a636 <clust2sect>
 800b174:	4602      	mov	r2, r0
 800b176:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800b17a:	330c      	adds	r3, #12
 800b17c:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b17e:	2300      	movs	r3, #0
 800b180:	613b      	str	r3, [r7, #16]
 800b182:	e024      	b.n	800b1ce <dir_next+0x20e>
						dp->fs->wflag = 1;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b190:	3304      	adds	r3, #4
 800b192:	2201      	movs	r2, #1
 800b194:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff f8ec 	bl	800a37c <sync_window>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <dir_next+0x1ee>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e066      	b.n	800b27c <dir_next+0x2bc>
						dp->fs->winsect++;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b1ba:	330c      	adds	r3, #12
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	1c59      	adds	r1, r3, #1
 800b1c0:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	613b      	str	r3, [r7, #16]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1da:	3302      	adds	r3, #2
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d3ce      	bcc.n	800b184 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b1f2:	330c      	adds	r3, #12
 800b1f4:	6819      	ldr	r1, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	1a8a      	subs	r2, r1, r2
 800b202:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b206:	330c      	adds	r3, #12
 800b208:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b210:	330c      	adds	r3, #12
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6979      	ldr	r1, [r7, #20]
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff fa08 	bl	800a636 <clust2sect>
 800b226:	4602      	mov	r2, r0
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b22e:	3310      	adds	r3, #16
 800b230:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23c:	3306      	adds	r3, #6
 800b23e:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b256:	330a      	adds	r3, #10
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	095b      	lsrs	r3, r3, #5
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	461a      	mov	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	fbb3 f1f2 	udiv	r1, r3, r2
 800b266:	fb02 f201 	mul.w	r2, r2, r1
 800b26a:	1a9b      	subs	r3, r3, r2
 800b26c:	015b      	lsls	r3, r3, #5
 800b26e:	18c2      	adds	r2, r0, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b276:	3314      	adds	r3, #20
 800b278:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	bd90      	pop	{r4, r7, pc}

0800b284 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800b28e:	2100      	movs	r1, #0
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff fdba 	bl	800ae0a <dir_sdi>
 800b296:	4603      	mov	r3, r0
 800b298:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d138      	bne.n	800b312 <dir_alloc+0x8e>
		n = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2b2:	3310      	adds	r3, #16
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f7ff f8b9 	bl	800a430 <move_window>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d123      	bne.n	800b310 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ce:	3314      	adds	r3, #20
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2be5      	cmp	r3, #229	; 0xe5
 800b2d6:	d007      	beq.n	800b2e8 <dir_alloc+0x64>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2de:	3314      	adds	r3, #20
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d107      	bne.n	800b2f8 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60bb      	str	r3, [r7, #8]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d102      	bne.n	800b2fc <dir_alloc+0x78>
 800b2f6:	e00c      	b.n	800b312 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff fe5e 	bl	800afc0 <dir_next>
 800b304:	4603      	mov	r3, r0
 800b306:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800b308:	7bfb      	ldrb	r3, [r7, #15]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0ca      	beq.n	800b2a4 <dir_alloc+0x20>
 800b30e:	e000      	b.n	800b312 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800b310:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	2b04      	cmp	r3, #4
 800b316:	d101      	bne.n	800b31c <dir_alloc+0x98>
 800b318:	2307      	movs	r3, #7
 800b31a:	73fb      	strb	r3, [r7, #15]
	return res;
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800b326:	b480      	push	{r7}
 800b328:	b085      	sub	sp, #20
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	331b      	adds	r3, #27
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	b21a      	sxth	r2, r3
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	331a      	adds	r3, #26
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	b21b      	sxth	r3, r3
 800b342:	4313      	orrs	r3, r2
 800b344:	b21b      	sxth	r3, r3
 800b346:	b29b      	uxth	r3, r3
 800b348:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b03      	cmp	r3, #3
 800b354:	d10f      	bne.n	800b376 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	3315      	adds	r3, #21
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	021b      	lsls	r3, r3, #8
 800b35e:	b21a      	sxth	r2, r3
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	3314      	adds	r3, #20
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	b21b      	sxth	r3, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	b21b      	sxth	r3, r3
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	041b      	lsls	r3, r3, #16
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]

	return cl;
 800b376:	68fb      	ldr	r3, [r7, #12]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	331a      	adds	r3, #26
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	b2d2      	uxtb	r2, r2
 800b396:	701a      	strb	r2, [r3, #0]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	0a1b      	lsrs	r3, r3, #8
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	331b      	adds	r3, #27
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	0c1a      	lsrs	r2, r3, #16
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3314      	adds	r3, #20
 800b3b0:	b2d2      	uxtb	r2, r2
 800b3b2:	701a      	strb	r2, [r3, #0]
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	0c1b      	lsrs	r3, r3, #16
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	0a1b      	lsrs	r3, r3, #8
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3315      	adds	r3, #21
 800b3c2:	b2d2      	uxtb	r2, r2
 800b3c4:	701a      	strb	r2, [r3, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3e6:	1e5a      	subs	r2, r3, #1
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	4413      	add	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	613b      	str	r3, [r7, #16]
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800b3fc:	4a2b      	ldr	r2, [pc, #172]	; (800b4ac <cmp_lfn+0xd8>)
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	4413      	add	r3, r2
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	4413      	add	r3, r2
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	021b      	lsls	r3, r3, #8
 800b40e:	b21a      	sxth	r2, r3
 800b410:	4926      	ldr	r1, [pc, #152]	; (800b4ac <cmp_lfn+0xd8>)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	440b      	add	r3, r1
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	4619      	mov	r1, r3
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	440b      	add	r3, r1
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	b21b      	sxth	r3, r3
 800b422:	4313      	orrs	r3, r2
 800b424:	b21b      	sxth	r3, r3
 800b426:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b428:	89fb      	ldrh	r3, [r7, #14]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d019      	beq.n	800b462 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800b42e:	89bb      	ldrh	r3, [r7, #12]
 800b430:	4618      	mov	r0, r3
 800b432:	f003 f869 	bl	800e508 <ff_wtoupper>
 800b436:	4603      	mov	r3, r0
 800b438:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2bfe      	cmp	r3, #254	; 0xfe
 800b43e:	d80e      	bhi.n	800b45e <cmp_lfn+0x8a>
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	617a      	str	r2, [r7, #20]
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	4413      	add	r3, r2
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	4618      	mov	r0, r3
 800b450:	f003 f85a 	bl	800e508 <ff_wtoupper>
 800b454:	4603      	mov	r3, r0
 800b456:	461a      	mov	r2, r3
 800b458:	89fb      	ldrh	r3, [r7, #14]
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d008      	beq.n	800b470 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800b45e:	2300      	movs	r3, #0
 800b460:	e01f      	b.n	800b4a2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800b462:	89bb      	ldrh	r3, [r7, #12]
 800b464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b468:	4293      	cmp	r3, r2
 800b46a:	d001      	beq.n	800b470 <cmp_lfn+0x9c>
 800b46c:	2300      	movs	r3, #0
 800b46e:	e018      	b.n	800b4a2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	3301      	adds	r3, #1
 800b474:	613b      	str	r3, [r7, #16]
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	2b0c      	cmp	r3, #12
 800b47a:	d9bf      	bls.n	800b3fc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00b      	beq.n	800b4a0 <cmp_lfn+0xcc>
 800b488:	89fb      	ldrh	r3, [r7, #14]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d008      	beq.n	800b4a0 <cmp_lfn+0xcc>
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	4413      	add	r3, r2
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <cmp_lfn+0xcc>
		return 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	e000      	b.n	800b4a2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800b4a0:	2301      	movs	r3, #1
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	080122c8 	.word	0x080122c8

0800b4b0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b089      	sub	sp, #36	; 0x24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	461a      	mov	r2, r3
 800b4be:	460b      	mov	r3, r1
 800b4c0:	71fb      	strb	r3, [r7, #7]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	330d      	adds	r3, #13
 800b4ca:	79ba      	ldrb	r2, [r7, #6]
 800b4cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	330b      	adds	r3, #11
 800b4d2:	220f      	movs	r2, #15
 800b4d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	330c      	adds	r3, #12
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	331a      	adds	r3, #26
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	701a      	strb	r2, [r3, #0]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	331b      	adds	r3, #27
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	1e5a      	subs	r2, r3, #1
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	4413      	add	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	82fb      	strh	r3, [r7, #22]
 800b502:	2300      	movs	r3, #0
 800b504:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800b506:	8afb      	ldrh	r3, [r7, #22]
 800b508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d007      	beq.n	800b520 <fit_lfn+0x70>
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	61fa      	str	r2, [r7, #28]
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	4413      	add	r3, r2
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800b520:	4a1d      	ldr	r2, [pc, #116]	; (800b598 <fit_lfn+0xe8>)
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	4413      	add	r3, r2
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	461a      	mov	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	4413      	add	r3, r2
 800b52e:	8afa      	ldrh	r2, [r7, #22]
 800b530:	b2d2      	uxtb	r2, r2
 800b532:	701a      	strb	r2, [r3, #0]
 800b534:	8afb      	ldrh	r3, [r7, #22]
 800b536:	0a1b      	lsrs	r3, r3, #8
 800b538:	b299      	uxth	r1, r3
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <fit_lfn+0xe8>)
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	4413      	add	r3, r2
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	3301      	adds	r3, #1
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	4413      	add	r3, r2
 800b548:	b2ca      	uxtb	r2, r1
 800b54a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800b54c:	8afb      	ldrh	r3, [r7, #22]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d102      	bne.n	800b558 <fit_lfn+0xa8>
 800b552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b556:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	3301      	adds	r3, #1
 800b55c:	61bb      	str	r3, [r7, #24]
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	2b0c      	cmp	r3, #12
 800b562:	d9d0      	bls.n	800b506 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800b564:	8afb      	ldrh	r3, [r7, #22]
 800b566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d006      	beq.n	800b57c <fit_lfn+0xcc>
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	4413      	add	r3, r2
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d103      	bne.n	800b584 <fit_lfn+0xd4>
 800b57c:	79fb      	ldrb	r3, [r7, #7]
 800b57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b582:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	79fa      	ldrb	r2, [r7, #7]
 800b588:	701a      	strb	r2, [r3, #0]
}
 800b58a:	bf00      	nop
 800b58c:	3724      	adds	r7, #36	; 0x24
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	080122c8 	.word	0x080122c8

0800b59c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08c      	sub	sp, #48	; 0x30
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b5aa:	220b      	movs	r2, #11
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7fe fca2 	bl	8009ef8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2b05      	cmp	r3, #5
 800b5b8:	d92b      	bls.n	800b612 <gen_numname+0x76>
		sr = seq;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b5be:	e022      	b.n	800b606 <gen_numname+0x6a>
			wc = *lfn++;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	1c9a      	adds	r2, r3, #2
 800b5c4:	607a      	str	r2, [r7, #4]
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5ce:	e017      	b.n	800b600 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	005a      	lsls	r2, r3, #1
 800b5d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	4413      	add	r3, r2
 800b5dc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b5de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5e0:	085b      	lsrs	r3, r3, #1
 800b5e2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d005      	beq.n	800b5fa <gen_numname+0x5e>
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b5f4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b5f8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	2b0f      	cmp	r3, #15
 800b604:	d9e4      	bls.n	800b5d0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1d8      	bne.n	800b5c0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b612:	2307      	movs	r3, #7
 800b614:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	3330      	adds	r3, #48	; 0x30
 800b622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b62a:	2b39      	cmp	r3, #57	; 0x39
 800b62c:	d904      	bls.n	800b638 <gen_numname+0x9c>
 800b62e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b632:	3307      	adds	r3, #7
 800b634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63a:	1e5a      	subs	r2, r3, #1
 800b63c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b63e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b642:	4413      	add	r3, r2
 800b644:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b648:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	091b      	lsrs	r3, r3, #4
 800b650:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1de      	bne.n	800b616 <gen_numname+0x7a>
	ns[i] = '~';
 800b658:	f107 0214 	add.w	r2, r7, #20
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	4413      	add	r3, r2
 800b660:	227e      	movs	r2, #126	; 0x7e
 800b662:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b664:	2300      	movs	r3, #0
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
 800b668:	e002      	b.n	800b670 <gen_numname+0xd4>
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	3301      	adds	r3, #1
 800b66e:	627b      	str	r3, [r7, #36]	; 0x24
 800b670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b674:	429a      	cmp	r2, r3
 800b676:	d205      	bcs.n	800b684 <gen_numname+0xe8>
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	4413      	add	r3, r2
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b20      	cmp	r3, #32
 800b682:	d1f2      	bne.n	800b66a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	2b07      	cmp	r3, #7
 800b688:	d808      	bhi.n	800b69c <gen_numname+0x100>
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	62ba      	str	r2, [r7, #40]	; 0x28
 800b690:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b694:	4413      	add	r3, r2
 800b696:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b69a:	e000      	b.n	800b69e <gen_numname+0x102>
 800b69c:	2120      	movs	r1, #32
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	627a      	str	r2, [r7, #36]	; 0x24
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	460a      	mov	r2, r1
 800b6aa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	2b07      	cmp	r3, #7
 800b6b0:	d9e8      	bls.n	800b684 <gen_numname+0xe8>
}
 800b6b2:	bf00      	nop
 800b6b4:	bf00      	nop
 800b6b6:	3730      	adds	r7, #48	; 0x30
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b6c8:	230b      	movs	r3, #11
 800b6ca:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	0852      	lsrs	r2, r2, #1
 800b6d2:	01db      	lsls	r3, r3, #7
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	1c59      	adds	r1, r3, #1
 800b6dc:	6079      	str	r1, [r7, #4]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	73fb      	strb	r3, [r7, #15]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	60bb      	str	r3, [r7, #8]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1ed      	bne.n	800b6cc <sum_sfn+0x10>
	return sum;
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b086      	sub	sp, #24
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b706:	2100      	movs	r1, #0
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff fb7e 	bl	800ae0a <dir_sdi>
 800b70e:	4603      	mov	r3, r0
 800b710:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d001      	beq.n	800b71c <dir_find+0x1e>
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	e0c1      	b.n	800b8a0 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b71c:	23ff      	movs	r3, #255	; 0xff
 800b71e:	753b      	strb	r3, [r7, #20]
 800b720:	7d3b      	ldrb	r3, [r7, #20]
 800b722:	757b      	strb	r3, [r7, #21]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b72a:	3304      	adds	r3, #4
 800b72c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b730:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b740:	3310      	adds	r3, #16
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4619      	mov	r1, r3
 800b746:	4610      	mov	r0, r2
 800b748:	f7fe fe72 	bl	800a430 <move_window>
 800b74c:	4603      	mov	r3, r0
 800b74e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b750:	7dfb      	ldrb	r3, [r7, #23]
 800b752:	2b00      	cmp	r3, #0
 800b754:	f040 809e 	bne.w	800b894 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b75e:	3314      	adds	r3, #20
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b76a:	7dbb      	ldrb	r3, [r7, #22]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d102      	bne.n	800b776 <dir_find+0x78>
 800b770:	2304      	movs	r3, #4
 800b772:	75fb      	strb	r3, [r7, #23]
 800b774:	e093      	b.n	800b89e <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	330b      	adds	r3, #11
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b780:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b782:	7dbb      	ldrb	r3, [r7, #22]
 800b784:	2be5      	cmp	r3, #229	; 0xe5
 800b786:	d007      	beq.n	800b798 <dir_find+0x9a>
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	f003 0308 	and.w	r3, r3, #8
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00c      	beq.n	800b7ac <dir_find+0xae>
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	2b0f      	cmp	r3, #15
 800b796:	d009      	beq.n	800b7ac <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b798:	23ff      	movs	r3, #255	; 0xff
 800b79a:	757b      	strb	r3, [r7, #21]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7a8:	801a      	strh	r2, [r3, #0]
 800b7aa:	e068      	b.n	800b87e <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	2b0f      	cmp	r3, #15
 800b7b0:	d139      	bne.n	800b826 <dir_find+0x128>
				if (dp->lfn) {
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d05f      	beq.n	800b87e <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b7be:	7dbb      	ldrb	r3, [r7, #22]
 800b7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d012      	beq.n	800b7ee <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	7b5b      	ldrb	r3, [r3, #13]
 800b7cc:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800b7ce:	7dbb      	ldrb	r3, [r7, #22]
 800b7d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7d4:	75bb      	strb	r3, [r7, #22]
 800b7d6:	7dbb      	ldrb	r3, [r7, #22]
 800b7d8:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7e0:	3306      	adds	r3, #6
 800b7e2:	881a      	ldrh	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800b7ee:	7dba      	ldrb	r2, [r7, #22]
 800b7f0:	7d7b      	ldrb	r3, [r7, #21]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d114      	bne.n	800b820 <dir_find+0x122>
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	330d      	adds	r3, #13
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	7d3a      	ldrb	r2, [r7, #20]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d10e      	bne.n	800b820 <dir_find+0x122>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6939      	ldr	r1, [r7, #16]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fde1 	bl	800b3d4 <cmp_lfn>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <dir_find+0x122>
 800b818:	7d7b      	ldrb	r3, [r7, #21]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	e000      	b.n	800b822 <dir_find+0x124>
 800b820:	23ff      	movs	r3, #255	; 0xff
 800b822:	757b      	strb	r3, [r7, #21]
 800b824:	e02b      	b.n	800b87e <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b826:	7d7b      	ldrb	r3, [r7, #21]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d107      	bne.n	800b83c <dir_find+0x13e>
 800b82c:	6938      	ldr	r0, [r7, #16]
 800b82e:	f7ff ff45 	bl	800b6bc <sum_sfn>
 800b832:	4603      	mov	r3, r0
 800b834:	461a      	mov	r2, r3
 800b836:	7d3b      	ldrb	r3, [r7, #20]
 800b838:	4293      	cmp	r3, r2
 800b83a:	d02d      	beq.n	800b898 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b842:	3318      	adds	r3, #24
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	330b      	adds	r3, #11
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10c      	bne.n	800b86c <dir_find+0x16e>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b858:	3318      	adds	r3, #24
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	220b      	movs	r2, #11
 800b85e:	4619      	mov	r1, r3
 800b860:	6938      	ldr	r0, [r7, #16]
 800b862:	f7fe fb83 	bl	8009f6c <mem_cmp>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d017      	beq.n	800b89c <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b86c:	23ff      	movs	r3, #255	; 0xff
 800b86e:	757b      	strb	r3, [r7, #21]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b876:	3304      	adds	r3, #4
 800b878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b87c:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800b87e:	2100      	movs	r1, #0
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7ff fb9d 	bl	800afc0 <dir_next>
 800b886:	4603      	mov	r3, r0
 800b888:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f43f af50 	beq.w	800b732 <dir_find+0x34>
 800b892:	e004      	b.n	800b89e <dir_find+0x1a0>
		if (res != FR_OK) break;
 800b894:	bf00      	nop
 800b896:	e002      	b.n	800b89e <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b898:	bf00      	nop
 800b89a:	e000      	b.n	800b89e <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b89c:	bf00      	nop

	return res;
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08c      	sub	sp, #48	; 0x30
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b6:	3318      	adds	r3, #24
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	623b      	str	r3, [r7, #32]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800b8c6:	f107 030c 	add.w	r3, r7, #12
 800b8ca:	220c      	movs	r2, #12
 800b8cc:	6a39      	ldr	r1, [r7, #32]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fb12 	bl	8009ef8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b8d4:	7dfb      	ldrb	r3, [r7, #23]
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d039      	beq.n	800b952 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	330b      	adds	r3, #11
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	701a      	strb	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8f4:	e013      	b.n	800b91e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800b8f6:	f107 010c 	add.w	r1, r7, #12
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	69fa      	ldr	r2, [r7, #28]
 800b8fe:	6a38      	ldr	r0, [r7, #32]
 800b900:	f7ff fe4c 	bl	800b59c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff fefa 	bl	800b6fe <dir_find>
 800b90a:	4603      	mov	r3, r0
 800b90c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b914:	2b00      	cmp	r3, #0
 800b916:	d106      	bne.n	800b926 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	3301      	adds	r3, #1
 800b91c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b920:	2b63      	cmp	r3, #99	; 0x63
 800b922:	d9e8      	bls.n	800b8f6 <dir_register+0x4e>
 800b924:	e000      	b.n	800b928 <dir_register+0x80>
			if (res != FR_OK) break;
 800b926:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	2b64      	cmp	r3, #100	; 0x64
 800b92c:	d101      	bne.n	800b932 <dir_register+0x8a>
 800b92e:	2307      	movs	r3, #7
 800b930:	e0e3      	b.n	800bafa <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b936:	2b04      	cmp	r3, #4
 800b938:	d002      	beq.n	800b940 <dir_register+0x98>
 800b93a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b93e:	e0dc      	b.n	800bafa <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	330b      	adds	r3, #11
 800b944:	7dfa      	ldrb	r2, [r7, #23]
 800b946:	701a      	strb	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b94e:	69fa      	ldr	r2, [r7, #28]
 800b950:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800b952:	7dfb      	ldrb	r3, [r7, #23]
 800b954:	f003 0302 	and.w	r3, r3, #2
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d014      	beq.n	800b986 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800b95c:	2300      	movs	r3, #0
 800b95e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b960:	e002      	b.n	800b968 <dir_register+0xc0>
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	3301      	adds	r3, #1
 800b966:	62bb      	str	r3, [r7, #40]	; 0x28
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	4413      	add	r3, r2
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1f5      	bne.n	800b962 <dir_register+0xba>
		nent = (n + 25) / 13;
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	3319      	adds	r3, #25
 800b97a:	4a62      	ldr	r2, [pc, #392]	; (800bb04 <dir_register+0x25c>)
 800b97c:	fba2 2303 	umull	r2, r3, r2, r3
 800b980:	089b      	lsrs	r3, r3, #2
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
 800b984:	e001      	b.n	800b98a <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800b986:	2301      	movs	r3, #1
 800b988:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b98a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff fc79 	bl	800b284 <dir_alloc>
 800b992:	4603      	mov	r3, r0
 800b994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d160      	bne.n	800ba62 <dir_register+0x1ba>
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d05a      	beq.n	800ba62 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b2:	3306      	adds	r3, #6
 800b9b4:	881b      	ldrh	r3, [r3, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	4619      	mov	r1, r3
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7ff fa23 	bl	800ae0a <dir_sdi>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b9ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d147      	bne.n	800ba62 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d8:	3318      	adds	r3, #24
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fe6d 	bl	800b6bc <sum_sfn>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f4:	3310      	adds	r3, #16
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	f7fe fd18 	bl	800a430 <move_window>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ba06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d128      	bne.n	800ba60 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba1c:	3314      	adds	r3, #20
 800ba1e:	6819      	ldr	r1, [r3, #0]
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	7efb      	ldrb	r3, [r7, #27]
 800ba26:	f7ff fd43 	bl	800b4b0 <fit_lfn>
				dp->fs->wflag = 1;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba36:	3304      	adds	r3, #4
 800ba38:	2201      	movs	r2, #1
 800ba3a:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7ff fabe 	bl	800afc0 <dir_next>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ba4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d107      	bne.n	800ba62 <dir_register+0x1ba>
 800ba52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba54:	3b01      	subs	r3, #1
 800ba56:	627b      	str	r3, [r7, #36]	; 0x24
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1c3      	bne.n	800b9e6 <dir_register+0x13e>
 800ba5e:	e000      	b.n	800ba62 <dir_register+0x1ba>
				if (res != FR_OK) break;
 800ba60:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ba62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d145      	bne.n	800baf6 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba78:	3310      	adds	r3, #16
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7fe fcd6 	bl	800a430 <move_window>
 800ba84:	4603      	mov	r3, r0
 800ba86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ba8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d131      	bne.n	800baf6 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba98:	3314      	adds	r3, #20
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	2100      	movs	r1, #0
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe fa48 	bl	8009f36 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baac:	3314      	adds	r3, #20
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab6:	3318      	adds	r3, #24
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	220b      	movs	r2, #11
 800babc:	4619      	mov	r1, r3
 800babe:	f7fe fa1b 	bl	8009ef8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bac8:	3318      	adds	r3, #24
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	330b      	adds	r3, #11
 800bace:	781a      	ldrb	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bad6:	3314      	adds	r3, #20
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	330c      	adds	r3, #12
 800badc:	f002 0218 	and.w	r2, r2, #24
 800bae0:	b2d2      	uxtb	r2, r2
 800bae2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf0:	3304      	adds	r3, #4
 800baf2:	2201      	movs	r2, #1
 800baf4:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800baf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3730      	adds	r7, #48	; 0x30
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	4ec4ec4f 	.word	0x4ec4ec4f

0800bb08 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08a      	sub	sp, #40	; 0x28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	613b      	str	r3, [r7, #16]
 800bb18:	e002      	b.n	800bb20 <create_name+0x18>
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	613b      	str	r3, [r7, #16]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b2f      	cmp	r3, #47	; 0x2f
 800bb26:	d0f8      	beq.n	800bb1a <create_name+0x12>
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	2b5c      	cmp	r3, #92	; 0x5c
 800bb2e:	d0f4      	beq.n	800bb1a <create_name+0x12>
	lfn = dp->lfn;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	617b      	str	r3, [r7, #20]
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	61ba      	str	r2, [r7, #24]
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800bb50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb52:	2b1f      	cmp	r3, #31
 800bb54:	d92f      	bls.n	800bbb6 <create_name+0xae>
 800bb56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb58:	2b2f      	cmp	r3, #47	; 0x2f
 800bb5a:	d02c      	beq.n	800bbb6 <create_name+0xae>
 800bb5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb5e:	2b5c      	cmp	r3, #92	; 0x5c
 800bb60:	d029      	beq.n	800bbb6 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2bfe      	cmp	r3, #254	; 0xfe
 800bb66:	d901      	bls.n	800bb6c <create_name+0x64>
			return FR_INVALID_NAME;
 800bb68:	2306      	movs	r3, #6
 800bb6a:	e18b      	b.n	800be84 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bb6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bb72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb74:	2101      	movs	r1, #1
 800bb76:	4618      	mov	r0, r3
 800bb78:	f002 fc8a 	bl	800e490 <ff_convert>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bb80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <create_name+0x82>
 800bb86:	2306      	movs	r3, #6
 800bb88:	e17c      	b.n	800be84 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800bb8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb8c:	2b7f      	cmp	r3, #127	; 0x7f
 800bb8e:	d809      	bhi.n	800bba4 <create_name+0x9c>
 800bb90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb92:	4619      	mov	r1, r3
 800bb94:	488f      	ldr	r0, [pc, #572]	; (800bdd4 <create_name+0x2cc>)
 800bb96:	f7fe fa10 	bl	8009fba <chk_chr>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <create_name+0x9c>
			return FR_INVALID_NAME;
 800bba0:	2306      	movs	r3, #6
 800bba2:	e16f      	b.n	800be84 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	617a      	str	r2, [r7, #20]
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	4413      	add	r3, r2
 800bbb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbb2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bbb4:	e7c5      	b.n	800bb42 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	441a      	add	r2, r3
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800bbc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbc2:	2b1f      	cmp	r3, #31
 800bbc4:	d801      	bhi.n	800bbca <create_name+0xc2>
 800bbc6:	2304      	movs	r3, #4
 800bbc8:	e000      	b.n	800bbcc <create_name+0xc4>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800bbd0:	e011      	b.n	800bbf6 <create_name+0xee>
		w = lfn[di - 1];
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	4413      	add	r3, r2
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bbe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbe6:	2b20      	cmp	r3, #32
 800bbe8:	d002      	beq.n	800bbf0 <create_name+0xe8>
 800bbea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbec:	2b2e      	cmp	r3, #46	; 0x2e
 800bbee:	d106      	bne.n	800bbfe <create_name+0xf6>
		di--;
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1ea      	bne.n	800bbd2 <create_name+0xca>
 800bbfc:	e000      	b.n	800bc00 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800bbfe:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <create_name+0x102>
 800bc06:	2306      	movs	r3, #6
 800bc08:	e13c      	b.n	800be84 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	4413      	add	r3, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1c:	3318      	adds	r3, #24
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	220b      	movs	r2, #11
 800bc22:	2120      	movs	r1, #32
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fe f986 	bl	8009f36 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	61bb      	str	r3, [r7, #24]
 800bc2e:	e002      	b.n	800bc36 <create_name+0x12e>
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	3301      	adds	r3, #1
 800bc34:	61bb      	str	r3, [r7, #24]
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	005b      	lsls	r3, r3, #1
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	2b20      	cmp	r3, #32
 800bc42:	d0f5      	beq.n	800bc30 <create_name+0x128>
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc50:	d0ee      	beq.n	800bc30 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d009      	beq.n	800bc6c <create_name+0x164>
 800bc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc5c:	f043 0303 	orr.w	r3, r3, #3
 800bc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bc64:	e002      	b.n	800bc6c <create_name+0x164>
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d009      	beq.n	800bc86 <create_name+0x17e>
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	4413      	add	r3, r2
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	2b2e      	cmp	r3, #46	; 0x2e
 800bc84:	d1ef      	bne.n	800bc66 <create_name+0x15e>

	b = i = 0; ni = 8;
 800bc86:	2300      	movs	r3, #0
 800bc88:	623b      	str	r3, [r7, #32]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bc90:	2308      	movs	r3, #8
 800bc92:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	1c5a      	adds	r2, r3, #1
 800bc98:	61ba      	str	r2, [r7, #24]
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 8092 	beq.w	800bdd0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bcac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcae:	2b20      	cmp	r3, #32
 800bcb0:	d006      	beq.n	800bcc0 <create_name+0x1b8>
 800bcb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcb4:	2b2e      	cmp	r3, #46	; 0x2e
 800bcb6:	d10a      	bne.n	800bcce <create_name+0x1c6>
 800bcb8:	69ba      	ldr	r2, [r7, #24]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d006      	beq.n	800bcce <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800bcc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc4:	f043 0303 	orr.w	r3, r3, #3
 800bcc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bccc:	e07f      	b.n	800bdce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bcce:	6a3a      	ldr	r2, [r7, #32]
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d203      	bcs.n	800bcde <create_name+0x1d6>
 800bcd6:	69ba      	ldr	r2, [r7, #24]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d123      	bne.n	800bd26 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	2b0b      	cmp	r3, #11
 800bce2:	d106      	bne.n	800bcf2 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800bce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce8:	f043 0303 	orr.w	r3, r3, #3
 800bcec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bcf0:	e077      	b.n	800bde2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bcf2:	69ba      	ldr	r2, [r7, #24]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d005      	beq.n	800bd06 <create_name+0x1fe>
 800bcfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcfe:	f043 0303 	orr.w	r3, r3, #3
 800bd02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bd06:	69ba      	ldr	r2, [r7, #24]
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d868      	bhi.n	800bde0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	61bb      	str	r3, [r7, #24]
 800bd12:	2308      	movs	r3, #8
 800bd14:	623b      	str	r3, [r7, #32]
 800bd16:	230b      	movs	r3, #11
 800bd18:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bd1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd24:	e053      	b.n	800bdce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bd26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd28:	2b7f      	cmp	r3, #127	; 0x7f
 800bd2a:	d914      	bls.n	800bd56 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bd2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4618      	mov	r0, r3
 800bd32:	f002 fbad 	bl	800e490 <ff_convert>
 800bd36:	4603      	mov	r3, r0
 800bd38:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bd3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d004      	beq.n	800bd4a <create_name+0x242>
 800bd40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd42:	3b80      	subs	r3, #128	; 0x80
 800bd44:	4a24      	ldr	r2, [pc, #144]	; (800bdd8 <create_name+0x2d0>)
 800bd46:	5cd3      	ldrb	r3, [r2, r3]
 800bd48:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bd4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd4e:	f043 0302 	orr.w	r3, r3, #2
 800bd52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bd56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d007      	beq.n	800bd6c <create_name+0x264>
 800bd5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd5e:	4619      	mov	r1, r3
 800bd60:	481e      	ldr	r0, [pc, #120]	; (800bddc <create_name+0x2d4>)
 800bd62:	f7fe f92a 	bl	8009fba <chk_chr>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d008      	beq.n	800bd7e <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bd6c:	235f      	movs	r3, #95	; 0x5f
 800bd6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bd70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd74:	f043 0303 	orr.w	r3, r3, #3
 800bd78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd7c:	e01b      	b.n	800bdb6 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bd7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd80:	2b40      	cmp	r3, #64	; 0x40
 800bd82:	d909      	bls.n	800bd98 <create_name+0x290>
 800bd84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd86:	2b5a      	cmp	r3, #90	; 0x5a
 800bd88:	d806      	bhi.n	800bd98 <create_name+0x290>
					b |= 2;
 800bd8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd8e:	f043 0302 	orr.w	r3, r3, #2
 800bd92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd96:	e00e      	b.n	800bdb6 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bd98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd9a:	2b60      	cmp	r3, #96	; 0x60
 800bd9c:	d90b      	bls.n	800bdb6 <create_name+0x2ae>
 800bd9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bda0:	2b7a      	cmp	r3, #122	; 0x7a
 800bda2:	d808      	bhi.n	800bdb6 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800bda4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bda8:	f043 0301 	orr.w	r3, r3, #1
 800bdac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bdb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdb2:	3b20      	subs	r3, #32
 800bdb4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdbc:	3318      	adds	r3, #24
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	1c59      	adds	r1, r3, #1
 800bdc4:	6239      	str	r1, [r7, #32]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdca:	b2d2      	uxtb	r2, r2
 800bdcc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800bdce:	e761      	b.n	800bc94 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800bdd0:	bf00      	nop
 800bdd2:	e006      	b.n	800bde2 <create_name+0x2da>
 800bdd4:	08011dc8 	.word	0x08011dc8
 800bdd8:	08012248 	.word	0x08012248
 800bddc:	08011dd4 	.word	0x08011dd4
			if (si > di) break;			/* No extension */
 800bde0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde8:	3318      	adds	r3, #24
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2be5      	cmp	r3, #229	; 0xe5
 800bdf0:	d106      	bne.n	800be00 <create_name+0x2f8>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf8:	3318      	adds	r3, #24
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2205      	movs	r2, #5
 800bdfe:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	2b08      	cmp	r3, #8
 800be04:	d104      	bne.n	800be10 <create_name+0x308>
 800be06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800be10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be14:	f003 030c 	and.w	r3, r3, #12
 800be18:	2b0c      	cmp	r3, #12
 800be1a:	d005      	beq.n	800be28 <create_name+0x320>
 800be1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	2b03      	cmp	r3, #3
 800be26:	d105      	bne.n	800be34 <create_name+0x32c>
		cf |= NS_LFN;
 800be28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be2c:	f043 0302 	orr.w	r3, r3, #2
 800be30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800be34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be38:	f003 0302 	and.w	r3, r3, #2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d117      	bne.n	800be70 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800be40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be44:	f003 0303 	and.w	r3, r3, #3
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d105      	bne.n	800be58 <create_name+0x350>
 800be4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be50:	f043 0310 	orr.w	r3, r3, #16
 800be54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800be58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be5c:	f003 030c 	and.w	r3, r3, #12
 800be60:	2b04      	cmp	r3, #4
 800be62:	d105      	bne.n	800be70 <create_name+0x368>
 800be64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be68:	f043 0308 	orr.w	r3, r3, #8
 800be6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be76:	3318      	adds	r3, #24
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	330b      	adds	r3, #11
 800be7c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be80:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be82:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800be84:	4618      	mov	r0, r3
 800be86:	3728      	adds	r7, #40	; 0x28
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	2b2f      	cmp	r3, #47	; 0x2f
 800be9c:	d003      	beq.n	800bea6 <follow_path+0x1a>
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2b5c      	cmp	r3, #92	; 0x5c
 800bea4:	d102      	bne.n	800beac <follow_path+0x20>
		path++;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	3301      	adds	r3, #1
 800beaa:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb2:	3308      	adds	r3, #8
 800beb4:	2200      	movs	r2, #0
 800beb6:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	2b1f      	cmp	r3, #31
 800bebe:	d80c      	bhi.n	800beda <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800bec0:	2100      	movs	r1, #0
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7fe ffa1 	bl	800ae0a <dir_sdi>
 800bec8:	4603      	mov	r3, r0
 800beca:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bed2:	3314      	adds	r3, #20
 800bed4:	2200      	movs	r2, #0
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	e04c      	b.n	800bf74 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800beda:	463b      	mov	r3, r7
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff fe12 	bl	800bb08 <create_name>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d13d      	bne.n	800bf6a <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff fc05 	bl	800b6fe <dir_find>
 800bef4:	4603      	mov	r3, r0
 800bef6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800befe:	3318      	adds	r3, #24
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	7adb      	ldrb	r3, [r3, #11]
 800bf04:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf0c:	7bfb      	ldrb	r3, [r7, #15]
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d12d      	bne.n	800bf6e <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf12:	7bbb      	ldrb	r3, [r7, #14]
 800bf14:	f003 0304 	and.w	r3, r3, #4
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d128      	bne.n	800bf6e <follow_path+0xe2>
 800bf1c:	2305      	movs	r3, #5
 800bf1e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800bf20:	e025      	b.n	800bf6e <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf22:	7bbb      	ldrb	r3, [r7, #14]
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d122      	bne.n	800bf72 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf32:	3314      	adds	r3, #20
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	330b      	adds	r3, #11
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	f003 0310 	and.w	r3, r3, #16
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d102      	bne.n	800bf4c <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800bf46:	2305      	movs	r3, #5
 800bf48:	73fb      	strb	r3, [r7, #15]
 800bf4a:	e013      	b.n	800bf74 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68b9      	ldr	r1, [r7, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff f9e5 	bl	800b326 <ld_clust>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf64:	3308      	adds	r3, #8
 800bf66:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf68:	e7b7      	b.n	800beda <follow_path+0x4e>
			if (res != FR_OK) break;
 800bf6a:	bf00      	nop
 800bf6c:	e002      	b.n	800bf74 <follow_path+0xe8>
				break;
 800bf6e:	bf00      	nop
 800bf70:	e000      	b.n	800bf74 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf72:	bf00      	nop
		}
	}

	return res;
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b087      	sub	sp, #28
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf86:	f04f 33ff 	mov.w	r3, #4294967295
 800bf8a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d031      	beq.n	800bff8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	e002      	b.n	800bfa2 <get_ldnumber+0x24>
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	617b      	str	r3, [r7, #20]
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	2b1f      	cmp	r3, #31
 800bfa8:	d903      	bls.n	800bfb2 <get_ldnumber+0x34>
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b3a      	cmp	r3, #58	; 0x3a
 800bfb0:	d1f4      	bne.n	800bf9c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b3a      	cmp	r3, #58	; 0x3a
 800bfb8:	d11c      	bne.n	800bff4 <get_ldnumber+0x76>
			tp = *path;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	60fa      	str	r2, [r7, #12]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	3b30      	subs	r3, #48	; 0x30
 800bfca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	d80e      	bhi.n	800bff0 <get_ldnumber+0x72>
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d10a      	bne.n	800bff0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d107      	bne.n	800bff0 <get_ldnumber+0x72>
					vol = (int)i;
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	617b      	str	r3, [r7, #20]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	e002      	b.n	800bffa <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bff4:	2300      	movs	r3, #0
 800bff6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bff8:	693b      	ldr	r3, [r7, #16]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	371c      	adds	r7, #28
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
	...

0800c008 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c018:	3304      	adds	r3, #4
 800c01a:	2200      	movs	r2, #0
 800c01c:	701a      	strb	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c024:	330c      	adds	r3, #12
 800c026:	f04f 32ff 	mov.w	r2, #4294967295
 800c02a:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7fe f9fe 	bl	800a430 <move_window>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <check_fs+0x36>
		return 3;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e04a      	b.n	800c0d4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c044:	3301      	adds	r3, #1
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	021b      	lsls	r3, r3, #8
 800c04a:	b21a      	sxth	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c052:	b21b      	sxth	r3, r3
 800c054:	4313      	orrs	r3, r2
 800c056:	b21b      	sxth	r3, r3
 800c058:	4a20      	ldr	r2, [pc, #128]	; (800c0dc <check_fs+0xd4>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d001      	beq.n	800c062 <check_fs+0x5a>
		return 2;
 800c05e:	2302      	movs	r3, #2
 800c060:	e038      	b.n	800c0d4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3336      	adds	r3, #54	; 0x36
 800c066:	3303      	adds	r3, #3
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	061a      	lsls	r2, r3, #24
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3336      	adds	r3, #54	; 0x36
 800c070:	3302      	adds	r3, #2
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	041b      	lsls	r3, r3, #16
 800c076:	4313      	orrs	r3, r2
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	3236      	adds	r2, #54	; 0x36
 800c07c:	3201      	adds	r2, #1
 800c07e:	7812      	ldrb	r2, [r2, #0]
 800c080:	0212      	lsls	r2, r2, #8
 800c082:	4313      	orrs	r3, r2
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c08a:	4313      	orrs	r3, r2
 800c08c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c090:	4a13      	ldr	r2, [pc, #76]	; (800c0e0 <check_fs+0xd8>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d101      	bne.n	800c09a <check_fs+0x92>
		return 0;
 800c096:	2300      	movs	r3, #0
 800c098:	e01c      	b.n	800c0d4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3352      	adds	r3, #82	; 0x52
 800c09e:	3303      	adds	r3, #3
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	061a      	lsls	r2, r3, #24
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3352      	adds	r3, #82	; 0x52
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	041b      	lsls	r3, r3, #16
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	3252      	adds	r2, #82	; 0x52
 800c0b4:	3201      	adds	r2, #1
 800c0b6:	7812      	ldrb	r2, [r2, #0]
 800c0b8:	0212      	lsls	r2, r2, #8
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c0c8:	4a05      	ldr	r2, [pc, #20]	; (800c0e0 <check_fs+0xd8>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d101      	bne.n	800c0d2 <check_fs+0xca>
		return 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	e000      	b.n	800c0d4 <check_fs+0xcc>

	return 1;
 800c0d2:	2301      	movs	r3, #1
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	ffffaa55 	.word	0xffffaa55
 800c0e0:	00544146 	.word	0x00544146

0800c0e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b096      	sub	sp, #88	; 0x58
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0f8:	68b8      	ldr	r0, [r7, #8]
 800c0fa:	f7ff ff40 	bl	800bf7e <get_ldnumber>
 800c0fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	2b00      	cmp	r3, #0
 800c104:	da01      	bge.n	800c10a <find_volume+0x26>
 800c106:	230b      	movs	r3, #11
 800c108:	e33c      	b.n	800c784 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c10a:	4ab3      	ldr	r2, [pc, #716]	; (800c3d8 <find_volume+0x2f4>)
 800c10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c112:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <find_volume+0x3a>
 800c11a:	230c      	movs	r3, #12
 800c11c:	e332      	b.n	800c784 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c122:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01d      	beq.n	800c16c <find_volume+0x88>
		stat = disk_status(fs->drv);
 800c130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c136:	3301      	adds	r3, #1
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fd fe3e 	bl	8009dbc <disk_status>
 800c140:	4603      	mov	r3, r0
 800c142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c14a:	f003 0301 	and.w	r3, r3, #1
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10c      	bne.n	800c16c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d007      	beq.n	800c168 <find_volume+0x84>
 800c158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c15c:	f003 0304 	and.w	r3, r3, #4
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c164:	230a      	movs	r3, #10
 800c166:	e30d      	b.n	800c784 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800c168:	2300      	movs	r3, #0
 800c16a:	e30b      	b.n	800c784 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c172:	2200      	movs	r2, #0
 800c174:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c180:	3301      	adds	r3, #1
 800c182:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c18a:	3301      	adds	r3, #1
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fd fe2e 	bl	8009df0 <disk_initialize>
 800c194:	4603      	mov	r3, r0
 800c196:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c19a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e2ec      	b.n	800c784 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d007      	beq.n	800c1c0 <find_volume+0xdc>
 800c1b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1b4:	f003 0304 	and.w	r3, r3, #4
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800c1bc:	230a      	movs	r3, #10
 800c1be:	e2e1      	b.n	800c784 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	7818      	ldrb	r0, [r3, #0]
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d0:	330a      	adds	r3, #10
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	2102      	movs	r1, #2
 800c1d6:	f7fd fe71 	bl	8009ebc <disk_ioctl>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10f      	bne.n	800c200 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1e6:	330a      	adds	r3, #10
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ee:	d307      	bcc.n	800c200 <find_volume+0x11c>
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1f6:	330a      	adds	r3, #10
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1fe:	d901      	bls.n	800c204 <find_volume+0x120>
 800c200:	2301      	movs	r3, #1
 800c202:	e2bf      	b.n	800c784 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c204:	2300      	movs	r3, #0
 800c206:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c208:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c20a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c20c:	f7ff fefc 	bl	800c008 <check_fs>
 800c210:	4603      	mov	r3, r0
 800c212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c216:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d155      	bne.n	800c2ca <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c21e:	2300      	movs	r3, #0
 800c220:	643b      	str	r3, [r7, #64]	; 0x40
 800c222:	e029      	b.n	800c278 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c228:	011b      	lsls	r3, r3, #4
 800c22a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c22e:	4413      	add	r3, r2
 800c230:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	3304      	adds	r3, #4
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d012      	beq.n	800c262 <find_volume+0x17e>
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	330b      	adds	r3, #11
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	061a      	lsls	r2, r3, #24
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	330a      	adds	r3, #10
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	041b      	lsls	r3, r3, #16
 800c24c:	4313      	orrs	r3, r2
 800c24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c250:	3209      	adds	r2, #9
 800c252:	7812      	ldrb	r2, [r2, #0]
 800c254:	0212      	lsls	r2, r2, #8
 800c256:	4313      	orrs	r3, r2
 800c258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c25a:	3208      	adds	r2, #8
 800c25c:	7812      	ldrb	r2, [r2, #0]
 800c25e:	431a      	orrs	r2, r3
 800c260:	e000      	b.n	800c264 <find_volume+0x180>
 800c262:	2200      	movs	r2, #0
 800c264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c26c:	440b      	add	r3, r1
 800c26e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c274:	3301      	adds	r3, #1
 800c276:	643b      	str	r3, [r7, #64]	; 0x40
 800c278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d9d2      	bls.n	800c224 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c27e:	2300      	movs	r3, #0
 800c280:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <find_volume+0x1aa>
 800c288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c28a:	3b01      	subs	r3, #1
 800c28c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c296:	4413      	add	r3, r2
 800c298:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c29c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d005      	beq.n	800c2b0 <find_volume+0x1cc>
 800c2a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2a8:	f7ff feae 	bl	800c008 <check_fs>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	e000      	b.n	800c2b2 <find_volume+0x1ce>
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c2b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d005      	beq.n	800c2ca <find_volume+0x1e6>
 800c2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d9e1      	bls.n	800c28e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c2ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d101      	bne.n	800c2d6 <find_volume+0x1f2>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e256      	b.n	800c784 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c2d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <find_volume+0x1fe>
 800c2de:	230d      	movs	r3, #13
 800c2e0:	e250      	b.n	800c784 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e4:	7b1b      	ldrb	r3, [r3, #12]
 800c2e6:	021b      	lsls	r3, r3, #8
 800c2e8:	b21a      	sxth	r2, r3
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	7adb      	ldrb	r3, [r3, #11]
 800c2ee:	b21b      	sxth	r3, r3
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	b21a      	sxth	r2, r3
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2fa:	330a      	adds	r3, #10
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	b21b      	sxth	r3, r3
 800c300:	429a      	cmp	r2, r3
 800c302:	d001      	beq.n	800c308 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800c304:	230d      	movs	r3, #13
 800c306:	e23d      	b.n	800c784 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	7ddb      	ldrb	r3, [r3, #23]
 800c30c:	021b      	lsls	r3, r3, #8
 800c30e:	b21a      	sxth	r2, r3
 800c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c312:	7d9b      	ldrb	r3, [r3, #22]
 800c314:	b21b      	sxth	r3, r3
 800c316:	4313      	orrs	r3, r2
 800c318:	b21b      	sxth	r3, r3
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c320:	2b00      	cmp	r3, #0
 800c322:	d112      	bne.n	800c34a <find_volume+0x266>
 800c324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c326:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c32a:	061a      	lsls	r2, r3, #24
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c332:	041b      	lsls	r3, r3, #16
 800c334:	4313      	orrs	r3, r2
 800c336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c338:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c33c:	0212      	lsls	r2, r2, #8
 800c33e:	4313      	orrs	r3, r2
 800c340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c342:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c346:	4313      	orrs	r3, r2
 800c348:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c350:	3318      	adds	r3, #24
 800c352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c354:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	7c1a      	ldrb	r2, [r3, #16]
 800c35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c360:	3303      	adds	r3, #3
 800c362:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c36a:	3303      	adds	r3, #3
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d008      	beq.n	800c384 <find_volume+0x2a0>
 800c372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c378:	3303      	adds	r3, #3
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d001      	beq.n	800c384 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800c380:	230d      	movs	r3, #13
 800c382:	e1ff      	b.n	800c784 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c38a:	3303      	adds	r3, #3
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c392:	fb02 f303 	mul.w	r3, r2, r3
 800c396:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	7b5a      	ldrb	r2, [r3, #13]
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3a2:	3302      	adds	r3, #2
 800c3a4:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ac:	3302      	adds	r3, #2
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00e      	beq.n	800c3d2 <find_volume+0x2ee>
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ba:	3302      	adds	r3, #2
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3c6:	3302      	adds	r3, #2
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d004      	beq.n	800c3dc <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800c3d2:	230d      	movs	r3, #13
 800c3d4:	e1d6      	b.n	800c784 <find_volume+0x6a0>
 800c3d6:	bf00      	nop
 800c3d8:	20000238 	.word	0x20000238

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	7c9b      	ldrb	r3, [r3, #18]
 800c3e0:	021b      	lsls	r3, r3, #8
 800c3e2:	b21a      	sxth	r2, r3
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	7c5b      	ldrb	r3, [r3, #17]
 800c3e8:	b21b      	sxth	r3, r3
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	b21b      	sxth	r3, r3
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c400:	3308      	adds	r3, #8
 800c402:	881a      	ldrh	r2, [r3, #0]
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c40a:	330a      	adds	r3, #10
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	095b      	lsrs	r3, r3, #5
 800c410:	b29b      	uxth	r3, r3
 800c412:	fbb2 f1f3 	udiv	r1, r2, r3
 800c416:	fb03 f301 	mul.w	r3, r3, r1
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800c422:	230d      	movs	r3, #13
 800c424:	e1ae      	b.n	800c784 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	7d1b      	ldrb	r3, [r3, #20]
 800c42a:	021b      	lsls	r3, r3, #8
 800c42c:	b21a      	sxth	r2, r3
 800c42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c430:	7cdb      	ldrb	r3, [r3, #19]
 800c432:	b21b      	sxth	r3, r3
 800c434:	4313      	orrs	r3, r2
 800c436:	b21b      	sxth	r3, r3
 800c438:	b29b      	uxth	r3, r3
 800c43a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d112      	bne.n	800c468 <find_volume+0x384>
 800c442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c444:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c448:	061a      	lsls	r2, r3, #24
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c450:	041b      	lsls	r3, r3, #16
 800c452:	4313      	orrs	r3, r2
 800c454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c456:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c45a:	0212      	lsls	r2, r2, #8
 800c45c:	4313      	orrs	r3, r2
 800c45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c460:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c464:	4313      	orrs	r3, r2
 800c466:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	7bdb      	ldrb	r3, [r3, #15]
 800c46c:	021b      	lsls	r3, r3, #8
 800c46e:	b21a      	sxth	r2, r3
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	7b9b      	ldrb	r3, [r3, #14]
 800c474:	b21b      	sxth	r3, r3
 800c476:	4313      	orrs	r3, r2
 800c478:	b21b      	sxth	r3, r3
 800c47a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c47c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <find_volume+0x3a2>
 800c482:	230d      	movs	r3, #13
 800c484:	e17e      	b.n	800c784 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c486:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c48a:	441a      	add	r2, r3
 800c48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c492:	3308      	adds	r3, #8
 800c494:	8819      	ldrh	r1, [r3, #0]
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c49c:	330a      	adds	r3, #10
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	095b      	lsrs	r3, r3, #5
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	fbb1 f3f3 	udiv	r3, r1, r3
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	4413      	add	r3, r2
 800c4ac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c4ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d201      	bcs.n	800c4ba <find_volume+0x3d6>
 800c4b6:	230d      	movs	r3, #13
 800c4b8:	e164      	b.n	800c784 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c4ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	1ad2      	subs	r2, r2, r3
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4c6:	3302      	adds	r3, #2
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ce:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <find_volume+0x3f6>
 800c4d6:	230d      	movs	r3, #13
 800c4d8:	e154      	b.n	800c784 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d902      	bls.n	800c4f0 <find_volume+0x40c>
 800c4ea:	2302      	movs	r3, #2
 800c4ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d902      	bls.n	800c500 <find_volume+0x41c>
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	1c9a      	adds	r2, r3, #2
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c50a:	3314      	adds	r3, #20
 800c50c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800c50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c514:	331c      	adds	r3, #28
 800c516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c518:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c51a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c51e:	441a      	add	r2, r3
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c526:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800c528:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52c:	441a      	add	r2, r3
 800c52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c530:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c534:	3308      	adds	r3, #8
 800c536:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800c538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d127      	bne.n	800c590 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c546:	3308      	adds	r3, #8
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <find_volume+0x46e>
 800c54e:	230d      	movs	r3, #13
 800c550:	e118      	b.n	800c784 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c558:	061a      	lsls	r2, r3, #24
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c560:	041b      	lsls	r3, r3, #16
 800c562:	4313      	orrs	r3, r2
 800c564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c566:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c56a:	0212      	lsls	r2, r2, #8
 800c56c:	4313      	orrs	r3, r2
 800c56e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c570:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c574:	431a      	orrs	r2, r3
 800c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c578:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c57c:	3304      	adds	r3, #4
 800c57e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c586:	3314      	adds	r3, #20
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	647b      	str	r3, [r7, #68]	; 0x44
 800c58e:	e030      	b.n	800c5f2 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c596:	3308      	adds	r3, #8
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <find_volume+0x4be>
 800c59e:	230d      	movs	r3, #13
 800c5a0:	e0f0      	b.n	800c784 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ac:	441a      	add	r2, r3
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c5b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	d106      	bne.n	800c5ce <find_volume+0x4ea>
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5c6:	3314      	adds	r3, #20
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	e010      	b.n	800c5f0 <find_volume+0x50c>
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5d4:	3314      	adds	r3, #20
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	4413      	add	r3, r2
 800c5de:	085a      	lsrs	r2, r3, #1
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5e6:	3314      	adds	r3, #20
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800c5f0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f8:	3318      	adds	r3, #24
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c602:	330a      	adds	r3, #10
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	4619      	mov	r1, r3
 800c608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c60a:	440b      	add	r3, r1
 800c60c:	1e59      	subs	r1, r3, #1
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c614:	330a      	adds	r3, #10
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	fbb1 f3f3 	udiv	r3, r1, r3
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d201      	bcs.n	800c624 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800c620:	230d      	movs	r3, #13
 800c622:	e0af      	b.n	800c784 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c62a:	3310      	adds	r3, #16
 800c62c:	f04f 32ff 	mov.w	r2, #4294967295
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c638:	3310      	adds	r3, #16
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c642:	330c      	adds	r3, #12
 800c644:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c64c:	3305      	adds	r3, #5
 800c64e:	2280      	movs	r2, #128	; 0x80
 800c650:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800c652:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c656:	2b03      	cmp	r3, #3
 800c658:	d17d      	bne.n	800c756 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	b21a      	sxth	r2, r3
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c66a:	b21b      	sxth	r3, r3
 800c66c:	4313      	orrs	r3, r2
 800c66e:	b21b      	sxth	r3, r3
 800c670:	2b01      	cmp	r3, #1
 800c672:	d170      	bne.n	800c756 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800c674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c676:	3301      	adds	r3, #1
 800c678:	4619      	mov	r1, r3
 800c67a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c67c:	f7fd fed8 	bl	800a430 <move_window>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d167      	bne.n	800c756 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c68c:	3305      	adds	r3, #5
 800c68e:	2200      	movs	r2, #0
 800c690:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800c698:	021b      	lsls	r3, r3, #8
 800c69a:	b21a      	sxth	r2, r3
 800c69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c6a2:	b21b      	sxth	r3, r3
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	b21b      	sxth	r3, r3
 800c6a8:	4a38      	ldr	r2, [pc, #224]	; (800c78c <find_volume+0x6a8>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d153      	bne.n	800c756 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800c6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b0:	78db      	ldrb	r3, [r3, #3]
 800c6b2:	061a      	lsls	r2, r3, #24
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	789b      	ldrb	r3, [r3, #2]
 800c6b8:	041b      	lsls	r3, r3, #16
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6be:	7852      	ldrb	r2, [r2, #1]
 800c6c0:	0212      	lsls	r2, r2, #8
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6c6:	7812      	ldrb	r2, [r2, #0]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	4a31      	ldr	r2, [pc, #196]	; (800c790 <find_volume+0x6ac>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d142      	bne.n	800c756 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800c6d6:	061a      	lsls	r2, r3, #24
 800c6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6da:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800c6de:	041b      	lsls	r3, r3, #16
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6e4:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800c6e8:	0212      	lsls	r2, r2, #8
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ee:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	4a27      	ldr	r2, [pc, #156]	; (800c794 <find_volume+0x6b0>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d12d      	bne.n	800c756 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fc:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800c700:	061a      	lsls	r2, r3, #24
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800c708:	041b      	lsls	r3, r3, #16
 800c70a:	4313      	orrs	r3, r2
 800c70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c70e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800c712:	0212      	lsls	r2, r2, #8
 800c714:	4313      	orrs	r3, r2
 800c716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c718:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800c71c:	431a      	orrs	r2, r3
 800c71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c724:	3310      	adds	r3, #16
 800c726:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800c72e:	061a      	lsls	r2, r3, #24
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800c736:	041b      	lsls	r3, r3, #16
 800c738:	4313      	orrs	r3, r2
 800c73a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c73c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800c740:	0212      	lsls	r2, r2, #8
 800c742:	4313      	orrs	r3, r2
 800c744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c746:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800c74a:	431a      	orrs	r2, r3
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c752:	330c      	adds	r3, #12
 800c754:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c75c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c760:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800c762:	4b0d      	ldr	r3, [pc, #52]	; (800c798 <find_volume+0x6b4>)
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	3301      	adds	r3, #1
 800c768:	b29a      	uxth	r2, r3
 800c76a:	4b0b      	ldr	r3, [pc, #44]	; (800c798 <find_volume+0x6b4>)
 800c76c:	801a      	strh	r2, [r3, #0]
 800c76e:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <find_volume+0x6b4>)
 800c770:	881a      	ldrh	r2, [r3, #0]
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c778:	3306      	adds	r3, #6
 800c77a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c77c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c77e:	f7fd fdd3 	bl	800a328 <clear_lock>
#endif

	return FR_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3758      	adds	r7, #88	; 0x58
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	ffffaa55 	.word	0xffffaa55
 800c790:	41615252 	.word	0x41615252
 800c794:	61417272 	.word	0x61417272
 800c798:	2000023c 	.word	0x2000023c

0800c79c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d02d      	beq.n	800c80a <validate+0x6e>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d027      	beq.n	800c80a <validate+0x6e>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d01e      	beq.n	800c80a <validate+0x6e>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d8:	3306      	adds	r3, #6
 800c7da:	881a      	ldrh	r2, [r3, #0]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d10f      	bne.n	800c80a <validate+0x6e>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fd fade 	bl	8009dbc <disk_status>
 800c800:	4603      	mov	r3, r0
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <validate+0x72>
		return FR_INVALID_OBJECT;
 800c80a:	2309      	movs	r3, #9
 800c80c:	e000      	b.n	800c810 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	4613      	mov	r3, r2
 800c824:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800c82a:	f107 0310 	add.w	r3, r7, #16
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff fba5 	bl	800bf7e <get_ldnumber>
 800c834:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	da01      	bge.n	800c840 <f_mount+0x28>
 800c83c:	230b      	movs	r3, #11
 800c83e:	e02f      	b.n	800c8a0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c840:	4a19      	ldr	r2, [pc, #100]	; (800c8a8 <f_mount+0x90>)
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c848:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d007      	beq.n	800c860 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800c850:	69b8      	ldr	r0, [r7, #24]
 800c852:	f7fd fd69 	bl	800a328 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c85c:	2200      	movs	r2, #0
 800c85e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d004      	beq.n	800c870 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c86c:	2200      	movs	r2, #0
 800c86e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	490d      	ldr	r1, [pc, #52]	; (800c8a8 <f_mount+0x90>)
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <f_mount+0x6e>
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d001      	beq.n	800c88a <f_mount+0x72>
 800c886:	2300      	movs	r3, #0
 800c888:	e00a      	b.n	800c8a0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800c88a:	f107 0108 	add.w	r1, r7, #8
 800c88e:	f107 030c 	add.w	r3, r7, #12
 800c892:	2200      	movs	r2, #0
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff fc25 	bl	800c0e4 <find_volume>
 800c89a:	4603      	mov	r3, r0
 800c89c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20000238 	.word	0x20000238

0800c8ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	f107 0318 	add.w	r3, r7, #24
 800c8ba:	3b0c      	subs	r3, #12
 800c8bc:	6018      	str	r0, [r3, #0]
 800c8be:	f107 0318 	add.w	r3, r7, #24
 800c8c2:	3b10      	subs	r3, #16
 800c8c4:	6019      	str	r1, [r3, #0]
 800c8c6:	f107 0318 	add.w	r3, r7, #24
 800c8ca:	3b11      	subs	r3, #17
 800c8cc:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800c8ce:	f107 0318 	add.w	r3, r7, #24
 800c8d2:	3b0c      	subs	r3, #12
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d101      	bne.n	800c8de <f_open+0x32>
 800c8da:	2309      	movs	r3, #9
 800c8dc:	e319      	b.n	800cf12 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800c8de:	f107 0318 	add.w	r3, r7, #24
 800c8e2:	3b0c      	subs	r3, #12
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800c8ee:	f107 0318 	add.w	r3, r7, #24
 800c8f2:	3b11      	subs	r3, #17
 800c8f4:	f107 0218 	add.w	r2, r7, #24
 800c8f8:	3a11      	subs	r2, #17
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	f002 021f 	and.w	r2, r2, #31
 800c900:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800c902:	f107 0318 	add.w	r3, r7, #24
 800c906:	3b11      	subs	r3, #17
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	f023 0301 	bic.w	r3, r3, #1
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	f107 0118 	add.w	r1, r7, #24
 800c914:	3910      	subs	r1, #16
 800c916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c91a:	3b18      	subs	r3, #24
 800c91c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c920:	4618      	mov	r0, r3
 800c922:	f7ff fbdf 	bl	800c0e4 <find_volume>
 800c926:	4603      	mov	r3, r0
 800c928:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c92c:	f102 0217 	add.w	r2, r2, #23
 800c930:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800c932:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c936:	f103 0317 	add.w	r3, r3, #23
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f040 82e3 	bne.w	800cf08 <f_open+0x65c>
		INIT_BUF(dj);
 800c942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c946:	3b18      	subs	r3, #24
 800c948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c94c:	3318      	adds	r3, #24
 800c94e:	f107 0218 	add.w	r2, r7, #24
 800c952:	3a04      	subs	r2, #4
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c95a:	3b18      	subs	r3, #24
 800c95c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c960:	4ad1      	ldr	r2, [pc, #836]	; (800cca8 <f_open+0x3fc>)
 800c962:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c964:	f107 0318 	add.w	r3, r7, #24
 800c968:	3b10      	subs	r3, #16
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c970:	3b18      	subs	r3, #24
 800c972:	4611      	mov	r1, r2
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff fa89 	bl	800be8c <follow_path>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c980:	f102 0217 	add.w	r2, r2, #23
 800c984:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800c986:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c98a:	3b18      	subs	r3, #24
 800c98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c990:	3314      	adds	r3, #20
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c998:	f102 0210 	add.w	r2, r2, #16
 800c99c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c99e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c9a2:	f103 0317 	add.w	r3, r3, #23
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d126      	bne.n	800c9fa <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800c9ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c9b0:	f103 0310 	add.w	r3, r3, #16
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d106      	bne.n	800c9c8 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800c9ba:	2306      	movs	r3, #6
 800c9bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c9c0:	f102 0217 	add.w	r2, r2, #23
 800c9c4:	7013      	strb	r3, [r2, #0]
 800c9c6:	e018      	b.n	800c9fa <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c9c8:	f107 0318 	add.w	r3, r7, #24
 800c9cc:	3b11      	subs	r3, #17
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	f023 0301 	bic.w	r3, r3, #1
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	bf14      	ite	ne
 800c9d8:	2301      	movne	r3, #1
 800c9da:	2300      	moveq	r3, #0
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	461a      	mov	r2, r3
 800c9e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c9e4:	3b18      	subs	r3, #24
 800c9e6:	4611      	mov	r1, r2
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fd fb01 	bl	8009ff0 <chk_lock>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c9f4:	f102 0217 	add.w	r2, r2, #23
 800c9f8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c9fa:	f107 0318 	add.w	r3, r7, #24
 800c9fe:	3b11      	subs	r3, #17
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f003 031c 	and.w	r3, r3, #28
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 8150 	beq.w	800ccac <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800ca0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca10:	f103 0317 	add.w	r3, r3, #23
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d030      	beq.n	800ca7c <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800ca1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca1e:	f103 0317 	add.w	r3, r3, #23
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b04      	cmp	r3, #4
 800ca26:	d112      	bne.n	800ca4e <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca28:	f7fd fb54 	bl	800a0d4 <enq_lock>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d007      	beq.n	800ca42 <f_open+0x196>
 800ca32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ca36:	3b18      	subs	r3, #24
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fe ff35 	bl	800b8a8 <dir_register>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	e000      	b.n	800ca44 <f_open+0x198>
 800ca42:	2312      	movs	r3, #18
 800ca44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca48:	f102 0217 	add.w	r2, r2, #23
 800ca4c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca4e:	f107 0318 	add.w	r3, r7, #24
 800ca52:	3b11      	subs	r3, #17
 800ca54:	f107 0218 	add.w	r2, r7, #24
 800ca58:	3a11      	subs	r2, #17
 800ca5a:	7812      	ldrb	r2, [r2, #0]
 800ca5c:	f042 0208 	orr.w	r2, r2, #8
 800ca60:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800ca62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ca66:	3b18      	subs	r3, #24
 800ca68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca6c:	3314      	adds	r3, #20
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca74:	f102 0210 	add.w	r2, r2, #16
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	e01f      	b.n	800cabc <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca80:	f103 0310 	add.w	r3, r3, #16
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	330b      	adds	r3, #11
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	f003 0311 	and.w	r3, r3, #17
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d006      	beq.n	800caa0 <f_open+0x1f4>
					res = FR_DENIED;
 800ca92:	2307      	movs	r3, #7
 800ca94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca98:	f102 0217 	add.w	r2, r2, #23
 800ca9c:	7013      	strb	r3, [r2, #0]
 800ca9e:	e00d      	b.n	800cabc <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800caa0:	f107 0318 	add.w	r3, r7, #24
 800caa4:	3b11      	subs	r3, #17
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	f003 0304 	and.w	r3, r3, #4
 800caac:	2b00      	cmp	r3, #0
 800caae:	d005      	beq.n	800cabc <f_open+0x210>
						res = FR_EXIST;
 800cab0:	2308      	movs	r3, #8
 800cab2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cab6:	f102 0217 	add.w	r2, r2, #23
 800caba:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cabc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cac0:	f103 0317 	add.w	r3, r3, #23
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f040 8122 	bne.w	800cd10 <f_open+0x464>
 800cacc:	f107 0318 	add.w	r3, r7, #24
 800cad0:	3b11      	subs	r3, #17
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	f003 0308 	and.w	r3, r3, #8
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 8119 	beq.w	800cd10 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800cade:	f7fd f90b 	bl	8009cf8 <get_fattime>
 800cae2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cae6:	f103 030c 	add.w	r3, r3, #12
 800caea:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800caec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800caf0:	f103 0310 	add.w	r3, r3, #16
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	330e      	adds	r3, #14
 800caf8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cafc:	f102 020c 	add.w	r2, r2, #12
 800cb00:	6812      	ldr	r2, [r2, #0]
 800cb02:	b2d2      	uxtb	r2, r2
 800cb04:	701a      	strb	r2, [r3, #0]
 800cb06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb0a:	f103 030c 	add.w	r3, r3, #12
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	0a1b      	lsrs	r3, r3, #8
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb1a:	f103 0310 	add.w	r3, r3, #16
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	330f      	adds	r3, #15
 800cb22:	b2d2      	uxtb	r2, r2
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb2a:	f103 030c 	add.w	r3, r3, #12
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	0c1a      	lsrs	r2, r3, #16
 800cb32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb36:	f103 0310 	add.w	r3, r3, #16
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	3310      	adds	r3, #16
 800cb3e:	b2d2      	uxtb	r2, r2
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb46:	f103 030c 	add.w	r3, r3, #12
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	0e1a      	lsrs	r2, r3, #24
 800cb4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb52:	f103 0310 	add.w	r3, r3, #16
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3311      	adds	r3, #17
 800cb5a:	b2d2      	uxtb	r2, r2
 800cb5c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800cb5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb62:	f103 0310 	add.w	r3, r3, #16
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	330b      	adds	r3, #11
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800cb6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb72:	f103 0310 	add.w	r3, r3, #16
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	331c      	adds	r3, #28
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb82:	f103 0310 	add.w	r3, r3, #16
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	331d      	adds	r3, #29
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	701a      	strb	r2, [r3, #0]
 800cb8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb92:	f103 0310 	add.w	r3, r3, #16
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	331e      	adds	r3, #30
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cba2:	f103 0310 	add.w	r3, r3, #16
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	331f      	adds	r3, #31
 800cbaa:	2200      	movs	r2, #0
 800cbac:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800cbae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cbb2:	3b18      	subs	r3, #24
 800cbb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbbe:	f102 0210 	add.w	r2, r2, #16
 800cbc2:	6811      	ldr	r1, [r2, #0]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fbae 	bl	800b326 <ld_clust>
 800cbca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cbce:	f103 0308 	add.w	r3, r3, #8
 800cbd2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cbda:	f103 0310 	add.w	r3, r3, #16
 800cbde:	6818      	ldr	r0, [r3, #0]
 800cbe0:	f7fe fbd0 	bl	800b384 <st_clust>
				dj.fs->wflag = 1;
 800cbe4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cbe8:	3b18      	subs	r3, #24
 800cbea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800cbfa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cbfe:	f103 0308 	add.w	r3, r3, #8
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f000 8083 	beq.w	800cd10 <f_open+0x464>
					dw = dj.fs->winsect;
 800cc0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cc0e:	3b18      	subs	r3, #24
 800cc10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cc1a:	330c      	adds	r3, #12
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc22:	f102 020c 	add.w	r2, r2, #12
 800cc26:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800cc28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cc2c:	3b18      	subs	r3, #24
 800cc2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc38:	f102 0208 	add.w	r2, r2, #8
 800cc3c:	6811      	ldr	r1, [r2, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fd ff86 	bl	800ab50 <remove_chain>
 800cc44:	4603      	mov	r3, r0
 800cc46:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc4a:	f102 0217 	add.w	r2, r2, #23
 800cc4e:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800cc50:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc54:	f103 0317 	add.w	r3, r3, #23
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d158      	bne.n	800cd10 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800cc5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cc62:	3b18      	subs	r3, #24
 800cc64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc6e:	f102 0208 	add.w	r2, r2, #8
 800cc72:	6812      	ldr	r2, [r2, #0]
 800cc74:	3a01      	subs	r2, #1
 800cc76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc7a:	330c      	adds	r3, #12
 800cc7c:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800cc7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cc82:	3b18      	subs	r3, #24
 800cc84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc8e:	f102 020c 	add.w	r2, r2, #12
 800cc92:	6811      	ldr	r1, [r2, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fd fbcb 	bl	800a430 <move_window>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cca0:	f102 0217 	add.w	r2, r2, #23
 800cca4:	7013      	strb	r3, [r2, #0]
 800cca6:	e033      	b.n	800cd10 <f_open+0x464>
 800cca8:	20000258 	.word	0x20000258
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800ccac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccb0:	f103 0317 	add.w	r3, r3, #23
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d12a      	bne.n	800cd10 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ccba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccbe:	f103 0310 	add.w	r3, r3, #16
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	330b      	adds	r3, #11
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	f003 0310 	and.w	r3, r3, #16
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <f_open+0x432>
					res = FR_NO_FILE;
 800ccd0:	2304      	movs	r3, #4
 800ccd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ccd6:	f102 0217 	add.w	r2, r2, #23
 800ccda:	7013      	strb	r3, [r2, #0]
 800ccdc:	e018      	b.n	800cd10 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ccde:	f107 0318 	add.w	r3, r7, #24
 800cce2:	3b11      	subs	r3, #17
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	f003 0302 	and.w	r3, r3, #2
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d010      	beq.n	800cd10 <f_open+0x464>
 800ccee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccf2:	f103 0310 	add.w	r3, r3, #16
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	330b      	adds	r3, #11
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d005      	beq.n	800cd10 <f_open+0x464>
						res = FR_DENIED;
 800cd04:	2307      	movs	r3, #7
 800cd06:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cd0a:	f102 0217 	add.w	r2, r2, #23
 800cd0e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800cd10:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cd14:	f103 0317 	add.w	r3, r3, #23
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d15b      	bne.n	800cdd6 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cd1e:	f107 0318 	add.w	r3, r7, #24
 800cd22:	3b11      	subs	r3, #17
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	f003 0308 	and.w	r3, r3, #8
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d009      	beq.n	800cd42 <f_open+0x496>
				mode |= FA__WRITTEN;
 800cd2e:	f107 0318 	add.w	r3, r7, #24
 800cd32:	3b11      	subs	r3, #17
 800cd34:	f107 0218 	add.w	r2, r7, #24
 800cd38:	3a11      	subs	r2, #17
 800cd3a:	7812      	ldrb	r2, [r2, #0]
 800cd3c:	f042 0220 	orr.w	r2, r2, #32
 800cd40:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800cd42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd46:	3b18      	subs	r3, #24
 800cd48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd52:	330c      	adds	r3, #12
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	f107 0318 	add.w	r3, r7, #24
 800cd5a:	3b0c      	subs	r3, #12
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd62:	331c      	adds	r3, #28
 800cd64:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800cd66:	f107 0318 	add.w	r3, r7, #24
 800cd6a:	3b0c      	subs	r3, #12
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd72:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cd76:	f102 0210 	add.w	r2, r2, #16
 800cd7a:	6812      	ldr	r2, [r2, #0]
 800cd7c:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd7e:	f107 0318 	add.w	r3, r7, #24
 800cd82:	3b11      	subs	r3, #17
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	f023 0301 	bic.w	r3, r3, #1
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	bf14      	ite	ne
 800cd8e:	2301      	movne	r3, #1
 800cd90:	2300      	moveq	r3, #0
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	461a      	mov	r2, r3
 800cd96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd9a:	3b18      	subs	r3, #24
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fd f9bc 	bl	800a11c <inc_lock>
 800cda4:	4602      	mov	r2, r0
 800cda6:	f107 0318 	add.w	r3, r7, #24
 800cdaa:	3b0c      	subs	r3, #12
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800cdb6:	f107 0318 	add.w	r3, r7, #24
 800cdba:	3b0c      	subs	r3, #12
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d105      	bne.n	800cdd6 <f_open+0x52a>
 800cdca:	2302      	movs	r3, #2
 800cdcc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cdd0:	f102 0217 	add.w	r2, r2, #23
 800cdd4:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800cdd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cdda:	f103 0317 	add.w	r3, r3, #23
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f040 8091 	bne.w	800cf08 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800cde6:	f107 0318 	add.w	r3, r7, #24
 800cdea:	3b0c      	subs	r3, #12
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdf2:	3306      	adds	r3, #6
 800cdf4:	f107 0218 	add.w	r2, r7, #24
 800cdf8:	3a11      	subs	r2, #17
 800cdfa:	7812      	ldrb	r2, [r2, #0]
 800cdfc:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800cdfe:	f107 0318 	add.w	r3, r7, #24
 800ce02:	3b0c      	subs	r3, #12
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce0a:	3307      	adds	r3, #7
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800ce10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce14:	3b18      	subs	r3, #24
 800ce16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ce20:	f102 0210 	add.w	r2, r2, #16
 800ce24:	6811      	ldr	r1, [r2, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe fa7d 	bl	800b326 <ld_clust>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	f107 0318 	add.w	r3, r7, #24
 800ce32:	3b0c      	subs	r3, #12
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce3a:	3310      	adds	r3, #16
 800ce3c:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800ce3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ce42:	f103 0310 	add.w	r3, r3, #16
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	331f      	adds	r3, #31
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	061a      	lsls	r2, r3, #24
 800ce4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ce52:	f103 0310 	add.w	r3, r3, #16
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	331e      	adds	r3, #30
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	041b      	lsls	r3, r3, #16
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ce64:	f102 0210 	add.w	r2, r2, #16
 800ce68:	6812      	ldr	r2, [r2, #0]
 800ce6a:	321d      	adds	r2, #29
 800ce6c:	7812      	ldrb	r2, [r2, #0]
 800ce6e:	0212      	lsls	r2, r2, #8
 800ce70:	4313      	orrs	r3, r2
 800ce72:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ce76:	f102 0210 	add.w	r2, r2, #16
 800ce7a:	6812      	ldr	r2, [r2, #0]
 800ce7c:	321c      	adds	r2, #28
 800ce7e:	7812      	ldrb	r2, [r2, #0]
 800ce80:	431a      	orrs	r2, r3
 800ce82:	f107 0318 	add.w	r3, r7, #24
 800ce86:	3b0c      	subs	r3, #12
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce8e:	330c      	adds	r3, #12
 800ce90:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800ce92:	f107 0318 	add.w	r3, r7, #24
 800ce96:	3b0c      	subs	r3, #12
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce9e:	3308      	adds	r3, #8
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800cea4:	f107 0318 	add.w	r3, r7, #24
 800cea8:	3b0c      	subs	r3, #12
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceb0:	3318      	adds	r3, #24
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800ceb6:	f107 0318 	add.w	r3, r7, #24
 800ceba:	3b0c      	subs	r3, #12
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cec2:	3304      	adds	r3, #4
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800cec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cecc:	3b18      	subs	r3, #24
 800cece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	f107 0318 	add.w	r3, r7, #24
 800ced8:	3b0c      	subs	r3, #12
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cee0:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800cee2:	f107 0318 	add.w	r3, r7, #24
 800cee6:	3b0c      	subs	r3, #12
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef4:	3306      	adds	r3, #6
 800cef6:	881a      	ldrh	r2, [r3, #0]
 800cef8:	f107 0318 	add.w	r3, r7, #24
 800cefc:	3b0c      	subs	r3, #12
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf04:	3304      	adds	r3, #4
 800cf06:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800cf08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cf0c:	f103 0317 	add.w	r3, r3, #23
 800cf10:	781b      	ldrb	r3, [r3, #0]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop

0800cf20 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b08c      	sub	sp, #48	; 0x30
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
 800cf2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2200      	movs	r2, #0
 800cf36:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7ff fc2f 	bl	800c79c <validate>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800cf42:	7ffb      	ldrb	r3, [r7, #31]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d001      	beq.n	800cf4c <f_read+0x2c>
 800cf48:	7ffb      	ldrb	r3, [r7, #31]
 800cf4a:	e1fb      	b.n	800d344 <f_read+0x424>
	if (fp->err)								/* Check error */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf52:	3307      	adds	r3, #7
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d005      	beq.n	800cf66 <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf60:	3307      	adds	r3, #7
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	e1ee      	b.n	800d344 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf6c:	3306      	adds	r3, #6
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d101      	bne.n	800cf7c <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800cf78:	2307      	movs	r3, #7
 800cf7a:	e1e3      	b.n	800d344 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf82:	330c      	adds	r3, #12
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf8c:	3308      	adds	r3, #8
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	f240 81ce 	bls.w	800d33a <f_read+0x41a>
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cfa2:	e1ca      	b.n	800d33a <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfaa:	3308      	adds	r3, #8
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfba:	330a      	adds	r3, #10
 800cfbc:	881b      	ldrh	r3, [r3, #0]
 800cfbe:	fbb2 f1f3 	udiv	r1, r2, r3
 800cfc2:	fb03 f301 	mul.w	r3, r3, r1
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	f040 8160 	bne.w	800d28e <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd4:	3308      	adds	r3, #8
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfe4:	330a      	adds	r3, #10
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cffa:	3302      	adds	r3, #2
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	3b01      	subs	r3, #1
 800d000:	b2db      	uxtb	r3, r3
 800d002:	4013      	ands	r3, r2
 800d004:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800d006:	7dfb      	ldrb	r3, [r7, #23]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d14a      	bne.n	800d0a2 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d012:	3308      	adds	r3, #8
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d106      	bne.n	800d028 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d020:	3310      	adds	r3, #16
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d026:	e01f      	b.n	800d068 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d02e:	3304      	adds	r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00a      	beq.n	800d04c <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d03c:	3308      	adds	r3, #8
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4619      	mov	r1, r3
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f7fd fe9d 	bl	800ad82 <clmt_clust>
 800d048:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d04a:	e00d      	b.n	800d068 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d05a:	3314      	adds	r3, #20
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4619      	mov	r1, r3
 800d060:	4610      	mov	r0, r2
 800d062:	f7fd fb10 	bl	800a686 <get_fat>
 800d066:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d807      	bhi.n	800d07e <f_read+0x15e>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d074:	3307      	adds	r3, #7
 800d076:	2202      	movs	r2, #2
 800d078:	701a      	strb	r2, [r3, #0]
 800d07a:	2302      	movs	r3, #2
 800d07c:	e162      	b.n	800d344 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d084:	d107      	bne.n	800d096 <f_read+0x176>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d08c:	3307      	adds	r3, #7
 800d08e:	2201      	movs	r2, #1
 800d090:	701a      	strb	r2, [r3, #0]
 800d092:	2301      	movs	r3, #1
 800d094:	e156      	b.n	800d344 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d09c:	3314      	adds	r3, #20
 800d09e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0a0:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0b0:	3314      	adds	r3, #20
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	f7fd fabd 	bl	800a636 <clust2sect>
 800d0bc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d107      	bne.n	800d0d4 <f_read+0x1b4>
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ca:	3307      	adds	r3, #7
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	e137      	b.n	800d344 <f_read+0x424>
			sect += csect;
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	4413      	add	r3, r2
 800d0da:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e8:	330a      	adds	r3, #10
 800d0ea:	881b      	ldrh	r3, [r3, #0]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0f4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d070      	beq.n	800d1de <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d0fc:	7dfa      	ldrb	r2, [r7, #23]
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	441a      	add	r2, r3
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d10e:	3302      	adds	r3, #2
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d90b      	bls.n	800d12e <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d122:	3302      	adds	r3, #2
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	7dfb      	ldrb	r3, [r7, #23]
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d13a:	3301      	adds	r3, #1
 800d13c:	7818      	ldrb	r0, [r3, #0]
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	6a39      	ldr	r1, [r7, #32]
 800d144:	f7fc fe7a 	bl	8009e3c <disk_read>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d007      	beq.n	800d15e <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d154:	3307      	adds	r3, #7
 800d156:	2201      	movs	r2, #1
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	2301      	movs	r3, #1
 800d15c:	e0f2      	b.n	800d344 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d164:	3306      	adds	r3, #6
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d028      	beq.n	800d1c2 <f_read+0x2a2>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d176:	3318      	adds	r3, #24
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	1ad3      	subs	r3, r2, r3
 800d17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d180:	429a      	cmp	r2, r3
 800d182:	d91e      	bls.n	800d1c2 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d18a:	3318      	adds	r3, #24
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	1ad2      	subs	r2, r2, r3
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d19e:	330a      	adds	r3, #10
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	fb03 f302 	mul.w	r3, r3, r2
 800d1a6:	6a3a      	ldr	r2, [r7, #32]
 800d1a8:	18d0      	adds	r0, r2, r3
 800d1aa:	68f9      	ldr	r1, [r7, #12]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b8:	330a      	adds	r3, #10
 800d1ba:	881b      	ldrh	r3, [r3, #0]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	f7fc fe9b 	bl	8009ef8 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1ce:	330a      	adds	r3, #10
 800d1d0:	881b      	ldrh	r3, [r3, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	fb02 f303 	mul.w	r3, r2, r3
 800d1da:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800d1dc:	e093      	b.n	800d306 <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1e4:	3318      	adds	r3, #24
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	693a      	ldr	r2, [r7, #16]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d049      	beq.n	800d282 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1f4:	3306      	adds	r3, #6
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d028      	beq.n	800d252 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d20c:	3301      	adds	r3, #1
 800d20e:	7818      	ldrb	r0, [r3, #0]
 800d210:	68f9      	ldr	r1, [r7, #12]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d218:	3318      	adds	r3, #24
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	2301      	movs	r3, #1
 800d21e:	f7fc fe2d 	bl	8009e7c <disk_write>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d22e:	3307      	adds	r3, #7
 800d230:	2201      	movs	r2, #1
 800d232:	701a      	strb	r2, [r3, #0]
 800d234:	2301      	movs	r3, #1
 800d236:	e085      	b.n	800d344 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d23e:	3306      	adds	r3, #6
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d246:	b2da      	uxtb	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d24e:	3306      	adds	r3, #6
 800d250:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d25e:	3301      	adds	r3, #1
 800d260:	7818      	ldrb	r0, [r3, #0]
 800d262:	68f9      	ldr	r1, [r7, #12]
 800d264:	2301      	movs	r3, #1
 800d266:	693a      	ldr	r2, [r7, #16]
 800d268:	f7fc fde8 	bl	8009e3c <disk_read>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d007      	beq.n	800d282 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d278:	3307      	adds	r3, #7
 800d27a:	2201      	movs	r2, #1
 800d27c:	701a      	strb	r2, [r3, #0]
 800d27e:	2301      	movs	r3, #1
 800d280:	e060      	b.n	800d344 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d288:	3318      	adds	r3, #24
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d29a:	330a      	adds	r3, #10
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2b6:	330a      	adds	r3, #10
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	fbb2 f1f3 	udiv	r1, r2, r3
 800d2be:	fb03 f301 	mul.w	r3, r3, r1
 800d2c2:	1ad3      	subs	r3, r2, r3
 800d2c4:	1ac3      	subs	r3, r0, r3
 800d2c6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800d2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d901      	bls.n	800d2d4 <f_read+0x3b4>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2da:	3308      	adds	r3, #8
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ea:	330a      	adds	r3, #10
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	fbb2 f1f3 	udiv	r1, r2, r3
 800d2f2:	fb03 f301 	mul.w	r3, r3, r1
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2fe:	4619      	mov	r1, r3
 800d300:	6a38      	ldr	r0, [r7, #32]
 800d302:	f7fc fdf9 	bl	8009ef8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d306:	6a3a      	ldr	r2, [r7, #32]
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	4413      	add	r3, r2
 800d30c:	623b      	str	r3, [r7, #32]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d314:	3308      	adds	r3, #8
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	441a      	add	r2, r3
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d322:	3308      	adds	r3, #8
 800d324:	601a      	str	r2, [r3, #0]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	441a      	add	r2, r3
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f47f ae31 	bne.w	800cfa4 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3730      	adds	r7, #48	; 0x30
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b08a      	sub	sp, #40	; 0x28
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
 800d358:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2200      	movs	r2, #0
 800d362:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f7ff fa19 	bl	800c79c <validate>
 800d36a:	4603      	mov	r3, r0
 800d36c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d36e:	7dfb      	ldrb	r3, [r7, #23]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <f_write+0x2c>
 800d374:	7dfb      	ldrb	r3, [r7, #23]
 800d376:	e258      	b.n	800d82a <f_write+0x4de>
	if (fp->err)							/* Check error */
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d37e:	3307      	adds	r3, #7
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d005      	beq.n	800d392 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d38c:	3307      	adds	r3, #7
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	e24b      	b.n	800d82a <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d398:	3306      	adds	r3, #6
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	f003 0302 	and.w	r3, r3, #2
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d3a4:	2307      	movs	r3, #7
 800d3a6:	e240      	b.n	800d82a <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	441a      	add	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3bc:	3308      	adds	r3, #8
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	f080 8208 	bcs.w	800d7d6 <f_write+0x48a>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800d3ca:	e204      	b.n	800d7d6 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3d2:	3308      	adds	r3, #8
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e2:	330a      	adds	r3, #10
 800d3e4:	881b      	ldrh	r3, [r3, #0]
 800d3e6:	fbb2 f1f3 	udiv	r1, r2, r3
 800d3ea:	fb03 f301 	mul.w	r3, r3, r1
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f040 818d 	bne.w	800d710 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d40c:	330a      	adds	r3, #10
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	fbb2 f3f3 	udiv	r3, r2, r3
 800d414:	b2da      	uxtb	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d422:	3302      	adds	r3, #2
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	3b01      	subs	r3, #1
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	4013      	ands	r3, r2
 800d42c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800d42e:	7dbb      	ldrb	r3, [r7, #22]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d167      	bne.n	800d504 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d43a:	3308      	adds	r3, #8
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d112      	bne.n	800d468 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d448:	3310      	adds	r3, #16
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	2b00      	cmp	r3, #0
 800d452:	d129      	bne.n	800d4a8 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2100      	movs	r1, #0
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fd fbde 	bl	800ac20 <create_chain>
 800d464:	6278      	str	r0, [r7, #36]	; 0x24
 800d466:	e01f      	b.n	800d4a8 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d46e:	3304      	adds	r3, #4
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00a      	beq.n	800d48c <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d47c:	3308      	adds	r3, #8
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4619      	mov	r1, r3
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f7fd fc7d 	bl	800ad82 <clmt_clust>
 800d488:	6278      	str	r0, [r7, #36]	; 0x24
 800d48a:	e00d      	b.n	800d4a8 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49a:	3314      	adds	r3, #20
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	f7fd fbbd 	bl	800ac20 <create_chain>
 800d4a6:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 8198 	beq.w	800d7e0 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d107      	bne.n	800d4c6 <f_write+0x17a>
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4bc:	3307      	adds	r3, #7
 800d4be:	2202      	movs	r2, #2
 800d4c0:	701a      	strb	r2, [r3, #0]
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	e1b1      	b.n	800d82a <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4cc:	d107      	bne.n	800d4de <f_write+0x192>
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4d4:	3307      	adds	r3, #7
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	701a      	strb	r2, [r3, #0]
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e1a5      	b.n	800d82a <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4e4:	3314      	adds	r3, #20
 800d4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4e8:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f0:	3310      	adds	r3, #16
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d105      	bne.n	800d504 <f_write+0x1b8>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4fe:	3310      	adds	r3, #16
 800d500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d502:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d50a:	3306      	adds	r3, #6
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d512:	2b00      	cmp	r3, #0
 800d514:	d028      	beq.n	800d568 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d522:	3301      	adds	r3, #1
 800d524:	7818      	ldrb	r0, [r3, #0]
 800d526:	68f9      	ldr	r1, [r7, #12]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d52e:	3318      	adds	r3, #24
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	2301      	movs	r3, #1
 800d534:	f7fc fca2 	bl	8009e7c <disk_write>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d007      	beq.n	800d54e <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d544:	3307      	adds	r3, #7
 800d546:	2201      	movs	r2, #1
 800d548:	701a      	strb	r2, [r3, #0]
 800d54a:	2301      	movs	r3, #1
 800d54c:	e16d      	b.n	800d82a <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d554:	3306      	adds	r3, #6
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d564:	3306      	adds	r3, #6
 800d566:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d576:	3314      	adds	r3, #20
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4619      	mov	r1, r3
 800d57c:	4610      	mov	r0, r2
 800d57e:	f7fd f85a 	bl	800a636 <clust2sect>
 800d582:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d107      	bne.n	800d59a <f_write+0x24e>
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d590:	3307      	adds	r3, #7
 800d592:	2202      	movs	r2, #2
 800d594:	701a      	strb	r2, [r3, #0]
 800d596:	2302      	movs	r3, #2
 800d598:	e147      	b.n	800d82a <f_write+0x4de>
			sect += csect;
 800d59a:	7dbb      	ldrb	r3, [r7, #22]
 800d59c:	693a      	ldr	r2, [r7, #16]
 800d59e:	4413      	add	r3, r2
 800d5a0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ae:	330a      	adds	r3, #10
 800d5b0:	881b      	ldrh	r3, [r3, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5ba:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d074      	beq.n	800d6ac <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d5c2:	7dba      	ldrb	r2, [r7, #22]
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	441a      	add	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5d4:	3302      	adds	r3, #2
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d90b      	bls.n	800d5f4 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e8:	3302      	adds	r3, #2
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	7dbb      	ldrb	r3, [r7, #22]
 800d5f0:	1ad3      	subs	r3, r2, r3
 800d5f2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d600:	3301      	adds	r3, #1
 800d602:	7818      	ldrb	r0, [r3, #0]
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	69b9      	ldr	r1, [r7, #24]
 800d60a:	f7fc fc37 	bl	8009e7c <disk_write>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d007      	beq.n	800d624 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d61a:	3307      	adds	r3, #7
 800d61c:	2201      	movs	r2, #1
 800d61e:	701a      	strb	r2, [r3, #0]
 800d620:	2301      	movs	r3, #1
 800d622:	e102      	b.n	800d82a <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d62a:	3318      	adds	r3, #24
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	69fa      	ldr	r2, [r7, #28]
 800d634:	429a      	cmp	r2, r3
 800d636:	d92b      	bls.n	800d690 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d640:	3318      	adds	r3, #24
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	1ad2      	subs	r2, r2, r3
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d654:	330a      	adds	r3, #10
 800d656:	881b      	ldrh	r3, [r3, #0]
 800d658:	fb03 f302 	mul.w	r3, r3, r2
 800d65c:	69ba      	ldr	r2, [r7, #24]
 800d65e:	18d1      	adds	r1, r2, r3
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d66c:	330a      	adds	r3, #10
 800d66e:	881b      	ldrh	r3, [r3, #0]
 800d670:	461a      	mov	r2, r3
 800d672:	f7fc fc41 	bl	8009ef8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d67c:	3306      	adds	r3, #6
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d684:	b2da      	uxtb	r2, r3
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d68c:	3306      	adds	r3, #6
 800d68e:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d69c:	330a      	adds	r3, #10
 800d69e:	881b      	ldrh	r3, [r3, #0]
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	fb02 f303 	mul.w	r3, r2, r3
 800d6a8:	623b      	str	r3, [r7, #32]
				continue;
 800d6aa:	e07a      	b.n	800d7a2 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b2:	3318      	adds	r3, #24
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	693a      	ldr	r2, [r7, #16]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d023      	beq.n	800d704 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c2:	3308      	adds	r3, #8
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6cc:	330c      	adds	r3, #12
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d217      	bcs.n	800d704 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	7818      	ldrb	r0, [r3, #0]
 800d6e4:	68f9      	ldr	r1, [r7, #12]
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	f7fc fba7 	bl	8009e3c <disk_read>
 800d6ee:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6fa:	3307      	adds	r3, #7
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	701a      	strb	r2, [r3, #0]
 800d700:	2301      	movs	r3, #1
 800d702:	e092      	b.n	800d82a <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d70a:	3318      	adds	r3, #24
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71c:	330a      	adds	r3, #10
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	4618      	mov	r0, r3
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d728:	3308      	adds	r3, #8
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d738:	330a      	adds	r3, #10
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d740:	fb03 f301 	mul.w	r3, r3, r1
 800d744:	1ad3      	subs	r3, r2, r3
 800d746:	1ac3      	subs	r3, r0, r3
 800d748:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800d74a:	6a3a      	ldr	r2, [r7, #32]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d901      	bls.n	800d756 <f_write+0x40a>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d75c:	3308      	adds	r3, #8
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d76c:	330a      	adds	r3, #10
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	fbb2 f1f3 	udiv	r1, r2, r3
 800d774:	fb03 f301 	mul.w	r3, r3, r1
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	4413      	add	r3, r2
 800d77e:	6a3a      	ldr	r2, [r7, #32]
 800d780:	69b9      	ldr	r1, [r7, #24]
 800d782:	4618      	mov	r0, r3
 800d784:	f7fc fbb8 	bl	8009ef8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d78e:	3306      	adds	r3, #6
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d796:	b2da      	uxtb	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d79e:	3306      	adds	r3, #6
 800d7a0:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d7a2:	69ba      	ldr	r2, [r7, #24]
 800d7a4:	6a3b      	ldr	r3, [r7, #32]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	61bb      	str	r3, [r7, #24]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7b0:	3308      	adds	r3, #8
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	441a      	add	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7be:	3308      	adds	r3, #8
 800d7c0:	601a      	str	r2, [r3, #0]
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	441a      	add	r2, r3
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	601a      	str	r2, [r3, #0]
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f47f adf7 	bne.w	800d3cc <f_write+0x80>
 800d7de:	e000      	b.n	800d7e2 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d7e0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7e8:	3308      	adds	r3, #8
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7f2:	330c      	adds	r3, #12
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d909      	bls.n	800d80e <f_write+0x4c2>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d800:	3308      	adds	r3, #8
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d80a:	330c      	adds	r3, #12
 800d80c:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d814:	3306      	adds	r3, #6
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	f043 0320 	orr.w	r3, r3, #32
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d824:	3306      	adds	r3, #6
 800d826:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3728      	adds	r7, #40	; 0x28
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b086      	sub	sp, #24
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7fe ffae 	bl	800c79c <validate>
 800d840:	4603      	mov	r3, r0
 800d842:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d844:	7dfb      	ldrb	r3, [r7, #23]
 800d846:	2b00      	cmp	r3, #0
 800d848:	f040 80cc 	bne.w	800d9e4 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d852:	3306      	adds	r3, #6
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	f003 0320 	and.w	r3, r3, #32
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f000 80c2 	beq.w	800d9e4 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d866:	3306      	adds	r3, #6
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d022      	beq.n	800d8b8 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d87e:	3301      	adds	r3, #1
 800d880:	7818      	ldrb	r0, [r3, #0]
 800d882:	6879      	ldr	r1, [r7, #4]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d88a:	3318      	adds	r3, #24
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	2301      	movs	r3, #1
 800d890:	f7fc faf4 	bl	8009e7c <disk_write>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d89a:	2301      	movs	r3, #1
 800d89c:	e0a3      	b.n	800d9e6 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a4:	3306      	adds	r3, #6
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b4:	3306      	adds	r3, #6
 800d8b6:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8c6:	331c      	adds	r3, #28
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	f7fc fdaf 	bl	800a430 <move_window>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d8d6:	7dfb      	ldrb	r3, [r7, #23]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f040 8083 	bne.w	800d9e4 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	330b      	adds	r3, #11
 800d8ec:	781a      	ldrb	r2, [r3, #0]
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	330b      	adds	r3, #11
 800d8f2:	f042 0220 	orr.w	r2, r2, #32
 800d8f6:	b2d2      	uxtb	r2, r2
 800d8f8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d900:	330c      	adds	r3, #12
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	331c      	adds	r3, #28
 800d908:	b2d2      	uxtb	r2, r2
 800d90a:	701a      	strb	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d912:	330c      	adds	r3, #12
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	b29b      	uxth	r3, r3
 800d918:	0a1b      	lsrs	r3, r3, #8
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	331d      	adds	r3, #29
 800d920:	b2d2      	uxtb	r2, r2
 800d922:	701a      	strb	r2, [r3, #0]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d92a:	330c      	adds	r3, #12
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	0c1a      	lsrs	r2, r3, #16
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	331e      	adds	r3, #30
 800d934:	b2d2      	uxtb	r2, r2
 800d936:	701a      	strb	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d93e:	330c      	adds	r3, #12
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	0e1a      	lsrs	r2, r3, #24
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	331f      	adds	r3, #31
 800d948:	b2d2      	uxtb	r2, r2
 800d94a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d952:	3310      	adds	r3, #16
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4619      	mov	r1, r3
 800d958:	6938      	ldr	r0, [r7, #16]
 800d95a:	f7fd fd13 	bl	800b384 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d95e:	f7fc f9cb 	bl	8009cf8 <get_fattime>
 800d962:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	3316      	adds	r3, #22
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	b2d2      	uxtb	r2, r2
 800d96c:	701a      	strb	r2, [r3, #0]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	b29b      	uxth	r3, r3
 800d972:	0a1b      	lsrs	r3, r3, #8
 800d974:	b29a      	uxth	r2, r3
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	3317      	adds	r3, #23
 800d97a:	b2d2      	uxtb	r2, r2
 800d97c:	701a      	strb	r2, [r3, #0]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	0c1a      	lsrs	r2, r3, #16
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	3318      	adds	r3, #24
 800d986:	b2d2      	uxtb	r2, r2
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	0e1a      	lsrs	r2, r3, #24
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	3319      	adds	r3, #25
 800d992:	b2d2      	uxtb	r2, r2
 800d994:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	3312      	adds	r3, #18
 800d99a:	2200      	movs	r2, #0
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	3313      	adds	r3, #19
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9ac:	3306      	adds	r3, #6
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	f023 0320 	bic.w	r3, r3, #32
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9bc:	3306      	adds	r3, #6
 800d9be:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fc fd5c 	bl	800a498 <sync_fs>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3718      	adds	r7, #24
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b084      	sub	sp, #16
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff ff1b 	bl	800d832 <f_sync>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d119      	bne.n	800da3a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f7fe fec8 	bl	800c79c <validate>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d111      	bne.n	800da3a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da1c:	3308      	adds	r3, #8
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4618      	mov	r0, r3
 800da22:	f7fc fc3d 	bl	800a2a0 <dec_lock>
 800da26:	4603      	mov	r3, r0
 800da28:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800da2a:	7bfb      	ldrb	r3, [r7, #15]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d104      	bne.n	800da3a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da36:	2200      	movs	r2, #0
 800da38:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b090      	sub	sp, #64	; 0x40
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7fe fea4 	bl	800c79c <validate>
 800da54:	4603      	mov	r3, r0
 800da56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800da5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d002      	beq.n	800da68 <f_lseek+0x24>
 800da62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da66:	e31d      	b.n	800e0a4 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da6e:	3307      	adds	r3, #7
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d005      	beq.n	800da82 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da7c:	3307      	adds	r3, #7
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	e310      	b.n	800e0a4 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da88:	3304      	adds	r3, #4
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f000 813c 	beq.w	800dd0a <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da98:	d172      	bne.n	800db80 <f_lseek+0x13c>
			tbl = fp->cltbl;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800daa0:	3304      	adds	r3, #4
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	1d1a      	adds	r2, r3, #4
 800daaa:	627a      	str	r2, [r7, #36]	; 0x24
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	617b      	str	r3, [r7, #20]
 800dab0:	2302      	movs	r3, #2
 800dab2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daba:	3310      	adds	r3, #16
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800dac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d049      	beq.n	800db5a <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac8:	613b      	str	r3, [r7, #16]
 800daca:	2300      	movs	r3, #0
 800dacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad0:	3302      	adds	r3, #2
 800dad2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dada:	3301      	adds	r3, #1
 800dadc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fc fdcc 	bl	800a686 <get_fat>
 800daee:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800daf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d807      	bhi.n	800db06 <f_lseek+0xc2>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dafc:	3307      	adds	r3, #7
 800dafe:	2202      	movs	r2, #2
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	2302      	movs	r3, #2
 800db04:	e2ce      	b.n	800e0a4 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0c:	d107      	bne.n	800db1e <f_lseek+0xda>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db14:	3307      	adds	r3, #7
 800db16:	2201      	movs	r2, #1
 800db18:	701a      	strb	r2, [r3, #0]
 800db1a:	2301      	movs	r3, #1
 800db1c:	e2c2      	b.n	800e0a4 <f_lseek+0x660>
					} while (cl == pcl + 1);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	3301      	adds	r3, #1
 800db22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db24:	429a      	cmp	r2, r3
 800db26:	d0d5      	beq.n	800dad4 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800db28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d809      	bhi.n	800db44 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 800db30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db32:	1d1a      	adds	r2, r3, #4
 800db34:	627a      	str	r2, [r7, #36]	; 0x24
 800db36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	1d1a      	adds	r2, r3, #4
 800db3e:	627a      	str	r2, [r7, #36]	; 0x24
 800db40:	693a      	ldr	r2, [r7, #16]
 800db42:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db50:	3314      	adds	r3, #20
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db56:	429a      	cmp	r2, r3
 800db58:	d3b5      	bcc.n	800dac6 <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800db60:	3304      	adds	r3, #4
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db66:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800db68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d803      	bhi.n	800db78 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	e293      	b.n	800e0a0 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800db78:	2311      	movs	r3, #17
 800db7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800db7e:	e28f      	b.n	800e0a0 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db86:	330c      	adds	r3, #12
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d905      	bls.n	800db9c <f_lseek+0x158>
				ofs = fp->fsize;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db96:	330c      	adds	r3, #12
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dba2:	3308      	adds	r3, #8
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	601a      	str	r2, [r3, #0]
			if (ofs) {
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f000 8278 	beq.w	800e0a0 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7fd f8e3 	bl	800ad82 <clmt_clust>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbc4:	3314      	adds	r3, #20
 800dbc6:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd6:	3314      	adds	r3, #20
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f7fc fd2a 	bl	800a636 <clust2sect>
 800dbe2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d107      	bne.n	800dbfa <f_lseek+0x1b6>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbf0:	3307      	adds	r3, #7
 800dbf2:	2202      	movs	r2, #2
 800dbf4:	701a      	strb	r2, [r3, #0]
 800dbf6:	2302      	movs	r3, #2
 800dbf8:	e254      	b.n	800e0a4 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	1e5a      	subs	r2, r3, #1
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc0a:	330a      	adds	r3, #10
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc1e:	3302      	adds	r3, #2
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	3b01      	subs	r3, #1
 800dc24:	4013      	ands	r3, r2
 800dc26:	69ba      	ldr	r2, [r7, #24]
 800dc28:	4413      	add	r3, r2
 800dc2a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc32:	3308      	adds	r3, #8
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc42:	330a      	adds	r3, #10
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	fbb2 f1f3 	udiv	r1, r2, r3
 800dc4a:	fb03 f301 	mul.w	r3, r3, r1
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f000 8225 	beq.w	800e0a0 <f_lseek+0x65c>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc5c:	3318      	adds	r3, #24
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	69ba      	ldr	r2, [r7, #24]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	f000 821c 	beq.w	800e0a0 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc6e:	3306      	adds	r3, #6
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d028      	beq.n	800dccc <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc86:	3301      	adds	r3, #1
 800dc88:	7818      	ldrb	r0, [r3, #0]
 800dc8a:	6879      	ldr	r1, [r7, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc92:	3318      	adds	r3, #24
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	2301      	movs	r3, #1
 800dc98:	f7fc f8f0 	bl	8009e7c <disk_write>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d007      	beq.n	800dcb2 <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dca8:	3307      	adds	r3, #7
 800dcaa:	2201      	movs	r2, #1
 800dcac:	701a      	strb	r2, [r3, #0]
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e1f8      	b.n	800e0a4 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcb8:	3306      	adds	r3, #6
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcc8:	3306      	adds	r3, #6
 800dcca:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcd8:	3301      	adds	r3, #1
 800dcda:	7818      	ldrb	r0, [r3, #0]
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	2301      	movs	r3, #1
 800dce0:	69ba      	ldr	r2, [r7, #24]
 800dce2:	f7fc f8ab 	bl	8009e3c <disk_read>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d007      	beq.n	800dcfc <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcf2:	3307      	adds	r3, #7
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	701a      	strb	r2, [r3, #0]
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e1d3      	b.n	800e0a4 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd02:	3318      	adds	r3, #24
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	601a      	str	r2, [r3, #0]
 800dd08:	e1ca      	b.n	800e0a0 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd10:	330c      	adds	r3, #12
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	683a      	ldr	r2, [r7, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d90e      	bls.n	800dd38 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd20:	3306      	adds	r3, #6
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	f003 0302 	and.w	r3, r3, #2
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d105      	bne.n	800dd38 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd32:	330c      	adds	r3, #12
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd3e:	3308      	adds	r3, #8
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	637b      	str	r3, [r7, #52]	; 0x34
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd4e:	3308      	adds	r3, #8
 800dd50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd52:	601a      	str	r2, [r3, #0]
		if (ofs) {
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 8113 	beq.w	800df82 <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd68:	3302      	adds	r3, #2
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd7a:	330a      	adds	r3, #10
 800dd7c:	881b      	ldrh	r3, [r3, #0]
 800dd7e:	fb03 f302 	mul.w	r3, r3, r2
 800dd82:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d024      	beq.n	800ddd4 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	1e5a      	subs	r2, r3, #1
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd94:	6a3b      	ldr	r3, [r7, #32]
 800dd96:	1e59      	subs	r1, r3, #1
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d318      	bcc.n	800ddd4 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	1e5a      	subs	r2, r3, #1
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	425b      	negs	r3, r3
 800ddaa:	401a      	ands	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb2:	3308      	adds	r3, #8
 800ddb4:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddcc:	3314      	adds	r3, #20
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddd2:	e034      	b.n	800de3e <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddda:	3310      	adds	r3, #16
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d125      	bne.n	800de32 <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2100      	movs	r1, #0
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fc ff15 	bl	800ac20 <create_chain>
 800ddf6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d107      	bne.n	800de0e <f_lseek+0x3ca>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de04:	3307      	adds	r3, #7
 800de06:	2202      	movs	r2, #2
 800de08:	701a      	strb	r2, [r3, #0]
 800de0a:	2302      	movs	r3, #2
 800de0c:	e14a      	b.n	800e0a4 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800de0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de14:	d107      	bne.n	800de26 <f_lseek+0x3e2>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de1c:	3307      	adds	r3, #7
 800de1e:	2201      	movs	r2, #1
 800de20:	701a      	strb	r2, [r3, #0]
 800de22:	2301      	movs	r3, #1
 800de24:	e13e      	b.n	800e0a4 <f_lseek+0x660>
					fp->sclust = clst;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de2c:	3310      	adds	r3, #16
 800de2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de30:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de38:	3314      	adds	r3, #20
 800de3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de3c:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 800de3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de40:	2b00      	cmp	r3, #0
 800de42:	f000 809e 	beq.w	800df82 <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 800de46:	e058      	b.n	800defa <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de4e:	3306      	adds	r3, #6
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	f003 0302 	and.w	r3, r3, #2
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00e      	beq.n	800de78 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de64:	4618      	mov	r0, r3
 800de66:	f7fc fedb 	bl	800ac20 <create_chain>
 800de6a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800de6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d10b      	bne.n	800de8a <f_lseek+0x446>
							ofs = bcs; break;
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	603b      	str	r3, [r7, #0]
 800de76:	e044      	b.n	800df02 <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de82:	4618      	mov	r0, r3
 800de84:	f7fc fbff 	bl	800a686 <get_fat>
 800de88:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de90:	d107      	bne.n	800dea2 <f_lseek+0x45e>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de98:	3307      	adds	r3, #7
 800de9a:	2201      	movs	r2, #1
 800de9c:	701a      	strb	r2, [r3, #0]
 800de9e:	2301      	movs	r3, #1
 800dea0:	e100      	b.n	800e0a4 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800dea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d90a      	bls.n	800debe <f_lseek+0x47a>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deb4:	3314      	adds	r3, #20
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deba:	429a      	cmp	r2, r3
 800debc:	d307      	bcc.n	800dece <f_lseek+0x48a>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dec4:	3307      	adds	r3, #7
 800dec6:	2202      	movs	r2, #2
 800dec8:	701a      	strb	r2, [r3, #0]
 800deca:	2302      	movs	r3, #2
 800decc:	e0ea      	b.n	800e0a4 <f_lseek+0x660>
					fp->clust = clst;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ded4:	3314      	adds	r3, #20
 800ded6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ded8:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dee0:	3308      	adds	r3, #8
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	441a      	add	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deee:	3308      	adds	r3, #8
 800def0:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	1ad3      	subs	r3, r2, r3
 800def8:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800defa:	683a      	ldr	r2, [r7, #0]
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	429a      	cmp	r2, r3
 800df00:	d8a2      	bhi.n	800de48 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df08:	3308      	adds	r3, #8
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	441a      	add	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df16:	3308      	adds	r3, #8
 800df18:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df26:	330a      	adds	r3, #10
 800df28:	881b      	ldrh	r3, [r3, #0]
 800df2a:	461a      	mov	r2, r3
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800df32:	fb02 f201 	mul.w	r2, r2, r1
 800df36:	1a9b      	subs	r3, r3, r2
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d022      	beq.n	800df82 <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df46:	4618      	mov	r0, r3
 800df48:	f7fc fb75 	bl	800a636 <clust2sect>
 800df4c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800df4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df50:	2b00      	cmp	r3, #0
 800df52:	d107      	bne.n	800df64 <f_lseek+0x520>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df5a:	3307      	adds	r3, #7
 800df5c:	2202      	movs	r2, #2
 800df5e:	701a      	strb	r2, [r3, #0]
 800df60:	2302      	movs	r3, #2
 800df62:	e09f      	b.n	800e0a4 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df70:	330a      	adds	r3, #10
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	461a      	mov	r2, r3
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	fbb3 f3f2 	udiv	r3, r3, r2
 800df7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df7e:	4413      	add	r3, r2
 800df80:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df88:	3308      	adds	r3, #8
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df98:	330a      	adds	r3, #10
 800df9a:	881b      	ldrh	r3, [r3, #0]
 800df9c:	fbb2 f1f3 	udiv	r1, r2, r3
 800dfa0:	fb03 f301 	mul.w	r3, r3, r1
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d057      	beq.n	800e05a <f_lseek+0x616>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfb0:	3318      	adds	r3, #24
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d04f      	beq.n	800e05a <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfc0:	3306      	adds	r3, #6
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d028      	beq.n	800e01e <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfd8:	3301      	adds	r3, #1
 800dfda:	7818      	ldrb	r0, [r3, #0]
 800dfdc:	6879      	ldr	r1, [r7, #4]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfe4:	3318      	adds	r3, #24
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	2301      	movs	r3, #1
 800dfea:	f7fb ff47 	bl	8009e7c <disk_write>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d007      	beq.n	800e004 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dffa:	3307      	adds	r3, #7
 800dffc:	2201      	movs	r2, #1
 800dffe:	701a      	strb	r2, [r3, #0]
 800e000:	2301      	movs	r3, #1
 800e002:	e04f      	b.n	800e0a4 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e00a:	3306      	adds	r3, #6
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e012:	b2da      	uxtb	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e01a:	3306      	adds	r3, #6
 800e01c:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e02a:	3301      	adds	r3, #1
 800e02c:	7818      	ldrb	r0, [r3, #0]
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	2301      	movs	r3, #1
 800e032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e034:	f7fb ff02 	bl	8009e3c <disk_read>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d007      	beq.n	800e04e <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e044:	3307      	adds	r3, #7
 800e046:	2201      	movs	r2, #1
 800e048:	701a      	strb	r2, [r3, #0]
 800e04a:	2301      	movs	r3, #1
 800e04c:	e02a      	b.n	800e0a4 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e054:	3318      	adds	r3, #24
 800e056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e058:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e060:	3308      	adds	r3, #8
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e06a:	330c      	adds	r3, #12
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d916      	bls.n	800e0a0 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e078:	3308      	adds	r3, #8
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e082:	330c      	adds	r3, #12
 800e084:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e08c:	3306      	adds	r3, #6
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	f043 0320 	orr.w	r3, r3, #32
 800e094:	b2da      	uxtb	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e09c:	3306      	adds	r3, #6
 800e09e:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800e0a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3740      	adds	r7, #64	; 0x40
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b08e      	sub	sp, #56	; 0x38
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800e0b8:	f107 030c 	add.w	r3, r7, #12
 800e0bc:	2200      	movs	r2, #0
 800e0be:	4619      	mov	r1, r3
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7fe f80f 	bl	800c0e4 <find_volume>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800e0d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f040 80c4 	bne.w	800e264 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e2:	3310      	adds	r3, #16
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ec:	3314      	adds	r3, #20
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	3b02      	subs	r3, #2
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d807      	bhi.n	800e106 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0fc:	3310      	adds	r3, #16
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	e0ae      	b.n	800e264 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800e110:	2300      	movs	r3, #0
 800e112:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800e114:	7efb      	ldrb	r3, [r7, #27]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d127      	bne.n	800e16a <f_getfree+0xbe>
				clst = 2;
 800e11a:	2302      	movs	r3, #2
 800e11c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800e11e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e120:	69f8      	ldr	r0, [r7, #28]
 800e122:	f7fc fab0 	bl	800a686 <get_fat>
 800e126:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12e:	d103      	bne.n	800e138 <f_getfree+0x8c>
 800e130:	2301      	movs	r3, #1
 800e132:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e136:	e07f      	b.n	800e238 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d103      	bne.n	800e146 <f_getfree+0x9a>
 800e13e:	2302      	movs	r3, #2
 800e140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e144:	e078      	b.n	800e238 <f_getfree+0x18c>
					if (stat == 0) n++;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d102      	bne.n	800e152 <f_getfree+0xa6>
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	3301      	adds	r3, #1
 800e150:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800e152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e154:	3301      	adds	r3, #1
 800e156:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e15e:	3314      	adds	r3, #20
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e164:	429a      	cmp	r2, r3
 800e166:	d3da      	bcc.n	800e11e <f_getfree+0x72>
 800e168:	e066      	b.n	800e238 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e170:	3314      	adds	r3, #20
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800e180:	2300      	movs	r3, #0
 800e182:	627b      	str	r3, [r7, #36]	; 0x24
 800e184:	2300      	movs	r3, #0
 800e186:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d115      	bne.n	800e1ba <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800e18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	62ba      	str	r2, [r7, #40]	; 0x28
 800e194:	4619      	mov	r1, r3
 800e196:	69f8      	ldr	r0, [r7, #28]
 800e198:	f7fc f94a 	bl	800a430 <move_window>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800e1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d145      	bne.n	800e236 <f_getfree+0x18a>
						p = fs->win.d8;
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1b4:	330a      	adds	r3, #10
 800e1b6:	881b      	ldrh	r3, [r3, #0]
 800e1b8:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800e1ba:	7efb      	ldrb	r3, [r7, #27]
 800e1bc:	2b02      	cmp	r3, #2
 800e1be:	d115      	bne.n	800e1ec <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	021b      	lsls	r3, r3, #8
 800e1c8:	b21a      	sxth	r2, r3
 800e1ca:	6a3b      	ldr	r3, [r7, #32]
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	b21b      	sxth	r3, r3
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	b21b      	sxth	r3, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d102      	bne.n	800e1de <f_getfree+0x132>
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	3301      	adds	r3, #1
 800e1dc:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	3302      	adds	r3, #2
 800e1e2:	623b      	str	r3, [r7, #32]
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	3b02      	subs	r3, #2
 800e1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ea:	e01d      	b.n	800e228 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800e1ec:	6a3b      	ldr	r3, [r7, #32]
 800e1ee:	3303      	adds	r3, #3
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	061a      	lsls	r2, r3, #24
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	3302      	adds	r3, #2
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	041b      	lsls	r3, r3, #16
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	6a3a      	ldr	r2, [r7, #32]
 800e200:	3201      	adds	r2, #1
 800e202:	7812      	ldrb	r2, [r2, #0]
 800e204:	0212      	lsls	r2, r2, #8
 800e206:	4313      	orrs	r3, r2
 800e208:	6a3a      	ldr	r2, [r7, #32]
 800e20a:	7812      	ldrb	r2, [r2, #0]
 800e20c:	4313      	orrs	r3, r2
 800e20e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e212:	2b00      	cmp	r3, #0
 800e214:	d102      	bne.n	800e21c <f_getfree+0x170>
 800e216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e218:	3301      	adds	r3, #1
 800e21a:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800e21c:	6a3b      	ldr	r3, [r7, #32]
 800e21e:	3304      	adds	r3, #4
 800e220:	623b      	str	r3, [r7, #32]
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	3b04      	subs	r3, #4
 800e226:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	3b01      	subs	r3, #1
 800e22c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1a9      	bne.n	800e188 <f_getfree+0xdc>
 800e234:	e000      	b.n	800e238 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800e236:	bf00      	nop
			}
			fs->free_clust = n;
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e23e:	3310      	adds	r3, #16
 800e240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e242:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24a:	3305      	adds	r3, #5
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	f043 0301 	orr.w	r3, r3, #1
 800e252:	b2da      	uxtb	r2, r3
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e25a:	3305      	adds	r3, #5
 800e25c:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e262:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800e264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3738      	adds	r7, #56	; 0x38
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e284:	e01b      	b.n	800e2be <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800e286:	f107 0310 	add.w	r3, r7, #16
 800e28a:	f107 0114 	add.w	r1, r7, #20
 800e28e:	2201      	movs	r2, #1
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7fe fe45 	bl	800cf20 <f_read>
		if (rc != 1) break;
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d116      	bne.n	800e2ca <f_gets+0x5a>
		c = s[0];
 800e29c:	7d3b      	ldrb	r3, [r7, #20]
 800e29e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800e2a0:	7dfb      	ldrb	r3, [r7, #23]
 800e2a2:	2b0d      	cmp	r3, #13
 800e2a4:	d100      	bne.n	800e2a8 <f_gets+0x38>
 800e2a6:	e00a      	b.n	800e2be <f_gets+0x4e>
		*p++ = c;
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	1c5a      	adds	r2, r3, #1
 800e2ac:	61ba      	str	r2, [r7, #24]
 800e2ae:	7dfa      	ldrb	r2, [r7, #23]
 800e2b0:	701a      	strb	r2, [r3, #0]
		n++;
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800e2b8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ba:	2b0a      	cmp	r3, #10
 800e2bc:	d007      	beq.n	800e2ce <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	69fa      	ldr	r2, [r7, #28]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	dbde      	blt.n	800e286 <f_gets+0x16>
 800e2c8:	e002      	b.n	800e2d0 <f_gets+0x60>
		if (rc != 1) break;
 800e2ca:	bf00      	nop
 800e2cc:	e000      	b.n	800e2d0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800e2ce:	bf00      	nop
	}
	*p = 0;
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <f_gets+0x70>
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	e000      	b.n	800e2e2 <f_gets+0x72>
 800e2e0:	2300      	movs	r3, #0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3720      	adds	r7, #32
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b084      	sub	sp, #16
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800e2f6:	78fb      	ldrb	r3, [r7, #3]
 800e2f8:	2b0a      	cmp	r3, #10
 800e2fa:	d103      	bne.n	800e304 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e2fc:	210d      	movs	r1, #13
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7ff fff3 	bl	800e2ea <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	db25      	blt.n	800e35c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	60fa      	str	r2, [r7, #12]
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	4413      	add	r3, r2
 800e31a:	78fa      	ldrb	r2, [r7, #3]
 800e31c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2b3c      	cmp	r3, #60	; 0x3c
 800e322:	dd12      	ble.n	800e34a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6818      	ldr	r0, [r3, #0]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f103 010c 	add.w	r1, r3, #12
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	f107 0308 	add.w	r3, r7, #8
 800e334:	f7ff f80a 	bl	800d34c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e338:	68ba      	ldr	r2, [r7, #8]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d101      	bne.n	800e344 <putc_bfd+0x5a>
 800e340:	2300      	movs	r3, #0
 800e342:	e001      	b.n	800e348 <putc_bfd+0x5e>
 800e344:	f04f 33ff 	mov.w	r3, #4294967295
 800e348:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	1c5a      	adds	r2, r3, #1
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	609a      	str	r2, [r3, #8]
 800e35a:	e000      	b.n	800e35e <putc_bfd+0x74>
	if (i < 0) return;
 800e35c:	bf00      	nop
}
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800e364:	b590      	push	{r4, r7, lr}
 800e366:	b097      	sub	sp, #92	; 0x5c
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800e372:	2300      	movs	r3, #0
 800e374:	613b      	str	r3, [r7, #16]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800e37a:	e009      	b.n	800e390 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	607a      	str	r2, [r7, #4]
 800e382:	781a      	ldrb	r2, [r3, #0]
 800e384:	f107 030c 	add.w	r3, r7, #12
 800e388:	4611      	mov	r1, r2
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7ff ffad 	bl	800e2ea <putc_bfd>
	while (*str)			/* Put the string */
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d1f1      	bne.n	800e37c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	db15      	blt.n	800e3ca <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	461c      	mov	r4, r3
 800e3a4:	f107 0208 	add.w	r2, r7, #8
 800e3a8:	f107 030c 	add.w	r3, r7, #12
 800e3ac:	f103 010c 	add.w	r1, r3, #12
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	f7fe ffca 	bl	800d34c <f_write>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d105      	bne.n	800e3ca <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d101      	bne.n	800e3ca <f_puts+0x66>
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	e001      	b.n	800e3ce <f_puts+0x6a>
	return EOF;
 800e3ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	375c      	adds	r7, #92	; 0x5c
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd90      	pop	{r4, r7, pc}
	...

0800e3d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b087      	sub	sp, #28
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800e3ee:	4b1f      	ldr	r3, [pc, #124]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e3f0:	7a5b      	ldrb	r3, [r3, #9]
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d831      	bhi.n	800e45c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e3f8:	4b1c      	ldr	r3, [pc, #112]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e3fa:	7a5b      	ldrb	r3, [r3, #9]
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	461a      	mov	r2, r3
 800e400:	4b1a      	ldr	r3, [pc, #104]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e402:	2100      	movs	r1, #0
 800e404:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800e406:	4b19      	ldr	r3, [pc, #100]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e408:	7a5b      	ldrb	r3, [r3, #9]
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	4a17      	ldr	r2, [pc, #92]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	4413      	add	r3, r2
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800e416:	4b15      	ldr	r3, [pc, #84]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e418:	7a5b      	ldrb	r3, [r3, #9]
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	461a      	mov	r2, r3
 800e41e:	4b13      	ldr	r3, [pc, #76]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e420:	4413      	add	r3, r2
 800e422:	79fa      	ldrb	r2, [r7, #7]
 800e424:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e426:	4b11      	ldr	r3, [pc, #68]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e428:	7a5b      	ldrb	r3, [r3, #9]
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	1c5a      	adds	r2, r3, #1
 800e42e:	b2d1      	uxtb	r1, r2
 800e430:	4a0e      	ldr	r2, [pc, #56]	; (800e46c <FATFS_LinkDriverEx+0x94>)
 800e432:	7251      	strb	r1, [r2, #9]
 800e434:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e436:	7dbb      	ldrb	r3, [r7, #22]
 800e438:	3330      	adds	r3, #48	; 0x30
 800e43a:	b2da      	uxtb	r2, r3
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	3301      	adds	r3, #1
 800e444:	223a      	movs	r2, #58	; 0x3a
 800e446:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	3302      	adds	r3, #2
 800e44c:	222f      	movs	r2, #47	; 0x2f
 800e44e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	3303      	adds	r3, #3
 800e454:	2200      	movs	r2, #0
 800e456:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e458:	2300      	movs	r3, #0
 800e45a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800e45c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	371c      	adds	r7, #28
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	20000458 	.word	0x20000458

0800e470 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e47a:	2200      	movs	r2, #0
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7ff ffaa 	bl	800e3d8 <FATFS_LinkDriverEx>
 800e484:	4603      	mov	r3, r0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3708      	adds	r7, #8
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
	...

0800e490 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	4603      	mov	r3, r0
 800e498:	6039      	str	r1, [r7, #0]
 800e49a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e49c:	88fb      	ldrh	r3, [r7, #6]
 800e49e:	2b7f      	cmp	r3, #127	; 0x7f
 800e4a0:	d802      	bhi.n	800e4a8 <ff_convert+0x18>
		c = chr;
 800e4a2:	88fb      	ldrh	r3, [r7, #6]
 800e4a4:	81fb      	strh	r3, [r7, #14]
 800e4a6:	e025      	b.n	800e4f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e4ae:	88fb      	ldrh	r3, [r7, #6]
 800e4b0:	2bff      	cmp	r3, #255	; 0xff
 800e4b2:	d805      	bhi.n	800e4c0 <ff_convert+0x30>
 800e4b4:	88fb      	ldrh	r3, [r7, #6]
 800e4b6:	3b80      	subs	r3, #128	; 0x80
 800e4b8:	4a12      	ldr	r2, [pc, #72]	; (800e504 <ff_convert+0x74>)
 800e4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4be:	e000      	b.n	800e4c2 <ff_convert+0x32>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	81fb      	strh	r3, [r7, #14]
 800e4c4:	e016      	b.n	800e4f4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	81fb      	strh	r3, [r7, #14]
 800e4ca:	e009      	b.n	800e4e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e4cc:	89fb      	ldrh	r3, [r7, #14]
 800e4ce:	4a0d      	ldr	r2, [pc, #52]	; (800e504 <ff_convert+0x74>)
 800e4d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4d4:	88fa      	ldrh	r2, [r7, #6]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d006      	beq.n	800e4e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e4da:	89fb      	ldrh	r3, [r7, #14]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	81fb      	strh	r3, [r7, #14]
 800e4e0:	89fb      	ldrh	r3, [r7, #14]
 800e4e2:	2b7f      	cmp	r3, #127	; 0x7f
 800e4e4:	d9f2      	bls.n	800e4cc <ff_convert+0x3c>
 800e4e6:	e000      	b.n	800e4ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e4e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e4ea:	89fb      	ldrh	r3, [r7, #14]
 800e4ec:	3380      	adds	r3, #128	; 0x80
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e4f4:	89fb      	ldrh	r3, [r7, #14]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3714      	adds	r7, #20
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	080122d8 	.word	0x080122d8

0800e508 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	4603      	mov	r3, r0
 800e510:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800e512:	2300      	movs	r3, #0
 800e514:	60fb      	str	r3, [r7, #12]
 800e516:	e002      	b.n	800e51e <ff_wtoupper+0x16>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	3301      	adds	r3, #1
 800e51c:	60fb      	str	r3, [r7, #12]
 800e51e:	4a0f      	ldr	r2, [pc, #60]	; (800e55c <ff_wtoupper+0x54>)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d006      	beq.n	800e538 <ff_wtoupper+0x30>
 800e52a:	4a0c      	ldr	r2, [pc, #48]	; (800e55c <ff_wtoupper+0x54>)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e532:	88fa      	ldrh	r2, [r7, #6]
 800e534:	429a      	cmp	r2, r3
 800e536:	d1ef      	bne.n	800e518 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800e538:	4a08      	ldr	r2, [pc, #32]	; (800e55c <ff_wtoupper+0x54>)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d004      	beq.n	800e54e <ff_wtoupper+0x46>
 800e544:	4a06      	ldr	r2, [pc, #24]	; (800e560 <ff_wtoupper+0x58>)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e54c:	e000      	b.n	800e550 <ff_wtoupper+0x48>
 800e54e:	88fb      	ldrh	r3, [r7, #6]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3714      	adds	r7, #20
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr
 800e55c:	080123d8 	.word	0x080123d8
 800e560:	080125b8 	.word	0x080125b8
 800e564:	00000000 	.word	0x00000000

0800e568 <log>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	ed2d 8b02 	vpush	{d8}
 800e56e:	ec55 4b10 	vmov	r4, r5, d0
 800e572:	f000 f841 	bl	800e5f8 <__ieee754_log>
 800e576:	4b1e      	ldr	r3, [pc, #120]	; (800e5f0 <log+0x88>)
 800e578:	eeb0 8a40 	vmov.f32	s16, s0
 800e57c:	eef0 8a60 	vmov.f32	s17, s1
 800e580:	f993 3000 	ldrsb.w	r3, [r3]
 800e584:	3301      	adds	r3, #1
 800e586:	d01a      	beq.n	800e5be <log+0x56>
 800e588:	4622      	mov	r2, r4
 800e58a:	462b      	mov	r3, r5
 800e58c:	4620      	mov	r0, r4
 800e58e:	4629      	mov	r1, r5
 800e590:	f7f2 facc 	bl	8000b2c <__aeabi_dcmpun>
 800e594:	b998      	cbnz	r0, 800e5be <log+0x56>
 800e596:	2200      	movs	r2, #0
 800e598:	2300      	movs	r3, #0
 800e59a:	4620      	mov	r0, r4
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7f2 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 800e5a2:	b960      	cbnz	r0, 800e5be <log+0x56>
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	f7f2 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5b0:	b160      	cbz	r0, 800e5cc <log+0x64>
 800e5b2:	f000 f9e5 	bl	800e980 <__errno>
 800e5b6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800e5e8 <log+0x80>
 800e5ba:	2322      	movs	r3, #34	; 0x22
 800e5bc:	6003      	str	r3, [r0, #0]
 800e5be:	eeb0 0a48 	vmov.f32	s0, s16
 800e5c2:	eef0 0a68 	vmov.f32	s1, s17
 800e5c6:	ecbd 8b02 	vpop	{d8}
 800e5ca:	bd38      	pop	{r3, r4, r5, pc}
 800e5cc:	f000 f9d8 	bl	800e980 <__errno>
 800e5d0:	ecbd 8b02 	vpop	{d8}
 800e5d4:	2321      	movs	r3, #33	; 0x21
 800e5d6:	6003      	str	r3, [r0, #0]
 800e5d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5dc:	4805      	ldr	r0, [pc, #20]	; (800e5f4 <log+0x8c>)
 800e5de:	f000 b9c7 	b.w	800e970 <nan>
 800e5e2:	bf00      	nop
 800e5e4:	f3af 8000 	nop.w
 800e5e8:	00000000 	.word	0x00000000
 800e5ec:	fff00000 	.word	0xfff00000
 800e5f0:	20000028 	.word	0x20000028
 800e5f4:	08012a10 	.word	0x08012a10

0800e5f8 <__ieee754_log>:
 800e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5fc:	ec51 0b10 	vmov	r0, r1, d0
 800e600:	ed2d 8b04 	vpush	{d8-d9}
 800e604:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e608:	b083      	sub	sp, #12
 800e60a:	460d      	mov	r5, r1
 800e60c:	da29      	bge.n	800e662 <__ieee754_log+0x6a>
 800e60e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e612:	4303      	orrs	r3, r0
 800e614:	ee10 2a10 	vmov	r2, s0
 800e618:	d10c      	bne.n	800e634 <__ieee754_log+0x3c>
 800e61a:	49cf      	ldr	r1, [pc, #828]	; (800e958 <__ieee754_log+0x360>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	2300      	movs	r3, #0
 800e620:	2000      	movs	r0, #0
 800e622:	f7f2 f913 	bl	800084c <__aeabi_ddiv>
 800e626:	ec41 0b10 	vmov	d0, r0, r1
 800e62a:	b003      	add	sp, #12
 800e62c:	ecbd 8b04 	vpop	{d8-d9}
 800e630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e634:	2900      	cmp	r1, #0
 800e636:	da05      	bge.n	800e644 <__ieee754_log+0x4c>
 800e638:	460b      	mov	r3, r1
 800e63a:	f7f1 fe25 	bl	8000288 <__aeabi_dsub>
 800e63e:	2200      	movs	r2, #0
 800e640:	2300      	movs	r3, #0
 800e642:	e7ee      	b.n	800e622 <__ieee754_log+0x2a>
 800e644:	4bc5      	ldr	r3, [pc, #788]	; (800e95c <__ieee754_log+0x364>)
 800e646:	2200      	movs	r2, #0
 800e648:	f7f1 ffd6 	bl	80005f8 <__aeabi_dmul>
 800e64c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e650:	460d      	mov	r5, r1
 800e652:	4ac3      	ldr	r2, [pc, #780]	; (800e960 <__ieee754_log+0x368>)
 800e654:	4295      	cmp	r5, r2
 800e656:	dd06      	ble.n	800e666 <__ieee754_log+0x6e>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	f7f1 fe16 	bl	800028c <__adddf3>
 800e660:	e7e1      	b.n	800e626 <__ieee754_log+0x2e>
 800e662:	2300      	movs	r3, #0
 800e664:	e7f5      	b.n	800e652 <__ieee754_log+0x5a>
 800e666:	152c      	asrs	r4, r5, #20
 800e668:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e66c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e670:	441c      	add	r4, r3
 800e672:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e676:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e67a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e67e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e682:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e686:	ea42 0105 	orr.w	r1, r2, r5
 800e68a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e68e:	2200      	movs	r2, #0
 800e690:	4bb4      	ldr	r3, [pc, #720]	; (800e964 <__ieee754_log+0x36c>)
 800e692:	f7f1 fdf9 	bl	8000288 <__aeabi_dsub>
 800e696:	1cab      	adds	r3, r5, #2
 800e698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	4682      	mov	sl, r0
 800e6a0:	468b      	mov	fp, r1
 800e6a2:	f04f 0200 	mov.w	r2, #0
 800e6a6:	dc53      	bgt.n	800e750 <__ieee754_log+0x158>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f7f2 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6ae:	b1d0      	cbz	r0, 800e6e6 <__ieee754_log+0xee>
 800e6b0:	2c00      	cmp	r4, #0
 800e6b2:	f000 8122 	beq.w	800e8fa <__ieee754_log+0x302>
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f7f1 ff34 	bl	8000524 <__aeabi_i2d>
 800e6bc:	a390      	add	r3, pc, #576	; (adr r3, 800e900 <__ieee754_log+0x308>)
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	460f      	mov	r7, r1
 800e6c6:	f7f1 ff97 	bl	80005f8 <__aeabi_dmul>
 800e6ca:	a38f      	add	r3, pc, #572	; (adr r3, 800e908 <__ieee754_log+0x310>)
 800e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	4639      	mov	r1, r7
 800e6d8:	f7f1 ff8e 	bl	80005f8 <__aeabi_dmul>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	460b      	mov	r3, r1
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	e7ba      	b.n	800e65c <__ieee754_log+0x64>
 800e6e6:	a38a      	add	r3, pc, #552	; (adr r3, 800e910 <__ieee754_log+0x318>)
 800e6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ec:	4650      	mov	r0, sl
 800e6ee:	4659      	mov	r1, fp
 800e6f0:	f7f1 ff82 	bl	80005f8 <__aeabi_dmul>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	499b      	ldr	r1, [pc, #620]	; (800e968 <__ieee754_log+0x370>)
 800e6fc:	f7f1 fdc4 	bl	8000288 <__aeabi_dsub>
 800e700:	4652      	mov	r2, sl
 800e702:	4606      	mov	r6, r0
 800e704:	460f      	mov	r7, r1
 800e706:	465b      	mov	r3, fp
 800e708:	4650      	mov	r0, sl
 800e70a:	4659      	mov	r1, fp
 800e70c:	f7f1 ff74 	bl	80005f8 <__aeabi_dmul>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4630      	mov	r0, r6
 800e716:	4639      	mov	r1, r7
 800e718:	f7f1 ff6e 	bl	80005f8 <__aeabi_dmul>
 800e71c:	4606      	mov	r6, r0
 800e71e:	460f      	mov	r7, r1
 800e720:	b914      	cbnz	r4, 800e728 <__ieee754_log+0x130>
 800e722:	4632      	mov	r2, r6
 800e724:	463b      	mov	r3, r7
 800e726:	e0a2      	b.n	800e86e <__ieee754_log+0x276>
 800e728:	4620      	mov	r0, r4
 800e72a:	f7f1 fefb 	bl	8000524 <__aeabi_i2d>
 800e72e:	a374      	add	r3, pc, #464	; (adr r3, 800e900 <__ieee754_log+0x308>)
 800e730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e734:	4680      	mov	r8, r0
 800e736:	4689      	mov	r9, r1
 800e738:	f7f1 ff5e 	bl	80005f8 <__aeabi_dmul>
 800e73c:	a372      	add	r3, pc, #456	; (adr r3, 800e908 <__ieee754_log+0x310>)
 800e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e742:	4604      	mov	r4, r0
 800e744:	460d      	mov	r5, r1
 800e746:	4640      	mov	r0, r8
 800e748:	4649      	mov	r1, r9
 800e74a:	f7f1 ff55 	bl	80005f8 <__aeabi_dmul>
 800e74e:	e0a7      	b.n	800e8a0 <__ieee754_log+0x2a8>
 800e750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e754:	f7f1 fd9a 	bl	800028c <__adddf3>
 800e758:	4602      	mov	r2, r0
 800e75a:	460b      	mov	r3, r1
 800e75c:	4650      	mov	r0, sl
 800e75e:	4659      	mov	r1, fp
 800e760:	f7f2 f874 	bl	800084c <__aeabi_ddiv>
 800e764:	ec41 0b18 	vmov	d8, r0, r1
 800e768:	4620      	mov	r0, r4
 800e76a:	f7f1 fedb 	bl	8000524 <__aeabi_i2d>
 800e76e:	ec53 2b18 	vmov	r2, r3, d8
 800e772:	ec41 0b19 	vmov	d9, r0, r1
 800e776:	ec51 0b18 	vmov	r0, r1, d8
 800e77a:	f7f1 ff3d 	bl	80005f8 <__aeabi_dmul>
 800e77e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e782:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e786:	9301      	str	r3, [sp, #4]
 800e788:	4602      	mov	r2, r0
 800e78a:	460b      	mov	r3, r1
 800e78c:	4680      	mov	r8, r0
 800e78e:	4689      	mov	r9, r1
 800e790:	f7f1 ff32 	bl	80005f8 <__aeabi_dmul>
 800e794:	a360      	add	r3, pc, #384	; (adr r3, 800e918 <__ieee754_log+0x320>)
 800e796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79a:	4606      	mov	r6, r0
 800e79c:	460f      	mov	r7, r1
 800e79e:	f7f1 ff2b 	bl	80005f8 <__aeabi_dmul>
 800e7a2:	a35f      	add	r3, pc, #380	; (adr r3, 800e920 <__ieee754_log+0x328>)
 800e7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a8:	f7f1 fd70 	bl	800028c <__adddf3>
 800e7ac:	4632      	mov	r2, r6
 800e7ae:	463b      	mov	r3, r7
 800e7b0:	f7f1 ff22 	bl	80005f8 <__aeabi_dmul>
 800e7b4:	a35c      	add	r3, pc, #368	; (adr r3, 800e928 <__ieee754_log+0x330>)
 800e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ba:	f7f1 fd67 	bl	800028c <__adddf3>
 800e7be:	4632      	mov	r2, r6
 800e7c0:	463b      	mov	r3, r7
 800e7c2:	f7f1 ff19 	bl	80005f8 <__aeabi_dmul>
 800e7c6:	a35a      	add	r3, pc, #360	; (adr r3, 800e930 <__ieee754_log+0x338>)
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	f7f1 fd5e 	bl	800028c <__adddf3>
 800e7d0:	4642      	mov	r2, r8
 800e7d2:	464b      	mov	r3, r9
 800e7d4:	f7f1 ff10 	bl	80005f8 <__aeabi_dmul>
 800e7d8:	a357      	add	r3, pc, #348	; (adr r3, 800e938 <__ieee754_log+0x340>)
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	4680      	mov	r8, r0
 800e7e0:	4689      	mov	r9, r1
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	f7f1 ff07 	bl	80005f8 <__aeabi_dmul>
 800e7ea:	a355      	add	r3, pc, #340	; (adr r3, 800e940 <__ieee754_log+0x348>)
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	f7f1 fd4c 	bl	800028c <__adddf3>
 800e7f4:	4632      	mov	r2, r6
 800e7f6:	463b      	mov	r3, r7
 800e7f8:	f7f1 fefe 	bl	80005f8 <__aeabi_dmul>
 800e7fc:	a352      	add	r3, pc, #328	; (adr r3, 800e948 <__ieee754_log+0x350>)
 800e7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e802:	f7f1 fd43 	bl	800028c <__adddf3>
 800e806:	4632      	mov	r2, r6
 800e808:	463b      	mov	r3, r7
 800e80a:	f7f1 fef5 	bl	80005f8 <__aeabi_dmul>
 800e80e:	460b      	mov	r3, r1
 800e810:	4602      	mov	r2, r0
 800e812:	4649      	mov	r1, r9
 800e814:	4640      	mov	r0, r8
 800e816:	f7f1 fd39 	bl	800028c <__adddf3>
 800e81a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e81e:	9b01      	ldr	r3, [sp, #4]
 800e820:	3551      	adds	r5, #81	; 0x51
 800e822:	431d      	orrs	r5, r3
 800e824:	2d00      	cmp	r5, #0
 800e826:	4680      	mov	r8, r0
 800e828:	4689      	mov	r9, r1
 800e82a:	dd48      	ble.n	800e8be <__ieee754_log+0x2c6>
 800e82c:	4b4e      	ldr	r3, [pc, #312]	; (800e968 <__ieee754_log+0x370>)
 800e82e:	2200      	movs	r2, #0
 800e830:	4650      	mov	r0, sl
 800e832:	4659      	mov	r1, fp
 800e834:	f7f1 fee0 	bl	80005f8 <__aeabi_dmul>
 800e838:	4652      	mov	r2, sl
 800e83a:	465b      	mov	r3, fp
 800e83c:	f7f1 fedc 	bl	80005f8 <__aeabi_dmul>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	4606      	mov	r6, r0
 800e846:	460f      	mov	r7, r1
 800e848:	4640      	mov	r0, r8
 800e84a:	4649      	mov	r1, r9
 800e84c:	f7f1 fd1e 	bl	800028c <__adddf3>
 800e850:	ec53 2b18 	vmov	r2, r3, d8
 800e854:	f7f1 fed0 	bl	80005f8 <__aeabi_dmul>
 800e858:	4680      	mov	r8, r0
 800e85a:	4689      	mov	r9, r1
 800e85c:	b964      	cbnz	r4, 800e878 <__ieee754_log+0x280>
 800e85e:	4602      	mov	r2, r0
 800e860:	460b      	mov	r3, r1
 800e862:	4630      	mov	r0, r6
 800e864:	4639      	mov	r1, r7
 800e866:	f7f1 fd0f 	bl	8000288 <__aeabi_dsub>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4650      	mov	r0, sl
 800e870:	4659      	mov	r1, fp
 800e872:	f7f1 fd09 	bl	8000288 <__aeabi_dsub>
 800e876:	e6d6      	b.n	800e626 <__ieee754_log+0x2e>
 800e878:	a321      	add	r3, pc, #132	; (adr r3, 800e900 <__ieee754_log+0x308>)
 800e87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87e:	ec51 0b19 	vmov	r0, r1, d9
 800e882:	f7f1 feb9 	bl	80005f8 <__aeabi_dmul>
 800e886:	a320      	add	r3, pc, #128	; (adr r3, 800e908 <__ieee754_log+0x310>)
 800e888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88c:	4604      	mov	r4, r0
 800e88e:	460d      	mov	r5, r1
 800e890:	ec51 0b19 	vmov	r0, r1, d9
 800e894:	f7f1 feb0 	bl	80005f8 <__aeabi_dmul>
 800e898:	4642      	mov	r2, r8
 800e89a:	464b      	mov	r3, r9
 800e89c:	f7f1 fcf6 	bl	800028c <__adddf3>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	4639      	mov	r1, r7
 800e8a8:	f7f1 fcee 	bl	8000288 <__aeabi_dsub>
 800e8ac:	4652      	mov	r2, sl
 800e8ae:	465b      	mov	r3, fp
 800e8b0:	f7f1 fcea 	bl	8000288 <__aeabi_dsub>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	e7d9      	b.n	800e872 <__ieee754_log+0x27a>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	4650      	mov	r0, sl
 800e8c4:	4659      	mov	r1, fp
 800e8c6:	f7f1 fcdf 	bl	8000288 <__aeabi_dsub>
 800e8ca:	ec53 2b18 	vmov	r2, r3, d8
 800e8ce:	f7f1 fe93 	bl	80005f8 <__aeabi_dmul>
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	460f      	mov	r7, r1
 800e8d6:	2c00      	cmp	r4, #0
 800e8d8:	f43f af23 	beq.w	800e722 <__ieee754_log+0x12a>
 800e8dc:	a308      	add	r3, pc, #32	; (adr r3, 800e900 <__ieee754_log+0x308>)
 800e8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e2:	ec51 0b19 	vmov	r0, r1, d9
 800e8e6:	f7f1 fe87 	bl	80005f8 <__aeabi_dmul>
 800e8ea:	a307      	add	r3, pc, #28	; (adr r3, 800e908 <__ieee754_log+0x310>)
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	460d      	mov	r5, r1
 800e8f4:	ec51 0b19 	vmov	r0, r1, d9
 800e8f8:	e727      	b.n	800e74a <__ieee754_log+0x152>
 800e8fa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e950 <__ieee754_log+0x358>
 800e8fe:	e694      	b.n	800e62a <__ieee754_log+0x32>
 800e900:	fee00000 	.word	0xfee00000
 800e904:	3fe62e42 	.word	0x3fe62e42
 800e908:	35793c76 	.word	0x35793c76
 800e90c:	3dea39ef 	.word	0x3dea39ef
 800e910:	55555555 	.word	0x55555555
 800e914:	3fd55555 	.word	0x3fd55555
 800e918:	df3e5244 	.word	0xdf3e5244
 800e91c:	3fc2f112 	.word	0x3fc2f112
 800e920:	96cb03de 	.word	0x96cb03de
 800e924:	3fc74664 	.word	0x3fc74664
 800e928:	94229359 	.word	0x94229359
 800e92c:	3fd24924 	.word	0x3fd24924
 800e930:	55555593 	.word	0x55555593
 800e934:	3fe55555 	.word	0x3fe55555
 800e938:	d078c69f 	.word	0xd078c69f
 800e93c:	3fc39a09 	.word	0x3fc39a09
 800e940:	1d8e78af 	.word	0x1d8e78af
 800e944:	3fcc71c5 	.word	0x3fcc71c5
 800e948:	9997fa04 	.word	0x9997fa04
 800e94c:	3fd99999 	.word	0x3fd99999
	...
 800e958:	c3500000 	.word	0xc3500000
 800e95c:	43500000 	.word	0x43500000
 800e960:	7fefffff 	.word	0x7fefffff
 800e964:	3ff00000 	.word	0x3ff00000
 800e968:	3fe00000 	.word	0x3fe00000
 800e96c:	00000000 	.word	0x00000000

0800e970 <nan>:
 800e970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e978 <nan+0x8>
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	00000000 	.word	0x00000000
 800e97c:	7ff80000 	.word	0x7ff80000

0800e980 <__errno>:
 800e980:	4b01      	ldr	r3, [pc, #4]	; (800e988 <__errno+0x8>)
 800e982:	6818      	ldr	r0, [r3, #0]
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	2000002c 	.word	0x2000002c

0800e98c <__libc_init_array>:
 800e98c:	b570      	push	{r4, r5, r6, lr}
 800e98e:	4d0d      	ldr	r5, [pc, #52]	; (800e9c4 <__libc_init_array+0x38>)
 800e990:	4c0d      	ldr	r4, [pc, #52]	; (800e9c8 <__libc_init_array+0x3c>)
 800e992:	1b64      	subs	r4, r4, r5
 800e994:	10a4      	asrs	r4, r4, #2
 800e996:	2600      	movs	r6, #0
 800e998:	42a6      	cmp	r6, r4
 800e99a:	d109      	bne.n	800e9b0 <__libc_init_array+0x24>
 800e99c:	4d0b      	ldr	r5, [pc, #44]	; (800e9cc <__libc_init_array+0x40>)
 800e99e:	4c0c      	ldr	r4, [pc, #48]	; (800e9d0 <__libc_init_array+0x44>)
 800e9a0:	f002 feba 	bl	8011718 <_init>
 800e9a4:	1b64      	subs	r4, r4, r5
 800e9a6:	10a4      	asrs	r4, r4, #2
 800e9a8:	2600      	movs	r6, #0
 800e9aa:	42a6      	cmp	r6, r4
 800e9ac:	d105      	bne.n	800e9ba <__libc_init_array+0x2e>
 800e9ae:	bd70      	pop	{r4, r5, r6, pc}
 800e9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9b4:	4798      	blx	r3
 800e9b6:	3601      	adds	r6, #1
 800e9b8:	e7ee      	b.n	800e998 <__libc_init_array+0xc>
 800e9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9be:	4798      	blx	r3
 800e9c0:	3601      	adds	r6, #1
 800e9c2:	e7f2      	b.n	800e9aa <__libc_init_array+0x1e>
 800e9c4:	08012b7c 	.word	0x08012b7c
 800e9c8:	08012b7c 	.word	0x08012b7c
 800e9cc:	08012b7c 	.word	0x08012b7c
 800e9d0:	08012b80 	.word	0x08012b80

0800e9d4 <malloc>:
 800e9d4:	4b02      	ldr	r3, [pc, #8]	; (800e9e0 <malloc+0xc>)
 800e9d6:	4601      	mov	r1, r0
 800e9d8:	6818      	ldr	r0, [r3, #0]
 800e9da:	f000 b871 	b.w	800eac0 <_malloc_r>
 800e9de:	bf00      	nop
 800e9e0:	2000002c 	.word	0x2000002c

0800e9e4 <free>:
 800e9e4:	4b02      	ldr	r3, [pc, #8]	; (800e9f0 <free+0xc>)
 800e9e6:	4601      	mov	r1, r0
 800e9e8:	6818      	ldr	r0, [r3, #0]
 800e9ea:	f000 b819 	b.w	800ea20 <_free_r>
 800e9ee:	bf00      	nop
 800e9f0:	2000002c 	.word	0x2000002c

0800e9f4 <memcpy>:
 800e9f4:	440a      	add	r2, r1
 800e9f6:	4291      	cmp	r1, r2
 800e9f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9fc:	d100      	bne.n	800ea00 <memcpy+0xc>
 800e9fe:	4770      	bx	lr
 800ea00:	b510      	push	{r4, lr}
 800ea02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea0a:	4291      	cmp	r1, r2
 800ea0c:	d1f9      	bne.n	800ea02 <memcpy+0xe>
 800ea0e:	bd10      	pop	{r4, pc}

0800ea10 <memset>:
 800ea10:	4402      	add	r2, r0
 800ea12:	4603      	mov	r3, r0
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d100      	bne.n	800ea1a <memset+0xa>
 800ea18:	4770      	bx	lr
 800ea1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ea1e:	e7f9      	b.n	800ea14 <memset+0x4>

0800ea20 <_free_r>:
 800ea20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea22:	2900      	cmp	r1, #0
 800ea24:	d048      	beq.n	800eab8 <_free_r+0x98>
 800ea26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea2a:	9001      	str	r0, [sp, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ea32:	bfb8      	it	lt
 800ea34:	18e4      	addlt	r4, r4, r3
 800ea36:	f001 fbb3 	bl	80101a0 <__malloc_lock>
 800ea3a:	4a20      	ldr	r2, [pc, #128]	; (800eabc <_free_r+0x9c>)
 800ea3c:	9801      	ldr	r0, [sp, #4]
 800ea3e:	6813      	ldr	r3, [r2, #0]
 800ea40:	4615      	mov	r5, r2
 800ea42:	b933      	cbnz	r3, 800ea52 <_free_r+0x32>
 800ea44:	6063      	str	r3, [r4, #4]
 800ea46:	6014      	str	r4, [r2, #0]
 800ea48:	b003      	add	sp, #12
 800ea4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea4e:	f001 bbad 	b.w	80101ac <__malloc_unlock>
 800ea52:	42a3      	cmp	r3, r4
 800ea54:	d90b      	bls.n	800ea6e <_free_r+0x4e>
 800ea56:	6821      	ldr	r1, [r4, #0]
 800ea58:	1862      	adds	r2, r4, r1
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	bf04      	itt	eq
 800ea5e:	681a      	ldreq	r2, [r3, #0]
 800ea60:	685b      	ldreq	r3, [r3, #4]
 800ea62:	6063      	str	r3, [r4, #4]
 800ea64:	bf04      	itt	eq
 800ea66:	1852      	addeq	r2, r2, r1
 800ea68:	6022      	streq	r2, [r4, #0]
 800ea6a:	602c      	str	r4, [r5, #0]
 800ea6c:	e7ec      	b.n	800ea48 <_free_r+0x28>
 800ea6e:	461a      	mov	r2, r3
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	b10b      	cbz	r3, 800ea78 <_free_r+0x58>
 800ea74:	42a3      	cmp	r3, r4
 800ea76:	d9fa      	bls.n	800ea6e <_free_r+0x4e>
 800ea78:	6811      	ldr	r1, [r2, #0]
 800ea7a:	1855      	adds	r5, r2, r1
 800ea7c:	42a5      	cmp	r5, r4
 800ea7e:	d10b      	bne.n	800ea98 <_free_r+0x78>
 800ea80:	6824      	ldr	r4, [r4, #0]
 800ea82:	4421      	add	r1, r4
 800ea84:	1854      	adds	r4, r2, r1
 800ea86:	42a3      	cmp	r3, r4
 800ea88:	6011      	str	r1, [r2, #0]
 800ea8a:	d1dd      	bne.n	800ea48 <_free_r+0x28>
 800ea8c:	681c      	ldr	r4, [r3, #0]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	6053      	str	r3, [r2, #4]
 800ea92:	4421      	add	r1, r4
 800ea94:	6011      	str	r1, [r2, #0]
 800ea96:	e7d7      	b.n	800ea48 <_free_r+0x28>
 800ea98:	d902      	bls.n	800eaa0 <_free_r+0x80>
 800ea9a:	230c      	movs	r3, #12
 800ea9c:	6003      	str	r3, [r0, #0]
 800ea9e:	e7d3      	b.n	800ea48 <_free_r+0x28>
 800eaa0:	6825      	ldr	r5, [r4, #0]
 800eaa2:	1961      	adds	r1, r4, r5
 800eaa4:	428b      	cmp	r3, r1
 800eaa6:	bf04      	itt	eq
 800eaa8:	6819      	ldreq	r1, [r3, #0]
 800eaaa:	685b      	ldreq	r3, [r3, #4]
 800eaac:	6063      	str	r3, [r4, #4]
 800eaae:	bf04      	itt	eq
 800eab0:	1949      	addeq	r1, r1, r5
 800eab2:	6021      	streq	r1, [r4, #0]
 800eab4:	6054      	str	r4, [r2, #4]
 800eab6:	e7c7      	b.n	800ea48 <_free_r+0x28>
 800eab8:	b003      	add	sp, #12
 800eaba:	bd30      	pop	{r4, r5, pc}
 800eabc:	20000464 	.word	0x20000464

0800eac0 <_malloc_r>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	1ccd      	adds	r5, r1, #3
 800eac4:	f025 0503 	bic.w	r5, r5, #3
 800eac8:	3508      	adds	r5, #8
 800eaca:	2d0c      	cmp	r5, #12
 800eacc:	bf38      	it	cc
 800eace:	250c      	movcc	r5, #12
 800ead0:	2d00      	cmp	r5, #0
 800ead2:	4606      	mov	r6, r0
 800ead4:	db01      	blt.n	800eada <_malloc_r+0x1a>
 800ead6:	42a9      	cmp	r1, r5
 800ead8:	d903      	bls.n	800eae2 <_malloc_r+0x22>
 800eada:	230c      	movs	r3, #12
 800eadc:	6033      	str	r3, [r6, #0]
 800eade:	2000      	movs	r0, #0
 800eae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eae2:	f001 fb5d 	bl	80101a0 <__malloc_lock>
 800eae6:	4921      	ldr	r1, [pc, #132]	; (800eb6c <_malloc_r+0xac>)
 800eae8:	680a      	ldr	r2, [r1, #0]
 800eaea:	4614      	mov	r4, r2
 800eaec:	b99c      	cbnz	r4, 800eb16 <_malloc_r+0x56>
 800eaee:	4f20      	ldr	r7, [pc, #128]	; (800eb70 <_malloc_r+0xb0>)
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	b923      	cbnz	r3, 800eafe <_malloc_r+0x3e>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f000 fca6 	bl	800f448 <_sbrk_r>
 800eafc:	6038      	str	r0, [r7, #0]
 800eafe:	4629      	mov	r1, r5
 800eb00:	4630      	mov	r0, r6
 800eb02:	f000 fca1 	bl	800f448 <_sbrk_r>
 800eb06:	1c43      	adds	r3, r0, #1
 800eb08:	d123      	bne.n	800eb52 <_malloc_r+0x92>
 800eb0a:	230c      	movs	r3, #12
 800eb0c:	6033      	str	r3, [r6, #0]
 800eb0e:	4630      	mov	r0, r6
 800eb10:	f001 fb4c 	bl	80101ac <__malloc_unlock>
 800eb14:	e7e3      	b.n	800eade <_malloc_r+0x1e>
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	1b5b      	subs	r3, r3, r5
 800eb1a:	d417      	bmi.n	800eb4c <_malloc_r+0x8c>
 800eb1c:	2b0b      	cmp	r3, #11
 800eb1e:	d903      	bls.n	800eb28 <_malloc_r+0x68>
 800eb20:	6023      	str	r3, [r4, #0]
 800eb22:	441c      	add	r4, r3
 800eb24:	6025      	str	r5, [r4, #0]
 800eb26:	e004      	b.n	800eb32 <_malloc_r+0x72>
 800eb28:	6863      	ldr	r3, [r4, #4]
 800eb2a:	42a2      	cmp	r2, r4
 800eb2c:	bf0c      	ite	eq
 800eb2e:	600b      	streq	r3, [r1, #0]
 800eb30:	6053      	strne	r3, [r2, #4]
 800eb32:	4630      	mov	r0, r6
 800eb34:	f001 fb3a 	bl	80101ac <__malloc_unlock>
 800eb38:	f104 000b 	add.w	r0, r4, #11
 800eb3c:	1d23      	adds	r3, r4, #4
 800eb3e:	f020 0007 	bic.w	r0, r0, #7
 800eb42:	1ac2      	subs	r2, r0, r3
 800eb44:	d0cc      	beq.n	800eae0 <_malloc_r+0x20>
 800eb46:	1a1b      	subs	r3, r3, r0
 800eb48:	50a3      	str	r3, [r4, r2]
 800eb4a:	e7c9      	b.n	800eae0 <_malloc_r+0x20>
 800eb4c:	4622      	mov	r2, r4
 800eb4e:	6864      	ldr	r4, [r4, #4]
 800eb50:	e7cc      	b.n	800eaec <_malloc_r+0x2c>
 800eb52:	1cc4      	adds	r4, r0, #3
 800eb54:	f024 0403 	bic.w	r4, r4, #3
 800eb58:	42a0      	cmp	r0, r4
 800eb5a:	d0e3      	beq.n	800eb24 <_malloc_r+0x64>
 800eb5c:	1a21      	subs	r1, r4, r0
 800eb5e:	4630      	mov	r0, r6
 800eb60:	f000 fc72 	bl	800f448 <_sbrk_r>
 800eb64:	3001      	adds	r0, #1
 800eb66:	d1dd      	bne.n	800eb24 <_malloc_r+0x64>
 800eb68:	e7cf      	b.n	800eb0a <_malloc_r+0x4a>
 800eb6a:	bf00      	nop
 800eb6c:	20000464 	.word	0x20000464
 800eb70:	20000468 	.word	0x20000468

0800eb74 <__cvt>:
 800eb74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb78:	ec55 4b10 	vmov	r4, r5, d0
 800eb7c:	2d00      	cmp	r5, #0
 800eb7e:	460e      	mov	r6, r1
 800eb80:	4619      	mov	r1, r3
 800eb82:	462b      	mov	r3, r5
 800eb84:	bfbb      	ittet	lt
 800eb86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eb8a:	461d      	movlt	r5, r3
 800eb8c:	2300      	movge	r3, #0
 800eb8e:	232d      	movlt	r3, #45	; 0x2d
 800eb90:	700b      	strb	r3, [r1, #0]
 800eb92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eb98:	4691      	mov	r9, r2
 800eb9a:	f023 0820 	bic.w	r8, r3, #32
 800eb9e:	bfbc      	itt	lt
 800eba0:	4622      	movlt	r2, r4
 800eba2:	4614      	movlt	r4, r2
 800eba4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eba8:	d005      	beq.n	800ebb6 <__cvt+0x42>
 800ebaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ebae:	d100      	bne.n	800ebb2 <__cvt+0x3e>
 800ebb0:	3601      	adds	r6, #1
 800ebb2:	2102      	movs	r1, #2
 800ebb4:	e000      	b.n	800ebb8 <__cvt+0x44>
 800ebb6:	2103      	movs	r1, #3
 800ebb8:	ab03      	add	r3, sp, #12
 800ebba:	9301      	str	r3, [sp, #4]
 800ebbc:	ab02      	add	r3, sp, #8
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	ec45 4b10 	vmov	d0, r4, r5
 800ebc4:	4653      	mov	r3, sl
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	f000 fcfa 	bl	800f5c0 <_dtoa_r>
 800ebcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ebd0:	4607      	mov	r7, r0
 800ebd2:	d102      	bne.n	800ebda <__cvt+0x66>
 800ebd4:	f019 0f01 	tst.w	r9, #1
 800ebd8:	d022      	beq.n	800ec20 <__cvt+0xac>
 800ebda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ebde:	eb07 0906 	add.w	r9, r7, r6
 800ebe2:	d110      	bne.n	800ec06 <__cvt+0x92>
 800ebe4:	783b      	ldrb	r3, [r7, #0]
 800ebe6:	2b30      	cmp	r3, #48	; 0x30
 800ebe8:	d10a      	bne.n	800ec00 <__cvt+0x8c>
 800ebea:	2200      	movs	r2, #0
 800ebec:	2300      	movs	r3, #0
 800ebee:	4620      	mov	r0, r4
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	f7f1 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebf6:	b918      	cbnz	r0, 800ec00 <__cvt+0x8c>
 800ebf8:	f1c6 0601 	rsb	r6, r6, #1
 800ebfc:	f8ca 6000 	str.w	r6, [sl]
 800ec00:	f8da 3000 	ldr.w	r3, [sl]
 800ec04:	4499      	add	r9, r3
 800ec06:	2200      	movs	r2, #0
 800ec08:	2300      	movs	r3, #0
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	f7f1 ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec12:	b108      	cbz	r0, 800ec18 <__cvt+0xa4>
 800ec14:	f8cd 900c 	str.w	r9, [sp, #12]
 800ec18:	2230      	movs	r2, #48	; 0x30
 800ec1a:	9b03      	ldr	r3, [sp, #12]
 800ec1c:	454b      	cmp	r3, r9
 800ec1e:	d307      	bcc.n	800ec30 <__cvt+0xbc>
 800ec20:	9b03      	ldr	r3, [sp, #12]
 800ec22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec24:	1bdb      	subs	r3, r3, r7
 800ec26:	4638      	mov	r0, r7
 800ec28:	6013      	str	r3, [r2, #0]
 800ec2a:	b004      	add	sp, #16
 800ec2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec30:	1c59      	adds	r1, r3, #1
 800ec32:	9103      	str	r1, [sp, #12]
 800ec34:	701a      	strb	r2, [r3, #0]
 800ec36:	e7f0      	b.n	800ec1a <__cvt+0xa6>

0800ec38 <__exponent>:
 800ec38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2900      	cmp	r1, #0
 800ec3e:	bfb8      	it	lt
 800ec40:	4249      	neglt	r1, r1
 800ec42:	f803 2b02 	strb.w	r2, [r3], #2
 800ec46:	bfb4      	ite	lt
 800ec48:	222d      	movlt	r2, #45	; 0x2d
 800ec4a:	222b      	movge	r2, #43	; 0x2b
 800ec4c:	2909      	cmp	r1, #9
 800ec4e:	7042      	strb	r2, [r0, #1]
 800ec50:	dd2a      	ble.n	800eca8 <__exponent+0x70>
 800ec52:	f10d 0407 	add.w	r4, sp, #7
 800ec56:	46a4      	mov	ip, r4
 800ec58:	270a      	movs	r7, #10
 800ec5a:	46a6      	mov	lr, r4
 800ec5c:	460a      	mov	r2, r1
 800ec5e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ec62:	fb07 1516 	mls	r5, r7, r6, r1
 800ec66:	3530      	adds	r5, #48	; 0x30
 800ec68:	2a63      	cmp	r2, #99	; 0x63
 800ec6a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ec6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ec72:	4631      	mov	r1, r6
 800ec74:	dcf1      	bgt.n	800ec5a <__exponent+0x22>
 800ec76:	3130      	adds	r1, #48	; 0x30
 800ec78:	f1ae 0502 	sub.w	r5, lr, #2
 800ec7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ec80:	1c44      	adds	r4, r0, #1
 800ec82:	4629      	mov	r1, r5
 800ec84:	4561      	cmp	r1, ip
 800ec86:	d30a      	bcc.n	800ec9e <__exponent+0x66>
 800ec88:	f10d 0209 	add.w	r2, sp, #9
 800ec8c:	eba2 020e 	sub.w	r2, r2, lr
 800ec90:	4565      	cmp	r5, ip
 800ec92:	bf88      	it	hi
 800ec94:	2200      	movhi	r2, #0
 800ec96:	4413      	add	r3, r2
 800ec98:	1a18      	subs	r0, r3, r0
 800ec9a:	b003      	add	sp, #12
 800ec9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eca2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eca6:	e7ed      	b.n	800ec84 <__exponent+0x4c>
 800eca8:	2330      	movs	r3, #48	; 0x30
 800ecaa:	3130      	adds	r1, #48	; 0x30
 800ecac:	7083      	strb	r3, [r0, #2]
 800ecae:	70c1      	strb	r1, [r0, #3]
 800ecb0:	1d03      	adds	r3, r0, #4
 800ecb2:	e7f1      	b.n	800ec98 <__exponent+0x60>

0800ecb4 <_printf_float>:
 800ecb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb8:	ed2d 8b02 	vpush	{d8}
 800ecbc:	b08d      	sub	sp, #52	; 0x34
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ecc4:	4616      	mov	r6, r2
 800ecc6:	461f      	mov	r7, r3
 800ecc8:	4605      	mov	r5, r0
 800ecca:	f001 fa65 	bl	8010198 <_localeconv_r>
 800ecce:	f8d0 a000 	ldr.w	sl, [r0]
 800ecd2:	4650      	mov	r0, sl
 800ecd4:	f7f1 fa7c 	bl	80001d0 <strlen>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	930a      	str	r3, [sp, #40]	; 0x28
 800ecdc:	6823      	ldr	r3, [r4, #0]
 800ecde:	9305      	str	r3, [sp, #20]
 800ece0:	f8d8 3000 	ldr.w	r3, [r8]
 800ece4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ece8:	3307      	adds	r3, #7
 800ecea:	f023 0307 	bic.w	r3, r3, #7
 800ecee:	f103 0208 	add.w	r2, r3, #8
 800ecf2:	f8c8 2000 	str.w	r2, [r8]
 800ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ecfe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ed02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed06:	9307      	str	r3, [sp, #28]
 800ed08:	f8cd 8018 	str.w	r8, [sp, #24]
 800ed0c:	ee08 0a10 	vmov	s16, r0
 800ed10:	4b9f      	ldr	r3, [pc, #636]	; (800ef90 <_printf_float+0x2dc>)
 800ed12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed16:	f04f 32ff 	mov.w	r2, #4294967295
 800ed1a:	f7f1 ff07 	bl	8000b2c <__aeabi_dcmpun>
 800ed1e:	bb88      	cbnz	r0, 800ed84 <_printf_float+0xd0>
 800ed20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed24:	4b9a      	ldr	r3, [pc, #616]	; (800ef90 <_printf_float+0x2dc>)
 800ed26:	f04f 32ff 	mov.w	r2, #4294967295
 800ed2a:	f7f1 fee1 	bl	8000af0 <__aeabi_dcmple>
 800ed2e:	bb48      	cbnz	r0, 800ed84 <_printf_float+0xd0>
 800ed30:	2200      	movs	r2, #0
 800ed32:	2300      	movs	r3, #0
 800ed34:	4640      	mov	r0, r8
 800ed36:	4649      	mov	r1, r9
 800ed38:	f7f1 fed0 	bl	8000adc <__aeabi_dcmplt>
 800ed3c:	b110      	cbz	r0, 800ed44 <_printf_float+0x90>
 800ed3e:	232d      	movs	r3, #45	; 0x2d
 800ed40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed44:	4b93      	ldr	r3, [pc, #588]	; (800ef94 <_printf_float+0x2e0>)
 800ed46:	4894      	ldr	r0, [pc, #592]	; (800ef98 <_printf_float+0x2e4>)
 800ed48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ed4c:	bf94      	ite	ls
 800ed4e:	4698      	movls	r8, r3
 800ed50:	4680      	movhi	r8, r0
 800ed52:	2303      	movs	r3, #3
 800ed54:	6123      	str	r3, [r4, #16]
 800ed56:	9b05      	ldr	r3, [sp, #20]
 800ed58:	f023 0204 	bic.w	r2, r3, #4
 800ed5c:	6022      	str	r2, [r4, #0]
 800ed5e:	f04f 0900 	mov.w	r9, #0
 800ed62:	9700      	str	r7, [sp, #0]
 800ed64:	4633      	mov	r3, r6
 800ed66:	aa0b      	add	r2, sp, #44	; 0x2c
 800ed68:	4621      	mov	r1, r4
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f000 f9d8 	bl	800f120 <_printf_common>
 800ed70:	3001      	adds	r0, #1
 800ed72:	f040 8090 	bne.w	800ee96 <_printf_float+0x1e2>
 800ed76:	f04f 30ff 	mov.w	r0, #4294967295
 800ed7a:	b00d      	add	sp, #52	; 0x34
 800ed7c:	ecbd 8b02 	vpop	{d8}
 800ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed84:	4642      	mov	r2, r8
 800ed86:	464b      	mov	r3, r9
 800ed88:	4640      	mov	r0, r8
 800ed8a:	4649      	mov	r1, r9
 800ed8c:	f7f1 fece 	bl	8000b2c <__aeabi_dcmpun>
 800ed90:	b140      	cbz	r0, 800eda4 <_printf_float+0xf0>
 800ed92:	464b      	mov	r3, r9
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	bfbc      	itt	lt
 800ed98:	232d      	movlt	r3, #45	; 0x2d
 800ed9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ed9e:	487f      	ldr	r0, [pc, #508]	; (800ef9c <_printf_float+0x2e8>)
 800eda0:	4b7f      	ldr	r3, [pc, #508]	; (800efa0 <_printf_float+0x2ec>)
 800eda2:	e7d1      	b.n	800ed48 <_printf_float+0x94>
 800eda4:	6863      	ldr	r3, [r4, #4]
 800eda6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800edaa:	9206      	str	r2, [sp, #24]
 800edac:	1c5a      	adds	r2, r3, #1
 800edae:	d13f      	bne.n	800ee30 <_printf_float+0x17c>
 800edb0:	2306      	movs	r3, #6
 800edb2:	6063      	str	r3, [r4, #4]
 800edb4:	9b05      	ldr	r3, [sp, #20]
 800edb6:	6861      	ldr	r1, [r4, #4]
 800edb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800edbc:	2300      	movs	r3, #0
 800edbe:	9303      	str	r3, [sp, #12]
 800edc0:	ab0a      	add	r3, sp, #40	; 0x28
 800edc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800edc6:	ab09      	add	r3, sp, #36	; 0x24
 800edc8:	ec49 8b10 	vmov	d0, r8, r9
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	6022      	str	r2, [r4, #0]
 800edd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800edd4:	4628      	mov	r0, r5
 800edd6:	f7ff fecd 	bl	800eb74 <__cvt>
 800edda:	9b06      	ldr	r3, [sp, #24]
 800eddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800edde:	2b47      	cmp	r3, #71	; 0x47
 800ede0:	4680      	mov	r8, r0
 800ede2:	d108      	bne.n	800edf6 <_printf_float+0x142>
 800ede4:	1cc8      	adds	r0, r1, #3
 800ede6:	db02      	blt.n	800edee <_printf_float+0x13a>
 800ede8:	6863      	ldr	r3, [r4, #4]
 800edea:	4299      	cmp	r1, r3
 800edec:	dd41      	ble.n	800ee72 <_printf_float+0x1be>
 800edee:	f1ab 0b02 	sub.w	fp, fp, #2
 800edf2:	fa5f fb8b 	uxtb.w	fp, fp
 800edf6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800edfa:	d820      	bhi.n	800ee3e <_printf_float+0x18a>
 800edfc:	3901      	subs	r1, #1
 800edfe:	465a      	mov	r2, fp
 800ee00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ee04:	9109      	str	r1, [sp, #36]	; 0x24
 800ee06:	f7ff ff17 	bl	800ec38 <__exponent>
 800ee0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee0c:	1813      	adds	r3, r2, r0
 800ee0e:	2a01      	cmp	r2, #1
 800ee10:	4681      	mov	r9, r0
 800ee12:	6123      	str	r3, [r4, #16]
 800ee14:	dc02      	bgt.n	800ee1c <_printf_float+0x168>
 800ee16:	6822      	ldr	r2, [r4, #0]
 800ee18:	07d2      	lsls	r2, r2, #31
 800ee1a:	d501      	bpl.n	800ee20 <_printf_float+0x16c>
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	6123      	str	r3, [r4, #16]
 800ee20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d09c      	beq.n	800ed62 <_printf_float+0xae>
 800ee28:	232d      	movs	r3, #45	; 0x2d
 800ee2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee2e:	e798      	b.n	800ed62 <_printf_float+0xae>
 800ee30:	9a06      	ldr	r2, [sp, #24]
 800ee32:	2a47      	cmp	r2, #71	; 0x47
 800ee34:	d1be      	bne.n	800edb4 <_printf_float+0x100>
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d1bc      	bne.n	800edb4 <_printf_float+0x100>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e7b9      	b.n	800edb2 <_printf_float+0xfe>
 800ee3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ee42:	d118      	bne.n	800ee76 <_printf_float+0x1c2>
 800ee44:	2900      	cmp	r1, #0
 800ee46:	6863      	ldr	r3, [r4, #4]
 800ee48:	dd0b      	ble.n	800ee62 <_printf_float+0x1ae>
 800ee4a:	6121      	str	r1, [r4, #16]
 800ee4c:	b913      	cbnz	r3, 800ee54 <_printf_float+0x1a0>
 800ee4e:	6822      	ldr	r2, [r4, #0]
 800ee50:	07d0      	lsls	r0, r2, #31
 800ee52:	d502      	bpl.n	800ee5a <_printf_float+0x1a6>
 800ee54:	3301      	adds	r3, #1
 800ee56:	440b      	add	r3, r1
 800ee58:	6123      	str	r3, [r4, #16]
 800ee5a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ee5c:	f04f 0900 	mov.w	r9, #0
 800ee60:	e7de      	b.n	800ee20 <_printf_float+0x16c>
 800ee62:	b913      	cbnz	r3, 800ee6a <_printf_float+0x1b6>
 800ee64:	6822      	ldr	r2, [r4, #0]
 800ee66:	07d2      	lsls	r2, r2, #31
 800ee68:	d501      	bpl.n	800ee6e <_printf_float+0x1ba>
 800ee6a:	3302      	adds	r3, #2
 800ee6c:	e7f4      	b.n	800ee58 <_printf_float+0x1a4>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e7f2      	b.n	800ee58 <_printf_float+0x1a4>
 800ee72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ee76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee78:	4299      	cmp	r1, r3
 800ee7a:	db05      	blt.n	800ee88 <_printf_float+0x1d4>
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	6121      	str	r1, [r4, #16]
 800ee80:	07d8      	lsls	r0, r3, #31
 800ee82:	d5ea      	bpl.n	800ee5a <_printf_float+0x1a6>
 800ee84:	1c4b      	adds	r3, r1, #1
 800ee86:	e7e7      	b.n	800ee58 <_printf_float+0x1a4>
 800ee88:	2900      	cmp	r1, #0
 800ee8a:	bfd4      	ite	le
 800ee8c:	f1c1 0202 	rsble	r2, r1, #2
 800ee90:	2201      	movgt	r2, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	e7e0      	b.n	800ee58 <_printf_float+0x1a4>
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	055a      	lsls	r2, r3, #21
 800ee9a:	d407      	bmi.n	800eeac <_printf_float+0x1f8>
 800ee9c:	6923      	ldr	r3, [r4, #16]
 800ee9e:	4642      	mov	r2, r8
 800eea0:	4631      	mov	r1, r6
 800eea2:	4628      	mov	r0, r5
 800eea4:	47b8      	blx	r7
 800eea6:	3001      	adds	r0, #1
 800eea8:	d12c      	bne.n	800ef04 <_printf_float+0x250>
 800eeaa:	e764      	b.n	800ed76 <_printf_float+0xc2>
 800eeac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eeb0:	f240 80e0 	bls.w	800f074 <_printf_float+0x3c0>
 800eeb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eeb8:	2200      	movs	r2, #0
 800eeba:	2300      	movs	r3, #0
 800eebc:	f7f1 fe04 	bl	8000ac8 <__aeabi_dcmpeq>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	d034      	beq.n	800ef2e <_printf_float+0x27a>
 800eec4:	4a37      	ldr	r2, [pc, #220]	; (800efa4 <_printf_float+0x2f0>)
 800eec6:	2301      	movs	r3, #1
 800eec8:	4631      	mov	r1, r6
 800eeca:	4628      	mov	r0, r5
 800eecc:	47b8      	blx	r7
 800eece:	3001      	adds	r0, #1
 800eed0:	f43f af51 	beq.w	800ed76 <_printf_float+0xc2>
 800eed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eed8:	429a      	cmp	r2, r3
 800eeda:	db02      	blt.n	800eee2 <_printf_float+0x22e>
 800eedc:	6823      	ldr	r3, [r4, #0]
 800eede:	07d8      	lsls	r0, r3, #31
 800eee0:	d510      	bpl.n	800ef04 <_printf_float+0x250>
 800eee2:	ee18 3a10 	vmov	r3, s16
 800eee6:	4652      	mov	r2, sl
 800eee8:	4631      	mov	r1, r6
 800eeea:	4628      	mov	r0, r5
 800eeec:	47b8      	blx	r7
 800eeee:	3001      	adds	r0, #1
 800eef0:	f43f af41 	beq.w	800ed76 <_printf_float+0xc2>
 800eef4:	f04f 0800 	mov.w	r8, #0
 800eef8:	f104 091a 	add.w	r9, r4, #26
 800eefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eefe:	3b01      	subs	r3, #1
 800ef00:	4543      	cmp	r3, r8
 800ef02:	dc09      	bgt.n	800ef18 <_printf_float+0x264>
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	079b      	lsls	r3, r3, #30
 800ef08:	f100 8105 	bmi.w	800f116 <_printf_float+0x462>
 800ef0c:	68e0      	ldr	r0, [r4, #12]
 800ef0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef10:	4298      	cmp	r0, r3
 800ef12:	bfb8      	it	lt
 800ef14:	4618      	movlt	r0, r3
 800ef16:	e730      	b.n	800ed7a <_printf_float+0xc6>
 800ef18:	2301      	movs	r3, #1
 800ef1a:	464a      	mov	r2, r9
 800ef1c:	4631      	mov	r1, r6
 800ef1e:	4628      	mov	r0, r5
 800ef20:	47b8      	blx	r7
 800ef22:	3001      	adds	r0, #1
 800ef24:	f43f af27 	beq.w	800ed76 <_printf_float+0xc2>
 800ef28:	f108 0801 	add.w	r8, r8, #1
 800ef2c:	e7e6      	b.n	800eefc <_printf_float+0x248>
 800ef2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dc39      	bgt.n	800efa8 <_printf_float+0x2f4>
 800ef34:	4a1b      	ldr	r2, [pc, #108]	; (800efa4 <_printf_float+0x2f0>)
 800ef36:	2301      	movs	r3, #1
 800ef38:	4631      	mov	r1, r6
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	47b8      	blx	r7
 800ef3e:	3001      	adds	r0, #1
 800ef40:	f43f af19 	beq.w	800ed76 <_printf_float+0xc2>
 800ef44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	d102      	bne.n	800ef52 <_printf_float+0x29e>
 800ef4c:	6823      	ldr	r3, [r4, #0]
 800ef4e:	07d9      	lsls	r1, r3, #31
 800ef50:	d5d8      	bpl.n	800ef04 <_printf_float+0x250>
 800ef52:	ee18 3a10 	vmov	r3, s16
 800ef56:	4652      	mov	r2, sl
 800ef58:	4631      	mov	r1, r6
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	47b8      	blx	r7
 800ef5e:	3001      	adds	r0, #1
 800ef60:	f43f af09 	beq.w	800ed76 <_printf_float+0xc2>
 800ef64:	f04f 0900 	mov.w	r9, #0
 800ef68:	f104 0a1a 	add.w	sl, r4, #26
 800ef6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef6e:	425b      	negs	r3, r3
 800ef70:	454b      	cmp	r3, r9
 800ef72:	dc01      	bgt.n	800ef78 <_printf_float+0x2c4>
 800ef74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef76:	e792      	b.n	800ee9e <_printf_float+0x1ea>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	4652      	mov	r2, sl
 800ef7c:	4631      	mov	r1, r6
 800ef7e:	4628      	mov	r0, r5
 800ef80:	47b8      	blx	r7
 800ef82:	3001      	adds	r0, #1
 800ef84:	f43f aef7 	beq.w	800ed76 <_printf_float+0xc2>
 800ef88:	f109 0901 	add.w	r9, r9, #1
 800ef8c:	e7ee      	b.n	800ef6c <_printf_float+0x2b8>
 800ef8e:	bf00      	nop
 800ef90:	7fefffff 	.word	0x7fefffff
 800ef94:	0801279c 	.word	0x0801279c
 800ef98:	080127a0 	.word	0x080127a0
 800ef9c:	080127a8 	.word	0x080127a8
 800efa0:	080127a4 	.word	0x080127a4
 800efa4:	080127ac 	.word	0x080127ac
 800efa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800efac:	429a      	cmp	r2, r3
 800efae:	bfa8      	it	ge
 800efb0:	461a      	movge	r2, r3
 800efb2:	2a00      	cmp	r2, #0
 800efb4:	4691      	mov	r9, r2
 800efb6:	dc37      	bgt.n	800f028 <_printf_float+0x374>
 800efb8:	f04f 0b00 	mov.w	fp, #0
 800efbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800efc0:	f104 021a 	add.w	r2, r4, #26
 800efc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800efc6:	9305      	str	r3, [sp, #20]
 800efc8:	eba3 0309 	sub.w	r3, r3, r9
 800efcc:	455b      	cmp	r3, fp
 800efce:	dc33      	bgt.n	800f038 <_printf_float+0x384>
 800efd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efd4:	429a      	cmp	r2, r3
 800efd6:	db3b      	blt.n	800f050 <_printf_float+0x39c>
 800efd8:	6823      	ldr	r3, [r4, #0]
 800efda:	07da      	lsls	r2, r3, #31
 800efdc:	d438      	bmi.n	800f050 <_printf_float+0x39c>
 800efde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efe0:	9b05      	ldr	r3, [sp, #20]
 800efe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efe4:	1ad3      	subs	r3, r2, r3
 800efe6:	eba2 0901 	sub.w	r9, r2, r1
 800efea:	4599      	cmp	r9, r3
 800efec:	bfa8      	it	ge
 800efee:	4699      	movge	r9, r3
 800eff0:	f1b9 0f00 	cmp.w	r9, #0
 800eff4:	dc35      	bgt.n	800f062 <_printf_float+0x3ae>
 800eff6:	f04f 0800 	mov.w	r8, #0
 800effa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800effe:	f104 0a1a 	add.w	sl, r4, #26
 800f002:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f006:	1a9b      	subs	r3, r3, r2
 800f008:	eba3 0309 	sub.w	r3, r3, r9
 800f00c:	4543      	cmp	r3, r8
 800f00e:	f77f af79 	ble.w	800ef04 <_printf_float+0x250>
 800f012:	2301      	movs	r3, #1
 800f014:	4652      	mov	r2, sl
 800f016:	4631      	mov	r1, r6
 800f018:	4628      	mov	r0, r5
 800f01a:	47b8      	blx	r7
 800f01c:	3001      	adds	r0, #1
 800f01e:	f43f aeaa 	beq.w	800ed76 <_printf_float+0xc2>
 800f022:	f108 0801 	add.w	r8, r8, #1
 800f026:	e7ec      	b.n	800f002 <_printf_float+0x34e>
 800f028:	4613      	mov	r3, r2
 800f02a:	4631      	mov	r1, r6
 800f02c:	4642      	mov	r2, r8
 800f02e:	4628      	mov	r0, r5
 800f030:	47b8      	blx	r7
 800f032:	3001      	adds	r0, #1
 800f034:	d1c0      	bne.n	800efb8 <_printf_float+0x304>
 800f036:	e69e      	b.n	800ed76 <_printf_float+0xc2>
 800f038:	2301      	movs	r3, #1
 800f03a:	4631      	mov	r1, r6
 800f03c:	4628      	mov	r0, r5
 800f03e:	9205      	str	r2, [sp, #20]
 800f040:	47b8      	blx	r7
 800f042:	3001      	adds	r0, #1
 800f044:	f43f ae97 	beq.w	800ed76 <_printf_float+0xc2>
 800f048:	9a05      	ldr	r2, [sp, #20]
 800f04a:	f10b 0b01 	add.w	fp, fp, #1
 800f04e:	e7b9      	b.n	800efc4 <_printf_float+0x310>
 800f050:	ee18 3a10 	vmov	r3, s16
 800f054:	4652      	mov	r2, sl
 800f056:	4631      	mov	r1, r6
 800f058:	4628      	mov	r0, r5
 800f05a:	47b8      	blx	r7
 800f05c:	3001      	adds	r0, #1
 800f05e:	d1be      	bne.n	800efde <_printf_float+0x32a>
 800f060:	e689      	b.n	800ed76 <_printf_float+0xc2>
 800f062:	9a05      	ldr	r2, [sp, #20]
 800f064:	464b      	mov	r3, r9
 800f066:	4442      	add	r2, r8
 800f068:	4631      	mov	r1, r6
 800f06a:	4628      	mov	r0, r5
 800f06c:	47b8      	blx	r7
 800f06e:	3001      	adds	r0, #1
 800f070:	d1c1      	bne.n	800eff6 <_printf_float+0x342>
 800f072:	e680      	b.n	800ed76 <_printf_float+0xc2>
 800f074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f076:	2a01      	cmp	r2, #1
 800f078:	dc01      	bgt.n	800f07e <_printf_float+0x3ca>
 800f07a:	07db      	lsls	r3, r3, #31
 800f07c:	d538      	bpl.n	800f0f0 <_printf_float+0x43c>
 800f07e:	2301      	movs	r3, #1
 800f080:	4642      	mov	r2, r8
 800f082:	4631      	mov	r1, r6
 800f084:	4628      	mov	r0, r5
 800f086:	47b8      	blx	r7
 800f088:	3001      	adds	r0, #1
 800f08a:	f43f ae74 	beq.w	800ed76 <_printf_float+0xc2>
 800f08e:	ee18 3a10 	vmov	r3, s16
 800f092:	4652      	mov	r2, sl
 800f094:	4631      	mov	r1, r6
 800f096:	4628      	mov	r0, r5
 800f098:	47b8      	blx	r7
 800f09a:	3001      	adds	r0, #1
 800f09c:	f43f ae6b 	beq.w	800ed76 <_printf_float+0xc2>
 800f0a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	f7f1 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0ac:	b9d8      	cbnz	r0, 800f0e6 <_printf_float+0x432>
 800f0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0b0:	f108 0201 	add.w	r2, r8, #1
 800f0b4:	3b01      	subs	r3, #1
 800f0b6:	4631      	mov	r1, r6
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	47b8      	blx	r7
 800f0bc:	3001      	adds	r0, #1
 800f0be:	d10e      	bne.n	800f0de <_printf_float+0x42a>
 800f0c0:	e659      	b.n	800ed76 <_printf_float+0xc2>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	4652      	mov	r2, sl
 800f0c6:	4631      	mov	r1, r6
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	47b8      	blx	r7
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	f43f ae52 	beq.w	800ed76 <_printf_float+0xc2>
 800f0d2:	f108 0801 	add.w	r8, r8, #1
 800f0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	4543      	cmp	r3, r8
 800f0dc:	dcf1      	bgt.n	800f0c2 <_printf_float+0x40e>
 800f0de:	464b      	mov	r3, r9
 800f0e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f0e4:	e6dc      	b.n	800eea0 <_printf_float+0x1ec>
 800f0e6:	f04f 0800 	mov.w	r8, #0
 800f0ea:	f104 0a1a 	add.w	sl, r4, #26
 800f0ee:	e7f2      	b.n	800f0d6 <_printf_float+0x422>
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	4642      	mov	r2, r8
 800f0f4:	e7df      	b.n	800f0b6 <_printf_float+0x402>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	464a      	mov	r2, r9
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	47b8      	blx	r7
 800f100:	3001      	adds	r0, #1
 800f102:	f43f ae38 	beq.w	800ed76 <_printf_float+0xc2>
 800f106:	f108 0801 	add.w	r8, r8, #1
 800f10a:	68e3      	ldr	r3, [r4, #12]
 800f10c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f10e:	1a5b      	subs	r3, r3, r1
 800f110:	4543      	cmp	r3, r8
 800f112:	dcf0      	bgt.n	800f0f6 <_printf_float+0x442>
 800f114:	e6fa      	b.n	800ef0c <_printf_float+0x258>
 800f116:	f04f 0800 	mov.w	r8, #0
 800f11a:	f104 0919 	add.w	r9, r4, #25
 800f11e:	e7f4      	b.n	800f10a <_printf_float+0x456>

0800f120 <_printf_common>:
 800f120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f124:	4616      	mov	r6, r2
 800f126:	4699      	mov	r9, r3
 800f128:	688a      	ldr	r2, [r1, #8]
 800f12a:	690b      	ldr	r3, [r1, #16]
 800f12c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f130:	4293      	cmp	r3, r2
 800f132:	bfb8      	it	lt
 800f134:	4613      	movlt	r3, r2
 800f136:	6033      	str	r3, [r6, #0]
 800f138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f13c:	4607      	mov	r7, r0
 800f13e:	460c      	mov	r4, r1
 800f140:	b10a      	cbz	r2, 800f146 <_printf_common+0x26>
 800f142:	3301      	adds	r3, #1
 800f144:	6033      	str	r3, [r6, #0]
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	0699      	lsls	r1, r3, #26
 800f14a:	bf42      	ittt	mi
 800f14c:	6833      	ldrmi	r3, [r6, #0]
 800f14e:	3302      	addmi	r3, #2
 800f150:	6033      	strmi	r3, [r6, #0]
 800f152:	6825      	ldr	r5, [r4, #0]
 800f154:	f015 0506 	ands.w	r5, r5, #6
 800f158:	d106      	bne.n	800f168 <_printf_common+0x48>
 800f15a:	f104 0a19 	add.w	sl, r4, #25
 800f15e:	68e3      	ldr	r3, [r4, #12]
 800f160:	6832      	ldr	r2, [r6, #0]
 800f162:	1a9b      	subs	r3, r3, r2
 800f164:	42ab      	cmp	r3, r5
 800f166:	dc26      	bgt.n	800f1b6 <_printf_common+0x96>
 800f168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f16c:	1e13      	subs	r3, r2, #0
 800f16e:	6822      	ldr	r2, [r4, #0]
 800f170:	bf18      	it	ne
 800f172:	2301      	movne	r3, #1
 800f174:	0692      	lsls	r2, r2, #26
 800f176:	d42b      	bmi.n	800f1d0 <_printf_common+0xb0>
 800f178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f17c:	4649      	mov	r1, r9
 800f17e:	4638      	mov	r0, r7
 800f180:	47c0      	blx	r8
 800f182:	3001      	adds	r0, #1
 800f184:	d01e      	beq.n	800f1c4 <_printf_common+0xa4>
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	68e5      	ldr	r5, [r4, #12]
 800f18a:	6832      	ldr	r2, [r6, #0]
 800f18c:	f003 0306 	and.w	r3, r3, #6
 800f190:	2b04      	cmp	r3, #4
 800f192:	bf08      	it	eq
 800f194:	1aad      	subeq	r5, r5, r2
 800f196:	68a3      	ldr	r3, [r4, #8]
 800f198:	6922      	ldr	r2, [r4, #16]
 800f19a:	bf0c      	ite	eq
 800f19c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f1a0:	2500      	movne	r5, #0
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	bfc4      	itt	gt
 800f1a6:	1a9b      	subgt	r3, r3, r2
 800f1a8:	18ed      	addgt	r5, r5, r3
 800f1aa:	2600      	movs	r6, #0
 800f1ac:	341a      	adds	r4, #26
 800f1ae:	42b5      	cmp	r5, r6
 800f1b0:	d11a      	bne.n	800f1e8 <_printf_common+0xc8>
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	e008      	b.n	800f1c8 <_printf_common+0xa8>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4652      	mov	r2, sl
 800f1ba:	4649      	mov	r1, r9
 800f1bc:	4638      	mov	r0, r7
 800f1be:	47c0      	blx	r8
 800f1c0:	3001      	adds	r0, #1
 800f1c2:	d103      	bne.n	800f1cc <_printf_common+0xac>
 800f1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1cc:	3501      	adds	r5, #1
 800f1ce:	e7c6      	b.n	800f15e <_printf_common+0x3e>
 800f1d0:	18e1      	adds	r1, r4, r3
 800f1d2:	1c5a      	adds	r2, r3, #1
 800f1d4:	2030      	movs	r0, #48	; 0x30
 800f1d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f1da:	4422      	add	r2, r4
 800f1dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f1e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f1e4:	3302      	adds	r3, #2
 800f1e6:	e7c7      	b.n	800f178 <_printf_common+0x58>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	4622      	mov	r2, r4
 800f1ec:	4649      	mov	r1, r9
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	47c0      	blx	r8
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	d0e6      	beq.n	800f1c4 <_printf_common+0xa4>
 800f1f6:	3601      	adds	r6, #1
 800f1f8:	e7d9      	b.n	800f1ae <_printf_common+0x8e>
	...

0800f1fc <_printf_i>:
 800f1fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f200:	460c      	mov	r4, r1
 800f202:	4691      	mov	r9, r2
 800f204:	7e27      	ldrb	r7, [r4, #24]
 800f206:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f208:	2f78      	cmp	r7, #120	; 0x78
 800f20a:	4680      	mov	r8, r0
 800f20c:	469a      	mov	sl, r3
 800f20e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f212:	d807      	bhi.n	800f224 <_printf_i+0x28>
 800f214:	2f62      	cmp	r7, #98	; 0x62
 800f216:	d80a      	bhi.n	800f22e <_printf_i+0x32>
 800f218:	2f00      	cmp	r7, #0
 800f21a:	f000 80d8 	beq.w	800f3ce <_printf_i+0x1d2>
 800f21e:	2f58      	cmp	r7, #88	; 0x58
 800f220:	f000 80a3 	beq.w	800f36a <_printf_i+0x16e>
 800f224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f22c:	e03a      	b.n	800f2a4 <_printf_i+0xa8>
 800f22e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f232:	2b15      	cmp	r3, #21
 800f234:	d8f6      	bhi.n	800f224 <_printf_i+0x28>
 800f236:	a001      	add	r0, pc, #4	; (adr r0, 800f23c <_printf_i+0x40>)
 800f238:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f23c:	0800f295 	.word	0x0800f295
 800f240:	0800f2a9 	.word	0x0800f2a9
 800f244:	0800f225 	.word	0x0800f225
 800f248:	0800f225 	.word	0x0800f225
 800f24c:	0800f225 	.word	0x0800f225
 800f250:	0800f225 	.word	0x0800f225
 800f254:	0800f2a9 	.word	0x0800f2a9
 800f258:	0800f225 	.word	0x0800f225
 800f25c:	0800f225 	.word	0x0800f225
 800f260:	0800f225 	.word	0x0800f225
 800f264:	0800f225 	.word	0x0800f225
 800f268:	0800f3b5 	.word	0x0800f3b5
 800f26c:	0800f2d9 	.word	0x0800f2d9
 800f270:	0800f397 	.word	0x0800f397
 800f274:	0800f225 	.word	0x0800f225
 800f278:	0800f225 	.word	0x0800f225
 800f27c:	0800f3d7 	.word	0x0800f3d7
 800f280:	0800f225 	.word	0x0800f225
 800f284:	0800f2d9 	.word	0x0800f2d9
 800f288:	0800f225 	.word	0x0800f225
 800f28c:	0800f225 	.word	0x0800f225
 800f290:	0800f39f 	.word	0x0800f39f
 800f294:	680b      	ldr	r3, [r1, #0]
 800f296:	1d1a      	adds	r2, r3, #4
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	600a      	str	r2, [r1, #0]
 800f29c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f2a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e0a3      	b.n	800f3f0 <_printf_i+0x1f4>
 800f2a8:	6825      	ldr	r5, [r4, #0]
 800f2aa:	6808      	ldr	r0, [r1, #0]
 800f2ac:	062e      	lsls	r6, r5, #24
 800f2ae:	f100 0304 	add.w	r3, r0, #4
 800f2b2:	d50a      	bpl.n	800f2ca <_printf_i+0xce>
 800f2b4:	6805      	ldr	r5, [r0, #0]
 800f2b6:	600b      	str	r3, [r1, #0]
 800f2b8:	2d00      	cmp	r5, #0
 800f2ba:	da03      	bge.n	800f2c4 <_printf_i+0xc8>
 800f2bc:	232d      	movs	r3, #45	; 0x2d
 800f2be:	426d      	negs	r5, r5
 800f2c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2c4:	485e      	ldr	r0, [pc, #376]	; (800f440 <_printf_i+0x244>)
 800f2c6:	230a      	movs	r3, #10
 800f2c8:	e019      	b.n	800f2fe <_printf_i+0x102>
 800f2ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f2ce:	6805      	ldr	r5, [r0, #0]
 800f2d0:	600b      	str	r3, [r1, #0]
 800f2d2:	bf18      	it	ne
 800f2d4:	b22d      	sxthne	r5, r5
 800f2d6:	e7ef      	b.n	800f2b8 <_printf_i+0xbc>
 800f2d8:	680b      	ldr	r3, [r1, #0]
 800f2da:	6825      	ldr	r5, [r4, #0]
 800f2dc:	1d18      	adds	r0, r3, #4
 800f2de:	6008      	str	r0, [r1, #0]
 800f2e0:	0628      	lsls	r0, r5, #24
 800f2e2:	d501      	bpl.n	800f2e8 <_printf_i+0xec>
 800f2e4:	681d      	ldr	r5, [r3, #0]
 800f2e6:	e002      	b.n	800f2ee <_printf_i+0xf2>
 800f2e8:	0669      	lsls	r1, r5, #25
 800f2ea:	d5fb      	bpl.n	800f2e4 <_printf_i+0xe8>
 800f2ec:	881d      	ldrh	r5, [r3, #0]
 800f2ee:	4854      	ldr	r0, [pc, #336]	; (800f440 <_printf_i+0x244>)
 800f2f0:	2f6f      	cmp	r7, #111	; 0x6f
 800f2f2:	bf0c      	ite	eq
 800f2f4:	2308      	moveq	r3, #8
 800f2f6:	230a      	movne	r3, #10
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f2fe:	6866      	ldr	r6, [r4, #4]
 800f300:	60a6      	str	r6, [r4, #8]
 800f302:	2e00      	cmp	r6, #0
 800f304:	bfa2      	ittt	ge
 800f306:	6821      	ldrge	r1, [r4, #0]
 800f308:	f021 0104 	bicge.w	r1, r1, #4
 800f30c:	6021      	strge	r1, [r4, #0]
 800f30e:	b90d      	cbnz	r5, 800f314 <_printf_i+0x118>
 800f310:	2e00      	cmp	r6, #0
 800f312:	d04d      	beq.n	800f3b0 <_printf_i+0x1b4>
 800f314:	4616      	mov	r6, r2
 800f316:	fbb5 f1f3 	udiv	r1, r5, r3
 800f31a:	fb03 5711 	mls	r7, r3, r1, r5
 800f31e:	5dc7      	ldrb	r7, [r0, r7]
 800f320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f324:	462f      	mov	r7, r5
 800f326:	42bb      	cmp	r3, r7
 800f328:	460d      	mov	r5, r1
 800f32a:	d9f4      	bls.n	800f316 <_printf_i+0x11a>
 800f32c:	2b08      	cmp	r3, #8
 800f32e:	d10b      	bne.n	800f348 <_printf_i+0x14c>
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	07df      	lsls	r7, r3, #31
 800f334:	d508      	bpl.n	800f348 <_printf_i+0x14c>
 800f336:	6923      	ldr	r3, [r4, #16]
 800f338:	6861      	ldr	r1, [r4, #4]
 800f33a:	4299      	cmp	r1, r3
 800f33c:	bfde      	ittt	le
 800f33e:	2330      	movle	r3, #48	; 0x30
 800f340:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f344:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f348:	1b92      	subs	r2, r2, r6
 800f34a:	6122      	str	r2, [r4, #16]
 800f34c:	f8cd a000 	str.w	sl, [sp]
 800f350:	464b      	mov	r3, r9
 800f352:	aa03      	add	r2, sp, #12
 800f354:	4621      	mov	r1, r4
 800f356:	4640      	mov	r0, r8
 800f358:	f7ff fee2 	bl	800f120 <_printf_common>
 800f35c:	3001      	adds	r0, #1
 800f35e:	d14c      	bne.n	800f3fa <_printf_i+0x1fe>
 800f360:	f04f 30ff 	mov.w	r0, #4294967295
 800f364:	b004      	add	sp, #16
 800f366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f36a:	4835      	ldr	r0, [pc, #212]	; (800f440 <_printf_i+0x244>)
 800f36c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f370:	6823      	ldr	r3, [r4, #0]
 800f372:	680e      	ldr	r6, [r1, #0]
 800f374:	061f      	lsls	r7, r3, #24
 800f376:	f856 5b04 	ldr.w	r5, [r6], #4
 800f37a:	600e      	str	r6, [r1, #0]
 800f37c:	d514      	bpl.n	800f3a8 <_printf_i+0x1ac>
 800f37e:	07d9      	lsls	r1, r3, #31
 800f380:	bf44      	itt	mi
 800f382:	f043 0320 	orrmi.w	r3, r3, #32
 800f386:	6023      	strmi	r3, [r4, #0]
 800f388:	b91d      	cbnz	r5, 800f392 <_printf_i+0x196>
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	f023 0320 	bic.w	r3, r3, #32
 800f390:	6023      	str	r3, [r4, #0]
 800f392:	2310      	movs	r3, #16
 800f394:	e7b0      	b.n	800f2f8 <_printf_i+0xfc>
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	f043 0320 	orr.w	r3, r3, #32
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	2378      	movs	r3, #120	; 0x78
 800f3a0:	4828      	ldr	r0, [pc, #160]	; (800f444 <_printf_i+0x248>)
 800f3a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3a6:	e7e3      	b.n	800f370 <_printf_i+0x174>
 800f3a8:	065e      	lsls	r6, r3, #25
 800f3aa:	bf48      	it	mi
 800f3ac:	b2ad      	uxthmi	r5, r5
 800f3ae:	e7e6      	b.n	800f37e <_printf_i+0x182>
 800f3b0:	4616      	mov	r6, r2
 800f3b2:	e7bb      	b.n	800f32c <_printf_i+0x130>
 800f3b4:	680b      	ldr	r3, [r1, #0]
 800f3b6:	6826      	ldr	r6, [r4, #0]
 800f3b8:	6960      	ldr	r0, [r4, #20]
 800f3ba:	1d1d      	adds	r5, r3, #4
 800f3bc:	600d      	str	r5, [r1, #0]
 800f3be:	0635      	lsls	r5, r6, #24
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	d501      	bpl.n	800f3c8 <_printf_i+0x1cc>
 800f3c4:	6018      	str	r0, [r3, #0]
 800f3c6:	e002      	b.n	800f3ce <_printf_i+0x1d2>
 800f3c8:	0671      	lsls	r1, r6, #25
 800f3ca:	d5fb      	bpl.n	800f3c4 <_printf_i+0x1c8>
 800f3cc:	8018      	strh	r0, [r3, #0]
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	6123      	str	r3, [r4, #16]
 800f3d2:	4616      	mov	r6, r2
 800f3d4:	e7ba      	b.n	800f34c <_printf_i+0x150>
 800f3d6:	680b      	ldr	r3, [r1, #0]
 800f3d8:	1d1a      	adds	r2, r3, #4
 800f3da:	600a      	str	r2, [r1, #0]
 800f3dc:	681e      	ldr	r6, [r3, #0]
 800f3de:	6862      	ldr	r2, [r4, #4]
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	f7f0 fefc 	bl	80001e0 <memchr>
 800f3e8:	b108      	cbz	r0, 800f3ee <_printf_i+0x1f2>
 800f3ea:	1b80      	subs	r0, r0, r6
 800f3ec:	6060      	str	r0, [r4, #4]
 800f3ee:	6863      	ldr	r3, [r4, #4]
 800f3f0:	6123      	str	r3, [r4, #16]
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3f8:	e7a8      	b.n	800f34c <_printf_i+0x150>
 800f3fa:	6923      	ldr	r3, [r4, #16]
 800f3fc:	4632      	mov	r2, r6
 800f3fe:	4649      	mov	r1, r9
 800f400:	4640      	mov	r0, r8
 800f402:	47d0      	blx	sl
 800f404:	3001      	adds	r0, #1
 800f406:	d0ab      	beq.n	800f360 <_printf_i+0x164>
 800f408:	6823      	ldr	r3, [r4, #0]
 800f40a:	079b      	lsls	r3, r3, #30
 800f40c:	d413      	bmi.n	800f436 <_printf_i+0x23a>
 800f40e:	68e0      	ldr	r0, [r4, #12]
 800f410:	9b03      	ldr	r3, [sp, #12]
 800f412:	4298      	cmp	r0, r3
 800f414:	bfb8      	it	lt
 800f416:	4618      	movlt	r0, r3
 800f418:	e7a4      	b.n	800f364 <_printf_i+0x168>
 800f41a:	2301      	movs	r3, #1
 800f41c:	4632      	mov	r2, r6
 800f41e:	4649      	mov	r1, r9
 800f420:	4640      	mov	r0, r8
 800f422:	47d0      	blx	sl
 800f424:	3001      	adds	r0, #1
 800f426:	d09b      	beq.n	800f360 <_printf_i+0x164>
 800f428:	3501      	adds	r5, #1
 800f42a:	68e3      	ldr	r3, [r4, #12]
 800f42c:	9903      	ldr	r1, [sp, #12]
 800f42e:	1a5b      	subs	r3, r3, r1
 800f430:	42ab      	cmp	r3, r5
 800f432:	dcf2      	bgt.n	800f41a <_printf_i+0x21e>
 800f434:	e7eb      	b.n	800f40e <_printf_i+0x212>
 800f436:	2500      	movs	r5, #0
 800f438:	f104 0619 	add.w	r6, r4, #25
 800f43c:	e7f5      	b.n	800f42a <_printf_i+0x22e>
 800f43e:	bf00      	nop
 800f440:	080127ae 	.word	0x080127ae
 800f444:	080127bf 	.word	0x080127bf

0800f448 <_sbrk_r>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	4d06      	ldr	r5, [pc, #24]	; (800f464 <_sbrk_r+0x1c>)
 800f44c:	2300      	movs	r3, #0
 800f44e:	4604      	mov	r4, r0
 800f450:	4608      	mov	r0, r1
 800f452:	602b      	str	r3, [r5, #0]
 800f454:	f7f5 fb4c 	bl	8004af0 <_sbrk>
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d102      	bne.n	800f462 <_sbrk_r+0x1a>
 800f45c:	682b      	ldr	r3, [r5, #0]
 800f45e:	b103      	cbz	r3, 800f462 <_sbrk_r+0x1a>
 800f460:	6023      	str	r3, [r4, #0]
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	20004d64 	.word	0x20004d64

0800f468 <siprintf>:
 800f468:	b40e      	push	{r1, r2, r3}
 800f46a:	b500      	push	{lr}
 800f46c:	b09c      	sub	sp, #112	; 0x70
 800f46e:	ab1d      	add	r3, sp, #116	; 0x74
 800f470:	9002      	str	r0, [sp, #8]
 800f472:	9006      	str	r0, [sp, #24]
 800f474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f478:	4809      	ldr	r0, [pc, #36]	; (800f4a0 <siprintf+0x38>)
 800f47a:	9107      	str	r1, [sp, #28]
 800f47c:	9104      	str	r1, [sp, #16]
 800f47e:	4909      	ldr	r1, [pc, #36]	; (800f4a4 <siprintf+0x3c>)
 800f480:	f853 2b04 	ldr.w	r2, [r3], #4
 800f484:	9105      	str	r1, [sp, #20]
 800f486:	6800      	ldr	r0, [r0, #0]
 800f488:	9301      	str	r3, [sp, #4]
 800f48a:	a902      	add	r1, sp, #8
 800f48c:	f001 fa7c 	bl	8010988 <_svfiprintf_r>
 800f490:	9b02      	ldr	r3, [sp, #8]
 800f492:	2200      	movs	r2, #0
 800f494:	701a      	strb	r2, [r3, #0]
 800f496:	b01c      	add	sp, #112	; 0x70
 800f498:	f85d eb04 	ldr.w	lr, [sp], #4
 800f49c:	b003      	add	sp, #12
 800f49e:	4770      	bx	lr
 800f4a0:	2000002c 	.word	0x2000002c
 800f4a4:	ffff0208 	.word	0xffff0208

0800f4a8 <quorem>:
 800f4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ac:	6903      	ldr	r3, [r0, #16]
 800f4ae:	690c      	ldr	r4, [r1, #16]
 800f4b0:	42a3      	cmp	r3, r4
 800f4b2:	4607      	mov	r7, r0
 800f4b4:	f2c0 8081 	blt.w	800f5ba <quorem+0x112>
 800f4b8:	3c01      	subs	r4, #1
 800f4ba:	f101 0814 	add.w	r8, r1, #20
 800f4be:	f100 0514 	add.w	r5, r0, #20
 800f4c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4c6:	9301      	str	r3, [sp, #4]
 800f4c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f4d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4e0:	d331      	bcc.n	800f546 <quorem+0x9e>
 800f4e2:	f04f 0e00 	mov.w	lr, #0
 800f4e6:	4640      	mov	r0, r8
 800f4e8:	46ac      	mov	ip, r5
 800f4ea:	46f2      	mov	sl, lr
 800f4ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800f4f0:	b293      	uxth	r3, r2
 800f4f2:	fb06 e303 	mla	r3, r6, r3, lr
 800f4f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	ebaa 0303 	sub.w	r3, sl, r3
 800f500:	0c12      	lsrs	r2, r2, #16
 800f502:	f8dc a000 	ldr.w	sl, [ip]
 800f506:	fb06 e202 	mla	r2, r6, r2, lr
 800f50a:	fa13 f38a 	uxtah	r3, r3, sl
 800f50e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f512:	fa1f fa82 	uxth.w	sl, r2
 800f516:	f8dc 2000 	ldr.w	r2, [ip]
 800f51a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f51e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f522:	b29b      	uxth	r3, r3
 800f524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f528:	4581      	cmp	r9, r0
 800f52a:	f84c 3b04 	str.w	r3, [ip], #4
 800f52e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f532:	d2db      	bcs.n	800f4ec <quorem+0x44>
 800f534:	f855 300b 	ldr.w	r3, [r5, fp]
 800f538:	b92b      	cbnz	r3, 800f546 <quorem+0x9e>
 800f53a:	9b01      	ldr	r3, [sp, #4]
 800f53c:	3b04      	subs	r3, #4
 800f53e:	429d      	cmp	r5, r3
 800f540:	461a      	mov	r2, r3
 800f542:	d32e      	bcc.n	800f5a2 <quorem+0xfa>
 800f544:	613c      	str	r4, [r7, #16]
 800f546:	4638      	mov	r0, r7
 800f548:	f001 f8b4 	bl	80106b4 <__mcmp>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	db24      	blt.n	800f59a <quorem+0xf2>
 800f550:	3601      	adds	r6, #1
 800f552:	4628      	mov	r0, r5
 800f554:	f04f 0c00 	mov.w	ip, #0
 800f558:	f858 2b04 	ldr.w	r2, [r8], #4
 800f55c:	f8d0 e000 	ldr.w	lr, [r0]
 800f560:	b293      	uxth	r3, r2
 800f562:	ebac 0303 	sub.w	r3, ip, r3
 800f566:	0c12      	lsrs	r2, r2, #16
 800f568:	fa13 f38e 	uxtah	r3, r3, lr
 800f56c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f574:	b29b      	uxth	r3, r3
 800f576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f57a:	45c1      	cmp	r9, r8
 800f57c:	f840 3b04 	str.w	r3, [r0], #4
 800f580:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f584:	d2e8      	bcs.n	800f558 <quorem+0xb0>
 800f586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f58a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f58e:	b922      	cbnz	r2, 800f59a <quorem+0xf2>
 800f590:	3b04      	subs	r3, #4
 800f592:	429d      	cmp	r5, r3
 800f594:	461a      	mov	r2, r3
 800f596:	d30a      	bcc.n	800f5ae <quorem+0x106>
 800f598:	613c      	str	r4, [r7, #16]
 800f59a:	4630      	mov	r0, r6
 800f59c:	b003      	add	sp, #12
 800f59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a2:	6812      	ldr	r2, [r2, #0]
 800f5a4:	3b04      	subs	r3, #4
 800f5a6:	2a00      	cmp	r2, #0
 800f5a8:	d1cc      	bne.n	800f544 <quorem+0x9c>
 800f5aa:	3c01      	subs	r4, #1
 800f5ac:	e7c7      	b.n	800f53e <quorem+0x96>
 800f5ae:	6812      	ldr	r2, [r2, #0]
 800f5b0:	3b04      	subs	r3, #4
 800f5b2:	2a00      	cmp	r2, #0
 800f5b4:	d1f0      	bne.n	800f598 <quorem+0xf0>
 800f5b6:	3c01      	subs	r4, #1
 800f5b8:	e7eb      	b.n	800f592 <quorem+0xea>
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	e7ee      	b.n	800f59c <quorem+0xf4>
	...

0800f5c0 <_dtoa_r>:
 800f5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c4:	ed2d 8b02 	vpush	{d8}
 800f5c8:	ec57 6b10 	vmov	r6, r7, d0
 800f5cc:	b095      	sub	sp, #84	; 0x54
 800f5ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f5d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f5d4:	9105      	str	r1, [sp, #20]
 800f5d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f5da:	4604      	mov	r4, r0
 800f5dc:	9209      	str	r2, [sp, #36]	; 0x24
 800f5de:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5e0:	b975      	cbnz	r5, 800f600 <_dtoa_r+0x40>
 800f5e2:	2010      	movs	r0, #16
 800f5e4:	f7ff f9f6 	bl	800e9d4 <malloc>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	6260      	str	r0, [r4, #36]	; 0x24
 800f5ec:	b920      	cbnz	r0, 800f5f8 <_dtoa_r+0x38>
 800f5ee:	4bb2      	ldr	r3, [pc, #712]	; (800f8b8 <_dtoa_r+0x2f8>)
 800f5f0:	21ea      	movs	r1, #234	; 0xea
 800f5f2:	48b2      	ldr	r0, [pc, #712]	; (800f8bc <_dtoa_r+0x2fc>)
 800f5f4:	f001 fac8 	bl	8010b88 <__assert_func>
 800f5f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f5fc:	6005      	str	r5, [r0, #0]
 800f5fe:	60c5      	str	r5, [r0, #12]
 800f600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f602:	6819      	ldr	r1, [r3, #0]
 800f604:	b151      	cbz	r1, 800f61c <_dtoa_r+0x5c>
 800f606:	685a      	ldr	r2, [r3, #4]
 800f608:	604a      	str	r2, [r1, #4]
 800f60a:	2301      	movs	r3, #1
 800f60c:	4093      	lsls	r3, r2
 800f60e:	608b      	str	r3, [r1, #8]
 800f610:	4620      	mov	r0, r4
 800f612:	f000 fe11 	bl	8010238 <_Bfree>
 800f616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f618:	2200      	movs	r2, #0
 800f61a:	601a      	str	r2, [r3, #0]
 800f61c:	1e3b      	subs	r3, r7, #0
 800f61e:	bfb9      	ittee	lt
 800f620:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f624:	9303      	strlt	r3, [sp, #12]
 800f626:	2300      	movge	r3, #0
 800f628:	f8c8 3000 	strge.w	r3, [r8]
 800f62c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f630:	4ba3      	ldr	r3, [pc, #652]	; (800f8c0 <_dtoa_r+0x300>)
 800f632:	bfbc      	itt	lt
 800f634:	2201      	movlt	r2, #1
 800f636:	f8c8 2000 	strlt.w	r2, [r8]
 800f63a:	ea33 0309 	bics.w	r3, r3, r9
 800f63e:	d11b      	bne.n	800f678 <_dtoa_r+0xb8>
 800f640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f642:	f242 730f 	movw	r3, #9999	; 0x270f
 800f646:	6013      	str	r3, [r2, #0]
 800f648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f64c:	4333      	orrs	r3, r6
 800f64e:	f000 857a 	beq.w	8010146 <_dtoa_r+0xb86>
 800f652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f654:	b963      	cbnz	r3, 800f670 <_dtoa_r+0xb0>
 800f656:	4b9b      	ldr	r3, [pc, #620]	; (800f8c4 <_dtoa_r+0x304>)
 800f658:	e024      	b.n	800f6a4 <_dtoa_r+0xe4>
 800f65a:	4b9b      	ldr	r3, [pc, #620]	; (800f8c8 <_dtoa_r+0x308>)
 800f65c:	9300      	str	r3, [sp, #0]
 800f65e:	3308      	adds	r3, #8
 800f660:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f662:	6013      	str	r3, [r2, #0]
 800f664:	9800      	ldr	r0, [sp, #0]
 800f666:	b015      	add	sp, #84	; 0x54
 800f668:	ecbd 8b02 	vpop	{d8}
 800f66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f670:	4b94      	ldr	r3, [pc, #592]	; (800f8c4 <_dtoa_r+0x304>)
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	3303      	adds	r3, #3
 800f676:	e7f3      	b.n	800f660 <_dtoa_r+0xa0>
 800f678:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f67c:	2200      	movs	r2, #0
 800f67e:	ec51 0b17 	vmov	r0, r1, d7
 800f682:	2300      	movs	r3, #0
 800f684:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f688:	f7f1 fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f68c:	4680      	mov	r8, r0
 800f68e:	b158      	cbz	r0, 800f6a8 <_dtoa_r+0xe8>
 800f690:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f692:	2301      	movs	r3, #1
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f000 8551 	beq.w	8010140 <_dtoa_r+0xb80>
 800f69e:	488b      	ldr	r0, [pc, #556]	; (800f8cc <_dtoa_r+0x30c>)
 800f6a0:	6018      	str	r0, [r3, #0]
 800f6a2:	1e43      	subs	r3, r0, #1
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	e7dd      	b.n	800f664 <_dtoa_r+0xa4>
 800f6a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f6ac:	aa12      	add	r2, sp, #72	; 0x48
 800f6ae:	a913      	add	r1, sp, #76	; 0x4c
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f001 f8a3 	bl	80107fc <__d2b>
 800f6b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f6ba:	4683      	mov	fp, r0
 800f6bc:	2d00      	cmp	r5, #0
 800f6be:	d07c      	beq.n	800f7ba <_dtoa_r+0x1fa>
 800f6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f6c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f6ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f6d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f6d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f6da:	4b7d      	ldr	r3, [pc, #500]	; (800f8d0 <_dtoa_r+0x310>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	4630      	mov	r0, r6
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	f7f0 fdd1 	bl	8000288 <__aeabi_dsub>
 800f6e6:	a36e      	add	r3, pc, #440	; (adr r3, 800f8a0 <_dtoa_r+0x2e0>)
 800f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ec:	f7f0 ff84 	bl	80005f8 <__aeabi_dmul>
 800f6f0:	a36d      	add	r3, pc, #436	; (adr r3, 800f8a8 <_dtoa_r+0x2e8>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	f7f0 fdc9 	bl	800028c <__adddf3>
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	460f      	mov	r7, r1
 800f700:	f7f0 ff10 	bl	8000524 <__aeabi_i2d>
 800f704:	a36a      	add	r3, pc, #424	; (adr r3, 800f8b0 <_dtoa_r+0x2f0>)
 800f706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70a:	f7f0 ff75 	bl	80005f8 <__aeabi_dmul>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	4630      	mov	r0, r6
 800f714:	4639      	mov	r1, r7
 800f716:	f7f0 fdb9 	bl	800028c <__adddf3>
 800f71a:	4606      	mov	r6, r0
 800f71c:	460f      	mov	r7, r1
 800f71e:	f7f1 fa1b 	bl	8000b58 <__aeabi_d2iz>
 800f722:	2200      	movs	r2, #0
 800f724:	4682      	mov	sl, r0
 800f726:	2300      	movs	r3, #0
 800f728:	4630      	mov	r0, r6
 800f72a:	4639      	mov	r1, r7
 800f72c:	f7f1 f9d6 	bl	8000adc <__aeabi_dcmplt>
 800f730:	b148      	cbz	r0, 800f746 <_dtoa_r+0x186>
 800f732:	4650      	mov	r0, sl
 800f734:	f7f0 fef6 	bl	8000524 <__aeabi_i2d>
 800f738:	4632      	mov	r2, r6
 800f73a:	463b      	mov	r3, r7
 800f73c:	f7f1 f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f740:	b908      	cbnz	r0, 800f746 <_dtoa_r+0x186>
 800f742:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f746:	f1ba 0f16 	cmp.w	sl, #22
 800f74a:	d854      	bhi.n	800f7f6 <_dtoa_r+0x236>
 800f74c:	4b61      	ldr	r3, [pc, #388]	; (800f8d4 <_dtoa_r+0x314>)
 800f74e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f75a:	f7f1 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d04b      	beq.n	800f7fa <_dtoa_r+0x23a>
 800f762:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f766:	2300      	movs	r3, #0
 800f768:	930e      	str	r3, [sp, #56]	; 0x38
 800f76a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f76c:	1b5d      	subs	r5, r3, r5
 800f76e:	1e6b      	subs	r3, r5, #1
 800f770:	9304      	str	r3, [sp, #16]
 800f772:	bf43      	ittte	mi
 800f774:	2300      	movmi	r3, #0
 800f776:	f1c5 0801 	rsbmi	r8, r5, #1
 800f77a:	9304      	strmi	r3, [sp, #16]
 800f77c:	f04f 0800 	movpl.w	r8, #0
 800f780:	f1ba 0f00 	cmp.w	sl, #0
 800f784:	db3b      	blt.n	800f7fe <_dtoa_r+0x23e>
 800f786:	9b04      	ldr	r3, [sp, #16]
 800f788:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f78c:	4453      	add	r3, sl
 800f78e:	9304      	str	r3, [sp, #16]
 800f790:	2300      	movs	r3, #0
 800f792:	9306      	str	r3, [sp, #24]
 800f794:	9b05      	ldr	r3, [sp, #20]
 800f796:	2b09      	cmp	r3, #9
 800f798:	d869      	bhi.n	800f86e <_dtoa_r+0x2ae>
 800f79a:	2b05      	cmp	r3, #5
 800f79c:	bfc4      	itt	gt
 800f79e:	3b04      	subgt	r3, #4
 800f7a0:	9305      	strgt	r3, [sp, #20]
 800f7a2:	9b05      	ldr	r3, [sp, #20]
 800f7a4:	f1a3 0302 	sub.w	r3, r3, #2
 800f7a8:	bfcc      	ite	gt
 800f7aa:	2500      	movgt	r5, #0
 800f7ac:	2501      	movle	r5, #1
 800f7ae:	2b03      	cmp	r3, #3
 800f7b0:	d869      	bhi.n	800f886 <_dtoa_r+0x2c6>
 800f7b2:	e8df f003 	tbb	[pc, r3]
 800f7b6:	4e2c      	.short	0x4e2c
 800f7b8:	5a4c      	.short	0x5a4c
 800f7ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f7be:	441d      	add	r5, r3
 800f7c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f7c4:	2b20      	cmp	r3, #32
 800f7c6:	bfc1      	itttt	gt
 800f7c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f7cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f7d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800f7d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f7d8:	bfda      	itte	le
 800f7da:	f1c3 0320 	rsble	r3, r3, #32
 800f7de:	fa06 f003 	lslle.w	r0, r6, r3
 800f7e2:	4318      	orrgt	r0, r3
 800f7e4:	f7f0 fe8e 	bl	8000504 <__aeabi_ui2d>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f7f0:	3d01      	subs	r5, #1
 800f7f2:	9310      	str	r3, [sp, #64]	; 0x40
 800f7f4:	e771      	b.n	800f6da <_dtoa_r+0x11a>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e7b6      	b.n	800f768 <_dtoa_r+0x1a8>
 800f7fa:	900e      	str	r0, [sp, #56]	; 0x38
 800f7fc:	e7b5      	b.n	800f76a <_dtoa_r+0x1aa>
 800f7fe:	f1ca 0300 	rsb	r3, sl, #0
 800f802:	9306      	str	r3, [sp, #24]
 800f804:	2300      	movs	r3, #0
 800f806:	eba8 080a 	sub.w	r8, r8, sl
 800f80a:	930d      	str	r3, [sp, #52]	; 0x34
 800f80c:	e7c2      	b.n	800f794 <_dtoa_r+0x1d4>
 800f80e:	2300      	movs	r3, #0
 800f810:	9308      	str	r3, [sp, #32]
 800f812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f814:	2b00      	cmp	r3, #0
 800f816:	dc39      	bgt.n	800f88c <_dtoa_r+0x2cc>
 800f818:	f04f 0901 	mov.w	r9, #1
 800f81c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f820:	464b      	mov	r3, r9
 800f822:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f826:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f828:	2200      	movs	r2, #0
 800f82a:	6042      	str	r2, [r0, #4]
 800f82c:	2204      	movs	r2, #4
 800f82e:	f102 0614 	add.w	r6, r2, #20
 800f832:	429e      	cmp	r6, r3
 800f834:	6841      	ldr	r1, [r0, #4]
 800f836:	d92f      	bls.n	800f898 <_dtoa_r+0x2d8>
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 fcbd 	bl	80101b8 <_Balloc>
 800f83e:	9000      	str	r0, [sp, #0]
 800f840:	2800      	cmp	r0, #0
 800f842:	d14b      	bne.n	800f8dc <_dtoa_r+0x31c>
 800f844:	4b24      	ldr	r3, [pc, #144]	; (800f8d8 <_dtoa_r+0x318>)
 800f846:	4602      	mov	r2, r0
 800f848:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f84c:	e6d1      	b.n	800f5f2 <_dtoa_r+0x32>
 800f84e:	2301      	movs	r3, #1
 800f850:	e7de      	b.n	800f810 <_dtoa_r+0x250>
 800f852:	2300      	movs	r3, #0
 800f854:	9308      	str	r3, [sp, #32]
 800f856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f858:	eb0a 0903 	add.w	r9, sl, r3
 800f85c:	f109 0301 	add.w	r3, r9, #1
 800f860:	2b01      	cmp	r3, #1
 800f862:	9301      	str	r3, [sp, #4]
 800f864:	bfb8      	it	lt
 800f866:	2301      	movlt	r3, #1
 800f868:	e7dd      	b.n	800f826 <_dtoa_r+0x266>
 800f86a:	2301      	movs	r3, #1
 800f86c:	e7f2      	b.n	800f854 <_dtoa_r+0x294>
 800f86e:	2501      	movs	r5, #1
 800f870:	2300      	movs	r3, #0
 800f872:	9305      	str	r3, [sp, #20]
 800f874:	9508      	str	r5, [sp, #32]
 800f876:	f04f 39ff 	mov.w	r9, #4294967295
 800f87a:	2200      	movs	r2, #0
 800f87c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f880:	2312      	movs	r3, #18
 800f882:	9209      	str	r2, [sp, #36]	; 0x24
 800f884:	e7cf      	b.n	800f826 <_dtoa_r+0x266>
 800f886:	2301      	movs	r3, #1
 800f888:	9308      	str	r3, [sp, #32]
 800f88a:	e7f4      	b.n	800f876 <_dtoa_r+0x2b6>
 800f88c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f890:	f8cd 9004 	str.w	r9, [sp, #4]
 800f894:	464b      	mov	r3, r9
 800f896:	e7c6      	b.n	800f826 <_dtoa_r+0x266>
 800f898:	3101      	adds	r1, #1
 800f89a:	6041      	str	r1, [r0, #4]
 800f89c:	0052      	lsls	r2, r2, #1
 800f89e:	e7c6      	b.n	800f82e <_dtoa_r+0x26e>
 800f8a0:	636f4361 	.word	0x636f4361
 800f8a4:	3fd287a7 	.word	0x3fd287a7
 800f8a8:	8b60c8b3 	.word	0x8b60c8b3
 800f8ac:	3fc68a28 	.word	0x3fc68a28
 800f8b0:	509f79fb 	.word	0x509f79fb
 800f8b4:	3fd34413 	.word	0x3fd34413
 800f8b8:	080127dd 	.word	0x080127dd
 800f8bc:	080127f4 	.word	0x080127f4
 800f8c0:	7ff00000 	.word	0x7ff00000
 800f8c4:	080127d9 	.word	0x080127d9
 800f8c8:	080127d0 	.word	0x080127d0
 800f8cc:	080127ad 	.word	0x080127ad
 800f8d0:	3ff80000 	.word	0x3ff80000
 800f8d4:	080128f0 	.word	0x080128f0
 800f8d8:	08012853 	.word	0x08012853
 800f8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8de:	9a00      	ldr	r2, [sp, #0]
 800f8e0:	601a      	str	r2, [r3, #0]
 800f8e2:	9b01      	ldr	r3, [sp, #4]
 800f8e4:	2b0e      	cmp	r3, #14
 800f8e6:	f200 80ad 	bhi.w	800fa44 <_dtoa_r+0x484>
 800f8ea:	2d00      	cmp	r5, #0
 800f8ec:	f000 80aa 	beq.w	800fa44 <_dtoa_r+0x484>
 800f8f0:	f1ba 0f00 	cmp.w	sl, #0
 800f8f4:	dd36      	ble.n	800f964 <_dtoa_r+0x3a4>
 800f8f6:	4ac3      	ldr	r2, [pc, #780]	; (800fc04 <_dtoa_r+0x644>)
 800f8f8:	f00a 030f 	and.w	r3, sl, #15
 800f8fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f900:	ed93 7b00 	vldr	d7, [r3]
 800f904:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f908:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f90c:	eeb0 8a47 	vmov.f32	s16, s14
 800f910:	eef0 8a67 	vmov.f32	s17, s15
 800f914:	d016      	beq.n	800f944 <_dtoa_r+0x384>
 800f916:	4bbc      	ldr	r3, [pc, #752]	; (800fc08 <_dtoa_r+0x648>)
 800f918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f91c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f920:	f7f0 ff94 	bl	800084c <__aeabi_ddiv>
 800f924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f928:	f007 070f 	and.w	r7, r7, #15
 800f92c:	2503      	movs	r5, #3
 800f92e:	4eb6      	ldr	r6, [pc, #728]	; (800fc08 <_dtoa_r+0x648>)
 800f930:	b957      	cbnz	r7, 800f948 <_dtoa_r+0x388>
 800f932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f936:	ec53 2b18 	vmov	r2, r3, d8
 800f93a:	f7f0 ff87 	bl	800084c <__aeabi_ddiv>
 800f93e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f942:	e029      	b.n	800f998 <_dtoa_r+0x3d8>
 800f944:	2502      	movs	r5, #2
 800f946:	e7f2      	b.n	800f92e <_dtoa_r+0x36e>
 800f948:	07f9      	lsls	r1, r7, #31
 800f94a:	d508      	bpl.n	800f95e <_dtoa_r+0x39e>
 800f94c:	ec51 0b18 	vmov	r0, r1, d8
 800f950:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f954:	f7f0 fe50 	bl	80005f8 <__aeabi_dmul>
 800f958:	ec41 0b18 	vmov	d8, r0, r1
 800f95c:	3501      	adds	r5, #1
 800f95e:	107f      	asrs	r7, r7, #1
 800f960:	3608      	adds	r6, #8
 800f962:	e7e5      	b.n	800f930 <_dtoa_r+0x370>
 800f964:	f000 80a6 	beq.w	800fab4 <_dtoa_r+0x4f4>
 800f968:	f1ca 0600 	rsb	r6, sl, #0
 800f96c:	4ba5      	ldr	r3, [pc, #660]	; (800fc04 <_dtoa_r+0x644>)
 800f96e:	4fa6      	ldr	r7, [pc, #664]	; (800fc08 <_dtoa_r+0x648>)
 800f970:	f006 020f 	and.w	r2, r6, #15
 800f974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f980:	f7f0 fe3a 	bl	80005f8 <__aeabi_dmul>
 800f984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f988:	1136      	asrs	r6, r6, #4
 800f98a:	2300      	movs	r3, #0
 800f98c:	2502      	movs	r5, #2
 800f98e:	2e00      	cmp	r6, #0
 800f990:	f040 8085 	bne.w	800fa9e <_dtoa_r+0x4de>
 800f994:	2b00      	cmp	r3, #0
 800f996:	d1d2      	bne.n	800f93e <_dtoa_r+0x37e>
 800f998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f000 808c 	beq.w	800fab8 <_dtoa_r+0x4f8>
 800f9a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f9a4:	4b99      	ldr	r3, [pc, #612]	; (800fc0c <_dtoa_r+0x64c>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	4639      	mov	r1, r7
 800f9ac:	f7f1 f896 	bl	8000adc <__aeabi_dcmplt>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	f000 8081 	beq.w	800fab8 <_dtoa_r+0x4f8>
 800f9b6:	9b01      	ldr	r3, [sp, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d07d      	beq.n	800fab8 <_dtoa_r+0x4f8>
 800f9bc:	f1b9 0f00 	cmp.w	r9, #0
 800f9c0:	dd3c      	ble.n	800fa3c <_dtoa_r+0x47c>
 800f9c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f9c6:	9307      	str	r3, [sp, #28]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	4b91      	ldr	r3, [pc, #580]	; (800fc10 <_dtoa_r+0x650>)
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	f7f0 fe12 	bl	80005f8 <__aeabi_dmul>
 800f9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9d8:	3501      	adds	r5, #1
 800f9da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f9de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	f7f0 fd9e 	bl	8000524 <__aeabi_i2d>
 800f9e8:	4632      	mov	r2, r6
 800f9ea:	463b      	mov	r3, r7
 800f9ec:	f7f0 fe04 	bl	80005f8 <__aeabi_dmul>
 800f9f0:	4b88      	ldr	r3, [pc, #544]	; (800fc14 <_dtoa_r+0x654>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f7f0 fc4a 	bl	800028c <__adddf3>
 800f9f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f9fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa00:	9303      	str	r3, [sp, #12]
 800fa02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d15c      	bne.n	800fac2 <_dtoa_r+0x502>
 800fa08:	4b83      	ldr	r3, [pc, #524]	; (800fc18 <_dtoa_r+0x658>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	4639      	mov	r1, r7
 800fa10:	f7f0 fc3a 	bl	8000288 <__aeabi_dsub>
 800fa14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa18:	4606      	mov	r6, r0
 800fa1a:	460f      	mov	r7, r1
 800fa1c:	f7f1 f87c 	bl	8000b18 <__aeabi_dcmpgt>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	f040 8296 	bne.w	800ff52 <_dtoa_r+0x992>
 800fa26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa30:	4639      	mov	r1, r7
 800fa32:	f7f1 f853 	bl	8000adc <__aeabi_dcmplt>
 800fa36:	2800      	cmp	r0, #0
 800fa38:	f040 8288 	bne.w	800ff4c <_dtoa_r+0x98c>
 800fa3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fa40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	f2c0 8158 	blt.w	800fcfc <_dtoa_r+0x73c>
 800fa4c:	f1ba 0f0e 	cmp.w	sl, #14
 800fa50:	f300 8154 	bgt.w	800fcfc <_dtoa_r+0x73c>
 800fa54:	4b6b      	ldr	r3, [pc, #428]	; (800fc04 <_dtoa_r+0x644>)
 800fa56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fa5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f280 80e3 	bge.w	800fc2c <_dtoa_r+0x66c>
 800fa66:	9b01      	ldr	r3, [sp, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f300 80df 	bgt.w	800fc2c <_dtoa_r+0x66c>
 800fa6e:	f040 826d 	bne.w	800ff4c <_dtoa_r+0x98c>
 800fa72:	4b69      	ldr	r3, [pc, #420]	; (800fc18 <_dtoa_r+0x658>)
 800fa74:	2200      	movs	r2, #0
 800fa76:	4640      	mov	r0, r8
 800fa78:	4649      	mov	r1, r9
 800fa7a:	f7f0 fdbd 	bl	80005f8 <__aeabi_dmul>
 800fa7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa82:	f7f1 f83f 	bl	8000b04 <__aeabi_dcmpge>
 800fa86:	9e01      	ldr	r6, [sp, #4]
 800fa88:	4637      	mov	r7, r6
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	f040 8243 	bne.w	800ff16 <_dtoa_r+0x956>
 800fa90:	9d00      	ldr	r5, [sp, #0]
 800fa92:	2331      	movs	r3, #49	; 0x31
 800fa94:	f805 3b01 	strb.w	r3, [r5], #1
 800fa98:	f10a 0a01 	add.w	sl, sl, #1
 800fa9c:	e23f      	b.n	800ff1e <_dtoa_r+0x95e>
 800fa9e:	07f2      	lsls	r2, r6, #31
 800faa0:	d505      	bpl.n	800faae <_dtoa_r+0x4ee>
 800faa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faa6:	f7f0 fda7 	bl	80005f8 <__aeabi_dmul>
 800faaa:	3501      	adds	r5, #1
 800faac:	2301      	movs	r3, #1
 800faae:	1076      	asrs	r6, r6, #1
 800fab0:	3708      	adds	r7, #8
 800fab2:	e76c      	b.n	800f98e <_dtoa_r+0x3ce>
 800fab4:	2502      	movs	r5, #2
 800fab6:	e76f      	b.n	800f998 <_dtoa_r+0x3d8>
 800fab8:	9b01      	ldr	r3, [sp, #4]
 800faba:	f8cd a01c 	str.w	sl, [sp, #28]
 800fabe:	930c      	str	r3, [sp, #48]	; 0x30
 800fac0:	e78d      	b.n	800f9de <_dtoa_r+0x41e>
 800fac2:	9900      	ldr	r1, [sp, #0]
 800fac4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fac8:	4b4e      	ldr	r3, [pc, #312]	; (800fc04 <_dtoa_r+0x644>)
 800faca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800face:	4401      	add	r1, r0
 800fad0:	9102      	str	r1, [sp, #8]
 800fad2:	9908      	ldr	r1, [sp, #32]
 800fad4:	eeb0 8a47 	vmov.f32	s16, s14
 800fad8:	eef0 8a67 	vmov.f32	s17, s15
 800fadc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fae0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fae4:	2900      	cmp	r1, #0
 800fae6:	d045      	beq.n	800fb74 <_dtoa_r+0x5b4>
 800fae8:	494c      	ldr	r1, [pc, #304]	; (800fc1c <_dtoa_r+0x65c>)
 800faea:	2000      	movs	r0, #0
 800faec:	f7f0 feae 	bl	800084c <__aeabi_ddiv>
 800faf0:	ec53 2b18 	vmov	r2, r3, d8
 800faf4:	f7f0 fbc8 	bl	8000288 <__aeabi_dsub>
 800faf8:	9d00      	ldr	r5, [sp, #0]
 800fafa:	ec41 0b18 	vmov	d8, r0, r1
 800fafe:	4639      	mov	r1, r7
 800fb00:	4630      	mov	r0, r6
 800fb02:	f7f1 f829 	bl	8000b58 <__aeabi_d2iz>
 800fb06:	900c      	str	r0, [sp, #48]	; 0x30
 800fb08:	f7f0 fd0c 	bl	8000524 <__aeabi_i2d>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	4630      	mov	r0, r6
 800fb12:	4639      	mov	r1, r7
 800fb14:	f7f0 fbb8 	bl	8000288 <__aeabi_dsub>
 800fb18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb1a:	3330      	adds	r3, #48	; 0x30
 800fb1c:	f805 3b01 	strb.w	r3, [r5], #1
 800fb20:	ec53 2b18 	vmov	r2, r3, d8
 800fb24:	4606      	mov	r6, r0
 800fb26:	460f      	mov	r7, r1
 800fb28:	f7f0 ffd8 	bl	8000adc <__aeabi_dcmplt>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	d165      	bne.n	800fbfc <_dtoa_r+0x63c>
 800fb30:	4632      	mov	r2, r6
 800fb32:	463b      	mov	r3, r7
 800fb34:	4935      	ldr	r1, [pc, #212]	; (800fc0c <_dtoa_r+0x64c>)
 800fb36:	2000      	movs	r0, #0
 800fb38:	f7f0 fba6 	bl	8000288 <__aeabi_dsub>
 800fb3c:	ec53 2b18 	vmov	r2, r3, d8
 800fb40:	f7f0 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	f040 80b9 	bne.w	800fcbc <_dtoa_r+0x6fc>
 800fb4a:	9b02      	ldr	r3, [sp, #8]
 800fb4c:	429d      	cmp	r5, r3
 800fb4e:	f43f af75 	beq.w	800fa3c <_dtoa_r+0x47c>
 800fb52:	4b2f      	ldr	r3, [pc, #188]	; (800fc10 <_dtoa_r+0x650>)
 800fb54:	ec51 0b18 	vmov	r0, r1, d8
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f7f0 fd4d 	bl	80005f8 <__aeabi_dmul>
 800fb5e:	4b2c      	ldr	r3, [pc, #176]	; (800fc10 <_dtoa_r+0x650>)
 800fb60:	ec41 0b18 	vmov	d8, r0, r1
 800fb64:	2200      	movs	r2, #0
 800fb66:	4630      	mov	r0, r6
 800fb68:	4639      	mov	r1, r7
 800fb6a:	f7f0 fd45 	bl	80005f8 <__aeabi_dmul>
 800fb6e:	4606      	mov	r6, r0
 800fb70:	460f      	mov	r7, r1
 800fb72:	e7c4      	b.n	800fafe <_dtoa_r+0x53e>
 800fb74:	ec51 0b17 	vmov	r0, r1, d7
 800fb78:	f7f0 fd3e 	bl	80005f8 <__aeabi_dmul>
 800fb7c:	9b02      	ldr	r3, [sp, #8]
 800fb7e:	9d00      	ldr	r5, [sp, #0]
 800fb80:	930c      	str	r3, [sp, #48]	; 0x30
 800fb82:	ec41 0b18 	vmov	d8, r0, r1
 800fb86:	4639      	mov	r1, r7
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f7f0 ffe5 	bl	8000b58 <__aeabi_d2iz>
 800fb8e:	9011      	str	r0, [sp, #68]	; 0x44
 800fb90:	f7f0 fcc8 	bl	8000524 <__aeabi_i2d>
 800fb94:	4602      	mov	r2, r0
 800fb96:	460b      	mov	r3, r1
 800fb98:	4630      	mov	r0, r6
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	f7f0 fb74 	bl	8000288 <__aeabi_dsub>
 800fba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fba2:	3330      	adds	r3, #48	; 0x30
 800fba4:	f805 3b01 	strb.w	r3, [r5], #1
 800fba8:	9b02      	ldr	r3, [sp, #8]
 800fbaa:	429d      	cmp	r5, r3
 800fbac:	4606      	mov	r6, r0
 800fbae:	460f      	mov	r7, r1
 800fbb0:	f04f 0200 	mov.w	r2, #0
 800fbb4:	d134      	bne.n	800fc20 <_dtoa_r+0x660>
 800fbb6:	4b19      	ldr	r3, [pc, #100]	; (800fc1c <_dtoa_r+0x65c>)
 800fbb8:	ec51 0b18 	vmov	r0, r1, d8
 800fbbc:	f7f0 fb66 	bl	800028c <__adddf3>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	4639      	mov	r1, r7
 800fbc8:	f7f0 ffa6 	bl	8000b18 <__aeabi_dcmpgt>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d175      	bne.n	800fcbc <_dtoa_r+0x6fc>
 800fbd0:	ec53 2b18 	vmov	r2, r3, d8
 800fbd4:	4911      	ldr	r1, [pc, #68]	; (800fc1c <_dtoa_r+0x65c>)
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	f7f0 fb56 	bl	8000288 <__aeabi_dsub>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	460b      	mov	r3, r1
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	f7f0 ff7a 	bl	8000adc <__aeabi_dcmplt>
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	f43f af27 	beq.w	800fa3c <_dtoa_r+0x47c>
 800fbee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fbf0:	1e6b      	subs	r3, r5, #1
 800fbf2:	930c      	str	r3, [sp, #48]	; 0x30
 800fbf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fbf8:	2b30      	cmp	r3, #48	; 0x30
 800fbfa:	d0f8      	beq.n	800fbee <_dtoa_r+0x62e>
 800fbfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fc00:	e04a      	b.n	800fc98 <_dtoa_r+0x6d8>
 800fc02:	bf00      	nop
 800fc04:	080128f0 	.word	0x080128f0
 800fc08:	080128c8 	.word	0x080128c8
 800fc0c:	3ff00000 	.word	0x3ff00000
 800fc10:	40240000 	.word	0x40240000
 800fc14:	401c0000 	.word	0x401c0000
 800fc18:	40140000 	.word	0x40140000
 800fc1c:	3fe00000 	.word	0x3fe00000
 800fc20:	4baf      	ldr	r3, [pc, #700]	; (800fee0 <_dtoa_r+0x920>)
 800fc22:	f7f0 fce9 	bl	80005f8 <__aeabi_dmul>
 800fc26:	4606      	mov	r6, r0
 800fc28:	460f      	mov	r7, r1
 800fc2a:	e7ac      	b.n	800fb86 <_dtoa_r+0x5c6>
 800fc2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fc30:	9d00      	ldr	r5, [sp, #0]
 800fc32:	4642      	mov	r2, r8
 800fc34:	464b      	mov	r3, r9
 800fc36:	4630      	mov	r0, r6
 800fc38:	4639      	mov	r1, r7
 800fc3a:	f7f0 fe07 	bl	800084c <__aeabi_ddiv>
 800fc3e:	f7f0 ff8b 	bl	8000b58 <__aeabi_d2iz>
 800fc42:	9002      	str	r0, [sp, #8]
 800fc44:	f7f0 fc6e 	bl	8000524 <__aeabi_i2d>
 800fc48:	4642      	mov	r2, r8
 800fc4a:	464b      	mov	r3, r9
 800fc4c:	f7f0 fcd4 	bl	80005f8 <__aeabi_dmul>
 800fc50:	4602      	mov	r2, r0
 800fc52:	460b      	mov	r3, r1
 800fc54:	4630      	mov	r0, r6
 800fc56:	4639      	mov	r1, r7
 800fc58:	f7f0 fb16 	bl	8000288 <__aeabi_dsub>
 800fc5c:	9e02      	ldr	r6, [sp, #8]
 800fc5e:	9f01      	ldr	r7, [sp, #4]
 800fc60:	3630      	adds	r6, #48	; 0x30
 800fc62:	f805 6b01 	strb.w	r6, [r5], #1
 800fc66:	9e00      	ldr	r6, [sp, #0]
 800fc68:	1bae      	subs	r6, r5, r6
 800fc6a:	42b7      	cmp	r7, r6
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	460b      	mov	r3, r1
 800fc70:	d137      	bne.n	800fce2 <_dtoa_r+0x722>
 800fc72:	f7f0 fb0b 	bl	800028c <__adddf3>
 800fc76:	4642      	mov	r2, r8
 800fc78:	464b      	mov	r3, r9
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	460f      	mov	r7, r1
 800fc7e:	f7f0 ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 800fc82:	b9c8      	cbnz	r0, 800fcb8 <_dtoa_r+0x6f8>
 800fc84:	4642      	mov	r2, r8
 800fc86:	464b      	mov	r3, r9
 800fc88:	4630      	mov	r0, r6
 800fc8a:	4639      	mov	r1, r7
 800fc8c:	f7f0 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc90:	b110      	cbz	r0, 800fc98 <_dtoa_r+0x6d8>
 800fc92:	9b02      	ldr	r3, [sp, #8]
 800fc94:	07d9      	lsls	r1, r3, #31
 800fc96:	d40f      	bmi.n	800fcb8 <_dtoa_r+0x6f8>
 800fc98:	4620      	mov	r0, r4
 800fc9a:	4659      	mov	r1, fp
 800fc9c:	f000 facc 	bl	8010238 <_Bfree>
 800fca0:	2300      	movs	r3, #0
 800fca2:	702b      	strb	r3, [r5, #0]
 800fca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fca6:	f10a 0001 	add.w	r0, sl, #1
 800fcaa:	6018      	str	r0, [r3, #0]
 800fcac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f43f acd8 	beq.w	800f664 <_dtoa_r+0xa4>
 800fcb4:	601d      	str	r5, [r3, #0]
 800fcb6:	e4d5      	b.n	800f664 <_dtoa_r+0xa4>
 800fcb8:	f8cd a01c 	str.w	sl, [sp, #28]
 800fcbc:	462b      	mov	r3, r5
 800fcbe:	461d      	mov	r5, r3
 800fcc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcc4:	2a39      	cmp	r2, #57	; 0x39
 800fcc6:	d108      	bne.n	800fcda <_dtoa_r+0x71a>
 800fcc8:	9a00      	ldr	r2, [sp, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d1f7      	bne.n	800fcbe <_dtoa_r+0x6fe>
 800fcce:	9a07      	ldr	r2, [sp, #28]
 800fcd0:	9900      	ldr	r1, [sp, #0]
 800fcd2:	3201      	adds	r2, #1
 800fcd4:	9207      	str	r2, [sp, #28]
 800fcd6:	2230      	movs	r2, #48	; 0x30
 800fcd8:	700a      	strb	r2, [r1, #0]
 800fcda:	781a      	ldrb	r2, [r3, #0]
 800fcdc:	3201      	adds	r2, #1
 800fcde:	701a      	strb	r2, [r3, #0]
 800fce0:	e78c      	b.n	800fbfc <_dtoa_r+0x63c>
 800fce2:	4b7f      	ldr	r3, [pc, #508]	; (800fee0 <_dtoa_r+0x920>)
 800fce4:	2200      	movs	r2, #0
 800fce6:	f7f0 fc87 	bl	80005f8 <__aeabi_dmul>
 800fcea:	2200      	movs	r2, #0
 800fcec:	2300      	movs	r3, #0
 800fcee:	4606      	mov	r6, r0
 800fcf0:	460f      	mov	r7, r1
 800fcf2:	f7f0 fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	d09b      	beq.n	800fc32 <_dtoa_r+0x672>
 800fcfa:	e7cd      	b.n	800fc98 <_dtoa_r+0x6d8>
 800fcfc:	9a08      	ldr	r2, [sp, #32]
 800fcfe:	2a00      	cmp	r2, #0
 800fd00:	f000 80c4 	beq.w	800fe8c <_dtoa_r+0x8cc>
 800fd04:	9a05      	ldr	r2, [sp, #20]
 800fd06:	2a01      	cmp	r2, #1
 800fd08:	f300 80a8 	bgt.w	800fe5c <_dtoa_r+0x89c>
 800fd0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd0e:	2a00      	cmp	r2, #0
 800fd10:	f000 80a0 	beq.w	800fe54 <_dtoa_r+0x894>
 800fd14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd18:	9e06      	ldr	r6, [sp, #24]
 800fd1a:	4645      	mov	r5, r8
 800fd1c:	9a04      	ldr	r2, [sp, #16]
 800fd1e:	2101      	movs	r1, #1
 800fd20:	441a      	add	r2, r3
 800fd22:	4620      	mov	r0, r4
 800fd24:	4498      	add	r8, r3
 800fd26:	9204      	str	r2, [sp, #16]
 800fd28:	f000 fb42 	bl	80103b0 <__i2b>
 800fd2c:	4607      	mov	r7, r0
 800fd2e:	2d00      	cmp	r5, #0
 800fd30:	dd0b      	ble.n	800fd4a <_dtoa_r+0x78a>
 800fd32:	9b04      	ldr	r3, [sp, #16]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	dd08      	ble.n	800fd4a <_dtoa_r+0x78a>
 800fd38:	42ab      	cmp	r3, r5
 800fd3a:	9a04      	ldr	r2, [sp, #16]
 800fd3c:	bfa8      	it	ge
 800fd3e:	462b      	movge	r3, r5
 800fd40:	eba8 0803 	sub.w	r8, r8, r3
 800fd44:	1aed      	subs	r5, r5, r3
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	9304      	str	r3, [sp, #16]
 800fd4a:	9b06      	ldr	r3, [sp, #24]
 800fd4c:	b1fb      	cbz	r3, 800fd8e <_dtoa_r+0x7ce>
 800fd4e:	9b08      	ldr	r3, [sp, #32]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f000 809f 	beq.w	800fe94 <_dtoa_r+0x8d4>
 800fd56:	2e00      	cmp	r6, #0
 800fd58:	dd11      	ble.n	800fd7e <_dtoa_r+0x7be>
 800fd5a:	4639      	mov	r1, r7
 800fd5c:	4632      	mov	r2, r6
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f000 fbe2 	bl	8010528 <__pow5mult>
 800fd64:	465a      	mov	r2, fp
 800fd66:	4601      	mov	r1, r0
 800fd68:	4607      	mov	r7, r0
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f000 fb36 	bl	80103dc <__multiply>
 800fd70:	4659      	mov	r1, fp
 800fd72:	9007      	str	r0, [sp, #28]
 800fd74:	4620      	mov	r0, r4
 800fd76:	f000 fa5f 	bl	8010238 <_Bfree>
 800fd7a:	9b07      	ldr	r3, [sp, #28]
 800fd7c:	469b      	mov	fp, r3
 800fd7e:	9b06      	ldr	r3, [sp, #24]
 800fd80:	1b9a      	subs	r2, r3, r6
 800fd82:	d004      	beq.n	800fd8e <_dtoa_r+0x7ce>
 800fd84:	4659      	mov	r1, fp
 800fd86:	4620      	mov	r0, r4
 800fd88:	f000 fbce 	bl	8010528 <__pow5mult>
 800fd8c:	4683      	mov	fp, r0
 800fd8e:	2101      	movs	r1, #1
 800fd90:	4620      	mov	r0, r4
 800fd92:	f000 fb0d 	bl	80103b0 <__i2b>
 800fd96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	4606      	mov	r6, r0
 800fd9c:	dd7c      	ble.n	800fe98 <_dtoa_r+0x8d8>
 800fd9e:	461a      	mov	r2, r3
 800fda0:	4601      	mov	r1, r0
 800fda2:	4620      	mov	r0, r4
 800fda4:	f000 fbc0 	bl	8010528 <__pow5mult>
 800fda8:	9b05      	ldr	r3, [sp, #20]
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	4606      	mov	r6, r0
 800fdae:	dd76      	ble.n	800fe9e <_dtoa_r+0x8de>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	9306      	str	r3, [sp, #24]
 800fdb4:	6933      	ldr	r3, [r6, #16]
 800fdb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fdba:	6918      	ldr	r0, [r3, #16]
 800fdbc:	f000 faa8 	bl	8010310 <__hi0bits>
 800fdc0:	f1c0 0020 	rsb	r0, r0, #32
 800fdc4:	9b04      	ldr	r3, [sp, #16]
 800fdc6:	4418      	add	r0, r3
 800fdc8:	f010 001f 	ands.w	r0, r0, #31
 800fdcc:	f000 8086 	beq.w	800fedc <_dtoa_r+0x91c>
 800fdd0:	f1c0 0320 	rsb	r3, r0, #32
 800fdd4:	2b04      	cmp	r3, #4
 800fdd6:	dd7f      	ble.n	800fed8 <_dtoa_r+0x918>
 800fdd8:	f1c0 001c 	rsb	r0, r0, #28
 800fddc:	9b04      	ldr	r3, [sp, #16]
 800fdde:	4403      	add	r3, r0
 800fde0:	4480      	add	r8, r0
 800fde2:	4405      	add	r5, r0
 800fde4:	9304      	str	r3, [sp, #16]
 800fde6:	f1b8 0f00 	cmp.w	r8, #0
 800fdea:	dd05      	ble.n	800fdf8 <_dtoa_r+0x838>
 800fdec:	4659      	mov	r1, fp
 800fdee:	4642      	mov	r2, r8
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f000 fbf3 	bl	80105dc <__lshift>
 800fdf6:	4683      	mov	fp, r0
 800fdf8:	9b04      	ldr	r3, [sp, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	dd05      	ble.n	800fe0a <_dtoa_r+0x84a>
 800fdfe:	4631      	mov	r1, r6
 800fe00:	461a      	mov	r2, r3
 800fe02:	4620      	mov	r0, r4
 800fe04:	f000 fbea 	bl	80105dc <__lshift>
 800fe08:	4606      	mov	r6, r0
 800fe0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d069      	beq.n	800fee4 <_dtoa_r+0x924>
 800fe10:	4631      	mov	r1, r6
 800fe12:	4658      	mov	r0, fp
 800fe14:	f000 fc4e 	bl	80106b4 <__mcmp>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	da63      	bge.n	800fee4 <_dtoa_r+0x924>
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	4659      	mov	r1, fp
 800fe20:	220a      	movs	r2, #10
 800fe22:	4620      	mov	r0, r4
 800fe24:	f000 fa2a 	bl	801027c <__multadd>
 800fe28:	9b08      	ldr	r3, [sp, #32]
 800fe2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe2e:	4683      	mov	fp, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	f000 818f 	beq.w	8010154 <_dtoa_r+0xb94>
 800fe36:	4639      	mov	r1, r7
 800fe38:	2300      	movs	r3, #0
 800fe3a:	220a      	movs	r2, #10
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f000 fa1d 	bl	801027c <__multadd>
 800fe42:	f1b9 0f00 	cmp.w	r9, #0
 800fe46:	4607      	mov	r7, r0
 800fe48:	f300 808e 	bgt.w	800ff68 <_dtoa_r+0x9a8>
 800fe4c:	9b05      	ldr	r3, [sp, #20]
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	dc50      	bgt.n	800fef4 <_dtoa_r+0x934>
 800fe52:	e089      	b.n	800ff68 <_dtoa_r+0x9a8>
 800fe54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe5a:	e75d      	b.n	800fd18 <_dtoa_r+0x758>
 800fe5c:	9b01      	ldr	r3, [sp, #4]
 800fe5e:	1e5e      	subs	r6, r3, #1
 800fe60:	9b06      	ldr	r3, [sp, #24]
 800fe62:	42b3      	cmp	r3, r6
 800fe64:	bfbf      	itttt	lt
 800fe66:	9b06      	ldrlt	r3, [sp, #24]
 800fe68:	9606      	strlt	r6, [sp, #24]
 800fe6a:	1af2      	sublt	r2, r6, r3
 800fe6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fe6e:	bfb6      	itet	lt
 800fe70:	189b      	addlt	r3, r3, r2
 800fe72:	1b9e      	subge	r6, r3, r6
 800fe74:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fe76:	9b01      	ldr	r3, [sp, #4]
 800fe78:	bfb8      	it	lt
 800fe7a:	2600      	movlt	r6, #0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	bfb5      	itete	lt
 800fe80:	eba8 0503 	sublt.w	r5, r8, r3
 800fe84:	9b01      	ldrge	r3, [sp, #4]
 800fe86:	2300      	movlt	r3, #0
 800fe88:	4645      	movge	r5, r8
 800fe8a:	e747      	b.n	800fd1c <_dtoa_r+0x75c>
 800fe8c:	9e06      	ldr	r6, [sp, #24]
 800fe8e:	9f08      	ldr	r7, [sp, #32]
 800fe90:	4645      	mov	r5, r8
 800fe92:	e74c      	b.n	800fd2e <_dtoa_r+0x76e>
 800fe94:	9a06      	ldr	r2, [sp, #24]
 800fe96:	e775      	b.n	800fd84 <_dtoa_r+0x7c4>
 800fe98:	9b05      	ldr	r3, [sp, #20]
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	dc18      	bgt.n	800fed0 <_dtoa_r+0x910>
 800fe9e:	9b02      	ldr	r3, [sp, #8]
 800fea0:	b9b3      	cbnz	r3, 800fed0 <_dtoa_r+0x910>
 800fea2:	9b03      	ldr	r3, [sp, #12]
 800fea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fea8:	b9a3      	cbnz	r3, 800fed4 <_dtoa_r+0x914>
 800feaa:	9b03      	ldr	r3, [sp, #12]
 800feac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800feb0:	0d1b      	lsrs	r3, r3, #20
 800feb2:	051b      	lsls	r3, r3, #20
 800feb4:	b12b      	cbz	r3, 800fec2 <_dtoa_r+0x902>
 800feb6:	9b04      	ldr	r3, [sp, #16]
 800feb8:	3301      	adds	r3, #1
 800feba:	9304      	str	r3, [sp, #16]
 800febc:	f108 0801 	add.w	r8, r8, #1
 800fec0:	2301      	movs	r3, #1
 800fec2:	9306      	str	r3, [sp, #24]
 800fec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f47f af74 	bne.w	800fdb4 <_dtoa_r+0x7f4>
 800fecc:	2001      	movs	r0, #1
 800fece:	e779      	b.n	800fdc4 <_dtoa_r+0x804>
 800fed0:	2300      	movs	r3, #0
 800fed2:	e7f6      	b.n	800fec2 <_dtoa_r+0x902>
 800fed4:	9b02      	ldr	r3, [sp, #8]
 800fed6:	e7f4      	b.n	800fec2 <_dtoa_r+0x902>
 800fed8:	d085      	beq.n	800fde6 <_dtoa_r+0x826>
 800feda:	4618      	mov	r0, r3
 800fedc:	301c      	adds	r0, #28
 800fede:	e77d      	b.n	800fddc <_dtoa_r+0x81c>
 800fee0:	40240000 	.word	0x40240000
 800fee4:	9b01      	ldr	r3, [sp, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	dc38      	bgt.n	800ff5c <_dtoa_r+0x99c>
 800feea:	9b05      	ldr	r3, [sp, #20]
 800feec:	2b02      	cmp	r3, #2
 800feee:	dd35      	ble.n	800ff5c <_dtoa_r+0x99c>
 800fef0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fef4:	f1b9 0f00 	cmp.w	r9, #0
 800fef8:	d10d      	bne.n	800ff16 <_dtoa_r+0x956>
 800fefa:	4631      	mov	r1, r6
 800fefc:	464b      	mov	r3, r9
 800fefe:	2205      	movs	r2, #5
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 f9bb 	bl	801027c <__multadd>
 800ff06:	4601      	mov	r1, r0
 800ff08:	4606      	mov	r6, r0
 800ff0a:	4658      	mov	r0, fp
 800ff0c:	f000 fbd2 	bl	80106b4 <__mcmp>
 800ff10:	2800      	cmp	r0, #0
 800ff12:	f73f adbd 	bgt.w	800fa90 <_dtoa_r+0x4d0>
 800ff16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff18:	9d00      	ldr	r5, [sp, #0]
 800ff1a:	ea6f 0a03 	mvn.w	sl, r3
 800ff1e:	f04f 0800 	mov.w	r8, #0
 800ff22:	4631      	mov	r1, r6
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 f987 	bl	8010238 <_Bfree>
 800ff2a:	2f00      	cmp	r7, #0
 800ff2c:	f43f aeb4 	beq.w	800fc98 <_dtoa_r+0x6d8>
 800ff30:	f1b8 0f00 	cmp.w	r8, #0
 800ff34:	d005      	beq.n	800ff42 <_dtoa_r+0x982>
 800ff36:	45b8      	cmp	r8, r7
 800ff38:	d003      	beq.n	800ff42 <_dtoa_r+0x982>
 800ff3a:	4641      	mov	r1, r8
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f000 f97b 	bl	8010238 <_Bfree>
 800ff42:	4639      	mov	r1, r7
 800ff44:	4620      	mov	r0, r4
 800ff46:	f000 f977 	bl	8010238 <_Bfree>
 800ff4a:	e6a5      	b.n	800fc98 <_dtoa_r+0x6d8>
 800ff4c:	2600      	movs	r6, #0
 800ff4e:	4637      	mov	r7, r6
 800ff50:	e7e1      	b.n	800ff16 <_dtoa_r+0x956>
 800ff52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ff54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ff58:	4637      	mov	r7, r6
 800ff5a:	e599      	b.n	800fa90 <_dtoa_r+0x4d0>
 800ff5c:	9b08      	ldr	r3, [sp, #32]
 800ff5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	f000 80fd 	beq.w	8010162 <_dtoa_r+0xba2>
 800ff68:	2d00      	cmp	r5, #0
 800ff6a:	dd05      	ble.n	800ff78 <_dtoa_r+0x9b8>
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	462a      	mov	r2, r5
 800ff70:	4620      	mov	r0, r4
 800ff72:	f000 fb33 	bl	80105dc <__lshift>
 800ff76:	4607      	mov	r7, r0
 800ff78:	9b06      	ldr	r3, [sp, #24]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d05c      	beq.n	8010038 <_dtoa_r+0xa78>
 800ff7e:	6879      	ldr	r1, [r7, #4]
 800ff80:	4620      	mov	r0, r4
 800ff82:	f000 f919 	bl	80101b8 <_Balloc>
 800ff86:	4605      	mov	r5, r0
 800ff88:	b928      	cbnz	r0, 800ff96 <_dtoa_r+0x9d6>
 800ff8a:	4b80      	ldr	r3, [pc, #512]	; (801018c <_dtoa_r+0xbcc>)
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ff92:	f7ff bb2e 	b.w	800f5f2 <_dtoa_r+0x32>
 800ff96:	693a      	ldr	r2, [r7, #16]
 800ff98:	3202      	adds	r2, #2
 800ff9a:	0092      	lsls	r2, r2, #2
 800ff9c:	f107 010c 	add.w	r1, r7, #12
 800ffa0:	300c      	adds	r0, #12
 800ffa2:	f7fe fd27 	bl	800e9f4 <memcpy>
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	4620      	mov	r0, r4
 800ffac:	f000 fb16 	bl	80105dc <__lshift>
 800ffb0:	9b00      	ldr	r3, [sp, #0]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	9301      	str	r3, [sp, #4]
 800ffb6:	9b00      	ldr	r3, [sp, #0]
 800ffb8:	444b      	add	r3, r9
 800ffba:	9307      	str	r3, [sp, #28]
 800ffbc:	9b02      	ldr	r3, [sp, #8]
 800ffbe:	f003 0301 	and.w	r3, r3, #1
 800ffc2:	46b8      	mov	r8, r7
 800ffc4:	9306      	str	r3, [sp, #24]
 800ffc6:	4607      	mov	r7, r0
 800ffc8:	9b01      	ldr	r3, [sp, #4]
 800ffca:	4631      	mov	r1, r6
 800ffcc:	3b01      	subs	r3, #1
 800ffce:	4658      	mov	r0, fp
 800ffd0:	9302      	str	r3, [sp, #8]
 800ffd2:	f7ff fa69 	bl	800f4a8 <quorem>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	3330      	adds	r3, #48	; 0x30
 800ffda:	9004      	str	r0, [sp, #16]
 800ffdc:	4641      	mov	r1, r8
 800ffde:	4658      	mov	r0, fp
 800ffe0:	9308      	str	r3, [sp, #32]
 800ffe2:	f000 fb67 	bl	80106b4 <__mcmp>
 800ffe6:	463a      	mov	r2, r7
 800ffe8:	4681      	mov	r9, r0
 800ffea:	4631      	mov	r1, r6
 800ffec:	4620      	mov	r0, r4
 800ffee:	f000 fb7d 	bl	80106ec <__mdiff>
 800fff2:	68c2      	ldr	r2, [r0, #12]
 800fff4:	9b08      	ldr	r3, [sp, #32]
 800fff6:	4605      	mov	r5, r0
 800fff8:	bb02      	cbnz	r2, 801003c <_dtoa_r+0xa7c>
 800fffa:	4601      	mov	r1, r0
 800fffc:	4658      	mov	r0, fp
 800fffe:	f000 fb59 	bl	80106b4 <__mcmp>
 8010002:	9b08      	ldr	r3, [sp, #32]
 8010004:	4602      	mov	r2, r0
 8010006:	4629      	mov	r1, r5
 8010008:	4620      	mov	r0, r4
 801000a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801000e:	f000 f913 	bl	8010238 <_Bfree>
 8010012:	9b05      	ldr	r3, [sp, #20]
 8010014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010016:	9d01      	ldr	r5, [sp, #4]
 8010018:	ea43 0102 	orr.w	r1, r3, r2
 801001c:	9b06      	ldr	r3, [sp, #24]
 801001e:	430b      	orrs	r3, r1
 8010020:	9b08      	ldr	r3, [sp, #32]
 8010022:	d10d      	bne.n	8010040 <_dtoa_r+0xa80>
 8010024:	2b39      	cmp	r3, #57	; 0x39
 8010026:	d029      	beq.n	801007c <_dtoa_r+0xabc>
 8010028:	f1b9 0f00 	cmp.w	r9, #0
 801002c:	dd01      	ble.n	8010032 <_dtoa_r+0xa72>
 801002e:	9b04      	ldr	r3, [sp, #16]
 8010030:	3331      	adds	r3, #49	; 0x31
 8010032:	9a02      	ldr	r2, [sp, #8]
 8010034:	7013      	strb	r3, [r2, #0]
 8010036:	e774      	b.n	800ff22 <_dtoa_r+0x962>
 8010038:	4638      	mov	r0, r7
 801003a:	e7b9      	b.n	800ffb0 <_dtoa_r+0x9f0>
 801003c:	2201      	movs	r2, #1
 801003e:	e7e2      	b.n	8010006 <_dtoa_r+0xa46>
 8010040:	f1b9 0f00 	cmp.w	r9, #0
 8010044:	db06      	blt.n	8010054 <_dtoa_r+0xa94>
 8010046:	9905      	ldr	r1, [sp, #20]
 8010048:	ea41 0909 	orr.w	r9, r1, r9
 801004c:	9906      	ldr	r1, [sp, #24]
 801004e:	ea59 0101 	orrs.w	r1, r9, r1
 8010052:	d120      	bne.n	8010096 <_dtoa_r+0xad6>
 8010054:	2a00      	cmp	r2, #0
 8010056:	ddec      	ble.n	8010032 <_dtoa_r+0xa72>
 8010058:	4659      	mov	r1, fp
 801005a:	2201      	movs	r2, #1
 801005c:	4620      	mov	r0, r4
 801005e:	9301      	str	r3, [sp, #4]
 8010060:	f000 fabc 	bl	80105dc <__lshift>
 8010064:	4631      	mov	r1, r6
 8010066:	4683      	mov	fp, r0
 8010068:	f000 fb24 	bl	80106b4 <__mcmp>
 801006c:	2800      	cmp	r0, #0
 801006e:	9b01      	ldr	r3, [sp, #4]
 8010070:	dc02      	bgt.n	8010078 <_dtoa_r+0xab8>
 8010072:	d1de      	bne.n	8010032 <_dtoa_r+0xa72>
 8010074:	07da      	lsls	r2, r3, #31
 8010076:	d5dc      	bpl.n	8010032 <_dtoa_r+0xa72>
 8010078:	2b39      	cmp	r3, #57	; 0x39
 801007a:	d1d8      	bne.n	801002e <_dtoa_r+0xa6e>
 801007c:	9a02      	ldr	r2, [sp, #8]
 801007e:	2339      	movs	r3, #57	; 0x39
 8010080:	7013      	strb	r3, [r2, #0]
 8010082:	462b      	mov	r3, r5
 8010084:	461d      	mov	r5, r3
 8010086:	3b01      	subs	r3, #1
 8010088:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801008c:	2a39      	cmp	r2, #57	; 0x39
 801008e:	d050      	beq.n	8010132 <_dtoa_r+0xb72>
 8010090:	3201      	adds	r2, #1
 8010092:	701a      	strb	r2, [r3, #0]
 8010094:	e745      	b.n	800ff22 <_dtoa_r+0x962>
 8010096:	2a00      	cmp	r2, #0
 8010098:	dd03      	ble.n	80100a2 <_dtoa_r+0xae2>
 801009a:	2b39      	cmp	r3, #57	; 0x39
 801009c:	d0ee      	beq.n	801007c <_dtoa_r+0xabc>
 801009e:	3301      	adds	r3, #1
 80100a0:	e7c7      	b.n	8010032 <_dtoa_r+0xa72>
 80100a2:	9a01      	ldr	r2, [sp, #4]
 80100a4:	9907      	ldr	r1, [sp, #28]
 80100a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80100aa:	428a      	cmp	r2, r1
 80100ac:	d02a      	beq.n	8010104 <_dtoa_r+0xb44>
 80100ae:	4659      	mov	r1, fp
 80100b0:	2300      	movs	r3, #0
 80100b2:	220a      	movs	r2, #10
 80100b4:	4620      	mov	r0, r4
 80100b6:	f000 f8e1 	bl	801027c <__multadd>
 80100ba:	45b8      	cmp	r8, r7
 80100bc:	4683      	mov	fp, r0
 80100be:	f04f 0300 	mov.w	r3, #0
 80100c2:	f04f 020a 	mov.w	r2, #10
 80100c6:	4641      	mov	r1, r8
 80100c8:	4620      	mov	r0, r4
 80100ca:	d107      	bne.n	80100dc <_dtoa_r+0xb1c>
 80100cc:	f000 f8d6 	bl	801027c <__multadd>
 80100d0:	4680      	mov	r8, r0
 80100d2:	4607      	mov	r7, r0
 80100d4:	9b01      	ldr	r3, [sp, #4]
 80100d6:	3301      	adds	r3, #1
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	e775      	b.n	800ffc8 <_dtoa_r+0xa08>
 80100dc:	f000 f8ce 	bl	801027c <__multadd>
 80100e0:	4639      	mov	r1, r7
 80100e2:	4680      	mov	r8, r0
 80100e4:	2300      	movs	r3, #0
 80100e6:	220a      	movs	r2, #10
 80100e8:	4620      	mov	r0, r4
 80100ea:	f000 f8c7 	bl	801027c <__multadd>
 80100ee:	4607      	mov	r7, r0
 80100f0:	e7f0      	b.n	80100d4 <_dtoa_r+0xb14>
 80100f2:	f1b9 0f00 	cmp.w	r9, #0
 80100f6:	9a00      	ldr	r2, [sp, #0]
 80100f8:	bfcc      	ite	gt
 80100fa:	464d      	movgt	r5, r9
 80100fc:	2501      	movle	r5, #1
 80100fe:	4415      	add	r5, r2
 8010100:	f04f 0800 	mov.w	r8, #0
 8010104:	4659      	mov	r1, fp
 8010106:	2201      	movs	r2, #1
 8010108:	4620      	mov	r0, r4
 801010a:	9301      	str	r3, [sp, #4]
 801010c:	f000 fa66 	bl	80105dc <__lshift>
 8010110:	4631      	mov	r1, r6
 8010112:	4683      	mov	fp, r0
 8010114:	f000 face 	bl	80106b4 <__mcmp>
 8010118:	2800      	cmp	r0, #0
 801011a:	dcb2      	bgt.n	8010082 <_dtoa_r+0xac2>
 801011c:	d102      	bne.n	8010124 <_dtoa_r+0xb64>
 801011e:	9b01      	ldr	r3, [sp, #4]
 8010120:	07db      	lsls	r3, r3, #31
 8010122:	d4ae      	bmi.n	8010082 <_dtoa_r+0xac2>
 8010124:	462b      	mov	r3, r5
 8010126:	461d      	mov	r5, r3
 8010128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801012c:	2a30      	cmp	r2, #48	; 0x30
 801012e:	d0fa      	beq.n	8010126 <_dtoa_r+0xb66>
 8010130:	e6f7      	b.n	800ff22 <_dtoa_r+0x962>
 8010132:	9a00      	ldr	r2, [sp, #0]
 8010134:	429a      	cmp	r2, r3
 8010136:	d1a5      	bne.n	8010084 <_dtoa_r+0xac4>
 8010138:	f10a 0a01 	add.w	sl, sl, #1
 801013c:	2331      	movs	r3, #49	; 0x31
 801013e:	e779      	b.n	8010034 <_dtoa_r+0xa74>
 8010140:	4b13      	ldr	r3, [pc, #76]	; (8010190 <_dtoa_r+0xbd0>)
 8010142:	f7ff baaf 	b.w	800f6a4 <_dtoa_r+0xe4>
 8010146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010148:	2b00      	cmp	r3, #0
 801014a:	f47f aa86 	bne.w	800f65a <_dtoa_r+0x9a>
 801014e:	4b11      	ldr	r3, [pc, #68]	; (8010194 <_dtoa_r+0xbd4>)
 8010150:	f7ff baa8 	b.w	800f6a4 <_dtoa_r+0xe4>
 8010154:	f1b9 0f00 	cmp.w	r9, #0
 8010158:	dc03      	bgt.n	8010162 <_dtoa_r+0xba2>
 801015a:	9b05      	ldr	r3, [sp, #20]
 801015c:	2b02      	cmp	r3, #2
 801015e:	f73f aec9 	bgt.w	800fef4 <_dtoa_r+0x934>
 8010162:	9d00      	ldr	r5, [sp, #0]
 8010164:	4631      	mov	r1, r6
 8010166:	4658      	mov	r0, fp
 8010168:	f7ff f99e 	bl	800f4a8 <quorem>
 801016c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010170:	f805 3b01 	strb.w	r3, [r5], #1
 8010174:	9a00      	ldr	r2, [sp, #0]
 8010176:	1aaa      	subs	r2, r5, r2
 8010178:	4591      	cmp	r9, r2
 801017a:	ddba      	ble.n	80100f2 <_dtoa_r+0xb32>
 801017c:	4659      	mov	r1, fp
 801017e:	2300      	movs	r3, #0
 8010180:	220a      	movs	r2, #10
 8010182:	4620      	mov	r0, r4
 8010184:	f000 f87a 	bl	801027c <__multadd>
 8010188:	4683      	mov	fp, r0
 801018a:	e7eb      	b.n	8010164 <_dtoa_r+0xba4>
 801018c:	08012853 	.word	0x08012853
 8010190:	080127ac 	.word	0x080127ac
 8010194:	080127d0 	.word	0x080127d0

08010198 <_localeconv_r>:
 8010198:	4800      	ldr	r0, [pc, #0]	; (801019c <_localeconv_r+0x4>)
 801019a:	4770      	bx	lr
 801019c:	20000180 	.word	0x20000180

080101a0 <__malloc_lock>:
 80101a0:	4801      	ldr	r0, [pc, #4]	; (80101a8 <__malloc_lock+0x8>)
 80101a2:	f000 bd22 	b.w	8010bea <__retarget_lock_acquire_recursive>
 80101a6:	bf00      	nop
 80101a8:	20004d6c 	.word	0x20004d6c

080101ac <__malloc_unlock>:
 80101ac:	4801      	ldr	r0, [pc, #4]	; (80101b4 <__malloc_unlock+0x8>)
 80101ae:	f000 bd1d 	b.w	8010bec <__retarget_lock_release_recursive>
 80101b2:	bf00      	nop
 80101b4:	20004d6c 	.word	0x20004d6c

080101b8 <_Balloc>:
 80101b8:	b570      	push	{r4, r5, r6, lr}
 80101ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101bc:	4604      	mov	r4, r0
 80101be:	460d      	mov	r5, r1
 80101c0:	b976      	cbnz	r6, 80101e0 <_Balloc+0x28>
 80101c2:	2010      	movs	r0, #16
 80101c4:	f7fe fc06 	bl	800e9d4 <malloc>
 80101c8:	4602      	mov	r2, r0
 80101ca:	6260      	str	r0, [r4, #36]	; 0x24
 80101cc:	b920      	cbnz	r0, 80101d8 <_Balloc+0x20>
 80101ce:	4b18      	ldr	r3, [pc, #96]	; (8010230 <_Balloc+0x78>)
 80101d0:	4818      	ldr	r0, [pc, #96]	; (8010234 <_Balloc+0x7c>)
 80101d2:	2166      	movs	r1, #102	; 0x66
 80101d4:	f000 fcd8 	bl	8010b88 <__assert_func>
 80101d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101dc:	6006      	str	r6, [r0, #0]
 80101de:	60c6      	str	r6, [r0, #12]
 80101e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80101e2:	68f3      	ldr	r3, [r6, #12]
 80101e4:	b183      	cbz	r3, 8010208 <_Balloc+0x50>
 80101e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80101ee:	b9b8      	cbnz	r0, 8010220 <_Balloc+0x68>
 80101f0:	2101      	movs	r1, #1
 80101f2:	fa01 f605 	lsl.w	r6, r1, r5
 80101f6:	1d72      	adds	r2, r6, #5
 80101f8:	0092      	lsls	r2, r2, #2
 80101fa:	4620      	mov	r0, r4
 80101fc:	f000 fb5a 	bl	80108b4 <_calloc_r>
 8010200:	b160      	cbz	r0, 801021c <_Balloc+0x64>
 8010202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010206:	e00e      	b.n	8010226 <_Balloc+0x6e>
 8010208:	2221      	movs	r2, #33	; 0x21
 801020a:	2104      	movs	r1, #4
 801020c:	4620      	mov	r0, r4
 801020e:	f000 fb51 	bl	80108b4 <_calloc_r>
 8010212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010214:	60f0      	str	r0, [r6, #12]
 8010216:	68db      	ldr	r3, [r3, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1e4      	bne.n	80101e6 <_Balloc+0x2e>
 801021c:	2000      	movs	r0, #0
 801021e:	bd70      	pop	{r4, r5, r6, pc}
 8010220:	6802      	ldr	r2, [r0, #0]
 8010222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010226:	2300      	movs	r3, #0
 8010228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801022c:	e7f7      	b.n	801021e <_Balloc+0x66>
 801022e:	bf00      	nop
 8010230:	080127dd 	.word	0x080127dd
 8010234:	08012864 	.word	0x08012864

08010238 <_Bfree>:
 8010238:	b570      	push	{r4, r5, r6, lr}
 801023a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801023c:	4605      	mov	r5, r0
 801023e:	460c      	mov	r4, r1
 8010240:	b976      	cbnz	r6, 8010260 <_Bfree+0x28>
 8010242:	2010      	movs	r0, #16
 8010244:	f7fe fbc6 	bl	800e9d4 <malloc>
 8010248:	4602      	mov	r2, r0
 801024a:	6268      	str	r0, [r5, #36]	; 0x24
 801024c:	b920      	cbnz	r0, 8010258 <_Bfree+0x20>
 801024e:	4b09      	ldr	r3, [pc, #36]	; (8010274 <_Bfree+0x3c>)
 8010250:	4809      	ldr	r0, [pc, #36]	; (8010278 <_Bfree+0x40>)
 8010252:	218a      	movs	r1, #138	; 0x8a
 8010254:	f000 fc98 	bl	8010b88 <__assert_func>
 8010258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801025c:	6006      	str	r6, [r0, #0]
 801025e:	60c6      	str	r6, [r0, #12]
 8010260:	b13c      	cbz	r4, 8010272 <_Bfree+0x3a>
 8010262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010264:	6862      	ldr	r2, [r4, #4]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801026c:	6021      	str	r1, [r4, #0]
 801026e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010272:	bd70      	pop	{r4, r5, r6, pc}
 8010274:	080127dd 	.word	0x080127dd
 8010278:	08012864 	.word	0x08012864

0801027c <__multadd>:
 801027c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010280:	690e      	ldr	r6, [r1, #16]
 8010282:	4607      	mov	r7, r0
 8010284:	4698      	mov	r8, r3
 8010286:	460c      	mov	r4, r1
 8010288:	f101 0014 	add.w	r0, r1, #20
 801028c:	2300      	movs	r3, #0
 801028e:	6805      	ldr	r5, [r0, #0]
 8010290:	b2a9      	uxth	r1, r5
 8010292:	fb02 8101 	mla	r1, r2, r1, r8
 8010296:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801029a:	0c2d      	lsrs	r5, r5, #16
 801029c:	fb02 c505 	mla	r5, r2, r5, ip
 80102a0:	b289      	uxth	r1, r1
 80102a2:	3301      	adds	r3, #1
 80102a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80102a8:	429e      	cmp	r6, r3
 80102aa:	f840 1b04 	str.w	r1, [r0], #4
 80102ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80102b2:	dcec      	bgt.n	801028e <__multadd+0x12>
 80102b4:	f1b8 0f00 	cmp.w	r8, #0
 80102b8:	d022      	beq.n	8010300 <__multadd+0x84>
 80102ba:	68a3      	ldr	r3, [r4, #8]
 80102bc:	42b3      	cmp	r3, r6
 80102be:	dc19      	bgt.n	80102f4 <__multadd+0x78>
 80102c0:	6861      	ldr	r1, [r4, #4]
 80102c2:	4638      	mov	r0, r7
 80102c4:	3101      	adds	r1, #1
 80102c6:	f7ff ff77 	bl	80101b8 <_Balloc>
 80102ca:	4605      	mov	r5, r0
 80102cc:	b928      	cbnz	r0, 80102da <__multadd+0x5e>
 80102ce:	4602      	mov	r2, r0
 80102d0:	4b0d      	ldr	r3, [pc, #52]	; (8010308 <__multadd+0x8c>)
 80102d2:	480e      	ldr	r0, [pc, #56]	; (801030c <__multadd+0x90>)
 80102d4:	21b5      	movs	r1, #181	; 0xb5
 80102d6:	f000 fc57 	bl	8010b88 <__assert_func>
 80102da:	6922      	ldr	r2, [r4, #16]
 80102dc:	3202      	adds	r2, #2
 80102de:	f104 010c 	add.w	r1, r4, #12
 80102e2:	0092      	lsls	r2, r2, #2
 80102e4:	300c      	adds	r0, #12
 80102e6:	f7fe fb85 	bl	800e9f4 <memcpy>
 80102ea:	4621      	mov	r1, r4
 80102ec:	4638      	mov	r0, r7
 80102ee:	f7ff ffa3 	bl	8010238 <_Bfree>
 80102f2:	462c      	mov	r4, r5
 80102f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80102f8:	3601      	adds	r6, #1
 80102fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80102fe:	6126      	str	r6, [r4, #16]
 8010300:	4620      	mov	r0, r4
 8010302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010306:	bf00      	nop
 8010308:	08012853 	.word	0x08012853
 801030c:	08012864 	.word	0x08012864

08010310 <__hi0bits>:
 8010310:	0c03      	lsrs	r3, r0, #16
 8010312:	041b      	lsls	r3, r3, #16
 8010314:	b9d3      	cbnz	r3, 801034c <__hi0bits+0x3c>
 8010316:	0400      	lsls	r0, r0, #16
 8010318:	2310      	movs	r3, #16
 801031a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801031e:	bf04      	itt	eq
 8010320:	0200      	lsleq	r0, r0, #8
 8010322:	3308      	addeq	r3, #8
 8010324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010328:	bf04      	itt	eq
 801032a:	0100      	lsleq	r0, r0, #4
 801032c:	3304      	addeq	r3, #4
 801032e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010332:	bf04      	itt	eq
 8010334:	0080      	lsleq	r0, r0, #2
 8010336:	3302      	addeq	r3, #2
 8010338:	2800      	cmp	r0, #0
 801033a:	db05      	blt.n	8010348 <__hi0bits+0x38>
 801033c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010340:	f103 0301 	add.w	r3, r3, #1
 8010344:	bf08      	it	eq
 8010346:	2320      	moveq	r3, #32
 8010348:	4618      	mov	r0, r3
 801034a:	4770      	bx	lr
 801034c:	2300      	movs	r3, #0
 801034e:	e7e4      	b.n	801031a <__hi0bits+0xa>

08010350 <__lo0bits>:
 8010350:	6803      	ldr	r3, [r0, #0]
 8010352:	f013 0207 	ands.w	r2, r3, #7
 8010356:	4601      	mov	r1, r0
 8010358:	d00b      	beq.n	8010372 <__lo0bits+0x22>
 801035a:	07da      	lsls	r2, r3, #31
 801035c:	d424      	bmi.n	80103a8 <__lo0bits+0x58>
 801035e:	0798      	lsls	r0, r3, #30
 8010360:	bf49      	itett	mi
 8010362:	085b      	lsrmi	r3, r3, #1
 8010364:	089b      	lsrpl	r3, r3, #2
 8010366:	2001      	movmi	r0, #1
 8010368:	600b      	strmi	r3, [r1, #0]
 801036a:	bf5c      	itt	pl
 801036c:	600b      	strpl	r3, [r1, #0]
 801036e:	2002      	movpl	r0, #2
 8010370:	4770      	bx	lr
 8010372:	b298      	uxth	r0, r3
 8010374:	b9b0      	cbnz	r0, 80103a4 <__lo0bits+0x54>
 8010376:	0c1b      	lsrs	r3, r3, #16
 8010378:	2010      	movs	r0, #16
 801037a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801037e:	bf04      	itt	eq
 8010380:	0a1b      	lsreq	r3, r3, #8
 8010382:	3008      	addeq	r0, #8
 8010384:	071a      	lsls	r2, r3, #28
 8010386:	bf04      	itt	eq
 8010388:	091b      	lsreq	r3, r3, #4
 801038a:	3004      	addeq	r0, #4
 801038c:	079a      	lsls	r2, r3, #30
 801038e:	bf04      	itt	eq
 8010390:	089b      	lsreq	r3, r3, #2
 8010392:	3002      	addeq	r0, #2
 8010394:	07da      	lsls	r2, r3, #31
 8010396:	d403      	bmi.n	80103a0 <__lo0bits+0x50>
 8010398:	085b      	lsrs	r3, r3, #1
 801039a:	f100 0001 	add.w	r0, r0, #1
 801039e:	d005      	beq.n	80103ac <__lo0bits+0x5c>
 80103a0:	600b      	str	r3, [r1, #0]
 80103a2:	4770      	bx	lr
 80103a4:	4610      	mov	r0, r2
 80103a6:	e7e8      	b.n	801037a <__lo0bits+0x2a>
 80103a8:	2000      	movs	r0, #0
 80103aa:	4770      	bx	lr
 80103ac:	2020      	movs	r0, #32
 80103ae:	4770      	bx	lr

080103b0 <__i2b>:
 80103b0:	b510      	push	{r4, lr}
 80103b2:	460c      	mov	r4, r1
 80103b4:	2101      	movs	r1, #1
 80103b6:	f7ff feff 	bl	80101b8 <_Balloc>
 80103ba:	4602      	mov	r2, r0
 80103bc:	b928      	cbnz	r0, 80103ca <__i2b+0x1a>
 80103be:	4b05      	ldr	r3, [pc, #20]	; (80103d4 <__i2b+0x24>)
 80103c0:	4805      	ldr	r0, [pc, #20]	; (80103d8 <__i2b+0x28>)
 80103c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80103c6:	f000 fbdf 	bl	8010b88 <__assert_func>
 80103ca:	2301      	movs	r3, #1
 80103cc:	6144      	str	r4, [r0, #20]
 80103ce:	6103      	str	r3, [r0, #16]
 80103d0:	bd10      	pop	{r4, pc}
 80103d2:	bf00      	nop
 80103d4:	08012853 	.word	0x08012853
 80103d8:	08012864 	.word	0x08012864

080103dc <__multiply>:
 80103dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e0:	4614      	mov	r4, r2
 80103e2:	690a      	ldr	r2, [r1, #16]
 80103e4:	6923      	ldr	r3, [r4, #16]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	bfb8      	it	lt
 80103ea:	460b      	movlt	r3, r1
 80103ec:	460d      	mov	r5, r1
 80103ee:	bfbc      	itt	lt
 80103f0:	4625      	movlt	r5, r4
 80103f2:	461c      	movlt	r4, r3
 80103f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80103f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80103fc:	68ab      	ldr	r3, [r5, #8]
 80103fe:	6869      	ldr	r1, [r5, #4]
 8010400:	eb0a 0709 	add.w	r7, sl, r9
 8010404:	42bb      	cmp	r3, r7
 8010406:	b085      	sub	sp, #20
 8010408:	bfb8      	it	lt
 801040a:	3101      	addlt	r1, #1
 801040c:	f7ff fed4 	bl	80101b8 <_Balloc>
 8010410:	b930      	cbnz	r0, 8010420 <__multiply+0x44>
 8010412:	4602      	mov	r2, r0
 8010414:	4b42      	ldr	r3, [pc, #264]	; (8010520 <__multiply+0x144>)
 8010416:	4843      	ldr	r0, [pc, #268]	; (8010524 <__multiply+0x148>)
 8010418:	f240 115d 	movw	r1, #349	; 0x15d
 801041c:	f000 fbb4 	bl	8010b88 <__assert_func>
 8010420:	f100 0614 	add.w	r6, r0, #20
 8010424:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010428:	4633      	mov	r3, r6
 801042a:	2200      	movs	r2, #0
 801042c:	4543      	cmp	r3, r8
 801042e:	d31e      	bcc.n	801046e <__multiply+0x92>
 8010430:	f105 0c14 	add.w	ip, r5, #20
 8010434:	f104 0314 	add.w	r3, r4, #20
 8010438:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801043c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010440:	9202      	str	r2, [sp, #8]
 8010442:	ebac 0205 	sub.w	r2, ip, r5
 8010446:	3a15      	subs	r2, #21
 8010448:	f022 0203 	bic.w	r2, r2, #3
 801044c:	3204      	adds	r2, #4
 801044e:	f105 0115 	add.w	r1, r5, #21
 8010452:	458c      	cmp	ip, r1
 8010454:	bf38      	it	cc
 8010456:	2204      	movcc	r2, #4
 8010458:	9201      	str	r2, [sp, #4]
 801045a:	9a02      	ldr	r2, [sp, #8]
 801045c:	9303      	str	r3, [sp, #12]
 801045e:	429a      	cmp	r2, r3
 8010460:	d808      	bhi.n	8010474 <__multiply+0x98>
 8010462:	2f00      	cmp	r7, #0
 8010464:	dc55      	bgt.n	8010512 <__multiply+0x136>
 8010466:	6107      	str	r7, [r0, #16]
 8010468:	b005      	add	sp, #20
 801046a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046e:	f843 2b04 	str.w	r2, [r3], #4
 8010472:	e7db      	b.n	801042c <__multiply+0x50>
 8010474:	f8b3 a000 	ldrh.w	sl, [r3]
 8010478:	f1ba 0f00 	cmp.w	sl, #0
 801047c:	d020      	beq.n	80104c0 <__multiply+0xe4>
 801047e:	f105 0e14 	add.w	lr, r5, #20
 8010482:	46b1      	mov	r9, r6
 8010484:	2200      	movs	r2, #0
 8010486:	f85e 4b04 	ldr.w	r4, [lr], #4
 801048a:	f8d9 b000 	ldr.w	fp, [r9]
 801048e:	b2a1      	uxth	r1, r4
 8010490:	fa1f fb8b 	uxth.w	fp, fp
 8010494:	fb0a b101 	mla	r1, sl, r1, fp
 8010498:	4411      	add	r1, r2
 801049a:	f8d9 2000 	ldr.w	r2, [r9]
 801049e:	0c24      	lsrs	r4, r4, #16
 80104a0:	0c12      	lsrs	r2, r2, #16
 80104a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80104a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80104aa:	b289      	uxth	r1, r1
 80104ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80104b0:	45f4      	cmp	ip, lr
 80104b2:	f849 1b04 	str.w	r1, [r9], #4
 80104b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80104ba:	d8e4      	bhi.n	8010486 <__multiply+0xaa>
 80104bc:	9901      	ldr	r1, [sp, #4]
 80104be:	5072      	str	r2, [r6, r1]
 80104c0:	9a03      	ldr	r2, [sp, #12]
 80104c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80104c6:	3304      	adds	r3, #4
 80104c8:	f1b9 0f00 	cmp.w	r9, #0
 80104cc:	d01f      	beq.n	801050e <__multiply+0x132>
 80104ce:	6834      	ldr	r4, [r6, #0]
 80104d0:	f105 0114 	add.w	r1, r5, #20
 80104d4:	46b6      	mov	lr, r6
 80104d6:	f04f 0a00 	mov.w	sl, #0
 80104da:	880a      	ldrh	r2, [r1, #0]
 80104dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80104e0:	fb09 b202 	mla	r2, r9, r2, fp
 80104e4:	4492      	add	sl, r2
 80104e6:	b2a4      	uxth	r4, r4
 80104e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80104ec:	f84e 4b04 	str.w	r4, [lr], #4
 80104f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80104f4:	f8be 2000 	ldrh.w	r2, [lr]
 80104f8:	0c24      	lsrs	r4, r4, #16
 80104fa:	fb09 2404 	mla	r4, r9, r4, r2
 80104fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010502:	458c      	cmp	ip, r1
 8010504:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010508:	d8e7      	bhi.n	80104da <__multiply+0xfe>
 801050a:	9a01      	ldr	r2, [sp, #4]
 801050c:	50b4      	str	r4, [r6, r2]
 801050e:	3604      	adds	r6, #4
 8010510:	e7a3      	b.n	801045a <__multiply+0x7e>
 8010512:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1a5      	bne.n	8010466 <__multiply+0x8a>
 801051a:	3f01      	subs	r7, #1
 801051c:	e7a1      	b.n	8010462 <__multiply+0x86>
 801051e:	bf00      	nop
 8010520:	08012853 	.word	0x08012853
 8010524:	08012864 	.word	0x08012864

08010528 <__pow5mult>:
 8010528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801052c:	4615      	mov	r5, r2
 801052e:	f012 0203 	ands.w	r2, r2, #3
 8010532:	4606      	mov	r6, r0
 8010534:	460f      	mov	r7, r1
 8010536:	d007      	beq.n	8010548 <__pow5mult+0x20>
 8010538:	4c25      	ldr	r4, [pc, #148]	; (80105d0 <__pow5mult+0xa8>)
 801053a:	3a01      	subs	r2, #1
 801053c:	2300      	movs	r3, #0
 801053e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010542:	f7ff fe9b 	bl	801027c <__multadd>
 8010546:	4607      	mov	r7, r0
 8010548:	10ad      	asrs	r5, r5, #2
 801054a:	d03d      	beq.n	80105c8 <__pow5mult+0xa0>
 801054c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801054e:	b97c      	cbnz	r4, 8010570 <__pow5mult+0x48>
 8010550:	2010      	movs	r0, #16
 8010552:	f7fe fa3f 	bl	800e9d4 <malloc>
 8010556:	4602      	mov	r2, r0
 8010558:	6270      	str	r0, [r6, #36]	; 0x24
 801055a:	b928      	cbnz	r0, 8010568 <__pow5mult+0x40>
 801055c:	4b1d      	ldr	r3, [pc, #116]	; (80105d4 <__pow5mult+0xac>)
 801055e:	481e      	ldr	r0, [pc, #120]	; (80105d8 <__pow5mult+0xb0>)
 8010560:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010564:	f000 fb10 	bl	8010b88 <__assert_func>
 8010568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801056c:	6004      	str	r4, [r0, #0]
 801056e:	60c4      	str	r4, [r0, #12]
 8010570:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010578:	b94c      	cbnz	r4, 801058e <__pow5mult+0x66>
 801057a:	f240 2171 	movw	r1, #625	; 0x271
 801057e:	4630      	mov	r0, r6
 8010580:	f7ff ff16 	bl	80103b0 <__i2b>
 8010584:	2300      	movs	r3, #0
 8010586:	f8c8 0008 	str.w	r0, [r8, #8]
 801058a:	4604      	mov	r4, r0
 801058c:	6003      	str	r3, [r0, #0]
 801058e:	f04f 0900 	mov.w	r9, #0
 8010592:	07eb      	lsls	r3, r5, #31
 8010594:	d50a      	bpl.n	80105ac <__pow5mult+0x84>
 8010596:	4639      	mov	r1, r7
 8010598:	4622      	mov	r2, r4
 801059a:	4630      	mov	r0, r6
 801059c:	f7ff ff1e 	bl	80103dc <__multiply>
 80105a0:	4639      	mov	r1, r7
 80105a2:	4680      	mov	r8, r0
 80105a4:	4630      	mov	r0, r6
 80105a6:	f7ff fe47 	bl	8010238 <_Bfree>
 80105aa:	4647      	mov	r7, r8
 80105ac:	106d      	asrs	r5, r5, #1
 80105ae:	d00b      	beq.n	80105c8 <__pow5mult+0xa0>
 80105b0:	6820      	ldr	r0, [r4, #0]
 80105b2:	b938      	cbnz	r0, 80105c4 <__pow5mult+0x9c>
 80105b4:	4622      	mov	r2, r4
 80105b6:	4621      	mov	r1, r4
 80105b8:	4630      	mov	r0, r6
 80105ba:	f7ff ff0f 	bl	80103dc <__multiply>
 80105be:	6020      	str	r0, [r4, #0]
 80105c0:	f8c0 9000 	str.w	r9, [r0]
 80105c4:	4604      	mov	r4, r0
 80105c6:	e7e4      	b.n	8010592 <__pow5mult+0x6a>
 80105c8:	4638      	mov	r0, r7
 80105ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ce:	bf00      	nop
 80105d0:	080129b8 	.word	0x080129b8
 80105d4:	080127dd 	.word	0x080127dd
 80105d8:	08012864 	.word	0x08012864

080105dc <__lshift>:
 80105dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e0:	460c      	mov	r4, r1
 80105e2:	6849      	ldr	r1, [r1, #4]
 80105e4:	6923      	ldr	r3, [r4, #16]
 80105e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	4607      	mov	r7, r0
 80105ee:	4691      	mov	r9, r2
 80105f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105f4:	f108 0601 	add.w	r6, r8, #1
 80105f8:	42b3      	cmp	r3, r6
 80105fa:	db0b      	blt.n	8010614 <__lshift+0x38>
 80105fc:	4638      	mov	r0, r7
 80105fe:	f7ff fddb 	bl	80101b8 <_Balloc>
 8010602:	4605      	mov	r5, r0
 8010604:	b948      	cbnz	r0, 801061a <__lshift+0x3e>
 8010606:	4602      	mov	r2, r0
 8010608:	4b28      	ldr	r3, [pc, #160]	; (80106ac <__lshift+0xd0>)
 801060a:	4829      	ldr	r0, [pc, #164]	; (80106b0 <__lshift+0xd4>)
 801060c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010610:	f000 faba 	bl	8010b88 <__assert_func>
 8010614:	3101      	adds	r1, #1
 8010616:	005b      	lsls	r3, r3, #1
 8010618:	e7ee      	b.n	80105f8 <__lshift+0x1c>
 801061a:	2300      	movs	r3, #0
 801061c:	f100 0114 	add.w	r1, r0, #20
 8010620:	f100 0210 	add.w	r2, r0, #16
 8010624:	4618      	mov	r0, r3
 8010626:	4553      	cmp	r3, sl
 8010628:	db33      	blt.n	8010692 <__lshift+0xb6>
 801062a:	6920      	ldr	r0, [r4, #16]
 801062c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010630:	f104 0314 	add.w	r3, r4, #20
 8010634:	f019 091f 	ands.w	r9, r9, #31
 8010638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801063c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010640:	d02b      	beq.n	801069a <__lshift+0xbe>
 8010642:	f1c9 0e20 	rsb	lr, r9, #32
 8010646:	468a      	mov	sl, r1
 8010648:	2200      	movs	r2, #0
 801064a:	6818      	ldr	r0, [r3, #0]
 801064c:	fa00 f009 	lsl.w	r0, r0, r9
 8010650:	4302      	orrs	r2, r0
 8010652:	f84a 2b04 	str.w	r2, [sl], #4
 8010656:	f853 2b04 	ldr.w	r2, [r3], #4
 801065a:	459c      	cmp	ip, r3
 801065c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010660:	d8f3      	bhi.n	801064a <__lshift+0x6e>
 8010662:	ebac 0304 	sub.w	r3, ip, r4
 8010666:	3b15      	subs	r3, #21
 8010668:	f023 0303 	bic.w	r3, r3, #3
 801066c:	3304      	adds	r3, #4
 801066e:	f104 0015 	add.w	r0, r4, #21
 8010672:	4584      	cmp	ip, r0
 8010674:	bf38      	it	cc
 8010676:	2304      	movcc	r3, #4
 8010678:	50ca      	str	r2, [r1, r3]
 801067a:	b10a      	cbz	r2, 8010680 <__lshift+0xa4>
 801067c:	f108 0602 	add.w	r6, r8, #2
 8010680:	3e01      	subs	r6, #1
 8010682:	4638      	mov	r0, r7
 8010684:	612e      	str	r6, [r5, #16]
 8010686:	4621      	mov	r1, r4
 8010688:	f7ff fdd6 	bl	8010238 <_Bfree>
 801068c:	4628      	mov	r0, r5
 801068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010692:	f842 0f04 	str.w	r0, [r2, #4]!
 8010696:	3301      	adds	r3, #1
 8010698:	e7c5      	b.n	8010626 <__lshift+0x4a>
 801069a:	3904      	subs	r1, #4
 801069c:	f853 2b04 	ldr.w	r2, [r3], #4
 80106a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80106a4:	459c      	cmp	ip, r3
 80106a6:	d8f9      	bhi.n	801069c <__lshift+0xc0>
 80106a8:	e7ea      	b.n	8010680 <__lshift+0xa4>
 80106aa:	bf00      	nop
 80106ac:	08012853 	.word	0x08012853
 80106b0:	08012864 	.word	0x08012864

080106b4 <__mcmp>:
 80106b4:	b530      	push	{r4, r5, lr}
 80106b6:	6902      	ldr	r2, [r0, #16]
 80106b8:	690c      	ldr	r4, [r1, #16]
 80106ba:	1b12      	subs	r2, r2, r4
 80106bc:	d10e      	bne.n	80106dc <__mcmp+0x28>
 80106be:	f100 0314 	add.w	r3, r0, #20
 80106c2:	3114      	adds	r1, #20
 80106c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80106c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80106cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80106d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80106d4:	42a5      	cmp	r5, r4
 80106d6:	d003      	beq.n	80106e0 <__mcmp+0x2c>
 80106d8:	d305      	bcc.n	80106e6 <__mcmp+0x32>
 80106da:	2201      	movs	r2, #1
 80106dc:	4610      	mov	r0, r2
 80106de:	bd30      	pop	{r4, r5, pc}
 80106e0:	4283      	cmp	r3, r0
 80106e2:	d3f3      	bcc.n	80106cc <__mcmp+0x18>
 80106e4:	e7fa      	b.n	80106dc <__mcmp+0x28>
 80106e6:	f04f 32ff 	mov.w	r2, #4294967295
 80106ea:	e7f7      	b.n	80106dc <__mcmp+0x28>

080106ec <__mdiff>:
 80106ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f0:	460c      	mov	r4, r1
 80106f2:	4606      	mov	r6, r0
 80106f4:	4611      	mov	r1, r2
 80106f6:	4620      	mov	r0, r4
 80106f8:	4617      	mov	r7, r2
 80106fa:	f7ff ffdb 	bl	80106b4 <__mcmp>
 80106fe:	1e05      	subs	r5, r0, #0
 8010700:	d110      	bne.n	8010724 <__mdiff+0x38>
 8010702:	4629      	mov	r1, r5
 8010704:	4630      	mov	r0, r6
 8010706:	f7ff fd57 	bl	80101b8 <_Balloc>
 801070a:	b930      	cbnz	r0, 801071a <__mdiff+0x2e>
 801070c:	4b39      	ldr	r3, [pc, #228]	; (80107f4 <__mdiff+0x108>)
 801070e:	4602      	mov	r2, r0
 8010710:	f240 2132 	movw	r1, #562	; 0x232
 8010714:	4838      	ldr	r0, [pc, #224]	; (80107f8 <__mdiff+0x10c>)
 8010716:	f000 fa37 	bl	8010b88 <__assert_func>
 801071a:	2301      	movs	r3, #1
 801071c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010724:	bfa4      	itt	ge
 8010726:	463b      	movge	r3, r7
 8010728:	4627      	movge	r7, r4
 801072a:	4630      	mov	r0, r6
 801072c:	6879      	ldr	r1, [r7, #4]
 801072e:	bfa6      	itte	ge
 8010730:	461c      	movge	r4, r3
 8010732:	2500      	movge	r5, #0
 8010734:	2501      	movlt	r5, #1
 8010736:	f7ff fd3f 	bl	80101b8 <_Balloc>
 801073a:	b920      	cbnz	r0, 8010746 <__mdiff+0x5a>
 801073c:	4b2d      	ldr	r3, [pc, #180]	; (80107f4 <__mdiff+0x108>)
 801073e:	4602      	mov	r2, r0
 8010740:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010744:	e7e6      	b.n	8010714 <__mdiff+0x28>
 8010746:	693e      	ldr	r6, [r7, #16]
 8010748:	60c5      	str	r5, [r0, #12]
 801074a:	6925      	ldr	r5, [r4, #16]
 801074c:	f107 0114 	add.w	r1, r7, #20
 8010750:	f104 0914 	add.w	r9, r4, #20
 8010754:	f100 0e14 	add.w	lr, r0, #20
 8010758:	f107 0210 	add.w	r2, r7, #16
 801075c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010760:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010764:	46f2      	mov	sl, lr
 8010766:	2700      	movs	r7, #0
 8010768:	f859 3b04 	ldr.w	r3, [r9], #4
 801076c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010770:	fa1f f883 	uxth.w	r8, r3
 8010774:	fa17 f78b 	uxtah	r7, r7, fp
 8010778:	0c1b      	lsrs	r3, r3, #16
 801077a:	eba7 0808 	sub.w	r8, r7, r8
 801077e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010786:	fa1f f888 	uxth.w	r8, r8
 801078a:	141f      	asrs	r7, r3, #16
 801078c:	454d      	cmp	r5, r9
 801078e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010792:	f84a 3b04 	str.w	r3, [sl], #4
 8010796:	d8e7      	bhi.n	8010768 <__mdiff+0x7c>
 8010798:	1b2b      	subs	r3, r5, r4
 801079a:	3b15      	subs	r3, #21
 801079c:	f023 0303 	bic.w	r3, r3, #3
 80107a0:	3304      	adds	r3, #4
 80107a2:	3415      	adds	r4, #21
 80107a4:	42a5      	cmp	r5, r4
 80107a6:	bf38      	it	cc
 80107a8:	2304      	movcc	r3, #4
 80107aa:	4419      	add	r1, r3
 80107ac:	4473      	add	r3, lr
 80107ae:	469e      	mov	lr, r3
 80107b0:	460d      	mov	r5, r1
 80107b2:	4565      	cmp	r5, ip
 80107b4:	d30e      	bcc.n	80107d4 <__mdiff+0xe8>
 80107b6:	f10c 0203 	add.w	r2, ip, #3
 80107ba:	1a52      	subs	r2, r2, r1
 80107bc:	f022 0203 	bic.w	r2, r2, #3
 80107c0:	3903      	subs	r1, #3
 80107c2:	458c      	cmp	ip, r1
 80107c4:	bf38      	it	cc
 80107c6:	2200      	movcc	r2, #0
 80107c8:	441a      	add	r2, r3
 80107ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80107ce:	b17b      	cbz	r3, 80107f0 <__mdiff+0x104>
 80107d0:	6106      	str	r6, [r0, #16]
 80107d2:	e7a5      	b.n	8010720 <__mdiff+0x34>
 80107d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80107d8:	fa17 f488 	uxtah	r4, r7, r8
 80107dc:	1422      	asrs	r2, r4, #16
 80107de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80107e2:	b2a4      	uxth	r4, r4
 80107e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80107e8:	f84e 4b04 	str.w	r4, [lr], #4
 80107ec:	1417      	asrs	r7, r2, #16
 80107ee:	e7e0      	b.n	80107b2 <__mdiff+0xc6>
 80107f0:	3e01      	subs	r6, #1
 80107f2:	e7ea      	b.n	80107ca <__mdiff+0xde>
 80107f4:	08012853 	.word	0x08012853
 80107f8:	08012864 	.word	0x08012864

080107fc <__d2b>:
 80107fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010800:	4689      	mov	r9, r1
 8010802:	2101      	movs	r1, #1
 8010804:	ec57 6b10 	vmov	r6, r7, d0
 8010808:	4690      	mov	r8, r2
 801080a:	f7ff fcd5 	bl	80101b8 <_Balloc>
 801080e:	4604      	mov	r4, r0
 8010810:	b930      	cbnz	r0, 8010820 <__d2b+0x24>
 8010812:	4602      	mov	r2, r0
 8010814:	4b25      	ldr	r3, [pc, #148]	; (80108ac <__d2b+0xb0>)
 8010816:	4826      	ldr	r0, [pc, #152]	; (80108b0 <__d2b+0xb4>)
 8010818:	f240 310a 	movw	r1, #778	; 0x30a
 801081c:	f000 f9b4 	bl	8010b88 <__assert_func>
 8010820:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010824:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010828:	bb35      	cbnz	r5, 8010878 <__d2b+0x7c>
 801082a:	2e00      	cmp	r6, #0
 801082c:	9301      	str	r3, [sp, #4]
 801082e:	d028      	beq.n	8010882 <__d2b+0x86>
 8010830:	4668      	mov	r0, sp
 8010832:	9600      	str	r6, [sp, #0]
 8010834:	f7ff fd8c 	bl	8010350 <__lo0bits>
 8010838:	9900      	ldr	r1, [sp, #0]
 801083a:	b300      	cbz	r0, 801087e <__d2b+0x82>
 801083c:	9a01      	ldr	r2, [sp, #4]
 801083e:	f1c0 0320 	rsb	r3, r0, #32
 8010842:	fa02 f303 	lsl.w	r3, r2, r3
 8010846:	430b      	orrs	r3, r1
 8010848:	40c2      	lsrs	r2, r0
 801084a:	6163      	str	r3, [r4, #20]
 801084c:	9201      	str	r2, [sp, #4]
 801084e:	9b01      	ldr	r3, [sp, #4]
 8010850:	61a3      	str	r3, [r4, #24]
 8010852:	2b00      	cmp	r3, #0
 8010854:	bf14      	ite	ne
 8010856:	2202      	movne	r2, #2
 8010858:	2201      	moveq	r2, #1
 801085a:	6122      	str	r2, [r4, #16]
 801085c:	b1d5      	cbz	r5, 8010894 <__d2b+0x98>
 801085e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010862:	4405      	add	r5, r0
 8010864:	f8c9 5000 	str.w	r5, [r9]
 8010868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801086c:	f8c8 0000 	str.w	r0, [r8]
 8010870:	4620      	mov	r0, r4
 8010872:	b003      	add	sp, #12
 8010874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801087c:	e7d5      	b.n	801082a <__d2b+0x2e>
 801087e:	6161      	str	r1, [r4, #20]
 8010880:	e7e5      	b.n	801084e <__d2b+0x52>
 8010882:	a801      	add	r0, sp, #4
 8010884:	f7ff fd64 	bl	8010350 <__lo0bits>
 8010888:	9b01      	ldr	r3, [sp, #4]
 801088a:	6163      	str	r3, [r4, #20]
 801088c:	2201      	movs	r2, #1
 801088e:	6122      	str	r2, [r4, #16]
 8010890:	3020      	adds	r0, #32
 8010892:	e7e3      	b.n	801085c <__d2b+0x60>
 8010894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801089c:	f8c9 0000 	str.w	r0, [r9]
 80108a0:	6918      	ldr	r0, [r3, #16]
 80108a2:	f7ff fd35 	bl	8010310 <__hi0bits>
 80108a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108aa:	e7df      	b.n	801086c <__d2b+0x70>
 80108ac:	08012853 	.word	0x08012853
 80108b0:	08012864 	.word	0x08012864

080108b4 <_calloc_r>:
 80108b4:	b513      	push	{r0, r1, r4, lr}
 80108b6:	434a      	muls	r2, r1
 80108b8:	4611      	mov	r1, r2
 80108ba:	9201      	str	r2, [sp, #4]
 80108bc:	f7fe f900 	bl	800eac0 <_malloc_r>
 80108c0:	4604      	mov	r4, r0
 80108c2:	b118      	cbz	r0, 80108cc <_calloc_r+0x18>
 80108c4:	9a01      	ldr	r2, [sp, #4]
 80108c6:	2100      	movs	r1, #0
 80108c8:	f7fe f8a2 	bl	800ea10 <memset>
 80108cc:	4620      	mov	r0, r4
 80108ce:	b002      	add	sp, #8
 80108d0:	bd10      	pop	{r4, pc}

080108d2 <__ssputs_r>:
 80108d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108d6:	688e      	ldr	r6, [r1, #8]
 80108d8:	429e      	cmp	r6, r3
 80108da:	4682      	mov	sl, r0
 80108dc:	460c      	mov	r4, r1
 80108de:	4690      	mov	r8, r2
 80108e0:	461f      	mov	r7, r3
 80108e2:	d838      	bhi.n	8010956 <__ssputs_r+0x84>
 80108e4:	898a      	ldrh	r2, [r1, #12]
 80108e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108ea:	d032      	beq.n	8010952 <__ssputs_r+0x80>
 80108ec:	6825      	ldr	r5, [r4, #0]
 80108ee:	6909      	ldr	r1, [r1, #16]
 80108f0:	eba5 0901 	sub.w	r9, r5, r1
 80108f4:	6965      	ldr	r5, [r4, #20]
 80108f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108fe:	3301      	adds	r3, #1
 8010900:	444b      	add	r3, r9
 8010902:	106d      	asrs	r5, r5, #1
 8010904:	429d      	cmp	r5, r3
 8010906:	bf38      	it	cc
 8010908:	461d      	movcc	r5, r3
 801090a:	0553      	lsls	r3, r2, #21
 801090c:	d531      	bpl.n	8010972 <__ssputs_r+0xa0>
 801090e:	4629      	mov	r1, r5
 8010910:	f7fe f8d6 	bl	800eac0 <_malloc_r>
 8010914:	4606      	mov	r6, r0
 8010916:	b950      	cbnz	r0, 801092e <__ssputs_r+0x5c>
 8010918:	230c      	movs	r3, #12
 801091a:	f8ca 3000 	str.w	r3, [sl]
 801091e:	89a3      	ldrh	r3, [r4, #12]
 8010920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010924:	81a3      	strh	r3, [r4, #12]
 8010926:	f04f 30ff 	mov.w	r0, #4294967295
 801092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801092e:	6921      	ldr	r1, [r4, #16]
 8010930:	464a      	mov	r2, r9
 8010932:	f7fe f85f 	bl	800e9f4 <memcpy>
 8010936:	89a3      	ldrh	r3, [r4, #12]
 8010938:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010940:	81a3      	strh	r3, [r4, #12]
 8010942:	6126      	str	r6, [r4, #16]
 8010944:	6165      	str	r5, [r4, #20]
 8010946:	444e      	add	r6, r9
 8010948:	eba5 0509 	sub.w	r5, r5, r9
 801094c:	6026      	str	r6, [r4, #0]
 801094e:	60a5      	str	r5, [r4, #8]
 8010950:	463e      	mov	r6, r7
 8010952:	42be      	cmp	r6, r7
 8010954:	d900      	bls.n	8010958 <__ssputs_r+0x86>
 8010956:	463e      	mov	r6, r7
 8010958:	4632      	mov	r2, r6
 801095a:	6820      	ldr	r0, [r4, #0]
 801095c:	4641      	mov	r1, r8
 801095e:	f000 f958 	bl	8010c12 <memmove>
 8010962:	68a3      	ldr	r3, [r4, #8]
 8010964:	6822      	ldr	r2, [r4, #0]
 8010966:	1b9b      	subs	r3, r3, r6
 8010968:	4432      	add	r2, r6
 801096a:	60a3      	str	r3, [r4, #8]
 801096c:	6022      	str	r2, [r4, #0]
 801096e:	2000      	movs	r0, #0
 8010970:	e7db      	b.n	801092a <__ssputs_r+0x58>
 8010972:	462a      	mov	r2, r5
 8010974:	f000 f967 	bl	8010c46 <_realloc_r>
 8010978:	4606      	mov	r6, r0
 801097a:	2800      	cmp	r0, #0
 801097c:	d1e1      	bne.n	8010942 <__ssputs_r+0x70>
 801097e:	6921      	ldr	r1, [r4, #16]
 8010980:	4650      	mov	r0, sl
 8010982:	f7fe f84d 	bl	800ea20 <_free_r>
 8010986:	e7c7      	b.n	8010918 <__ssputs_r+0x46>

08010988 <_svfiprintf_r>:
 8010988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098c:	4698      	mov	r8, r3
 801098e:	898b      	ldrh	r3, [r1, #12]
 8010990:	061b      	lsls	r3, r3, #24
 8010992:	b09d      	sub	sp, #116	; 0x74
 8010994:	4607      	mov	r7, r0
 8010996:	460d      	mov	r5, r1
 8010998:	4614      	mov	r4, r2
 801099a:	d50e      	bpl.n	80109ba <_svfiprintf_r+0x32>
 801099c:	690b      	ldr	r3, [r1, #16]
 801099e:	b963      	cbnz	r3, 80109ba <_svfiprintf_r+0x32>
 80109a0:	2140      	movs	r1, #64	; 0x40
 80109a2:	f7fe f88d 	bl	800eac0 <_malloc_r>
 80109a6:	6028      	str	r0, [r5, #0]
 80109a8:	6128      	str	r0, [r5, #16]
 80109aa:	b920      	cbnz	r0, 80109b6 <_svfiprintf_r+0x2e>
 80109ac:	230c      	movs	r3, #12
 80109ae:	603b      	str	r3, [r7, #0]
 80109b0:	f04f 30ff 	mov.w	r0, #4294967295
 80109b4:	e0d1      	b.n	8010b5a <_svfiprintf_r+0x1d2>
 80109b6:	2340      	movs	r3, #64	; 0x40
 80109b8:	616b      	str	r3, [r5, #20]
 80109ba:	2300      	movs	r3, #0
 80109bc:	9309      	str	r3, [sp, #36]	; 0x24
 80109be:	2320      	movs	r3, #32
 80109c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80109c8:	2330      	movs	r3, #48	; 0x30
 80109ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010b74 <_svfiprintf_r+0x1ec>
 80109ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109d2:	f04f 0901 	mov.w	r9, #1
 80109d6:	4623      	mov	r3, r4
 80109d8:	469a      	mov	sl, r3
 80109da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109de:	b10a      	cbz	r2, 80109e4 <_svfiprintf_r+0x5c>
 80109e0:	2a25      	cmp	r2, #37	; 0x25
 80109e2:	d1f9      	bne.n	80109d8 <_svfiprintf_r+0x50>
 80109e4:	ebba 0b04 	subs.w	fp, sl, r4
 80109e8:	d00b      	beq.n	8010a02 <_svfiprintf_r+0x7a>
 80109ea:	465b      	mov	r3, fp
 80109ec:	4622      	mov	r2, r4
 80109ee:	4629      	mov	r1, r5
 80109f0:	4638      	mov	r0, r7
 80109f2:	f7ff ff6e 	bl	80108d2 <__ssputs_r>
 80109f6:	3001      	adds	r0, #1
 80109f8:	f000 80aa 	beq.w	8010b50 <_svfiprintf_r+0x1c8>
 80109fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109fe:	445a      	add	r2, fp
 8010a00:	9209      	str	r2, [sp, #36]	; 0x24
 8010a02:	f89a 3000 	ldrb.w	r3, [sl]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f000 80a2 	beq.w	8010b50 <_svfiprintf_r+0x1c8>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a16:	f10a 0a01 	add.w	sl, sl, #1
 8010a1a:	9304      	str	r3, [sp, #16]
 8010a1c:	9307      	str	r3, [sp, #28]
 8010a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a22:	931a      	str	r3, [sp, #104]	; 0x68
 8010a24:	4654      	mov	r4, sl
 8010a26:	2205      	movs	r2, #5
 8010a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a2c:	4851      	ldr	r0, [pc, #324]	; (8010b74 <_svfiprintf_r+0x1ec>)
 8010a2e:	f7ef fbd7 	bl	80001e0 <memchr>
 8010a32:	9a04      	ldr	r2, [sp, #16]
 8010a34:	b9d8      	cbnz	r0, 8010a6e <_svfiprintf_r+0xe6>
 8010a36:	06d0      	lsls	r0, r2, #27
 8010a38:	bf44      	itt	mi
 8010a3a:	2320      	movmi	r3, #32
 8010a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a40:	0711      	lsls	r1, r2, #28
 8010a42:	bf44      	itt	mi
 8010a44:	232b      	movmi	r3, #43	; 0x2b
 8010a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8010a50:	d015      	beq.n	8010a7e <_svfiprintf_r+0xf6>
 8010a52:	9a07      	ldr	r2, [sp, #28]
 8010a54:	4654      	mov	r4, sl
 8010a56:	2000      	movs	r0, #0
 8010a58:	f04f 0c0a 	mov.w	ip, #10
 8010a5c:	4621      	mov	r1, r4
 8010a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a62:	3b30      	subs	r3, #48	; 0x30
 8010a64:	2b09      	cmp	r3, #9
 8010a66:	d94e      	bls.n	8010b06 <_svfiprintf_r+0x17e>
 8010a68:	b1b0      	cbz	r0, 8010a98 <_svfiprintf_r+0x110>
 8010a6a:	9207      	str	r2, [sp, #28]
 8010a6c:	e014      	b.n	8010a98 <_svfiprintf_r+0x110>
 8010a6e:	eba0 0308 	sub.w	r3, r0, r8
 8010a72:	fa09 f303 	lsl.w	r3, r9, r3
 8010a76:	4313      	orrs	r3, r2
 8010a78:	9304      	str	r3, [sp, #16]
 8010a7a:	46a2      	mov	sl, r4
 8010a7c:	e7d2      	b.n	8010a24 <_svfiprintf_r+0x9c>
 8010a7e:	9b03      	ldr	r3, [sp, #12]
 8010a80:	1d19      	adds	r1, r3, #4
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	9103      	str	r1, [sp, #12]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	bfbb      	ittet	lt
 8010a8a:	425b      	neglt	r3, r3
 8010a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8010a90:	9307      	strge	r3, [sp, #28]
 8010a92:	9307      	strlt	r3, [sp, #28]
 8010a94:	bfb8      	it	lt
 8010a96:	9204      	strlt	r2, [sp, #16]
 8010a98:	7823      	ldrb	r3, [r4, #0]
 8010a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a9c:	d10c      	bne.n	8010ab8 <_svfiprintf_r+0x130>
 8010a9e:	7863      	ldrb	r3, [r4, #1]
 8010aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8010aa2:	d135      	bne.n	8010b10 <_svfiprintf_r+0x188>
 8010aa4:	9b03      	ldr	r3, [sp, #12]
 8010aa6:	1d1a      	adds	r2, r3, #4
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	9203      	str	r2, [sp, #12]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	bfb8      	it	lt
 8010ab0:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ab4:	3402      	adds	r4, #2
 8010ab6:	9305      	str	r3, [sp, #20]
 8010ab8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010b84 <_svfiprintf_r+0x1fc>
 8010abc:	7821      	ldrb	r1, [r4, #0]
 8010abe:	2203      	movs	r2, #3
 8010ac0:	4650      	mov	r0, sl
 8010ac2:	f7ef fb8d 	bl	80001e0 <memchr>
 8010ac6:	b140      	cbz	r0, 8010ada <_svfiprintf_r+0x152>
 8010ac8:	2340      	movs	r3, #64	; 0x40
 8010aca:	eba0 000a 	sub.w	r0, r0, sl
 8010ace:	fa03 f000 	lsl.w	r0, r3, r0
 8010ad2:	9b04      	ldr	r3, [sp, #16]
 8010ad4:	4303      	orrs	r3, r0
 8010ad6:	3401      	adds	r4, #1
 8010ad8:	9304      	str	r3, [sp, #16]
 8010ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ade:	4826      	ldr	r0, [pc, #152]	; (8010b78 <_svfiprintf_r+0x1f0>)
 8010ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ae4:	2206      	movs	r2, #6
 8010ae6:	f7ef fb7b 	bl	80001e0 <memchr>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d038      	beq.n	8010b60 <_svfiprintf_r+0x1d8>
 8010aee:	4b23      	ldr	r3, [pc, #140]	; (8010b7c <_svfiprintf_r+0x1f4>)
 8010af0:	bb1b      	cbnz	r3, 8010b3a <_svfiprintf_r+0x1b2>
 8010af2:	9b03      	ldr	r3, [sp, #12]
 8010af4:	3307      	adds	r3, #7
 8010af6:	f023 0307 	bic.w	r3, r3, #7
 8010afa:	3308      	adds	r3, #8
 8010afc:	9303      	str	r3, [sp, #12]
 8010afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b00:	4433      	add	r3, r6
 8010b02:	9309      	str	r3, [sp, #36]	; 0x24
 8010b04:	e767      	b.n	80109d6 <_svfiprintf_r+0x4e>
 8010b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b0a:	460c      	mov	r4, r1
 8010b0c:	2001      	movs	r0, #1
 8010b0e:	e7a5      	b.n	8010a5c <_svfiprintf_r+0xd4>
 8010b10:	2300      	movs	r3, #0
 8010b12:	3401      	adds	r4, #1
 8010b14:	9305      	str	r3, [sp, #20]
 8010b16:	4619      	mov	r1, r3
 8010b18:	f04f 0c0a 	mov.w	ip, #10
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b22:	3a30      	subs	r2, #48	; 0x30
 8010b24:	2a09      	cmp	r2, #9
 8010b26:	d903      	bls.n	8010b30 <_svfiprintf_r+0x1a8>
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d0c5      	beq.n	8010ab8 <_svfiprintf_r+0x130>
 8010b2c:	9105      	str	r1, [sp, #20]
 8010b2e:	e7c3      	b.n	8010ab8 <_svfiprintf_r+0x130>
 8010b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b34:	4604      	mov	r4, r0
 8010b36:	2301      	movs	r3, #1
 8010b38:	e7f0      	b.n	8010b1c <_svfiprintf_r+0x194>
 8010b3a:	ab03      	add	r3, sp, #12
 8010b3c:	9300      	str	r3, [sp, #0]
 8010b3e:	462a      	mov	r2, r5
 8010b40:	4b0f      	ldr	r3, [pc, #60]	; (8010b80 <_svfiprintf_r+0x1f8>)
 8010b42:	a904      	add	r1, sp, #16
 8010b44:	4638      	mov	r0, r7
 8010b46:	f7fe f8b5 	bl	800ecb4 <_printf_float>
 8010b4a:	1c42      	adds	r2, r0, #1
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	d1d6      	bne.n	8010afe <_svfiprintf_r+0x176>
 8010b50:	89ab      	ldrh	r3, [r5, #12]
 8010b52:	065b      	lsls	r3, r3, #25
 8010b54:	f53f af2c 	bmi.w	80109b0 <_svfiprintf_r+0x28>
 8010b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b5a:	b01d      	add	sp, #116	; 0x74
 8010b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b60:	ab03      	add	r3, sp, #12
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	462a      	mov	r2, r5
 8010b66:	4b06      	ldr	r3, [pc, #24]	; (8010b80 <_svfiprintf_r+0x1f8>)
 8010b68:	a904      	add	r1, sp, #16
 8010b6a:	4638      	mov	r0, r7
 8010b6c:	f7fe fb46 	bl	800f1fc <_printf_i>
 8010b70:	e7eb      	b.n	8010b4a <_svfiprintf_r+0x1c2>
 8010b72:	bf00      	nop
 8010b74:	080129c4 	.word	0x080129c4
 8010b78:	080129ce 	.word	0x080129ce
 8010b7c:	0800ecb5 	.word	0x0800ecb5
 8010b80:	080108d3 	.word	0x080108d3
 8010b84:	080129ca 	.word	0x080129ca

08010b88 <__assert_func>:
 8010b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b8a:	4614      	mov	r4, r2
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	4b09      	ldr	r3, [pc, #36]	; (8010bb4 <__assert_func+0x2c>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	4605      	mov	r5, r0
 8010b94:	68d8      	ldr	r0, [r3, #12]
 8010b96:	b14c      	cbz	r4, 8010bac <__assert_func+0x24>
 8010b98:	4b07      	ldr	r3, [pc, #28]	; (8010bb8 <__assert_func+0x30>)
 8010b9a:	9100      	str	r1, [sp, #0]
 8010b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ba0:	4906      	ldr	r1, [pc, #24]	; (8010bbc <__assert_func+0x34>)
 8010ba2:	462b      	mov	r3, r5
 8010ba4:	f000 f80e 	bl	8010bc4 <fiprintf>
 8010ba8:	f000 fa9a 	bl	80110e0 <abort>
 8010bac:	4b04      	ldr	r3, [pc, #16]	; (8010bc0 <__assert_func+0x38>)
 8010bae:	461c      	mov	r4, r3
 8010bb0:	e7f3      	b.n	8010b9a <__assert_func+0x12>
 8010bb2:	bf00      	nop
 8010bb4:	2000002c 	.word	0x2000002c
 8010bb8:	080129d5 	.word	0x080129d5
 8010bbc:	080129e2 	.word	0x080129e2
 8010bc0:	08012a10 	.word	0x08012a10

08010bc4 <fiprintf>:
 8010bc4:	b40e      	push	{r1, r2, r3}
 8010bc6:	b503      	push	{r0, r1, lr}
 8010bc8:	4601      	mov	r1, r0
 8010bca:	ab03      	add	r3, sp, #12
 8010bcc:	4805      	ldr	r0, [pc, #20]	; (8010be4 <fiprintf+0x20>)
 8010bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bd2:	6800      	ldr	r0, [r0, #0]
 8010bd4:	9301      	str	r3, [sp, #4]
 8010bd6:	f000 f885 	bl	8010ce4 <_vfiprintf_r>
 8010bda:	b002      	add	sp, #8
 8010bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010be0:	b003      	add	sp, #12
 8010be2:	4770      	bx	lr
 8010be4:	2000002c 	.word	0x2000002c

08010be8 <__retarget_lock_init_recursive>:
 8010be8:	4770      	bx	lr

08010bea <__retarget_lock_acquire_recursive>:
 8010bea:	4770      	bx	lr

08010bec <__retarget_lock_release_recursive>:
 8010bec:	4770      	bx	lr

08010bee <__ascii_mbtowc>:
 8010bee:	b082      	sub	sp, #8
 8010bf0:	b901      	cbnz	r1, 8010bf4 <__ascii_mbtowc+0x6>
 8010bf2:	a901      	add	r1, sp, #4
 8010bf4:	b142      	cbz	r2, 8010c08 <__ascii_mbtowc+0x1a>
 8010bf6:	b14b      	cbz	r3, 8010c0c <__ascii_mbtowc+0x1e>
 8010bf8:	7813      	ldrb	r3, [r2, #0]
 8010bfa:	600b      	str	r3, [r1, #0]
 8010bfc:	7812      	ldrb	r2, [r2, #0]
 8010bfe:	1e10      	subs	r0, r2, #0
 8010c00:	bf18      	it	ne
 8010c02:	2001      	movne	r0, #1
 8010c04:	b002      	add	sp, #8
 8010c06:	4770      	bx	lr
 8010c08:	4610      	mov	r0, r2
 8010c0a:	e7fb      	b.n	8010c04 <__ascii_mbtowc+0x16>
 8010c0c:	f06f 0001 	mvn.w	r0, #1
 8010c10:	e7f8      	b.n	8010c04 <__ascii_mbtowc+0x16>

08010c12 <memmove>:
 8010c12:	4288      	cmp	r0, r1
 8010c14:	b510      	push	{r4, lr}
 8010c16:	eb01 0402 	add.w	r4, r1, r2
 8010c1a:	d902      	bls.n	8010c22 <memmove+0x10>
 8010c1c:	4284      	cmp	r4, r0
 8010c1e:	4623      	mov	r3, r4
 8010c20:	d807      	bhi.n	8010c32 <memmove+0x20>
 8010c22:	1e43      	subs	r3, r0, #1
 8010c24:	42a1      	cmp	r1, r4
 8010c26:	d008      	beq.n	8010c3a <memmove+0x28>
 8010c28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c30:	e7f8      	b.n	8010c24 <memmove+0x12>
 8010c32:	4402      	add	r2, r0
 8010c34:	4601      	mov	r1, r0
 8010c36:	428a      	cmp	r2, r1
 8010c38:	d100      	bne.n	8010c3c <memmove+0x2a>
 8010c3a:	bd10      	pop	{r4, pc}
 8010c3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c44:	e7f7      	b.n	8010c36 <memmove+0x24>

08010c46 <_realloc_r>:
 8010c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c48:	4607      	mov	r7, r0
 8010c4a:	4614      	mov	r4, r2
 8010c4c:	460e      	mov	r6, r1
 8010c4e:	b921      	cbnz	r1, 8010c5a <_realloc_r+0x14>
 8010c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010c54:	4611      	mov	r1, r2
 8010c56:	f7fd bf33 	b.w	800eac0 <_malloc_r>
 8010c5a:	b922      	cbnz	r2, 8010c66 <_realloc_r+0x20>
 8010c5c:	f7fd fee0 	bl	800ea20 <_free_r>
 8010c60:	4625      	mov	r5, r4
 8010c62:	4628      	mov	r0, r5
 8010c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c66:	f000 fc5f 	bl	8011528 <_malloc_usable_size_r>
 8010c6a:	42a0      	cmp	r0, r4
 8010c6c:	d20f      	bcs.n	8010c8e <_realloc_r+0x48>
 8010c6e:	4621      	mov	r1, r4
 8010c70:	4638      	mov	r0, r7
 8010c72:	f7fd ff25 	bl	800eac0 <_malloc_r>
 8010c76:	4605      	mov	r5, r0
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	d0f2      	beq.n	8010c62 <_realloc_r+0x1c>
 8010c7c:	4631      	mov	r1, r6
 8010c7e:	4622      	mov	r2, r4
 8010c80:	f7fd feb8 	bl	800e9f4 <memcpy>
 8010c84:	4631      	mov	r1, r6
 8010c86:	4638      	mov	r0, r7
 8010c88:	f7fd feca 	bl	800ea20 <_free_r>
 8010c8c:	e7e9      	b.n	8010c62 <_realloc_r+0x1c>
 8010c8e:	4635      	mov	r5, r6
 8010c90:	e7e7      	b.n	8010c62 <_realloc_r+0x1c>

08010c92 <__sfputc_r>:
 8010c92:	6893      	ldr	r3, [r2, #8]
 8010c94:	3b01      	subs	r3, #1
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	b410      	push	{r4}
 8010c9a:	6093      	str	r3, [r2, #8]
 8010c9c:	da08      	bge.n	8010cb0 <__sfputc_r+0x1e>
 8010c9e:	6994      	ldr	r4, [r2, #24]
 8010ca0:	42a3      	cmp	r3, r4
 8010ca2:	db01      	blt.n	8010ca8 <__sfputc_r+0x16>
 8010ca4:	290a      	cmp	r1, #10
 8010ca6:	d103      	bne.n	8010cb0 <__sfputc_r+0x1e>
 8010ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cac:	f000 b94a 	b.w	8010f44 <__swbuf_r>
 8010cb0:	6813      	ldr	r3, [r2, #0]
 8010cb2:	1c58      	adds	r0, r3, #1
 8010cb4:	6010      	str	r0, [r2, #0]
 8010cb6:	7019      	strb	r1, [r3, #0]
 8010cb8:	4608      	mov	r0, r1
 8010cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cbe:	4770      	bx	lr

08010cc0 <__sfputs_r>:
 8010cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc2:	4606      	mov	r6, r0
 8010cc4:	460f      	mov	r7, r1
 8010cc6:	4614      	mov	r4, r2
 8010cc8:	18d5      	adds	r5, r2, r3
 8010cca:	42ac      	cmp	r4, r5
 8010ccc:	d101      	bne.n	8010cd2 <__sfputs_r+0x12>
 8010cce:	2000      	movs	r0, #0
 8010cd0:	e007      	b.n	8010ce2 <__sfputs_r+0x22>
 8010cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cd6:	463a      	mov	r2, r7
 8010cd8:	4630      	mov	r0, r6
 8010cda:	f7ff ffda 	bl	8010c92 <__sfputc_r>
 8010cde:	1c43      	adds	r3, r0, #1
 8010ce0:	d1f3      	bne.n	8010cca <__sfputs_r+0xa>
 8010ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ce4 <_vfiprintf_r>:
 8010ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce8:	460d      	mov	r5, r1
 8010cea:	b09d      	sub	sp, #116	; 0x74
 8010cec:	4614      	mov	r4, r2
 8010cee:	4698      	mov	r8, r3
 8010cf0:	4606      	mov	r6, r0
 8010cf2:	b118      	cbz	r0, 8010cfc <_vfiprintf_r+0x18>
 8010cf4:	6983      	ldr	r3, [r0, #24]
 8010cf6:	b90b      	cbnz	r3, 8010cfc <_vfiprintf_r+0x18>
 8010cf8:	f000 fb14 	bl	8011324 <__sinit>
 8010cfc:	4b89      	ldr	r3, [pc, #548]	; (8010f24 <_vfiprintf_r+0x240>)
 8010cfe:	429d      	cmp	r5, r3
 8010d00:	d11b      	bne.n	8010d3a <_vfiprintf_r+0x56>
 8010d02:	6875      	ldr	r5, [r6, #4]
 8010d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d06:	07d9      	lsls	r1, r3, #31
 8010d08:	d405      	bmi.n	8010d16 <_vfiprintf_r+0x32>
 8010d0a:	89ab      	ldrh	r3, [r5, #12]
 8010d0c:	059a      	lsls	r2, r3, #22
 8010d0e:	d402      	bmi.n	8010d16 <_vfiprintf_r+0x32>
 8010d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d12:	f7ff ff6a 	bl	8010bea <__retarget_lock_acquire_recursive>
 8010d16:	89ab      	ldrh	r3, [r5, #12]
 8010d18:	071b      	lsls	r3, r3, #28
 8010d1a:	d501      	bpl.n	8010d20 <_vfiprintf_r+0x3c>
 8010d1c:	692b      	ldr	r3, [r5, #16]
 8010d1e:	b9eb      	cbnz	r3, 8010d5c <_vfiprintf_r+0x78>
 8010d20:	4629      	mov	r1, r5
 8010d22:	4630      	mov	r0, r6
 8010d24:	f000 f96e 	bl	8011004 <__swsetup_r>
 8010d28:	b1c0      	cbz	r0, 8010d5c <_vfiprintf_r+0x78>
 8010d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d2c:	07dc      	lsls	r4, r3, #31
 8010d2e:	d50e      	bpl.n	8010d4e <_vfiprintf_r+0x6a>
 8010d30:	f04f 30ff 	mov.w	r0, #4294967295
 8010d34:	b01d      	add	sp, #116	; 0x74
 8010d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3a:	4b7b      	ldr	r3, [pc, #492]	; (8010f28 <_vfiprintf_r+0x244>)
 8010d3c:	429d      	cmp	r5, r3
 8010d3e:	d101      	bne.n	8010d44 <_vfiprintf_r+0x60>
 8010d40:	68b5      	ldr	r5, [r6, #8]
 8010d42:	e7df      	b.n	8010d04 <_vfiprintf_r+0x20>
 8010d44:	4b79      	ldr	r3, [pc, #484]	; (8010f2c <_vfiprintf_r+0x248>)
 8010d46:	429d      	cmp	r5, r3
 8010d48:	bf08      	it	eq
 8010d4a:	68f5      	ldreq	r5, [r6, #12]
 8010d4c:	e7da      	b.n	8010d04 <_vfiprintf_r+0x20>
 8010d4e:	89ab      	ldrh	r3, [r5, #12]
 8010d50:	0598      	lsls	r0, r3, #22
 8010d52:	d4ed      	bmi.n	8010d30 <_vfiprintf_r+0x4c>
 8010d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d56:	f7ff ff49 	bl	8010bec <__retarget_lock_release_recursive>
 8010d5a:	e7e9      	b.n	8010d30 <_vfiprintf_r+0x4c>
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8010d60:	2320      	movs	r3, #32
 8010d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d6a:	2330      	movs	r3, #48	; 0x30
 8010d6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010f30 <_vfiprintf_r+0x24c>
 8010d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d74:	f04f 0901 	mov.w	r9, #1
 8010d78:	4623      	mov	r3, r4
 8010d7a:	469a      	mov	sl, r3
 8010d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d80:	b10a      	cbz	r2, 8010d86 <_vfiprintf_r+0xa2>
 8010d82:	2a25      	cmp	r2, #37	; 0x25
 8010d84:	d1f9      	bne.n	8010d7a <_vfiprintf_r+0x96>
 8010d86:	ebba 0b04 	subs.w	fp, sl, r4
 8010d8a:	d00b      	beq.n	8010da4 <_vfiprintf_r+0xc0>
 8010d8c:	465b      	mov	r3, fp
 8010d8e:	4622      	mov	r2, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	4630      	mov	r0, r6
 8010d94:	f7ff ff94 	bl	8010cc0 <__sfputs_r>
 8010d98:	3001      	adds	r0, #1
 8010d9a:	f000 80aa 	beq.w	8010ef2 <_vfiprintf_r+0x20e>
 8010d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010da0:	445a      	add	r2, fp
 8010da2:	9209      	str	r2, [sp, #36]	; 0x24
 8010da4:	f89a 3000 	ldrb.w	r3, [sl]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f000 80a2 	beq.w	8010ef2 <_vfiprintf_r+0x20e>
 8010dae:	2300      	movs	r3, #0
 8010db0:	f04f 32ff 	mov.w	r2, #4294967295
 8010db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010db8:	f10a 0a01 	add.w	sl, sl, #1
 8010dbc:	9304      	str	r3, [sp, #16]
 8010dbe:	9307      	str	r3, [sp, #28]
 8010dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8010dc6:	4654      	mov	r4, sl
 8010dc8:	2205      	movs	r2, #5
 8010dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dce:	4858      	ldr	r0, [pc, #352]	; (8010f30 <_vfiprintf_r+0x24c>)
 8010dd0:	f7ef fa06 	bl	80001e0 <memchr>
 8010dd4:	9a04      	ldr	r2, [sp, #16]
 8010dd6:	b9d8      	cbnz	r0, 8010e10 <_vfiprintf_r+0x12c>
 8010dd8:	06d1      	lsls	r1, r2, #27
 8010dda:	bf44      	itt	mi
 8010ddc:	2320      	movmi	r3, #32
 8010dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010de2:	0713      	lsls	r3, r2, #28
 8010de4:	bf44      	itt	mi
 8010de6:	232b      	movmi	r3, #43	; 0x2b
 8010de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dec:	f89a 3000 	ldrb.w	r3, [sl]
 8010df0:	2b2a      	cmp	r3, #42	; 0x2a
 8010df2:	d015      	beq.n	8010e20 <_vfiprintf_r+0x13c>
 8010df4:	9a07      	ldr	r2, [sp, #28]
 8010df6:	4654      	mov	r4, sl
 8010df8:	2000      	movs	r0, #0
 8010dfa:	f04f 0c0a 	mov.w	ip, #10
 8010dfe:	4621      	mov	r1, r4
 8010e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e04:	3b30      	subs	r3, #48	; 0x30
 8010e06:	2b09      	cmp	r3, #9
 8010e08:	d94e      	bls.n	8010ea8 <_vfiprintf_r+0x1c4>
 8010e0a:	b1b0      	cbz	r0, 8010e3a <_vfiprintf_r+0x156>
 8010e0c:	9207      	str	r2, [sp, #28]
 8010e0e:	e014      	b.n	8010e3a <_vfiprintf_r+0x156>
 8010e10:	eba0 0308 	sub.w	r3, r0, r8
 8010e14:	fa09 f303 	lsl.w	r3, r9, r3
 8010e18:	4313      	orrs	r3, r2
 8010e1a:	9304      	str	r3, [sp, #16]
 8010e1c:	46a2      	mov	sl, r4
 8010e1e:	e7d2      	b.n	8010dc6 <_vfiprintf_r+0xe2>
 8010e20:	9b03      	ldr	r3, [sp, #12]
 8010e22:	1d19      	adds	r1, r3, #4
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	9103      	str	r1, [sp, #12]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	bfbb      	ittet	lt
 8010e2c:	425b      	neglt	r3, r3
 8010e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8010e32:	9307      	strge	r3, [sp, #28]
 8010e34:	9307      	strlt	r3, [sp, #28]
 8010e36:	bfb8      	it	lt
 8010e38:	9204      	strlt	r2, [sp, #16]
 8010e3a:	7823      	ldrb	r3, [r4, #0]
 8010e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8010e3e:	d10c      	bne.n	8010e5a <_vfiprintf_r+0x176>
 8010e40:	7863      	ldrb	r3, [r4, #1]
 8010e42:	2b2a      	cmp	r3, #42	; 0x2a
 8010e44:	d135      	bne.n	8010eb2 <_vfiprintf_r+0x1ce>
 8010e46:	9b03      	ldr	r3, [sp, #12]
 8010e48:	1d1a      	adds	r2, r3, #4
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	9203      	str	r2, [sp, #12]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	bfb8      	it	lt
 8010e52:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e56:	3402      	adds	r4, #2
 8010e58:	9305      	str	r3, [sp, #20]
 8010e5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010f40 <_vfiprintf_r+0x25c>
 8010e5e:	7821      	ldrb	r1, [r4, #0]
 8010e60:	2203      	movs	r2, #3
 8010e62:	4650      	mov	r0, sl
 8010e64:	f7ef f9bc 	bl	80001e0 <memchr>
 8010e68:	b140      	cbz	r0, 8010e7c <_vfiprintf_r+0x198>
 8010e6a:	2340      	movs	r3, #64	; 0x40
 8010e6c:	eba0 000a 	sub.w	r0, r0, sl
 8010e70:	fa03 f000 	lsl.w	r0, r3, r0
 8010e74:	9b04      	ldr	r3, [sp, #16]
 8010e76:	4303      	orrs	r3, r0
 8010e78:	3401      	adds	r4, #1
 8010e7a:	9304      	str	r3, [sp, #16]
 8010e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e80:	482c      	ldr	r0, [pc, #176]	; (8010f34 <_vfiprintf_r+0x250>)
 8010e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e86:	2206      	movs	r2, #6
 8010e88:	f7ef f9aa 	bl	80001e0 <memchr>
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d03f      	beq.n	8010f10 <_vfiprintf_r+0x22c>
 8010e90:	4b29      	ldr	r3, [pc, #164]	; (8010f38 <_vfiprintf_r+0x254>)
 8010e92:	bb1b      	cbnz	r3, 8010edc <_vfiprintf_r+0x1f8>
 8010e94:	9b03      	ldr	r3, [sp, #12]
 8010e96:	3307      	adds	r3, #7
 8010e98:	f023 0307 	bic.w	r3, r3, #7
 8010e9c:	3308      	adds	r3, #8
 8010e9e:	9303      	str	r3, [sp, #12]
 8010ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea2:	443b      	add	r3, r7
 8010ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ea6:	e767      	b.n	8010d78 <_vfiprintf_r+0x94>
 8010ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010eac:	460c      	mov	r4, r1
 8010eae:	2001      	movs	r0, #1
 8010eb0:	e7a5      	b.n	8010dfe <_vfiprintf_r+0x11a>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	3401      	adds	r4, #1
 8010eb6:	9305      	str	r3, [sp, #20]
 8010eb8:	4619      	mov	r1, r3
 8010eba:	f04f 0c0a 	mov.w	ip, #10
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ec4:	3a30      	subs	r2, #48	; 0x30
 8010ec6:	2a09      	cmp	r2, #9
 8010ec8:	d903      	bls.n	8010ed2 <_vfiprintf_r+0x1ee>
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d0c5      	beq.n	8010e5a <_vfiprintf_r+0x176>
 8010ece:	9105      	str	r1, [sp, #20]
 8010ed0:	e7c3      	b.n	8010e5a <_vfiprintf_r+0x176>
 8010ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	2301      	movs	r3, #1
 8010eda:	e7f0      	b.n	8010ebe <_vfiprintf_r+0x1da>
 8010edc:	ab03      	add	r3, sp, #12
 8010ede:	9300      	str	r3, [sp, #0]
 8010ee0:	462a      	mov	r2, r5
 8010ee2:	4b16      	ldr	r3, [pc, #88]	; (8010f3c <_vfiprintf_r+0x258>)
 8010ee4:	a904      	add	r1, sp, #16
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f7fd fee4 	bl	800ecb4 <_printf_float>
 8010eec:	4607      	mov	r7, r0
 8010eee:	1c78      	adds	r0, r7, #1
 8010ef0:	d1d6      	bne.n	8010ea0 <_vfiprintf_r+0x1bc>
 8010ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ef4:	07d9      	lsls	r1, r3, #31
 8010ef6:	d405      	bmi.n	8010f04 <_vfiprintf_r+0x220>
 8010ef8:	89ab      	ldrh	r3, [r5, #12]
 8010efa:	059a      	lsls	r2, r3, #22
 8010efc:	d402      	bmi.n	8010f04 <_vfiprintf_r+0x220>
 8010efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f00:	f7ff fe74 	bl	8010bec <__retarget_lock_release_recursive>
 8010f04:	89ab      	ldrh	r3, [r5, #12]
 8010f06:	065b      	lsls	r3, r3, #25
 8010f08:	f53f af12 	bmi.w	8010d30 <_vfiprintf_r+0x4c>
 8010f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f0e:	e711      	b.n	8010d34 <_vfiprintf_r+0x50>
 8010f10:	ab03      	add	r3, sp, #12
 8010f12:	9300      	str	r3, [sp, #0]
 8010f14:	462a      	mov	r2, r5
 8010f16:	4b09      	ldr	r3, [pc, #36]	; (8010f3c <_vfiprintf_r+0x258>)
 8010f18:	a904      	add	r1, sp, #16
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f7fe f96e 	bl	800f1fc <_printf_i>
 8010f20:	e7e4      	b.n	8010eec <_vfiprintf_r+0x208>
 8010f22:	bf00      	nop
 8010f24:	08012b3c 	.word	0x08012b3c
 8010f28:	08012b5c 	.word	0x08012b5c
 8010f2c:	08012b1c 	.word	0x08012b1c
 8010f30:	080129c4 	.word	0x080129c4
 8010f34:	080129ce 	.word	0x080129ce
 8010f38:	0800ecb5 	.word	0x0800ecb5
 8010f3c:	08010cc1 	.word	0x08010cc1
 8010f40:	080129ca 	.word	0x080129ca

08010f44 <__swbuf_r>:
 8010f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f46:	460e      	mov	r6, r1
 8010f48:	4614      	mov	r4, r2
 8010f4a:	4605      	mov	r5, r0
 8010f4c:	b118      	cbz	r0, 8010f56 <__swbuf_r+0x12>
 8010f4e:	6983      	ldr	r3, [r0, #24]
 8010f50:	b90b      	cbnz	r3, 8010f56 <__swbuf_r+0x12>
 8010f52:	f000 f9e7 	bl	8011324 <__sinit>
 8010f56:	4b21      	ldr	r3, [pc, #132]	; (8010fdc <__swbuf_r+0x98>)
 8010f58:	429c      	cmp	r4, r3
 8010f5a:	d12b      	bne.n	8010fb4 <__swbuf_r+0x70>
 8010f5c:	686c      	ldr	r4, [r5, #4]
 8010f5e:	69a3      	ldr	r3, [r4, #24]
 8010f60:	60a3      	str	r3, [r4, #8]
 8010f62:	89a3      	ldrh	r3, [r4, #12]
 8010f64:	071a      	lsls	r2, r3, #28
 8010f66:	d52f      	bpl.n	8010fc8 <__swbuf_r+0x84>
 8010f68:	6923      	ldr	r3, [r4, #16]
 8010f6a:	b36b      	cbz	r3, 8010fc8 <__swbuf_r+0x84>
 8010f6c:	6923      	ldr	r3, [r4, #16]
 8010f6e:	6820      	ldr	r0, [r4, #0]
 8010f70:	1ac0      	subs	r0, r0, r3
 8010f72:	6963      	ldr	r3, [r4, #20]
 8010f74:	b2f6      	uxtb	r6, r6
 8010f76:	4283      	cmp	r3, r0
 8010f78:	4637      	mov	r7, r6
 8010f7a:	dc04      	bgt.n	8010f86 <__swbuf_r+0x42>
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f000 f93c 	bl	80111fc <_fflush_r>
 8010f84:	bb30      	cbnz	r0, 8010fd4 <__swbuf_r+0x90>
 8010f86:	68a3      	ldr	r3, [r4, #8]
 8010f88:	3b01      	subs	r3, #1
 8010f8a:	60a3      	str	r3, [r4, #8]
 8010f8c:	6823      	ldr	r3, [r4, #0]
 8010f8e:	1c5a      	adds	r2, r3, #1
 8010f90:	6022      	str	r2, [r4, #0]
 8010f92:	701e      	strb	r6, [r3, #0]
 8010f94:	6963      	ldr	r3, [r4, #20]
 8010f96:	3001      	adds	r0, #1
 8010f98:	4283      	cmp	r3, r0
 8010f9a:	d004      	beq.n	8010fa6 <__swbuf_r+0x62>
 8010f9c:	89a3      	ldrh	r3, [r4, #12]
 8010f9e:	07db      	lsls	r3, r3, #31
 8010fa0:	d506      	bpl.n	8010fb0 <__swbuf_r+0x6c>
 8010fa2:	2e0a      	cmp	r6, #10
 8010fa4:	d104      	bne.n	8010fb0 <__swbuf_r+0x6c>
 8010fa6:	4621      	mov	r1, r4
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f000 f927 	bl	80111fc <_fflush_r>
 8010fae:	b988      	cbnz	r0, 8010fd4 <__swbuf_r+0x90>
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fb4:	4b0a      	ldr	r3, [pc, #40]	; (8010fe0 <__swbuf_r+0x9c>)
 8010fb6:	429c      	cmp	r4, r3
 8010fb8:	d101      	bne.n	8010fbe <__swbuf_r+0x7a>
 8010fba:	68ac      	ldr	r4, [r5, #8]
 8010fbc:	e7cf      	b.n	8010f5e <__swbuf_r+0x1a>
 8010fbe:	4b09      	ldr	r3, [pc, #36]	; (8010fe4 <__swbuf_r+0xa0>)
 8010fc0:	429c      	cmp	r4, r3
 8010fc2:	bf08      	it	eq
 8010fc4:	68ec      	ldreq	r4, [r5, #12]
 8010fc6:	e7ca      	b.n	8010f5e <__swbuf_r+0x1a>
 8010fc8:	4621      	mov	r1, r4
 8010fca:	4628      	mov	r0, r5
 8010fcc:	f000 f81a 	bl	8011004 <__swsetup_r>
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	d0cb      	beq.n	8010f6c <__swbuf_r+0x28>
 8010fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8010fd8:	e7ea      	b.n	8010fb0 <__swbuf_r+0x6c>
 8010fda:	bf00      	nop
 8010fdc:	08012b3c 	.word	0x08012b3c
 8010fe0:	08012b5c 	.word	0x08012b5c
 8010fe4:	08012b1c 	.word	0x08012b1c

08010fe8 <__ascii_wctomb>:
 8010fe8:	b149      	cbz	r1, 8010ffe <__ascii_wctomb+0x16>
 8010fea:	2aff      	cmp	r2, #255	; 0xff
 8010fec:	bf85      	ittet	hi
 8010fee:	238a      	movhi	r3, #138	; 0x8a
 8010ff0:	6003      	strhi	r3, [r0, #0]
 8010ff2:	700a      	strbls	r2, [r1, #0]
 8010ff4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010ff8:	bf98      	it	ls
 8010ffa:	2001      	movls	r0, #1
 8010ffc:	4770      	bx	lr
 8010ffe:	4608      	mov	r0, r1
 8011000:	4770      	bx	lr
	...

08011004 <__swsetup_r>:
 8011004:	4b32      	ldr	r3, [pc, #200]	; (80110d0 <__swsetup_r+0xcc>)
 8011006:	b570      	push	{r4, r5, r6, lr}
 8011008:	681d      	ldr	r5, [r3, #0]
 801100a:	4606      	mov	r6, r0
 801100c:	460c      	mov	r4, r1
 801100e:	b125      	cbz	r5, 801101a <__swsetup_r+0x16>
 8011010:	69ab      	ldr	r3, [r5, #24]
 8011012:	b913      	cbnz	r3, 801101a <__swsetup_r+0x16>
 8011014:	4628      	mov	r0, r5
 8011016:	f000 f985 	bl	8011324 <__sinit>
 801101a:	4b2e      	ldr	r3, [pc, #184]	; (80110d4 <__swsetup_r+0xd0>)
 801101c:	429c      	cmp	r4, r3
 801101e:	d10f      	bne.n	8011040 <__swsetup_r+0x3c>
 8011020:	686c      	ldr	r4, [r5, #4]
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011028:	0719      	lsls	r1, r3, #28
 801102a:	d42c      	bmi.n	8011086 <__swsetup_r+0x82>
 801102c:	06dd      	lsls	r5, r3, #27
 801102e:	d411      	bmi.n	8011054 <__swsetup_r+0x50>
 8011030:	2309      	movs	r3, #9
 8011032:	6033      	str	r3, [r6, #0]
 8011034:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011038:	81a3      	strh	r3, [r4, #12]
 801103a:	f04f 30ff 	mov.w	r0, #4294967295
 801103e:	e03e      	b.n	80110be <__swsetup_r+0xba>
 8011040:	4b25      	ldr	r3, [pc, #148]	; (80110d8 <__swsetup_r+0xd4>)
 8011042:	429c      	cmp	r4, r3
 8011044:	d101      	bne.n	801104a <__swsetup_r+0x46>
 8011046:	68ac      	ldr	r4, [r5, #8]
 8011048:	e7eb      	b.n	8011022 <__swsetup_r+0x1e>
 801104a:	4b24      	ldr	r3, [pc, #144]	; (80110dc <__swsetup_r+0xd8>)
 801104c:	429c      	cmp	r4, r3
 801104e:	bf08      	it	eq
 8011050:	68ec      	ldreq	r4, [r5, #12]
 8011052:	e7e6      	b.n	8011022 <__swsetup_r+0x1e>
 8011054:	0758      	lsls	r0, r3, #29
 8011056:	d512      	bpl.n	801107e <__swsetup_r+0x7a>
 8011058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801105a:	b141      	cbz	r1, 801106e <__swsetup_r+0x6a>
 801105c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011060:	4299      	cmp	r1, r3
 8011062:	d002      	beq.n	801106a <__swsetup_r+0x66>
 8011064:	4630      	mov	r0, r6
 8011066:	f7fd fcdb 	bl	800ea20 <_free_r>
 801106a:	2300      	movs	r3, #0
 801106c:	6363      	str	r3, [r4, #52]	; 0x34
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011074:	81a3      	strh	r3, [r4, #12]
 8011076:	2300      	movs	r3, #0
 8011078:	6063      	str	r3, [r4, #4]
 801107a:	6923      	ldr	r3, [r4, #16]
 801107c:	6023      	str	r3, [r4, #0]
 801107e:	89a3      	ldrh	r3, [r4, #12]
 8011080:	f043 0308 	orr.w	r3, r3, #8
 8011084:	81a3      	strh	r3, [r4, #12]
 8011086:	6923      	ldr	r3, [r4, #16]
 8011088:	b94b      	cbnz	r3, 801109e <__swsetup_r+0x9a>
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011094:	d003      	beq.n	801109e <__swsetup_r+0x9a>
 8011096:	4621      	mov	r1, r4
 8011098:	4630      	mov	r0, r6
 801109a:	f000 fa05 	bl	80114a8 <__smakebuf_r>
 801109e:	89a0      	ldrh	r0, [r4, #12]
 80110a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110a4:	f010 0301 	ands.w	r3, r0, #1
 80110a8:	d00a      	beq.n	80110c0 <__swsetup_r+0xbc>
 80110aa:	2300      	movs	r3, #0
 80110ac:	60a3      	str	r3, [r4, #8]
 80110ae:	6963      	ldr	r3, [r4, #20]
 80110b0:	425b      	negs	r3, r3
 80110b2:	61a3      	str	r3, [r4, #24]
 80110b4:	6923      	ldr	r3, [r4, #16]
 80110b6:	b943      	cbnz	r3, 80110ca <__swsetup_r+0xc6>
 80110b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80110bc:	d1ba      	bne.n	8011034 <__swsetup_r+0x30>
 80110be:	bd70      	pop	{r4, r5, r6, pc}
 80110c0:	0781      	lsls	r1, r0, #30
 80110c2:	bf58      	it	pl
 80110c4:	6963      	ldrpl	r3, [r4, #20]
 80110c6:	60a3      	str	r3, [r4, #8]
 80110c8:	e7f4      	b.n	80110b4 <__swsetup_r+0xb0>
 80110ca:	2000      	movs	r0, #0
 80110cc:	e7f7      	b.n	80110be <__swsetup_r+0xba>
 80110ce:	bf00      	nop
 80110d0:	2000002c 	.word	0x2000002c
 80110d4:	08012b3c 	.word	0x08012b3c
 80110d8:	08012b5c 	.word	0x08012b5c
 80110dc:	08012b1c 	.word	0x08012b1c

080110e0 <abort>:
 80110e0:	b508      	push	{r3, lr}
 80110e2:	2006      	movs	r0, #6
 80110e4:	f000 fa50 	bl	8011588 <raise>
 80110e8:	2001      	movs	r0, #1
 80110ea:	f7f3 fc89 	bl	8004a00 <_exit>
	...

080110f0 <__sflush_r>:
 80110f0:	898a      	ldrh	r2, [r1, #12]
 80110f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f6:	4605      	mov	r5, r0
 80110f8:	0710      	lsls	r0, r2, #28
 80110fa:	460c      	mov	r4, r1
 80110fc:	d458      	bmi.n	80111b0 <__sflush_r+0xc0>
 80110fe:	684b      	ldr	r3, [r1, #4]
 8011100:	2b00      	cmp	r3, #0
 8011102:	dc05      	bgt.n	8011110 <__sflush_r+0x20>
 8011104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011106:	2b00      	cmp	r3, #0
 8011108:	dc02      	bgt.n	8011110 <__sflush_r+0x20>
 801110a:	2000      	movs	r0, #0
 801110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011112:	2e00      	cmp	r6, #0
 8011114:	d0f9      	beq.n	801110a <__sflush_r+0x1a>
 8011116:	2300      	movs	r3, #0
 8011118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801111c:	682f      	ldr	r7, [r5, #0]
 801111e:	602b      	str	r3, [r5, #0]
 8011120:	d032      	beq.n	8011188 <__sflush_r+0x98>
 8011122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011124:	89a3      	ldrh	r3, [r4, #12]
 8011126:	075a      	lsls	r2, r3, #29
 8011128:	d505      	bpl.n	8011136 <__sflush_r+0x46>
 801112a:	6863      	ldr	r3, [r4, #4]
 801112c:	1ac0      	subs	r0, r0, r3
 801112e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011130:	b10b      	cbz	r3, 8011136 <__sflush_r+0x46>
 8011132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011134:	1ac0      	subs	r0, r0, r3
 8011136:	2300      	movs	r3, #0
 8011138:	4602      	mov	r2, r0
 801113a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801113c:	6a21      	ldr	r1, [r4, #32]
 801113e:	4628      	mov	r0, r5
 8011140:	47b0      	blx	r6
 8011142:	1c43      	adds	r3, r0, #1
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	d106      	bne.n	8011156 <__sflush_r+0x66>
 8011148:	6829      	ldr	r1, [r5, #0]
 801114a:	291d      	cmp	r1, #29
 801114c:	d82c      	bhi.n	80111a8 <__sflush_r+0xb8>
 801114e:	4a2a      	ldr	r2, [pc, #168]	; (80111f8 <__sflush_r+0x108>)
 8011150:	40ca      	lsrs	r2, r1
 8011152:	07d6      	lsls	r6, r2, #31
 8011154:	d528      	bpl.n	80111a8 <__sflush_r+0xb8>
 8011156:	2200      	movs	r2, #0
 8011158:	6062      	str	r2, [r4, #4]
 801115a:	04d9      	lsls	r1, r3, #19
 801115c:	6922      	ldr	r2, [r4, #16]
 801115e:	6022      	str	r2, [r4, #0]
 8011160:	d504      	bpl.n	801116c <__sflush_r+0x7c>
 8011162:	1c42      	adds	r2, r0, #1
 8011164:	d101      	bne.n	801116a <__sflush_r+0x7a>
 8011166:	682b      	ldr	r3, [r5, #0]
 8011168:	b903      	cbnz	r3, 801116c <__sflush_r+0x7c>
 801116a:	6560      	str	r0, [r4, #84]	; 0x54
 801116c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801116e:	602f      	str	r7, [r5, #0]
 8011170:	2900      	cmp	r1, #0
 8011172:	d0ca      	beq.n	801110a <__sflush_r+0x1a>
 8011174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011178:	4299      	cmp	r1, r3
 801117a:	d002      	beq.n	8011182 <__sflush_r+0x92>
 801117c:	4628      	mov	r0, r5
 801117e:	f7fd fc4f 	bl	800ea20 <_free_r>
 8011182:	2000      	movs	r0, #0
 8011184:	6360      	str	r0, [r4, #52]	; 0x34
 8011186:	e7c1      	b.n	801110c <__sflush_r+0x1c>
 8011188:	6a21      	ldr	r1, [r4, #32]
 801118a:	2301      	movs	r3, #1
 801118c:	4628      	mov	r0, r5
 801118e:	47b0      	blx	r6
 8011190:	1c41      	adds	r1, r0, #1
 8011192:	d1c7      	bne.n	8011124 <__sflush_r+0x34>
 8011194:	682b      	ldr	r3, [r5, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d0c4      	beq.n	8011124 <__sflush_r+0x34>
 801119a:	2b1d      	cmp	r3, #29
 801119c:	d001      	beq.n	80111a2 <__sflush_r+0xb2>
 801119e:	2b16      	cmp	r3, #22
 80111a0:	d101      	bne.n	80111a6 <__sflush_r+0xb6>
 80111a2:	602f      	str	r7, [r5, #0]
 80111a4:	e7b1      	b.n	801110a <__sflush_r+0x1a>
 80111a6:	89a3      	ldrh	r3, [r4, #12]
 80111a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111ac:	81a3      	strh	r3, [r4, #12]
 80111ae:	e7ad      	b.n	801110c <__sflush_r+0x1c>
 80111b0:	690f      	ldr	r7, [r1, #16]
 80111b2:	2f00      	cmp	r7, #0
 80111b4:	d0a9      	beq.n	801110a <__sflush_r+0x1a>
 80111b6:	0793      	lsls	r3, r2, #30
 80111b8:	680e      	ldr	r6, [r1, #0]
 80111ba:	bf08      	it	eq
 80111bc:	694b      	ldreq	r3, [r1, #20]
 80111be:	600f      	str	r7, [r1, #0]
 80111c0:	bf18      	it	ne
 80111c2:	2300      	movne	r3, #0
 80111c4:	eba6 0807 	sub.w	r8, r6, r7
 80111c8:	608b      	str	r3, [r1, #8]
 80111ca:	f1b8 0f00 	cmp.w	r8, #0
 80111ce:	dd9c      	ble.n	801110a <__sflush_r+0x1a>
 80111d0:	6a21      	ldr	r1, [r4, #32]
 80111d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80111d4:	4643      	mov	r3, r8
 80111d6:	463a      	mov	r2, r7
 80111d8:	4628      	mov	r0, r5
 80111da:	47b0      	blx	r6
 80111dc:	2800      	cmp	r0, #0
 80111de:	dc06      	bgt.n	80111ee <__sflush_r+0xfe>
 80111e0:	89a3      	ldrh	r3, [r4, #12]
 80111e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111e6:	81a3      	strh	r3, [r4, #12]
 80111e8:	f04f 30ff 	mov.w	r0, #4294967295
 80111ec:	e78e      	b.n	801110c <__sflush_r+0x1c>
 80111ee:	4407      	add	r7, r0
 80111f0:	eba8 0800 	sub.w	r8, r8, r0
 80111f4:	e7e9      	b.n	80111ca <__sflush_r+0xda>
 80111f6:	bf00      	nop
 80111f8:	20400001 	.word	0x20400001

080111fc <_fflush_r>:
 80111fc:	b538      	push	{r3, r4, r5, lr}
 80111fe:	690b      	ldr	r3, [r1, #16]
 8011200:	4605      	mov	r5, r0
 8011202:	460c      	mov	r4, r1
 8011204:	b913      	cbnz	r3, 801120c <_fflush_r+0x10>
 8011206:	2500      	movs	r5, #0
 8011208:	4628      	mov	r0, r5
 801120a:	bd38      	pop	{r3, r4, r5, pc}
 801120c:	b118      	cbz	r0, 8011216 <_fflush_r+0x1a>
 801120e:	6983      	ldr	r3, [r0, #24]
 8011210:	b90b      	cbnz	r3, 8011216 <_fflush_r+0x1a>
 8011212:	f000 f887 	bl	8011324 <__sinit>
 8011216:	4b14      	ldr	r3, [pc, #80]	; (8011268 <_fflush_r+0x6c>)
 8011218:	429c      	cmp	r4, r3
 801121a:	d11b      	bne.n	8011254 <_fflush_r+0x58>
 801121c:	686c      	ldr	r4, [r5, #4]
 801121e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d0ef      	beq.n	8011206 <_fflush_r+0xa>
 8011226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011228:	07d0      	lsls	r0, r2, #31
 801122a:	d404      	bmi.n	8011236 <_fflush_r+0x3a>
 801122c:	0599      	lsls	r1, r3, #22
 801122e:	d402      	bmi.n	8011236 <_fflush_r+0x3a>
 8011230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011232:	f7ff fcda 	bl	8010bea <__retarget_lock_acquire_recursive>
 8011236:	4628      	mov	r0, r5
 8011238:	4621      	mov	r1, r4
 801123a:	f7ff ff59 	bl	80110f0 <__sflush_r>
 801123e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011240:	07da      	lsls	r2, r3, #31
 8011242:	4605      	mov	r5, r0
 8011244:	d4e0      	bmi.n	8011208 <_fflush_r+0xc>
 8011246:	89a3      	ldrh	r3, [r4, #12]
 8011248:	059b      	lsls	r3, r3, #22
 801124a:	d4dd      	bmi.n	8011208 <_fflush_r+0xc>
 801124c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801124e:	f7ff fccd 	bl	8010bec <__retarget_lock_release_recursive>
 8011252:	e7d9      	b.n	8011208 <_fflush_r+0xc>
 8011254:	4b05      	ldr	r3, [pc, #20]	; (801126c <_fflush_r+0x70>)
 8011256:	429c      	cmp	r4, r3
 8011258:	d101      	bne.n	801125e <_fflush_r+0x62>
 801125a:	68ac      	ldr	r4, [r5, #8]
 801125c:	e7df      	b.n	801121e <_fflush_r+0x22>
 801125e:	4b04      	ldr	r3, [pc, #16]	; (8011270 <_fflush_r+0x74>)
 8011260:	429c      	cmp	r4, r3
 8011262:	bf08      	it	eq
 8011264:	68ec      	ldreq	r4, [r5, #12]
 8011266:	e7da      	b.n	801121e <_fflush_r+0x22>
 8011268:	08012b3c 	.word	0x08012b3c
 801126c:	08012b5c 	.word	0x08012b5c
 8011270:	08012b1c 	.word	0x08012b1c

08011274 <std>:
 8011274:	2300      	movs	r3, #0
 8011276:	b510      	push	{r4, lr}
 8011278:	4604      	mov	r4, r0
 801127a:	e9c0 3300 	strd	r3, r3, [r0]
 801127e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011282:	6083      	str	r3, [r0, #8]
 8011284:	8181      	strh	r1, [r0, #12]
 8011286:	6643      	str	r3, [r0, #100]	; 0x64
 8011288:	81c2      	strh	r2, [r0, #14]
 801128a:	6183      	str	r3, [r0, #24]
 801128c:	4619      	mov	r1, r3
 801128e:	2208      	movs	r2, #8
 8011290:	305c      	adds	r0, #92	; 0x5c
 8011292:	f7fd fbbd 	bl	800ea10 <memset>
 8011296:	4b05      	ldr	r3, [pc, #20]	; (80112ac <std+0x38>)
 8011298:	6263      	str	r3, [r4, #36]	; 0x24
 801129a:	4b05      	ldr	r3, [pc, #20]	; (80112b0 <std+0x3c>)
 801129c:	62a3      	str	r3, [r4, #40]	; 0x28
 801129e:	4b05      	ldr	r3, [pc, #20]	; (80112b4 <std+0x40>)
 80112a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112a2:	4b05      	ldr	r3, [pc, #20]	; (80112b8 <std+0x44>)
 80112a4:	6224      	str	r4, [r4, #32]
 80112a6:	6323      	str	r3, [r4, #48]	; 0x30
 80112a8:	bd10      	pop	{r4, pc}
 80112aa:	bf00      	nop
 80112ac:	080115c1 	.word	0x080115c1
 80112b0:	080115e3 	.word	0x080115e3
 80112b4:	0801161b 	.word	0x0801161b
 80112b8:	0801163f 	.word	0x0801163f

080112bc <_cleanup_r>:
 80112bc:	4901      	ldr	r1, [pc, #4]	; (80112c4 <_cleanup_r+0x8>)
 80112be:	f000 b8af 	b.w	8011420 <_fwalk_reent>
 80112c2:	bf00      	nop
 80112c4:	080111fd 	.word	0x080111fd

080112c8 <__sfmoreglue>:
 80112c8:	b570      	push	{r4, r5, r6, lr}
 80112ca:	1e4a      	subs	r2, r1, #1
 80112cc:	2568      	movs	r5, #104	; 0x68
 80112ce:	4355      	muls	r5, r2
 80112d0:	460e      	mov	r6, r1
 80112d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80112d6:	f7fd fbf3 	bl	800eac0 <_malloc_r>
 80112da:	4604      	mov	r4, r0
 80112dc:	b140      	cbz	r0, 80112f0 <__sfmoreglue+0x28>
 80112de:	2100      	movs	r1, #0
 80112e0:	e9c0 1600 	strd	r1, r6, [r0]
 80112e4:	300c      	adds	r0, #12
 80112e6:	60a0      	str	r0, [r4, #8]
 80112e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80112ec:	f7fd fb90 	bl	800ea10 <memset>
 80112f0:	4620      	mov	r0, r4
 80112f2:	bd70      	pop	{r4, r5, r6, pc}

080112f4 <__sfp_lock_acquire>:
 80112f4:	4801      	ldr	r0, [pc, #4]	; (80112fc <__sfp_lock_acquire+0x8>)
 80112f6:	f7ff bc78 	b.w	8010bea <__retarget_lock_acquire_recursive>
 80112fa:	bf00      	nop
 80112fc:	20004d70 	.word	0x20004d70

08011300 <__sfp_lock_release>:
 8011300:	4801      	ldr	r0, [pc, #4]	; (8011308 <__sfp_lock_release+0x8>)
 8011302:	f7ff bc73 	b.w	8010bec <__retarget_lock_release_recursive>
 8011306:	bf00      	nop
 8011308:	20004d70 	.word	0x20004d70

0801130c <__sinit_lock_acquire>:
 801130c:	4801      	ldr	r0, [pc, #4]	; (8011314 <__sinit_lock_acquire+0x8>)
 801130e:	f7ff bc6c 	b.w	8010bea <__retarget_lock_acquire_recursive>
 8011312:	bf00      	nop
 8011314:	20004d6b 	.word	0x20004d6b

08011318 <__sinit_lock_release>:
 8011318:	4801      	ldr	r0, [pc, #4]	; (8011320 <__sinit_lock_release+0x8>)
 801131a:	f7ff bc67 	b.w	8010bec <__retarget_lock_release_recursive>
 801131e:	bf00      	nop
 8011320:	20004d6b 	.word	0x20004d6b

08011324 <__sinit>:
 8011324:	b510      	push	{r4, lr}
 8011326:	4604      	mov	r4, r0
 8011328:	f7ff fff0 	bl	801130c <__sinit_lock_acquire>
 801132c:	69a3      	ldr	r3, [r4, #24]
 801132e:	b11b      	cbz	r3, 8011338 <__sinit+0x14>
 8011330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011334:	f7ff bff0 	b.w	8011318 <__sinit_lock_release>
 8011338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801133c:	6523      	str	r3, [r4, #80]	; 0x50
 801133e:	4b13      	ldr	r3, [pc, #76]	; (801138c <__sinit+0x68>)
 8011340:	4a13      	ldr	r2, [pc, #76]	; (8011390 <__sinit+0x6c>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	62a2      	str	r2, [r4, #40]	; 0x28
 8011346:	42a3      	cmp	r3, r4
 8011348:	bf04      	itt	eq
 801134a:	2301      	moveq	r3, #1
 801134c:	61a3      	streq	r3, [r4, #24]
 801134e:	4620      	mov	r0, r4
 8011350:	f000 f820 	bl	8011394 <__sfp>
 8011354:	6060      	str	r0, [r4, #4]
 8011356:	4620      	mov	r0, r4
 8011358:	f000 f81c 	bl	8011394 <__sfp>
 801135c:	60a0      	str	r0, [r4, #8]
 801135e:	4620      	mov	r0, r4
 8011360:	f000 f818 	bl	8011394 <__sfp>
 8011364:	2200      	movs	r2, #0
 8011366:	60e0      	str	r0, [r4, #12]
 8011368:	2104      	movs	r1, #4
 801136a:	6860      	ldr	r0, [r4, #4]
 801136c:	f7ff ff82 	bl	8011274 <std>
 8011370:	68a0      	ldr	r0, [r4, #8]
 8011372:	2201      	movs	r2, #1
 8011374:	2109      	movs	r1, #9
 8011376:	f7ff ff7d 	bl	8011274 <std>
 801137a:	68e0      	ldr	r0, [r4, #12]
 801137c:	2202      	movs	r2, #2
 801137e:	2112      	movs	r1, #18
 8011380:	f7ff ff78 	bl	8011274 <std>
 8011384:	2301      	movs	r3, #1
 8011386:	61a3      	str	r3, [r4, #24]
 8011388:	e7d2      	b.n	8011330 <__sinit+0xc>
 801138a:	bf00      	nop
 801138c:	08012798 	.word	0x08012798
 8011390:	080112bd 	.word	0x080112bd

08011394 <__sfp>:
 8011394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011396:	4607      	mov	r7, r0
 8011398:	f7ff ffac 	bl	80112f4 <__sfp_lock_acquire>
 801139c:	4b1e      	ldr	r3, [pc, #120]	; (8011418 <__sfp+0x84>)
 801139e:	681e      	ldr	r6, [r3, #0]
 80113a0:	69b3      	ldr	r3, [r6, #24]
 80113a2:	b913      	cbnz	r3, 80113aa <__sfp+0x16>
 80113a4:	4630      	mov	r0, r6
 80113a6:	f7ff ffbd 	bl	8011324 <__sinit>
 80113aa:	3648      	adds	r6, #72	; 0x48
 80113ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	d503      	bpl.n	80113bc <__sfp+0x28>
 80113b4:	6833      	ldr	r3, [r6, #0]
 80113b6:	b30b      	cbz	r3, 80113fc <__sfp+0x68>
 80113b8:	6836      	ldr	r6, [r6, #0]
 80113ba:	e7f7      	b.n	80113ac <__sfp+0x18>
 80113bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113c0:	b9d5      	cbnz	r5, 80113f8 <__sfp+0x64>
 80113c2:	4b16      	ldr	r3, [pc, #88]	; (801141c <__sfp+0x88>)
 80113c4:	60e3      	str	r3, [r4, #12]
 80113c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80113ca:	6665      	str	r5, [r4, #100]	; 0x64
 80113cc:	f7ff fc0c 	bl	8010be8 <__retarget_lock_init_recursive>
 80113d0:	f7ff ff96 	bl	8011300 <__sfp_lock_release>
 80113d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80113d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80113dc:	6025      	str	r5, [r4, #0]
 80113de:	61a5      	str	r5, [r4, #24]
 80113e0:	2208      	movs	r2, #8
 80113e2:	4629      	mov	r1, r5
 80113e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80113e8:	f7fd fb12 	bl	800ea10 <memset>
 80113ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80113f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80113f4:	4620      	mov	r0, r4
 80113f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113f8:	3468      	adds	r4, #104	; 0x68
 80113fa:	e7d9      	b.n	80113b0 <__sfp+0x1c>
 80113fc:	2104      	movs	r1, #4
 80113fe:	4638      	mov	r0, r7
 8011400:	f7ff ff62 	bl	80112c8 <__sfmoreglue>
 8011404:	4604      	mov	r4, r0
 8011406:	6030      	str	r0, [r6, #0]
 8011408:	2800      	cmp	r0, #0
 801140a:	d1d5      	bne.n	80113b8 <__sfp+0x24>
 801140c:	f7ff ff78 	bl	8011300 <__sfp_lock_release>
 8011410:	230c      	movs	r3, #12
 8011412:	603b      	str	r3, [r7, #0]
 8011414:	e7ee      	b.n	80113f4 <__sfp+0x60>
 8011416:	bf00      	nop
 8011418:	08012798 	.word	0x08012798
 801141c:	ffff0001 	.word	0xffff0001

08011420 <_fwalk_reent>:
 8011420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011424:	4606      	mov	r6, r0
 8011426:	4688      	mov	r8, r1
 8011428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801142c:	2700      	movs	r7, #0
 801142e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011432:	f1b9 0901 	subs.w	r9, r9, #1
 8011436:	d505      	bpl.n	8011444 <_fwalk_reent+0x24>
 8011438:	6824      	ldr	r4, [r4, #0]
 801143a:	2c00      	cmp	r4, #0
 801143c:	d1f7      	bne.n	801142e <_fwalk_reent+0xe>
 801143e:	4638      	mov	r0, r7
 8011440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011444:	89ab      	ldrh	r3, [r5, #12]
 8011446:	2b01      	cmp	r3, #1
 8011448:	d907      	bls.n	801145a <_fwalk_reent+0x3a>
 801144a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801144e:	3301      	adds	r3, #1
 8011450:	d003      	beq.n	801145a <_fwalk_reent+0x3a>
 8011452:	4629      	mov	r1, r5
 8011454:	4630      	mov	r0, r6
 8011456:	47c0      	blx	r8
 8011458:	4307      	orrs	r7, r0
 801145a:	3568      	adds	r5, #104	; 0x68
 801145c:	e7e9      	b.n	8011432 <_fwalk_reent+0x12>

0801145e <__swhatbuf_r>:
 801145e:	b570      	push	{r4, r5, r6, lr}
 8011460:	460e      	mov	r6, r1
 8011462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011466:	2900      	cmp	r1, #0
 8011468:	b096      	sub	sp, #88	; 0x58
 801146a:	4614      	mov	r4, r2
 801146c:	461d      	mov	r5, r3
 801146e:	da07      	bge.n	8011480 <__swhatbuf_r+0x22>
 8011470:	2300      	movs	r3, #0
 8011472:	602b      	str	r3, [r5, #0]
 8011474:	89b3      	ldrh	r3, [r6, #12]
 8011476:	061a      	lsls	r2, r3, #24
 8011478:	d410      	bmi.n	801149c <__swhatbuf_r+0x3e>
 801147a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801147e:	e00e      	b.n	801149e <__swhatbuf_r+0x40>
 8011480:	466a      	mov	r2, sp
 8011482:	f000 f903 	bl	801168c <_fstat_r>
 8011486:	2800      	cmp	r0, #0
 8011488:	dbf2      	blt.n	8011470 <__swhatbuf_r+0x12>
 801148a:	9a01      	ldr	r2, [sp, #4]
 801148c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011490:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011494:	425a      	negs	r2, r3
 8011496:	415a      	adcs	r2, r3
 8011498:	602a      	str	r2, [r5, #0]
 801149a:	e7ee      	b.n	801147a <__swhatbuf_r+0x1c>
 801149c:	2340      	movs	r3, #64	; 0x40
 801149e:	2000      	movs	r0, #0
 80114a0:	6023      	str	r3, [r4, #0]
 80114a2:	b016      	add	sp, #88	; 0x58
 80114a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080114a8 <__smakebuf_r>:
 80114a8:	898b      	ldrh	r3, [r1, #12]
 80114aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114ac:	079d      	lsls	r5, r3, #30
 80114ae:	4606      	mov	r6, r0
 80114b0:	460c      	mov	r4, r1
 80114b2:	d507      	bpl.n	80114c4 <__smakebuf_r+0x1c>
 80114b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114b8:	6023      	str	r3, [r4, #0]
 80114ba:	6123      	str	r3, [r4, #16]
 80114bc:	2301      	movs	r3, #1
 80114be:	6163      	str	r3, [r4, #20]
 80114c0:	b002      	add	sp, #8
 80114c2:	bd70      	pop	{r4, r5, r6, pc}
 80114c4:	ab01      	add	r3, sp, #4
 80114c6:	466a      	mov	r2, sp
 80114c8:	f7ff ffc9 	bl	801145e <__swhatbuf_r>
 80114cc:	9900      	ldr	r1, [sp, #0]
 80114ce:	4605      	mov	r5, r0
 80114d0:	4630      	mov	r0, r6
 80114d2:	f7fd faf5 	bl	800eac0 <_malloc_r>
 80114d6:	b948      	cbnz	r0, 80114ec <__smakebuf_r+0x44>
 80114d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114dc:	059a      	lsls	r2, r3, #22
 80114de:	d4ef      	bmi.n	80114c0 <__smakebuf_r+0x18>
 80114e0:	f023 0303 	bic.w	r3, r3, #3
 80114e4:	f043 0302 	orr.w	r3, r3, #2
 80114e8:	81a3      	strh	r3, [r4, #12]
 80114ea:	e7e3      	b.n	80114b4 <__smakebuf_r+0xc>
 80114ec:	4b0d      	ldr	r3, [pc, #52]	; (8011524 <__smakebuf_r+0x7c>)
 80114ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	6020      	str	r0, [r4, #0]
 80114f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114f8:	81a3      	strh	r3, [r4, #12]
 80114fa:	9b00      	ldr	r3, [sp, #0]
 80114fc:	6163      	str	r3, [r4, #20]
 80114fe:	9b01      	ldr	r3, [sp, #4]
 8011500:	6120      	str	r0, [r4, #16]
 8011502:	b15b      	cbz	r3, 801151c <__smakebuf_r+0x74>
 8011504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011508:	4630      	mov	r0, r6
 801150a:	f000 f8d1 	bl	80116b0 <_isatty_r>
 801150e:	b128      	cbz	r0, 801151c <__smakebuf_r+0x74>
 8011510:	89a3      	ldrh	r3, [r4, #12]
 8011512:	f023 0303 	bic.w	r3, r3, #3
 8011516:	f043 0301 	orr.w	r3, r3, #1
 801151a:	81a3      	strh	r3, [r4, #12]
 801151c:	89a0      	ldrh	r0, [r4, #12]
 801151e:	4305      	orrs	r5, r0
 8011520:	81a5      	strh	r5, [r4, #12]
 8011522:	e7cd      	b.n	80114c0 <__smakebuf_r+0x18>
 8011524:	080112bd 	.word	0x080112bd

08011528 <_malloc_usable_size_r>:
 8011528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801152c:	1f18      	subs	r0, r3, #4
 801152e:	2b00      	cmp	r3, #0
 8011530:	bfbc      	itt	lt
 8011532:	580b      	ldrlt	r3, [r1, r0]
 8011534:	18c0      	addlt	r0, r0, r3
 8011536:	4770      	bx	lr

08011538 <_raise_r>:
 8011538:	291f      	cmp	r1, #31
 801153a:	b538      	push	{r3, r4, r5, lr}
 801153c:	4604      	mov	r4, r0
 801153e:	460d      	mov	r5, r1
 8011540:	d904      	bls.n	801154c <_raise_r+0x14>
 8011542:	2316      	movs	r3, #22
 8011544:	6003      	str	r3, [r0, #0]
 8011546:	f04f 30ff 	mov.w	r0, #4294967295
 801154a:	bd38      	pop	{r3, r4, r5, pc}
 801154c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801154e:	b112      	cbz	r2, 8011556 <_raise_r+0x1e>
 8011550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011554:	b94b      	cbnz	r3, 801156a <_raise_r+0x32>
 8011556:	4620      	mov	r0, r4
 8011558:	f000 f830 	bl	80115bc <_getpid_r>
 801155c:	462a      	mov	r2, r5
 801155e:	4601      	mov	r1, r0
 8011560:	4620      	mov	r0, r4
 8011562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011566:	f000 b817 	b.w	8011598 <_kill_r>
 801156a:	2b01      	cmp	r3, #1
 801156c:	d00a      	beq.n	8011584 <_raise_r+0x4c>
 801156e:	1c59      	adds	r1, r3, #1
 8011570:	d103      	bne.n	801157a <_raise_r+0x42>
 8011572:	2316      	movs	r3, #22
 8011574:	6003      	str	r3, [r0, #0]
 8011576:	2001      	movs	r0, #1
 8011578:	e7e7      	b.n	801154a <_raise_r+0x12>
 801157a:	2400      	movs	r4, #0
 801157c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011580:	4628      	mov	r0, r5
 8011582:	4798      	blx	r3
 8011584:	2000      	movs	r0, #0
 8011586:	e7e0      	b.n	801154a <_raise_r+0x12>

08011588 <raise>:
 8011588:	4b02      	ldr	r3, [pc, #8]	; (8011594 <raise+0xc>)
 801158a:	4601      	mov	r1, r0
 801158c:	6818      	ldr	r0, [r3, #0]
 801158e:	f7ff bfd3 	b.w	8011538 <_raise_r>
 8011592:	bf00      	nop
 8011594:	2000002c 	.word	0x2000002c

08011598 <_kill_r>:
 8011598:	b538      	push	{r3, r4, r5, lr}
 801159a:	4d07      	ldr	r5, [pc, #28]	; (80115b8 <_kill_r+0x20>)
 801159c:	2300      	movs	r3, #0
 801159e:	4604      	mov	r4, r0
 80115a0:	4608      	mov	r0, r1
 80115a2:	4611      	mov	r1, r2
 80115a4:	602b      	str	r3, [r5, #0]
 80115a6:	f7f3 fa1b 	bl	80049e0 <_kill>
 80115aa:	1c43      	adds	r3, r0, #1
 80115ac:	d102      	bne.n	80115b4 <_kill_r+0x1c>
 80115ae:	682b      	ldr	r3, [r5, #0]
 80115b0:	b103      	cbz	r3, 80115b4 <_kill_r+0x1c>
 80115b2:	6023      	str	r3, [r4, #0]
 80115b4:	bd38      	pop	{r3, r4, r5, pc}
 80115b6:	bf00      	nop
 80115b8:	20004d64 	.word	0x20004d64

080115bc <_getpid_r>:
 80115bc:	f7f3 ba08 	b.w	80049d0 <_getpid>

080115c0 <__sread>:
 80115c0:	b510      	push	{r4, lr}
 80115c2:	460c      	mov	r4, r1
 80115c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115c8:	f000 f894 	bl	80116f4 <_read_r>
 80115cc:	2800      	cmp	r0, #0
 80115ce:	bfab      	itete	ge
 80115d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80115d2:	89a3      	ldrhlt	r3, [r4, #12]
 80115d4:	181b      	addge	r3, r3, r0
 80115d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80115da:	bfac      	ite	ge
 80115dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80115de:	81a3      	strhlt	r3, [r4, #12]
 80115e0:	bd10      	pop	{r4, pc}

080115e2 <__swrite>:
 80115e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e6:	461f      	mov	r7, r3
 80115e8:	898b      	ldrh	r3, [r1, #12]
 80115ea:	05db      	lsls	r3, r3, #23
 80115ec:	4605      	mov	r5, r0
 80115ee:	460c      	mov	r4, r1
 80115f0:	4616      	mov	r6, r2
 80115f2:	d505      	bpl.n	8011600 <__swrite+0x1e>
 80115f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115f8:	2302      	movs	r3, #2
 80115fa:	2200      	movs	r2, #0
 80115fc:	f000 f868 	bl	80116d0 <_lseek_r>
 8011600:	89a3      	ldrh	r3, [r4, #12]
 8011602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801160a:	81a3      	strh	r3, [r4, #12]
 801160c:	4632      	mov	r2, r6
 801160e:	463b      	mov	r3, r7
 8011610:	4628      	mov	r0, r5
 8011612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011616:	f000 b817 	b.w	8011648 <_write_r>

0801161a <__sseek>:
 801161a:	b510      	push	{r4, lr}
 801161c:	460c      	mov	r4, r1
 801161e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011622:	f000 f855 	bl	80116d0 <_lseek_r>
 8011626:	1c43      	adds	r3, r0, #1
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	bf15      	itete	ne
 801162c:	6560      	strne	r0, [r4, #84]	; 0x54
 801162e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011636:	81a3      	strheq	r3, [r4, #12]
 8011638:	bf18      	it	ne
 801163a:	81a3      	strhne	r3, [r4, #12]
 801163c:	bd10      	pop	{r4, pc}

0801163e <__sclose>:
 801163e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011642:	f000 b813 	b.w	801166c <_close_r>
	...

08011648 <_write_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	4d07      	ldr	r5, [pc, #28]	; (8011668 <_write_r+0x20>)
 801164c:	4604      	mov	r4, r0
 801164e:	4608      	mov	r0, r1
 8011650:	4611      	mov	r1, r2
 8011652:	2200      	movs	r2, #0
 8011654:	602a      	str	r2, [r5, #0]
 8011656:	461a      	mov	r2, r3
 8011658:	f7f3 f9f9 	bl	8004a4e <_write>
 801165c:	1c43      	adds	r3, r0, #1
 801165e:	d102      	bne.n	8011666 <_write_r+0x1e>
 8011660:	682b      	ldr	r3, [r5, #0]
 8011662:	b103      	cbz	r3, 8011666 <_write_r+0x1e>
 8011664:	6023      	str	r3, [r4, #0]
 8011666:	bd38      	pop	{r3, r4, r5, pc}
 8011668:	20004d64 	.word	0x20004d64

0801166c <_close_r>:
 801166c:	b538      	push	{r3, r4, r5, lr}
 801166e:	4d06      	ldr	r5, [pc, #24]	; (8011688 <_close_r+0x1c>)
 8011670:	2300      	movs	r3, #0
 8011672:	4604      	mov	r4, r0
 8011674:	4608      	mov	r0, r1
 8011676:	602b      	str	r3, [r5, #0]
 8011678:	f7f3 fa05 	bl	8004a86 <_close>
 801167c:	1c43      	adds	r3, r0, #1
 801167e:	d102      	bne.n	8011686 <_close_r+0x1a>
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	b103      	cbz	r3, 8011686 <_close_r+0x1a>
 8011684:	6023      	str	r3, [r4, #0]
 8011686:	bd38      	pop	{r3, r4, r5, pc}
 8011688:	20004d64 	.word	0x20004d64

0801168c <_fstat_r>:
 801168c:	b538      	push	{r3, r4, r5, lr}
 801168e:	4d07      	ldr	r5, [pc, #28]	; (80116ac <_fstat_r+0x20>)
 8011690:	2300      	movs	r3, #0
 8011692:	4604      	mov	r4, r0
 8011694:	4608      	mov	r0, r1
 8011696:	4611      	mov	r1, r2
 8011698:	602b      	str	r3, [r5, #0]
 801169a:	f7f3 fa00 	bl	8004a9e <_fstat>
 801169e:	1c43      	adds	r3, r0, #1
 80116a0:	d102      	bne.n	80116a8 <_fstat_r+0x1c>
 80116a2:	682b      	ldr	r3, [r5, #0]
 80116a4:	b103      	cbz	r3, 80116a8 <_fstat_r+0x1c>
 80116a6:	6023      	str	r3, [r4, #0]
 80116a8:	bd38      	pop	{r3, r4, r5, pc}
 80116aa:	bf00      	nop
 80116ac:	20004d64 	.word	0x20004d64

080116b0 <_isatty_r>:
 80116b0:	b538      	push	{r3, r4, r5, lr}
 80116b2:	4d06      	ldr	r5, [pc, #24]	; (80116cc <_isatty_r+0x1c>)
 80116b4:	2300      	movs	r3, #0
 80116b6:	4604      	mov	r4, r0
 80116b8:	4608      	mov	r0, r1
 80116ba:	602b      	str	r3, [r5, #0]
 80116bc:	f7f3 f9ff 	bl	8004abe <_isatty>
 80116c0:	1c43      	adds	r3, r0, #1
 80116c2:	d102      	bne.n	80116ca <_isatty_r+0x1a>
 80116c4:	682b      	ldr	r3, [r5, #0]
 80116c6:	b103      	cbz	r3, 80116ca <_isatty_r+0x1a>
 80116c8:	6023      	str	r3, [r4, #0]
 80116ca:	bd38      	pop	{r3, r4, r5, pc}
 80116cc:	20004d64 	.word	0x20004d64

080116d0 <_lseek_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4d07      	ldr	r5, [pc, #28]	; (80116f0 <_lseek_r+0x20>)
 80116d4:	4604      	mov	r4, r0
 80116d6:	4608      	mov	r0, r1
 80116d8:	4611      	mov	r1, r2
 80116da:	2200      	movs	r2, #0
 80116dc:	602a      	str	r2, [r5, #0]
 80116de:	461a      	mov	r2, r3
 80116e0:	f7f3 f9f8 	bl	8004ad4 <_lseek>
 80116e4:	1c43      	adds	r3, r0, #1
 80116e6:	d102      	bne.n	80116ee <_lseek_r+0x1e>
 80116e8:	682b      	ldr	r3, [r5, #0]
 80116ea:	b103      	cbz	r3, 80116ee <_lseek_r+0x1e>
 80116ec:	6023      	str	r3, [r4, #0]
 80116ee:	bd38      	pop	{r3, r4, r5, pc}
 80116f0:	20004d64 	.word	0x20004d64

080116f4 <_read_r>:
 80116f4:	b538      	push	{r3, r4, r5, lr}
 80116f6:	4d07      	ldr	r5, [pc, #28]	; (8011714 <_read_r+0x20>)
 80116f8:	4604      	mov	r4, r0
 80116fa:	4608      	mov	r0, r1
 80116fc:	4611      	mov	r1, r2
 80116fe:	2200      	movs	r2, #0
 8011700:	602a      	str	r2, [r5, #0]
 8011702:	461a      	mov	r2, r3
 8011704:	f7f3 f986 	bl	8004a14 <_read>
 8011708:	1c43      	adds	r3, r0, #1
 801170a:	d102      	bne.n	8011712 <_read_r+0x1e>
 801170c:	682b      	ldr	r3, [r5, #0]
 801170e:	b103      	cbz	r3, 8011712 <_read_r+0x1e>
 8011710:	6023      	str	r3, [r4, #0]
 8011712:	bd38      	pop	{r3, r4, r5, pc}
 8011714:	20004d64 	.word	0x20004d64

08011718 <_init>:
 8011718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801171a:	bf00      	nop
 801171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801171e:	bc08      	pop	{r3}
 8011720:	469e      	mov	lr, r3
 8011722:	4770      	bx	lr

08011724 <_fini>:
 8011724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011726:	bf00      	nop
 8011728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801172a:	bc08      	pop	{r3}
 801172c:	469e      	mov	lr, r3
 801172e:	4770      	bx	lr
